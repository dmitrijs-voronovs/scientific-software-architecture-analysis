quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"press = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetFile.html:2578,Clear,Clear,2578,root/html528/TXNetFile.html,https://root.cern,https://root.cern/root/html528/TXNetFile.html,2,['Clear'],['Clear']
Usability,"press = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXNetFile.html:2578,Clear,Clear,2578,root/html532/TXNetFile.html,https://root.cern,https://root.cern/root/html532/TXNetFile.html,1,['Clear'],['Clear']
Usability,"press = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const char* namec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXNetFile.html:2578,Clear,Clear,2578,root/html534/TXNetFile.html,https://root.cern,https://root.cern/root/html534/TXNetFile.html,1,['Clear'],['Clear']
Usability,"pressionListTList * ExpressionList()Return the list of user-defined expressions.Definition TTVLVContainer.cxx:361; TTVLVContainer::Cutconst char * Cut()Return the cut entry.Definition TTVLVContainer.cxx:334; TTVLVContainer::Ezconst char * Ez()Return the expression on Z.Definition TTVLVContainer.cxx:408; TTVLVContainer::Eyconst char * Ey()Return the expression on Y.Definition TTVLVContainer.cxx:394; TTVLVContainer::ScanListconst char * ScanList()Return the cut entry.Definition TTVLVContainer.cxx:422; TTVLVContainer::AddThisItemvirtual void AddThisItem(TTVLVEntry *item)Definition TTVLVContainer.h:124; TTVLVContainer::ExpressionItemTTVLVEntry * ExpressionItem(Int_t index)Return the expression item at specific position.Definition TTVLVContainer.cxx:348; TTVLVContainer::SetListViewvoid SetListView(TGListView *lv) overrideDefinition TTVLVContainer.h:134; TTVLVContainer::Exconst char * Ex()Return the expression on X.Definition TTVLVContainer.cxx:380; TTVLVContainer::EmptyAllvoid EmptyAll()Clear all names and aliases for expression type items.Definition TTVLVContainer.cxx:588; TTVLVContainer::RemoveNonStaticvoid RemoveNonStatic()Remove all non-static items from the list view, except expressions.Definition TTVLVContainer.cxx:609; TTVLVEntryThis class represent entries that goes into the TreeViewer listview container.Definition TTVLVContainer.h:56; TTVLVEntry::GetContextTGItemContext * GetContext()Definition TTVLVContainer.h:79; TTVLVEntry::SetSmallPicvoid SetSmallPic(const TGPicture *spic)Set small picture.Definition TTVLVContainer.cxx:288; TTVLVEntry::SetAliasvoid SetAlias(const char *alias)Definition TTVLVContainer.h:89; TTVLVEntry::SetToolTipTextvoid SetToolTipText(const char *text, Long_t delayms=1000)Set tool tip text associated with this item.Definition TTVLVContainer.cxx:275; TTVLVEntry::SetTrueNamevoid SetTrueName(const char *name)Definition TTVLVContainer.h:91; TTVLVEntry::IsCutbool IsCut()Definition TTVLVContainer.h:85; TTVLVEntry::ConvertAliasesconst char * Conver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:136901,Clear,Clear,136901,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['Clear'],['Clear']
Usability,"prevFCN = 26.37493079 m=2.259, p0=6.404e-10, ; prevFCN = 26.37493074 p0=6.286e-10, ; prevFCN = 26.37493074 p0=1.367e-14, s=0.2103, ; prevFCN = 26.3749307 s=0.2103, ; prevFCN = 26.37493077 f=0.2654, m=2.259, s=0.2103, ; prevFCN = 26.37493101 m=2.259, p0=1.589e-08, ; prevFCN = 26.37493123 p0=1.367e-14, s=0.2104, ; prevFCN = 26.37493103 f=0.2652, m=2.259, p0=1.589e-08, s=0.2103, ; prevFCN = 26.37493099 p0=1.367e-14, s=0.2104, ; prevFCN = 26.37493085 m=2.259, p0=1.589e-08, ; prevFCN = 26.37493105 p0=1.367e-14, s=0.2103, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; All Message streams; [0] MinLevel = PROGRESS Topic = Generation Minimization Plotting Fitting Integration LinkStateMgmt Eval Caching Optimization ObjectHandling InputArguments Tracing Contents DataHandling NumericIntegration FastEvaluations ; [1] MinLevel = INFO Topic = Minimization Plotting Fitting Eval Caching ObjectHandling InputArguments DataHandling NumericIntegration ; [2] MinLevel = INFO Topic = HistFactory ; [3] MinLevel = DEBUG Topic = LinkStateMgmt ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x7fc9cc0,g): adding server x(0x7032410) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x7fc9cc0,g): adding server m(0x6fa8f30) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x7fc9cc0,g): adding server s(0x6c756e0) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x7fc9cc0,g): adding server x(0x7032410) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x7fc9cc0,g): adding server m(0x6fa8f30) for value ; [#3] DEBUG:LinkStateMgmt -- RooAbsArg::addServer(0x7fc9cc0,g): adding server s(0x6c756e0) for value ; RooGaussian::g[ x=x mean=m sigma=s ] = 8.804e-26; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf506_msgservice.py. tutorialsroofitrf506_msgservice.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf506__msgservice_8py.html:26763,Guid,Guide,26763,doc/master/rf506__msgservice_8py.html,https://root.cern,https://root.cern/doc/master/rf506__msgservice_8py.html,1,['Guid'],['Guide']
Usability,"private . Definition at line 114 of file TSchemaRule.h. ◆ fInclude. TString ROOT::TSchemaRule::fInclude. private . Source data member vector (for searching purposes) ; Definition at line 111 of file TSchemaRule.h. ◆ fIncludeVect. TObjArray* ROOT::TSchemaRule::fIncludeVect. mutableprivate . Definition at line 112 of file TSchemaRule.h. ◆ fReadFuncPtr. ReadFuncPtr_t ROOT::TSchemaRule::fReadFuncPtr. private . Definition at line 115 of file TSchemaRule.h. ◆ fReadRawFuncPtr. ReadRawFuncPtr_t ROOT::TSchemaRule::fReadRawFuncPtr. private . Conversion function pointer for read rule. ; Definition at line 116 of file TSchemaRule.h. ◆ fRuleType. RuleType_t ROOT::TSchemaRule::fRuleType. private . Conversion function pointer for readraw rule. ; Definition at line 117 of file TSchemaRule.h. ◆ fSource. TString ROOT::TSchemaRule::fSource. private . Target data member vector (for searching purposes) ; Definition at line 109 of file TSchemaRule.h. ◆ fSourceClass. TString ROOT::TSchemaRule::fSourceClass. private . Source checksum vector (for searching purposes) ; Definition at line 105 of file TSchemaRule.h. ◆ fSourceVect. TObjArray* ROOT::TSchemaRule::fSourceVect. mutableprivate . Definition at line 110 of file TSchemaRule.h. ◆ fTarget. TString ROOT::TSchemaRule::fTarget. private . Definition at line 107 of file TSchemaRule.h. ◆ fTargetClass. TString ROOT::TSchemaRule::fTargetClass. private . Definition at line 106 of file TSchemaRule.h. ◆ fTargetVect. TObjArray* ROOT::TSchemaRule::fTargetVect. mutableprivate . Definition at line 108 of file TSchemaRule.h. ◆ fVersion. TString ROOT::TSchemaRule::fVersion. private . Definition at line 101 of file TSchemaRule.h. ◆ fVersionVect. std::vector<std::pair<Int_t, Int_t> >* ROOT::TSchemaRule::fVersionVect. mutableprivate . Definition at line 102 of file TSchemaRule.h. core/meta/inc/TSchemaRule.h; core/meta/src/TSchemaRule.cxx. ROOTTSchemaRule. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:29895,Guid,Guide,29895,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,1,['Guid'],['Guide']
Usability,"private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableWrappers(bool value = true); Enable call wrappers (also known as stubs) if value is true;; disable if value is false. void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:19523,Clear,ClearFileBusy,19523,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['Clear'],['ClearFileBusy']
Usability,"privatestatic; AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) overrideTUnixSystemvirtual; AnnounceUdpService(int port, int backlog) overrideTUnixSystemvirtual; AnnounceUnixService(int port, int backlog) overrideTUnixSystemvirtual; AnnounceUnixService(const char *sockpath, int backlog) overrideTUnixSystemvirtual; AppendPad(Option_t *option="""")TObjectvirtual; BaseName(const char *pathname)TSystemvirtual; Beep(Int_t freq=-1, Int_t duration=-1, Bool_t setDefault=kFALSE)TSystem; Browse(TBrowser *b)TObjectvirtual; cd(const char *path)TSysteminline; ChangeDirectory(const char *path) overrideTUnixSystemvirtual; CheckChilds()TUnixSystem; CheckDescriptors()TUnixSystem; CheckedHash()TObjectinline; CheckSignals(Bool_t sync)TUnixSystem; Chmod(const char *file, UInt_t mode) overrideTUnixSystemvirtual; Class()TUnixSystemstatic; Class_Name()TUnixSystemstatic; Class_Version()TUnixSysteminlinestatic; ClassName() constTObjectvirtual; CleanCompiledMacros()TSystemvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloseConnection(int sock, Bool_t force=kFALSE) overrideTUnixSystemvirtual; Closelog() overrideTUnixSystemvirtual; ClosePipe(FILE *pipe) overrideTUnixSystemvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; CompileMacro(const char *filename, Option_t *opt="""", const char *library_name="""", const char *build_dir="""", UInt_t dirmode=0)TSystemvirtual; ConcatFileName(const char *dir, const char *name)TSystemvirtual; ConnectService(const char *server, int port, int tcpwindowsize, const char *protocol=""tcp"")TUnixSystem; ConsistentWith(const char *path, void *dirptr=nullptr)TSystemprotectedvirtual; Copy(TObject &named) const overrideTNamedvirtual; CopyFile(const char *from, const char *to, Bool_t overwrite=kFALSE) overrideTUnixSystemvirtual; DeclFileName()TUnixSysteminlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirName(const char *pathname)TSystemvirtual; DispatchOne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem-members.html:1893,Clear,Clear,1893,doc/master/classTUnixSystem-members.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem-members.html,1,['Clear'],['Clear']
Usability,"probably because the data member was; 4468 // 'dropped' from the current schema) so let's no copy it in a random place.; 4469 return;; 4470 }; 4471 ; 4472 // TClonesArray master branch (has only the number of elements).; 4473 Int_t n;; 4474 b >> n;; 4475 if ((n < 0) || (n > fMaximum)) {; 4476 if (IsMissingCollection()) {; 4477 n = 0;; 4478 b.SetBufferOffset(b.Length()-sizeof(n));; 4479 } else {; 4480 Error(""ReadLeaves"", ""Incorrect size read for the container in %s\n\tThe size read is %d while the maximum is %d\n\tThe size is reset to 0 for this entry (%lld)"", GetName(), n, fMaximum, GetReadEntry());; 4481 n = 0;; 4482 }; 4483 }; 4484 fNdata = n;; 4485 TClonesArray* clones = (TClonesArray*) fObject;; 4486 if (clones->IsZombie()) {; 4487 return;; 4488 }; 4489 // The salient part of Clear is now 'duplicated in ExpandCreateFast (i.e. the; 4490 // setting to zero of the unused slots), so we no longer need to call Clear explicitly; 4491 // clones->Clear();; 4492 clones->ExpandCreateFast(fNdata);; 4493}; 4494 ; 4495////////////////////////////////////////////////////////////////////////////////; 4496/// Read leaves into i/o buffers for this branch.; 4497/// Case of a data member within a TClonesArray (fType == 31).; 4498 ; 4499void TBranchElement::ReadLeavesClonesMember(TBuffer& b); 4500{; 4501 // No need to validate the address here, if we are a member of a split ClonesArray,; 4502 // fID is positive; 4503 // ValidateAddress();; 4504 ; 4505 if (fObject == nullptr); 4506 {; 4507 // We have nowhere to copy the data (probably because the data member was; 4508 // 'dropped' from the current schema) so let's no copy it in a random place.; 4509 return;; 4510 }; 4511 ; 4512 // TClonesArray sub-branch (contains the elements).; 4513 fNdata = fBranchCount->GetNdata();; 4514 TClonesArray* clones = (TClonesArray*) fObject;; 4515 if (clones->IsZombie()) {; 4516 return;; 4517 }; 4518 TStreamerInfo *info = GetInfoImp();; 4519 if (info==nullptr) return;; 4520 // Since info is not null, fR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:166140,Clear,Clear,166140,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,2,['Clear'],['Clear']
Usability,"processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *opt="""");  Detach this instance to its proofserv. ;  ; void DisableGoAsyn ();  Signal to disable related switches. ;  ; Int_t DownloadPackage (const char *par, const char *dstdir=0);  Download a PROOF archive (PAR file) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:7687,Clear,ClearPackage,7687,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['Clear'],['ClearPackage']
Usability,"producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for tools setting limits (producing confidence intervals); RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModule MCStudy module to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses iostream data into tokens; RooStringVar String-valued variable ; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:45435,simpl,simple,45435,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,4,"['Simpl', 'simpl']","['SimpleInterval', 'simple']"
Usability,"production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.05 # The preskimmed dataset contains only 0.5 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.1f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html:1402,usab,usable,1402,doc/master/df107__SingleTopAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html,1,['usab'],['usable']
Usability,"proofquerylog"", const char* dstab = 0, const char* filestab = 0); virtual~TProofMonSenderSQL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofMonSenderSQL.html:897,Clear,Clear,897,root/html532/TProofMonSenderSQL.html,https://root.cern,https://root.cern/root/html532/TProofMonSenderSQL.html,2,['Clear'],['Clear']
Usability,"propagation). Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void UpdatePValue(const RooStats::SamplingDistribution* distr, Double_t& pvalue, Double_t& perror, Bool_t pIsRightTail); updates the pvalue if sufficient data is available. void Print(const Option_t* = """") const; Print out some information about the results; Note: use Alt/Null labels for the hypotheses here as the Null; might be the s+b hypothesis. Double_t NullPValue() const; Return p-value for null hypothesis. { return fNullPValue; }. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. { return fAlternatePValue; }. Double_t CLb() const; Convert NullPValue into a ""confidence level"". { return !fBackgroundIsAlt ? NullPValue() : AlternatePValue(); }. Double_t CLsplusb() const; Convert AlternatePValue into a ""confidence level"". { return !fBackgroundIsAlt ? AlternatePValue() : NullPValue(); }. Double_t CLs() const; CLs is simply CLs+b/CLb (not a method, but a quantity). Double_t Significance() const; familiar name for the Null p-value in terms of 1-sided Gaussian significance. {return RooStats::PValueToSignificance( NullPValue() ); }. SamplingDistribution* GetNullDistribution(void); { return fNullDistr; }. SamplingDistribution* GetAltDistribution(void); { return fAltDistr; }. RooDataSet* GetNullDetailedOutput(void); { return fNullDetailedOutput; }. RooDataSet* GetAltDetailedOutput(void); { return fAltDetailedOutput; }. RooDataSet* GetFitInfo(void); { return fFitInfo; }. Double_t GetTestStatisticData(void); { return fTestStatisticData; }. const RooArgList* GetAllTestStatisticsData(void); { return fAllTestStatisticsData; }. void SetAltDetailedOutput(RooDataSet* d); { fAltDetailedOutput = d; }. void SetNullDetailedOutput(RooDataSet* d); { fNullDetailedOutput = d; }. void SetFitInfo(RooDataSet* d); { fFitInfo = d; }. Bool_t GetPValueIsRightTail(void); { return fPValueIsRightTail; }. void SetBackgroundAsAlt(Bool_t l ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestResult.html:11183,simpl,simply,11183,root/html602/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestResult.html,2,['simpl'],['simply']
Usability,"property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heavyside Your description goes here...; RooStats::HybridCalculator Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:42082,simpl,simple,42082,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['simpl'],['simple']
Usability,"property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ;  ; void ClearWindow () override;  Clears the entire area of the current window. ;  ; void ClearWindow (Window_t id) override;  Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; void CloseDisplay () override;  Closes connection to display server and destroys all windows. ;  ; void ClosePixmap () override;  Deletes current pixmap. ;  ; void CloseWindow () override;  Deletes current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:2360,Clear,ClearWindow,2360,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,2,['Clear'],"['ClearWindow', 'Clears']"
Usability,"propriate relationships and then instantiate an RDataFrame; 1327with the main tree:; 1328 ; 1329~~~{.cpp}; 1330TTree main([...]);; 1331TTree friend([...]);; 1332main.AddFriend(&friend, ""myFriend"");; 1333 ; 1334RDataFrame df(main);; 1335auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1336~~~; 1337 ; 1338The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1339or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1340""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1341 ; 1342\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1343 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1344 one: rows will be mismatched.; 1345 ; 1346Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1347When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1348""index"" columns have a value identical to the one in the main one. For example, in Python:; 1349 ; 1350~~~{.py}; 1351main_tree = ...; 1352aux_tree = ...; 1353 ; 1354# If a friend tree has an index on `commonColumn`, when the main tree loads; 1355# a given row, it also loads the row of the friend tree that has the same; 1356# value of `commonColumn`; 1357aux_tree.BuildIndex(""commonColumn""); 1358 ; 1359mainTree.AddFriend(aux_tree); 1360 ; 1361df = ROOT.RDataFrame(mainTree); 1362~~~; 1363 ; 1364RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1365 ; 1366\anchor other-file-formats; 1367### Reading data formats other than ROOT trees; 1368RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an AP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:78155,simpl,simple,78155,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"propriate relationships and then instantiate an RDataFrame; 1367with the main tree:; 1368 ; 1369~~~{.cpp}; 1370TTree main([...]);; 1371TTree friend([...]);; 1372main.AddFriend(&friend, ""myFriend"");; 1373 ; 1374RDataFrame df(main);; 1375auto df2 = df.Filter(""myFriend.MyCol == 42"");; 1376~~~; 1377 ; 1378The same applies for TChains. Columns coming from the friend trees can be referred to by their full name, like in the example above,; 1379or the friend tree name can be omitted in case the column name is not ambiguous (e.g. ""MyCol"" could be used instead of; 1380""myFriend.MyCol"" in the example above if there is no column ""MyCol"" in the main tree).; 1381 ; 1382\note A common source of confusion is that trees that are written out from a multi-thread Snapshot() call will have their; 1383 entries (block-wise) shuffled with respect to the original tree. Such trees cannot be used as friends of the original; 1384 one: rows will be mismatched.; 1385 ; 1386Indexed friend trees provide a way to perform simple joins of multiple trees over a common column.; 1387When a certain entry in the main tree (or chain) is loaded, the friend trees (or chains) will then load an entry where the; 1388""index"" columns have a value identical to the one in the main one. For example, in Python:; 1389 ; 1390~~~{.py}; 1391main_tree = ...; 1392aux_tree = ...; 1393 ; 1394# If a friend tree has an index on `commonColumn`, when the main tree loads; 1395# a given row, it also loads the row of the friend tree that has the same; 1396# value of `commonColumn`; 1397aux_tree.BuildIndex(""commonColumn""); 1398 ; 1399mainTree.AddFriend(aux_tree); 1400 ; 1401df = ROOT.RDataFrame(mainTree); 1402~~~; 1403 ; 1404RDataFrame supports indexed friend TTrees from ROOT v6.24 in single-thread mode and from v6.28/02 in multi-thread mode.; 1405 ; 1406\anchor other-file-formats; 1407### Reading data formats other than ROOT trees; 1408RDataFrame can be interfaced with RDataSources. The ROOT::RDF::RDataSource interface defines an AP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:79835,simpl,simple,79835,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,protected . Definition at line 44 of file TGLAutoRotator.h. ◆ fDt. Double_t TGLAutoRotator::fDt. protected . Definition at line 39 of file TGLAutoRotator.h. ◆ fImageAutoSave. Bool_t TGLAutoRotator::fImageAutoSave. protected . Definition at line 49 of file TGLAutoRotator.h. ◆ fImageCount. Int_t TGLAutoRotator::fImageCount. protected . Definition at line 48 of file TGLAutoRotator.h. ◆ fImageGUIBaseName. TString TGLAutoRotator::fImageGUIBaseName. protected . Definition at line 51 of file TGLAutoRotator.h. ◆ fImageGUIOutMode. Int_t TGLAutoRotator::fImageGUIOutMode. protected . Definition at line 52 of file TGLAutoRotator.h. ◆ fImageName. TString TGLAutoRotator::fImageName. protected . Definition at line 47 of file TGLAutoRotator.h. ◆ fRotateScene. Bool_t TGLAutoRotator::fRotateScene. protected . Definition at line 35 of file TGLAutoRotator.h. ◆ fThetaA0. Double_t TGLAutoRotator::fThetaA0. protected . Definition at line 44 of file TGLAutoRotator.h. ◆ fTimer. TTimer* TGLAutoRotator::fTimer. protected . Definition at line 32 of file TGLAutoRotator.h. ◆ fTimerRunning. Bool_t TGLAutoRotator::fTimerRunning. protected . Definition at line 45 of file TGLAutoRotator.h. ◆ fViewer. TGLViewer* TGLAutoRotator::fViewer. protected . Definition at line 30 of file TGLAutoRotator.h. ◆ fWatch. TStopwatch* TGLAutoRotator::fWatch. protected . Definition at line 33 of file TGLAutoRotator.h. ◆ fWDolly. Double_t TGLAutoRotator::fWDolly. protected . Definition at line 42 of file TGLAutoRotator.h. ◆ fWPhi. Double_t TGLAutoRotator::fWPhi. protected . Definition at line 40 of file TGLAutoRotator.h. ◆ fWTheta. Double_t TGLAutoRotator::fWTheta. protected . Definition at line 41 of file TGLAutoRotator.h. Libraries for TGLAutoRotator:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLAutoRotator.h; graf3d/gl/src/TGLAutoRotator.cxx. TGLAutoRotator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAutoRotator.html:22861,Guid,Guide,22861,doc/master/classTGLAutoRotator.html,https://root.cern,https://root.cern/doc/master/classTGLAutoRotator.html,1,['Guid'],['Guide']
Usability,"protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sample, Error in quantity. ; Definition at line 45 of file TMultiDimFit.h. ◆ fTestVariables. TVectorD TMultiDimFit::fTestVariables. protected . Test sample, independent variables. ; Definition at line 46 of file TMultiDimFit.h. ◆ fVariables. TVectorD TMultiDimFit::fVariables. protected . Training sample, independent variables. ; Definition at line 36 of file TMultiDimFit.h. Libraries for TMultiDimFit:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TMultiDimFit.h; hist/hist/src/TMultiDimFit.cxx. TMultiDimFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:70077,Guid,Guide,70077,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['Guid'],['Guide']
Usability,"protected:. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance Chart:. TObject. ←; TXMLPlayer. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void Writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLPlayer.html:10907,simpl,simple,10907,root/html602/TXMLPlayer.html,https://root.cern,https://root.cern/root/html602/TXMLPlayer.html,2,['simpl'],['simple']
Usability,"protected:. static Bool_t_clearObsListClear obslist on sterilize?; Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen! ; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooObjCacheManager.html:3807,clear,clearCacheOnServerRedirect,3807,root/html530/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html530/RooObjCacheManager.html,2,['clear'],"['clearCacheOnServerRedirect', 'cleared']"
Usability,"protectedvirtual . Calculate and return value of \( a_n * \prod_{i=0}^{n-1} (1 - a_i) \). ; Implements RooAbsReal.; Definition at line 77 of file RooRecursiveFraction.cxx. ◆ IsA(). TClass * RooRecursiveFraction::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 42 of file RooRecursiveFraction.h. ◆ Streamer(). void RooRecursiveFraction::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRecursiveFraction::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file RooRecursiveFraction.h. ◆ translate(). void RooRecursiveFraction::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 91 of file RooRecursiveFraction.cxx. Member Data Documentation. ◆ _list. RooListProxy RooRecursiveFraction::_list. protected . Definition at line 38 of file RooRecursiveFraction.h. Libraries for RooRecursiveFraction:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRecursiveFraction.h; roofit/roofitcore/src/RooRecursiveFraction.cxx. RooRecursiveFraction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRecursiveFraction.html:63543,Guid,Guide,63543,doc/master/classRooRecursiveFraction.html,https://root.cern,https://root.cern/doc/master/classRooRecursiveFraction.html,1,['Guid'],['Guide']
Usability,"proxy class ROOT::Math::RootFinder which creates behind the chosen algorithms which are implemented using the ROOT::Math::IRootFinderMethod interface . Classes; class  ROOT::Math::Roots::Bisection;  Roots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one. More...;  ; class  ROOT::Math::Roots::Brent;  Brent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information. More...;  ; class  ROOT::Math::BrentRootFinder;  Class for finding the root of a one dimensional function using the Brent algorithm. More...;  ; class  ROOT::Math::Roots::FalsePos;  False Position algorithm based on linear interpolation. More...;  ; class  ROOT::Math::GSLRootFdFSolver;  Root-Finder with derivatives implementation class using GSL. More...;  ; class  ROOT::Math::GSLRootFinder;  Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. More...;  ; class  ROOT::Math::GSLRootFinderDeriv;  Base class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives. More...;  ; class  ROOT::Math::GSLRootFSolver;  Root-Finder implementation class using GSL. More...;  ; class  ROOT::Math::IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  ROOT::Math::Roots::Newton;  a Newton algorithm, which computes the derivative at each iteration See the GSL manual for more information More...;  ; class  ROOT::Math::RootFinder;  User Class to find the Root of one dimensional functions. More...;  ; class  ROOT::Math::Roots::Secant;  Secant algorithm, simplified version of Newton method, which does not require the derivative at every step. More...;  ; class  ROOT::Math::Roots::Steffenson;  Steffenson method, providing the fastes convergence. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__RootFinders.html:2075,simpl,simplified,2075,doc/master/group__RootFinders.html,https://root.cern,https://root.cern/doc/master/group__RootFinders.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,"ps and Tricks | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Git Tips and Tricks. Overview; This page gives some helpful hints and tricks on using git, along with a suggested work-flow, wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:1009,Guid,Guides,1009,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['Guid'],['Guides']
Usability,"ps://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candledecay.C Candle Decay, illustrate a time development of a certain value ;  candlehisto.C Example showing how to combine the various candle plot options ;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotoption.C Example showing how to combine the various candle plot options ;  candleplotstack.C Example showing how a THStack with candle plot option ;  candleplotwhiskers.C Example of candle plot showing the whiskers definition ;  ContourList.C Getting Contours From TH2D ;  cumulative.C Il",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:121729,simpl,simple,121729,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['simpl'],['simple']
Usability,"ps://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candledecay.C Candle Decay, illustrate a time development of a certain value ;  candlehisto.C Example showing how to combine the various candle plot options ;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotoption.C Example showing how to combine the various candle plot options ;  candleplotstack.C Example showing how a THStack with candle plot option ;  candleplotwhiskers.C Example of candle plot showing the whiskers definition ;  candlescaled.C Candle Scaled, illustrates what scaleing doe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:120656,simpl,simple,120656,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['simpl'],['simple']
Usability,"ps://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileName ;  QtMultiFileDialog.CThis is a small ROOT macro to use Qt 3.3 class :QFileDialog See: https://doc.qt.io/archives/3.3/qfiledialog.html#getOpenFileNames ;  QtPrintDialog.CThis is a small ROOT macro to use Qt 3.3 class: QPrinter to setup the printer via Qt ""setup printer dialog"" See: Printer setup dialog box and print out the ROOT TCanvas object either via the ""can"" pointer provided or the current one ;  simpleTableTest.CThis TableTest class is a simple example of how to use a TGSimpleTable that creates and owns it's own TGSimpleTableInterface ;  Slider3Demo.CSimple macro showing capabilities of triple slider ;  splitbuttonTest.CA simple example that shows the usage of a TGSplitButton ;  splitterHorizontal.CThis macro gives an example of how to create a horizontal splitter ;  splitterVertical.CThis macro gives an example of how to create a vertical splitter ;  staffTableTest.CThis TableTest class is a simple example of how to use a TGTable with a TTreeTableInterface ;  statusBar.CThis macro gives an example of how to create a status bar related to an embedded canvas that shows the info of the selected object, exactly as the status bar of any canvas window ;  textEntries.CThis macro gives an example of how to set/change text entry attributes ;  textviewostream.CThis macro gives an example of how to use the TGTextViewostream widget ;  WorldMap.CThis macro shows how to use a TGImageMap class ;  ► hist;  candleplot.C Example of candle plot with 2-D histograms ;  candleplotoption.C Example showing how to combine the various candle plot options ;  candleplotstack.C Example showing how a THStack with candle plot option ;  candleplotwhiskers.C Example of candle plot showing the whiskers definition ;  ContourList.C Getting Contours From TH2D ;  cumulative.C Illustrate use of the TH1::GetCumulative method ;  draw2dopt.C Display the various 2-d drawing options ;  DynamicSlice.C Show the slice of a TH2 following the mou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:120962,simpl,simple,120962,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['simpl'],['simple']
Usability,"pt the same min. ;  ; void SetGlobalScale (bool gl);  Constraint all axes to the same scale. ;  ; void SetInitEntries (TEntryList *entries);  ; void SetLineColor (Color_t col);  ; void SetLineWidth (Width_t wid);  ; void SetLiveRangesUpdate (bool);  If true, the pad is updated while the motion of a dragged range. ;  ; void SetNentries (Long64_t n);  ; void SetTree (TTree *tree);  ; void SetVertDisplay (bool vert=true);  Set the vertical or horizontal display. ;  ; void SetWeightCut (Int_t w=0);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnzoomAll ();  Unzoom all variables. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:12263,Clear,Clear,12263,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['Clear'],['Clear']
Usability,"pt.Contains(""same"")) {; 756 lsame = kTRUE;; 757 opt.ReplaceAll(""same"","""");; 758 }; 759 Bool_t lclear = kTRUE;; 760 if (opt.Contains(""noclear"")) {; 761 lclear = kFALSE;; 762 opt.ReplaceAll(""noclear"","""");; 763 }; 764 if (opt.Contains(""pads"")) {; 765 if (!paint); 766 return;; 767 ; 768 Int_t npads = fHists->GetSize();; 769 TVirtualPad *padsav = gPad;; 770 //if pad is not already divided into subpads, divide it; 771 Int_t nps = 0;; 772 TIter nextp(padsav->GetListOfPrimitives());; 773 while (auto obj = nextp()) {; 774 if (obj->InheritsFrom(TVirtualPad::Class())); 775 nps++;; 776 }; 777 if (nps < npads) {; 778 padsav->Clear();; 779 Int_t nx = (Int_t)TMath::Sqrt((Double_t)npads);; 780 if (nx*nx < npads) nx++;; 781 Int_t ny = nx;; 782 if (((nx*ny)-nx) >= npads) ny--;; 783 padsav->Divide(nx,ny);; 784 }; 785 ; 786 Int_t i = 1;; 787 auto lnk = fHists->FirstLink();; 788 while (lnk) {; 789 auto subpad = padsav->GetPad(i++);; 790 if (!subpad) break;; 791 subpad->Clear();; 792 subpad->Add(lnk->GetObject(), lnk->GetOption());; 793 lnk = lnk->Next();; 794 }; 795 padsav->cd();; 796 return;; 797 }; 798 ; 799 // compute the min/max of each axis; 800 TH1 *h;; 801 TIter next(fHists);; 802 Double_t xmin = 1e100;; 803 Double_t xmax = -xmin;; 804 Double_t ymin = 1e100;; 805 Double_t ymax = -xmin;; 806 while ((h=(TH1*)next())) {; 807 // in case of automatic binning; 808 if (h->GetBuffer()) h->BufferEmpty(-1);; 809 if (h->GetXaxis()->GetXmin() < xmin) xmin = h->GetXaxis()->GetXmin();; 810 if (h->GetXaxis()->GetXmax() > xmax) xmax = h->GetXaxis()->GetXmax();; 811 if (h->GetYaxis()->GetXmin() < ymin) ymin = h->GetYaxis()->GetXmin();; 812 if (h->GetYaxis()->GetXmax() > ymax) ymax = h->GetYaxis()->GetXmax();; 813 }; 814 ; 815 TString loption = opt;; 816 Bool_t nostack = loption.Contains(""nostack"");; 817 Bool_t nostackb = loption.Contains(""nostackb"");; 818 Bool_t candle = loption.Contains(""candle"");; 819 Bool_t violin = loption.Contains(""violin"");; 820 ; 821 ; 822 if (!nostack && !candle && !violin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8cxx_source.html:25963,Clear,Clear,25963,doc/master/THStack_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THStack_8cxx_source.html,2,['Clear'],['Clear']
Usability,"pt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPolyLine3DA 3-dimensional polyline.Definition TPolyLine3D.h:33; TPolyLine3D::SetPointvirtual void SetPoint(Int_t point, Double_t x, Double_t y, Double_t z)Set point n to x, y, z.Definition TPolyLine3D.cxx:595; TPolyLine3D::Drawvoid Draw(Option_t *option="""") overrideDraw this 3-D polyline with its current attributes.Definition TPolyLine3D.cxx:298; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Math::UnitSVector< T, D > Unit(const SVector< T, D > &rhs)Unit.Definition Functions.h:382; ROOT::Math::Mag2T Mag2(const SVector< T, D > &rhs)Vector magnitude square Template to compute .Definition Functions.h:230; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; ROOT::MathDefinition HFitInterface.h:34; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; AuthorLorenzo Moneta ; Definition in file line3Dfit.C. tutorialsfitline3Dfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/line3Dfit_8C.html:9625,Guid,Guide,9625,doc/master/line3Dfit_8C.html,https://root.cern,https://root.cern/doc/master/line3Dfit_8C.html,1,['Guid'],['Guide']
Usability,"ptimize)))) return;; 2983 fOptimized = kFALSE;; 2984 fNdata = 0;; 2985 fNfulldata = 0;; 2986 ; 2987 TObjArray* infos = (TObjArray*) gROOT->GetListOfStreamerInfo();; 2988 if (fNumber < 0) {; 2989 ++fgCount;; 2990 fNumber = fgCount;; 2991 }; 2992 if (fNumber >= infos->GetSize()) {; 2993 infos->AddAtAndExpand(this, fNumber);; 2994 } else {; 2995 if (!infos->At(fNumber)) {; 2996 infos->AddAt(this, fNumber);; 2997 }; 2998 }; 2999 ; 3000 assert(fComp == 0 && fCompFull == 0 && fCompOpt == 0);; 3001 ; 3002 ; 3003 Int_t ndata = fElements->GetEntriesFast();; 3004 ; 3005 ; 3006 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 3007 else fReadObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3008 ; 3009 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 3010 else fWriteObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3011 ; 3012 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 3013 else fReadMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3014 ; 3015 if (fReadText) fReadText->fActions.clear();; 3016 else fReadText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3017 ; 3018 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 3019 else fWriteMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3020 ; 3021 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 3022 else fReadMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3023 ; 3024 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 3025 else fWriteMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3026 ; 3027 if (fWriteText) fWriteText->fActions.clear();; 3028 else fWriteText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3029 ; 3030 if (!ndata) {; 3031 // This may be the case for empty classes (e.g., TAtt3D).; 3032 // We still need to properly set the size of emulated classes (i.e. add the virtual table);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:131930,clear,clear,131930,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['clear'],['clear']
Usability,"ption = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*CreateDefaultWindowSlot(); static TEveWindowSlot*CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*CreateWindowMainFrame(TEveWindow* eve_parent = 0); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveWindow.html:2465,Clear,ClearStamps,2465,root/html530/TEveWindow.html,https://root.cern,https://root.cern/root/html530/TEveWindow.html,5,['Clear'],['ClearStamps']
Usability,"ption = """"); const. inlineoverridevirtual . Print TNamed name and title. ; Reimplemented from TNamed.; Definition at line 74 of file TProofPerfAnalysis.cxx. Member Data Documentation. ◆ fBytesRead. Long64_t TProofPerfAnalysis::TWrkInfo::fBytesRead. Definition at line 57 of file TProofPerfAnalysis.cxx. ◆ fCpuTime. Double_t TProofPerfAnalysis::TWrkInfo::fCpuTime. Definition at line 60 of file TProofPerfAnalysis.cxx. ◆ fEventsProcessed. Long64_t TProofPerfAnalysis::TWrkInfo::fEventsProcessed. Definition at line 56 of file TProofPerfAnalysis.cxx. ◆ fLatency. Double_t TProofPerfAnalysis::TWrkInfo::fLatency. Definition at line 58 of file TProofPerfAnalysis.cxx. ◆ fLatencyT. TGraph* TProofPerfAnalysis::TWrkInfo::fLatencyT. Definition at line 69 of file TProofPerfAnalysis.cxx. ◆ fMBRateRemoteT. TGraph* TProofPerfAnalysis::TWrkInfo::fMBRateRemoteT. Definition at line 68 of file TProofPerfAnalysis.cxx. ◆ fMBRateT. TGraph* TProofPerfAnalysis::TWrkInfo::fMBRateT. Definition at line 67 of file TProofPerfAnalysis.cxx. ◆ fPackets. Int_t TProofPerfAnalysis::TWrkInfo::fPackets. Definition at line 54 of file TProofPerfAnalysis.cxx. ◆ fProcTime. Double_t TProofPerfAnalysis::TWrkInfo::fProcTime. Definition at line 59 of file TProofPerfAnalysis.cxx. ◆ fRateRemoteT. TGraph* TProofPerfAnalysis::TWrkInfo::fRateRemoteT. Definition at line 66 of file TProofPerfAnalysis.cxx. ◆ fRateT. TGraph* TProofPerfAnalysis::TWrkInfo::fRateT. Definition at line 65 of file TProofPerfAnalysis.cxx. ◆ fRemotePackets. Int_t TProofPerfAnalysis::TWrkInfo::fRemotePackets. Definition at line 55 of file TProofPerfAnalysis.cxx. ◆ fStart. Float_t TProofPerfAnalysis::TWrkInfo::fStart. Definition at line 62 of file TProofPerfAnalysis.cxx. ◆ fStop. Float_t TProofPerfAnalysis::TWrkInfo::fStop. Definition at line 63 of file TProofPerfAnalysis.cxx. proof/proofbench/src/TProofPerfAnalysis.cxx. TProofPerfAnalysisTWrkInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfo.html:14179,Guid,Guide,14179,doc/master/classTProofPerfAnalysis_1_1TWrkInfo.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfo.html,1,['Guid'],['Guide']
Usability,"ption = kRaisedFrame|kDoubleBorder); TGPictureButton(const TGWindow* p, const TGPicture* pic, const char* cmd, Int_t id = -1, GContext_t norm = GetDefaultGC()(), UInt_t option = kRaisedFrame|kDoubleBorder); virtual~TGPictureButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGPictureButton.html:4260,Clear,Clear,4260,root/html528/TGPictureButton.html,https://root.cern,https://root.cern/root/html528/TGPictureButton.html,4,['Clear'],['Clear']
Usability,"ption as used on the command line. ; The main purpose of this string is to be presented to the user in messages.; In the case of a long option, this is the actual argv pointer, i.e. the first character is a '-'. In the case of a short option this points to the option character within the argv string.; Note that in the case of a short option group or an attached option argument, this string will contain additional characters following the actual name. Use namelen to filter out the actual option name only. ; Definition at line 492 of file OptionParser.h. ◆ namelen. int ROOT::option::Option::namelen. The length of the option name. ; Because name points into the actual argv string, the option name may be followed by more characters (e.g. other short options in the same short option group). This value is the number of bytes (not characters!) that are part of the actual name.; For a short option, this length is always 1. For a long option this length is always at least 2 if single minus long options are permitted and at least 3 if they are disabled.; NoteIn the pathological case of a minus within a short option group (e.g. -xf-z), this length is incorrect, because this case will be misinterpreted as a long option and the name will therefore extend to the string's 0-terminator or a following '="" character if there is one. This is irrelevant for most uses of name and namelen. If you really need to distinguish the case of a long and a short option, compare name to the argv pointers. A long option's name is always identical to one of them, whereas a short option's is never. ; Definition at line 521 of file OptionParser.h. ◆ next_. Option* ROOT::option::Option::next_. private . Definition at line 455 of file OptionParser.h. ◆ prev_. Option* ROOT::option::Option::prev_. private . Definition at line 456 of file OptionParser.h. core/dictgen/res/OptionParser.h. ROOToptionOption. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:14:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html:15856,Guid,Guide,15856,doc/v632/classROOT_1_1option_1_1Option.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Option.html,1,['Guid'],['Guide']
Usability,"ption(). template<typename T > . virtual TMVA::Option< T * >::~Option ; (; ). inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 137 of file Option.h. Member Function Documentation. ◆ GetArraySize(). template<typename T > . virtual Int_t TMVA::Option< T * >::GetArraySize ; (; ); const. inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 146 of file Option.h. ◆ GetValue(). template<typename T > . TString TMVA::Option< T * >::GetValue ; (; Int_t ; i); const. inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 139 of file Option.h. ◆ IsArrayOpt(). template<typename T > . virtual Bool_t TMVA::Option< T * >::IsArrayOpt ; (; ); const. inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 145 of file Option.h. ◆ Print(). template<class T > . void TMVA::Option< T * >::Print ; (; std::ostream & ; os, . Int_t ; levelofdetail = 0 . ); const. inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 266 of file Option.h. ◆ SetValue(). template<class T > . Bool_t TMVA::Option< T * >::SetValue ; (; const TString & ; vs, . Int_t ; i = 0 . ). inlinevirtual . set value for option ; Reimplemented from TMVA::OptionBase.; Definition at line 297 of file Option.h. ◆ Value() [1/2]. template<typename T > . T & TMVA::Option< T * >::Value ; (; Int_t ; i). inline . Definition at line 153 of file Option.h. ◆ Value() [2/2]. template<typename T > . const T & TMVA::Option< T * >::Value ; (; Int_t ; i); const. inlinevirtual . Reimplemented from TMVA::Option< T >.; Definition at line 144 of file Option.h. Member Data Documentation. ◆ fSize. template<typename T > . Int_t TMVA::Option< T * >::fSize. Definition at line 155 of file Option.h. ◆ fVRefPtr. template<typename T > . T** TMVA::Option< T * >::fVRefPtr. Definition at line 154 of file Option.h. tmva/tmva/inc/TMVA/Option.h. TMVAOption< T * >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html:14021,Guid,Guide,14021,doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html,1,['Guid'],['Guide']
Usability,"ption). Draw a bar char in a rotated pad (X vertical, Y horizontal).; . void PaintBoxes(Option_t* option). Control function to draw a 2D histogram as a box plot.; . void PaintCandlePlot(Option_t* option). Control function to draw a 2D histogram as a candle (box) plot.; . void PaintViolinPlot(Option_t* option). Control function to draw a 2D histogram as a violin plot.; . void PaintColorLevels(Option_t* option). Control function to draw a 2D histogram as a color plot.; . void PaintContour(Option_t* option). Control function to draw a 2D histogram as a contour plot.; . Int_t PaintContourLine(Double_t elev1, Int_t icont1, Double_t x1, Double_t y1, Double_t elev2, Int_t icont2, Double_t x2, Double_t y2, Double_t* xarr, Double_t* yarr, Int_t* itarr, Double_t* levels). Fill the matrix XARR YARR for Contour Plot.; ; . void PaintErrors(Option_t* option). Draw 1D histograms error bars.; . void Paint2DErrors(Option_t* option). Draw 2D histograms errors.; ; . void PaintFrame(). Calculate range and clear pad (canvas).; ; . void PaintFunction(Option_t* option). Paint functions associated to an histogram.; . void PaintHist(Option_t* option). Control routine to draw 1D histograms.; . void PaintH3(Option_t* option = """"). Control function to draw a 3D histograms.; . Int_t PaintInit(). Compute histogram parameters used by the drawing routines.; ; . Int_t PaintInitH(). Compute histogram parameters used by the drawing routines for a rotated pad.; ; . void PaintH3Iso(). Control function to draw a 3D histogram with Iso Surfaces.; . void PaintLego(Option_t* option). Control function to draw a 2D histogram as a lego plot.; . void PaintLegoAxis(TGaxis* axis, Double_t ang). Draw the axis for legos and surface plots.; ; . void PaintPalette(). Paint the color palette on the right side of the pad.; . void PaintScatterPlot(Option_t* option). Control function to draw a 2D histogram as a scatter plot.; . void PaintSpecialObjects(const TObject* obj, Option_t* option). Static function to paint specia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:90853,clear,clear,90853,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,3,['clear'],['clear']
Usability,"ption, . const char * ; wildcard, . Int_t ; recurse = 1 . ); const. inlineoverridevirtual . Print the collection header and its elements that match the wildcard. ; If recurse is non-zero, descend into printing of collection-entries with recurse - 1. This means, if recurse is negative, the recursion is infinite.; Option is passed recursively, but wildcard is only used on the first level. ; Reimplemented from TCollection.; Definition at line 41 of file TProofOutputList.h. ◆ Print() [2/4]. void TProofOutputList::Print ; (; Option_t * ; option, . Int_t ; recurse . ); const. inlineoverridevirtual . Print the collection header and its elements. ; If recurse is non-zero, descend into printing of collection-entries with recurse - 1. This means, if recurse is negative, the recursion is infinite.; Option is passed recursively. ; Reimplemented from TCollection.; Definition at line 39 of file TProofOutputList.h. ◆ Print() [3/4]. void TProofOutputList::Print ; (; Option_t * ; option, . TPRegexp & ; regexp, . Int_t ; recurse = 1 . ); const. inlineoverridevirtual . Print the collection header and its elements that match the regexp. ; If recurse is non-zero, descend into printing of collection-entries with recurse - 1. This means, if recurse is negative, the recursion is infinite.; Option is passed recursively, but regexp is only used on the first level. ; Reimplemented from TCollection.; Definition at line 43 of file TProofOutputList.h. ◆ Print() [4/4]. void TProofOutputList::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the content of the list. ; Reimplemented from TCollection.; Definition at line 115 of file TProofOutputList.cxx. Member Data Documentation. ◆ fDontShow. TList* TProofOutputList::fDontShow. private . Definition at line 29 of file TProofOutputList.h. proof/proof/inc/TProofOutputList.h; proof/proof/src/TProofOutputList.cxx. TProofOutputList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputList.html:22680,Guid,Guide,22680,doc/master/classTProofOutputList.html,https://root.cern,https://root.cern/doc/master/classTProofOutputList.html,1,['Guid'],['Guide']
Usability,"ption.Logy;; 4544 logzsav = Hoption.Logz;; 4545 Hoption.Logz = 0;; 4546 if (Hoption.Logy) {; 4547 Hoption.Logz = 1;; 4548 Hoption.Logy = 0;; 4549 }; 4550 }; 4551 PaintTable(option);; 4552 if (Hoption.Func) {; 4553 Hoption_t hoptsave = Hoption;; 4554 Hparam_t hparsave = Hparam;; 4555 PaintFunction(option);; 4556 SetHistogram(hsave);; 4557 Hoption = hoptsave;; 4558 Hparam = hparsave;; 4559 }; 4560 fH->SetMinimum(minsav);; 4561 gCurrentHist = oldhist;; 4562 fXbuf.clear();; 4563 fYbuf.clear();; 4564 if (fH->GetDimension() == 1) {; 4565 Hoption.Logy = logysav;; 4566 Hoption.Logz = logzsav;; 4567 }; 4568 return;; 4569 }; 4570 ; 4571 if (Hoption.Bar >= 20) {; 4572 PaintBarH(option);; 4573 fXbuf.clear();; 4574 fYbuf.clear();; 4575 return;; 4576 }; 4577 ; 4578 gPad->RangeAxisChanged(); //emit RangeAxisChanged() signal to sync axes; 4579 // fill Hparam structure with histo parameters; 4580 if (!PaintInit()) {; 4581 fXbuf.clear();; 4582 fYbuf.clear();; 4583 return;; 4584 }; 4585 ; 4586 // Picture surround (if new page) and page number (if requested).; 4587 // Histogram surround (if not option ""Same"").; 4588 PaintFrame();; 4589 ; 4590 // Paint histogram axis only; 4591 Bool_t gridx = gPad->GetGridx();; 4592 Bool_t gridy = gPad->GetGridy();; 4593 if (Hoption.Axis > 0) {; 4594 if (Hoption.Axis > 1) PaintAxis(kTRUE); //axis with grid; 4595 else {; 4596 if (gridx) gPad->SetGridx(0);; 4597 if (gridy) gPad->SetGridy(0);; 4598 PaintAxis(kFALSE);; 4599 if (gridx) gPad->SetGridx(1);; 4600 if (gridy) gPad->SetGridy(1);; 4601 }; 4602 if ((Hoption.Same%10) ==1) Hoption.Same += 1;; 4603 goto paintstat;; 4604 }; 4605 if (gridx || gridy) PaintAxis(kTRUE); // Draw the grid only; 4606 ; 4607 // test for options BAR or HBAR; 4608 if (Hoption.Bar >= 10) {; 4609 PaintBar(option);; 4610 }; 4611 ; 4612 // do not draw histogram if error bars required; 4613 if (!Hoption.Error) {; 4614 if (Hoption.Hist && Hoption.Bar<10) PaintHist(option);; 4615 }; 4616 ; 4617 // test for error bars or option E; 4618 if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:173640,clear,clear,173640,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"ption; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::SplitRule. class RooSimWSTool::SplitRule: public TNamed. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool__SplitRule.html:1102,simpl,simple,1102,root/html526/RooSimWSTool__SplitRule.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool__SplitRule.html,4,['simpl'],['simple']
Usability,"ption_t *=0) const override;  This method must be overridden when a class wants to print itself. ;  ; void SetDone ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html:1676,Clear,Clear,1676,doc/master/classTPacketizerAdaptive_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html,1,['Clear'],['Clear']
Usability,"ption_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF. ;  ; void StoreFeedback (TObject *slave, TList *out) override;  Store feedback results from the specified slave. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayerRemote;  TProofPlayerRemote (TProof *proof=0);  ;  ~TProofPlayerRemote () override;  Destructor. ;  ; void AddOutput (TList *out) override;  Incorporate the content of the received output list 'out' into the final output list fOutput. ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate the received object 'obj' into the output list fOutput. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (support for TChain::Draw()). ;  ; void Feedback (TList *objs) override;  Feedback signal. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize the results of a query already processed. ;  ; TDSetElement * GetNextPacket (TSlave *slave, TMessage *r) override;  Get next packet for specified slave. ;  ; TVirtualPacketizer * GetPacketizer () const override;  ; TObject * HandleHistogram (TObject *obj, Bool_t &merged);  Low statistic histograms need a special treatment when using autobin. ;  ; Bool_t HistoSameAxis (TH1 *h0, TH1 *h1);  Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges on the axis (i.e. ;  ; Int_t Incorporate (TObject *obj, TList *out, Bool_t &merged);  Incorporate object 'newobj' in the list 'outlist'. ;  ; TClass * IsA () const override;  ; Bool_t IsClient () const override;  Is the player running on the client? ;  ; Bool_t JoinProcess (TList *workers) override;  Prepares the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:2035,Feedback,Feedback,2035,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,2,['Feedback'],['Feedback']
Usability,"ption_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; VavilovAccurate.h; Vavilov.h; ROOT::Math::Vavilov::Pdfvirtual double Pdf(double x) const =0Evaluate the Vavilov probability density function.; ROOT::Math::Vavilov::~Vavilovvirtual ~Vavilov()Destructor.Definition Vavilov.cxx:50; ROOT::Math::Vavilov::GetKappavirtual double GetKappa() const =0Return the current value of .; ROOT::Math::Vavilov::Variancevirtual double Variance() constReturn the theoretical variance .Definition Vavilov.cxx:88; ROOT::Math::Vavilov::GetBeta2virtual double GetBeta2() const =0Return the current value of .; ROOT::Math::Vavilov::SetKappaBeta2virtual void SetKappaBeta2(double kappa, double beta2)=0Change and and recalculate coefficients if necessary.; ROOT::Math::Vavilov::Modevirtual double Mode() constReturn the value of where the pdf is maximal.Definition Vavilov.cxx:56; ROOT::Math::Vavilov::Meanvirtual double Mean() constReturn the theoretical mean , where is Euler's constant.Definition Vavilov.cxx:80; ROOT::Math::Vavilov::Skewnessvirtual double Skewness() constReturn the theoretical skewness .Definition Vavilov.cxx:96; ROOT::Math::Vavilov::Kurtosisvirtual double Kurtosis() constReturn the theoretical kurtosis .Definition Vavilov.cxx:105; ROOT::Math::Vavilov::VavilovVavilov()Default constructor.Definition Vavilov.cxx:46; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::eustatic const double euDefinition Vavilov.cxx:44; ROOT::Math::fabsVecExpr< UnaryOp< Fabs< T >, VecExpr< A, T, D >, T >, T, D > fabs(const VecExpr< A, T, D > &rhs)Definition UnaryOperators.h:131; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoresrcVavilov.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Vavilov_8cxx_source.html:5381,Guid,Guide,5381,doc/master/Vavilov_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Vavilov_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ption_t* option = """"); virtual voidAdd(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidTH1D::AddBinContent(Int_t bin); virtual voidTH1D::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t ymin, Double_t ymax, Option_t* option); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDivide(const TH1* h1); virtual voidDivide(TF1* h1, Double_t c1 = 1); virtual voidDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile.html:3743,Clear,Clear,3743,root/html528/TProfile.html,https://root.cern,https://root.cern/root/html528/TProfile.html,3,['Clear'],['Clear']
Usability,"ption_t* option = """"); virtual voidAdd(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidTH2D::AddBinContent(Int_t bin); virtual voidTH2D::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t zmin, Double_t zmax, Option_t* option); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDivide(const TH1* h1); virtual voidDivide(TF1* h1, Double_t c1 = 1); virtual voidDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:3880,Clear,Clear,3880,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,3,['Clear'],['Clear']
Usability,"ption_t* option = """"); virtual voidAdd(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1)MENU ; voidTArrayD::AddAt(Double_t c, Int_t i); virtual voidTH3D::AddBinContent(Int_t bin); virtual voidTH3D::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayD::Adopt(Int_t n, Double_t* array); virtual voidTObject::AppendPad(Option_t* option = """"); static voidApproximate(Bool_t approx = kTRUE); Double_tTArrayD::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tBufferEmpty(Int_t action = 0); voidBuildOptions(Double_t tmin, Double_t tmax, Option_t* option); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDivide(const TH1* h1); virtual voidDivide(TF1* h1, Double_t c1 = 1); virtual voidDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidTH1::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:3552,Clear,Clear,3552,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,3,['Clear'],['Clear']
Usability,"ption_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual~TCastorFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTNetFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCastorFile.html:2625,Clear,Clear,2625,root/html530/TCastorFile.html,https://root.cern,https://root.cern/root/html530/TCastorFile.html,1,['Clear'],['Clear']
Usability,"ption_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual~TCastorFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* motherDir = 0); virtual Bool_tTDirectoryFile::cd(const char* path = 0); static Bool_tTDirectory::Cd(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTDirectory::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*TDirectoryFile::CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidTNetFile::Close(Option_t* option = """")MENU ; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTFile::Copy(TObject&) const; virtual Bool_tTFile::Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); static Bool_tTFile::Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); virtual TKey*TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCastorFile.html:2625,Clear,Clear,2625,root/html532/TCastorFile.html,https://root.cern,https://root.cern/root/html532/TCastorFile.html,1,['Clear'],['Clear']
Usability,"ptions as string for JSROOT TGeoPainter.Definition RGeomData.hxx:332; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::IsBuildbool IsBuild() constDefinition RGeomData.hxx:371; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)Set number of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:342; ROOT::RGeomDescription::GetTopVisiblebool GetTopVisible() constReturns draw options, used for JSROOT TGeoPainter.Definition RGeomData.hxx:334; ROOT::RGeomDescription::SetPhysNodeVisibilitybool SetPhysNodeVisibility(const std::vector< std::string > &path, bool on=true)Set visibility of physical node by path It overrules TGeo visibility flags - but only for specific ph...Definition RGeomData.cxx:1970; ROOT::RGeomDescription::ClearPhysNodeVisibilitybool ClearPhysNodeVisibility(const std::vector< std::string > &path)Reset custom visibility of physical node by path.Definition RGeomData.cxx:2065; ROOT::RGeomDescription::BuildDescriptionvoid BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume)Build geometry description.Definition RGeomData.cxx:494; ROOT::RGeomDescription::SearchVisiblesint SearchVisibles(const std::string &find, std::string &hjson, std::string &json)Search visible nodes for provided name If number of found elements less than 100, create description ...Definition RGeomData.cxx:1411; ROOT::RGeomDescription::fSortMapstd::vector< int > fSortMap! nodes in order large -> smaller volumeDefinition RGeomData.hxx:252; ROOT::RGeomDescription::ProduceJsonstd::string ProduceJson(bool all_nodes=false)Produce JSON string which can be directly used with build function from JSROOT to create three....Definition RGeomData.cxx:1230; ROOT::RGeomDescription::ClearDrawDatavoid ClearDrawData()Clear raw data. Will be rebuild when next connection will be established",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:29930,Clear,ClearPhysNodeVisibilitybool,29930,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,2,['Clear'],"['ClearPhysNodeVisibility', 'ClearPhysNodeVisibilitybool']"
Usability,"ptions as string for JSROOT TGeoPainter.Definition RGeomData.hxx:332; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::IsBuildbool IsBuild() constDefinition RGeomData.hxx:373; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)Set number of segments for cylindrical shapes, if 0 - default value will be used.Definition RGeomData.hxx:342; ROOT::RGeomDescription::GetTopVisiblebool GetTopVisible() constReturns draw options, used for JSROOT TGeoPainter.Definition RGeomData.hxx:334; ROOT::RGeomDescription::SetPhysNodeVisibilitybool SetPhysNodeVisibility(const std::vector< std::string > &path, bool on=true)Set visibility of physical node by path It overrules TGeo visibility flags - but only for specific ph...Definition RGeomData.cxx:1970; ROOT::RGeomDescription::ClearPhysNodeVisibilitybool ClearPhysNodeVisibility(const std::vector< std::string > &path)Reset custom visibility of physical node by path.Definition RGeomData.cxx:2065; ROOT::RGeomDescription::BuildDescriptionvoid BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume)Build geometry description.Definition RGeomData.cxx:494; ROOT::RGeomDescription::SearchVisiblesint SearchVisibles(const std::string &find, std::string &hjson, std::string &json)Search visible nodes for provided name If number of found elements less than 100, create description ...Definition RGeomData.cxx:1411; ROOT::RGeomDescription::fSortMapstd::vector< int > fSortMap! nodes in order large -> smaller volumeDefinition RGeomData.hxx:252; ROOT::RGeomDescription::ProduceJsonstd::string ProduceJson(bool all_nodes=false)Produce JSON string which can be directly used with build function from JSROOT to create three....Definition RGeomData.cxx:1230; ROOT::RGeomDescription::ClearDrawDatavoid ClearDrawData()Clear raw data. Will be rebuild when next connection will be established",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:30181,Clear,ClearPhysNodeVisibilitybool,30181,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,2,['Clear'],"['ClearPhysNodeVisibility', 'ClearPhysNodeVisibilitybool']"
Usability,"ptions&operator=(const ROOT::Math::IntegratorMultiDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNCalls(unsigned int ncall); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNCalls(unsigned int calls); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorMultiDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegrationOneDim::Type IntegratorType() const; type of the integrator (return the enumeration type). { return (IntegrationOneDim::Type) fIntegType; }. void SetIntegrator(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDimOptions.html:2700,Clear,ClearExtra,2700,root/html602/ROOT__Math__IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDimOptions.html,2,['Clear'],['ClearExtra']
Usability,"ptions(Int_t* argc, char** argv); const char*TProofServ::GetOrdinal() const; const char*TProofServ::GetPackageDir() const; const char*TProofServ::GetPrefix() const; TProof*TProofServ::GetProof() const; Int_tTProofServ::GetProtocol() const; Int_tTProofServ::GetQuerySeqNum() const; Float_tTProofServ::GetRealTime() const; static Long_tTProofServ::GetResMemMax(); const char*TProofServ::GetService() const; const char*TProofServ::GetSessionDir() const; const char*TProofServ::GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*TProofServ::GetSocket() const; virtual const char*TObject::GetTitle() const; const char*TProofServ::GetTopSessionTag() const; Int_tTProofServ::GetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*TProofServ::GetUser() const; static Long_tTProofServ::GetVirtMemMax(); const char*TProofServ::GetWorkDir() const; virtual TProofServ::EQueryActionTProofServ::GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidTProofServ::HandleException(Int_t sig); virtual voidHandleFork(TMessage* mess); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidTProofServ::HandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServLite.html:7725,resume,resume,7725,root/html534/TProofServLite.html,https://root.cern,https://root.cern/root/html534/TProofServLite.html,3,['resume'],['resume']
Usability,"ptr< RBrowserWidget > RBrowser::AddCatchedWidget ; (; RWebWindow * ; win, . const std::string & ; kind . ). protected . Add widget catched from external scripts. ; Definition at line 573 of file RBrowser.cxx. ◆ AddInitWidget(). void RBrowser::AddInitWidget ; (; const std::string & ; kind). protected . Create new widget and send init message to the client. ; Definition at line 592 of file RBrowser.cxx. ◆ AddRCanvas(). void ROOT::RBrowser::AddRCanvas ; (; ). inline . Definition at line 86 of file RBrowser.hxx. ◆ AddTCanvas(). void ROOT::RBrowser::AddTCanvas ; (; ). inline . Definition at line 85 of file RBrowser.hxx. ◆ AddWidget(). std::shared_ptr< RBrowserWidget > RBrowser::AddWidget ; (; const std::string & ; kind). protected . Creates new widget. ; Definition at line 541 of file RBrowser.cxx. ◆ CheckWidgtesModified(). void RBrowser::CheckWidgtesModified ; (; ). protected . Check if any widget was modified and update if necessary. ; Definition at line 752 of file RBrowser.cxx. ◆ ClearOnClose(). void RBrowser::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed. ; Definition at line 975 of file RBrowser.cxx. ◆ CloseTab(). void RBrowser::CloseTab ; (; const std::string & ; name). protected . Close and delete specified widget. ; Definition at line 618 of file RBrowser.cxx. ◆ FindWidget(). std::shared_ptr< RBrowserWidget > RBrowser::FindWidget ; (; const std::string & ; name, . const std::string & ; kind = """" . ); const. protected . Find widget by name or kind. ; Definition at line 602 of file RBrowser.cxx. ◆ GetActiveWidget(). std::shared_ptr< RBrowserWidget > ROOT::RBrowser::GetActiveWidget ; (; ); const. inlineprotected . Definition at line 54 of file RBrowser.hxx. ◆ GetCatchWindowShow(). bool ROOT::RBrowser::GetCatchWindowShow ; (; ); const. inline . Is RWebWindow::Show calls catched for embeding of created widgets. ; Definition at line 102 of file RBrowser.hxx. ◆ GetCurrentWorkingDirectory(). std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowser.html:6328,Clear,ClearOnClose,6328,doc/v632/classROOT_1_1RBrowser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowser.html,1,['Clear'],['ClearOnClose']
Usability,"ptr_t ProcessLine (const char *line, Bool_t=kFALSE, Int_t *error=nullptr) override;  Parse a single command line and forward the request to the remote server where it will be processed. ;  ; Int_t SendFile (const char *file, Int_t opt=kAscii, const char *rfile=nullptr);  Send a file to the server. ;  ; Int_t SendObject (const TObject *obj);  Send object to server. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate (Int_t status=0) override;  Terminate this session. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; virtual void GetOptions (Int_t *argc, char **argv);  Get and handle command line options. ;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:3346,Clear,ClearInputFiles,3346,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,2,['Clear'],"['Clear', 'ClearInputFiles']"
Usability,ptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once so merge the training and testing trees from the MVA factory first: ; Implements TMVA::MethodBase.; Definition at line 260 of file MethodTMlpANN.cxx. Member Data Documentation. ◆ fHiddenLayer. TString TMVA::MethodTMlpANN::fHiddenLayer. private . string containing the hidden layer structure ; Definition at line 111 of file MethodTMlpANN.h. ◆ fLayerSpec. TString TMVA::MethodTMlpANN::fLayerSpec. private . Layer specification option. ; Definition at line 106 of file MethodTMlpANN.h. ◆ fLearningMethod. TString TMVA::MethodTMlpANN::fLearningMethod. private . the learning method (given via option string) ; Definition at line 116 of file MethodTMlpANN.h. ◆ fLocalTrainingTree. TTree* TMVA::MethodTMlpANN::fLocalTrainingTree. private . local copy of training tree ; Definition at line 109 of file MethodTMlpANN.h. ◆ fMLP. TMultiLayerPerceptron* TMVA::MethodTMlpANN::fMLP. private . the TMLP ; Definition at line 108 of file MethodTMlpANN.h. ◆ fMLPBuildOptions. TString TMVA::MethodTMlpANN::fMLPBuildOptions. private . option string to build the mlp ; Definition at line 114 of file MethodTMlpANN.h. ◆ fNcycles. Int_t TMVA::MethodTMlpANN::fNcycles. private . number of training cycles ; Definition at line 112 of file MethodTMlpANN.h. ◆ fValidationFraction. Double_t TMVA::MethodTMlpANN::fValidationFraction. private . fraction of events in training tree used for cross validation ; Definition at line 113 of file MethodTMlpANN.h. Libraries for TMVA::MethodTMlpANN:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MethodTMlpANN.h; tmva/tmva/src/MethodTMlpANN.cxx. TMVAMethodTMlpANN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:37391,Guid,Guide,37391,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['Guid'],['Guide']
Usability,"ptr . ). constructor specifying the volume by std::vectors of floats ; Definition at line 56 of file Volume.cxx. ◆ Volume() [2/7]. TMVA::Volume::Volume ; (; std::vector< Double_t > * ; l = nullptr, . std::vector< Double_t > * ; u = nullptr . ). constructor specifying the volume by std::vectors of doubles ; Definition at line 47 of file Volume.cxx. ◆ Volume() [3/7]. TMVA::Volume::Volume ; (; Volume & ; V). copy constructor ; Definition at line 125 of file Volume.cxx. ◆ Volume() [4/7]. TMVA::Volume::Volume ; (; Float_t * ; l, . Float_t * ; u, . Int_t ; nvar . ). constructor specifying the volume by c-style arrays of floats ; Definition at line 86 of file Volume.cxx. ◆ Volume() [5/7]. TMVA::Volume::Volume ; (; Double_t * ; l, . Double_t * ; u, . Int_t ; nvar . ). constructor specifying the volume by c-style arrays of doubles ; Definition at line 71 of file Volume.cxx. ◆ Volume() [6/7]. TMVA::Volume::Volume ; (; Float_t ; l, . Float_t ; u . ). simple constructors for 1 dimensional values (float) ; Definition at line 113 of file Volume.cxx. ◆ Volume() [7/7]. TMVA::Volume::Volume ; (; Double_t ; l, . Double_t ; u . ). simple constructors for 1 dimensional values (double) ; Definition at line 101 of file Volume.cxx. ◆ ~Volume(). TMVA::Volume::~Volume ; (; void ; ). virtual . destructor ; Definition at line 153 of file Volume.cxx. Member Function Documentation. ◆ Delete(). void TMVA::Volume::Delete ; (; void ; ). delete array of volume bondaries ; Definition at line 162 of file Volume.cxx. ◆ operator=(). TMVA::Volume & TMVA::Volume::operator= ; (; const Volume & ; V). assignment operator ; Definition at line 135 of file Volume.cxx. ◆ Print(). void TMVA::Volume::Print ; (; void ; ); const. printout of the volume boundaries ; Definition at line 193 of file Volume.cxx. ◆ Scale(). void TMVA::Volume::Scale ; (; Double_t ; f). ""scale"" the volume by multiplying each upper and lower boundary by ""f"" ; Definition at line 171 of file Volume.cxx. ◆ ScaleInterval(). void TMVA::Volume::S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Volume.html:3060,simpl,simple,3060,doc/master/classTMVA_1_1Volume.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Volume.html,1,['simpl'],['simple']
Usability,"pty = new Bool_t [fNCells];; 533 fCompletelyInside = new Bool_t [fNCells];; 534 ; 535 // Initializes the flags; 536 for (int i = 0; i<fNCells; i++) {; 537 fIsEmpty[i] = kTRUE;; 538 fCompletelyInside[i] = kFALSE;; 539 }; 540 ; 541 // TList iterator; 542 TIter next(fBins);; 543 TObject *obj;; 544 ; 545 while((obj = next())){ // Loop over bins and add them to the partition; 546 AddBinToPartition((TH2PolyBin*) obj);; 547 }; 548}; 549 ; 550////////////////////////////////////////////////////////////////////////////////; 551/// Make a complete copy of the underlying object. If 'newname' is set,; 552/// the copy's name will be set to that name.; 553 ; 554TObject* TH2Poly::Clone(const char* newname) const; 555{; 556 // TH1::Clone relies on ::Copy to implemented by the derived class.; 557 // Until this is implemented, revert to the much slower default version; 558 // (and possibly non-thread safe).; 559 ; 560 return TNamed::Clone(newname);; 561}; 562 ; 563////////////////////////////////////////////////////////////////////////////////; 564/// Clears the contents of all bins in the histogram.; 565 ; 566void TH2Poly::ClearBinContents(); 567{; 568 TIter next(fBins);; 569 TObject *obj;; 570 TH2PolyBin *bin;; 571 ; 572 // Clears the bin contents; 573 while ((obj = next())) {; 574 bin = (TH2PolyBin*) obj;; 575 bin->ClearContent();; 576 }; 577 ; 578 // Clears the statistics; 579 fTsumw = 0;; 580 fTsumw2 = 0;; 581 fTsumwx = 0;; 582 fTsumwx2 = 0;; 583 fTsumwy = 0;; 584 fTsumwy2 = 0;; 585 fEntries = 0;; 586}; 587 ; 588////////////////////////////////////////////////////////////////////////////////; 589/// Reset this histogram: contents, errors, etc.; 590 ; 591void TH2Poly::Reset(Option_t *opt); 592{; 593 TIter next(fBins);; 594 TObject *obj;; 595 TH2PolyBin *bin;; 596 ; 597 // Clears the bin contents; 598 while ((obj = next())) {; 599 bin = (TH2PolyBin*) obj;; 600 bin->ClearContent();; 601 }; 602 ; 603 TH2::Reset(opt);; 604}; 605 ; 606///////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:21364,Clear,Clears,21364,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['Clear'],['Clears']
Usability,"put handling settings. ;  ; Int_t Init (const char *masterurl, const char *conffile, const char *confdir, Int_t loglevel, const char *alias=0);  Start the PROOF environment. ;  ; void InitMembers ();  Default initializations. ;  ; virtual TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0);  Construct a TProofPlayer object. ;  ; void PrepareInputDataFile (TString &dataFile);  Prepare the file with the input data objects to be sent the master; the objects are taken from the dedicated list and / or the specified file. ;  ; Int_t RemoveWorkers (TList *wrks);  Used for shuting down the workres after a query is finished. ;  ; virtual void SaveWorkerInfo ();  Save information about the worker set in the file .workers in the working dir. ;  ; Int_t SendFile (const char *file, Int_t opt=(kBinary|kForward|kCp|kCpBin), const char *rfile=0, TSlave *sl=0);  Send a file to master or slave servers. ;  ; void SetDSet (TDSet *dset);  ; void SetFeedback (TString &opt, TString &optfb, Int_t action);  Extract from opt in optfb information about wanted feedback settings. ;  ; void SetPlayer (TVirtualProofPlayer *player);  Set a new PROOF player. ;  ; void SetupWorkersEnv (TList *wrks, Bool_t increasingpool=kFALSE);  Set up packages, loaded macros, include and lib paths ... ;  ; virtual Bool_t StartSlaves (Bool_t attach=kFALSE);  Start up PROOF slaves. ;  ; void UpdateDialog ();  Final update of the progress dialog. ;  ; virtual void ValidateDSet (TDSet *dset);  Validate a TDSet. ;  ; Int_t VerifyDataSetParallel (const char *uri, const char *optStr);  Internal function for parallel dataset verification used TProof::VerifyDataSet and TProofLite::VerifyDataSet. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:38632,feedback,feedback,38632,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['feedback'],['feedback']
Usability,"putData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::Deactiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:2265,Clear,ClearInputData,2265,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['Clear'],['ClearInputData']
Usability,"putData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::Deactiva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:2264,Clear,ClearInputData,2264,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,1,['Clear'],['ClearInputData']
Usability,"putFrame(TGWindow* parent, Int_t w, Int_t h); virtual~TSessionOutputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionOutputFrame.html:1506,Clear,Clear,1506,root/html528/TSessionOutputFrame.html,https://root.cern,https://root.cern/root/html528/TSessionOutputFrame.html,4,['Clear'],['Clear']
Usability,putHandler::begin ; (; const TString & ; className); const. inline . Definition at line 111 of file DataInputHandler.h. ◆ Bend(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::Bend ; (; ); const. inline . Definition at line 116 of file DataInputHandler.h. ◆ Class(). static TClass * TMVA::DataInputHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::DataInputHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::DataInputHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 134 of file DataInputHandler.h. ◆ ClearBackgroundTreeList(). void TMVA::DataInputHandler::ClearBackgroundTreeList ; (; ). inline . Definition at line 120 of file DataInputHandler.h. ◆ ClearSignalTreeList(). void TMVA::DataInputHandler::ClearSignalTreeList ; (; ). inline . Definition at line 119 of file DataInputHandler.h. ◆ ClearTreeList(). void TMVA::DataInputHandler::ClearTreeList ; (; const TString & ; className). Definition at line 182 of file DataInputHandler.cxx. ◆ DeclFileName(). static const char * TMVA::DataInputHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 134 of file DataInputHandler.h. ◆ end(). std::vector< TreeInfo >::const_iterator TMVA::DataInputHandler::end ; (; const TString & ; className); const. inline . Definition at line 112 of file DataInputHandler.h. ◆ GetBackgroundEntries(). UInt_t TMVA::DataInputHandler::GetBackgroundEntries ; (; ); const. inline . Definition at line 106 of file DataInputHandler.h. ◆ GetClassList(). std::vector< TString > * TMVA::DataInputHandler::GetClassList ; (; ); const. Definition at line 194 of file DataInputHandler.cxx. ◆ GetEntries() [1/3]. UInt_t TMVA::DataInputHandler::GetEntries ; (; ); const. return number of entries in tree ; Definition at line 217 of file DataInputHandler.cxx. ◆ Ge,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:16923,Clear,ClearTreeList,16923,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,1,['Clear'],['ClearTreeList']
Usability,putation DIRECT does not further transformation; SIGMOID applies a sigmoid transformation to each output value (to create a probability); SOFTMAX applies a softmax transformation to all output values (mutually exclusive probability) . Definition at line 122 of file NeuralNet.cxx. ◆ LayerData() [5/6]. TMVA::DNN::LayerData::LayerData ; (; const LayerData & ; other). inline . copy c'tor of LayerData ; Definition at line 515 of file NeuralNet.h. ◆ LayerData() [6/6]. TMVA::DNN::LayerData::LayerData ; (; LayerData && ; other). inline . move c'tor of LayerData ; Definition at line 538 of file NeuralNet.h. Member Function Documentation. ◆ activationFunction(). std::shared_ptr< std::function< double(double)> > TMVA::DNN::LayerData::activationFunction ; (; ); const. inline . Definition at line 607 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::LayerData::clear ; (; ). inline . clear the values and the deltas ; Definition at line 576 of file NeuralNet.h. ◆ clearDropOut(). void TMVA::DNN::LayerData::clearDropOut ; (; ). inline . clear the drop-out-data for this layer ; Definition at line 620 of file NeuralNet.h. ◆ computeProbabilities(). LayerData::container_type TMVA::DNN::LayerData::computeProbabilities ; (; ); const. private . compute the probabilities from the node values ; Definition at line 140 of file NeuralNet.cxx. ◆ deltasBegin() [1/2]. iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ). inline . returns iterator to the begin of the deltas (back-propagation) ; Definition at line 591 of file NeuralNet.h. ◆ deltasBegin() [2/2]. const_iterator_type TMVA::DNN::LayerData::deltasBegin ; (; ); const. inline . returns const iterator to the begin of the deltas (back-propagation) ; Definition at line 594 of file NeuralNet.h. ◆ deltasEnd() [1/2]. iterator_type TMVA::DNN::LayerData::deltasEnd ; (; ). inline . returns iterator to the end of the deltas (back-propagation) ; Definition at line 592 of file NeuralNet.h. ◆ deltasEnd() [2/2]. const_iterator_type TMVA::DNN::LayerData:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:11077,clear,clearDropOut,11077,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['clear'],['clearDropOut']
Usability,"putation graph. Never null.Definition RInterfaceBase.hxx:55; ROOT::RDF::RInterfaceBase::fDataSourceRDataSource * fDataSourceNon-owning pointer to a data-source object. Null if no data-source. RLoopManager has ownership of the...Definition RInterfaceBase.hxx:57; ROOT::RDF::RInterfaceBase::GetLoopManagerRDFDetail::RLoopManager * GetLoopManager() constDefinition RInterfaceBase.hxx:128; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDataFrame::RDataFrameRDataFrame(std::string_view treeName, std::string_view filenameglob, const ColumnNames_t &defaultColumns={})Build the dataframe.Definition RDataFrame.cxx:1591; ROOT::RDataFrame::ColumnNames_tROOT::RDF::ColumnNames_t ColumnNames_tDefinition RDataFrame.hxx:43; ROOT::RDataFrame::~RDataFrame~RDataFrame()Definition RDataFrame.cxx:1685; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::Getvirtual TObject * Get(const char *namecycle)Return pointer to object identified by namecycle.Definition TDirectory.cxx:866; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Detail::RDFDefinition GraphUtils.hxx:24; ROOT::RDF::Experimental::FromSpecROOT::RDataFrame FromSpec(const std::string &jsonFile)Factory method to create an RDataFrame from a JSON specification file.Definition RDataFrame.cxx:1729; ROOT::RDF::ColumnNames_tstd::vector< std::string > ColumnNames_tDefinition RInterfaceBase.hxx:35; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::ColumnNamesPtr_tstd::shared_ptr< const ColumnNames_t > ColumnNamesPtr_tDefinition RDataFrame.cxx:1546; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; mTMarker mDefinition textangle.C:8. treedataframesrcRDataFrame.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:104131,Guid,Guide,104131,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['Guid'],['Guide']
Usability,"py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGLLegoPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawLegoCartesian() const; voidDrawLegoCylindrical() const; voidDrawLegoPolar() const; voidDrawLegoSpherical() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; TGLLegoPainter&operator=(const TGLLegoPainter&); Bool_tPreparePalette() const; voidSetLegoColor() const; TGLLegoPainter(const TGLLegoPainter&). Data Members; public:. static TGLPlotPainter::ECutAxisIDTGLPlotPainter::kXAxis; static T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLLegoPainter.html:1678,Clear,ClearBuffers,1678,root/html602/TGLLegoPainter.html,https://root.cern,https://root.cern/root/html602/TGLLegoPainter.html,2,['Clear'],['ClearBuffers']
Usability,"py. void SetOutputFilePrefix(const string& prefix); set output prefix. { fOutputFilePrefix = prefix; }. std::string GetOutputFilePrefix(); retrieve prefix for output files. { return fOutputFilePrefix; }. void SetPOI(const string& POI); insert PoI at beginning of vector of PoIs. { fPOI.insert( fPOI.begin(), POI ); }. void AddPOI(const string& POI); append parameter to vector of PoIs. { fPOI.push_back(POI); }. std::string GetPOI(unsigned int i = 0); get name of PoI at given index. { return fPOI.at(i); }. std::vector<std::string>& GetPOIList(); get vector of PoI names. { return fPOI; }. void ClearConstantParams(); empty vector of constant parameters. { fConstantParams.clear(); }. std::vector< std::string >& GetConstantParams(); get vector of all constant parameters. { return fConstantParams; }. std::map<std::string, double>& GetParamValues(); get map: parameter name <--> parameter value. { return fParamValues; }. void ClearParamValues(); clear map of parameter values. { fParamValues.clear(); }. void AddFunctionObject(const RooStats::HistFactory::PreprocessFunction function); add a preprocess function object. { fFunctionObjects.push_back( function ); }. void SetFunctionObjects(vector<RooStats::HistFactory::PreprocessFunction> objects); get vector of defined function objects. { fFunctionObjects = objects; }. std::vector< RooStats::HistFactory::PreprocessFunction >& GetFunctionObjects(); { return fFunctionObjects; }. std::vector< RooStats::HistFactory::Asimov >& GetAsimovDatasets(); get vector of defined Asimov Datasets. { return fAsimovDatasets; }. void AddAsimovDataset(RooStats::HistFactory::Asimov dataset); add an Asimov Dataset. { fAsimovDatasets.push_back(dataset); }. void SetLumi(double Lumi); set integrated luminosity used to normalise histograms (if NormalizeByTheory is true for this sample). { fLumi = Lumi; }. void SetLumiRelErr(double RelErr); set relative uncertainty on luminosity. { fLumiRelErr = RelErr; }. double GetLumi(); retrieve integrated luminosity. { re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html:12269,clear,clear,12269,root/html534/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html,1,['clear'],['clear']
Usability,"quares"", ""l"");; leg->AddEntry(ffit2, ""LTS regression"", ""l"");; leg->Draw();; ; delete [] x;; delete [] y;; delete [] e;; ; }; e#define e(i)Definition RSha256.hxx:103; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; TF1.h; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TGraphErrors.h; TLegend.h; TRandom.h; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Set the maximum of the graph.Definition TGraph.cxx:2324; TGraph::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)Fit this graph with function with name fname.Definition TGraph.cxx:1254; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Set the minimum of the graph.Definition TGraph.cxx:2333; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; leglegDefinition legend1.C:34; AuthorAnna Kreshuk ; Definition in file fitLinearRobust.C. tutorialsfitfitLinearRobust.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitLinearRobust_8C.html:4880,Guid,Guide,4880,doc/master/fitLinearRobust_8C.html,https://root.cern,https://root.cern/doc/master/fitLinearRobust_8C.html,1,['Guid'],['Guide']
Usability,"queSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCategory.html:2059,clear,clearValueAndShapeDirty,2059,root/html602/RooCategory.html,https://root.cern,https://root.cern/root/html602/RooCategory.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"quence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Cle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:18513,Clear,Clear,18513,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Clear'],['Clear']
Usability,"query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); virtual Bool_tTProof::CancelStagingDataSet(const char* dataset); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord, Bool_t save = kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofCondor.html:2475,Clear,ClearPackage,2475,root/html534/TProofCondor.html,https://root.cern,https://root.cern/root/html534/TProofCondor.html,6,['Clear'],['ClearPackage']
Usability,"quested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree automatically creates a cache. This feature can be; controlled with an env. variable or the TTreeCache.Size option.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several; hundred or thousand branches.; When writing, this does not generate a performance problem because branch; buffers are always written sequentially and the OS is in general clever enough; to flush the data to the output file when a few MBytes of data have to be written.; When reading at the contrary, one may hit a performance problem when reading; across a network (LAN or WAN) and the network latency is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:1859,learn,learning,1859,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['learn'],['learning']
Usability,"quivalent of TObject::SetBit. TGeoMatrix * GetTransform(); Returns current transformation matrix that applies to shape. void SetTransform(TGeoMatrix* matrix); Set current transformation matrix that applies to shape. void TransformPoints(Double_t* points, UInt_t NbPoints) const; Tranform a set of points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections, Bool_t localFrame) const; Fill the supplied buffer, with sections in desired frame; See TBuffer3D.h for explanation of sections, frame etc. Int_t GetBasicColor() const; Get the basic color (0-7). const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Stub implementation to avoid forcing implementation at this stage. const char * GetPointerName() const; Provide a pointer name containing uid. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute mouse actions on this shape. void Draw(Option_t* option = """"); Draw this shape. void Paint(Option_t* option = """"); Paint this shape. void ClearThreadData() const; {}. void CreateThreadData(Int_t ); {}. void SetOnBoundary(Bool_t ); {;}. Double_t Big(); methods. {return 1.E30;}. Double_t Tolerance(); {return 1.E-10;}. void AfterStreamer(); {}. Double_t Capacity() const. void ComputeBBox(). void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm). void ComputeNormal_v(const Double_t* , const Double_t* , Double_t* , Int_t ); {}. Bool_t Contains(const Double_t* point) const. void Contains_v(const Double_t* , Bool_t* , Int_t ) const; {}. Bool_t CouldBeCrossed(const Double_t* point, const Double_t* dir) const. Int_t DistancetoPrimitive(Int_t px, Int_t py). Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; {}. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; {}. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:20407,Clear,ClearThreadData,20407,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,1,['Clear'],['ClearThreadData']
Usability,"quivalent of TObject::SetBit. TGeoMatrix * GetTransform(); Returns current transformation matrix that applies to shape. void SetTransform(TGeoMatrix* matrix); Set current transformation matrix that applies to shape. void TransformPoints(Double_t* points, UInt_t NbPoints) const; Tranform a set of points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections, Bool_t localFrame) const; Fill the supplied buffer, with sections in desired frame; See TBuffer3D.h for explanation of sections, frame etc. Int_t GetBasicColor() const; Get the basic color (0-7). const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Stub implementation to avoid forcing implementation at this stage. const char * GetPointerName() const; Provide a pointer name containing uid. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute mouse actions on this shape. void Draw(Option_t* option = """"); Draw this shape. void Paint(Option_t* option = """"); Paint this shape. void ClearThreadData() const; {}. void CreateThreadData(Int_t ); {}. void SetOnBoundary(Bool_t ); {;}. TGeoShape(); constructors. Double_t Big(); methods. {return 1.E30;}. Double_t Tolerance(); {return 1.E-10;}. void AfterStreamer(); {}. Double_t Capacity() const. void ComputeBBox(). void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm). void ComputeNormal_v(const Double_t* , const Double_t* , Double_t* , Int_t ); {}. Bool_t Contains(const Double_t* point) const. void Contains_v(const Double_t* , Bool_t* , Int_t ) const; {}. Bool_t CouldBeCrossed(const Double_t* point, const Double_t* dir) const. Int_t DistancetoPrimitive(Int_t px, Int_t py). Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; {}. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; {}. TGeoVolume * Divide(TGeoVolume* voldiv, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoShape.html:21953,Clear,ClearThreadData,21953,root/html602/TGeoShape.html,https://root.cern,https://root.cern/root/html602/TGeoShape.html,2,['Clear'],['ClearThreadData']
Usability,"quivalent of TObject::SetBit. TGeoMatrix * GetTransform(); Returns current transformation matrix that applies to shape. void SetTransform(TGeoMatrix* matrix); Set current transformation matrix that applies to shape. void TransformPoints(Double_t* points, UInt_t NbPoints) const; Tranform a set of points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections, Bool_t localFrame) const; Fill the supplied buffer, with sections in desired frame; See TBuffer3D.h for explanation of sections, frame etc. Int_t GetBasicColor() const; Get the basic color (0-7). const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Stub implementation to avoid forcing implementation at this stage. const char * GetPointerName() const; Provide a pointer name containing uid. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute mouse actions on this shape. void Draw(Option_t* option = """"); Draw this shape. void Paint(Option_t* option = """"); Paint this shape. void ClearThreadData() const; {}. void SetOnBoundary(Bool_t ); {;}. Double_t Big(); methods. {return 1.E30;}. Double_t Tolerance(); {return 1.E-10;}. Double_t Capacity() const. void ComputeBBox(). void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm). Bool_t Contains(Double_t* point) const. Bool_t CouldBeCrossed(Double_t* point, Double_t* dir) const. Int_t DistancetoPrimitive(Int_t px, Int_t py). Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step). const char * GetAxisName(Int_t iaxis) const. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const. void GetBoundingCylinder(Double_t* param) const. Int_t GetByteCount() const. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoShape.html:19418,Clear,ClearThreadData,19418,root/html532/TGeoShape.html,https://root.cern,https://root.cern/root/html532/TGeoShape.html,1,['Clear'],['ClearThreadData']
Usability,"r & Destructor Documentation. ◆ TFormulaFunction() [1/3]. TFormulaFunction::TFormulaFunction ; (; ). inline . Definition at line 43 of file TFormula.h. ◆ TFormulaFunction() [2/3]. TFormulaFunction::TFormulaFunction ; (; const TString & ; name, . const TString & ; body, . int ; numArgs . ). inline . Definition at line 44 of file TFormula.h. ◆ TFormulaFunction() [3/3]. TFormulaFunction::TFormulaFunction ; (; const TString & ; name). inline . Definition at line 46 of file TFormula.h. Member Function Documentation. ◆ GetBody(). const char * TFormulaFunction::GetBody ; (; ); const. inline . Definition at line 40 of file TFormula.h. ◆ GetName(). const char * TFormulaFunction::GetName ; (; ); const. inline . Definition at line 39 of file TFormula.h. ◆ GetNargs(). Int_t TFormulaFunction::GetNargs ; (; ); const. inline . Definition at line 41 of file TFormula.h. ◆ IsFuncCall(). Bool_t TFormulaFunction::IsFuncCall ; (; ); const. inline . Definition at line 42 of file TFormula.h. ◆ operator<(). Bool_t TFormulaFunction::operator< ; (; const TFormulaFunction & ; rhv); const. inline . Definition at line 48 of file TFormula.h. ◆ operator==(). Bool_t TFormulaFunction::operator== ; (; const TFormulaFunction & ; rhv); const. inline . Definition at line 58 of file TFormula.h. Member Data Documentation. ◆ fBody. TString TFormulaFunction::fBody. Definition at line 35 of file TFormula.h. ◆ fFound. Bool_t TFormulaFunction::fFound. Definition at line 37 of file TFormula.h. ◆ fFuncCall. Bool_t TFormulaFunction::fFuncCall. Definition at line 38 of file TFormula.h. ◆ fName. TString TFormulaFunction::fName. Definition at line 34 of file TFormula.h. ◆ fNargs. Int_t TFormulaFunction::fNargs. Definition at line 36 of file TFormula.h. Libraries for TFormulaFunction:. [legend]; The documentation for this class was generated from the following file:; hist/hist/inc/v5/TFormula.h. TFormulaFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormulaFunction.html:2804,Guid,Guide,2804,doc/master/classTFormulaFunction.html,https://root.cern,https://root.cern/doc/master/classTFormulaFunction.html,1,['Guid'],['Guide']
Usability,"r & ROOT::FoundationUtils::GetEnvPathSeparator ; (; ). inline . Returnsthe path separator for the PATH environment variable on the platform. ; Definition at line 54 of file FoundationUtils.hxx. ◆ GetEtcDir(). const std::string & ROOT::FoundationUtils::GetEtcDir ; (; ). Returnsthe sysconfig directory in the installation. ; Definition at line 195 of file FoundationUtils.cxx. ◆ GetFallbackRootSys(). const std::string & ROOT::FoundationUtils::GetFallbackRootSys ; (; ). Returnsthe fallback directory in the installation (eg. /usr/local/root/). ; Definition at line 111 of file FoundationUtils.cxx. ◆ GetIncludeDir(). const std::string & ROOT::FoundationUtils::GetIncludeDir ; (; ). \ returns the include directory in the installation. ; Definition at line 180 of file FoundationUtils.cxx. ◆ GetPathSeparator(). const std::string & ROOT::FoundationUtils::GetPathSeparator ; (; ). inline . Returnsthe path separator slash or backslash depending on the platform. ; Definition at line 43 of file FoundationUtils.hxx. ◆ GetRootSys(). const std::string & ROOT::FoundationUtils::GetRootSys ; (; ). Returnsthe rootsys directory in the installation. ; Definition at line 158 of file FoundationUtils.cxx. ◆ MakePathRelative(). std::string ROOT::FoundationUtils::MakePathRelative ; (; const std::string & ; path, . const std::string & ; base, . bool ; isBuildingROOT = false . ). Returnsthe relative path of path with respect to base. For instance, for path being ""/a/b/c/d"" and base ""/a/b"", returns ""c/d"".; Parameters. path- the input path; base- the base path to be removed from path.; isBuildingROOT- if true, it converts module directories such as core/base/inc/ to include/ . Definition at line 82 of file FoundationUtils.cxx. ◆ str_tolower(). static std::string ROOT::FoundationUtils::str_tolower ; (; std::string ; s). static . Definition at line 208 of file FoundationUtils.cxx. ROOTFoundationUtils. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html:3744,Guid,Guide,3744,doc/v632/namespaceROOT_1_1FoundationUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1FoundationUtils.html,1,['Guid'],['Guide']
Usability,"r &) override;  Stream an object of class TEllipse. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArc.html:5810,Clear,Clear,5810,doc/master/classTArc.html,https://root.cern,https://root.cern/doc/master/classTArc.html,3,['Clear'],['Clear']
Usability,"r &ClassDef_StreamerNVirtual_b);  ; template<class T > ; Int_t WriteObject (const T *objptr, Bool_t cacheReuse=kTRUE);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:25935,Clear,Clear,25935,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,6,['Clear'],['Clear']
Usability,"r &ClassDef_StreamerNVirtual_b);  ; virtual void WriteTrees ();  Does nothing here ... reimplemented in sub-classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveVSD.html:2188,Clear,Clear,2188,doc/master/classTEveVSD.html,https://root.cern,https://root.cern/doc/master/classTEveVSD.html,1,['Clear'],['Clear']
Usability,"r &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:112; ROOT::Math::GSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The tem...Definition GSLMultiRootFunctionAdapter.h:68; ROOT::Math::GSLMultiRootFunctionWrapperwrapper to a multi-dim function without derivatives for multi roots algorithmDefinition GSLMultiRootFunctionWrapper.h:57; ROOT::Math::GSLMultiRootFunctionWrapper::fFuncgsl_multiroot_function fFuncDefinition GSLMultiRootFunctionWrapper.h:84; ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctionsgsl_multiroot_function * GetFunctions()Definition GSLMultiRootFunctionWrapper.h:79; ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapperGSLMultiRootFunctionWrapper()Definition GSLMultiRootFunctionWrapper.h:61; ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctionsvoid SetFunctions(const FuncVector &f, unsigned int n)Fill gsl function structure from a C++ function iterator and size and number of residuals.Definition GSLMultiRootFunctionWrapper.h:71; double; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiRootFdfPointervoid(* GSLMultiRootFdfPointer)(const gsl_vector *, void *, gsl_vector *, gsl_matrix *)Definition GSLMultiRootFunctionWrapper.h:50; ROOT::Math::GSLMultiRootDfPointervoid(* GSLMultiRootDfPointer)(const gsl_vector *, void *, gsl_matrix *)Definition GSLMultiRootFunctionWrapper.h:49; ROOT::Math::GSLMultiRootFPointerdouble(* GSLMultiRootFPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiRootFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoresrcGSLMultiRootFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html:6874,Guid,Guide,6874,doc/master/GSLMultiRootFunctionWrapper_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFunctionWrapper_8h_source.html,1,['Guid'],['Guide']
Usability,"r () const;  ; TGUndockedFrame * GetUndocked () const;  ; void HideContainer ();  Hide dock container. ;  ; TClass * IsA () const override;  ; Bool_t IsFixedSize () const;  ; Bool_t IsHidden () const;  ; Bool_t IsUndocked () const;  ; Bool_t ProcessMessage (Longptr_t, Longptr_t, Longptr_t) override;  Process dockable frame messages. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a dockable frame widget as a C++ statement(s) on output stream out. ;  ; void SetFixedSize (Bool_t fixed);  ; void SetWindowName (const char *name) override;  Set window name so it appear as title of the undock window. ;  ; void ShowContainer ();  Show dock container. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UndockContainer ();  Undock container. ;  ; virtual void Undocked ();  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; UInt_t GetDefaultWidth () const override;  ; TGFrame * GetFrameFromPoint (Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockableFrame.html:2341,Undo,Undocked,2341,doc/master/classTGDockableFrame.html,https://root.cern,https://root.cern/doc/master/classTGDockableFrame.html,1,['Undo'],['Undocked']
Usability,"r (Int_t devInd) override;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  ; void SelectOffScreenDevice (Int_t devInd) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGOSXGLManager.html:2345,Clear,Clear,2345,doc/master/classTGOSXGLManager.html,https://root.cern,https://root.cern/doc/master/classTGOSXGLManager.html,1,['Clear'],['Clear']
Usability,"r (TCollection *c, const char *par, Long64_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Long_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, TString &value);  Get the value from the specified parameter from the specified collection. ;  ; static void LogViewer (const char *url=0, Int_t sessionidx=0);  Start the log viewer window usign the plugin manager. ;  ; static TProofMgr * Mgr (const char *url);  Get instance of the effective manager for 'url' Return 0 on failure. ;  ; static TProof * Open (const char *url=0, const char *conffile=0, const char *confdir=0, Int_t loglevel=0);  Start a PROOF session on a specific cluster. ;  ; static void Reset (const char *url, Bool_t hard=kFALSE);  Wrapper around TProofMgr::Reset(...). ;  ; static void ResetEnvVars ();  Clear the list of environment variables passed to proofserv on the master and slaves. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:34371,Clear,Clear,34371,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,4,['Clear'],['Clear']
Usability,"r * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofServ.h 39696 2011-06-13 21:35:34Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServ.html:32952,resume,resume,32952,root/html532/TProofServ.html,https://root.cern,https://root.cern/root/html532/TProofServ.html,1,['resume'],['resume']
Usability,"r * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofServ.h 39697 2011-06-13 21:43:43Z pcanal $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:32952,resume,resume,32952,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,1,['resume'],['resume']
Usability,"r * RooCFunction1PdfBinding< VO, VI >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 315 of file RooCFunction1Binding.h. ◆ evaluate(). template<class VO , class VI > . double RooCFunction1PdfBinding< VO, VI >::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 308 of file RooCFunction1Binding.h. ◆ IsA(). template<class VO , class VI > . TClass * RooCFunction1PdfBinding< VO, VI >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 315 of file RooCFunction1Binding.h. ◆ printArgs(). template<class VO , class VI > . void RooCFunction1PdfBinding< VO, VI >::printArgs ; (; std::ostream & ; os); const. inlineoverridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 290 of file RooCFunction1Binding.h. ◆ Streamer(). template<class VO , class VI > . void RooCFunction1PdfBinding< VO, VI >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). template<class VO , class VI > . void RooCFunction1PdfBinding< VO, VI >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 315 of file RooCFunction1Binding.h. Member Data Documentation. ◆ func. template<class VO , class VI > . RooCFunction1Ref<VO,VI> RooCFunction1PdfBinding< VO, VI >::func. protected . Definition at line 305 of file RooCFunction1Binding.h. ◆ x. template<class VO , class VI > . RooRealProxy RooCFunction1PdfBinding< VO, VI >::x. protected . Definition at line 306 of file RooCFunction1Binding.h. roofit/roofit/inc/RooCFunction1Binding.h. RooCFunction1PdfBinding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1PdfBinding.html:77042,Guid,Guide,77042,doc/master/classRooCFunction1PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1PdfBinding.html,1,['Guid'],['Guide']
Usability,"r * RooRangeBoolean::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 43 of file RooRangeBoolean.h. ◆ evaluate(). double RooRangeBoolean::evaluate ; (; ); const. overrideprotectedvirtual . Return 1 if x is in range, zero otherwise. ; Implements RooAbsReal.; Definition at line 61 of file RooRangeBoolean.cxx. ◆ IsA(). TClass * RooRangeBoolean::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 43 of file RooRangeBoolean.h. ◆ plotSamplingHint(). std::list< double > * RooRangeBoolean::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 74 of file RooRangeBoolean.cxx. ◆ Streamer(). void RooRangeBoolean::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRangeBoolean::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 43 of file RooRangeBoolean.h. Member Data Documentation. ◆ _rangeName. TString RooRangeBoolean::_rangeName. protected . Definition at line 39 of file RooRangeBoolean.h. ◆ _x. RooRealProxy RooRangeBoolean::_x. protected . Definition at line 38 of file RooRangeBoolean.h. Libraries for RooRangeBoolean:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRangeBoolean.h; roofit/roofitcore/src/RooRangeBoolean.cxx. RooRangeBoolean. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRangeBoolean.html:62874,Guid,Guide,62874,doc/master/classRooRangeBoolean.html,https://root.cern,https://root.cern/doc/master/classRooRangeBoolean.html,1,['Guid'],['Guide']
Usability,"r * TEveSelection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveSelection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 104 of file TEveSelection.h. ◆ DeactivateSelection(). void TEveSelection::DeactivateSelection ; (; ). virtual . Deactivate this selection. ; Definition at line 271 of file TEveSelection.cxx. ◆ DeclFileName(). static const char * TEveSelection::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 104 of file TEveSelection.h. ◆ DoElementSelect(). void TEveSelection::DoElementSelect ; (; TEveSelection::SelMap_i ; entry). protected . Select element indicated by the entry and fill its implied-selected set. ; Definition at line 62 of file TEveSelection.cxx. ◆ DoElementUnselect(). void TEveSelection::DoElementUnselect ; (; TEveSelection::SelMap_i ; entry). protected . Deselect element indicated by the entry and clear its implied-selected set. ; Definition at line 77 of file TEveSelection.cxx. ◆ GetIsMaster(). Bool_t TEveSelection::GetIsMaster ; (; ); const. inline . Definition at line 67 of file TEveSelection.h. ◆ GetPickToSelect(). Int_t TEveSelection::GetPickToSelect ; (; ); const. inline . Definition at line 64 of file TEveSelection.h. ◆ IsA(). TClass * TEveSelection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 104 of file TEveSelection.h. ◆ MapPickedToSelected(). TEveElement * TEveSelection::MapPickedToSelected ; (; TEveElement * ; el). Given element el that was picked or clicked by the user, find the parent/ancestor element that should actually become the main selected element according to current selection mode. ; Definition at line 283 of file TEveSelection.cxx. ◆ operator=(). TEveSelection & TEveSelection::operator= ; (; const TEveSelection & ; ). private . ◆ RecheckImpliedSet(). vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelection.html:42903,clear,clear,42903,doc/master/classTEveSelection.html,https://root.cern,https://root.cern/doc/master/classTEveSelection.html,1,['clear'],['clear']
Usability,"r * TNonSplitBrowsable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 146 of file TBranchBrowsable.h. ◆ GetBrowsables(). Int_t TNonSplitBrowsable::GetBrowsables ; (; TList & ; list, . const TBranch * ; branch, . const TVirtualBranchBrowsable * ; parent = nullptr . ). static . Given either a branch ""branch"" or a ""parent"" TVirtualBranchBrowsable, we fill ""list"" with objects of type TNonSplitBrowsable which represent the members of class ""cl"" (and its base classes' members). ; Definition at line 635 of file TBranchBrowsable.cxx. ◆ IsA(). TClass * TNonSplitBrowsable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 146 of file TBranchBrowsable.h. ◆ Register(). void TNonSplitBrowsable::Register ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 724 of file TBranchBrowsable.cxx. ◆ Streamer(). void TNonSplitBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TNonSplitBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 146 of file TBranchBrowsable.h. ◆ Unregister(). void TNonSplitBrowsable::Unregister ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 734 of file TBranchBrowsable.cxx. Libraries for TNonSplitBrowsable:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchBrowsable.h; tree/tree/src/TBranchBrowsable.cxx. TNonSplitBrowsable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNonSplitBrowsable.html:18061,Guid,Guide,18061,doc/master/classTNonSplitBrowsable.html,https://root.cern,https://root.cern/doc/master/classTNonSplitBrowsable.html,1,['Guid'],['Guide']
Usability,"r *)=0;  ; virtual void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y)=0;  ; virtual Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py)=0;  ; virtual void PrintViewer (TVirtualViewer3D *vv)=0;  ; virtual void ReadGLBuffer (Int_t ctxInd)=0;  ; virtual Bool_t ResizeOffScreenDevice (Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h)=0;  ; virtual Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox)=0;  ; virtual void SelectOffScreenDevice (Int_t ctxInd)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLManager.html:2134,Clear,Clear,2134,doc/master/classTGLManager.html,https://root.cern,https://root.cern/doc/master/classTGLManager.html,1,['Clear'],['Clear']
Usability,"r *filename)TEntryListinlinevirtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetReapplyCut(bool apply=false)TEntryListinlinevirtual; SetShift(bool shift)TEntryListinlinevirtual; SetTitle(const char *title="""")TNamedvirtual; SetTree(const TTree *tree)TEntryListvirtual; SetTree(const char *treename, const char *filename)TEntryListvirtual; SetTreeName(const char *treename)TEntryListinlinevirtual; SetTreeNumber(Int_t index)TEntryListinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTEntryListvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TEntryListinline; Subtract(const TEntryList *elist)TEntryListvirtual; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TEntryList()TEntryList; TEntryList(const char *name, const char *title)TEntryList; TEntryList(const char *name, const char *title, const TTree *tree)TEntryList; TEntryList(const char *name, const char *title, const char *treename, const char *filename)TEntryList; TEntryList(const TTree *tree)TEntryList; TEntryList(const TEntryList &elist)TEntryList; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TEntryList() overrideTEntryList; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryList-members.html:8987,Guid,Guide,8987,doc/master/classTEntryList-members.html,https://root.cern,https://root.cern/doc/master/classTEntryList-members.html,1,['Guid'],['Guide']
Usability,"r *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * cli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:41358,clear,clear,41358,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,3,['clear'],['clear']
Usability,"r *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; const RefCountL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddition.html:28171,clear,clear,28171,doc/master/classRooAddition.html,https://root.cern,https://root.cern/doc/master/classRooAddition.html,8,['clear'],['clear']
Usability,"r *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:41139,clear,clear,41139,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,8,['clear'],['clear']
Usability,"r *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::Fillvirtual Int_t Fill()Fill all branches.Definition TTree.cxx:4603; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::BranchTBranch * Branch(const char *name, T *obj, Int_t bufsize=32000, Int_t splitlevel=99)Add a new branch, and infer the data type from the type of obj being passed.Definition TTree.h:353; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; c1return c1Definition legend1.C:41; AuthorThe ROOT Team ; Definition in file hvector.C. tutorialstreehvector.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hvector_8C.html:6025,Guid,Guide,6025,doc/master/hvector_8C.html,https://root.cern,https://root.cern/doc/master/hvector_8C.html,1,['Guid'],['Guide']
Usability,"r *name, const char *formula, TFunc110 fpointer);  Constructor. ;  ;  TFormulaPrimitive (const char *name, const char *formula, TFunc1110 fpointer);  Constructor. ;  ;  TFormulaPrimitive (const char *name, const char *formula, TFuncG fpointer);  Constructor. ;  ; Double_t Eval (Double_t *x);  Eval primitive function at point x. ;  ; Double_t Eval (Double_t *x, Double_t *param);  Eval primitive parametric function. ;  ; Double_t Eval (TObject *o, Double_t *x);  Eval member function of object o at point x. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html:4816,Clear,Clear,4816,doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormulaPrimitive.html,1,['Clear'],['Clear']
Usability,"r *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TQCommand.h>. Inheritance diagram for TQCommand:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TQCommand() [1/3]. TQCommand::TQCommand ; (; const char * ; clname = nullptr, . void * ; obj = nullptr, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; clname - class name.; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments:; if either clname or obj is NULL that means that redo/undo is function; to specify default arguments for redo/undo method/function '=' must precede to argument value. Example: TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case undo parameter can be omitted.; Example: TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. Definition at line 168 of file TQCommand.cxx. ◆ TQCommand() [2/3]. TQCommand::TQCommand ; (; TObject * ; obj, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments: to specify default arguments for redo/undo method/function '=' must precede to argument value.; Example: TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:32101,undo,undo,32101,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,2,['undo'],['undo']
Usability,"r *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGLEventHandler.h>. Inheritance diagram for TGLEventHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGLEventHandler(). TGLEventHandler::TGLEventHandler ; (; TGWindow * ; w, . TObject * ; obj . ). Constructor. ; Definition at line 58 of file TGLEventHandler.cxx. ◆ ~TGLEventHandler(). TGLEventHandler::~TGLEventHandler ; (; ). override . Destructor. ; Definition at line 90 of file TGLEventHandler.cxx. Member Function Documentation. ◆ ClassDefOverride(). TGLEventHandler::ClassDefOverride ; (; TGLEventHandler ; , . 0 ;  . ). ◆ ClearMouseOver(). void TGLEventHandler::ClearMouseOver ; (; ). virtual . Clear mouse-over state and emit mouse-over signals. ; Current overlay element is also told the mouse has left. ; Definition at line 1034 of file TGLEventHandler.cxx. ◆ ControlValue(). Int_t TGLEventHandler::ControlValue ; (; Int_t ; v). inlineprotected . Definition at line 64 of file TGLEventHandler.h. ◆ ExecuteEvent(). void TGLEventHandler::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Process event of type 'event' - one of EEventType types, occurring at window location px, py This is provided for use when embedding GL viewer into pad. ; Reimplemented from TObject.; Definition at line 219 of file TGLEventHandler.cxx. ◆ GetArcBall(). Bool_t TGLEventHandler::GetArcBall ; (; ); const. inline . Definition at line 103 of file TGLEventHandler.h. ◆ GetDoInternalSelection(). Bool_t TGLEventHandler::GetDoInternalSelection ; (; ); const. inline . Definition at line 100 of file TGLEventHandler.h. ◆ GetSecSelType(). Int_t TGLEventHandler::GetSecSelType ; (; ); const. inline . Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEventHandler.html:21131,Clear,Clear,21131,doc/master/classTGLEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGLEventHandler.html,1,['Clear'],['Clear']
Usability,"r *signal, const T& arg) { EmitVA(signal, /*nargs*/ 1, arg); } \; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; TListA doubly linked list.Definition TList.h:38; TQObjSenderDefinition TQObject.h:233; TQObjSender::SetSendervirtual void SetSender(void *sender)Definition TQObject.h:250; TQObjSender::SetSenderClassNamevoid SetSenderClassName(const char *sclass="""")Definition TQObject.h:251; TQObject::GetListOfSignalsTList * GetListOfSignals() constDefinition TQObject.h:88; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TQObject::EmitVAvoid EmitVA(const char *signal_name, Int_t, const T &... params)Emit a signal with a varying number of arguments.Definition TQObject.h:100; TQObject::LowPriorityvirtual void LowPriority(const char *signal_name, const char *slot_name=nullptr)Definition TQObject.cxx:504; TQObject::DisconnectBool_t Disconnect(const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr)Disconnects signal of this object from slot of receiver.Definition TQObject.cxx:1027; TQObject::HighPriorityvirtual void HighPriority(const char *signal_name, const char *slot_name=nullptr)Definition TQObject.cxx:477; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34. Definition at line 66 of file RQ_OBJECT.h. ◆ RQ_OBJECT2. #define RQ_OBJECT2; (;  ; sender_class). Value:void Destroyed(){Emit(""Destroyed()"");}\; void ChangedBy(const char *method){Emit(""ChangedBy(char*)"",method);}\; void Message(const char *msg){Emit(""Message(char*)"",msg);}\; private:; Messagestd::string Message(const std::string &msg, const std::string &location)Definition Scanner.cxx:179. Definition at line 81 of file RQ_OBJECT.h. corebaseincRQ_OBJECT.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RQ__OBJECT_8h.html:3787,Guid,Guide,3787,doc/master/RQ__OBJECT_8h.html,https://root.cern,https://root.cern/doc/master/RQ__OBJECT_8h.html,1,['Guid'],['Guide']
Usability,r * ; fileName). Add File name(s) from the file location URL to the list view. ; Definition at line 1075 of file TSessionDialogs.cxx. ◆ AddFiles() [2/2]. void TUploadDataSetDlg::AddFiles ; (; TList * ; fileList). Add File name(s) from the file location URL to the list view. ; Definition at line 1120 of file TSessionDialogs.cxx. ◆ BrowseFiles(). void TUploadDataSetDlg::BrowseFiles ; (; ). Opens the TGFileDialog to allow user to select local file(s) to be added in the list view of dataset files. ; Definition at line 1146 of file TSessionDialogs.cxx. ◆ Class(). static TClass * TUploadDataSetDlg::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUploadDataSetDlg::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUploadDataSetDlg::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 154 of file TSessionDialogs.h. ◆ ClearFiles(). void TUploadDataSetDlg::ClearFiles ; (; ). Clear content of the list view. ; Definition at line 1163 of file TSessionDialogs.cxx. ◆ CloseWindow(). void TUploadDataSetDlg::CloseWindow ; (; ). overridevirtual . Close upload dataset dialog. ; Reimplemented from TGMainFrame.; Definition at line 1018 of file TSessionDialogs.cxx. ◆ DeclFileName(). static const char * TUploadDataSetDlg::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 154 of file TSessionDialogs.h. ◆ IsA(). TClass * TUploadDataSetDlg::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGTransientFrame.; Definition at line 154 of file TSessionDialogs.h. ◆ OnAppendFiles(). void TUploadDataSetDlg::OnAppendFiles ; (; Bool_t ; on). Notification of Append Files check button. ; Definition at line 1190 of file TSessionDialogs.cxx. ◆ OnOverwriteDataset(). void TUploadDataSetDlg::OnOverwriteDataset ; (; Bool_t ; on). Notification of Overwri,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUploadDataSetDlg.html:38821,Clear,ClearFiles,38821,doc/master/classTUploadDataSetDlg.html,https://root.cern,https://root.cern/doc/master/classTUploadDataSetDlg.html,1,['Clear'],['ClearFiles']
Usability,"r * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 65 of file RooFunctor1DBinding.h. ◆ DeclFileName(). static const char * RooFunctor1DPdfBinding::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file RooFunctor1DBinding.h. ◆ evaluate(). double RooFunctor1DPdfBinding::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 114 of file RooFunctor1DBinding.cxx. ◆ IsA(). TClass * RooFunctor1DPdfBinding::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 78 of file RooFunctor1DBinding.h. ◆ printArgs(). void RooFunctor1DPdfBinding::printArgs ; (; std::ostream & ; os); const. overridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 99 of file RooFunctor1DBinding.cxx. ◆ Streamer(). void RooFunctor1DPdfBinding::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooFunctor1DPdfBinding::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file RooFunctor1DBinding.h. Member Data Documentation. ◆ func. const ROOT::Math::IBaseFunctionOneDim* RooFunctor1DPdfBinding::func. protected . Definition at line 72 of file RooFunctor1DBinding.h. ◆ var. RooRealProxy RooFunctor1DPdfBinding::var. protected . Definition at line 73 of file RooFunctor1DBinding.h. Libraries for RooFunctor1DPdfBinding:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooFunctor1DBinding.h; roofit/roofit/src/RooFunctor1DBinding.cxx. RooFunctor1DPdfBinding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html:76484,Guid,Guide,76484,doc/master/classRooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html,1,['Guid'],['Guide']
Usability,"r * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TUnfold; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * GetTUnfoldVersion (void);  return a string describing the TUnfold version ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void ClearResults (void) override;  Clear all data members which depend on the unfolding results. ;  ; void DoBackgroundSubtraction (void);  perform background subtraction ;  ; void GetEmatrixFromVyy (const TMatrixDSparse *vyy, TH2 *ematrix, const Int_t *binMap, Bool_t clearEmat);  propagate an error matrix on the input vector to the unfolding result ;  ; TMatrixDSparse * GetSummedErrorMatrixXX (void);  determine total error matrix on the vector x ;  ; TMatrixDSparse * GetSummedErrorMatrixYY (void);  determine total error matrix on the vector Ax ;  ; virtual TMatrixDSparse * PrepareCorrEmat (const TMatrixDSparse *m1, const TMatrixDSparse *m2, const TMatrixDSparse *dsys);  propagate correlated systematic shift to an output vector ;  ; virtual void PrepareSysError (void);  Matrix calculations required to propagate systematic errors. ;  ; virtual TMatrixDSparse * PrepareUncorrEmat (const TMatrixDSparse *m1, const TMatrixDSparse *m2);  propagate uncorrelated systematic errors to a covariance matrix ;  ; void ScaleColumnsBy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:22775,Clear,ClearResults,22775,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,['Clear'],"['Clear', 'ClearResults']"
Usability,"r += std::get<0>(result) / batches.size ();; 823 std::vector<double> output = std::get<1>(result);; 824 if (output.size() == (outputSize() - 1) * itBatch->size()); 825 {; 826 auto output_iterator = output.begin();; 827 for (auto pattern_it = itBatch->begin(); pattern_it != itBatch->end(); ++pattern_it); 828 {; 829 for (size_t output_index = 1; output_index < outputSize(); ++output_index); 830 {; 831 settings.testSample (0, *output_iterator, (*pattern_it).output ().at (0),; 832 (*pattern_it).weight ());; 833 ++output_iterator;; 834 }; 835 }; 836 }; 837 ++itBatch;; 838 }; 839 ; 840 }; 841 else; 842 {; 843 std::vector<double> output;; 844 //for (auto it = begin (testPattern), itEnd = end (testPattern); it != itEnd; ++it); 845 {; 846 //const Pattern& p = (*it);; 847 //double weight = p.weight ();; 848 //Batch batch (it, it+1);; 849 Batch batch (begin (testPattern), end (testPattern));; 850 output.clear ();; 851 pass_through_type passThrough (settings, batch, dropContainerTest);; 852 double testPatternError = (*this) (passThrough, weights, ModeOutput::FETCH, output);; 853 if (output.size() == (outputSize() - 1) * batch.size()); 854 {; 855 auto output_iterator = output.begin();; 856 for (auto pattern_it = batch.begin(); pattern_it != batch.end(); ++pattern_it); 857 {; 858 for (size_t output_index = 1; output_index < outputSize(); ++output_index); 859 {; 860 settings.testSample (0, *output_iterator, (*pattern_it).output ().at (0),; 861 (*pattern_it).weight ());; 862 ++output_iterator;; 863 }; 864 }; 865 }; 866 testError += testPatternError; /// batch.size ();; 867 }; 868 // testError /= testPattern.size ();; 869 }; 870 settings.endTestCycle ();; 871// testError /= weightSum;; 872 ; 873 settings.computeResult (*this, weights);; 874 ; 875 hasConverged = settings.hasConverged (testError);; 876 if (!hasConverged && !isWeightsForDrop); 877 {; 878 dropOutWeightFactor (weights, dropFractions, true); // inverse; 879 isWeightsForDrop = true;; 880 }; 881 }; 882 ++testCycleCount;; 883",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:25627,clear,clear,25627,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['clear'],['clear']
Usability,"r ; (; ). inlineoverride . Definition at line 78 of file TRobustEstimator.h. Member Function Documentation. ◆ AddColumn(). void TRobustEstimator::AddColumn ; (; Double_t * ; col). adds a column to the data matrix it is assumed that the column has size fN variable fVarTemp keeps the number of columns l already added ; Definition at line 171 of file TRobustEstimator.cxx. ◆ AddRow(). void TRobustEstimator::AddRow ; (; Double_t * ; row). adds a vector to the data matrix it is supposed that the vector is of size fNvar ; Definition at line 192 of file TRobustEstimator.cxx. ◆ AddToSscp(). void TRobustEstimator::AddToSscp ; (; TMatrixD & ; sscp, . TVectorD & ; vec . ). protected . update the sscp matrix with vector vec ; Definition at line 779 of file TRobustEstimator.cxx. ◆ Classic(). void TRobustEstimator::Classic ; (; ). protected . called when h=n. ; Returns classic covariance matrix and mean ; Definition at line 809 of file TRobustEstimator.cxx. ◆ ClearSscp(). void TRobustEstimator::ClearSscp ; (; TMatrixD & ; sscp). protected . clear the sscp matrix, used for covariance and mean calculation ; Definition at line 796 of file TRobustEstimator.cxx. ◆ Correl(). void TRobustEstimator::Correl ; (; ). protected . transforms covariance matrix into correlation matrix ; Definition at line 850 of file TRobustEstimator.cxx. ◆ Covar(). void TRobustEstimator::Covar ; (; TMatrixD & ; sscp, . TVectorD & ; m, . TMatrixDSym & ; cov, . TVectorD & ; sd, . Int_t ; nvec . ). protected . calculates mean and covariance ; Definition at line 827 of file TRobustEstimator.cxx. ◆ CreateOrtSubset(). void TRobustEstimator::CreateOrtSubset ; (; TMatrixD & ; dat, . Int_t * ; index, . Int_t ; hmerged, . Int_t ; nmerged, . TMatrixD & ; sscp, . Double_t * ; ndist . ). protected . creates a subset of hmerged vectors with smallest orthogonal distances to the hyperplane hyp[1]*(x1-mean[1])+...+hyp[nvar]*(xnvar-mean[nvar])=0 This function is called in case when less than fH samples lie on a hyperplane. ; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:21118,Clear,ClearSscp,21118,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['Clear'],['ClearSscp']
Usability,"r = 0); return boosted MVA response. Double_t GetBoostROCIntegral(Bool_t , TMVA::Types::ETreeType , Bool_t CalcOverlapIntergral = kFALSE); Calculate the ROC integral of a single classifier or even the; whole boosted classifier. The tree type (training or testing; sample) is specified by 'eTT'. If tree type kTraining is set, the original training sample is; used to compute the ROC integral (original weights). - singleMethod - if kTRUE, return ROC integral of single (last; trained) classifier; if kFALSE, return ROC; integral of full classifier. - eTT - tree type (Types::kTraining / Types::kTesting). - CalcOverlapIntergral - if kTRUE, the overlap integral of the; signal/background MVA distributions; is calculated and stored in; 'fOverlap_integral'. void CalcMVAValues(); Calculate MVA values of current method fMethods.back() on; training sample. void MonitorBoost(TMVA::Types::EBoostStage stage, UInt_t methodIdx = 0); fill various monitoring histograms from information of the individual classifiers that; have been boosted.; of course.... this depends very much on the individual classifiers, and so far, only for; Decision Trees, this monitoring is actually implemented. void SetBoostedMethodName(TString methodName); { fBoostedMethodName = methodName; }. Int_t GetBoostNum(); { return fBoostNum; }. void ClearAll(); clean up. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; print fit results. MethodBase* CurrentMethod(); {return fCurrentMethod;}. UInt_t CurrentMethodIdx(); training a single classifier. {return fCurrentMethodIdx;}. Double_t CalcMethodWeight(); calculate weight of single method. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Or Cohen, Jan Therhaag, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBoost.html:22603,Clear,ClearAll,22603,root/html534/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBoost.html,1,['Clear'],['ClearAll']
Usability,"r ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; modeOption_t Option_t TPoint TPoint const char modeDefinition TGWin32VirtualXProxy.cxx:68; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; namechar name[80]Definition TGX11.cxx:110; TPave.h; TText.h; TAttTextText Attributes class.Definition TAttText.h:18; TBoxCreate a Box.Definition TBox.h:22; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TListA doubly linked list.Definition TList.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::fLongestInt_t fLongestLength of the longest line.Definition TPaveText.h:25; TPaveText::GetSizevirtual Int_t GetSize() constreturn number of text lines (ignoring TLine, etc)Definition TPaveText.cxx:373; TPaveText::~TPaveText~TPaveText() overridepavetext default destructor.Definition TPaveText.cxx:118; TPaveText::GetListOfLinesvirtual TList * GetListOfLines() constDefinition TPaveText.h:48; TPaveText::GetLabelconst char * GetLabel() constDefinition TPaveText.h:45; TPaveText::fLinesTList * fLinesList of labels.Definition TPaveText.h:27; TPaveText::PaintPrimit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8h_source.html:5061,simpl,simple,5061,doc/master/TPaveText_8h_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8h_source.html,1,['simpl'],['simple']
Usability,r Data Documentation. ◆ fBuffer. char* TKey::fBuffer. protected . Object buffer. ; Definition at line 49 of file TKey.h. ◆ fBufferRef. TBuffer* TKey::fBufferRef. protected . Pointer to the TBuffer object. ; Definition at line 50 of file TKey.h. ◆ fClassName. TString TKey::fClassName. protected . Object Class name. ; Definition at line 47 of file TKey.h. ◆ fCycle. Short_t TKey::fCycle. protected . Cycle number. ; Definition at line 44 of file TKey.h. ◆ fDatime. TDatime TKey::fDatime. protected . Date/Time of insertion in file. ; Definition at line 42 of file TKey.h. ◆ fKeylen. Short_t TKey::fKeylen. protected . Number of bytes for the key itself. ; Definition at line 43 of file TKey.h. ◆ fLeft. Int_t TKey::fLeft. protected . Number of bytes left in current segment. ; Definition at line 48 of file TKey.h. ◆ fMotherDir. TDirectory* TKey::fMotherDir. protected . !pointer to mother directory ; Definition at line 52 of file TKey.h. ◆ fNbytes. Int_t TKey::fNbytes. protected . Number of bytes for the object on file. ; Definition at line 40 of file TKey.h. ◆ fObjlen. Int_t TKey::fObjlen. protected . Length of uncompressed object in bytes. ; Definition at line 41 of file TKey.h. ◆ fPidOffset. UShort_t TKey::fPidOffset. protected . !Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir ; Definition at line 51 of file TKey.h. ◆ fSeekKey. Long64_t TKey::fSeekKey. protected . Location of object on file. ; Definition at line 45 of file TKey.h. ◆ fSeekPdir. Long64_t TKey::fSeekPdir. protected . Location of parent directory on file. ; Definition at line 46 of file TKey.h. ◆ fVersion. Int_t TKey::fVersion. protected . Key version identifier. ; Definition at line 39 of file TKey.h. Libraries for TKey:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TKey.h; io/io/src/TKey.cxx. TKey. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKey.html:35985,Guid,Guide,35985,doc/master/classTKey.html,https://root.cern,https://root.cern/doc/master/classTKey.html,1,['Guid'],['Guide']
Usability,"r Functions |; Private Attributes |; Friends |; List of all members ; ROOT::RDF::RResultPtr< T > Class Template ReferenceDataframe. ; template<typename T>; class ROOT::RDF::RResultPtr< T >Smart pointer for the return type of actions. ; A wrapper around the result of RDataFrame actions able to trigger calculations lazily. Template Parameters. TType of the action result. A smart pointer which allows to access the result of a RDataFrame action. The methods of the encapsulated object can be accessed via the arrow operator. Upon invocation of the arrow operator or dereferencing (operator*), the loop on the events and calculations of all scheduled actions are executed if needed. It is possible to iterate on the result proxy if the proxied object is a collection. for (auto& myItem : myResultProxy) { ... };; If iteration is not supported by the type of the proxied object, a compilation error is thrown. ; Definition at line 119 of file RResultPtr.hxx. Public Types; using Value_t = T;  Convenience alias to simplify access to proxied type. ;  . Public Member Functions;  RResultPtr ()=default;  ;  RResultPtr (const RResultPtr &)=default;  ; template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> ;  RResultPtr (const RResultPtr< T2 > &r);  Convert a RResultPtr<T2> to a RResultPtr<T>. ;  ;  RResultPtr (RResultPtr &&)=default;  ; RIterationHelper< T >::Iterator_t begin ();  Return an iterator to the beginning of the contained object if this makes sense, throw a compilation error otherwise. ;  ; RIterationHelper< T >::Iterator_t end ();  Return an iterator to the end of the contained object if this makes sense, throw a compilation error otherwise. ;  ; T * GetPtr ();  Get the pointer to the encapsulated object. ;  ; const T & GetValue ();  Get a const reference to the encapsulated object. ;  ; bool IsReady () const;  Check whether the result has already been computed. ;  ; RResultPtr< T > & OnPartialResult (UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:1278,simpl,simplify,1278,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['simpl'],['simplify']
Usability,r Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoExtension(). TGeoExtension::TGeoExtension ; (; ). inlineprotected . Definition at line 19 of file TGeoExtension.h. ◆ ~TGeoExtension(). TGeoExtension::~TGeoExtension ; (; ). inlineoverrideprotected . Definition at line 20 of file TGeoExtension.h. Member Function Documentation. ◆ Class(). static TClass * TGeoExtension::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoExtension::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoExtension::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 30 of file TGeoExtension.h. ◆ DeclFileName(). static const char * TGeoExtension::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 30 of file TGeoExtension.h. ◆ Grab(). virtual TGeoExtension * TGeoExtension::Grab ; (; ). pure virtual . Implemented in TGeoRCExtension. ◆ IsA(). TClass * TGeoExtension::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGeoRCExtension.; Definition at line 30 of file TGeoExtension.h. ◆ Release(). virtual void TGeoExtension::Release ; (; ); const. pure virtual . Implemented in TGeoRCExtension. ◆ Streamer(). void TGeoExtension::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGeoRCExtension. ◆ StreamerNVirtual(). void TGeoExtension::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 30 of file TGeoExtension.h. Libraries for TGeoExtension:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoExtension.h. TGeoExtension. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoExtension.html:12402,Guid,Guide,12402,doc/master/classTGeoExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoExtension.html,1,['Guid'],['Guide']
Usability,"r SEXP ; (; ). inline . Definition at line 380 of file TRDataFrame.h. ◆ operator SEXP() [2/2]. ROOT::R::TRDataFrame::operator SEXP ; (; ); const. inline . Definition at line 385 of file TRDataFrame.h. ◆ operator=() [1/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; SEXP ; obj). inline . Definition at line 374 of file TRDataFrame.h. ◆ operator=() [2/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; TRDataFrame & ; obj). inline . Definition at line 362 of file TRDataFrame.h. ◆ operator=() [3/3]. TRDataFrame & ROOT::R::TRDataFrame::operator= ; (; TRDataFrame ; obj). inline . Definition at line 368 of file TRDataFrame.h. ◆ operator[](). TRDataFrame::Binding TRDataFrame::operator[] ; (; const TString & ; name). Definition at line 28 of file TRDataFrame.cxx. ◆ Print(). void ROOT::R::TRDataFrame::Print ; (; const Char_t * ; label = """"). inline . Method to print the dataframe in stdout or a column given the label. ; Parameters. labelnumber of the column to print . Definition at line 427 of file TRDataFrame.h. ◆ Streamer(). virtual void ROOT::R::TRDataFrame::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRDataFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 437 of file TRDataFrame.h. Friends And Related Symbol Documentation. ◆ Rcpp::wrap. SEXP Rcpp::wrap ; (; const TRDataFrame & ; f). friend . ◆ TRInterface. friend class TRInterface. friend . Definition at line 177 of file TRDataFrame.h. Member Data Documentation. ◆ df. Rcpp::DataFrame ROOT::R::TRDataFrame::df. protected . Definition at line 180 of file TRDataFrame.h. Libraries for ROOT::R::TRDataFrame:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRDataFrame.h; bindings/r/src/TRDataFrame.cxx. ROOTRTRDataFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html:19271,Guid,Guide,19271,doc/master/classROOT_1_1R_1_1TRDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRDataFrame.html,1,['Guid'],['Guide']
Usability,"r TGeoXtru:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoXtru() [1/4]. TGeoXtru::TGeoXtru ; (; const TGeoXtru & ; ). protecteddelete . mutex for thread data . ◆ TGeoXtru() [2/4]. TGeoXtru::TGeoXtru ; (; ). ◆ TGeoXtru() [3/4]. TGeoXtru::TGeoXtru ; (; Int_t ; nz). ◆ TGeoXtru() [4/4]. TGeoXtru::TGeoXtru ; (; Double_t * ; param). ◆ ~TGeoXtru(). TGeoXtru::~TGeoXtru ; (; ). override . Member Function Documentation. ◆ Capacity(). Double_t TGeoXtru::Capacity ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Class(). static TClass * TGeoXtru::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoXtru::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoXtru::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 121 of file TGeoXtru.h. ◆ ClearThreadData(). void TGeoXtru::ClearThreadData ; (; ); const. overridevirtual . Reimplemented from TGeoShape. ◆ ComputeBBox(). void TGeoXtru::ComputeBBox ; (; ). overridevirtual . Reimplemented from TGeoBBox. ◆ ComputeNormal(). void TGeoXtru::ComputeNormal ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t * ; norm . ). overridevirtual . Reimplemented from TGeoBBox. ◆ ComputeNormal_v(). void TGeoXtru::ComputeNormal_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; norms, . Int_t ; vecsize . ). overridevirtual . Reimplemented from TGeoBBox. ◆ Contains(). Bool_t TGeoXtru::Contains ; (; const Double_t * ; point); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Contains_v(). void TGeoXtru::Contains_v ; (; const Double_t * ; points, . Bool_t * ; inside, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ CreateThreadData(). void TGeoXtru::CreateThreadData ; (; Int_t ; nthreads). overridevirtual . Reimplemented from TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoXtru.html:24199,Clear,ClearThreadData,24199,doc/master/classTGeoXtru.html,https://root.cern,https://root.cern/doc/master/classTGeoXtru.html,1,['Clear'],['ClearThreadData']
Usability,"r Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQUndoManager.html:19347,Undo,Undo,19347,root/html534/TQUndoManager.html,https://root.cern,https://root.cern/root/html534/TQUndoManager.html,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"r Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 25128 2008-08-12 17:59:19Z pcanal $ » Last generated: 2010-09-23 20:20; This page has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:19144,Undo,Undo,19144,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"r Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-07-04 15:36; This page has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQUndoManager.html:19328,Undo,Undo,19328,root/html530/TQUndoManager.html,https://root.cern,https://root.cern/root/html530/TQUndoManager.html,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"r Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); Returns a maximum number of commands which could be located in stack. UInt_t GetLimit() const; Returns a maximum number of commands which could be located in stack. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TQCommand.h 39365 2011-05-24 19:53:19Z pcanal $ » Last generated: 2011-11-03 20:22; This page has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TQUndoManager.html:19328,Undo,Undo,19328,root/html532/TQUndoManager.html,https://root.cern,https://root.cern/root/html532/TQUndoManager.html,2,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"r WAN) and the network latency is high.; For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each; with no cache will imply 10s penalty where a local read of the 10 MBytes would; take about 1 second.; The TreeCache will try to prefetch all the buffers for the selected branches; such that instead of transfering 1000 buffers of 10 Kbytes, it will be able; to transfer one single large buffer of 10 Mbytes in one single transaction.; Not only the TreeCache minimizes the number of transfers, but in addition; it can sort the blocks to be read in increasing order such that the file; is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TreeCache in; reading ahead as much data as they can and return to the application; the maximum data specified in the cache and have the next chunk of data ready; when the next request comes. HOW TO USE the TreeCache. A few use cases are discussed below. It is not simple to activate the cache; by default (except case1 below) because there are many possible configurations.; In some applications you know a priori the list of branches to read.; In other applications the analysis loop calls several layers of user functions; where it is impossible to predict a priori which branches will be used. This; is probably the most frequent case. In this case ROOT I/O will flag used; branches automatically when a branch buffer is read during the learning phase.; The TreeCache interface provides functions to instruct the cache about the used; branches if they are known a priori. In the examples below, portions of analysis; code are shown. The few statements involving the TreeCache are marked with //<<<. 1- with TTree::Draw. the TreeCache is automatically used by TTree::Draw. The function knows; which branches are used in the query and it puts automatically these branches; in the cache. The entry range is also known automatically. 2- with TTree::Process and TSelectors. You must enable the cache and tell the sy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:3715,simpl,simple,3715,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,3,['simpl'],['simple']
Usability,"r algorithms (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches the limit value one can choose either smooth transition (by decreasing the limit value) or a sharp modulo transition (continuing with 0 value). This makes possible to realize various visual effects. One can choose from the following set of the algorithms:. 0 = RGB Smooth; 1 = RGB Modulo; 2 = CMY Smooth; 3 = CMY Modulo; 4 = CIE Smooth; 5 = CIE Modulo; 6 = YIQ Smooth; 7 = YIQ Modulo; 8 = HVS Smooth; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default value is 0. Example: h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");; choose CMY Modulo to paint the ""h2"" histogram.; lp(x,y,z) set the light position. In Light and LightHeight display modes groups the color palette is calculated according to the fictive light source position in 3-d space. Using this function one can change the position of the source and thus to achieve various graphical effects. This function does not apply for Simple and Height display modes groups. Default is: lp(1000,1000,100).; s(shading,shadow) allows to set the shading. The picture's surface is composed of triangles. If desired the edges of the neighbouring triangles can be smoothed (shaded). If desired the display of the shadow can be painted as well. The function does not apply for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are painted. Default values: s(1,0); b(bezier) set the Bezier smoothing. For Simple display modes group and for Grid, LinesX and LinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply for other display modes groups and display modes. Possible values are:. 0 = No bezier smoothing; 1 = Bezier smoothing. Default value is: b(0); cw(width) set the contour width. This function applies only for the Contours display mode. One can change the width betwe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:48991,Simpl,Simple,48991,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"r another; TH1 histogram (for all dimensions).; For example the following two statements create and fill an histogram; 10000 times with a default gaussian distribution of mean 0 and sigma 1:. TH1F h1(""h1"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);. TH1::GetRandom can be used to return a random number distributed; according the contents of an histogram.; Making a copy of an histogram; Like for any other ROOT object derived from TObject, one can use; the Clone() function. This makes an identical copy of the original; histogram including all associated errors and functions, e.g.:. TH1F *hnew = (TH1F*)h->Clone(""hnew"");. Normalizing histograms; One can scale an histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram.; Drawing histograms; Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; Many drawing options are supported.; See THistPainter::Paint() for more details. The same histogram can be drawn with different options in different pads.; When an histogram drawn in a pad is deleted, the histogram is; automatically removed from the pad or pads where it was drawn.; If an histogram is drawn in a pad, then filled again, the new status; of the histogram will be automatically shown in the pad next time; the pad is updated. One does not need to redraw the histogram.; To draw the current version of an histogram in a pad, one can use. h->DrawCopy();. This makes a clone (see Clone below) of the histogram. Once the clone; is drawn, the original histogram may be modified or deleted without; affecting the aspect of the clone. One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular; value for the maximum or the minimum scale on the plot. (For 1-D; histograms this means the y-axis, while for 2-D histograms these; fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:13452,usab,usable,13452,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['usab'],['usable']
Usability,"r baskets) will be serialized using those particular features.; Example usage: ROOT::TIOFeatures features;; features.Set(ROOT::Experimental::EIOFeatures::kGenerateOffsetMap);; ttree_ref.SetIOFeatures(features);; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; The method TTree::SetIOFeatures creates a copy of the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of the TIOFeatures to stdout. ;  ; bool Set (const std::string &);  Given a IO feature string, set the corresponding feature. ;  ; bool Set (EIOFeatures bits);  Set a specific IO feature. ;  ; bool Set (Experimental::EIOFeatures bits);  Set a specific IO feature. ;  ; bool Test (EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOUnsupportedFeatures bits) const;  . Static Public Attributes; static constexpr int kIOFeatureCount = 1;  . Private Member Functions;  TIOFeatures (UChar_t IOBits);  ; UChar_t GetFeatures () const;  ; void Set (UChar_t newBits);  . Private Attributes; UChar_t fIOBits {0};  . Friends; class ::TBasket;  ; class ::TBranch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:1835,Clear,Clear,1835,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,4,['Clear'],['Clear']
Usability,"r block ;  ; Bool_t fCanCreateObjects {kTRUE};  ! indicates if canvas allowed to create extra objects for interactive painting ;  ; Long64_t fCanvVersion {1};  ! actual canvas version, changed with every new Modified() call ;  ; UInt_t fClientBits {0};  ! latest status bits from client like editor visible or not ;  ; UInt_t fColorsHash {0};  ! last hash of colors/palette ;  ; Long64_t fColorsVersion {0};  ! current colors/palette version, checked every time when new snapshot created ;  ; Bool_t fFixedSize {kFALSE};  ! is canvas size fixed ;  ; std::vector< std::unique_ptr< ROOT::RWebDisplayHandle > > fHelpHandles;  ! array of handles for help widgets ;  ; Int_t fJsonComp {0};  ! compression factor for messages send to the client ;  ; Bool_t fLongerPolling {kFALSE};  ! when true, make longer polling in blocking operations ;  ; ObjectSelectSignal_t fObjSelectSignal;  ! signal emitted when new object selected in the pad ;  ; PadClickedSignal_t fPadClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; PadClickedSignal_t fPadDblClickedSignal;  ! signal emitted when simple mouse click performed on the pad ;  ; std::map< TPad *, PadStatus > fPadsStatus;  ! map of pads in canvas and their status flags ;  ; Int_t fPaletteDelivery {1};  ! colors palette delivery 0:never, 1:once, 2:always, 3:per subpad ;  ; Int_t fPrimitivesMerge {100};  ! number of PS primitives, which will be merged together ;  ; Bool_t fProcessingData {kFALSE};  ! flag used to prevent blocking methods when process data is invoked ;  ; Bool_t fReadOnly {kFALSE};  !< configured display ;  ; Int_t fStyleDelivery {0};  ! gStyle delivery to clients: 0:never, 1:once, 2:always ;  ; UInt_t fStyleHash {0};  ! last hash of gStyle ;  ; Long64_t fStyleVersion {0};  ! current gStyle object version, checked every time when new snapshot created ;  ; Int_t fTF1UseSave {1};  ! use save buffer for TF1/TF2, 0:off, 1:prefer, 2:force ;  ; TWebCanvasTimer * fTimer {nullptr};  ! timer to submit control",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:14854,simpl,simple,14854,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['simpl'],['simple']
Usability,"r chamber; by positioning it 1000 times in different positions of the pad. Unfortunatelly,; this is far from being the optimal way of doing what we want.; Imagine that we would like to find out which of the 1000 chambers is containing; a (x,y,z) point defined in the pad reference. You will never have to do that,; since the modeller will take care of it for you, but let's guess what it has; to do. The most simple algorithm will just loop over all daughters, convert; the point from mother to local reference and check if the current chamber; contains the point or not. This might be efficient for pads with few chambers,; but definitely not for 1000. Fortunately the modeler is smarter than that and; create for each volume some optimization structures called voxels (see Voxelization); to minimize the penalty having too many daughters, but if you have 100 pads like; this in your geometry you will anyway loose a lot in your tracking performance. The way out when volumes can be arranged according to simple patterns is the; usage of divisions. We will describe them in detail later on. Let's think now; at a different situation : instead of 1000 chambers of the same type, we may; have several types of chambers. Let's say all chambers are cylindrical and have; a wire inside, but their dimensions are different. However, we would like all; to be represented by a single volume family, since they have the same properties. Volume families (TGeoVolumeMulti). A volume family is represented by the class TGeoVolumeMulti. It represents; a class of volumes having the same shape type and each member will be; identified by the same name and volume ID. Any operation applied to a; TGeoVolume equally affects all volumes in that family. The creation of a; family is generally not a user task, but can be forced in particular cases:. TGeoManager::Volume(const char *vname, const char *shape, Int_t nmed);. where VNAME is the family name, NMED is the medium number and SHAPE is the; shape type that can",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:10025,simpl,simple,10025,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,9,['simpl'],['simple']
Usability,"r class ;  CTSplineBase class for spline implementation containing the Draw/Paint methods // ;  CTSpline3;  CTSpline5;  CTSplinePoly;  CTSplinePoly3;  CTSplinePoly5;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarhical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:188050,feedback,feedback,188050,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['feedback'],['feedback']
Usability,"r collection and the other collection have a size of one, the arguments are always synchronized without checking if they have the same name. . Definition at line 305 of file RooAbsCollection.cxx. ◆ begin(). const_iterator RooAbsCollection::begin ; (; ); const. inline . Definition at line 253 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 432 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 282 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 392 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:35942,clear,clear,35942,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,1,['clear'],['clear']
Usability,"r coordinates. Used for graphs painting.Definition TGraphPainter.h:69; TGraphPainter::SetHighlightvoid SetHighlight(TGraph *theGraph) overrideSet highlight (enable/disable) mode for theGraph.Definition TGraphPainter.cxx:1120; TGraphPainter::GetHighlightPointvirtual Int_t GetHighlightPoint(TGraph *theGraph) constReturn the highlighted point for theGraph.Definition TGraphPainter.cxx:1110; TGraphPainter::PaintGraphSimplevoid PaintGraphSimple(TGraph *theGraph, Option_t *option)Paint a simple graph, without errors bars.Definition TGraphPainter.cxx:4584; TGraphPainter::PaintGraphQQvoid PaintGraphQQ(TGraph *theGraph, Option_t *option)Paint this graphQQ. No options for the time being.Definition TGraphPainter.cxx:4084; TGraphPainter::~TGraphPainter~TGraphPainter() overrideDestructor.Definition TGraphPainter.cxx:675; TGraphPainter::SetMaxPointsPerLinestatic void SetMaxPointsPerLine(Int_t maxp=50)Static function to set fgMaxPointsPerLine for graph painting.Definition TGraphPainter.cxx:5407; TGraphPainter::PaintGraphBentErrorsvoid PaintGraphBentErrors(TGraph *theGraph, Option_t *option)Paint this TGraphBentErrors with its current attributes.Definition TGraphPainter.cxx:3182; TGraphPainter::TGraphPainterTGraphPainter()Default constructor.Definition TGraphPainter.cxx:667; TGraphPainter::PaintHelpervoid PaintHelper(TGraph *theGraph, Option_t *option) overridePaint a any kind of TGraph.Definition TGraphPainter.cxx:1211; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TScatterA TScatter is able to draw four variables scatter plot on a single plot.Definition TScatter.h:32; TVirtualGraphPainterAbstract interface to a histogram painter.Definition TVirtualGraphPainter.h:28; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16. histhistpainterincTGraphPainter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8h_source.html:9453,Guid,Guide,9453,doc/master/TGraphPainter_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8h_source.html,1,['Guid'],['Guide']
Usability,"r defined later with TMultiLayerPerceptron::SetData(). Events can also be weighted. The weight expression can be given in the constructor or set later with the method SetWeight() of the class TMultiLayerPerceptron. Two datasets must be defined before learning the network: a training dataset that is used when minimizing the error, and a test dataset that will avoid bias. Those two datasets can be built aside and then given to the network, or can be built from a standard expression. By default, half of the events are put in both datasets.; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; The method TMultiLayerPerceptron::SetLearningMethod() defines the learning method. Learning methods are:; TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS // default; The training can start with TMultiLayerPerceptron::Train(Int_t nepoch,Option_t* options). The first argument is the number of epochs while option is a string that can contain “text” (simple text output), “graph” (evaluating graphical training curves), “update = X” (step for the text/graph output update) or “+” (will skip the randomization and start from the previous values). All combinations are available.; network.Train(1000,""text,graph,update=10""); // full output every; // 10 epochs; network.Train(100,""text,+""); // 100 more epochs; //starts with existing weights; The weights can be saved to a file (DumpWeights) and then reloaded (LoadWeights) to a new compatible network. The output can also be evaluated (Evaluate) for a given output neuron and an array of double input parameters or the network can be exported (Export) as a standalone code. Up to now, this is only as a C++ or PYTHON class, but other lan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:236598,Learn,Learning,236598,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Learn'],['Learning']
Usability,"r expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch added or already included; -1 on error. Int_t DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch dropped or not in cache; -1 on error. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:23661,learn,learning,23661,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['learn'],['learning']
Usability,"r file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::QuickMVAProbEstimator. class TMVA::QuickMVAProbEstimator. Function Members (Methods); public:. virtual~QuickMVAProbEstimator(); voidAddEvent(Double_t val, Double_t weight, Int_t type); static TClass*Class(); static boolcompare(TMVA::QuickMVAProbEstimator::EventInfo e1, TMVA::QuickMVAProbEstimator::EventInfo e2); Double_tGetMVAProbAt(Double_t value); virtual TClass*IsA() const; TMVA::QuickMVAProbEstimator&operator=(const TMVA::QuickMVAProbEstimator&); TMVA::QuickMVAProbEstimatorQuickMVAProbEstimator(const TMVA::QuickMVAProbEstimator&); TMVA::QuickMVAProbEstimatorQuickMVAProbEstimator(Int_t nMin = 40, Int_t nMax = 5000); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. vector<TMVA::QuickMVAProbEstimator::EventInfo>fEvtVector; Bool_tfIsSorted; TMVA::MsgLogger*fLogger; UInt_tfNMax; UInt_tfNMin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddEvent(Double_t val, Double_t weight, Int_t type). Double_t GetMVAProbAt(Double_t value); Well.. if it's fast is actually another question all together, merely; it's a quick and dirty simple kNN approach to the 1-Dim signal/backgr. MVA; distributions. bool compare(TMVA::QuickMVAProbEstimator::EventInfo e1, TMVA::QuickMVAProbEstimator::EventInfo e2); {return e1.eventValue < e2.eventValue;}. QuickMVAProbEstimator(Int_t nMin = 40, Int_t nMax = 5000); { fLogger = new MsgLogger(""QuickMVAProbEstimator"");}. virtual ~QuickMVAProbEstimator(); {delete fLogger;}. » Last changed: Tue Jun 30 15:17:30 2015 » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__QuickMVAProbEstimator.html:1505,simpl,simple,1505,root/html602/TMVA__QuickMVAProbEstimator.html,https://root.cern,https://root.cern/root/html602/TMVA__QuickMVAProbEstimator.html,1,['simpl'],['simple']
Usability,"r instance that operates on function 'func' and is configured with 'config'. ; If ndimPreset is greater than zero that number is taken as the dimensionality of the integration, otherwise it is queried from 'func'. This function iterators over list of available prototype integrators and returns an clone attached to the given function of the first class that matches the specifications of the requested integration considering the number of dimensions, the nature of the limits (open ended vs closed) and the user preference stated in 'config' ; Definition at line 156 of file RooNumGenFactory.cxx. ◆ getProtoSampler(). const RooAbsNumGenerator * RooNumGenFactory::getProtoSampler ; (; const char * ; name). Return prototype integrator with given (class) name. ; Definition at line 136 of file RooNumGenFactory.cxx. ◆ instance(). RooNumGenFactory & RooNumGenFactory::instance ; (; ). static . Static method returning reference to singleton instance of factory. ; Definition at line 101 of file RooNumGenFactory.cxx. ◆ storeProtoSampler(). bool RooNumGenFactory::storeProtoSampler ; (; RooAbsNumGenerator * ; proto, . const RooArgSet & ; defConfig . ). Method accepting registration of a prototype numeric integrator along with a RooArgSet of its default configuration options and an optional list of names of other numeric integrators on which this integrator depends. ; Returns true if integrator was previously registered ; Definition at line 113 of file RooNumGenFactory.cxx. Friends And Related Symbol Documentation. ◆ RooNumGenConfig. friend class RooNumGenConfig. friend . Definition at line 45 of file RooNumGenFactory.h. Member Data Documentation. ◆ _map. std::map<std::string,RooAbsNumGenerator*> RooNumGenFactory::_map. protected . Definition at line 47 of file RooNumGenFactory.h. roofit/roofitcore/src/RooNumGenFactory.h; roofit/roofitcore/src/RooNumGenFactory.cxx. RooNumGenFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:14305,Guid,Guide,14305,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,1,['Guid'],['Guide']
Usability,"r int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. 3. Using TKDTree. 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developped to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:; {; TTree *datatree = ... datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TKDTree_int_double_.html:4118,simpl,simplify,4118,root/html528/TKDTree_int_double_.html,https://root.cern,https://root.cern/root/html528/TKDTree_int_double_.html,12,['simpl'],['simplify']
Usability,r interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TRuby Ruby/ROOT interface; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class ; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summur,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:123450,pause,paused,123450,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['pause'],['paused']
Usability,"r is already set constant. We don't need to set it constant twice, and we issue a warning in case this is a hint of a possible bug ; Definition at line 69 of file Measurement.cxx. ◆ AddFunctionObject(). void RooStats::HistFactory::Measurement::AddFunctionObject ; (; const RooStats::HistFactory::PreprocessFunction ; function). inline . add a preprocess function object ; Definition at line 74 of file Measurement.h. ◆ AddPOI(). void RooStats::HistFactory::Measurement::AddPOI ; (; const std::string & ; POI). inline . append parameter to vector of PoIs ; Definition at line 49 of file Measurement.h. ◆ AddPreprocessFunction(). void RooStats::HistFactory::Measurement::AddPreprocessFunction ; (; std::string ; name, . std::string ; expression, . std::string ; dependencies . ). Add a preprocessed function by giving the function a name, a functional expression, and a string with a bracketed list of dependencies (eg ""SigXsecOverSM[0,3]"") ; Definition at line 112 of file Measurement.cxx. ◆ ClearConstantParams(). void RooStats::HistFactory::Measurement::ClearConstantParams ; (; ). inline . empty vector of constant parameters ; Definition at line 60 of file Measurement.h. ◆ ClearParamValues(). void RooStats::HistFactory::Measurement::ClearParamValues ; (; ). inline . clear map of parameter values ; Definition at line 70 of file Measurement.h. ◆ GetAsimovDatasets(). std::vector< RooStats::HistFactory::Asimov > & RooStats::HistFactory::Measurement::GetAsimovDatasets ; (; ). inline . get vector of defined Asimov Datasets ; Definition at line 82 of file Measurement.h. ◆ GetBinHigh(). int RooStats::HistFactory::Measurement::GetBinHigh ; (; ). inline . Definition at line 98 of file Measurement.h. ◆ GetBinLow(). int RooStats::HistFactory::Measurement::GetBinLow ; (; ). inline . Definition at line 97 of file Measurement.h. ◆ GetConstantParams(). std::vector< std::string > & RooStats::HistFactory::Measurement::GetConstantParams ; (; ). inline . get vector of all constant parameters ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:16076,Clear,ClearConstantParams,16076,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['Clear'],['ClearConstantParams']
Usability,r list tree. ;  ; TGCompositeFrame * fListHdr;  Header for list view. ;  ; TGLabel * fLbl1;  Label for list tree. ;  ; TGLabel * fLbl2;  Label for list view. ;  ; TGHorizontalFrame * fBFrame;  Button frame. ;  ; TGHorizontalFrame * fHpb;  Progress bar frame. ;  ; TGHProgressBar * fProgressBar;  Progress bar. ;  ; TGLabel * fBLbl4;  Label for input list entry. ;  ; TGLabel * fBLbl5;  Label for output list entry. ;  ; TGTextEntry * fBarListIn;  Tree input event list name entry. ;  ; TGTextEntry * fBarListOut;  Pree output event list name entry. ;  ; TGPictureButton * fDRAW;  DRAW button. ;  ; TGTextButton * fSPIDER;  SPIDER button. ;  ; TGPictureButton * fSTOP;  Interrupt current command (not yet) ;  ; TGPictureButton * fREFR;  REFRESH button ///<ia. ;  ; TGStatusBar * fStatusBar;  Status bar. ;  ; TGComboBox * fCombo;  Combo box with session records. ;  ; TGPictureButton * fBGFirst;  ; TGPictureButton * fBGPrevious;  ; TGPictureButton * fBGRecord;  ; TGPictureButton * fBGNext;  ; TGPictureButton * fBGLast;  ; TGTextButton * fReset;  clear expression's entries ;  ; ListTree; TGCanvas * fTreeView;  ListTree canvas container. ;  ; TGListTree * fLt;  ListTree with file and tree items. ;  ; ListView; TGListView * fListView;  ListView with branches and leaves. ;  ; TTVLVContainer * fLVContainer;  Container for listview. ;  ; TList * fWidgets;  List of widgets to be deleted. ;  . Friends; class TGButton;  ; class TGClient;  . Additional Inherited Members;  Protected Types inherited from TGMainFrame; enum  { kDontCallClose = (1ULL << ( 14 )); };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGMainFrame; TString GetMWMfuncString () const;  used in SaveSource() ;  ; TString GetMWMinpString () const;  used in SaveSource() ;  ; TString GetMWMvalueString () const;  used in SaveSource() ;  ;  Protecte,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:42595,clear,clear,42595,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['clear'],['clear']
Usability,"r no output classes \n \; 1542 can be equally true or false (e.g. Event 0: A and B are true, Event 1: \n \; 1543 A and C is true, Event 2: C is true, ...) \n \; 1544 - MUTUALEXCLUSIVE \n \; 1545 In multiclass settings, exactly one of the output classes can be true (e.g. either A or B or C) \n \; 1546 \n \; 1547 \""WeightInitialization\"" \n \; 1548 - XAVIER \n \; 1549 [recommended] \n \; 1550 \""Xavier Glorot & Yoshua Bengio\""-style of initializing the weights. The weights are chosen randomly \n \; 1551 such that the variance of the values of the nodes is preserved for each layer. \n \; 1552 - XAVIERUNIFORM \n \; 1553 The same as XAVIER, but with uniformly distributed weights instead of gaussian weights \n \; 1554 - LAYERSIZE \n \; 1555 Random values scaled by the layer size \n \; 1556 \n \; 1557 \""TrainingStrategy\"" \n \; 1558 - example: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5|LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFraction=0.0,DropRepetitions=5\"" \n \; 1559 - explanation: two stacked training settings separated by \""|\"" \n \; 1560 . first training setting: \""LearningRate=1e-1,Momentum=0.3,ConvergenceSteps=50,BatchSize=30,TestRepetitions=7,WeightDecay=0.0,Renormalize=L2,DropConfig=0.0,DropRepetitions=5\"" \n \; 1561 . second training setting : \""LearningRate=1e-4,Momentum=0.3,ConvergenceSteps=50,BatchSize=20,TestRepetitions=7,WeightDecay=0.001,Renormalize=L2,DropFractions=0.0,DropRepetitions=5\"" \n \; 1562 . LearningRate : \n \; 1563 - recommended for classification: 0.1 initially, 1e-4 later \n \; 1564 - recommended for regression: 1e-4 and less \n \; 1565 . Momentum : \n \; 1566 preserve a fraction of the momentum for the next training batch [fraction = 0.0 - 1.0] \n \; 1567 . Repetitions : \n \; 1568 train \""Repetitions\"" repetitions with the same minibatch before switching to the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:57861,Learn,LearningRate,57861,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Learn'],['LearningRate']
Usability,"r object (i.e. the text buffer will be deleted by the text entry widget). ; Definition at line 247 of file TGTextEntry.cxx. ◆ TGTextEntry() [3/4]. TGTextEntry::TGTextEntry ; (; const TGWindow * ; parent = nullptr, . const char * ; text = nullptr, . Int_t ; id = -1 . ). Simple text entry constructor. ; Definition at line 269 of file TGTextEntry.cxx. ◆ TGTextEntry() [4/4]. TGTextEntry::TGTextEntry ; (; const TString & ; contents, . const TGWindow * ; parent, . Int_t ; id = -1 . ). Simple test entry constructor. ; Notice TString argument comes before the parent argument (to make this ctor different from the first one taking a const char*). ; Definition at line 287 of file TGTextEntry.cxx. ◆ ~TGTextEntry(). TGTextEntry::~TGTextEntry ; (; ). override . Delete a text entry widget. ; Definition at line 303 of file TGTextEntry.cxx. Member Function Documentation. ◆ AppendText(). void TGTextEntry::AppendText ; (; const char * ; text). virtual . Appends text to the end of text entry, clears the selection and moves the cursor to the end of the line. ; If necessary the text is truncated to fit MaxLength(). See also GetText(), InsertText(), SetText(), RemoveText(). ; Definition at line 1689 of file TGTextEntry.cxx. ◆ Backspace(). void TGTextEntry::Backspace ; (; ). Deletes the character on the left side of the text cursor and moves the cursor one position to the left. ; If a text has been marked by the user (e.g. by clicking and dragging) the cursor will be put at the beginning of the marked text and the marked text will be removed. See also Del(). ; Definition at line 873 of file TGTextEntry.cxx. ◆ Class(). static TClass * TGTextEntry::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextEntry::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextEntry::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 184 of file TGTextEntry.h. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:43674,clear,clears,43674,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clears']
Usability,"r objects with data member values not in the right sequence. The solution to this problem is to call BypassStreamer(kFALSE) for the TClonesArray. In this case, the normal Bar::Streamer function will be called. The Bar::Streamer function works OK independently if the Bar StreamerInfo had been generated in optimized mode or not. . Definition at line 321 of file TClonesArray.cxx. ◆ CanBypassStreamer(). Bool_t TClonesArray::CanBypassStreamer ; (; ); const. inline . Definition at line 64 of file TClonesArray.h. ◆ Class(). static TClass * TClonesArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TClonesArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClonesArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 83 of file TClonesArray.h. ◆ Clear(). void TClonesArray::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Only use this routine when your objects don't allocate memory since it will not call the object dtors. However, if the class in the TClonesArray implements the function Clear(Option_t *option) and if option = ""C"" the function Clear() is called for all objects in the array. In the function Clear(), one can delete objects or dynamic arrays allocated in the class. This procedure is much faster than calling TClonesArray::Delete(). When the option starts with ""C+"", eg ""C+xyz"" the objects in the array are in turn cleared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:33137,Clear,Clear,33137,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"r only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; double evaluate () const override;  Calculate and return 'raw' unnormalized value of p.d.f. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:59364,simpl,simple,59364,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['simpl'],['simple']
Usability,"r or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initialized with a colon separated list of; system directories. const TSeqCollection * GetListOfEnvVars(); Uses ""env"" (Unix) or ""set"" (Windows) to get list of en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:7393,Clear,ClearUsers,7393,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,4,['Clear'],['ClearUsers']
Usability,"r package 'pack'. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Bool_t Has (const char *pack);  Method to check if this package manager has package 'pack'. ;  ; Int_t Install (const char *par, Bool_t rmold=kFALSE);  Install package from par (unpack the file in the directory); par can be an URL for remote retrieval. ;  ; TClass * IsA () const override;  ; Bool_t IsInDir (const char *path);  Method to check if 'path' is in the managed directory Return kTRUE or kFALSE. ;  ; Bool_t IsPackageEnabled (const char *pack);  ; Int_t Load (const char *pack, const char *opts);  Method to load a package taking an option const char * Return -1 on error, 0 otherwise. ;  ; Int_t Load (const char *pack, TList *optls=0);  Method to load a package taking an option list Return -1 on error, 0 otherwise. ;  ; TMD5 * ReadMD5 (const char *pack);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ; Int_t Remove (const char *pack=0, Bool_t dolock=kTRUE);  Remove package 'pack' If 'pack' is null or empty all packages are cleared. ;  ; void SetLogger (TPackMgrLog_t logger);  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetPrefix (const char *pfx);  ; void Show (const char *title=0);  Show available packages. ;  ; void ShowEnabled (const char *title=0);  Show enabled packages. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unload (const char *pack);  Method to unload a package. ;  ; Int_t Unpack (const char *pack, TMD5 *sum=0);  Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:3840,clear,cleared,3840,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['clear'],['cleared']
Usability,"r polygon/object to fill; //(gradient->SetCoordinateMode(TColorGradient::kObjectBoundingMode)); //or bounding rect of a pad (gradient->SetCoordinateMode(TColorGradient::kPadMode)).; //kObjectBoundingMode is the default one.; ; ; //Draw a text in the canvas (the object above the text will be; //semi-transparent):; auto t = new TText(0.05, 0.7, ""Can you see the text?"");; t->Draw();; ; //We create a nested pad on top to render a TPie in,; //this way we still have a text (below) + TPie with; //a fancy colour on top.; auto pad = new TPad(""p"", ""p"", 0., 0., 1., 1.);; ; //TPad itself is fully transparent:; auto transparentFill = TColor::GetColor((Float_t) 1., 1., 1., 0.);; pad->SetFillColor(transparentFill);; //Add our pad into the canvas:; pad->Draw();; pad->cd();; ; ; //Radial gradient fill for a TPie object:; auto col3 = TColor::GetColor((Float_t) 1., 0.8, 0., 1.); /*opaque orange at the start:*/; auto col4 = TColor::GetColor((Float_t) 1., 0.2, 0., 0.65); /*transparent red at the end:*/; ; //'Simple' radial gradient with radius 0.4; auto radialFill = TColor::GetRadialGradient(0.4, {col3, col4});; ; ; //Linear gradient fill (with an axis angle == 45):; auto col1 = TColor::GetColor((Float_t) 0.2, 0.2, 0.2); /*gray*/; auto col2 = TColor::GetColor((Float_t) 0.8, 1., 0.9); /*pale green*/; auto linearFill = TColor::GetLinearGradient(45., {col1, col2}); //45 degrees:; ; //Set as a background color in the canvas:; c->SetFillColor(linearFill);; ; ; const UInt_t nSlices = 5;; //Values for a TPie (non-const, that's how TPie's ctor is declared):; Double_t values[nSlices] = {0.8, 1.2, 1.2, 0.8, 1.};; Int_t colors[nSlices] = {radialFill, radialFill, radialFill,; radialFill, radialFill};; ; TPie * const pie = new TPie(""pie"", ""TPie:"", nSlices, values, colors);; //One slice is slightly shifted:; pie->SetEntryRadiusOffset(2, 0.05);; //Move labels to the center (to fit the pad's space):; pie->SetLabelsOffset(-0.08);; //; pie->SetRadius(0.4);; pie->Draw(""rsc"");; }; c#define c(i)Definition RS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gl_2gradients_8C.html:2275,Simpl,Simple,2275,doc/master/gl_2gradients_8C.html,https://root.cern,https://root.cern/doc/master/gl_2gradients_8C.html,1,['Simpl'],['Simple']
Usability,"r progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionQueryFrame.html:22383,Feedback,Feedback,22383,root/html602/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html,6,['Feedback'],['Feedback']
Usability,"r rewokred to local frame; Int_t*fSegsc0, p0, q0, c1, p1, q1, ..... ..... .... ; Short_tfTransparencyPercentage transparency [0,100]. private:. UInt_tfNbPntsNumber of points describing the shape; UInt_tfNbPolsNumber of polygons describing the shape; UInt_tfNbSegsNumber of segments describing the shape; UInt_tfPntsCapacityCurrent capacity of fPnts space; UInt_tfPolsCapacityCurrent capacity of fSegs space; UInt_tfSectionsSection validity flags; UInt_tfSegsCapacityCurrent capacity of fSegs space; const Int_tfTypePrimitive type - predefined ones in TBuffer3DTypes.h; static UInt_tfgCSLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBuffer3D(Int_t type, UInt_t reqPnts = 0, UInt_t reqPntsCapacity = 0, UInt_t reqSegs = 0, UInt_t reqSegsCapacity = 0, UInt_t reqPols = 0, UInt_t reqPolsCapacity = 0); Destructor; Construct from supplied shape type and raw sizes. ~TBuffer3D(); Destructor. void Init(); Initialise buffer. void ClearSectionsValid(); Clear any sections marked valid. void SetLocalMasterIdentity(); Set kRaw tesselation section of buffer with supplied sizes; Set fLocalMaster in section kCore to identity. void SetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); Set fBBVertex in kBoundingBox section to a axis aligned (local) BB; using supplied origin and box half lengths. 7-------6; /| /|; 3-------2 |; | 4-----|-5; |/ |; 0-------1. Bool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); Set kRaw tesselation section of buffer with supplied sizes. UInt_t GetCSLevel(); return CS level. void IncCSLevel(); increment CS level. UInt_t DecCSLevel(); decrement CS level. TBuffer3D(const TBuffer3D& ); Non-copyable class. const TBuffer3D & operator=(const TBuffer3D& ). void SetSectionsValid(UInt_t mask); Section validity flags. { fSections |= mask & kAll; }. Bool_t SectionsValid(UInt_t mask) const; { return (Bool_t) (GetSections(mas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer3D.html:16103,Clear,ClearSectionsValid,16103,root/html526/TBuffer3D.html,https://root.cern,https://root.cern/root/html526/TBuffer3D.html,10,['Clear'],"['Clear', 'ClearSectionsValid']"
Usability,"r should not be called by a user directly.; The normal way to create a folder is by calling TFolder::AddFolder. TFolder(const char* name, const char* title); Create a normal folder.; Use Add or AddFolder to add objects or folders to this folder. TFolder(const TFolder& folder); Copy constructor. ~TFolder(); Folder destructor. Remove all objects from its lists and delete; all its sub folders. void Add(TObject* obj); Add object to this folder. obj must be a TObject or a TFolder. TFolder * AddFolder(const char* name, const char* title, TCollection* collection = 0); Create a new folder and add it to the list of folders of this folder,; return a pointer to the created folder.; Note that a folder can be added to several folders. If collection is non NULL, the pointer fFolders is set to the existing; collection, otherwise a default collection (Tlist) is created.; Note that the folder name cannot contain slashes. void Browse(TBrowser* b); Browse this folder. void Clear(Option_t* option = """"); Delete all objects from a folder list. const char * FindFullPathName(const char* name) const; Return the full pathname corresponding to subpath name if the node is; gROOT->GetRootFolder() and return a relative path otherwise.; The returned path will be re-used by the next call to FindFullPathName(). const char * FindFullPathName(const TObject* obj) const; Return the full pathname corresponding to subpath name.; The returned path will be re-used by the next call to FindFullPathName(). TObject * FindObject(const TObject* obj) const; Find object in an folder. TObject * FindObject(const char* name) const; Search object identified by name in the tree of folders inside; this folder.; Name may be of the forms:; A, Specify a full pathname starting at the top ROOT folder; //root/xxx/yyy/name. B, Specify a pathname starting with a single slash. //root is assumed; /xxx/yyy/name. C, Specify a pathname relative to this folder; xxx/yyy/name; name. TObject * FindObjectAny(const char* name) const; Retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFolder.html:10206,Clear,Clear,10206,root/html530/TFolder.html,https://root.cern,https://root.cern/root/html530/TFolder.html,5,['Clear'],['Clear']
Usability,"r should not be called by a user directly.; The normal way to create a folder is by calling TFolder::AddFolder. TFolder(const char* name, const char* title); Create a normal folder.; Use Add or AddFolder to add objects or folders to this folder. TFolder(const TFolder& folder); Copy constructor. ~TFolder(); Folder destructor. Remove all objects from its lists and delete; all its sub folders. void Add(TObject* obj); Add object to this folder. obj must be a TObject or a TFolder. TFolder * AddFolder(const char* name, const char* title, TCollection* collection = 0); Create a new folder and add it to the list of folders of this folder,; return a pointer to the created folder.; Note that a folder can be added to several folders. If collection is non NULL, the pointer fFolders is set to the existing; collection, otherwise a default collection (Tlist) is created.; Note that the folder name cannot contain slashes. void Browse(TBrowser* b); Browse this folder. void Clear(Option_t* option = """"); Delete all objects from a folder list. const char * FindFullPathName(const char* name) const; Return the full pathname corresponding to subpath name.; The returned path will be re-used by the next call to GetPath(). const char * FindFullPathName(const TObject* obj) const; Return the full pathname corresponding to subpath name.; The returned path will be re-used by the next call to GetPath(). TObject * FindObject(const TObject* obj) const; Find object in an folder. TObject * FindObject(const char* name) const; Search object identified by name in the tree of folders inside; this folder.; Name may be of the forms:; A, Specify a full pathname starting at the top ROOT folder; //root/xxx/yyy/name. B, Specify a pathname starting with a single slash. //root is assumed; /xxx/yyy/name. C, Specify a pathname relative to this folder; xxx/yyy/name; name. TObject * FindObjectAny(const char* name) const; Return a pointer to the first object with name starting at this folder. Bool_t IsOwner() const; Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFolder.html:10137,Clear,Clear,10137,root/html528/TFolder.html,https://root.cern,https://root.cern/root/html528/TFolder.html,1,['Clear'],['Clear']
Usability,r state. ; Definition at line 1913 of file TRecorder.cxx. ◆ Streamer(). void TGRecorder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGMainFrame. ◆ StreamerNVirtual(). void TGRecorder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 658 of file TRecorder.h. ◆ Update(). void TGRecorder::Update ; (; ). Called when fTimer timeouts (every 0.025 second) Updates GUI of recorder. ; Definition at line 1851 of file TRecorder.cxx. Member Data Documentation. ◆ fCursorCheckBox. TGCheckButton* TGRecorder::fCursorCheckBox. private . Definition at line 640 of file TRecorder.h. ◆ fElapsed. time_t TGRecorder::fElapsed. private . Definition at line 643 of file TRecorder.h. ◆ fFilteredIds. Window_t TGRecorder::fFilteredIds[fgWidgetsCount]. private . Definition at line 646 of file TRecorder.h. ◆ fgWidgetsCount. const Int_t TGRecorder::fgWidgetsCount = 12. staticprivate . Definition at line 645 of file TRecorder.h. ◆ fRecorder. TRecorder* TGRecorder::fRecorder. private . Definition at line 633 of file TRecorder.h. ◆ fReplay. TGPictureButton* TGRecorder::fReplay. private . Definition at line 636 of file TRecorder.h. ◆ fStart. time_t TGRecorder::fStart. private . Definition at line 643 of file TRecorder.h. ◆ fStartStop. TGPictureButton* TGRecorder::fStartStop. private . Definition at line 635 of file TRecorder.h. ◆ fStatus. TGLabel* TGRecorder::fStatus. private . Definition at line 638 of file TRecorder.h. ◆ fTimeDisplay. TGLabel* TGRecorder::fTimeDisplay. private . Definition at line 639 of file TRecorder.h. ◆ fTimer. TTimer* TGRecorder::fTimer. private . Definition at line 642 of file TRecorder.h. Libraries for TGRecorder:. [legend]; The documentation for this class was generated from the following files:; gui/recorder/inc/TRecorder.h; gui/recorder/src/TRecorder.cxx. TGRecorder. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRecorder.html:39329,Guid,Guide,39329,doc/master/classTGRecorder.html,https://root.cern,https://root.cern/doc/master/classTGRecorder.html,1,['Guid'],['Guide']
Usability,"r suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoSphereEditor.html:21709,undo,undoing,21709,root/html534/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html534/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"r the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::OneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parametric function in one dimensional one.Definition OneDimFunctionAdapter.h:213; ROOT::Math::RichardsonDerivatorUser class for calculating the derivatives of a function.Definition RichardsonDerivator.h:55; double; ROOT::Math::chisquared_cdf_cdouble chisquared_cdf_c(double x, double r, double x0=0)Complement of the cumulative distribution function of the distribution with degrees of freedom (upp...Definition ProbFuncMathCore.cxx:57; ROOT::Math::normal_quantiledouble normal_quantile(double z, double sigma)Inverse ( ) of the cumulative distribution function of the lower tail of the normal (Gaussian) distri...Definition QuantFuncMathCore.cxx:134; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::gInitialResultStatusconst int gInitialResultStatusDefinition FitResult.cxx:43; ROOT::Math::Util::ToStringstd::string ToString(const T &val)Utility function for conversion to strings.Definition Util.h:50; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::ChisquareQuantileDouble_t ChisquareQuantile(Double_t p, Double_t ndf)Evaluate the quantiles of the chi-squared probability distribution function.Definition TMath.cxx:2193; TMath::StudentQuantileDouble_t StudentQuantile(Double_t p, Double_t ndf, Bool_t lower_tail=kTRUE)Computes quantiles of the Student's t-distribution 1st argument is the probability,...Definition TMath.cxx:2674; lTLine lDefinition textangle.C:4. mathmathcoresrcFitResult.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:38914,Guid,Guide,38914,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['Guid'],['Guide']
Usability,"r this element; TEntryList*TEventIter::fEntryList! entry list for processing; Long64_tTEventIter::fEntryListPos! current position in the entrylist; TEventList*TEventIter::fEventList! eventList for processing; Int_tTEventIter::fEventListPos! current position in the eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TList*TEventIter::fPacketslist of packets processed packets; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile); Load a tree from s TDSetElement. Int_t GetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList** evl = 0); Get loop range",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEventIterTree.html:7408,learn,learning,7408,root/html534/TEventIterTree.html,https://root.cern,https://root.cern/root/html534/TEventIterTree.html,1,['learn'],['learning']
Usability,"r this element; TEntryList*TEventIter::fEntryList! entry list for processing; Long64_tTEventIter::fEntryListPos! current position in the entrylist; TEventList*TEventIter::fEventList! eventList for processing; Int_tTEventIter::fEventListPos! current position in the eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TList*TEventIter::fPacketslist of packets processed packets; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile, const char* objname = 0); Load a tree from s TDSetElement. Int_t GetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList**",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEventIterTree.html:7901,learn,learning,7901,root/html602/TEventIterTree.html,https://root.cern,https://root.cern/root/html602/TEventIterTree.html,2,['learn'],['learning']
Usability,"r to create a simple line.Definition TLine.h:22; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::VecOps::powRVec< PromoteTypes< T0, T1 > > pow(const T0 &x, const RVec< T1 > &v)Definition RVec.hxx:1846; ROOT::VecOps::expRVec< PromoteType< T > > exp(const RVec< T > &v)Definition RVec.hxx:1837; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; . DateDecember 2016 ; AuthorsAxel Naumann, Danilo Piparo (CERN) ; Definition in file df101_h1Analysis.C. tutorialsdataframedf101_h1Analysis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df101__h1Analysis_8C.html:6902,Guid,Guide,6902,doc/master/df101__h1Analysis_8C.html,https://root.cern,https://root.cern/doc/master/df101__h1Analysis_8C.html,1,['Guid'],['Guide']
Usability,"r to match one ore more container; 273limits. Suppose we want to position the same box inside 2 different volumes; 274and we want the Z size to match the one of each container:; 275 ; 276~~~ {.cpp}; 277 TGeoVolume *container1 = gGeoManager->MakeBox(""C1"", imed, 10,10,30);; 278 TGeoVolume *container2 = gGeoManager->MakeBox(""C2"", imed, 10,10,20);; 279 TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"", jmed, 3,3,-1);; 280 container1->AddNode(pvol, 1);; 281 container2->AddNode(pvol, 1);; 282~~~; 283 ; 284 Note that the third parameter of PVOL is negative, which does not make sense; 285as half-length on Z. This is interpreted as: when positioned, create a box; 286replacing all invalid parameters with the corresponding dimensions of the; 287container. This is also internally handled by the TGeoVolumeMulti class, which; 288does not need to be instantiated by users.; 289 ; 290### Dividing volumes; 291 ; 292 Volumes can be divided according a pattern. The most simple division can; 293be done along one axis, that can be: X, Y, Z, Phi, Rxy or Rxyz. Let's take; 294the most simple case: we would like to divide a box in N equal slices along X; 295coordinate, representing a new volume family. Supposing we already have created; 296the initial box, this can be done like:; 297 ; 298~~~ {.cpp}; 299 TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N);; 300~~~; 301 ; 302where SLICE is the name of the new family representing all slices and 1 is the; 303slicing axis. The meaning of the axis index is the following: for all volumes; 304having shapes like box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for; 305tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and; 306pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi.; 307 In fact, the division operation has the same effect as positioning volumes; 308in a given order inside the divided container - the advantage being that the; 309navigation in such a structure is much faster. When a volume is div",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:14711,simpl,simple,14711,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['simpl'],['simple']
Usability,"r to the created sub-directory or to the top sub-directory of the hierarchy (in the above example, the returned TDirectory * always points to ""a""). ; Reimplemented from TDirectory.; Definition at line 1249 of file TDirectoryFile.cxx. ◆ OpenFile(). TFile * TDirectoryFile::OpenFile ; (; const char * ; name, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). overridevirtual . Interface to TFile::Open. ; Reimplemented from TDirectory.; Definition at line 1233 of file TDirectoryFile.cxx. ◆ operator=(). void TDirectoryFile::operator= ; (; const TDirectoryFile & ; ). privatedelete . ◆ Purge(). void TDirectoryFile::Purge ; (; Short_t ; nkeep = 1). overridevirtual . Purge lowest key cycles in a directory. ; By default, only the highest cycle of a key is kept. Keys for which the ""KEEP"" flag has been set are not removed. See TKey::Keep(). NOTE: This does not reduce the size of a TFile– the space is simply freed up to be overwritten. ; Reimplemented from TDirectory.; Definition at line 1290 of file TDirectoryFile.cxx. ◆ ReadAll(). void TDirectoryFile::ReadAll ; (; Option_t * ; opt = """"). overridevirtual . Read objects from a ROOT file directory into memory. ; If an object is already in memory, the memory copy is deleted and the object is again read from the file. If opt==""dirs"", only subdirectories will be read If opt==""dirs*"" complete directory tree will be read ; Reimplemented from TDirectory.; Definition at line 1326 of file TDirectoryFile.cxx. ◆ ReadKeys(). Int_t TDirectoryFile::ReadKeys ; (; Bool_t ; forceRead = kTRUE). overridevirtual . Read the linked list of keys. ; Every directory has a linked list (fKeys). This linked list has been written on the file via WriteKeys as a single data record.; It is interesting to call this function in the following situation. Assume another process1 is connecting this directory in Update mode; Process1 is adding/updating obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:42898,simpl,simply,42898,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['simpl'],['simply']
Usability,"r value in hex format like ""66FF66"" - without any prefix Alpha parameter can be optionally included. ; Definition at line 275 of file RColor.cxx. ◆ AsRGBA(). std::vector< uint8_t > RColor::AsRGBA ; (; ); const. Returns color as RGBA array, trying also convert color name into RGBA value. ; Returns color as RGBA array, includes optionally alpha parameter 0..255. ; Definition at line 197 of file RColor.cxx. ◆ AsString(). const std::string & ROOT::Experimental::RColor::AsString ; (; ); const. inline . Returns color as it stored as string. ; Definition at line 157 of file RColor.hxx. ◆ AsSVG(). std::string RColor::AsSVG ; (; ); const. Returns color value as it will be used in SVG drawing It either include hex format #66FF66 or just plain SVG name. ; Definition at line 291 of file RColor.cxx. ◆ AutoColor(). const RColor & RColor::AutoColor ; (; ). static . Set the color value from the Hue, Light, Saturation (HLS). ; Definition at line 383 of file RColor.cxx. ◆ Clear(). void ROOT::Experimental::RColor::Clear ; (; ). inline . Definition at line 171 of file RColor.hxx. ◆ ConvertNameToRGB(). std::vector< uint8_t > RColor::ConvertNameToRGB ; (; const std::string & ; name). staticprivate . Converts string name of color in RGB value - when possible. ; Definition at line 156 of file RColor.cxx. ◆ GetAlpha(). uint8_t ROOT::Experimental::RColor::GetAlpha ; (; ); const. inline . Returns color alpha (opacity) as uint8_t 0..255. ; Definition at line 130 of file RColor.hxx. ◆ GetAlphaFloat(). float ROOT::Experimental::RColor::GetAlphaFloat ; (; ); const. inline . Returns color alpha (opacity) as float from 0..1. ; Definition at line 137 of file RColor.hxx. ◆ GetBlue(). uint8_t ROOT::Experimental::RColor::GetBlue ; (; ); const. inline . Returns blue color component 0..255. ; Definition at line 123 of file RColor.hxx. ◆ GetGreen(). uint8_t ROOT::Experimental::RColor::GetGreen ; (; ); const. inline . Returns green color component 0..255. ; Definition at line 116 of file RColor.hxx. ◆ GetHL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html:8261,Clear,Clear,8261,doc/master/classROOT_1_1Experimental_1_1RColor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html,1,['Clear'],['Clear']
Usability,"r values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void optimizeConst(Bool_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:10399,simpl,simplex,10399,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,6,"['SIMPL', 'simpl']","['SIMPLEX', 'simplex']"
Usability,"r values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void optimizeConst(Int_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:10553,simpl,simplex,10553,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,8,"['SIMPL', 'simpl']","['SIMPLEX', 'simplex']"
Usability,"r values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void setNoWarn(); Instruct MINUIT to suppress warnings. Int_t setWarnLevel(Int_t newLevel); Set MINUIT warning level to given level. Bool_t synchronize(Bool_t verbose); Internal function to synchronize TMinuit with current; information in RooAbsReal function parameters. void optimizeConst(Bool_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot cont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:10709,simpl,simplex,10709,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,6,"['SIMPL', 'simpl']","['SIMPLEX', 'simplex']"
Usability,"r values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void setNoWarn(); Instruct MINUIT to suppress warnings. Int_t setWarnLevel(Int_t newLevel); Set MINUIT warning level to given level. Bool_t synchronize(Bool_t verbose); Internal function to synchronize TMinuit with current; information in RooAbsReal function parameters. void optimizeConst(Int_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:10982,simpl,simplex,10982,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,8,"['SIMPL', 'simpl']","['SIMPLEX', 'simplex']"
Usability,"r which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE is command if Redo is the same as Undo function and is the setter action. ;  ; Bool_t IsUndoing () const;  Undo action is in progress. ;  ; void ls (Option_t *option="""") const override;  ls this command and merged commands ;  ; virtual Long64_t Merge (TCollection *, TFileMergeInfo *);  Merge a collection of TQCommand. ;  ; virtual void Merge (TQCommand *c);  Add command to the list of merged commands. ;  ; virtual void Redo (Option_t *option="""");  Execute command and then merge commands. ;  ; virtual void SetArgs (Int_t nargs,...);  Set do/redo and undo parameters. ;  ; virtual void SetName (const char *name);  Sets name of the command. ;  ; virtual void SetRedoArgs (Int_t nargs,...);  Set redo parameters. ;  ; virtual void SetTitle (const char *title);  Sets description of the command. ;  ; virtual void SetUndoArgs (Int_t nargs,...);  Set undo parameters. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:7096,Undo,Undo,7096,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['Undo'],['Undo']
Usability,"r || print_over) nlines += 3;; 9075 ; 9076 // Pavetext with statistics; 9077 if (!gStyle->GetOptFit()) fit = nullptr;; 9078 Bool_t done = kFALSE;; 9079 if (!dostat && !fit) {; 9080 if (stats) { fFunctions->Remove(stats); delete stats;}; 9081 return;; 9082 }; 9083 Double_t statw = gStyle->GetStatW();; 9084 if (fit) statw = 1.8*gStyle->GetStatW();; 9085 Double_t stath = nlines*gStyle->GetStatFontSize();; 9086 if (stath <= 0 || 3 == (gStyle->GetStatFont()%10)) {; 9087 stath = 0.25*nlines*gStyle->GetStatH();; 9088 }; 9089 if (fit) stath += gStyle->GetStatH();; 9090 if (stats) {; 9091 stats->Clear();; 9092 done = kTRUE;; 9093 } else {; 9094 stats = new TPaveStats(; 9095 gStyle->GetStatX()-statw,; 9096 gStyle->GetStatY()-stath,; 9097 gStyle->GetStatX(),; 9098 gStyle->GetStatY(),""brNDC"");; 9099 ; 9100 stats->SetParent(fH);; 9101 stats->SetOptFit(dofit);; 9102 stats->SetOptStat(dostat);; 9103 stats->SetFillColor(gStyle->GetStatColor());; 9104 stats->SetFillStyle(gStyle->GetStatStyle());; 9105 stats->SetBorderSize(gStyle->GetStatBorderSize());; 9106 stats->SetName(""stats"");; 9107 ; 9108 stats->SetTextColor(gStyle->GetStatTextColor());; 9109 stats->SetTextAlign(12);; 9110 stats->SetTextFont(gStyle->GetStatFont());; 9111 stats->SetFitFormat(gStyle->GetFitFormat());; 9112 stats->SetStatFormat(gStyle->GetStatFormat());; 9113 stats->SetBit(kCanDelete);; 9114 stats->SetBit(kMustCleanup);; 9115 }; 9116 if (print_name) stats->AddText(h3->GetName());; 9117 if (print_entries) {; 9118 if (h3->GetEntries() < 1e7) tt.Form(""%s = %-7d"",gStringEntries.Data(),Int_t(h3->GetEntries()+0.5));; 9119 else tt.Form(""%s = %14.7g"",gStringEntries.Data(),Float_t(h3->GetEntries()+0.5));; 9120 stats->AddText(tt.Data());; 9121 }; 9122 if (print_mean) {; 9123 if (print_mean == 1) {; 9124 tf.Form(""%s = %s%s"",gStringMeanX.Data(),""%"",stats->GetStatFormat());; 9125 tt.Form(tf.Data(),h3->GetMean(1));; 9126 stats->AddText(tt.Data());; 9127 tf.Form(""%s = %s%s"",gStringMeanY.Data(),""%"",stats->GetStatFormat());; 9128 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:326501,Clear,Clear,326501,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"r"", ""L"");; legend->AddEntry(""f"", ""Polynomial of fourth order"", ""L"");; legend->Draw();; c->Draw();; c->SaveAs(""rf710_roopoly.png"");; }; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; RooAbsCollection.h; RooPlot.h; RooPolyFunc.h; RooRealVar.h; kRed@ kRedDefinition Rtypes.h:66; kWhite@ kWhiteDefinition Rtypes.h:65; kDashed@ kDashedDefinition TAttLine.h:48; kDotted@ kDottedDefinition TAttLine.h:48; TCanvas.h; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooPolyFuncRooPolyFunc implements a polynomial function in multi-variables.Definition RooPolyFunc.h:28; RooPolyFunc::taylorExpandstatic std::unique_ptr< RooPolyFunc > taylorExpand(const char *name, const char *title, RooAbsReal &func, const RooArgList &observables, int order=1, std::vector< double > const &observableValues={}, double eps1=1e-6, double eps2=1e-3)Taylor expanding given function in terms of observables around observableValues.Definition RooPolyFunc.cxx:242; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; RooFit::LineStyleRooCmdArg LineStyle(Style_t style)Definition RooGlobalFunc.cxx:240; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf710_roopolyDefinition rf710_roopoly.py:1; xmlio::Nameconst char * NameDefinition TXMLSetup.cxx:67; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; DateDecember 2021 ; AuthorRahul Balasubramanian ; Definition in file rf710_roopoly.C. tutorialsroofitrf710_roopoly.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf710__roopoly_8C.html:3940,Guid,Guide,3940,doc/master/rf710__roopoly_8C.html,https://root.cern,https://root.cern/doc/master/rf710__roopoly_8C.html,1,['Guid'],['Guide']
Usability,"r"", ""Navigator %d not existing for this thread\n"", index);; 862 std::cout << "" thread id: "" << threadId << std::endl;; 863 return kFALSE;; 864 }; 865 if (!fMultiThread); 866 fCurrentNavigator = nav;; 867 return kTRUE;; 868}; 869 ; 870////////////////////////////////////////////////////////////////////////////////; 871/// Set the lock for navigators.; 872 ; 873void TGeoManager::SetNavigatorsLock(Bool_t flag); 874{; 875 fgLockNavigators = flag;; 876}; 877 ; 878////////////////////////////////////////////////////////////////////////////////; 879/// Clear all navigators.; 880 ; 881void TGeoManager::ClearNavigators(); 882{; 883 if (fMultiThread); 884 fgMutex.lock();; 885 TGeoNavigatorArray *arr = nullptr;; 886 for (NavigatorsMap_t::iterator it = fNavigators.begin(); it != fNavigators.end(); ++it) {; 887 arr = (*it).second;; 888 if (arr); 889 delete arr;; 890 }; 891 fNavigators.clear();; 892 if (fMultiThread); 893 fgMutex.unlock();; 894}; 895 ; 896////////////////////////////////////////////////////////////////////////////////; 897/// Clear a single navigator.; 898 ; 899void TGeoManager::RemoveNavigator(const TGeoNavigator *nav); 900{; 901 if (fMultiThread); 902 fgMutex.lock();; 903 for (NavigatorsMap_t::iterator it = fNavigators.begin(); it != fNavigators.end(); ++it) {; 904 TGeoNavigatorArray *arr = (*it).second;; 905 if (arr) {; 906 if ((TGeoNavigator *)arr->Remove((TObject *)nav)) {; 907 delete nav;; 908 if (!arr->GetEntries()); 909 fNavigators.erase(it);; 910 if (fMultiThread); 911 fgMutex.unlock();; 912 return;; 913 }; 914 }; 915 }; 916 Error(""Remove navigator"", ""Navigator %p not found"", nav);; 917 if (fMultiThread); 918 fgMutex.unlock();; 919}; 920 ; 921////////////////////////////////////////////////////////////////////////////////; 922/// Set maximum number of threads for navigation.; 923 ; 924void TGeoManager::SetMaxThreads(Int_t nthreads); 925{; 926 if (!fClosed) {; 927 Error(""SetMaxThreads"", ""Cannot set maximum number of threads before closing the geometry"");;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:33139,Clear,Clear,33139,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['Clear']
Usability,"r&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. static voidInitStatics(). private:. TGLFontManager(const TGLFontManager&); TGLFontManager&operator=(const TGLFontManager&). Data Members; protected:. map<TGLFont,int>fFontMapmap of created fonts; list<const TGLFont*>fFontTrashfonts to purge; static Int_tfgExtendedFontStart; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static vector<int>fgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetExtendedFontStartIndex(). Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLFontManager.html:2585,Clear,ClearFontTrash,2585,root/html534/TGLFontManager.html,https://root.cern,https://root.cern/root/html534/TGLFontManager.html,1,['Clear'],['ClearFontTrash']
Usability,"r(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performance even further, you can also pre-compile a C++ library with full code optimizations and load the function into the RDataFrame computation as follows.; ROOT.gSystem.Load(""path/to/myLibrary.so"") # Library with the myFilter function; ROOT.gInterpreter.Declare('#include ""myLibrary.h""') # Header with the declaration of the myFilter function; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); A more thorough explanation of how to use C++ code from Python can be found in the PyROOT manual.; Python code; ROOT also offers the option to compile Python functions with fundamental types and arrays thereof using Numba. Such compiled functions can then be used in a C++ expression provided to RDataFrame.; The function to be compiled should be decorated with ROOT.Numba.Declare, which allows to specify the parameter and return types. See the following snippet for a simple example or the full tutorial here.; @ROOT.Numba.Declare([""float""], ""bool""); def myFilter(x):; return x > 10; ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""Numba::myFilter(x)"").Sum(""y""); print(sum.GetValue()); It also works with collections: RVec objects of fundamental types can be transparently converted to/from numpy arrays:; @ROOT.Numba.Declare(['RVec<float>', 'int'], 'RVec<float>'); def pypowarray(numpyvec, pow):; return numpyvec**pow; ; df.Define('array', 'ROOT::RVecF{1.,2.,3.}')\; .Define('arraySquared', 'Numba::pypowarray(array, 2)'); Note that this functionality requires the Python packages numba and cffi to be installed. Interoperability with NumPy; Conversion to NumPy arrays; Eventually, you probably would like to inspect the content of the RDataFrame or process the data further with Python libraries. For this purpose, we provide the AsNumpy() function, which returns the columns of your RDataFrame as a dictionary of NumPy arrays. See a simple example bel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:81738,simpl,simple,81738,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simple']
Usability,"r() );; 539 std::vector<Double_t> cMax( GetNvar() );; 540 Double_t trueEffS = GetCuts( effS, cMin, cMax );; 541 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 542 cutMin[ivar] = cMin[ivar];; 543 cutMax[ivar] = cMax[ivar];; 544 }; 545 return trueEffS;; 546}; 547 ; 548////////////////////////////////////////////////////////////////////////////////; 549/// retrieve cut values for given signal efficiency; 550 ; 551Double_t TMVA::MethodCuts::GetCuts( Double_t effS,; 552 std::vector<Double_t>& cutMin,; 553 std::vector<Double_t>& cutMax ) const; 554{; 555 // find corresponding bin; 556 Int_t ibin = fEffBvsSLocal->FindBin( effS );; 557 ; 558 // get the true efficiency which is the one on the ""left hand"" side of the bin; 559 Double_t trueEffS = fEffBvsSLocal->GetBinLowEdge( ibin );; 560 ; 561 ibin--; // the 'cut' vector has 0...fNbins indices; 562 if (ibin < 0 ) ibin = 0;; 563 else if (ibin >= fNbins) ibin = fNbins - 1;; 564 ; 565 cutMin.clear();; 566 cutMax.clear();; 567 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 568 cutMin.push_back( fCutMin[ivar][ibin] );; 569 cutMax.push_back( fCutMax[ivar][ibin] );; 570 }; 571 ; 572 return trueEffS;; 573}; 574 ; 575////////////////////////////////////////////////////////////////////////////////; 576/// training method: here the cuts are optimised for the training sample; 577 ; 578void TMVA::MethodCuts::Train( void ); 579{; 580 if (fEffMethod == kUsePDFs) CreateVariablePDFs(); // create PDFs for variables; 581 ; 582 // create binary trees (global member variables) for signal and background; 583 if (fBinaryTreeS != 0) { delete fBinaryTreeS; fBinaryTreeS = 0; }; 584 if (fBinaryTreeB != 0) { delete fBinaryTreeB; fBinaryTreeB = 0; }; 585 ; 586 // the variables may be transformed by a transformation method: to coherently; 587 // treat signal and background one must decide which transformation type shall; 588 // be used: our default is signal-type; 589 ; 590 fBinaryTreeS = new BinarySearchTree();; 591 fBinaryTreeS->Fill( GetEventCollection",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:21284,clear,clear,21284,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['clear'],['clear']
Usability,r() [4/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; GSLRngWrapper & ; r). inline . Copy constructor - clone the GSL object and manage it. ; Definition at line 64 of file GSLRngWrapper.h. ◆ ~GSLRngWrapper(). ROOT::Math::GSLRngWrapper::~GSLRngWrapper ; (; ). inline . Destructor (free the rng if not done before) ; Definition at line 92 of file GSLRngWrapper.h. Member Function Documentation. ◆ Allocate(). void ROOT::Math::GSLRngWrapper::Allocate ; (; ). inline . Definition at line 96 of file GSLRngWrapper.h. ◆ Free(). void ROOT::Math::GSLRngWrapper::Free ; (; ). inline . Definition at line 103 of file GSLRngWrapper.h. ◆ operator=(). GSLRngWrapper & ROOT::Math::GSLRngWrapper::operator= ; (; const GSLRngWrapper & ; rhs). inline . Assignment operator. ; Definition at line 74 of file GSLRngWrapper.h. ◆ PrintState(). void ROOT::Math::GSLRngWrapper::PrintState ; (; ); const. inline . Definition at line 121 of file GSLRngWrapper.h. ◆ Rng() [1/2]. gsl_rng * ROOT::Math::GSLRngWrapper::Rng ; (; ). inline . Definition at line 125 of file GSLRngWrapper.h. ◆ Rng() [2/2]. const gsl_rng * ROOT::Math::GSLRngWrapper::Rng ; (; ); const. inline . Definition at line 127 of file GSLRngWrapper.h. ◆ SetDefaultType(). void ROOT::Math::GSLRngWrapper::SetDefaultType ; (; ). inline . Definition at line 115 of file GSLRngWrapper.h. ◆ SetType(). void ROOT::Math::GSLRngWrapper::SetType ; (; const gsl_rng_type * ; type). inline . Definition at line 111 of file GSLRngWrapper.h. Member Data Documentation. ◆ fOwn. bool ROOT::Math::GSLRngWrapper::fOwn. private . Definition at line 133 of file GSLRngWrapper.h. ◆ fRng. gsl_rng* ROOT::Math::GSLRngWrapper::fRng. private . Definition at line 134 of file GSLRngWrapper.h. ◆ fRngType. const gsl_rng_type* ROOT::Math::GSLRngWrapper::fRngType. private . Definition at line 135 of file GSLRngWrapper.h. math/mathmore/src/GSLRngWrapper.h. ROOTMathGSLRngWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html:3851,Guid,Guide,3851,doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html,1,['Guid'],['Guide']
Usability,"r(Bool_t x); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowFrame.html:16852,Undo,UndockWindow,16852,root/html528/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html528/TEveWindowFrame.html,12,['Undo'],"['UndockWindow', 'UndockWindowDestroySlot']"
Usability,"r(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TAttMarker::SetMarkerSizevirtual void SetMarkerSize(Size_t msize=1)Set the marker size.Definition TAttMarker.h:45; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::SetNamevoid SetName(const char *name="""") overrideSet graph name.Definition TGraph.cxx:2381; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25; exDouble_t ex[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; leglegDefinition legend1.C:34. graf2dgrafdocmacroslegend1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/legend1_8C_source.html:4007,Guid,Guide,4007,doc/master/legend1_8C_source.html,https://root.cern,https://root.cern/doc/master/legend1_8C_source.html,1,['Guid'],['Guide']
Usability,"r(Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) overrideRequest Locator position.Definition TGX11.cxx:1505; TGX11::OpenDisplayInt_t OpenDisplay(void *display)Open the display. Return -1 if the opening fails, 0 when ok.Definition TGX11.cxx:1091; TGX11::DrawPolyLinevoid DrawPolyLine(Int_t n, TPoint *xy) overrideDraw a line through all points.Definition TGX11.cxx:624; TGX11::RemovePixmapvoid RemovePixmap(Drawable *pix)Remove the pixmap pix.Definition TGX11.cxx:1472; TGX11::SetClipRegionvoid SetClipRegion(Int_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) overrideSet clipping region for the window wid.Definition TGX11.cxx:2020; TGX11::AddPixmapInt_t AddPixmap(ULong_t pixid, UInt_t w, UInt_t h) overrideRegister pixmap created by gVirtualGL.Definition TGX11.cxx:3645; TGX11::SetRGBvoid SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b) overrideSet color intensities for given color index.Definition TGX11.cxx:3035; TGX11::FindUsableVisualvoid FindUsableVisual(RXVisualInfo *vlist, Int_t nitems)Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel.Definition TGX11.cxx:848; TGX11::GetCharacterUpvoid GetCharacterUp(Float_t &chupx, Float_t &chupy) overrideReturn character up vector.Definition TGX11.cxx:899; TGX11::SetDoubleBuffervoid SetDoubleBuffer(Int_t wid, Int_t mode) overrideSet the double buffer on/off on window wid.Definition TGX11.cxx:2091; TGX11::fMaxNumberOfWindowsInt_t fMaxNumberOfWindowsMaximum number of windows.Definition TGX11.h:83; TGX11::SetMarkerStylevoid SetMarkerStyle(Style_t markerstyle) overrideSet marker style.Definition TGX11.cxx:2435; TGX11::GetRGBvoid GetRGB(Int_t index, Float_t &r, Float_t &g, Float_t &b) overrideGet rgb values for color ""index"".Definition TGX11.cxx:1027; TGX11::ImgPickPalettevoid ImgPickPalette(RXImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B)Returns in R G B the ncol colors of the palette used by the image.Definition TGX11.cxx:3331; TGX11::FindColorInt_t FindColor(ULong_t pixel, ULong_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:154718,usab,usable,154718,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['usab'],['usable']
Usability,"r(j);; 1175 TCpu<>::Copy(layer.GetWeights(),; 1176 masterLayer.GetWeights());; 1177 TCpu<>::Copy(layer.GetBiases(),; 1178 masterLayer.GetBiases());; 1179 }; 1180 }; 1181 ; 1182 bool converged = false;; 1183 size_t stepCount = 0;; 1184 size_t batchesInEpoch = nTrainingSamples / net.GetBatchSize();; 1185 ; 1186 std::chrono::time_point<std::chrono::system_clock> start, end;; 1187 start = std::chrono::system_clock::now();; 1188 ; 1189 if (!fInteractive) {; 1190 Log() << std::setw(10) << ""Epoch"" << "" | ""; 1191 << std::setw(12) << ""Train Err.""; 1192 << std::setw(12) << ""Test Err.""; 1193 << std::setw(12) << ""GFLOP/s""; 1194 << std::setw(12) << ""Conv. Steps"" << Endl;; 1195 std::string separator(62, '-');; 1196 Log() << separator << Endl;; 1197 }; 1198 ; 1199 while (!converged); 1200 {; 1201 stepCount++;; 1202 // Perform minimization steps for a full epoch.; 1203 trainingData.Shuffle();; 1204 for (size_t i = 0; i < batchesInEpoch; i += nThreads) {; 1205 batches.clear();; 1206 for (size_t j = 0; j < nThreads; j++) {; 1207 batches.reserve(nThreads);; 1208 batches.push_back(trainingData.GetBatch());; 1209 }; 1210 if (settings.momentum > 0.0) {; 1211 minimizer.StepMomentum(net, nets, batches, settings.momentum);; 1212 } else {; 1213 minimizer.Step(net, nets, batches);; 1214 }; 1215 }; 1216 ; 1217 if ((stepCount % minimizer.GetTestInterval()) == 0) {; 1218 ; 1219 // Compute test error.; 1220 Double_t testError = 0.0;; 1221 for (auto batch : testData) {; 1222 auto inputMatrix = batch.GetInput();; 1223 auto outputMatrix = batch.GetOutput();; 1224 auto weightMatrix = batch.GetWeights();; 1225 testError += testNet.Loss(inputMatrix, outputMatrix, weightMatrix);; 1226 }; 1227 testError /= (Double_t) (nTestSamples / settings.batchSize);; 1228 ; 1229 //Log the loss value; 1230 fTrainHistory.AddValue(""testError"",stepCount,testError);; 1231 ; 1232 end = std::chrono::system_clock::now();; 1233 ; 1234 // Compute training error.; 1235 Double_t trainingError = 0.0;; 1236 for (auto batch : traini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:43452,clear,clear,43452,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['clear'],['clear']
Usability,"r); 687 *error = kFALSE;; 688 name = (*it).first;; 689 return (*it).second;; 690}; 691 ; 692////////////////////////////////////////////////////////////////////////////////; 693/// Add a matrix to the list. Returns index of the matrix in list.; 694 ; 695Int_t TGeoManager::AddTransformation(const TGeoMatrix *matrix); 696{; 697 return TGeoBuilder::Instance(this)->AddTransformation((TGeoMatrix *)matrix);; 698}; 699 ; 700////////////////////////////////////////////////////////////////////////////////; 701/// Add a shape to the list. Returns index of the shape in list.; 702 ; 703Int_t TGeoManager::AddShape(const TGeoShape *shape); 704{; 705 return TGeoBuilder::Instance(this)->AddShape((TGeoShape *)shape);; 706}; 707 ; 708////////////////////////////////////////////////////////////////////////////////; 709/// Add a track to the list of tracks. Use this for primaries only. For secondaries,; 710/// add them to the parent track. The method create objects that are registered; 711/// to the analysis manager but have to be cleaned-up by the user via ClearTracks().; 712 ; 713Int_t TGeoManager::AddTrack(Int_t id, Int_t pdgcode, TObject *particle); 714{; 715 Int_t index = fNtracks;; 716 fTracks->AddAtAndExpand(GetGeomPainter()->AddTrack(id, pdgcode, particle), fNtracks++);; 717 return index;; 718}; 719 ; 720////////////////////////////////////////////////////////////////////////////////; 721/// Add a track to the list of tracks; 722 ; 723Int_t TGeoManager::AddTrack(TVirtualGeoTrack *track); 724{; 725 Int_t index = fNtracks;; 726 fTracks->AddAtAndExpand(track, fNtracks++);; 727 return index;; 728}; 729 ; 730////////////////////////////////////////////////////////////////////////////////; 731/// Makes a primary track but do not attach it to the list of tracks. The track; 732/// can be attached as daughter to another one with TVirtualGeoTrack::AddTrack; 733 ; 734TVirtualGeoTrack *TGeoManager::MakeTrack(Int_t id, Int_t pdgcode, TObject *particle); 735{; 736 TVirtualGeoTrack *track = Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:26903,Clear,ClearTracks,26903,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['ClearTracks']
Usability,"r);; 1365 } else {; 1366 if (fKey->fProperties&kNeedDelete) {; 1367 TVirtualCollectionProxy *proxy = fKey->fType->GetCollectionProxy();; 1368 TPushPop helper(proxy,ptr);; 1369 proxy->Clear(""force"");; 1370 }; 1371 }; 1372 char *addr = ((char*)ptr)+fValOffset;; 1373 if ( fVal->fCase&kIsPointer ) {; 1374 if ( fVal->fProperties&kNeedDelete) {; 1375 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1376 TPushPop helper(proxy,*(void**)addr);; 1377 proxy->Clear(""force"");; 1378 }; 1379 fVal->DeleteItem(*(void**)addr);; 1380 } else {; 1381 if ( fVal->fProperties&kNeedDelete) {; 1382 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1383 TPushPop helper(proxy,addr);; 1384 proxy->Clear(""force"");; 1385 }; 1386 }; 1387 break;; 1388 }; 1389 default: {; 1390 if ( fVal->fCase&kIsPointer ) {; 1391 if (fVal->fProperties&kNeedDelete) {; 1392 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1393 TPushPop helper(proxy,*(void**)ptr);; 1394 proxy->Clear(""force"");; 1395 }; 1396 fVal->DeleteItem(*(void**)ptr);; 1397 } else {; 1398 if (fVal->fProperties&kNeedDelete) {; 1399 TVirtualCollectionProxy *proxy = fVal->fType->GetCollectionProxy();; 1400 TPushPop helper(proxy,ptr);; 1401 proxy->Clear(""force"");; 1402 }; 1403 }; 1404 break;; 1405 }; 1406 }; 1407 }; 1408}; 1409 ; 1410////////////////////////////////////////////////////////////////////////////////; 1411 ; 1412void TGenCollectionProxy::ReadBuffer(TBuffer & /* b */, void * /* obj */, const TClass * /* onfileClass */); 1413{; 1414 MayNotUse(""TGenCollectionProxy::ReadBuffer(TBuffer &, void *, const TClass *)"");; 1415}; 1416 ; 1417////////////////////////////////////////////////////////////////////////////////; 1418 ; 1419void TGenCollectionProxy::ReadBuffer(TBuffer & /* b */, void * /* obj */); 1420{; 1421 MayNotUse(""TGenCollectionProxy::ReadBuffer(TBuffer &, void *)"");; 1422}; 1423 ; 1424////////////////////////////////////////////////////////////////////////////////; 1425/// Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:44691,Clear,Clear,44691,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,"r* leaflist, Int_t bufsize); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeSQL.html:2467,undo,undo,2467,root/html528/TTreeSQL.html,https://root.cern,https://root.cern/root/html528/TTreeSQL.html,4,['undo'],['undo']
Usability,"r* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tfAlternatePValuep-value for the alternate hypothesis (small number means disfavored); TStringTNamed::fNameobject identifier; Double_tfNullPValuep-value for the null hypothesis (small number means disfavored); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestResult(const char* name); Default constructor. HypoTestResult(const char* name, Double_t nullp, Double_t altp); Alternate constructor. ~HypoTestResult(); Destructor. explicit HypoTestResult(const char* name = 0); default constructor. Double_t NullPValue() const; Return p-value for null hypothesis. {return fNullPValue;}. Double_t AlternatePValue() const; Return p-value for alternate hypothesis. {return fAlternatePValue;}. Double_t CLb() const; Convert NullPValue into a ""confidence level"". {return 1.-NullPValue();}. Double_t CLsplusb() const; Convert AlternatePValue into a ""confidence level"". {return AlternatePValue();}. Double_t CLs() const; CLs is simply CLs+b/CLb (not a method, but a quantity). Double_t Significance() const; familiar name for the Null p-value in terms of 1-sided Gaussian significance. {return RooStats::PValueToSignificance( NullPValue() ); }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestResult.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestResult.html:7359,simpl,simply,7359,root/html526/RooStats__HypoTestResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestResult.html,1,['simpl'],['simply']
Usability,"r* name = """"); virtual~RooArgSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tadd(const RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_tadd(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual RooAbsArg*addClone(const RooAbsArg& var, Bool_t silent = kFALSE); virtual voidaddClone(const RooAbsCollection& list, Bool_t silent = kFALSE); virtual Bool_taddOwned(RooAbsArg& var, Bool_t silent = kFALSE); virtual Bool_taddOwned(const RooAbsCollection& list, Bool_t silent = kFALSE); Bool_tRooAbsCollection::allInRange(const char* rangeSpec) const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsCollection::assignFast(const RooAbsCollection& other, Bool_t setValDirty = kTRUE); RooAbsCollection&RooAbsCollection::assignValueOnly(const RooAbsCollection& other, Bool_t oneSafe = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsCollection::Clone(const char* newname = 0) const; virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tRooAbsCollection::contains(const RooAbsArg& var) const; Bool_tRooAbsCollection::containsInstance(const RooAbsArg& var) const; stringRooAbsCollection::contentsString() const; virtual voidTObject::Copy(TObject& object) const; virtual TObject*create(const char* newname) const; TIterator*RooAbsCollection::createIterator(Bool_t dir = kIterForward) const; virtual Int_tRooAbsCollection::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgSet.html:3910,Clear,Clear,3910,root/html532/RooArgSet.html,https://root.cern,https://root.cern/root/html532/RooArgSet.html,2,['Clear'],['Clear']
Usability,"r* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TOrdCollection*fToggleslist of TToggle objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggleGroup(); Constructor. TToggleGroup(const TToggleGroup& ); Copy constructor. TToggleGroup & operator=(const TToggleGroup& ); Assignment operastor. ~TToggleGroup(); Deletes togglegroup but does not disposes toggled objects!. Int_t Add(TToggle* t, Bool_t select = 1); Add a new toggle. Int_t InsertAt(TToggle* t, Int_t pos, Bool_t select = 1); Add a new toggle at a specific position. void Select(Int_t idx); Select a toggle. void Select(TToggle* t); Selector a toggle. void DeleteAll(); Disposes of all objects and clears array. Int_t GetTogglesCount(); {return fToggles->GetSize();}. TToggle * At(Int_t idx); {return (TToggle*)fToggles->At(idx);}. void Remove(TToggle* t); {fToggles->Remove(t);}. void Remove(Int_t pos); {fToggles->RemoveAt(pos);}. TToggle * First(); {return (TToggle*)fToggles->First();}. TToggle * Last(); {return (TToggle*)fToggles->Last();}. Int_t IndexOf(TToggle* t); {return fToggles->IndexOf(t);}. » Author: Piotr Golonka 31/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggleGroup.h 26606 2008-12-02 20:36:09Z pcanal $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TToggleGroup.html:6565,clear,clears,6565,root/html528/TToggleGroup.html,https://root.cern,https://root.cern/root/html528/TToggleGroup.html,1,['clear'],['clears']
Usability,"r* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TOrdCollection*fToggleslist of TToggle objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TToggleGroup(); Constructor. TToggleGroup(const TToggleGroup& ); Copy constructor. TToggleGroup & operator=(const TToggleGroup& ); Assignment operastor. ~TToggleGroup(); Deletes togglegroup but does not disposes toggled objects!. Int_t Add(TToggle* t, Bool_t select = 1); Add a new toggle. Int_t InsertAt(TToggle* t, Int_t pos, Bool_t select = 1); Add a new toggle at a specific position. void Select(Int_t idx); Select a toggle. void Select(TToggle* t); Selector a toggle. void DeleteAll(); Disposes of all objects and clears array. Int_t GetTogglesCount(); {return fToggles->GetSize();}. TToggle * At(Int_t idx); {return (TToggle*)fToggles->At(idx);}. void Remove(TToggle* t); {fToggles->Remove(t);}. void Remove(Int_t pos); {fToggles->RemoveAt(pos);}. TToggle * First(); {return (TToggle*)fToggles->First();}. TToggle * Last(); {return (TToggle*)fToggles->Last();}. Int_t IndexOf(TToggle* t); {return fToggles->IndexOf(t);}. » Author: Piotr Golonka 31/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TToggleGroup.h 26606 2008-12-02 20:36:09Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TToggleGroup.html:6634,clear,clears,6634,root/html530/TToggleGroup.html,https://root.cern,https://root.cern/root/html530/TToggleGroup.html,1,['clear'],['clears']
Usability,"r* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooResolutionModel.html:4385,clear,clearShapeDirty,4385,root/html528/RooResolutionModel.html,https://root.cern,https://root.cern/root/html528/RooResolutionModel.html,1,['clear'],['clearShapeDirty']
Usability,"r* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooResolutionModel.html:4385,clear,clearShapeDirty,4385,root/html530/RooResolutionModel.html,https://root.cern,https://root.cern/root/html530/RooResolutionModel.html,1,['clear'],['clearShapeDirty']
Usability,"r* opt = 0, Double_t b1 = 0, Double_t e1 = 0, Double_t b2 = 0, Double_t e2 = 0); TSpline5(const char* title, Double_t* x, Double_t* y, Int_t n, const char* opt = 0, Double_t b1 = 0, Double_t e1 = 0, Double_t b2 = 0, Double_t e2 = 0); TSpline5(const char* title, Double_t* x, const TF1* func, Int_t n, const char* opt = 0, Double_t b1 = 0, Double_t e1 = 0, Double_t b2 = 0, Double_t e2 = 0); TSpline5(const char* title, Double_t xmin, Double_t xmax, Double_t* y, Int_t n, const char* opt = 0, Double_t b1 = 0, Double_t e1 = 0, Double_t b2 = 0, Double_t e2 = 0); TSpline5(const char* title, Double_t xmin, Double_t xmax, const TF1* func, Int_t n, const char* opt = 0, Double_t b1 = 0, Double_t e1 = 0, Double_t b2 = 0, Double_t e2 = 0); virtual~TSpline5(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDerivative(Double_t x) const; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTSpline::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTSpline::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTSpline::ExecuteEvent(Int_t event, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpline5.html:1607,Clear,Clear,1607,root/html528/TSpline5.html,https://root.cern,https://root.cern/root/html528/TSpline5.html,4,['Clear'],['Clear']
Usability,"r* pathname); virtual voidAddFileHandler(TFileHandler* fh); virtual voidAddIncludePath(const char* includePath); virtual voidAddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidAddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* t); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*BaseName(const char* pathname); voidBeep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tcd(const char* path); virtual Bool_tChangeDirectory(const char* path); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidCleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseConnection(int sock, Bool_t force = kFALSE); virtual voidCloselog(); virtual intClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intCompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*ConcatFileName(const char* dir, const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:2061,Clear,Clear,2061,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,2,['Clear'],['Clear']
Usability,"r*gPad->GetLeftMargin(),; 1064 ymin - dyr*gPad->GetBottomMargin(),; 1065 xmax + dxr*gPad->GetRightMargin(),; 1066 ymax + dyr*gPad->GetTopMargin());; 1067 gPad->RangeAxis(xmin, ymin, xmax, ymax);; 1068 }; 1069 if (middle) {; 1070 for(i=0;i<theNpoints;i++) {; 1071 if (badcase) continue; //do not update if big zoom and points moved; 1072 if (!x.empty()) theX[i] = gPad->PadtoX(gPad->AbsPixeltoX(x[i]+dpx));; 1073 if (!y.empty()) theY[i] = gPad->PadtoY(gPad->AbsPixeltoY(y[i]+dpy));; 1074 }; 1075 } else {; 1076 theX[ipoint] = gPad->PadtoX(gPad->AbsPixeltoX(pxold));; 1077 theY[ipoint] = gPad->PadtoY(gPad->AbsPixeltoY(pyold));; 1078 if (theGraph->InheritsFrom(""TCutG"")) {; 1079 //make sure first and last point are the same; 1080 if (ipoint == 0) {; 1081 theX[theNpoints-1] = theX[0];; 1082 theY[theNpoints-1] = theY[0];; 1083 }; 1084 if (ipoint == theNpoints-1) {; 1085 theX[0] = theX[theNpoints-1];; 1086 theY[0] = theY[theNpoints-1];; 1087 }; 1088 }; 1089 }; 1090 badcase = kFALSE;; 1091 x.clear();; 1092 y.clear();; 1093 gPad->Modified(kTRUE);; 1094 gVirtualX->SetLineColor(-1);; 1095 }; 1096}; 1097 ; 1098 ; 1099////////////////////////////////////////////////////////////////////////////////; 1100 ; 1101char *TGraphPainter::GetObjectInfoHelper(TGraph * /*theGraph*/, Int_t /*px*/, Int_t /*py*/) const; 1102{; 1103 return (char*)"""";; 1104}; 1105 ; 1106 ; 1107////////////////////////////////////////////////////////////////////////////////; 1108/// Return the highlighted point for theGraph; 1109 ; 1110Int_t TGraphPainter::GetHighlightPoint(TGraph *theGraph) const; 1111{; 1112 if (theGraph == gHighlightGraph) return gHighlightPoint;; 1113 else return -1;; 1114}; 1115 ; 1116 ; 1117////////////////////////////////////////////////////////////////////////////////; 1118/// Set highlight (enable/disable) mode for theGraph; 1119 ; 1120void TGraphPainter::SetHighlight(TGraph *theGraph); 1121{; 1122 gHighlightPoint = -1; // must be -1; 1123 gHighlightGraph = nullptr;; 1124 if (theGraph->IsHighli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:40088,clear,clear,40088,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,r+=() [2/2]. template<class Element > . void TMatrixTDiag< Element >::operator+= ; (; Element ; val). Assign val to every element of the matrix diagonal. ; Definition at line 529 of file TMatrixTUtils.cxx. ◆ operator=() [1/4]. template<class Element > . TMatrixTDiag< Element > & TMatrixTDiag< Element >::operator= ; (; const TMatrixTDiag< Element > & ; d). inline . Definition at line 385 of file TMatrixTUtils.h. ◆ operator=() [2/4]. template<class Element > . void TMatrixTDiag< Element >::operator= ; (; const TMatrixTDiag_const< Element > & ; d). Assignment operator. ; Definition at line 553 of file TMatrixTUtils.cxx. ◆ operator=() [3/4]. template<class Element > . void TMatrixTDiag< Element >::operator= ; (; const TVectorT< Element > & ; vec). Assign a vector to the matrix diagonal. ; Definition at line 576 of file TMatrixTUtils.cxx. ◆ operator=() [4/4]. template<class Element > . void TMatrixTDiag< Element >::operator= ; (; Element ; val). Assign val to every element of the matrix diagonal. ; Definition at line 517 of file TMatrixTUtils.cxx. ◆ operator[]() [1/2]. template<class Element > . Element & TMatrixTDiag< Element >::operator[] ; (; Int_t ; i). inline . Definition at line 378 of file TMatrixTUtils.h. ◆ operator[]() [2/2]. template<class Element > . const Element & TMatrixTDiag< Element >::operator[] ; (; Int_t ; i); const. inline . Definition at line 377 of file TMatrixTUtils.h. ◆ Streamer(). template<class Element > . void TMatrixTDiag< Element >::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TMatrixTDiag_const< Element >. ◆ StreamerNVirtual(). template<class Element > . void TMatrixTDiag< Element >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 391 of file TMatrixTUtils.h. math/matrix/inc/TMatrixDUtilsfwd.h; math/matrix/inc/TMatrixTUtils.h; math/matrix/src/TMatrixTUtils.cxx. TMatrixTDiag. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTDiag.html:8373,Guid,Guide,8373,doc/master/classTMatrixTDiag.html,https://root.cern,https://root.cern/doc/master/classTMatrixTDiag.html,1,['Guid'],['Guide']
Usability,"r, Int_t maxSize=2);  Constructor for simple caches with RooAbsArg derived payload. ;  ;  ~RooCacheManager () override;  Destructor. ;  ; Int_t cacheSize () const;  Return size of cache. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIdx, const char *isetRangeName);  ; RooAbsCacheElement * getObj (const RooArgSet *nset, const RooArgSet *iset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Retrieve payload object indexed on nset,uset amd isetRangeName If sterileIdx is not null, it is set to the index of the sterile slot in cacse such a slot is recycled. ;  ; RooAbsCacheElement * getObj (const RooArgSet *nset, Int_t *sterileIndex=nullptr, const TNamed *isetRangeName=nullptr);  Getter function without integration set. ;  ; RooAbsCacheElement * getObjByIndex (Int_t index) const;  Retrieve payload object by slot index. ;  ; Int_t lastIndex () const;  Return index of slot used in last get or set operation. ;  ; void reset ();  Clear the cache. ;  ; RooArgSet selectFromSet1 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 1 with a given index and an input argSet. ;  ; RooArgSet selectFromSet2 (RooArgSet const &argSet, int index) const;  Create RooArgSet containing the objects that are both in the cached set 2 with a given index and an input argSet. ;  ; Int_t setObj (const RooArgSet *nset, const RooArgSet *iset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. ;  ; Int_t setObj (const RooArgSet *nset, RooAbsCacheElement *obj, const TNamed *isetRangeName=nullptr);  Setter function without integration set. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void wireCache () override;  ;  Public Member Functions inherited from RooAbsCache;  RooAbsCache (const RooAbsCache &, RooAbsArg *owner=nullptr);  Copy constructor. Takes owner as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:3706,Clear,Clear,3706,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['Clear'],['Clear']
Usability,"r, const char* name = 0); RooBinning(Double_t xlo = -RooNumber::infinity(), Double_t xhi = RooNumber::infinity(), const char* name = 0); RooBinning(Int_t nBins, const Double_t* boundaries, const char* name = 0); RooBinning(Int_t nBins, Double_t xlo, Double_t xhi, const char* name = 0); virtual~RooBinning(); voidTObject::AbstractMethod(const char* method) const; Bool_taddBoundary(Double_t boundary); voidaddBoundaryPair(Double_t boundary, Double_t mirrorPoint = 0); voidaddUniform(Int_t nBins, Double_t xlo, Double_t xhi); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_t*array() const; virtual Double_taverageBinWidth() const; virtual Double_tbinCenter(Int_t bin) const; virtual Double_tbinHigh(Int_t bin) const; virtual Double_tbinLow(Int_t bin) const; virtual Int_tbinNumber(Double_t x) const; virtual Double_tbinWidth(Int_t bin) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsBinning*clone(const char* name = 0) const; virtual TObject*RooAbsBinning::Clone(const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBinning.html:1670,Clear,Clear,1670,root/html526/RooBinning.html,https://root.cern,https://root.cern/root/html526/RooBinning.html,5,['Clear'],['Clear']
Usability,"r, ncolors);; 387 } else {; 388 ULong_t r, g, b;; 389 for (Int_t i = 0; i < ncolors; i++) {; 390 r = (color[i].pixel & fVisual->red_mask) >> fRedShift;; 391 color[i].red = UShort_t(r*kBIGGEST_RGB_VALUE/(fVisual->red_mask >> fRedShift));; 392 ; 393 g = (color[i].pixel & fVisual->green_mask) >> fGreenShift;; 394 color[i].green = UShort_t(g*kBIGGEST_RGB_VALUE/(fVisual->green_mask >> fGreenShift));; 395 ; 396 b = (color[i].pixel & fVisual->blue_mask) >> fBlueShift;; 397 color[i].blue = UShort_t(b*kBIGGEST_RGB_VALUE/(fVisual->blue_mask >> fBlueShift));; 398 ; 399 color[i].flags = DoRed | DoGreen | DoBlue;; 400 }; 401 }; 402}; 403 ; 404////////////////////////////////////////////////////////////////////////////////; 405/// Clear the pixmap pix.; 406 ; 407void TGX11::ClearPixmap(Drawable *pix); 408{; 409 Window root;; 410 int xx, yy;; 411 unsigned int ww, hh, border, depth;; 412 XGetGeometry((Display*)fDisplay, *pix, &root, &xx, &yy, &ww, &hh, &border, &depth);; 413 SetColor(gGCpxmp, 0);; 414 XFillRectangle((Display*)fDisplay, *pix, *gGCpxmp, 0 ,0 ,ww ,hh);; 415 SetColor(gGCpxmp, 1);; 416 XFlush((Display*)fDisplay);; 417}; 418 ; 419////////////////////////////////////////////////////////////////////////////////; 420/// Clear current window.; 421 ; 422void TGX11::ClearWindow(); 423{; 424 if (!gCws->fIsPixmap && !gCws->fDoubleBuffer) {; 425 XSetWindowBackground((Display*)fDisplay, gCws->fDrawing, GetColor(0).fPixel);; 426 XClearWindow((Display*)fDisplay, gCws->fDrawing);; 427 XFlush((Display*)fDisplay);; 428 } else {; 429 SetColor(gGCpxmp, 0);; 430 XFillRectangle((Display*)fDisplay, gCws->fDrawing, *gGCpxmp,; 431 0, 0, gCws->fWidth, gCws->fHeight);; 432 SetColor(gGCpxmp, 1);; 433 }; 434}; 435 ; 436////////////////////////////////////////////////////////////////////////////////; 437/// Delete current pixmap.; 438 ; 439void TGX11::ClosePixmap(); 440{; 441 CloseWindow1();; 442}; 443 ; 444////////////////////////////////////////////////////////////////////////////////; 445/// Del",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:13226,Clear,ClearPixmap,13226,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,2,['Clear'],"['Clear', 'ClearPixmap']"
Usability,"r-defined function on each entry. Users are responsible for the thread-safety of this callable when executing with implicit multi-threading enabled. . ForeachSlot() Same as Foreach(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach() actions when using RDataFrame after ROOT::EnableImplicitMT(). ForeachSlot() works just as well with single-thread execution: in that case slot will always be 0. . Snapshot() Write the processed dataset to disk, in a new TTree and TFile. Custom columns can be saved as well, filtered entries are not saved. Users can specify which columns to save (default is all). Snapshot, by default, overwrites the output file if it already exists. Snapshot() can be made lazy setting the appropriate flag in the snapshot options. . Queries; These operations do not modify the dataframe or book computations but simply return information on the RDataFrame object. Operation Description . Describe() Get useful information describing the dataframe, e.g. columns and their types. . GetColumnNames() Get the names of all the available columns of the dataset. . GetColumnType() Return the type of a given column as a string. . GetColumnTypeNamesList() Return the list of type names of columns in the dataset. . GetDefinedColumnNames() Get the names of all the defined columns. . GetFilterNames() Return the names of all filters in the computation graph. . GetNRuns() Return the number of event loops run by this RDataFrame instance so far. . GetNSlots() Return the number of processing slots that RDataFrame will use during the event loop (i.e. the concurrency level). . SaveGraph() Store the computation graph of an RDataFrame in DOT format (graphviz) for easy inspection. See the relevant section for details. . Introduction; Users define their analysis as a sequence of operations to be performed on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:8964,simpl,simply,8964,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['simpl'],['simply']
Usability,"r. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates, . const char ; appendage[], . std::ostream & ; out, . TString::ECaseCompare ; cmp = TString::kExact . ). private . [private] ; Definition at line 1163 of file TTabCom.cxx. ◆ CopyMatch(). void TTabCom::CopyMatch ; (; char * ; dest, . int ; dest_len, . const char * ; localName, . const char * ; appendage = nullptr, . const char * ; fullName = nullptr . ); const. private . [private] ; Definition at line 1415 of file TTabCom.cxx. ◆ DeclFileName(). static const char * TTabCom::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file TTabCom.h. ◆ DetermineClass(). TString TTabCom::DetermineClass ; (; const char ; varName[]). static . [static utility function]///////////////////////////// ; returns em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:10623,Clear,ClearUsers,10623,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearUsers']
Usability,"r. ; Definition at line 52 of file Functor.h. ◆ Functor() [2/3]. template<class PtrObj , typename MemFn > . ROOT::Math::Functor::Functor ; (; const PtrObj & ; p, . MemFn ; memFn, . unsigned int ; dim . ). inline . Construct from a pointer to member function (multi-dim type). ; Definition at line 56 of file Functor.h. ◆ Functor() [3/3]. ROOT::Math::Functor::Functor ; (; std::function< double(double const *)> const & ; f, . unsigned int ; dim . ). inline . Construct from a callable object of multi-dimension with the right signature (implementing double operator()(const double *x)). ; Definition at line 62 of file Functor.h. Member Function Documentation. ◆ Clone(). Functor * ROOT::Math::Functor::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class must implement their version of the Clone method. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< double >.; Definition at line 65 of file Functor.h. ◆ DoEval(). double ROOT::Math::Functor::DoEval ; (; const double * ; x); const. inlineoverrideprivatevirtual . Implementation of the evaluation function. Must be implemented by derived classes. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< double >.; Definition at line 72 of file Functor.h. ◆ NDim(). unsigned int ROOT::Math::Functor::NDim ; (; ); const. inlineoverridevirtual . Retrieve the dimension of the function. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< double >.; Definition at line 68 of file Functor.h. Member Data Documentation. ◆ fDim. unsigned int ROOT::Math::Functor::fDim. private . Definition at line 76 of file Functor.h. ◆ fFunc. std::function<double(double const *)> ROOT::Math::Functor::fFunc. private . Definition at line 77 of file Functor.h. Libraries for ROOT::Math::Functor:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/Functor.h. ROOTMathFunctor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html:4545,Guid,Guide,4545,doc/master/classROOT_1_1Math_1_1Functor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Functor.html,1,['Guid'],['Guide']
Usability,"r. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TEveWindow(); Destructor. void PreDeleteElement(); Called before the element is deleted, thus offering the last chance; to detach from acquired resources and from the framework itself.; Here the request is just passed to TEveManager.; If you override it, make sure to call base-class version. void PreUndock(); Virtual function called before a window is undocked. void PostDock(); Virtual function called after a window is docked. void NameTitleChanged(); Name or title of the window changed - propagate to frames.; Virtual from TEveElement. void PopulateEmptyFrame(TEveCompositeFrame* ef); Populate given frame-slot - intended for initial population; of a new slot or low-level window-swapping.; No layout or window-mapping is done. void SwapWindow(TEveWindow* w); Swap frames with the given window. void SwapWindowWithCurrent(); Swap frames with the current window. void UndockWindow(); Undock the window - put it into a dedicated main-frame. void UndockWindowDestroySlot(); Undock the window - put it into a dedicated main-frame.; The old window slot is destroyed. void ReplaceWindow(TEveWindow* w); Replace this window with the passed one.; Eve parentship is properly handled.; This will most likely lead to the destruction of this window.; Layout is called on the frame. void DestroyWindow(); Destroy eve-window - replace it with an empty frame-slot. void DestroyWindowAndSlot(); Destroy eve-window and its frame-slot. void ClearEveFrame(); Clears eve-frame associated with this window.; This is used in special case when the window is embedded in a foreign; GUI container and gets deleted from this side.; In particular, this happens when TRootBrowser closes a tab. void SetShowTitleBar(Bool_t x); Set display state of the title-bar.; This is forwarded to eve-frame. Bool_t IsCurrent() const; Returns true if this window is the current one. void MakeCurrent(); Make this window current. void SetCurre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindow.html:21666,Undo,UndockWindow,21666,root/html528/TEveWindow.html,https://root.cern,https://root.cern/root/html528/TEveWindow.html,8,['Undo'],"['Undock', 'UndockWindow']"
Usability,"r. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. Int_t DefinedVariable(TString& variable, Int_t& action); Check if expression is in the list of defined variables. This member function can be overloaded in derived classes. If you overload this member function, you also HAVE TO; never call the constructor:. TFormula::TFormula(const char *name,const char *expression). and write your own constructor. MyClass::MyClass(const char *name,const char *expression) : TFormula(). which has to call the TFormula default constructor and whose implementation; should be similar to the implementation of the normal TFormula constructor. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. The expected returns values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized; >=0 : the name has been recognized, return the action parameter. Double_t Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; Evaluate this formula. The current value of variables x,y,z,t is passed through x, y, z and t.; The parameters used will be the ones in the array params if params is given; otherwise parameters will be taken from the stored data members fParams. Double_t EvalParOld(const Double_t* x, const Double_t* params = 0); Evaluate this formula. The current value of variables x,y,z,t is passed through the pointer x.; The parameters used will be the ones in the array params if params is given; otherwise parameters will be taken from the stored data members fParams. /*; ; */. TString GetExpFormula(Option_t* option = """") const; Reconstruct the formula expression from the internal TFormula member variables. This function uses the internal member variables of TFormula to; construct the mathematical expression associated with t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:23205,usab,usable,23205,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,3,['usab'],['usable']
Usability,"r. void ResetCache(); This will simply clear the cache. Int_t SetBufferSize(Int_t buffersize); Change the underlying buffer size of the cache.; If the change of size means some cache content is lost, or if the buffer; is now larger, setup for a cache refill the next time there is a read; Returns 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void Le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:26697,learn,learning,26697,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['learn'],['learning']
Usability,"r.; #ifdef __ROOTCLING__. #pragma link off all globals;; #pragma link off all classes;; #pragma link off all functions;; #pragma link C++ class EventHeader+;; #pragma link C++ class Event-;; #pragma link C++ class HistogramManager+;; #pragma link C++ class Track+;. #endif; #pragma link C++ class EventHeader+;; The “+” sign tells rootcling to use the new Streamersystem introduced in ROOT 3.0. The following is an example of a customized Streamerfor Event. The Streamer takes a TBuffer as a parameter, and first checks to see if this is a case of reading or writing the buffer.; void Event::Streamer(TBuffer &R__b) {; if (R__b.IsReading()) {; Event::Class()->ReadBuffer(R__b, this);; fTransient = gDirectory; //save current directory; fPt= TMath::Sqrt(fPx*fPx + fPy*fPy + fPz*fPz);; } else {; Event::Class()->WriteBuffer(R__b, this);; }; }; 11.3.8 Writing Objects; The Streamer decomposes the objects into data members and writes them to a buffer. It does not write the buffer to a file, it simply populates a buffer with bytes representing the object. This allows us to write the buffer to a file or do anything else we could do with the buffer. For example, we can write it to a socket to send it over the network. This is beyond the scope of this chapter, but it is worthwhile to emphasize the need and advantage of separating the creation of the buffer from its use. Let us look how a buffer is written to a file. The dictionary for a class needs to be loaded before any object of that type can be saved.; The TObject::Write method does the following:. Creates a TKey object in the current directory; Creates a TBuffer object which is part of the newly created TKey; Fills the TBuffer with a call to the class::Streamer method; Creates a second buffer for compression, if needed; Reserves space by scanning the TFree list. At this point, the size of the buffer is known.; Writes the buffer to the file; Releases the TBuffer part of the key. In other words, the TObject::Write calls the Streamer m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:474393,simpl,simply,474393,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simply']
Usability,"r.cxx. ◆ DoRotatorStop(). void TGLViewerEditor::DoRotatorStop ; (; ). Stop auto-rotator. ; Definition at line 822 of file TGLViewerEditor.cxx. ◆ DoUpdateScene(). void TGLViewerEditor::DoUpdateScene ; (; ). UpdateScene was clicked. ; Definition at line 294 of file TGLViewerEditor.cxx. ◆ IsA(). TClass * TGLViewerEditor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 164 of file TGLViewerEditor.h. ◆ MakeLabeledNEntry(). TGNumberEntry * TGLViewerEditor::MakeLabeledNEntry ; (; TGCompositeFrame * ; p, . const char * ; name, . Int_t ; labelw, . Int_t ; nd = 7, . Int_t ; s = 5 . ). static . Helper function to create fixed width TGLabel and TGNumberEntry in same row. ; Definition at line 437 of file TGLViewerEditor.cxx. ◆ operator=(). TGLViewerEditor & TGLViewerEditor::operator= ; (; const TGLViewerEditor & ; ). private . ◆ SetGuides(). void TGLViewerEditor::SetGuides ; (; ). Configuration of guides GUI called from SetModel(). ; Definition at line 706 of file TGLViewerEditor.cxx. ◆ SetModel(). void TGLViewerEditor::SetModel ; (; TObject * ; obj). overridevirtual . Sets model or disables/hides viewer. ; Implements TGedFrame.; Definition at line 182 of file TGLViewerEditor.cxx. ◆ SetRotatorMode(). void TGLViewerEditor::SetRotatorMode ; (; ). Definition at line 760 of file TGLViewerEditor.cxx. ◆ Streamer(). void TGLViewerEditor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGLViewerEditor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 164 of file TGLViewerEditor.h. ◆ UpdateCameraCenter(). void TGLViewerEditor::UpdateCameraCenter ; (; ). Update current camera with GUI state. ; Definition at line 387 of file TGLViewerEditor.cxx. ◆ UpdateMaxDrawTimes(). void TGLViewerEditor::UpdateMaxDrawTimes ; (; ). Slot for fMaxSceneDrawTimeHQ and fMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewerEditor.html:42103,guid,guides,42103,doc/master/classTGLViewerEditor.html,https://root.cern,https://root.cern/doc/master/classTGLViewerEditor.html,1,['guid'],['guides']
Usability,r.cxx. ◆ ~TSessionQueryFrame(). TSessionQueryFrame::~TSessionQueryFrame ; (; ). override . Destructor. ; Definition at line 2388 of file TSessionViewer.cxx. Member Function Documentation. ◆ Build(). void TSessionQueryFrame::Build ; (; TSessionViewer * ; gui). Build query information frame. ; Definition at line 2396 of file TSessionViewer.cxx. ◆ Class(). static TClass * TSessionQueryFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSessionQueryFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSessionQueryFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 448 of file TSessionViewer.h. ◆ DeclFileName(). static const char * TSessionQueryFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 448 of file TSessionViewer.h. ◆ Feedback(). void TSessionQueryFrame::Feedback ; (; TList * ; objs). Feedback function connected to Feedback signal. ; Used to update feedback histograms. ; Definition at line 2550 of file TSessionViewer.cxx. ◆ GetQueryEditFrame(). TEditQueryFrame * TSessionQueryFrame::GetQueryEditFrame ; (; ); const. inline . Definition at line 419 of file TSessionViewer.h. ◆ GetStatsCanvas(). TCanvas * TSessionQueryFrame::GetStatsCanvas ; (; ); const. inline . Definition at line 418 of file TSessionViewer.h. ◆ GetTab(). TGTab * TSessionQueryFrame::GetTab ; (; ); const. inline . Definition at line 420 of file TSessionViewer.h. ◆ IndicateStop(). void TSessionQueryFrame::IndicateStop ; (; Bool_t ; aborted). Indicate that Cancel or Stop was clicked. ; Definition at line 2878 of file TSessionViewer.cxx. ◆ IsA(). TClass * TSessionQueryFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 448 of file TSessionViewer.h. ◆ Modified(). void TSessionQueryFra,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:34377,Feedback,Feedback,34377,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,1,['Feedback'],['Feedback']
Usability,"r.h""; #include ""TStyle.h""; #include ""Foption.h""; #include ""TTreeResult.h""; #include ""TTreeRow.h""; #include ""TPrincipal.h""; #include ""TChain.h""; #include ""TChainElement.h""; #include ""TF1.h""; #include ""TVirtualFitter.h""; #include ""THLimitsFinder.h""; #include ""TSelectorDraw.h""; #include ""TSelectorEntries.h""; #include ""TPluginManager.h""; #include ""TObjString.h""; #include ""TTreeProxyGenerator.h""; #include ""TTreeReaderGenerator.h""; #include ""TTreeIndex.h""; #include ""TChainIndex.h""; #include ""TRefProxy.h""; #include ""TRefArrayProxy.h""; #include ""TVirtualMonitoring.h""; #include ""TTreeCache.h""; #include ""TVirtualMutex.h""; #include ""ThreadLocalStorage.h""; #include ""strlcpy.h""; #include ""snprintf.h""; #include ""HFitInterface.h""; #include ""Fit/BinData.h""; #include ""Fit/UnBinData.h""; #include ""Math/MinimizerOptions.h"". Include dependency graph for TTreePlayer.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Functions; static TString R__GetBranchPointerName (TLeaf *leaf, bool replace=true);  Return the name of the branch pointer needed by MakeClass/MakeSelector. ;  . Variables; R__EXTERN Foption_t Foption;  ; TVirtualFitter * tFitter = nullptr;  . Function Documentation. ◆ R__GetBranchPointerName(). static TString R__GetBranchPointerName ; (; TLeaf * ; leaf, . bool ; replace = true . ). static . Return the name of the branch pointer needed by MakeClass/MakeSelector. ; Definition at line 647 of file TTreePlayer.cxx. Variable Documentation. ◆ Foption. R__EXTERN Foption_t Foption. Definition at line 98 of file TTreePlayer.cxx. ◆ tFitter. TVirtualFitter* tFitter = nullptr. Definition at line 100 of file TTreePlayer.cxx. treetreeplayersrcTTreePlayer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreePlayer_8cxx.html:2998,Guid,Guide,2998,doc/master/TTreePlayer_8cxx.html,https://root.cern,https://root.cern/doc/master/TTreePlayer_8cxx.html,1,['Guid'],['Guide']
Usability,"r/replayer interface for a user.Definition TRecorder.h:266; TRecorder::Stopvoid Stop(Bool_t guiCommand=kFALSE)Stopps recording events.Definition TRecorder.cxx:230; TRecorder::Startvoid Start(const char *filename, Option_t *option=""RECREATE"", Window_t *w=nullptr, Int_t winCount=0)Starts recording events.Definition TRecorder.cxx:221; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; Note: The previous commands should be copy/pasted into a ROOT session, not executed as a macro. The interactive editing shows. Object editing using object editors; Direct editing on the graphics canvas; Saving PS and bitmap files.; Saving as a .C file: C++ code corresponding to the modifications is saved. The sketch of the recorded actions is; On the canvas c1. Open View/Editor; Select histogram; Change fill style; Change fill color; Move stat box; Change fill color; Move title; Change fill color using wheel color; Select Y axis; Change axis title; Select X axis; Change axis title; Select histogram; Go in binning; Change range; Move range; On the canvas menu set grid Y; On the canvas menu set grid X; On the canvas menu set log Y; Increase the range; Close View/Editor; Open the Tool Bar; Create a text ""Comment""; Create an arrow; Change the arrow size; Close the Tool Bar; Save as PS file; Save as C file; Close c1 On the canvas c2. Open View/Editor; Select histogram; Select COL; Select Palette; Move Stats; Select Overflows; Select histogram; Select 3D; Select SURF1; Rotate Surface; Go in binning; Change X range; Change Y range; Close View/Editor; Save as GIF file; Save as C file; Close c2 AuthorOlivier Couet . Definition in file graph_edit_playback.C. tutorialsgraphicsgraph_edit_playback.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph__edit__playback_8C.html:4110,Guid,Guide,4110,doc/master/graph__edit__playback_8C.html,https://root.cern,https://root.cern/doc/master/graph__edit__playback_8C.html,1,['Guid'],['Guide']
Usability,"r2->AddNode(pvol, 1);; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; Note that the third parameter of PVOL is negative, which does not make sense as half-length on Z. This is interpreted as: when positioned, create a box replacing all invalid parameters with the corresponding dimensions of the container. This is also internally handled by the TGeoVolumeMulti class, which does not need to be instantiated by users. Dividing volumes; Volumes can be divided according a pattern. The most simple division can be done along one axis, that can be: X, Y, Z, Phi, Rxy or Rxyz. Let's take the most simple case: we would like to divide a box in N equal slices along X coordinate, representing a new volume family. Supposing we already have created the initial box, this can be done like:; TGeoVolume *slicex = box->Divide(""SLICEX"", 1, N);; N#define N; TGeoVolume::Dividevirtual TGeoVolume * Divide(const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""")Division a la G3.Definition TGeoVolume.cxx:1103; where SLICE is the name of the new family representing all slices and 1 is the slicing axis. The meaning of the axis index is the following: for all volumes having shapes like box, trd1, trd2, trap, gtra or para - 1,2,3 means X,Y,Z; for tube, tubs, cone, cons - 1 means Rxy, 2 means phi and 3 means Z; for pcon and pgon - 2 means phi and 3 means Z; for spheres 1 means R and 2 means phi. In fact, the division operation has the same effect as positioning volumes in a given order inside the divided container - the advantage being that the navigation in such a structure is much faster. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeMulti.html:4517,simpl,simple,4517,doc/master/classTGeoVolumeMulti.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeMulti.html,1,['simpl'],['simple']
Usability,"r2::Y ; (; ); const. inline . Definition at line 74 of file TVector2.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. Double_t operator* ; (; const TVector2 & ; v1, . const TVector2 & ; v2 . ). friend . Definition at line 155 of file TVector2.h. ◆ operator* [2/3]. TVector2 operator* ; (; const TVector2 & ; v, . Double_t ; s . ). friend . Definition at line 147 of file TVector2.h. ◆ operator* [3/3]. TVector2 operator* ; (; Double_t ; s, . const TVector2 & ; v . ). friend . Definition at line 151 of file TVector2.h. ◆ operator+ [1/3]. TVector2 operator+ ; (; const TVector2 & ; v1, . const TVector2 & ; v2 . ). friend . Definition at line 127 of file TVector2.h. ◆ operator+ [2/3]. TVector2 operator+ ; (; const TVector2 & ; v1, . Double_t ; bias . ). friend . Definition at line 131 of file TVector2.h. ◆ operator+ [3/3]. TVector2 operator+ ; (; Double_t ; bias, . const TVector2 & ; v1 . ). friend . Definition at line 135 of file TVector2.h. ◆ operator- [1/2]. TVector2 operator- ; (; const TVector2 & ; v1, . const TVector2 & ; v2 . ). friend . Definition at line 139 of file TVector2.h. ◆ operator- [2/2]. TVector2 operator- ; (; const TVector2 & ; v1, . Double_t ; bias . ). friend . Definition at line 143 of file TVector2.h. ◆ operator/. TVector2 operator/ ; (; const TVector2 & ; v, . Double_t ; s . ). friend . Definition at line 159 of file TVector2.h. ◆ operator^. Double_t operator^ ; (; const TVector2 & ; v1, . const TVector2 & ; v2 . ). friend . Definition at line 163 of file TVector2.h. Member Data Documentation. ◆ fX. Double_t TVector2::fX. protected . Definition at line 24 of file TVector2.h. ◆ fY. Double_t TVector2::fY. protected . Definition at line 25 of file TVector2.h. Libraries for TVector2:. [legend]; The documentation for this class was generated from the following files:; math/physics/inc/TVector2.h; math/physics/src/TVector2.cxx. TVector2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVector2.html:19498,Guid,Guide,19498,doc/master/classTVector2.html,https://root.cern,https://root.cern/doc/master/classTVector2.html,1,['Guid'],['Guide']
Usability,"r3D.h:50; TBuffer3D::fLocalMasterDouble_t fLocalMaster[16]Definition TBuffer3D.h:93; TBuffer3D::ClearSectionsValidvoid ClearSectionsValid()Clear any sections marked valid.Definition TBuffer3D.cxx:287; TBuffer3D::SetSectionsValidvoid SetSectionsValid(UInt_t mask)Definition TBuffer3D.h:65; TBuffer3D::fSegsInt_t * fSegsDefinition TBuffer3D.h:114; TBuffer3D::fLocalFrameBool_t fLocalFrameDefinition TBuffer3D.h:90; TBuffer3D::fColorInt_t fColorDefinition TBuffer3D.h:88; TBuffer3D::fTransparencyShort_t fTransparencyDefinition TBuffer3D.h:89; TBuffer3D::SetAABoundingBoxvoid SetAABoundingBox(const Double_t origin[3], const Double_t halfLengths[3])Set fBBVertex in kBoundingBox section to a axis aligned (local) BB using supplied origin and box half...Definition TBuffer3D.cxx:321; TBuffer3D::fReflectionBool_t fReflectionDefinition TBuffer3D.h:91; TBuffer3D::fIDTObject * fIDDefinition TBuffer3D.h:87; TBuffer3D::SetRawSizesBool_t SetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity)Set kRaw tessellation section of buffer with supplied sizes.Definition TBuffer3D.cxx:360; TBuffer3D::fPntsDouble_t * fPntsDefinition TBuffer3D.h:113; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Drawth1 Draw(); AuthorRichard Maunder ; Definition in file viewer3DLocal.C. tutorialsglviewer3DLocal.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:19643,Guid,Guide,19643,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['Guid'],['Guide']
Usability,"r3dAlgorithms.h. Constructor & Destructor Documentation. ◆ TPainter3dAlgorithms() [1/2]. TPainter3dAlgorithms::TPainter3dAlgorithms ; (; ). Lego default constructor. ; Definition at line 61 of file TPainter3dAlgorithms.cxx. ◆ TPainter3dAlgorithms() [2/2]. TPainter3dAlgorithms::TPainter3dAlgorithms ; (; Double_t * ; rmin, . Double_t * ; rmax, . Int_t ; system = 1 . ). Normal default constructor. ; rmin[3], rmax[3] are the limits of the lego object depending on the selected coordinate system ; Definition at line 130 of file TPainter3dAlgorithms.cxx. ◆ ~TPainter3dAlgorithms(). TPainter3dAlgorithms::~TPainter3dAlgorithms ; (; ). override . destructor ; Definition at line 209 of file TPainter3dAlgorithms.cxx. Member Function Documentation. ◆ BackBox(). void TPainter3dAlgorithms::BackBox ; (; Double_t ; ang). Draw back surfaces of surrounding box. ; Parameters. [in]angangle between X and Y axis . Definition at line 218 of file TPainter3dAlgorithms.cxx. ◆ ClearRaster(). void TPainter3dAlgorithms::ClearRaster ; (; ). Clear screen. ; Definition at line 307 of file TPainter3dAlgorithms.cxx. ◆ ColorFunction(). void TPainter3dAlgorithms::ColorFunction ; (; Int_t ; nl, . Double_t * ; fl, . Int_t * ; icl, . Int_t & ; irep . ). Set correspondence between function and color levels. ; Parameters. [in]nlnumber of levels ; [in]flfunction levels ; [in]iclcolors for levels; [out]irepreturn code (0 OK, -1 error). . Definition at line 323 of file TPainter3dAlgorithms.cxx. ◆ DefineGridLevels(). void TPainter3dAlgorithms::DefineGridLevels ; (; Int_t ; ndivz). Define the grid levels drawn in the background of surface and lego plots. ; The grid levels are aligned on the Z axis' main tick marks. ; Definition at line 366 of file TPainter3dAlgorithms.cxx. ◆ DrawFaceGouraudShaded(). void TPainter3dAlgorithms::DrawFaceGouraudShaded ; (; Int_t * ; icodes, . Double_t ; xyz[][3], . Int_t ; np, . Int_t * ; iface, . Double_t * ; t . ). Draw the faces for the Gouraud Shaded Iso surfaces. ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:18770,Clear,ClearRaster,18770,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,1,['Clear'],['ClearRaster']
Usability,"r4: -0.013 +0.002 -0.024 +1.000; : ----------------------------------------; DataSetFactory : [dataset] : ; : ; Factory : Booking method: ␛[1mMLP␛[0m; : ; MLP : Building Network. ; : Initializing weights; Factory : Booking method: ␛[1mPDEFoam␛[0m; : ; Factory : Booking method: ␛[1mDL_CPU␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Architecture=GPU:Layout=TANH|100,TANH|50,TANH|10,LINEAR:TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:WeightInitialization=XAVIERUNIFORM:Architecture=GPU:Layout=TANH|100,TANH|50,TANH|10,LINEAR:TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""N"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|100,TANH|50,TANH|10,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""GPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""Optimizer=ADAM,LearningRate=1e-3,TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpoc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:4451,Learn,LearningRate,4451,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Learn'],['LearningRate']
Usability,"r:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TPadPainter() [1/3]. TPadPainter::TPadPainter ; (; ). Empty ctor. We need it only because of explicit copy ctor. ; Definition at line 72 of file TPadPainter.cxx. ◆ TPadPainter() [2/3]. TPadPainter::TPadPainter ; (; const TPadPainter & ; ). privatedelete . ◆ TPadPainter() [3/3]. TPadPainter::TPadPainter ; (; TPadPainter && ; ). privatedelete . Member Function Documentation. ◆ Class(). static TClass * TPadPainter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPadPainter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPadPainter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 109 of file TPadPainter.h. ◆ ClearDrawable(). void TPadPainter::ClearDrawable ; (; ). overridevirtual . Clear the current gVirtualX window. ; Implements TVirtualPadPainter.; Definition at line 315 of file TPadPainter.cxx. ◆ CopyDrawable(). void TPadPainter::CopyDrawable ; (; Int_t ; device, . Int_t ; px, . Int_t ; py . ). overridevirtual . Copy a gVirtualX pixmap. ; Implements TVirtualPadPainter.; Definition at line 324 of file TPadPainter.cxx. ◆ CreateDrawable(). Int_t TPadPainter::CreateDrawable ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Create a gVirtualX Pixmap. ; Implements TVirtualPadPainter.; Definition at line 306 of file TPadPainter.cxx. ◆ DeclFileName(). static const char * TPadPainter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 109 of file TPadPainter.h. ◆ DestroyDrawable(). void TPadPainter::DestroyDrawable ; (; Int_t ; device). overridevirtual . Close the current gVirtualX pixmap. ; Implements TVirtualPadPainter.; Definition at line 333 of file TPadPainter.cxx. ◆ DrawBox(). void TPadPainter::DrawBox ; (; Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadPainter.html:7079,Clear,Clear,7079,doc/master/classTPadPainter.html,https://root.cern,https://root.cern/doc/master/classTPadPainter.html,1,['Clear'],['Clear']
Usability,"r::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooChangeTracker::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 49 of file RooChangeTracker.h. ◆ clone(). TObject * RooChangeTracker::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 30 of file RooChangeTracker.h. ◆ DeclFileName(). static const char * RooChangeTracker::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 49 of file RooChangeTracker.h. ◆ evaluate(). double RooChangeTracker::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 47 of file RooChangeTracker.h. ◆ hasChanged(). bool RooChangeTracker::hasChanged ; (; bool ; clearState). Returns true if state has changed since last call with clearState=true. ; If clearState is true, changeState flag will be cleared. ; Definition at line 104 of file RooChangeTracker.cxx. ◆ IsA(). TClass * RooChangeTracker::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 49 of file RooChangeTracker.h. ◆ parameters(). RooArgSet RooChangeTracker::parameters ; (; ); const. Definition at line 188 of file RooChangeTracker.cxx. ◆ Streamer(). void RooChangeTracker::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooChangeTracker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooChangeTracker.h. Member Data Documentation. ◆ _catRef. std::vector<Int_t> RooChangeTracker::_catRef. protected . Reference values for categories. ; Definition at line 42 of file RooChangeTracker.h. ◆ _catSet. RooList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChangeTracker.html:62796,clear,clearState,62796,doc/master/classRooChangeTracker.html,https://root.cern,https://root.cern/doc/master/classRooChangeTracker.html,1,['clear'],['clearState']
Usability,r::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 53 of file TProofCondor.h. ◆ DeclFileName(). static const char * TProofCondor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file TProofCondor.h. ◆ GetJobAd(). TString TProofCondor::GetJobAd ; (; ). protected . Get job Ad. ; Definition at line 309 of file TProofCondor.cxx. ◆ IsA(). TClass * TProofCondor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 53 of file TProofCondor.h. ◆ SetActive() [1/2]. virtual void TProofCondor::SetActive ; (; ). inlinevirtual . Definition at line 50 of file TProofCondor.h. ◆ SetActive() [2/2]. void TProofCondor::SetActive ; (; Bool_t ; active). virtual . Suspend or resume PROOF via Condor. ; Definition at line 283 of file TProofCondor.cxx. ◆ StartSlaves(). Bool_t TProofCondor::StartSlaves ; (; Bool_t ; ). overrideprotectedvirtual . Setup Condor workers using dynamic information. ; Reimplemented from TProof.; Definition at line 81 of file TProofCondor.cxx. ◆ Streamer(). void TProofCondor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProof. ◆ StreamerNVirtual(). void TProofCondor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file TProofCondor.h. Friends And Related Symbol Documentation. ◆ TCondor. friend class TCondor. friend . Definition at line 35 of file TProofCondor.h. Member Data Documentation. ◆ fCondor. TCondor* TProofCondor::fCondor. private . Definition at line 38 of file TProofCondor.h. ◆ fTimer. TTimer* TProofCondor::fTimer. private . Definition at line 39 of file TProofCondor.h. proof/proof/inc/TProofCondor.h; proof/proof/src/TProofCondor.cxx. TProofCondor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:46859,Guid,Guide,46859,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,1,['Guid'],['Guide']
Usability,r::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 42 of file TEveEventManager.h. ◆ GetNewEventCommands(). std::vector< TString > & TEveEventManager::GetNewEventCommands ; (; ). inline . Definition at line 28 of file TEveEventManager.h. ◆ GotoEvent(). virtual void TEveEventManager::GotoEvent ; (; Int_t ; ). inlinevirtual . Definition at line 31 of file TEveEventManager.h. ◆ IsA(). TClass * TEveEventManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 42 of file TEveEventManager.h. ◆ NextEvent(). virtual void TEveEventManager::NextEvent ; (; ). inlinevirtual . Definition at line 32 of file TEveEventManager.h. ◆ Open(). virtual void TEveEventManager::Open ; (; ). inlinevirtual . Definition at line 30 of file TEveEventManager.h. ◆ PrevEvent(). virtual void TEveEventManager::PrevEvent ; (; ). inlinevirtual . Definition at line 33 of file TEveEventManager.h. ◆ RemoveNewEventCommand(). void TEveEventManager::RemoveNewEventCommand ; (; const TString & ; cmd). virtual . Remove the first command equal to cmd. ; Definition at line 56 of file TEveEventManager.cxx. ◆ Streamer(). void TEveEventManager::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveEventManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 42 of file TEveEventManager.h. Member Data Documentation. ◆ fNewEventCommands. std::vector<TString> TEveEventManager::fNewEventCommands. protected . Definition at line 22 of file TEveEventManager.h. Libraries for TEveEventManager:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveEventManager.h; graf3d/eve/src/TEveEventManager.cxx. TEveEventManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveEventManager.html:37274,Guid,Guide,37274,doc/master/classTEveEventManager.html,https://root.cern,https://root.cern/doc/master/classTEveEventManager.html,1,['Guid'],['Guide']
Usability,"r::Eyconst char * Ey(); TTreeViewer::fToolBarTGToolBar * fToolBarDefinition TTreeViewer.h:123; TTreeViewer::fBFrameTGHorizontalFrame * fBFrameButton frame.Definition TTreeViewer.h:150; TTreeViewer::ScanListconst char * ScanList(); TTreeViewer::fEditMenuTGPopupMenu * fEditMenuDefinition TTreeViewer.h:112; TTreeViewer::fMappedBranchTBranch * fMappedBranchListed branch.Definition TTreeViewer.h:82; TTreeViewer::fSessionTTVSession * fSessionCurrent tree-viewer session.Definition TTreeViewer.h:77; TTreeViewer::fDimensionInt_t fDimensionHistogram dimension.Definition TTreeViewer.h:83; TTreeViewer::fListHdrTGCompositeFrame * fListHdrHeader for list view.Definition TTreeViewer.h:147; TTreeViewer::fStopMappingbool fStopMappingTrue if branch don't need remapping.Definition TTreeViewer.h:100; TTreeViewer::fFileMenuTGPopupMenu * fFileMenuDefinition TTreeViewer.h:111; TTreeViewer::fBarListOutTGTextEntry * fBarListOutPree output event list name entry.Definition TTreeViewer.h:156; TTreeViewer::fResetTGTextButton * fResetclear expression's entriesDefinition TTreeViewer.h:168; TTreeViewer::ProcessMessagebool ProcessMessage(Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override; TTreeViewer::ExecuteSpidervoid ExecuteSpider(); TTreeViewer::IsScanRedirectedbool IsScanRedirected(); TTreeViewer::fBGRecordTGPictureButton * fBGRecordDefinition TTreeViewer.h:165; TTreeViewer::SetScanFileNamevoid SetScanFileName(const char *name=""""); TTreeViewer::GetTreeTTree * GetTree()Definition TTreeViewer.h:224; TTreeViewer::fStatusBarTGStatusBar * fStatusBarStatus bar.Definition TTreeViewer.h:161; TTreeViewer::fSPIDERTGTextButton * fSPIDERSPIDER button.Definition TTreeViewer.h:158; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::kMaxEntriesstatic constexpr Long64_t kMaxEntriesDefinition TTree.h:229; int; nconst Int_t nDefinition legend1.C:16. treetreeviewerincTTreeViewer.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8h_source.html:26766,Guid,Guide,26766,doc/master/TTreeViewer_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8h_source.html,1,['Guid'],['Guide']
Usability,"r:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|300"" [The Layout of the input]; : Layout: ""DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:10236,Learn,LearningRate,10236,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"r:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|300"" [The Layout of the input]; : Layout: ""DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Running with nthreads = 4; --- RNNClassification : Using input file: time_data_t10_d30.root; number of variables is 300; vars_time0[0]; vars_time0[1]; vars_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:5700,Learn,LearningRate,5700,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Learn'],['LearningRate']
Usability,"r; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsCachedPdf(const char* name, const char* title, Int_t ipOrder = 0); Constructor. RooAbsCachedPdf(const RooAbsCachedPdf& other, const char* name = 0); Copy constructor. ~RooAbsCachedPdf(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsPdf. Return normalized value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedPdf. RooAbsPdf* getCachePdf(const RooArgSet* nset = 0) const; Return pointer to RooHistPdf cache pdf for given choice of observables. RooDataHist* getCacheHist(const RooArgSet* nset = 0) const; Return pointer to RooDataHist cache histogram for given choice of observables. void clearCacheObject(RooAbsCachedPdf::PdfCacheElem& cache) const; Mark all bins of given cache as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct string with unique suffix for cache objects based on; observable names that define cache configuration. void setInterpolationOrder(Int_t order); Change the interpolation order that is used in RooHistPdf cache; representation smoothing the RooDataHist shapes. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force RooRealIntegral to offer all our actual observable for internal; integration. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertises internal (analytical) integration capabilities. Call; is forwarded to RooHistPdf cache p.d.f of cache that is used for; given choice of observables. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements internal (analytical) integration capabilities. Call; is forwarded to Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedPdf.html:47646,clear,clearCacheObject,47646,root/html602/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedPdf.html,2,['clear'],['clearCacheObject']
Usability,"r;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:58926,simpl,simplex,58926,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,7,['simpl'],['simplex']
Usability,"r< std::string > ParseColumns(const std::string &)Definition RCsvDS.cxx:276; ROOT::RDF::RCsvDS::FillHeadersvoid FillHeaders(const std::string &)Definition RCsvDS.cxx:111; ROOT::RDF::RCsvDS::fCsvFilestd::unique_ptr< ROOT::Internal::RRawFile > fCsvFileDefinition RCsvDS.hxx:48; ROOT::RDF::RCsvDS::fgDoubleRegex1static const TRegexp fgDoubleRegex1Definition RCsvDS.hxx:43; ROOT::RDF::RCsvDS::fStringEvtValuesstd::vector< std::vector< std::string > > fStringEvtValuesDefinition RCsvDS.hxx:61; ROOT::RDF::RCsvDS::fBoolEvtValuesstd::vector< std::deque< bool > > fBoolEvtValuesDefinition RCsvDS.hxx:64; ROOT::RDF::RCsvDS::ColType_tchar ColType_tDefinition RCsvDS.hxx:39; ROOT::RDF::RCsvDS::FreeRecordsvoid FreeRecords()Definition RCsvDS.cxx:377; ROOT::RDF::RCsvDS::fColTypesListstd::list< ColType_t > fColTypesListDefinition RCsvDS.hxx:56; ROOT::RDF::RDataSource::Record_tstd::vector< void * > Record_tDefinition RDataSource.hxx:112; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TRegexpRegular expression class.Definition TRegexp.h:31; TRegexp::IndexSsiz_t Index(const TString &str, Ssiz_t *len, Ssiz_t start=0) constFind the first occurrence of the regexp in string and return the position, or -1 if there is no match...Definition TRegexp.cxx:213; bool; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::TSeqUTSeq< unsigned int > TSeqUDefinition TSeq.hxx:204. treedataframesrcRCsvDS.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCsvDS_8cxx_source.html:26808,Guid,Guide,26808,doc/master/RCsvDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCsvDS_8cxx_source.html,1,['Guid'],['Guide']
Usability,"r<ROOT::RWebDisplayHandle> > TWebCanvas::fHelpHandles. protected . ! array of handles for help widgets ; Definition at line 117 of file TWebCanvas.h. ◆ fJsonComp. Int_t TWebCanvas::fJsonComp {0}. protected . ! compression factor for messages send to the client ; Definition at line 98 of file TWebCanvas.h. ◆ fLongerPolling. Bool_t TWebCanvas::fLongerPolling {kFALSE}. protected . ! when true, make longer polling in blocking operations ; Definition at line 100 of file TWebCanvas.h. ◆ fObjSelectSignal. ObjectSelectSignal_t TWebCanvas::fObjSelectSignal. protected . ! signal emitted when new object selected in the pad ; Definition at line 115 of file TWebCanvas.h. ◆ fPadClickedSignal. PadClickedSignal_t TWebCanvas::fPadClickedSignal. protected . ! signal emitted when simple mouse click performed on the pad ; Definition at line 113 of file TWebCanvas.h. ◆ fPadDblClickedSignal. PadClickedSignal_t TWebCanvas::fPadDblClickedSignal. protected . ! signal emitted when simple mouse click performed on the pad ; Definition at line 114 of file TWebCanvas.h. ◆ fPadsStatus. std::map<TPad*, PadStatus> TWebCanvas::fPadsStatus. protected . ! map of pads in canvas and their status flags ; Definition at line 86 of file TWebCanvas.h. ◆ fPaletteDelivery. Int_t TWebCanvas::fPaletteDelivery {1}. protected . ! colors palette delivery 0:never, 1:once, 2:always, 3:per subpad ; Definition at line 96 of file TWebCanvas.h. ◆ fPrimitivesMerge. Int_t TWebCanvas::fPrimitivesMerge {100}. protected . ! number of PS primitives, which will be merged together ; Definition at line 97 of file TWebCanvas.h. ◆ fProcessingData. Bool_t TWebCanvas::fProcessingData {kFALSE}. protected . ! flag used to prevent blocking methods when process data is invoked ; Definition at line 101 of file TWebCanvas.h. ◆ fReadOnly. Bool_t TWebCanvas::fReadOnly {kFALSE}. protected . !< configured display ; ! in read-only mode canvas cannot be changed from client side ; Definition at line 90 of file TWebCanvas.h. ◆ fStyleDelivery. Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:42585,simpl,simple,42585,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['simpl'],['simple']
Usability,"rAction(param). The expected returns values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized; >=0 : the name has been recognized, return the internal code for this name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the class of the operation oper. If the 'value' in the requested operation is a simple pointer to an object,; this function returns the TClass corresponding to its type. void* EvalObject(Int_t i = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. Return the address of the object pointed to by the formula.; Return 0 if the formula is not a single object; The object type can be retrieved using by call EvalClass();. const char* EvalStringInstance(Int_t i = 0); Eval the instance as a string. Double_t EvalInstance(Int_t i = 0, const char** stringStack = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. TFormLeafInfo * GetLeafInfo(Int_t code) const; -*-*Return DataMember corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeFormula.html:22474,simpl,simple,22474,root/html528/TTreeFormula.html,https://root.cern,https://root.cern/root/html528/TTreeFormula.html,3,['simpl'],['simple']
Usability,"rAction(param). The expected returns values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized; >=0 : the name has been recognized, return the internal code for this name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the class of the operation oper. If the 'value' in the requested operation is a simple pointer to an object,; this function returns the TClass corresponding to its type. void* EvalObject(Int_t i = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. Return the address of the object pointed to by the formula.; Return 0 if the formula is not a single object; The object type can be retrieved using by call EvalClass();. const char* EvalStringInstance(Int_t i = 0); Eval the instance as a string. T EvalInstance(Int_t i = 0, const char** stringStack = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. TFormLeafInfo * GetLeafInfo(Int_t code) const; -*-*Return DataMember corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVariable. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeFormula.html:22792,simpl,simple,22792,root/html534/TTreeFormula.html,https://root.cern,https://root.cern/root/html534/TTreeFormula.html,1,['simpl'],['simple']
Usability,"rAction(param). The expected returns values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized; >=0 : the name has been recognized, return the internal code for this name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the class of the operation oper. If the 'value' in the requested operation is a simple pointer to an object,; this function returns the TClass corresponding to its type. void* EvalObject(Int_t i = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. Return the address of the object pointed to by the formula.; Return 0 if the formula is not a single object; The object type can be retrieved using by call EvalClass();. const char* EvalStringInstance(Int_t i = 0); Eval the instance as a string. T EvalInstance(Int_t i = 0, const char*[] stringStack = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. TFormLeafInfo * GetLeafInfo(Int_t code) const; -*-*Return DataMember corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVariable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFormula.html:28042,simpl,simple,28042,root/html602/TTreeFormula.html,https://root.cern,https://root.cern/root/html602/TTreeFormula.html,2,['simpl'],['simple']
Usability,"rCache ; (; const char * ; file = 0). virtual . Remove file from all file caches. ; If file is 0 or """" or ""*"", remove all the files ; Reimplemented in TProofLite.; Definition at line 7714 of file TProof.cxx. ◆ ClearData(). void TProof::ClearData ; (; UInt_t ; what = kUnregistered, . const char * ; dsname = 0 . ). Remove files for the data directory. ; The option 'what' can take the values: kPurge remove all files and directories under '~/data' kUnregistered remove only files not in registered datasets (default) kDataset remove files belonging to dataset 'dsname' User is prompt for confirmation, unless kForceClear is ORed with the option ; Definition at line 7412 of file TProof.cxx. ◆ ClearDataProgress(). void TProof::ClearDataProgress ; (; Int_t ; r, . Int_t ; t . ). private . Progress bar for clear data. ; Definition at line 7670 of file TProof.cxx. ◆ ClearDataSetCache(). void TProof::ClearDataSetCache ; (; const char * ; dataset = 0). virtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:75294,Clear,Clear,75294,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['Clear']
Usability,"rColor () const;  ; EBarType GetBarType () const;  ; EFillType GetFillType () const;  ; FontStruct_t GetFontStruct () const;  ; TString GetFormat () const;  ; Float_t GetMax () const;  ; Float_t GetMin () const;  ; GContext_t GetNormGC () const;  ; Float_t GetPosition () const;  ; Bool_t GetShowPos () const;  ; const char * GetValueFormat () const;  ; void Increment (Float_t inc);  Increment progress position. ;  ; virtual void Reset ();  Reset progress bar (i.e. set pos to 0). ;  ; void SetBarColor (const char *color=""blue"");  Set progress bar color. ;  ; virtual void SetBarColor (Pixel_t color);  Set progress bar color. ;  ; void SetBarType (EBarType type);  Set bar type. ;  ; void SetFillType (EFillType type);  Set fill type. ;  ; void SetForegroundColor (Pixel_t pixel) override;  Change text color drawing. ;  ; void SetMax (Float_t max);  ; void SetMin (Float_t min);  ; void SetPosition (Float_t pos);  Set progress position between [min,max]. ;  ; void SetRange (Float_t min, Float_t max);  Set min and max of progress bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UsePercent () const;  ;  Public Member Functions inherited from TGFrame;  TGFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a TGFrame object. Options is an OR of the EFrameTypes. ;  ;  TGFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGFrame () override;  Destructor. ;  ; virtual void Activate (Bool_t);  ; void AddInput (UInt_t emask);  Add events specified in the emask to the events the frame should handle. ;  ; virtual void ChangeBackground (Pixel_t back);  Change frame background color. ;  ; virtual void ChangeOptions (UInt_t options);  Change frame options. Options is an OR of the EFrameTypes. ;  ; Bool_t Contains (Int_t x, Int_t y) const;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:2982,progress bar,progress bar,2982,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,rDialog.cxx. ◆ SetColors(). void TGColorPalette::SetColors ; (; Pixel_t ; colors[]). Set color entries in color samples. ; Definition at line 294 of file TGColorDialog.cxx. ◆ SetCurrentCellColor(). void TGColorPalette::SetCurrentCellColor ; (; Pixel_t ; color). Set current cell color. ; Definition at line 313 of file TGColorDialog.cxx. ◆ Streamer(). void TGColorPalette::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGColorPalette::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGColorDialog.h. Member Data Documentation. ◆ fCh. UInt_t TGColorPalette::fCh. protected . color cell height ; Definition at line 43 of file TGColorDialog.h. ◆ fCols. Int_t TGColorPalette::fCols. protected . number of color cell columns ; Definition at line 45 of file TGColorDialog.h. ◆ fCw. UInt_t TGColorPalette::fCw. protected . color cell width ; Definition at line 42 of file TGColorDialog.h. ◆ fCx. Int_t TGColorPalette::fCx. protected . x coordinate of currently selected color cell ; Definition at line 40 of file TGColorDialog.h. ◆ fCy. Int_t TGColorPalette::fCy. protected . y coordinate of currently selected color cell ; Definition at line 41 of file TGColorDialog.h. ◆ fDrawGC. TGGC TGColorPalette::fDrawGC. protected . graphics context used for drawing ; Definition at line 47 of file TGColorDialog.h. ◆ fPixels. Pixel_t* TGColorPalette::fPixels. protected . pixel value of colors ; Definition at line 46 of file TGColorDialog.h. ◆ fRows. Int_t TGColorPalette::fRows. protected . number of color cell rows ; Definition at line 44 of file TGColorDialog.h. Libraries for TGColorPalette:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGColorDialog.h; gui/gui/src/TGColorDialog.cxx. TGColorPalette. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPalette.html:35768,Guid,Guide,35768,doc/master/classTGColorPalette.html,https://root.cern,https://root.cern/doc/master/classTGColorPalette.html,1,['Guid'],['Guide']
Usability,"rEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1113 of file TUnfoldSys.cxx. ◆ GetEmatrixSysTau(). void TUnfoldSys::GetEmatrixSysTau ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance matrix contribution from error on regularisation parameter ; Parameters. [in,out]ematrixoutput histogram ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result from the assigned uncertainty on the parameter tau, see method SetTauError(). ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1176 of file TUnfoldSys.cxx. ◆ GetEmatrixSysUncorr(). void TUnfoldSys::GetEmatrixSysUncorr ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). Covariance contribution from uncorrelated uncertainties of the response matrix. ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]binMapmapping of histogram bins ; [in]clearEmatif true, ematrix is cleared prior to adding this covariance matrix contribution. This method propagates the uncertainties of the response matrix histogram, specified with the constructor, to the unfolding result. It is assumed that the entries of that histogram are bin-to-bin uncorrelated. In many cases this corresponds to the ""Monte Carlo statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 760 of file TUnfoldSys.cxx. ◆ GetEmatrixTotal(). void TUnfoldSys::GetEmatrixTotal ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr . ). Get total error matrix, summing up all contributions. ; Parameters. [out]ematrixhistogram which will be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:41800,clear,clearEmat,41800,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"rEntry; TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:84178,simpl,simple,84178,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['simpl'],['simple']
Usability,"rGradient::RegisterColor ; (; Color_t ; colorIndex). private . Register color. ; Definition at line 185 of file TColorGradient.cxx. ◆ ResetColor() [1/2]. void TColorGradient::ResetColor ; (; UInt_t ; nPoints, . const Double_t * ; points, . const Color_t * ; colorIndices . ). Reset color. ; Definition at line 72 of file TColorGradient.cxx. ◆ ResetColor() [2/2]. void TColorGradient::ResetColor ; (; UInt_t ; nPoints, . const Double_t * ; points, . const Double_t * ; colorIndices . ). Reset color. ; Definition at line 104 of file TColorGradient.cxx. ◆ SetColorAlpha(). void TColorGradient::SetColorAlpha ; (; UInt_t ; indx, . Double_t ; alpha . ). Change alpha parameter of the color. ; Definition at line 125 of file TColorGradient.cxx. ◆ SetCoordinateMode(). void TColorGradient::SetCoordinateMode ; (; ECoordinateMode ; mode). Set coordinate mode. ; Definition at line 145 of file TColorGradient.cxx. ◆ Streamer(). void TColorGradient::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TColor.; Reimplemented in TLinearGradient, and TRadialGradient. ◆ StreamerNVirtual(). void TColorGradient::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 94 of file TColorGradient.h. Member Data Documentation. ◆ fColorPositions. std::vector<Double_t> TColorGradient::fColorPositions. private . Definition at line 63 of file TColorGradient.h. ◆ fColors. std::vector<Double_t> TColorGradient::fColors. private . Definition at line 64 of file TColorGradient.h. ◆ fCoordinateMode. ECoordinateMode TColorGradient::fCoordinateMode = kObjectBoundingMode. private . Definition at line 67 of file TColorGradient.h. Libraries for TColorGradient:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TColorGradient.h; core/base/src/TColorGradient.cxx. TColorGradient. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorGradient.html:26363,Guid,Guide,26363,doc/master/classTColorGradient.html,https://root.cern,https://root.cern/doc/master/classTColorGradient.html,1,['Guid'],['Guide']
Usability,"rImp::SetBrowser ; (; TBrowser * ; b). inlinevirtual . Definition at line 68 of file TBrowserImp.h. ◆ SetDrawOption(). virtual void TBrowserImp::SetDrawOption ; (; Option_t * ; = """"). inlinevirtual . Reimplemented in TRootBrowserLite.; Definition at line 56 of file TBrowserImp.h. ◆ SetStatusText(). virtual void TBrowserImp::SetStatusText ; (; const char * ; , . Int_t ;  . ). inlinevirtual . Reimplemented in TRootBrowser, and TRootBrowserLite.; Definition at line 61 of file TBrowserImp.h. ◆ Show(). virtual void TBrowserImp::Show ; (; ). inlinevirtual . Reimplemented in ROOT::RWebBrowserImp, TGFileBrowser, TRootBrowser, and TRootBrowserLite.; Definition at line 55 of file TBrowserImp.h. ◆ StartEmbedding(). virtual void TBrowserImp::StartEmbedding ; (; Int_t ; , . Int_t ;  . ). inlinevirtual . Reimplemented in TRootBrowser.; Definition at line 62 of file TBrowserImp.h. ◆ StopEmbedding(). virtual void TBrowserImp::StopEmbedding ; (; const char * ; ). inlinevirtual . Reimplemented in TRootBrowser.; Definition at line 63 of file TBrowserImp.h. ◆ Streamer(). virtual void TBrowserImp::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TEveBrowser, TGFileBrowser, TRootBrowser, and TRootBrowserLite. ◆ StreamerNVirtual(). void TBrowserImp::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file TBrowserImp.h. Member Data Documentation. ◆ fBrowser. TBrowser* TBrowserImp::fBrowser {nullptr}. protected . TBrowser associated with this implementation. ; Definition at line 32 of file TBrowserImp.h. ◆ fShowCycles. Bool_t TBrowserImp::fShowCycles {kFALSE}. protected . Show object cycle numbers in browser. ; Definition at line 33 of file TBrowserImp.h. Libraries for TBrowserImp:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TBrowserImp.h; core/gui/src/TBrowserImp.cxx. TBrowserImp. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBrowserImp.html:9599,Guid,Guide,9599,doc/master/classTBrowserImp.html,https://root.cern,https://root.cern/doc/master/classTBrowserImp.html,1,['Guid'],['Guide']
Usability,"rJoinStyle = JoinRound. static . Definition at line 128 of file TGX11.cxx. ◆ gMarkerLineStyle. int gMarkerLineStyle = LineSolid. static . Definition at line 126 of file TGX11.cxx. ◆ gMarkerLineWidth. int gMarkerLineWidth = 0. static . Definition at line 125 of file TGX11.cxx. ◆ gMouseMask. ULong_t gMouseMask. static . Initial value:= ButtonPressMask | ButtonReleaseMask |; EnterWindowMask | LeaveWindowMask |; PointerMotionMask | KeyPressMask |; KeyReleaseMask. Definition at line 145 of file TGX11.cxx. ◆ gNullCursor. Cursor gNullCursor = 0. static . Definition at line 159 of file TGX11.cxx. ◆ gOut. FILE* gOut. static . Definition at line 3293 of file TGX11.cxx. ◆ gTextFont. XFontStruct* gTextFont. static . Definition at line 113 of file TGX11.cxx. ◆ gTws. XWindow_t* gTws. static . Definition at line 82 of file TGX11.cxx. ◆ gXimage. XImage* gXimage = nullptr. static . Definition at line 3294 of file TGX11.cxx. ◆ id. XFontStruct* id. Definition at line 109 of file TGX11.cxx. ◆ kBIGGEST_RGB_VALUE. const Int_t kBIGGEST_RGB_VALUE = 65535. Definition at line 84 of file TGX11.cxx. ◆ kMAXFONT. const Int_t kMAXFONT = 4. Definition at line 107 of file TGX11.cxx. ◆ kMAXGC. const int kMAXGC = 7. Definition at line 89 of file TGX11.cxx. ◆ kMAXMK. const Int_t kMAXMK = 100. Definition at line 119 of file TGX11.cxx. ◆ n. int n. Definition at line 122 of file TGX11.cxx. ◆ name. char name[80]. Definition at line 110 of file TGX11.cxx. ◆ null_cursor_bits. const char null_cursor_bits[]. Initial value:= {; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}. Definition at line 155 of file TGX11.cxx. ◆ type. int type. Definition at line 121 of file TGX11.cxx. ◆ xy. XPoint xy[kMAXMK]. Definition at line 123 of file TGX11.cxx. graf2dx11srcTGX11.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx.html:12135,Guid,Guide,12135,doc/master/TGX11_8cxx.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx.html,1,['Guid'],['Guide']
Usability,rLo. double RooTreeDataStore::_curWgtErrLo = 0.0. mutableprivate . Weight of current event. ; Definition at line 175 of file RooTreeDataStore.h. ◆ _defCtor. bool RooTreeDataStore::_defCtor = false. mutableprivate . Object owning cache contents. ; Definition at line 163 of file RooTreeDataStore.h. ◆ _defTreeBufSize. Int_t RooTreeDataStore::_defTreeBufSize = 10*1024*1024. staticprivate . Definition at line 157 of file RooTreeDataStore.h. ◆ _extSumW2Array. const double* RooTreeDataStore::_extSumW2Array {nullptr}. private . ! External sum of weights array ; Definition at line 171 of file RooTreeDataStore.h. ◆ _extWgtArray. const double* RooTreeDataStore::_extWgtArray {nullptr}. private . ! External weight array ; Definition at line 168 of file RooTreeDataStore.h. ◆ _extWgtErrHiArray. const double* RooTreeDataStore::_extWgtErrHiArray {nullptr}. private . ! External weight array - high error ; Definition at line 170 of file RooTreeDataStore.h. ◆ _extWgtErrLoArray. const double* RooTreeDataStore::_extWgtErrLoArray {nullptr}. private . ! External weight array - low error ; Definition at line 169 of file RooTreeDataStore.h. ◆ _tree. TTree* RooTreeDataStore::_tree = nullptr. private . Definition at line 160 of file RooTreeDataStore.h. ◆ _varsww. RooArgSet RooTreeDataStore::_varsww. private . Was object constructed with default ctor? ; Definition at line 165 of file RooTreeDataStore.h. ◆ _weightBuffer. std::unique_ptr<std::vector<double> > RooTreeDataStore::_weightBuffer. mutableprivate . Definition at line 172 of file RooTreeDataStore.h. ◆ _wgtVar. RooRealVar* RooTreeDataStore::_wgtVar = nullptr. private . Definition at line 166 of file RooTreeDataStore.h. Libraries for RooTreeDataStore:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooTreeDataStore.h; roofit/roofitcore/src/RooTreeDataStore.cxx. RooTreeDataStore. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:42888,Guid,Guide,42888,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['Guid'],['Guide']
Usability,rLowPtr = nullptr;; 672 ; 673 fDataError.clear();; 674 fDataErrorPtr = nullptr;; 675 ; 676 return;; 677 }; 678 ; 679 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 680 {; 681 fCoordErrorsPtr.resize( fDim );; 682 fCoordErrors.resize( fDim );; 683 for( unsigned int i=0; i < fDim; i++ ); 684 {; 685 fCoordErrors[i].resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 686 ; 687 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ; 703 fDataErrorHigh.clear();; 704 fDataErrorHighPtr = nullptr;; 705 fDataErrorLow.clear();; 706 fDataErrorLowPtr = nullptr;; 707 }; 708 else if ( fErrorType == kAsymError ); 709 {; 710 fDataErrorHigh.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 711 fDataErrorHighPtr = fDataErrorHigh.empty() ? nullptr : &fDataErrorHigh.front();; 712 ; 713 fDataErrorLow.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 714 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 715 ; 716 fDataError.clear();; 717 fDataErrorPtr = nullptr;; 718 }; 719 else; 720 {; 721 assert(false);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<fDim; i++ ); 730 {; 731 fBinEdge[i].reserve(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 732 }; 733 ; 734 if ( fpTmpBinEdgeVector ); 735 {; 736 delete[] fpTmpBinEdgeVector;; 737 fpTmpBinEdgeVector = nullptr;; 738 }; 739 ; 740 fpTmpBinEdgeVector = new double[ fDim ];; 741 }; 742 ; 743 void BinData::UnWrap( ); 744 {; 745 assert( fWrapped );; 746 assert( kValueError == fErrorType || kCoordError == ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:21528,clear,clear,21528,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"rMap.hxx. ◆ AddValue() [4/6]. RAttrMap & ROOT::Experimental::RAttrMap::AddValue ; (; const std::string & ; name, . const std::string & ; value . ). inline . Definition at line 168 of file RAttrMap.hxx. ◆ AddValue() [5/6]. RAttrMap & ROOT::Experimental::RAttrMap::AddValue ; (; const std::string & ; name, . double ; value . ). inline . Definition at line 167 of file RAttrMap.hxx. ◆ AddValue() [6/6]. RAttrMap & ROOT::Experimental::RAttrMap::AddValue ; (; const std::string & ; name, . int ; value . ). inline . Definition at line 166 of file RAttrMap.hxx. ◆ begin(). auto ROOT::Experimental::RAttrMap::begin ; (; ); const. inline . Definition at line 202 of file RAttrMap.hxx. ◆ Change(). bool RAttrMap::Change ; (; const std::string & ; name, . Value_t * ; value = nullptr . ). Change attribute using string value and kind Used to change attributes from JS side Returns true if value was really changed. ; Definition at line 137 of file RAttrMap.cxx. ◆ Clear(). void ROOT::Experimental::RAttrMap::Clear ; (; const std::string & ; name). inline . Clear specified attribute. ; Definition at line 193 of file RAttrMap.hxx. ◆ end(). auto ROOT::Experimental::RAttrMap::end ; (; ); const. inline . Definition at line 203 of file RAttrMap.hxx. ◆ Find(). const Value_t * ROOT::Experimental::RAttrMap::Find ; (; const std::string & ; name); const. inline . Definition at line 186 of file RAttrMap.hxx. ◆ operator=(). RAttrMap & ROOT::Experimental::RAttrMap::operator= ; (; const RAttrMap & ; src). inline . Definition at line 178 of file RAttrMap.hxx. Friends And Related Symbol Documentation. ◆ RAttrBase. friend class RAttrBase. friend . Definition at line 35 of file RAttrMap.hxx. ◆ RStyle. friend class RStyle. friend . Definition at line 36 of file RAttrMap.hxx. Member Data Documentation. ◆ m. std::unordered_map<std::string, std::unique_ptr<Value_t> > ROOT::Experimental::RAttrMap::m. private . JSON_object. ; Definition at line 133 of file RAttrMap.hxx. Libraries for ROOT::Experimental::RAttrMap:. [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html:6802,Clear,Clear,6802,doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,1,['Clear'],['Clear']
Usability,"rNVirtual_b). inline . Definition at line 111 of file ParamHistFunc.h. ◆ translate(). void ParamHistFunc::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overrideprotectedvirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 563 of file ParamHistFunc.cxx. Member Data Documentation. ◆ _dataSet. RooDataHist ParamHistFunc::_dataSet. mutableprotected . Definition at line 98 of file ParamHistFunc.h. ◆ _dataVars. RooListProxy ParamHistFunc::_dataVars. protected . The RooRealVars. ; Definition at line 82 of file ParamHistFunc.h. ◆ _normIntMgr. RooObjCacheManager ParamHistFunc::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 80 of file ParamHistFunc.h. ◆ _numBins. Int_t ParamHistFunc::_numBins = 0. protected . Definition at line 85 of file ParamHistFunc.h. ◆ _numBinsPerDim. NumBins ParamHistFunc::_numBinsPerDim. mutableprotected . Definition at line 97 of file ParamHistFunc.h. ◆ _paramSet. RooListProxy ParamHistFunc::_paramSet. protected . interpolation parameters ; Definition at line 83 of file ParamHistFunc.h. Libraries for ParamHistFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/histfactory/inc/RooStats/HistFactory/ParamHistFunc.h; roofit/histfactory/src/ParamHistFunc.cxx. ParamHistFunc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:75060,Guid,Guide,75060,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,1,['Guid'],['Guide']
Usability,"rNVirtual_b);  ; bool VerifyRecursiveRemove (const char *classname);  ; bool VerifyRecursiveRemove (TClass &classRef);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html:2775,Clear,Clear,2775,doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TCheckHashRecursiveRemoveConsistency.html,1,['Clear'],['Clear']
Usability,"rName; unsigned shortfPat[25][1024]array of patterns; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobalFuncs; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpNamespacesContains the names of namespaces registered in CINT.; TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far. void ClearGlobals(); Forget all global variables seen so far. void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Return the list of classes. const TSeqCollection * GetListOfCppDirectives(); Return the list of CPP directives. const TSeqCollection * GetListOfFilesInPath(const char* path); ""path"" should be initiali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:7233,Clear,ClearGlobals,7233,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,4,['Clear'],['ClearGlobals']
Usability,"rOneDimOptions&operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name = 0, ostream& os = std::cout); doubleROOT::Math::BaseIntegratorOptions::RelTolerance() const; voidROOT::Math::BaseIntegratorOptions::SetAbsTolerance(double tol); static voidSetDefaultAbsTolerance(double tol); static voidSetDefaultIntegrator(const char* name); static voidSetDefaultNPoints(unsigned int n); static voidSetDefaultRelTolerance(double tol); static voidSetDefaultWKSize(unsigned int size); voidROOT::Math::BaseIntegratorOptions::SetExtraOptions(const ROOT::Math::IOptions& opt); voidSetIntegrator(const char* name); voidSetNPoints(unsigned int n); voidROOT::Math::BaseIntegratorOptions::SetRelTolerance(double tol); voidROOT::Math::BaseIntegratorOptions::SetWKSize(unsigned int size); unsigned intROOT::Math::BaseIntegratorOptions::WKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions(); voidROOT::Math::BaseIntegratorOptions::ClearExtra(). Data Members; protected:. doubleROOT::Math::BaseIntegratorOptions::fAbsToleranceabsolute tolerance; ROOT::Math::IOptions*ROOT::Math::BaseIntegratorOptions::fExtraOptionsextra options; intROOT::Math::BaseIntegratorOptions::fIntegTypeIntegrator type (value converted from enum); unsigned intROOT::Math::BaseIntegratorOptions::fNCalls(max) funxtion calls; doubleROOT::Math::BaseIntegratorOptions::fRelTolerancerelative tolerance; unsigned intROOT::Math::BaseIntegratorOptions::fWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::IntegratorOneDimOptions& rhs); assignment operators. std::string Integrator() const; name of 1D integrator. IntegratorOneDimOptions(IOptions * extraOpts = 0); constructor using the default options; can pass a pointer to extra options (N.B. pointer will be managed by the class). virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html:2670,Clear,ClearExtra,2670,root/html602/ROOT__Math__IntegratorOneDimOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDimOptions.html,2,['Clear'],['ClearExtra']
Usability,"rSettingsinline; fLowerLimitROOT::Fit::ParameterSettingsprivate; fNameROOT::Fit::ParameterSettingsprivate; fStepSizeROOT::Fit::ParameterSettingsprivate; fUpperLimitROOT::Fit::ParameterSettingsprivate; fValueROOT::Fit::ParameterSettingsprivate; HasLowerLimit() constROOT::Fit::ParameterSettingsinline; HasUpperLimit() constROOT::Fit::ParameterSettingsinline; IsBound() constROOT::Fit::ParameterSettingsinline; IsDoubleBound() constROOT::Fit::ParameterSettingsinline; IsFixed() constROOT::Fit::ParameterSettingsinline; LowerLimit() constROOT::Fit::ParameterSettingsinline; Name() constROOT::Fit::ParameterSettingsinline; ParameterSettings()ROOT::Fit::ParameterSettingsinline; ParameterSettings(const std::string &name, double val, double err)ROOT::Fit::ParameterSettingsinline; ParameterSettings(const std::string &name, double val, double err, double min, double max)ROOT::Fit::ParameterSettingsinline; ParameterSettings(const std::string &name, double val)ROOT::Fit::ParameterSettingsinline; Release()ROOT::Fit::ParameterSettingsinline; RemoveLimits()ROOT::Fit::ParameterSettingsinline; Set(const std::string &name, double value, double step)ROOT::Fit::ParameterSettingsinline; Set(const std::string &name, double value, double step, double lower, double upper)ROOT::Fit::ParameterSettingsinline; Set(const std::string &name, double value)ROOT::Fit::ParameterSettingsinline; SetLimits(double low, double up)ROOT::Fit::ParameterSettings; SetLowerLimit(double low)ROOT::Fit::ParameterSettingsinline; SetName(const std::string &name)ROOT::Fit::ParameterSettingsinline; SetStepSize(double err)ROOT::Fit::ParameterSettingsinline; SetUpperLimit(double up)ROOT::Fit::ParameterSettingsinline; SetValue(double val)ROOT::Fit::ParameterSettingsinline; StepSize() constROOT::Fit::ParameterSettingsinline; UpperLimit() constROOT::Fit::ParameterSettingsinline; Value() constROOT::Fit::ParameterSettingsinline. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings-members.html:2335,Guid,Guide,2335,doc/master/classROOT_1_1Fit_1_1ParameterSettings-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1ParameterSettings-members.html,1,['Guid'],['Guide']
Usability,"rT<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t ind); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id: TVectorT.h 30125 2009-09-14 05:03:58Z brun $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_float_.html:18318,Clear,Clear,18318,root/html528/TVectorT_float_.html,https://root.cern,https://root.cern/root/html528/TVectorT_float_.html,1,['Clear'],['Clear']
Usability,"rTarget.; Definition at line 76 of file GeneticMinimizer.cxx. ◆ Evaluate(). Double_t ROOT::Math::MultiGenFunctionFitness::Evaluate ; (; const std::vector< double > & ; factors); const. inline . Definition at line 71 of file GeneticMinimizer.cxx. ◆ FixParameter(). void ROOT::Math::MultiGenFunctionFitness::FixParameter ; (; unsigned int ; ipar, . double ; value, . bool ; fix = true . ). inline . Definition at line 36 of file GeneticMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::MultiGenFunctionFitness::NCalls ; (; ); const. inline . Definition at line 31 of file GeneticMinimizer.cxx. ◆ NDims(). unsigned int ROOT::Math::MultiGenFunctionFitness::NDims ; (; ); const. inline . Definition at line 32 of file GeneticMinimizer.cxx. ◆ NTotal(). unsigned int ROOT::Math::MultiGenFunctionFitness::NTotal ; (; ); const. inline . Definition at line 34 of file GeneticMinimizer.cxx. ◆ Transform(). const std::vector< double > & ROOT::Math::MultiGenFunctionFitness::Transform ; (; const std::vector< double > & ; factors); const. inline . Definition at line 55 of file GeneticMinimizer.cxx. Member Data Documentation. ◆ fFixedParFlag. std::vector<int> ROOT::Math::MultiGenFunctionFitness::fFixedParFlag. private . Definition at line 23 of file GeneticMinimizer.cxx. ◆ fFunc. const ROOT::Math::IMultiGenFunction& ROOT::Math::MultiGenFunctionFitness::fFunc. private . Definition at line 22 of file GeneticMinimizer.cxx. ◆ fNCalls. unsigned int ROOT::Math::MultiGenFunctionFitness::fNCalls. private . Definition at line 20 of file GeneticMinimizer.cxx. ◆ fNFree. unsigned int ROOT::Math::MultiGenFunctionFitness::fNFree. private . Definition at line 21 of file GeneticMinimizer.cxx. ◆ fValues. std::vector<double> ROOT::Math::MultiGenFunctionFitness::fValues. mutableprivate . Definition at line 24 of file GeneticMinimizer.cxx. math/genetic/src/GeneticMinimizer.cxx. ROOTMathMultiGenFunctionFitness. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiGenFunctionFitness.html:4133,Guid,Guide,4133,doc/master/classROOT_1_1Math_1_1MultiGenFunctionFitness.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiGenFunctionFitness.html,1,['Guid'],['Guide']
Usability,"r_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSBRepeatTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSBRepeatTimer(). TSBRepeatTimer::TSBRepeatTimer ; (; TGScrollBar * ; s, . Long_t ; ms, . Int_t ; inc . ). inline . Definition at line 78 of file TGScrollBar.cxx. Member Function Documentation. ◆ GetSmallInc(). Int_t TSBRepeatTimer::GetSmallInc ; (; ); const. inline . Definition at line 82 of file TGScrollBar.cxx. ◆ Notify(). Bool_t TSBRepeatTimer::Notify ; (; ). overridevirtual . Notify when timer times out and reset the timer. ; Implements TSysEvtHandler.; Definition at line 88 of file TGScrollBar.cxx. Member Data Documentation. ◆ fScrollBar. TGScrollBar* TSBRepeatTimer::fScrollBar. private . Definition at line 75 of file TGScrollBar.cxx. ◆ fSmallInc. Int_t TSBRepeatTimer::fSmallInc. private . Definition at line 76 of file TGScrollBar.cxx. gui/gui/src/TGScrollBar.cxx. TSBRepeatTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSBRepeatTimer.html:18174,Guid,Guide,18174,doc/master/classTSBRepeatTimer.html,https://root.cern,https://root.cern/doc/master/classTSBRepeatTimer.html,1,['Guid'],['Guide']
Usability,"r_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t wid, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t wid, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t wid, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ;  ; void ClearAreaAux (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h);  ; void ClearWindow () override;  Clears the entire area of the current window. ;  ; void ClearWindow (Window_t wid) override;  Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; void CloseDisplay () override;  Closes connection to display server and destroys all windows. ;  ; void ClosePixmap () override;  Deletes current pixmap. ;  ; void CloseWindow () override;  Deletes current window. ;  ; void CocoaDrawOFF ();  ; void CocoaDrawON ();  ; void ConvertPrimarySelection (Window_t wid, Atom_t clipboard, Time_t when) override;  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dst, GContext_t gc, Int_t srcX, Int_t srcY, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY) override;  Combines ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:2933,Clear,ClearAreaAux,2933,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,6,['Clear'],"['ClearAreaAux', 'ClearWindow', 'Clears']"
Usability,"r_t GetFeatures() constDefinition TIOFeatures.cxx:250; ROOT::TIOFeatures::TIOFeaturesTIOFeatures(UChar_t IOBits)Definition TIOFeatures.hxx:96; ROOT::TIOFeatures::Testbool Test(Experimental::EIOUnsupportedFeatures bits) const; ROOT::TIOFeatures::Printvoid Print() constPrint a human-readable representation of the TIOFeatures to stdout.Definition TIOFeatures.cxx:197; ROOT::TIOFeatures::TIOFeaturesTIOFeatures()Definition TIOFeatures.hxx:75; ROOT::TIOFeatures::Setbool Set(EIOFeatures bits)Set a specific IO feature.Definition TIOFeatures.cxx:139; ROOT::TIOFeatures::Testbool Test(EIOFeatures bits) constTest to see if a given feature is set.Definition TIOFeatures.cxx:239; ROOT::TIOFeatures::Clearvoid Clear(EIOFeatures bits)Clear a specific IO feature from this set.Definition TIOFeatures.cxx:80; ROOT::TIOFeatures::kIOFeatureCountstatic constexpr int kIOFeatureCountDefinition TIOFeatures.hxx:89; ROOT::TIOFeatures::fIOBitsUChar_t fIOBitsDefinition TIOFeatures.hxx:100; ROOT::TIOFeatures::Setvoid Set(UChar_t newBits)Definition TIOFeatures.hxx:98; TBasketManages buffers for branches of a Tree.Definition TBasket.h:34; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Experimental::EIOFeaturesEIOFeaturesDefinition TIOFeatures.hxx:52; ROOT::Experimental::EIOFeatures::kGenerateOffsetMap@ kGenerateOffsetMap; ROOT::Experimental::EIOFeatures::kSupported@ kSupported; ROOT::Experimental::EIOUnsupportedFeaturesEIOUnsupportedFeaturesDefinition TIOFeatures.hxx:61; ROOT::Experimental::EIOUnsupportedFeatures::kUnsupported@ kUnsupported; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EIOFeaturesEIOFeaturesDefinition TIOFeatures.hxx:39; ROOT::EIOFeatures::kSupported@ kSupported. treetreeincROOTTIOFeatures.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TIOFeatures_8hxx_source.html:5972,Guid,Guide,5972,doc/v632/TIOFeatures_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/TIOFeatures_8hxx_source.html,1,['Guid'],['Guide']
Usability,"r_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Create a gVirtualX Pixmap. void ClearDrawable(); Clear the current gVirtualX window. void CopyDrawable(Int_t id, Int_t px, Int_t py); Copy a gVirtualX pixmap. void DestroyDrawable(); Close the current gVirtualX pixmap. void SelectDrawable(Int_t device); Select the window in which the graphics will go. void DrawPixels(const unsigned char* pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableBlending); Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Paint a simple line. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2); Paint a simple line in normalized coordinates. void DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, TVirtualPadPainter::EBoxMode mode); Paint a simple box. void DrawFillArea(Int_t n, const Double_t* x, const Double_t* y); Paint filled area. void DrawFillArea(Int_t n, const Float_t* x, const Float_t* y); Paint filled area. void DrawPolyLine(Int_t n, const Double_t* x, const Double_t* y). void DrawPolyLine(Int_t n, const Float_t* x, const Float_t* y); Paint polyline. void DrawPolyLineNDC(Int_t n, const Double_t* u, const Double_t* v); Paint polyline in normalized coordinates. void DrawPolyMarker(Int_t n, const Double_t* x, const Double_t* y); Paint polymarker. void DrawPolyMarker(Int_t n, const Float_t* x, const Float_t* y); Paint polymarker. void DrawText(Double_t x, Double_t y, const char* text, TVirtualPadPainter::ETextMode mode); Paint text. void DrawText(Double_t x, Double_t y, const wchar_t* text, TVirtualPadPainter::ETextMode mode); That's a special version working with wchar_t and required by TMathText (who uses utf-8(?)). void DrawTextNDC(Double_t u, Double_t v, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPadPainter.html:5896,simpl,simple,5896,root/html534/TPadPainter.html,https://root.cern,https://root.cern/root/html534/TPadPainter.html,1,['simpl'],['simple']
Usability,"r_t, DeepNet_t>>(; 1358 new DNN::TSGD<Architecture_t, Layer_t, DeepNet_t>(settings.learningRate, deepNet, settings.momentum));; 1359 break;; 1360 ; 1361 case EOptimizer::kAdam: {; 1362 optimizer = std::unique_ptr<DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>>(; 1363 new DNN::TAdam<Architecture_t, Layer_t, DeepNet_t>(; 1364 deepNet, settings.learningRate, settings.optimizerParams[""ADAM_beta1""],; 1365 settings.optimizerParams[""ADAM_beta2""], settings.optimizerParams[""ADAM_eps""]));; 1366 break;; 1367 }; 1368 ; 1369 case EOptimizer::kAdagrad:; 1370 optimizer = std::unique_ptr<DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>>(; 1371 new DNN::TAdagrad<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1372 settings.optimizerParams[""ADAGRAD_eps""]));; 1373 break;; 1374 ; 1375 case EOptimizer::kRMSProp:; 1376 optimizer = std::unique_ptr<DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>>(; 1377 new DNN::TRMSProp<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate, settings.momentum,; 1378 settings.optimizerParams[""RMSPROP_rho""],; 1379 settings.optimizerParams[""RMSPROP_eps""]));; 1380 break;; 1381 ; 1382 case EOptimizer::kAdadelta:; 1383 optimizer = std::unique_ptr<DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>>(; 1384 new DNN::TAdadelta<Architecture_t, Layer_t, DeepNet_t>(deepNet, settings.learningRate,; 1385 settings.optimizerParams[""ADADELTA_rho""],; 1386 settings.optimizerParams[""ADADELTA_eps""]));; 1387 break;; 1388 }; 1389 ; 1390 ; 1391 // Initialize the vector of batches, one batch for one slave network; 1392 std::vector<TTensorBatch<Architecture_t>> batches{};; 1393 ; 1394 bool converged = false;; 1395 size_t convergenceCount = 0;; 1396 size_t batchesInEpoch = nTrainingSamples / deepNet.GetBatchSize();; 1397 ; 1398 // start measuring; 1399 std::chrono::time_point<std::chrono::system_clock> tstart, tend;; 1400 tstart = std::chrono::system_clock::now();; 1401 ; 1402 // function building string with optimizer parameters values for logging",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:54655,learn,learningRate,54655,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learningRate']
Usability,"rac * bkg1 + [%] * bkg2 ] = 0.16539/1 ""Signal""; 3) 0x7ffcf3631230 RooChebychev:: bkg1[ x=x coefficients=(a0,a1) ] = 0.8 ""Background 1""; 4) 0x7ffcf3631760 RooExponential:: bkg2[ x=x c=alpha ] = 0.00673795 ""Background 2""; 5) 0x7ffcf36337b0 RooGaussian:: sig[ x=x mean=mean sigma=sigma ] = 1 ""Signal component 1""; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:ObjectHandling -- RooCustomizer::build(model): tree node sig will be replaced by sigsum; [#1] INFO:ObjectHandling -- RooCustomizer::build(model) Branch node RooAddPdf::model cloned: depends on a replaced parameter; [#1] INFO:ObjectHandling -- RooCustomizer::build(model) Branch node sig is already replaced; 0x55dc4fd6a940 RooAddPdf::model_cust = 0.582695/1 [Auto,Clean] ; 0x7ffcf3633d08/V- RooAddPdf::bkg = 0.16539/1 [Auto,Clean] ; 0x7ffcf3631230/V- RooChebychev::bkg1 = 0.8 [Auto,Dirty] ; 0x7ffcf3635ea0/V- RooRealVar::x = 5; 0x7ffcf3632040/V- RooRealVar::a0 = 0.5; 0x7ffcf3632428/V- RooRealVar::a1 = 0.2; 0x7ffcf3632bf8/V- RooRealVar::bkg1frac = 0.2; 0x7ffcf3631760/V- RooExponential::bkg2 = 0.00673795 [Auto,Dirty] ; 0x7ffcf3635ea0/V- RooRealVar::x = 5; 0x7ffcf3632810/V- RooRealVar::alpha = -1; 0x7ffcf3632fe0/V- RooRealVar::bkgfrac = 0.5; 0x7ffcf3636288/V- RooAddPdf::sigsum = 1/1 [Auto,Clean] ; 0x7ffcf36337b0/V- RooGaussian::sig = 1 [Auto,Dirty] ; 0x7ffcf3635ea0/V- RooRealVar::x = 5; 0x7ffcf3634428/V- RooRealVar::mean = 5; 0x7ffcf3631c58/V- RooRealVar::sigma = 0.5; 0x7ffcf3634bf8/V- RooRealVar::sig1frac = 0.8; 0x7ffcf3635948/V- RooGaussian::sig2 = 1 [Auto,Dirty] ; 0x7ffcf3635ea0/V- RooRealVar::x = 5; 0x7ffcf3634428/V- RooRealVar::mean = 5; 0x7ffcf3634810/V- RooRealVar::sigma2 = 1; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf207_comptools.C. tutorialsroofitrf207_comptools.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf207__comptools_8C.html:9219,Guid,Guide,9219,doc/master/rf207__comptools_8C.html,https://root.cern,https://root.cern/doc/master/rf207__comptools_8C.html,1,['Guid'],['Guide']
Usability,racy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Training => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; Validation => accuracy: 1.0; AuthorDante Niewenhuis ; Definition in file RBatchGenerator_PyTorch.py. tutorialstmvaRBatchGenerator_PyTorch.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBatchGenerator__PyTorch_8py.html:5259,Guid,Guide,5259,doc/master/RBatchGenerator__PyTorch_8py.html,https://root.cern,https://root.cern/doc/master/RBatchGenerator__PyTorch_8py.html,1,['Guid'],['Guide']
Usability,"raining dataset.; Those events will be used for the minimization.; Note that the tree must be already defined. void SetTestDataSet(const char* test); Sets the Test dataset.; Those events will not be used for the minimization but for control.; Note that the tree must be already defined. void SetLearningMethod(TMultiLayerPerceptron::ELearningMethod method); Sets the learning method.; Available methods are: kStochastic, kBatch,; kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; (look at the constructor for the complete description; of learning methods and parameters). void SetEta(Double_t eta); Sets Eta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEpsilon(Double_t eps); Sets Epsilon - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetDelta(Double_t delta); Sets Delta - used in stochastic minimisation; (look at the constructor for the complete description; of learning methods and parameters). void SetEtaDecay(Double_t ed); Sets EtaDecay - Eta *= EtaDecay at each epoch; (look at the constructor for the complete description; of learning methods and parameters). void SetTau(Double_t tau); Sets Tau - used in line search; (look at the constructor for the complete description; of learning methods and parameters). void SetReset(Int_t reset); Sets number of epochs between two resets of the; search direction to the steepest descent.; (look at the constructor for the complete description; of learning methods and parameters). void GetEntry(Int_t ) const; Load an entry into the network. void Train(Int_t nEpoch, Option_t* option = ""text"", Double_t minE = 0); Train the network.; nEpoch is the number of iterations.; option can contain:; - ""text"" (simple text output); - ""graph"" (evoluting graphical training curves); - ""update=X"" (step for the text/graph output update); - ""+"" will skip the randomisation and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:24112,learn,learning,24112,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['learn'],['learning']
Usability,"raining strategy we add now:; ; - Type of Loss function (e.g. CROSSENTROPY); - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); - Variable Transformation; - Type of Architecture (e.g. CPU, GPU, Standard); ; We can then book the DL method using the built option string; ; ***/; ; if (useDL) {; ; bool useDLGPU = false;; #ifdef R__HAS_TMVAGPU; useDLGPU = true;; #endif; ; // Define DNN layout; TString inputLayoutString = ""InputLayout=1|1|7"";; TString batchLayoutString= ""BatchLayout=1|128|7"";; TString layoutString (""Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR"");; // Define Training strategies; // one can catenate several training strategies; TString training1(""LearningRate=1e-3,Momentum=0.9,""; ""ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,""; ""MaxEpochs=30,WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,"" // ADAM default parameters; ""DropConfig=0.0+0.0+0.0+0."");; // TString training2(""LearningRate=1e-3,Momentum=0.9""; // ""ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,""; // ""MaxEpochs=20,WeightDecay=1e-4,Regularization=None,""; // ""Optimizer=SGD,DropConfig=0.0+0.0+0.0+0."");; ; TString trainingStrategyString (""TrainingStrategy="");; trainingStrategyString += training1; // + ""|"" + training2;; ; // General Options.; ; TString dnnOptions (""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:""; ""WeightInitialization=XAVIER"");; dnnOptions.Append ("":""); dnnOptions.Append (inputLayoutString);; dnnOptions.Append ("":""); dnnOptions.Append (batchLayoutString);; dnnOptions.Append ("":""); dnnOptions.Append (layoutString);; dnnOptions.Append ("":""); dnnOptions.Append (trainingStrategyString);; ; TString dnnMethodName = ""DNN_CPU"";; if (useDLGPU) {; dnnOptions += "":Architecture=GPU"";; dnnMethodName = ""DNN_GPU"";; } else {; dnnOptions += "":Architecture=CPU"";; }; ; factory.BookMethod(loader, TMVA::Types::kDL, dnnMethodName, dnnOptions);; }; ; // Keras deep learning; if (useKeras) {; ; Info(""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:66318,Learn,LearningRate,66318,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"ram for TGUnknownWindowHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGUnknownWindowHandler(). TGUnknownWindowHandler::TGUnknownWindowHandler ; (; ). inline . Definition at line 144 of file TGWindow.h. ◆ ~TGUnknownWindowHandler(). TGUnknownWindowHandler::~TGUnknownWindowHandler ; (; ). inlineoverride . Definition at line 145 of file TGWindow.h. Member Function Documentation. ◆ Class(). static TClass * TGUnknownWindowHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGUnknownWindowHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGUnknownWindowHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 149 of file TGWindow.h. ◆ DeclFileName(). static const char * TGUnknownWindowHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 149 of file TGWindow.h. ◆ HandleEvent(). virtual Bool_t TGUnknownWindowHandler::HandleEvent ; (; Event_t * ; ). pure virtual . ◆ IsA(). TClass * TGUnknownWindowHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 149 of file TGWindow.h. ◆ Streamer(). void TGUnknownWindowHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGUnknownWindowHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 149 of file TGWindow.h. Libraries for TGUnknownWindowHandler:. [legend]; The documentation for this class was generated from the following file:; gui/gui/inc/TGWindow.h. TGUnknownWindowHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUnknownWindowHandler.html:11971,Guid,Guide,11971,doc/master/classTGUnknownWindowHandler.html,https://root.cern,https://root.cern/doc/master/classTGUnknownWindowHandler.html,1,['Guid'],['Guide']
Usability,"ram for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  box.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 boxes in it (RBox) ;  concurrentfill.cxx;  draw.cxx;  draw_mt.cxxThis macro demonstrate usage of ROOT7 graphics from many threads Three different canvases in three different threads are started and regularly updated ;  draw_rh1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_subpads.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 lines in it (RLine) ;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:172005,simpl,simple,172005,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,ram name text entry; 132 TGCheckButton *fBarH; ///< Checked for drawing current histogram with different graphic option; 133 TGCheckButton *fBarScan; ///< Checked for tree scan; 134 TGCheckButton *fBarRec; ///< Command recording toggle; 135 TGTextEntry *fBarCommand; ///< User command entry; 136 TGTextEntry *fBarOption; ///< Histogram drawing option entry; 137 TGTextEntry *fBarHist; ///< Histogram name entry; 138///@}; 139 ; 140///@{; 141/// @name Frames; 142 TGHorizontalFrame *fHf; ///< Main horizontal frame; 143 TGDoubleVSlider *fSlider; ///< Vertical slider to select processed tree entries;; 144 TGVerticalFrame *fV1; ///< List tree mother; 145 TGVerticalFrame *fV2; ///< List view mother; 146 TGCompositeFrame *fTreeHdr; ///< Header for list tree; 147 TGCompositeFrame *fListHdr; ///< Header for list view; 148 TGLabel *fLbl1; ///< Label for list tree; 149 TGLabel *fLbl2; ///< Label for list view; 150 TGHorizontalFrame *fBFrame; ///< Button frame; 151 TGHorizontalFrame *fHpb; ///< Progress bar frame; 152 TGHProgressBar *fProgressBar; ///< Progress bar; 153 TGLabel *fBLbl4; ///< Label for input list entry; 154 TGLabel *fBLbl5; ///< Label for output list entry; 155 TGTextEntry *fBarListIn; ///< Tree input event list name entry; 156 TGTextEntry *fBarListOut; ///< Pree output event list name entry; 157 TGPictureButton *fDRAW; ///< DRAW button; 158 TGTextButton *fSPIDER; ///< SPIDER button; 159 TGPictureButton *fSTOP; ///< Interrupt current command (not yet); 160 TGPictureButton *fREFR; ///< REFRESH button ///<ia; 161 TGStatusBar *fStatusBar; ///< Status bar; 162 TGComboBox *fCombo; ///< Combo box with session records; 163 TGPictureButton *fBGFirst;; 164 TGPictureButton *fBGPrevious;; 165 TGPictureButton *fBGRecord;; 166 TGPictureButton *fBGNext;; 167 TGPictureButton *fBGLast;; 168 TGTextButton *fReset; ///< clear expression's entries; 169///@}; 170 ; 171///@{; 172/// @name ListTree; 173 TGCanvas *fTreeView; ///< ListTree canvas container; 174 TGListTree *fLt; ///< ListTree,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8h_source.html:5298,Progress bar,Progress bar,5298,doc/master/TTreeViewer_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8h_source.html,1,['Progress bar'],['Progress bar']
Usability,"ram's number of entries. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  ; virtual void SetBinContent (Long64_t bin, Double_t v)=0;  ; void SetBinEdges (Int_t idim, const Double_t *bins);  Set the axis # of bins and bin limits on dimension idim. ;  ; void SetBinError (const Int_t *idx, Double_t e);  ; void SetBinError (Long64_t bin, Double_t e);  ; virtual void SetBinError2 (Long64_t bin, Double_t e2)=0;  ; void SetEntries (Double_t entries);  ; void SetTitle (const char *title) override;  Change (i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 ()=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnBase.html:6969,Clear,Clear,6969,doc/master/classTHnBase.html,https://root.cern,https://root.cern/doc/master/classTHnBase.html,1,['Clear'],['Clear']
Usability,"ram.frame(100,-10,10) ; mcstudy.paramOn(frame,LineStyle(kDashed)) ;; Any named arguments passed to plotParamOn() are forwarded to the underlying plotOn() call. PyROOT; The RooMCStudy::plotParamOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArg of the function. . Definition at line 884 of file RooMCStudy.cxx. ◆ plotPull() [1/2]. RooMCStudy::plotPull ; (; const RooRealVar & ; param, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Plot the distribution of pull values for the specified parameter on a newly created frame. ; If asymmetric errors are calculated in the fit (by MINOS) those will be used in the pull calculation.; If the parameters of the models for generation and fit differ, simple heuristics are used to find the corresponding parameters:; Parameters have the same name: They will be used to compute pulls.; Parameters have different names: The position of the fit parameter in the set of fit parameters will be computed. The parameter at the same position in the set of generator parameters will be used. Further options: . Arguments Effect . FrameRange(double lo, double hi) Set range of frame to given specification . FrameBins(int bins) Set default number of bins of frame to given number . Frame() Pass supplied named arguments to RooAbsRealLValue::frame() function. See there for list of allowed arguments . FitGauss(bool flag) Add a gaussian fit to the frame . If no frame specifications are given, the AutoSymRange() feature will be used to set a default range. Any other named argument is passed to the RooAbsData::plotOn(). See that function for allowed options.; If you want to have more control over the Gaussian fit to the pull distribution, you can also do it after the call to plotPull():; Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMCStudy.html:35805,simpl,simple,35805,doc/master/classRooMCStudy.html,https://root.cern,https://root.cern/doc/master/classRooMCStudy.html,1,['simpl'],['simple']
Usability,"ramFunction.h:108; double; xDouble_t x[n]Definition legend1.C:17; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOT::Fit::PoissonLLGradFunctionPoissonLikelihoodFCN< ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction > PoissonLLGradFunctionDefinition PoissonLikelihoodFCN.h:215; ROOT::Fit::PoissonLLFunctionPoissonLikelihoodFCN< ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction > PoissonLLFunctionDefinition PoissonLikelihoodFCN.h:214; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::Fit::FitUtil::Evaluate::EvalPoissonBinPdfstatic double EvalPoissonBinPdf(const IModelFunctionTempl< double > &func, const BinData &data, const double *p, unsigned int i, double *g, double *h, bool hasGrad, bool fullHessian)evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradientDefinition FitUtil.h:1447; ROOT::Fit::FitUtil::Evaluate::EvalPoissonLogLGradientstatic void EvalPoissonLogLGradient(const IModelFunctionTempl< double > &func, const BinData &data, const double *p, double *g, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy=::ROOT::EExecutionPolicy::kSequential, unsigned nChunks=0)Definition FitUtil.h:1456; ROOT::Fit::FitUtil::Evaluate::EvalPoissonLogLstatic double EvalPoissonLogL(const IModelFunctionTempl< double > &func, const BinData &data, const double *p, int iWeight, bool extended, unsigned int &nPoints, ::ROOT::EExecutionPolicy executionPolicy, unsigned nChunks=0)Definition FitUtil.h:1420. mathmathcoreincFitPoissonLikelihoodFCN.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/PoissonLikelihoodFCN_8h_source.html:16886,Guid,Guide,16886,doc/master/PoissonLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/PoissonLikelihoodFCN_8h_source.html,1,['Guid'],['Guide']
Usability,ramFunctionAdapter::NDim ; (; ); const. inlineoverridevirtual . Retrieve the dimension of the function. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 131 of file MultiDimParamFunctionAdapter.h. ◆ NPar(). unsigned int ROOT::Math::MultiDimParamFunctionAdapter::NPar ; (; ); const. inlineoverridevirtual . Return the number of Parameters. ; Implements ROOT::Math::IBaseParam.; Definition at line 126 of file MultiDimParamFunctionAdapter.h. ◆ operator=(). MultiDimParamFunctionAdapter & ROOT::Math::MultiDimParamFunctionAdapter::operator= ; (; const MultiDimParamFunctionAdapter & ; rhs). inline . Assignment operator. ; Definition at line 93 of file MultiDimParamFunctionAdapter.h. ◆ Parameters(). const double * ROOT::Math::MultiDimParamFunctionAdapter::Parameters ; (; ); const. inlineoverridevirtual . Access the parameter values. ; Implements ROOT::Math::IBaseParam.; Definition at line 116 of file MultiDimParamFunctionAdapter.h. ◆ SetParameters(). void ROOT::Math::MultiDimParamFunctionAdapter::SetParameters ; (; const double * ; p). inlineoverridevirtual . Set the parameter values. ; Parameters. pvector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. ; Implements ROOT::Math::IBaseParam.; Definition at line 121 of file MultiDimParamFunctionAdapter.h. Member Data Documentation. ◆ fFunc. IParamFunction* ROOT::Math::MultiDimParamFunctionAdapter::fFunc. private . Definition at line 149 of file MultiDimParamFunctionAdapter.h. ◆ fOwn. bool ROOT::Math::MultiDimParamFunctionAdapter::fOwn. private . Definition at line 148 of file MultiDimParamFunctionAdapter.h. Libraries for ROOT::Math::MultiDimParamFunctionAdapter:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h. ROOTMathMultiDimParamFunctionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html:7742,Guid,Guide,7742,doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamFunctionAdapter.html,1,['Guid'],['Guide']
Usability,ramMCSModule. RooRangeBinning. RooRangeBoolean. RooRealAnalytic. RooRealBinding←. RooDataProjBinding. RooRealAnalytic. RooRealIntegral. RooRealMPFE. RooRealProxy. RooRealSumPdf. RooRealVar. RooRealVarSharedProperties. RooRecursiveFraction. RooRefCountList. RooResolutionModel←. RooAddModel. RooGExpModel. RooGaussModel. RooTruthModel. RooScaledFunc. RooSegmentedIntegrator1D←. RooSegmentedIntegrator2D. RooSegmentedIntegrator2D. RooSetPair. RooSetProxy. RooSharedProperties←. RooCategorySharedProperties. RooRealVarSharedProperties. RooSharedPropertiesList. RooSimGenContext. RooSimPdfBuilder. RooSimSplitGenContext. RooSimWSTool. RooSimWSTool::MultiBuildConfig. RooSimWSTool::SplitRule. RooSimultaneous. RooSpHarmonic. RooStats::AcceptanceRegion. RooStats::AsymptoticCalculator. RooStats::BayesianCalculator. RooStats::CombinedCalculator←. RooStats::ProfileLikelihoodCalculator. RooStats::ConfInterval←. RooStats::LikelihoodInterval. RooStats::MCMCInterval. RooStats::PointSetInterval. RooStats::SimpleInterval; ←. RooStats::HypoTestInverterResult. RooStats::ConfidenceBelt. RooStats::DebuggingSampler. RooStats::DebuggingTestStat. RooStats::FeldmanCousins. RooStats::FrequentistCalculator. RooStats::HLFactory. RooStats::Heaviside. RooStats::HistFactory::EstimateSummary. RooStats::HistFactory::FlexibleInterpVar. RooStats::HistFactory::HistoToWorkspaceFactory. RooStats::HistFactory::HistoToWorkspaceFactoryFast. RooStats::HistFactory::LinInterpVar. RooStats::HybridCalculator. RooStats::HybridCalculatorOriginal. RooStats::HybridPlot. RooStats::HybridResult. RooStats::HypoTestCalculatorGeneric←. RooStats::AsymptoticCalculator. RooStats::FrequentistCalculator. RooStats::HybridCalculator. RooStats::HypoTestInverter. RooStats::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MC,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassHierarchy.html:24220,Simpl,SimpleInterval,24220,root/html532/ClassHierarchy.html,https://root.cern,https://root.cern/root/html532/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,"rame(TEveFrameBox *b)Set TEveFrameBox pointer.Definition TEveDigitSet.cxx:423; TEveFrameBoxDescription of a 2D or 3D frame that can be used to visually group a set of objects.Definition TEveFrameBox.h:19; A single TEveFrameBox can be shared among several digit-sets (it is reference-counted). The following flags affect how the frame-box will drawn and used for selection and highlight: Bool_t fSelectViaFrame;; Bool_t fHighlightFrame;; TEveDigitSet::fHighlightFrameBool_t fHighlightFrameDefinition TEveDigitSet.h:74; TEveDigitSet::fSelectViaFrameBool_t fSelectViaFrameDefinition TEveDigitSet.h:73; bool; TEveDigitSet is sub-classed from TEveSecondarySelectable – this means individual digits can be selected. By calling: TEveSecondarySelectable::SetAlwaysSecSelect(kTRUE);; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TEveSecondarySelectable::SetAlwaysSecSelectvoid SetAlwaysSecSelect(Bool_t f)Definition TEveSecondarySelectable.h:47; one can enforce immediate feedback (highlight, tooltip and select on normal left-mouse click) on given digit-set.; See also: TEveQuadSet: rectangle, hexagon or line per digit; TEveBoxSet a 3D box per digit; a#define a(i)Definition RSha256.hxx:99; TEveBoxSetCollection of 3D primitives (fixed-size boxes, boxes of different sizes, or arbitrary sexto-epipeds,...Definition TEveBoxSet.h:22; TEveQuadSetSupports various internal formats that result in rendering of a set of planar (lines,...Definition TEveQuadSet.h:20; lineTLine * lineDefinition entrylistblock_figure1.C:235; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1. Definition at line 29 of file TEveDigitSet.h. Classes; struct  DigitBase_t;  . Public Types; typedef void(* Callback_foo) (TEveDigitSet *, Int_t, TObject *);  ; enum  ERenderMode_e { kRM_AsIs; , kRM_Line; , kRM_Fill; };  ; typedef TString(* TooltipCB_foo) (TEveDigitSet *, Int_t);  ;  Public Types inherited from TEveElement; enum  EChangeBits { kCBColorSelection = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveDigitSet.html:3026,feedback,feedback,3026,doc/master/classTEveDigitSet.html,https://root.cern,https://root.cern/doc/master/classTEveDigitSet.html,1,['feedback'],['feedback']
Usability,"rame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::chiSquaredouble chiSquare(int nFitParam=0) constShortcut for RooPlot::chiSquare(const char* pdfname, const char* histname, int nFitParam=nullptr)Definition RooPlot.h:180; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPlot::residHistRooHist * residHist(const char *histname=nullptr, const char *pdfname=nullptr, bool normalize=false, bool useAverage=true) constReturn a RooHist (derives from TGraphAsymErrors) containing the residuals of a histogram.Definition RooPlot.cxx:1101; RooPlot::pullHistRooHist * pullHist(const char *histname=nullptr, const char *pdfname=nullptr, bool useAverage=true) constUses residHist() and sets normalize=true.Definition RooPlot.h:185; RooPlot::addPlotablevoid addPlotable(RooPlotable *plotable, Option_t *drawOptions="""", bool invisible=false, bool refreshNorm=false)Add the specified plotable object to our plot.Definition RooPlot.cxx:516; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf109_chi2residpullDefinition rf109_chi2residpull.py:1; ; chi^2 = 2.63198; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf109_chi2residpull.C. tutorialsroofitrf109_chi2residpull.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf109__chi2residpull_8C.html:5483,Guid,Guide,5483,doc/master/rf109__chi2residpull_8C.html,https://root.cern,https://root.cern/doc/master/rf109__chi2residpull_8C.html,1,['Guid'],['Guide']
Usability,"rame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawBorder(); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDockButton.html:15367,Clear,ClearFlags,15367,root/html602/TGDockButton.html,https://root.cern,https://root.cern/root/html602/TGDockButton.html,2,['Clear'],['ClearFlags']
Usability,"rame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTorusEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for torus editor. ~TGeoTorusEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoR(); Slot for R. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi. void DoDphi(); Slot for Dphi. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTorusEditor.html:21434,undo,undoing,21434,root/html534/TGeoTorusEditor.html,https://root.cern,https://root.cern/root/html534/TGeoTorusEditor.html,1,['undo'],['undoing']
Usability,"rame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHProgressBar.html:21659,progress bar,progress bar,21659,root/html602/TGHProgressBar.html,https://root.cern,https://root.cern/root/html602/TGHProgressBar.html,2,['progress bar'],['progress bar']
Usability,"rame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGView(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t xMargin = 0, UInt_t yMargin = 0, UInt_t options = kSunkenFrame|kDoubleBorder, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create an editor view, containing an TGEditorFrame and (optionally); a horizontal and vertical scrollbar. ~TGView(); Delete view. void Clear(Option_t* = """"); Clear view. void SetVisibleStart(Int_t newTop, Int_t direction); Scroll view in specified direction to make newTop the visible location. void DrawRegion(Int_t x, Int_t y, UInt_t width, UInt_t height); Draw region. void UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); update a part of view. void UpdateBackgroundStart(); set some gc values. Bool_t HandleButton(Event_t* event); handle button. void DoRedraw(); redraw. Bool_t HandleExpose(Event_t* event); Handle expose events. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process scrollbar messages. void Layout(); layout view. void DrawBorder(); Draw the border of the text edit widget. void ScrollToPosition(TGLongPosition newPos); Scroll the canvas to pos. void ScrollCanvas(Int_t newTop, Int_t direction); Scroll the canvas to new_top in the kVertical or kHorizontal direction. void ChangeBackground(Pixel_t ); Change background color of the canvas frame. void SetBackgroundColor(Pixel_t ); Set background color of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGView.html:21426,Clear,Clear,21426,root/html528/TGView.html,https://root.cern,https://root.cern/root/html528/TGView.html,8,['Clear'],['Clear']
Usability,"rame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedEditor* GetFrameCreator(); Returns TGedEditor that currently creates TGedFrames. void SetFrameCreator(TGedEditor* e); Set the TGedEditor that currently creates TGedFrames. TGedEditor(TCanvas* canvas = 0, UInt_t width = 175, UInt_t height = 20); Constructor of graphics editor. ~TGedEditor(); Editor destructor. void Update(TGedFrame* frame = 0); Virtual method that is called on any change in the dependent frames.; This implementation simply calls fPad Modified()/Update(). TGCompositeFrame* GetEditorTab(const char* name); Find or create tab with name. TGedTabInfo* GetEditorTabInfo(const char* name); Find or create tab with name. void CloseWindow(); Called when closed via WM close button. Calls Hide(). void ReinitWorkspace(); Clears windows in editor tab.; Unmap and withdraw currently shown frames and thus prepare for; construction of a new class layout or destruction. void SetGlobal(Bool_t global); Set editor global. void GlobalClosed(); Delete global editor if no canvas exists. void GlobalSetModel(TVirtualPad* , TObject* , Int_t ); Set canvas to global editor. void ConnectToCanvas(TCanvas* c); Connect this editor to the Selected signal of canvas 'c'. void DisconnectFromCanvas(); Disconnect this editor from the Selected signal of fCanvas. void SetCanvas(TCanvas* c); Change connection to another canvas. void SetModel(TVirtualPad* pad, TObject* obj, Int_t event); Activate object editors according to the selected object. void Show(); Show editor. void Hide(); Hide editor. The editor is put into non-active state. void RecursiveRemove(TObject* obj); Remove references to fModel in case the fModel is being deleted.; Deactivate attribute frames if they point to obj. void ActivateEditor(TClass* cl, Bool_t recurse); S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGedEditor.html:27938,Clear,Clears,27938,root/html602/TGedEditor.html,https://root.cern,https://root.cern/root/html602/TGedEditor.html,2,['Clear'],['Clears']
Usability,"rame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTVLVEntry(const TGWindow* p, const TGPicture* bigpic, const TGPicture* smallpic, TGString* name, TGString** subnames, EListViewMode ViewMode); TGTreeLVEntry constructor. ~TTVLVEntry(); TGTreeLVEntry destructor. const char * ConvertAliases(); Convert all aliases into true names. Bool_t FullConverted(); Return true if converted name is alias free. void CopyItem(TTVLVEntry* dest); Copy this item's name and alias to an other. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HasAlias(); Check if alias name is not empty. void PrependTilde(); Prepend a ~ to item alias. void SetItemName(const char* name); redraw this entry with new name. void SetCutType(Bool_t type = kFALSE); Set cut type. void SetExpression(const char* name, const char* alias, Bool_t cutType = kFALSE); Set the true name, alias and type of the expression, then refresh it. void Empty(); clear all names and alias. void SetToolTipText(const char* text, Long_t delayms = 1000); Set tool tip text associated with this item. The delay is in; milliseconds (minimum 250). To remove tool tip call method with text = 0. void SetSmallPic(const TGPicture* spic); Set small picture. const char * GetAlias(); {return fAlias.Data();}. TTVLVContainer * GetContainer(); {return fContainer;}. TGItemContext * GetContext(); {return fContext;}. const char * GetConvName(); {return fConvName;}. const char * GetTrueName(); {return fTrueName.Data();}. TGToolTip * GetTip(); {return fTip;}. Bool_t IsCut(); {return fIsCut;}. void SetAlias(const char* alias); {fAlias = alias;}. void SetTrueName(const char* name); {fTrueName = name;}. » Last changed: root/treeviewer:$Id: TTVLVContainer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTVLVEntry.html:20654,clear,clear,20654,root/html530/TTVLVEntry.html,https://root.cern,https://root.cern/root/html530/TTVLVEntry.html,1,['clear'],['clear']
Usability,"rame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTVLVEntry(const TGWindow* p, const TGPicture* bigpic, const TGPicture* smallpic, TGString* name, TGString** subnames, EListViewMode ViewMode); TGTreeLVEntry constructor. ~TTVLVEntry(); TGTreeLVEntry destructor. const char * ConvertAliases(); Convert all aliases into true names. Bool_t FullConverted(); Return true if converted name is alias free. void CopyItem(TTVLVEntry* dest); Copy this item's name and alias to an other. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HasAlias(); Check if alias name is not empty. void PrependTilde(); Prepend a ~ to item alias. void SetItemName(const char* name); redraw this entry with new name. void SetCutType(Bool_t type = kFALSE); Set cut type. void SetExpression(const char* name, const char* alias, Bool_t cutType = kFALSE); Set the true name, alias and type of the expression, then refresh it. void Empty(); clear all names and alias. void SetToolTipText(const char* text, Long_t delayms = 1000); Set tool tip text associated with this item. The delay is in; milliseconds (minimum 250). To remove tool tip call method with text = 0. void SetSmallPic(const TGPicture* spic); Set small picture. const char * GetAlias(); {return fAlias.Data();}. TTVLVContainer * GetContainer(); {return fContainer;}. TGItemContext * GetContext(); {return fContext;}. const char * GetConvName(); {return fConvName;}. const char * GetTrueName(); {return fTrueName.Data();}. TGToolTip * GetTip(); {return fTip;}. Bool_t IsCut(); {return fIsCut;}. void SetAlias(const char* alias); {fAlias = alias;}. void SetTrueName(const char* name); {fTrueName = name;}. » Last changed: root/treeviewer:$Id: TTVLVContainer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTVLVEntry.html:20654,clear,clear,20654,root/html532/TTVLVEntry.html,https://root.cern,https://root.cern/root/html532/TTVLVEntry.html,1,['clear'],['clear']
Usability,"rameter ipar. ; Implements TVirtualFitter.; Definition at line 552 of file TFitter.cxx. ◆ SetFCN(). void TFitter::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). overridevirtual . Specify the address of the fitting algorithm. ; Reimplemented from TVirtualFitter.; Definition at line 561 of file TFitter.cxx. ◆ SetFitMethod(). void TFitter::SetFitMethod ; (; const char * ; name). overridevirtual . ret fit method (chisquare or log-likelihood) ; Implements TVirtualFitter.; Definition at line 571 of file TFitter.cxx. ◆ SetParameter(). Int_t TFitter::SetParameter ; (; Int_t ; ipar, . const char * ; parname, . Double_t ; value, . Double_t ; verr, . Double_t ; vlow, . Double_t ; vhigh . ). overridevirtual . set initial values for a parameter . ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter . Implements TVirtualFitter.; Definition at line 588 of file TFitter.cxx. ◆ Streamer(). void TFitter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file TFitter.h. Member Data Documentation. ◆ fCovar. Double_t* TFitter::fCovar. private . Definition at line 23 of file TFitter.h. ◆ fMinuit. TMinuit* TFitter::fMinuit. private . Definition at line 25 of file TFitter.h. ◆ fNlog. Int_t TFitter::fNlog. private . Definition at line 22 of file TFitter.h. ◆ fSumLog. Double_t* TFitter::fSumLog. private . Definition at line 24 of file TFitter.h. Libraries for TFitter:. [legend]; The documentation for this class was generated from the following files:; math/minuit/inc/TFitter.h; math/minuit/src/TFitter.cxx. TFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitter.html:28434,Guid,Guide,28434,doc/master/classTFitter.html,https://root.cern,https://root.cern/doc/master/classTFitter.html,1,['Guid'],['Guide']
Usability,"rameters (i.e. pass zero); 212 fX[0] = x;; 213 Double_t fval = fFunc->EvalPar(fX, nullptr);; 214 if (fAbsVal && fval < 0) return -fval;; 215 return fval;; 216 }; 217 // evaluate x * |f(x)|; 218 Double_t EvalFirstMom(Double_t x); 219 {; 220 fX[0] = x;; 221 return fX[0] * TMath::Abs(fFunc->EvalPar(fX, nullptr));; 222 }; 223 // evaluate (x - x0) ^n * f(x); 224 Double_t EvalNMom(Double_t x) const; 225 {; 226 fX[0] = x;; 227 return TMath::Power(fX[0] - fX0, fN) * TMath::Abs(fFunc->EvalPar(fX, nullptr));; 228 }; 229 ; 230 TF1 *fFunc;; 231 mutable Double_t fX[1];; 232 const double *fPar;; 233 Bool_t fAbsVal;; 234 Double_t fN;; 235 Double_t fX0;; 236};; 237 ; 238////////////////////////////////////////////////////////////////////////////////; 239/** \class TF1; 240 \ingroup Functions; 241 \brief 1-Dim function class; 242 ; 243 ; 244## TF1: 1-Dim function class; 245 ; 246A TF1 object is a 1-Dim function defined between a lower and upper limit.; 247The function may be a simple function based on a TFormula expression or a precompiled user function.; 248The function may have associated parameters.; 249TF1 graphics function is via the TH1 and TGraph drawing functions.; 250 ; 251The following types of functions can be created:; 252 ; 2531. [Expression using variable x and no parameters](\ref F1); 2542. [Expression using variable x with parameters](\ref F2); 2553. [Lambda Expression with variable x and parameters](\ref F3); 2564. [A general C function with parameters](\ref F4); 2575. [A general C++ function object (functor) with parameters](\ref F5); 2586. [A member function with parameters of a general C++ class](\ref F6); 259 ; 260 ; 261 ; 262\anchor F1; 263### 1 - Expression using variable x and no parameters; 264 ; 265#### Case 1: inline expression using standard C++ functions/operators; 266 ; 267Begin_Macro(source); 268{; 269 auto fa1 = new TF1(""fa1"",""sin(x)/x"",0,10);; 270 fa1->Draw();; 271}; 272End_Macro; 273 ; 274#### Case 2: inline expression using a ROOT function (e.g. fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:7483,simpl,simple,7483,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['simpl'],['simple']
Usability,"rameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEveTriangleSet * ReadTrivialFile (const char *file);  Read a simple ascii input file describing vertices and triangles. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTriangleSet.html:29078,simpl,simple,29078,doc/master/classTEveTriangleSet.html,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html,1,['simpl'],['simple']
Usability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ScanMinimizer.html:3817,Simpl,SimplexSeedGeneratorfSeedGenerator,3817,root/html526/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__ScanMinimizer.html:3817,Simpl,SimplexSeedGeneratorfSeedGenerator,3817,root/html528/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__ScanMinimizer.html:3819,Simpl,SimplexSeedGeneratorfSeedGenerator,3819,root/html530/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__ScanMinimizer.html:3819,Simpl,SimplexSeedGeneratorfSeedGenerator,3819,root/html532/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__ScanMinimizer.html,1,['Simpl'],['SimplexSeedGeneratorfSeedGenerator']
Usability,rametric.cxx. ◆ SetConstrained(). void TGLParametricEquation::SetConstrained ; (; Bool_t ; c). Set constrained. ; Definition at line 213 of file TGLParametric.cxx. ◆ SetModified(). void TGLParametricEquation::SetModified ; (; Bool_t ; m). Set modified. ; Definition at line 229 of file TGLParametric.cxx. ◆ Streamer(). void TGLParametricEquation::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGLParametricEquation::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TGLParametric.h. Member Data Documentation. ◆ fConstrained. Bool_t TGLParametricEquation::fConstrained. private . Definition at line 48 of file TGLParametric.h. ◆ fEquation. ParametricEquation_t TGLParametricEquation::fEquation. private . Definition at line 43 of file TGLParametric.h. ◆ fModified. Bool_t TGLParametricEquation::fModified. private . Definition at line 49 of file TGLParametric.h. ◆ fPainter. Painter_t TGLParametricEquation::fPainter. private . Definition at line 54 of file TGLParametric.h. ◆ fURange. Rgl::Range_t TGLParametricEquation::fURange. private . Definition at line 45 of file TGLParametric.h. ◆ fVRange. Rgl::Range_t TGLParametricEquation::fVRange. private . Definition at line 46 of file TGLParametric.h. ◆ fXEquation. Ptr_t TGLParametricEquation::fXEquation. private . Definition at line 39 of file TGLParametric.h. ◆ fYEquation. Ptr_t TGLParametricEquation::fYEquation. private . Definition at line 40 of file TGLParametric.h. ◆ fZEquation. Ptr_t TGLParametricEquation::fZEquation. private . Definition at line 41 of file TGLParametric.h. Libraries for TGLParametricEquation:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLParametric.h; graf3d/gl/src/TGLParametric.cxx. TGLParametricEquation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLParametricEquation.html:19540,Guid,Guide,19540,doc/master/classTGLParametricEquation.html,https://root.cern,https://root.cern/doc/master/classTGLParametricEquation.html,1,['Guid'],['Guide']
Usability,"rams in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:134335,simpl,simple,134335,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['simpl'],['simple']
Usability,ranRngUnuranRng class for interface ROOT random generators to Unuran ;  CUserGroup_t;  CVariableSelectionRule;  CVecTrackD;  CVecTVecDouble;  CVecVecDouble;  CWindowAttributes_t;  CWrapperRooPdf;  C<X11Drawable>;  C<X11Window >;  CXColor_tDescription of a X11 color ;  CXHandleErr_t;  CXHandleIn_t;  ►CXMLReader;  CAttributes;  CXPClientArchiveRequest;  CXPClientInterruptRequest;  CXPClientLoginRequest;  CXPClientProofRequest;  CXPClientReadbufRequest;  CXPClientRequest;  CXPClientSendRcvRequest;  CXpdAdminCpCmd;  CXpdClientSessions;  CXpdEnv;  CXpdGroupEff_t;  CXpdGroupGlobal_t;  CXpdManagerCron_t;  CXpdMsg;  CXpdObject;  CXpdObjectQ;  CXpdSrvMgrCreateCnt;  CXpdSrvMgrCreateGuard;  CXrdClientAbsUnsolMsgHandler;  CXrdClientCacheInterval;  ►CXrdClientConn;  CSessionIDInfo;  ►CXrdClientConnectionMgr;  CCndVarInfo;  CXrdClientEnv;  CXrdClientID;  CXrdClientInputBuffer;  CXrdClientLogConnection;  CXrdClientMessage;  CXrdClientPhyConnection;  CXrdClientPhyConnLocker;  CXrdClientReadCache;  CXrdClientReadCacheItem;  CXrdClientSock;  CXrdClientSockConnectParms;  CXrdClientUnsolMsgSender;  CXrdClientUrlInfo;  ►CXrdClientVector;  Cmyindex;  ►CXrdPoll;  CPipeData;  CXrdProofConn;  CXrdProofdAdmin;  CXrdProofdAux;  CXrdProofdClient;  CXrdProofdClientMgr;  CXrdProofdConfig;  CXrdProofdDirective;  CXrdProofdDSInfo;  CXrdProofdFile;  CXrdProofdManager;  CXrdProofdMultiStr;  CXrdProofdMultiStrToken;  CXrdProofdNetMgr;  CXrdProofdPInfo;  CXrdProofdPipe;  CXrdProofdPriority;  CXrdProofdPriorityMgr;  CXrdProofdProofServ;  CXrdProofdProofServMgr;  CXrdProofdProtocol;  CXrdProofdResponse;  CXrdProofdSandbox;  CXrdProofdSessionEntry;  CXrdProofGI;  CXrdProofGroup;  CXrdProofGroupMember;  CXrdProofGroupMgr;  CXrdProofPhyConn;  CXrdProofQuery;  CXrdProofSched;  CXrdProofSessionInfo;  CXrdProofUI;  CXrdProofWorker;  CXrdROOT;  CXrdROOTMgr;  CXrdSrvBuffer;  CXrdSysPriv;  CXrdSysPrivGuard;  CXShapeEvent. ROOT 6.08/07 - Reference Guide Generated on Thu May 31 2018 21:48:30 using Doxygen 1.8.13. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:201947,Guid,Guide,201947,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['Guid'],['Guide']
Usability,"rance.Definition MinimizerOptions.cxx:55; ROOT::Math::MinimizerOptions::Printvoid Print(std::ostream &os=std::cout) constprint all the optionsDefinition MinimizerOptions.cxx:216; ROOT::Math::MinimizerOptions::DefaultMaxIterationsstatic int DefaultMaxIterations()Definition MinimizerOptions.cxx:95; ROOT::Math::MinimizerOptions::DefaultErrorDefstatic double DefaultErrorDef()Definition MinimizerOptions.cxx:91; TEnv::GetValuevirtual Int_t GetValue(const char *name, Int_t dflt) constReturns the integer value for a resource.Definition TEnv.cxx:491; MathNamespace for new Math classes and functions.; ROOT::Math::Minim::gDefaultPrecisionstatic double gDefaultPrecisionDefinition MinimizerOptions.cxx:34; ROOT::Math::Minim::gDefaultPrintLevelstatic int gDefaultPrintLevelDefinition MinimizerOptions.cxx:38; ROOT::Math::Minim::gDefaultStrategystatic int gDefaultStrategyDefinition MinimizerOptions.cxx:37; ROOT::Math::Minim::gDefaultMinimAlgostatic std::string gDefaultMinimAlgoDefinition MinimizerOptions.cxx:31; ROOT::Math::Minim::gDefaultTolerancestatic double gDefaultToleranceDefinition MinimizerOptions.cxx:33; ROOT::Math::Minim::gDefaultMaxCallsstatic int gDefaultMaxCallsDefinition MinimizerOptions.cxx:35; ROOT::Math::Minim::gDefaultMaxIterstatic int gDefaultMaxIterDefinition MinimizerOptions.cxx:36; ROOT::Math::Minim::gDefaultErrorDefstatic double gDefaultErrorDefDefinition MinimizerOptions.cxx:32; ROOT::Math::Minim::gDefaultMinimizerstatic std::string gDefaultMinimizerDefinition MinimizerOptions.cxx:30; ROOT::Math::Minim::gDefaultExtraOptionsstatic IOptions * gDefaultExtraOptionsDefinition MinimizerOptions.cxx:39; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37. mathmathcoresrcMinimizerOptions.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html:18960,Guid,Guide,18960,doc/master/MinimizerOptions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8cxx_source.html,1,['Guid'],['Guide']
Usability,"ranch dropped or not in cache; -1 on error. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats.; if option contains 'cachedbranches', the list of branches being; cached is printed. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos if the request is in the list of; prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:24693,Learn,Learn,24693,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['Learn'],['Learn']
Usability,"ranch {; 40 ; 41// Friends; 42 friend class TTreeCloner;; 43 friend class TLeafElement;; 44 ; 45/// Types; 46protected:; 47 enum EStatusBits {; 48 kBranchFolder = BIT(14),; 49 kDeleteObject = BIT(16), ///< We are the owner of fObject.; 50 kCache = BIT(18), ///< Need to pushd/pop fOnfileObject.; 51 kOwnOnfileObj = BIT(19), ///< We are the owner of fOnfileObject.; 52 kAddressSet = BIT(20), ///< The addressing set have been called for this branch; 53 kMakeClass = BIT(21), ///< This branch has been switched to using the MakeClass Mode; 54 kDecomposedObj = BIT(21) ///< More explicit alias for kMakeClass.; 55 };; 56 ; 57 ; 58// Data Members; 59protected:; 60 TString fClassName; ///< Class name of referenced object; 61 TString fParentName; ///< Name of parent class; 62 TString fClonesName; ///< Name of class in TClonesArray (if any); 63 TVirtualCollectionProxy *fCollProxy; ///<! collection interface (if any); 64 UInt_t fCheckSum; ///< CheckSum of class; 65 Version_t fClassVersion; ///< Version number of class; 66 Int_t fID; ///< element serial number in fInfo; 67 Int_t fType; ///< Branch type; 68 ///<; 69 ///< Note on fType values:; 70 ///< * -1 unsplit object with custom streamer at time of writing; 71 ///< * 0 unsplit object with default streamer at time of writing; 72 ///< OR simple data member of split object (fID==-1 for the former); 73 ///< * 1 base class of a split object.; 74 ///< * 2 class typed data member of a split object; 75 ///< * 3 branch count of a split TClonesArray; 76 ///< * 31 data member of the content of a split TClonesArray; 77 ///< * 4 branch count of a split STL Collection.; 78 ///< * 41 data member of the content of a split STL collection; 79 Int_t fStreamerType; ///< branch streamer type; 80 Int_t fMaximum; ///< Maximum entries for a TClonesArray or variable array; 81 Int_t fSTLtype; ///<! STL container type; 82 Int_t fNdata; ///<! Number of data in this branch; 83 TBranchElement *fBranchCount; ///< pointer to primary branchcount branch; 84 TBranc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8h_source.html:2593,simpl,simple,2593,doc/master/TBranchElement_8h_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8h_source.html,1,['simpl'],['simple']
Usability,"ranch(const char* name, char* address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, Long_t address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, const char* classname, void** obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:14133,Clear,Clear,14133,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,1,['Clear'],['Clear']
Usability,"ranch(const char* name, long address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, int address, const char* leaflist, Int_t bufsize = 32000); TBranch*Branch(const char* name, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*Branch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:13416,Clear,Clear,13416,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['Clear'],['Clear']
Usability,"ranches to be processed in parallel when IMT is on, sorted by average task time ; Definition at line 144 of file TTree.h. ◆ fTargetMemoryRatio. Float_t TTree::fTargetMemoryRatio {1.1f}. protected . ! Ratio for memory usage in uncompressed buffers versus actual occupancy. ; 1.0 ; Definition at line 146 of file TTree.h. ◆ fTimerInterval. Int_t TTree::fTimerInterval. protected . Timer interval in milliseconds. ; Definition at line 91 of file TTree.h. ◆ fTotalBuffers. std::atomic<Long64_t> TTree::fTotalBuffers. protected . ! Total number of bytes in branch buffers ; Definition at line 108 of file TTree.h. ◆ fTotBytes. Long64_t TTree::fTotBytes. protected . Total number of bytes in all branches before compression. ; Definition at line 86 of file TTree.h. ◆ fTransientBuffer. TBuffer* TTree::fTransientBuffer. protected . ! Pointer to the current transient buffer. ; Definition at line 138 of file TTree.h. ◆ fTreeIndex. TVirtualIndex* TTree::fTreeIndex. protected . Pointer to the tree Index (if any) ; Definition at line 129 of file TTree.h. ◆ fUpdate. Int_t TTree::fUpdate. protected . Update frequency for EntryLoop. ; Definition at line 93 of file TTree.h. ◆ fUserInfo. TList* TTree::fUserInfo. protected . pointer to a list of user objects associated to this Tree ; Definition at line 133 of file TTree.h. ◆ fWeight. Double_t TTree::fWeight. protected . Tree weight (see TTree::SetWeight) ; Definition at line 90 of file TTree.h. ◆ fZipBytes. Long64_t TTree::fZipBytes. protected . Total number of bytes in all branches after compression. ; Definition at line 87 of file TTree.h. ◆ kMaxEntries. constexpr Long64_t TTree::kMaxEntries = TVirtualTreePlayer::kMaxEntries. staticconstexpr . Definition at line 229 of file TTree.h. Libraries for TTree:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TTree.h; tree/tree/src/TTree.cxx. TTree. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:233823,Guid,Guide,233823,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['Guid'],['Guide']
Usability,"rand Bellenot, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Cristina Cristescu, CERN/SFT,; Olivier Couet, CERN/SFT,; Kyle Cranmer, NYU, RooStats,; Gerri Ganis, CERN/SFT,; Andrei Gheata, CERN/SFT,; Enrico Guiraud, CERN/SFT,; Burt Holzman, Fermilab, CMS,; Lukasz Janyst, CERN/IT,; Christopher Jones, Fermilab, CMS,; Wim Lavrijsen, LBNL, PyRoot,; Sergey Linev, GSI, http, JSROOT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Axel Naumann, CERN/SFT,; Danilo Piparo, CERN/SFT,; Timur Pocheptsov, CERN/SFT,; Fons Rademakers, CERN/IT/Openlab,; Paul Russo, FNAL,; Enric Tejedor Saavedra, CERN/SFT,; Liza Sakellari, CERN/SFT,; Manuel Tobias Schiller,CERN, LHCb; David Smith, CERN/IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Omar, Zapata, Medellin, Columbia; Maciej Zimnoch, GSoC, Poland; ROOT reference manual; The ROOT reference manual has been moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:2663,guid,guide,2663,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['guid'],['guide']
Usability,"random compatibility. ; Definition at line 71 of file Random.h. ◆ Rng(). template<class Engine > . Engine & ROOT::Math::Random< Engine >::Rng ; (; ). inline . Definition at line 102 of file Random.h. ◆ SetSeed(). template<class Engine > . void ROOT::Math::Random< Engine >::SetSeed ; (; int ; seed). inline . Definition at line 222 of file Random.h. ◆ Sphere(). template<class Engine > . void ROOT::Math::Random< Engine >::Sphere ; (; double & ; x, . double & ; y, . double & ; z, . double ; r = 1 . ). inline . generate random numbers in a 3D sphere of radius 1 ; Definition at line 175 of file Random.h. ◆ tDist(). template<class Engine > . double ROOT::Math::Random< Engine >::tDist ; (; double ; nu). inline . t student distribution ; Definition at line 156 of file Random.h. ◆ Type(). template<class Engine > . std::string ROOT::Math::Random< Engine >::Type ; (; ); const. inline . Return the type (name) of the used generator. ; Definition at line 78 of file Random.h. ◆ Uniform() [1/2]. template<class Engine > . double ROOT::Math::Random< Engine >::Uniform ; (; double ; a, . double ; b . ). inline . Definition at line 207 of file Random.h. ◆ Uniform() [2/2]. template<class Engine > . double ROOT::Math::Random< Engine >::Uniform ; (; double ; a = 1.0). inline . Definition at line 210 of file Random.h. ◆ Uniform2(). template<class Engine > . double ROOT::Math::Random< Engine >::Uniform2 ; (; double ; a, . double ; b . ). inline . Definition at line 213 of file Random.h. Member Data Documentation. ◆ fEngine. template<class Engine > . Engine ROOT::Math::Random< Engine >::fEngine. private . random generator engine ; Definition at line 226 of file Random.h. ◆ fFunctions. template<class Engine > . RndmFunctions ROOT::Math::Random< Engine >::fFunctions. private . ! random functions object ; Definition at line 227 of file Random.h. math/mathcore/inc/Math/Random.h. ROOTMathRandom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html:10402,Guid,Guide,10402,doc/master/classROOT_1_1Math_1_1Random.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Random.html,1,['Guid'],['Guide']
Usability,"range"");; 859 else; 860 Paint(opt);; 861 view->SetAutoRange(kFALSE);; 862 // If we are drawing into the pad, then the view needs to be; 863 // set to perspective; 864 // if (!view->IsPerspective()) view->SetPerspective();; 865 ; 866 fLastVolume = fTopVolume;; 867 ; 868 // Create a 3D viewer to paint us; 869 gPad->GetViewer3D(option);; 870}; 871 ; 872////////////////////////////////////////////////////////////////////////////////; 873/// Draw a shape.; 874 ; 875void TGeoPainter::DrawShape(TGeoShape *shape, Option_t *option); 876{; 877 TString opt = option;; 878 opt.ToLower();; 879 fPaintingOverlaps = kFALSE;; 880 fOverlap = nullptr;; 881 fIsPaintingShape = kTRUE;; 882 ; 883 Bool_t has_pad = (gPad == nullptr) ? kFALSE : kTRUE;; 884 // Clear pad if option ""same"" not given; 885 if (!gPad) {; 886 gROOT->MakeDefCanvas();; 887 }; 888 if (!opt.Contains(""same"")); 889 gPad->Clear();; 890 // append this shape to pad; 891 shape->AppendPad(option);; 892 ; 893 // Create a 3-D view; 894 TView *view = gPad->GetView();; 895 if (!view) {; 896 view = TView::CreateView(11, nullptr, nullptr);; 897 // Set the view to perform a first autorange (frame) draw.; 898 // TViewer3DPad will revert view to normal painting after this; 899 view->SetAutoRange(kTRUE);; 900 if (has_pad); 901 gPad->Update();; 902 }; 903 PaintShape(shape, ""range"");; 904 view->SetAutoRange(kFALSE);; 905 view->SetPerspective();; 906 // Create a 3D viewer to paint us; 907 gPad->GetViewer3D(option);; 908}; 909 ; 910////////////////////////////////////////////////////////////////////////////////; 911/// Draw an overlap.; 912 ; 913void TGeoPainter::DrawOverlap(void *ovlp, Option_t *option); 914{; 915 TString opt = option;; 916 fIsPaintingShape = kFALSE;; 917 TGeoOverlap *overlap = (TGeoOverlap *)ovlp;; 918 if (!overlap); 919 return;; 920 ; 921 fPaintingOverlaps = kTRUE;; 922 fOverlap = overlap;; 923 opt.ToLower();; 924 if (fVisLock) {; 925 ClearVisibleVolumes();; 926 fVisLock = kFALSE;; 927 }; 928 Bool_t has_pad = (gPad == nul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:28544,Clear,Clear,28544,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"rans::~TGeoCombiTrans~TGeoCombiTrans() overridedestructorDefinition TGeoMatrix.cxx:1841; TGeoCombiTrans::operator*TGeoCombiTrans operator*(const TGeoMatrix &other) constDefinition TGeoMatrix.cxx:1831; TGeoCombiTrans::RotateZvoid RotateZ(Double_t angle) overrideRotate about Z axis with angle expressed in degrees.Definition TGeoMatrix.cxx:2009; TGeoCombiTrans::GetRotationMatrixconst Double_t * GetRotationMatrix() const overrideget the rotation arrayDefinition TGeoMatrix.cxx:2213; TGeoCombiTrans::GetScaleconst Double_t * GetScale() const overrideDefinition TGeoMatrix.h:363; TGeoCombiTrans::ReflectZvoid ReflectZ(Bool_t leftside, Bool_t rotonly=kFALSE) overrideMultiply by a reflection respect to XY.Definition TGeoMatrix.cxx:2084; TGeoGenTransMost general transformation, holding a translation, a rotation and a scale.Definition TGeoMatrix.h:375; TGeoGenTrans::GetScaleconst Double_t * GetScale() const overrideDefinition TGeoMatrix.h:393; TGeoGenTrans::Clearvoid Clear(Option_t *option="""") overrideclear the fields of this transformationDefinition TGeoMatrix.cxx:2287; TGeoGenTrans::fScaleDouble_t fScale[3]Definition TGeoMatrix.h:377; TGeoGenTrans::~TGeoGenTrans~TGeoGenTrans() overridedestructorDefinition TGeoMatrix.cxx:2282; TGeoGenTrans::MakeCloneTGeoMatrix * MakeClone() const overrideMake a clone of this matrix.Definition TGeoMatrix.h:390; TGeoGenTrans::NormalizeBool_t Normalize()A scale transformation should be normalized by sx*sy*sz factor.Definition TGeoMatrix.cxx:2322; TGeoGenTrans::TGeoGenTransTGeoGenTrans()dummy ctorDefinition TGeoMatrix.cxx:2230; TGeoGenTrans::SetScalevoid SetScale(Double_t sx, Double_t sy, Double_t sz)set the scaleDefinition TGeoMatrix.cxx:2298; TGeoGenTrans::InverseTGeoHMatrix Inverse() const overrideReturn a temporary inverse of this.Definition TGeoMatrix.cxx:2312; TGeoGenTrans::SetScalevoid SetScale(Double_t *scale)Definition TGeoMatrix.h:389; TGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition.D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:28812,Clear,Clearvoid,28812,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"ransform ; (; const double ; boundary, . ESemiInfinitySign ; sign, . const IGenFunction * ; integrand . ). Definition at line 229 of file GaussIntegrator.cxx. Member Function Documentation. ◆ Clone(). IGenFunction * ROOT::Math::IntegrandTransform::Clone ; (; ); const. overridevirtual . Clone a function. ; Each derived class will implement their version of the private DoClone method. ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 247 of file GaussIntegrator.cxx. ◆ DoEval() [1/2]. double ROOT::Math::IntegrandTransform::DoEval ; (; double ; x); const. overridevirtual . implementation of the evaluation function. Must be implemented by derived classes ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 233 of file GaussIntegrator.cxx. ◆ DoEval() [2/2]. double ROOT::Math::IntegrandTransform::DoEval ; (; double ; x, . double ; boundary, . int ; sign . ); const. private . Definition at line 238 of file GaussIntegrator.cxx. ◆ operator()(). double ROOT::Math::IntegrandTransform::operator() ; (; double ; x); const. Definition at line 243 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fBoundary. double ROOT::Math::IntegrandTransform::fBoundary. private . Definition at line 245 of file GaussIntegrator.h. ◆ fInfiniteInterval. bool ROOT::Math::IntegrandTransform::fInfiniteInterval. private . Definition at line 246 of file GaussIntegrator.h. ◆ fIntegrand. const IGenFunction* ROOT::Math::IntegrandTransform::fIntegrand. private . Definition at line 244 of file GaussIntegrator.h. ◆ fSign. ESemiInfinitySign ROOT::Math::IntegrandTransform::fSign. private . Definition at line 243 of file GaussIntegrator.h. Libraries for ROOT::Math::IntegrandTransform:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/GaussIntegrator.h; math/mathcore/src/GaussIntegrator.cxx. ROOTMathIntegrandTransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html:4162,Guid,Guide,4162,doc/master/classROOT_1_1Math_1_1IntegrandTransform.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html,1,['Guid'],['Guide']
Usability,ransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  ►NTStreamerInfoActions;  CTActionSequence;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CData;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:81190,simpl,simple,81190,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['simpl'],['simple']
Usability,"ransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  ►NTStreamerInfoActions;  ►CTActionSequence;  CSequencePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  ►Nvecgeom;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CBalancerInfo;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  Cfuncptr_and_voidptr_t;  CGcCache_t;  CGCValues_t;  Cgroup;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:88409,simpl,simple,88409,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['simpl'],['simple']
Usability,"ransient buffer currently used by this TTree for reading/writing baskets. ; Definition at line 1037 of file TTree.cxx. ◆ GetTree(). virtual TTree * TTree::GetTree ; (; ); const. inlinevirtual . Reimplemented in TChain.; Definition at line 517 of file TTree.h. ◆ GetTreeIndex(). virtual TVirtualIndex * TTree::GetTreeIndex ; (; ); const. inlinevirtual . Definition at line 518 of file TTree.h. ◆ GetTreeNumber(). virtual Int_t TTree::GetTreeNumber ; (; ); const. inlinevirtual . Reimplemented in TChain.; Definition at line 519 of file TTree.h. ◆ GetUpdate(). virtual Int_t TTree::GetUpdate ; (; ); const. inlinevirtual . Definition at line 521 of file TTree.h. ◆ GetUserInfo(). TList * TTree::GetUserInfo ; (; ). virtual . Return a pointer to the list containing user objects associated to this tree. ; The list is automatically created if it does not exist.; WARNING: By default the TTree destructor will delete all objects added to this list. If you do not want these objects to be deleted, call: mytree->GetUserInfo()->Clear();; before deleting the tree. ; Definition at line 6356 of file TTree.cxx. ◆ GetV1(). virtual Double_t * TTree::GetV1 ; (; ). inlinevirtual . Definition at line 536 of file TTree.h. ◆ GetV2(). virtual Double_t * TTree::GetV2 ; (; ). inlinevirtual . Definition at line 538 of file TTree.h. ◆ GetV3(). virtual Double_t * TTree::GetV3 ; (; ). inlinevirtual . Definition at line 540 of file TTree.h. ◆ GetV4(). virtual Double_t * TTree::GetV4 ; (; ). inlinevirtual . Definition at line 542 of file TTree.h. ◆ GetVal(). virtual Double_t * TTree::GetVal ; (; Int_t ; i). inlinevirtual . Definition at line 534 of file TTree.h. ◆ GetVar(). TTreeFormula * TTree::GetVar ; (; Int_t ; i). inline . Definition at line 524 of file TTree.h. ◆ GetVar1(). TTreeFormula * TTree::GetVar1 ; (; ). inline . Definition at line 526 of file TTree.h. ◆ GetVar2(). TTreeFormula * TTree::GetVar2 ; (; ). inline . Definition at line 528 of file TTree.h. ◆ GetVar3(). TTreeFormula * TTree::GetVar3 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:166223,Clear,Clear,166223,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['Clear'],['Clear']
Usability,"ransient buffer currently used by this TTree for reading/writing baskets. ; Definition at line 1037 of file TTree.cxx. ◆ GetTree(). virtual TTree * TTree::GetTree ; (; ); const. inlinevirtual . Reimplemented in TChain.; Definition at line 557 of file TTree.h. ◆ GetTreeIndex(). virtual TVirtualIndex * TTree::GetTreeIndex ; (; ); const. inlinevirtual . Definition at line 558 of file TTree.h. ◆ GetTreeNumber(). virtual Int_t TTree::GetTreeNumber ; (; ); const. inlinevirtual . Reimplemented in TChain.; Definition at line 559 of file TTree.h. ◆ GetUpdate(). virtual Int_t TTree::GetUpdate ; (; ); const. inlinevirtual . Definition at line 561 of file TTree.h. ◆ GetUserInfo(). TList * TTree::GetUserInfo ; (; ). virtual . Return a pointer to the list containing user objects associated to this tree. ; The list is automatically created if it does not exist.; WARNING: By default the TTree destructor will delete all objects added to this list. If you do not want these objects to be deleted, call: mytree->GetUserInfo()->Clear();; before deleting the tree. ; Definition at line 6356 of file TTree.cxx. ◆ GetV1(). virtual Double_t * TTree::GetV1 ; (; ). inlinevirtual . Definition at line 576 of file TTree.h. ◆ GetV2(). virtual Double_t * TTree::GetV2 ; (; ). inlinevirtual . Definition at line 578 of file TTree.h. ◆ GetV3(). virtual Double_t * TTree::GetV3 ; (; ). inlinevirtual . Definition at line 580 of file TTree.h. ◆ GetV4(). virtual Double_t * TTree::GetV4 ; (; ). inlinevirtual . Definition at line 582 of file TTree.h. ◆ GetVal(). virtual Double_t * TTree::GetVal ; (; Int_t ; i). inlinevirtual . Definition at line 574 of file TTree.h. ◆ GetVar(). TTreeFormula * TTree::GetVar ; (; Int_t ; i). inline . Definition at line 564 of file TTree.h. ◆ GetVar1(). TTreeFormula * TTree::GetVar1 ; (; ). inline . Definition at line 566 of file TTree.h. ◆ GetVar2(). TTreeFormula * TTree::GetVar2 ; (; ). inline . Definition at line 568 of file TTree.h. ◆ GetVar3(). TTreeFormula * TTree::GetVar3 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:168411,Clear,Clear,168411,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['Clear'],['Clear']
Usability,"raph *theGraph, Int_t n, const Double_t *x, const Double_t *y)TGraphPainter; PaintScatter(TScatter *theScatter, Option_t *option) overrideTGraphPaintervirtual; PaintStats(TGraph *theGraph, TF1 *fit) overrideTGraphPaintervirtual; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetHighlight(TGraph *theGraph) overrideTGraphPaintervirtual; SetMaxPointsPerLine(Int_t maxp=50)TGraphPainterstatic; SetObjectStat(Bool_t stat)TObjectstatic; SetPainter(TVirtualGraphPainter *painter)TVirtualGraphPainterstatic; SetUniqueID(UInt_t uid)TObjectvirtual; Smooth(TGraph *theGraph, Int_t npoints, Double_t *x, Double_t *y, Int_t drawtype)TGraphPainter; Streamer(TBuffer &) overrideTGraphPaintervirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGraphPainterinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGraphPainter()TGraphPainter; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TVirtualGraphPainter()TVirtualGraphPainterinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TGraphPainter() overrideTGraphPainter; ~TObject()TObjectvirtual; ~TVirtualGraphPainter() overrideTVirtualGraphPainterinline. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter-members.html:7652,Guid,Guide,7652,doc/master/classTGraphPainter-members.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter-members.html,1,['Guid'],['Guide']
Usability,"raph with its current attributes.Definition TGraph2D.cxx:1270; TGraph2D::GetEZlowvirtual Double_t * GetEZlow() constDefinition TGraph2D.h:133; TGraph2D::GetNpxInt_t GetNpx() constDefinition TGraph2D.h:109; TGraph2D::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecutes action corresponding to one event.Definition TGraph2D.cxx:782; TGraph2D::fSizeInt_t fSize!Real size of fX, fY and fZDefinition TGraph2D.h:49; TGraph2D::SetMaxItervoid SetMaxIter(Int_t n=100000)Definition TGraph2D.h:162; TGraph2D::EStatusBitsEStatusBitsDefinition TGraph2D.h:69; TGraph2D::kOldInterpolation@ kOldInterpolationDefinition TGraph2D.h:70; TGraph2D::GetXaxisTAxis * GetXaxis() constGet x axis of the graph.Definition TGraph2D.cxx:885; TGraph2D::GetEYlowvirtual Double_t * GetEYlow() constDefinition TGraph2D.h:131; TGraph2D::GetZDouble_t * GetZ() constDefinition TGraph2D.h:125; TGraph2D::SetNpxvoid SetNpx(Int_t npx=40)Sets the number of bins along X used to draw the function.Definition TGraph2D.cxx:1669; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH2D2-D histogram with a double per channel (see TH1 documentation)Definition TH2.h:357; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TViewSee TView3D.Definition TView.h:25; TVirtualHistPainterAbstract interface to a histogram painter.Definition TVirtualHistPainter.h:30; bool; double; int; Interpolate#define Interpolate(a, x, b, y)Definition geom.c:179; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; Drawth1 Draw(); mTMarker mDefinition textangle.C:8. histhistincTGraph2D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8h_source.html:21639,Guid,Guide,21639,doc/master/TGraph2D_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8h_source.html,1,['Guid'],['Guide']
Usability,"raph.Draw( 'LP' ); saves[ 'graph' ] = graph; ; graph = ROOT.TGraph( 1, dum, dum ); graph.SetMarkerColor( ROOT.kRed ); graph.SetMarkerStyle( 29 ); graph.SetMarkerSize( 1.5 ); graph.SetPoint( 0, 1.7, 2.e-17 ); graph.Draw( 'LP' ); saves[ 'graph2' ] = graph # note the label that is used!; ; graph = ROOT.TGraph( 1, dum, dum ); graph.SetMarkerColor( 6 ); graph.SetMarkerStyle( 8 ); graph.SetMarkerSize( 1.1 ); graph.SetPoint( 0, 1.7, 4.e-18); graph.Draw( 'LP' ); saves[ 'graph3' ] = graph # note the label that is used!; ; pad2.cd(); pad2.Range( -0.43642, -23.75, 3.92778, -6.25 ); pad2.SetLogx(); pad2.SetLogy(); ; pad2.DrawFrame( 1, 1e-22, 3100, 1e-8 ); pad2.GetFrame().SetFillColor( 19 ); ; gr = ROOT.TGraph( NLOOP, Z, HZ ); gr.SetTitle( 'HZ vs Z' ); gr.SetFillColor( 19 ); gr.SetLineColor( 9 ); gr.SetMarkerColor( 50 ); gr.SetMarkerStyle( 29 ); gr.SetMarkerSize( 1.5 ); gr.Draw( 'LP' ); saves[ 'gr' ] = gr; ; t = ROOT.TLatex(); t.SetNDC(); t.SetTextFont( 62 ); t.SetTextColor( 36 ); t.SetTextSize( 0.08 ); t.SetTextAlign( 12 ); t.DrawLatex( 0.6, 0.85, 'p - p' ); ; t.SetTextSize( 0.05 ); t.DrawLatex( 0.6, 0.79, 'Direct #gamma' ); t.DrawLatex( 0.6, 0.75, '#theta = 90^{o}' ); ; t.DrawLatex( 0.70, 0.55, 'H(z)' ); t.DrawLatex( 0.68, 0.50, '(barn)' ); ; t.SetTextSize( 0.045 ); t.SetTextColor( 46 ); t.DrawLatex( 0.20, 0.30, '#sqrt{s}, GeV' ); t.DrawLatex( 0.22, 0.26, '63' ); t.DrawLatex( 0.22, 0.22, '200' ); t.DrawLatex( 0.22, 0.18, '500' ); ; t.SetTextSize( 0.05 ); t.SetTextColor( 1 ); t.DrawLatex( 0.88, 0.06, 'z' ); saves[ 't3' ] = t # note the label that is used!; ; c1.Modified(); c1.Update(); ; ; if __name__ == '__main__': # run if loaded as script; zdemo(); SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; int; zdemoDefinition zdemo.py:1; AuthorsMichael Tokarev, Elena Potrebenikova (JINR Dubna) ; Definition in file zdemo.py. tutorialspyrootzdemo.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/zdemo_8py.html:7921,Guid,Guide,7921,doc/master/zdemo_8py.html,https://root.cern,https://root.cern/doc/master/zdemo_8py.html,1,['Guid'],['Guide']
Usability,"raph2DPainter object; TH1*fHpointer to histogram to paint; TPainter3dAlgorithms*fLegopointer to a TPainter3dAlgorithms object; Int_tfNcutsNumber of graphical cuts; TPie*fPiepointer to a TPie in case of option PIE; TStringfShowOptionOption to draw the projection; Int_tfShowProjectionTrue if a projection must be drawn; TList*fStackPointer to stack of histograms (if any); TAxis*fXaxispointer to X axis; Double_t*fXbufX buffer coordinates; TAxis*fYaxispointer to Y axis; Double_t*fYbufY buffer coordinates; TAxis*fZaxispointer to Z axis. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THistPainter(). Default constructor.; ; . ~THistPainter(). Default destructor.; ; . Int_t DistancetoPrimitive(Int_t px, Int_t py). Compute the distance from the point px,py to a line.; ; Compute the closest distance of approach from point px,py to elements of; an histogram. The distance is computed in pixels units.; ; Algorithm:; Currently, this simple model computes the distance from the mouse to the; histogram contour only.; ; . void DrawPanel(). Display a panel with all histogram drawing options.; ; . void ExecuteEvent(Int_t event, Int_t px, Int_t py). Execute the actions corresponding to ""event"".; ; This function is called when a histogram is clicked with the locator at; the pixel position px,py.; ; . TList * GetContourList(Double_t contour) const. Get a contour (as a list of TGraphs) using the Delaunay triangulation.; ; . char * GetObjectInfo(Int_t px, Int_t py) const. Display the histogram info (bin number, contents, integral up to bin; corresponding to cursor position px,py.; ; . Bool_t IsInside(Int_t x, Int_t y). Return kTRUE if the cell ix, iy is inside one of the graphical cuts.; ; . Bool_t IsInside(Double_t x, Double_t y). Return kTRUE if the point x,y is inside one of the graphical cuts.; ; . Int_t MakeChopt(Option_t* option). Decode string ""choptin"" and fill Hoption structure.; ; . Int_t MakeCuts(char* cutsopt). Decode string ""choptin"" an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:82626,simpl,simple,82626,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,6,['simpl'],['simple']
Usability,"raphPainter::PaintGraphMultiErrors ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphMultiErrors with its current attributes. ; Definition at line 2720 of file TGraphPainter.cxx. ◆ PaintGraphPolar(). void TGraphPainter::PaintGraphPolar ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphPolar with its current attributes. ; Definition at line 3789 of file TGraphPainter.cxx. ◆ PaintGraphQQ(). void TGraphPainter::PaintGraphQQ ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this graphQQ. No options for the time being. ; Definition at line 4084 of file TGraphPainter.cxx. ◆ PaintGraphReverse(). void TGraphPainter::PaintGraphReverse ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint theGraph reverting values along X and/or Y axis. a new graph is created. ; Definition at line 4144 of file TGraphPainter.cxx. ◆ PaintGraphSimple(). void TGraphPainter::PaintGraphSimple ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint a simple graph, without errors bars. ; Definition at line 4584 of file TGraphPainter.cxx. ◆ PaintHelper(). void TGraphPainter::PaintHelper ; (; TGraph * ; theGraph, . Option_t * ; option . ). overridevirtual . Paint a any kind of TGraph. ; Implements TVirtualGraphPainter.; Definition at line 1211 of file TGraphPainter.cxx. ◆ PaintHighlightPoint(). void TGraphPainter::PaintHighlightPoint ; (; TGraph * ; theGraph, . Option_t * ; option . ). virtual . Paint highlight point as TMarker object (open circle) ; Definition at line 1165 of file TGraphPainter.cxx. ◆ PaintPolyLineHatches(). void TGraphPainter::PaintPolyLineHatches ; (; TGraph * ; theGraph, . Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). Paint a polyline with hatches on one side showing an exclusion zone. ; x and y are the vectors holding the polyline and n the number of points in the polyline and w the width of the hatches. w can be negative. This method is not meant to be used directly. It is called automatically according to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:48653,simpl,simple,48653,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['simpl'],['simple']
Usability,"raphics from many threads Three different canvases in three different threads are started and regularly updated ;  draw_rh1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_subpads.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxxThis ROOT 7 example demonstrates how to create a ROOT 7 canvas (RCanvas) and draw ROOT 7 lines in it (RLine) ;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  vo004_SortAndSelect.C In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo004_SortAndSelect.py In this tutorial we learn how elements of an RVec can be easily sorted and selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlread",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:172499,learn,learn,172499,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['learn'],['learn']
Usability,"rapper::GetFuncgsl_function * GetFunc()Definition GSLFunctionWrapper.h:83; ROOT::Math::GSLFunctionWrapper::SetFunctionvoid SetFunction(const FuncType &f)fill the GSL C struct from a generic C++ callable object implementing operator()Definition GSLFunctionWrapper.h:76; ROOT::Math::GSLFunctionWrapper::SetFuncPointervoid SetFuncPointer(GSLFuncPointer f)set in the GSL C struct the pointer to the function evaluationDefinition GSLFunctionWrapper.h:68; ROOT::Math::GSLFunctionWrapper::GSLFunctionWrapperGSLFunctionWrapper()Definition GSLFunctionWrapper.h:61; ROOT::Math::GSLFunctionWrapper::operator()double operator()(double x)Definition GSLFunctionWrapper.h:88; ROOT::Math::GSLFunctionWrapper::SetParamsvoid SetParams(void *p)set in the GSL C struct the extra-object pointerDefinition GSLFunctionWrapper.h:71; ROOT::Math::GSLFunctionWrapper::FunctionPtrGSLFuncPointer FunctionPtr()Definition GSLFunctionWrapper.h:85; ROOT::Math::GSLFunctionWrapper::IsValidbool IsValid()check if function is valid (has been set)Definition GSLFunctionWrapper.h:91; double; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GSLFdfPointervoid(* GSLFdfPointer)(double, void *, double *, double *)Definition GSLFunctionWrapper.h:46; ROOT::Math::GSLFuncPointerdouble(* GSLFuncPointer)(double, void *)Function pointer corresponding to gsl_function signature.Definition GSLFunctionAdapter.h:45; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; gsl_function_structDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:63; gsl_function_struct::paramsvoid * paramsDefinition RooAdaptiveGaussKronrodIntegrator1D.cxx:65; gsl_function_struct::functiondouble(* function)(double x, void *params)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:64. mathmathmoresrcGSLFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html:8531,Guid,Guide,8531,doc/master/GSLFunctionWrapper_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLFunctionWrapper_8h_source.html,1,['Guid'],['Guide']
Usability,"raries. Function documentation; TBinomialEfficiencyFitter(); default constructor. TBinomialEfficiencyFitter(const TH1* numerator, const TH1* denominator); Constructor. Note that no objects are copied, so it is up to the user to ensure that the; histogram pointers remain valid. Both histograms need to be ""consistent"". This is not checked here, but in; TBinomialEfficiencyFitter::Fit(). ~TBinomialEfficiencyFitter(); destructor. void Set(const TH1* numerator, const TH1* denominator); Initialize with a new set of inputs. void SetPrecision(Double_t epsilon); Set the required integration precision, see TF1::Integral(). ROOT::Fit::Fitter* GetFitter(); Provide access to the underlying fitter object.; This may be useful e.g. for the retrieval of additional information (such; as the output covariance matrix of the fit). TFitResultPtr Fit(TF1* f1, Option_t* option = """"); Carry out the fit of the given function to the given histograms. If option ""I"" is used, the fit function will be averaged over the; bin (the default is to evaluate it simply at the bin center). If option ""R"" is used, the fit range will be taken from the fit; function (the default is to use the entire histogram). If option ""S"" a TFitResult object is returned and it can be used to obtain; additional fit information, like covariance or correlation matrix. Note that all parameter values, limits, and step sizes are copied; from the input fit function f1 (so they should be set before calling; this method. This is particularly relevant for the step sizes, taken; to be the ""error"" set on input, as a null step size usually fixes the; corresponding parameter. That is protected against, but in such cases; an arbitrary starting step size will be used, and the reliability of; the fit should be questioned). If parameters are to be fixed, this; should be done by specifying non-null parameter limits, with lower; limits larger than upper limits. On output, f1 contains the fitted parameters and errors, as well as; the number of d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBinomialEfficiencyFitter.html:10183,simpl,simply,10183,root/html602/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html602/TBinomialEfficiencyFitter.html,2,['simpl'],['simply']
Usability,"raries. Function documentation; void ClearThreadData() const. TGeoManager(); Default constructor. TGeoManager(const char* name, const char* title); Constructor. void Init(); Initialize manager class. TGeoManager(const TGeoManager& ); copy constructor. TGeoManager& operator=(const TGeoManager& ); assignment operator. ~TGeoManager(); Destructor. Int_t AddMaterial(const TGeoMaterial* material); Add a material to the list. Returns index of the material in list. Int_t AddOverlap(const TNamed* ovlp); Add an illegal overlap/extrusion to the list. Int_t AddTransformation(const TGeoMatrix* matrix); Add a matrix to the list. Returns index of the matrix in list. Int_t AddShape(const TGeoShape* shape); Add a shape to the list. Returns index of the shape in list. Int_t AddTrack(Int_t id, Int_t pdgcode, TObject* particle = 0); Add a track to the list of tracks. Use this for primaries only. For secondaries,; add them to the parent track. The method create objects that are registered; to the analysis manager but have to be cleaned-up by the user via ClearTracks(). Int_t AddTrack(TVirtualGeoTrack* track); Add a track to the list of tracks. TVirtualGeoTrack * MakeTrack(Int_t id, Int_t pdgcode, TObject* particle); Makes a primary track but do not attach it to the list of tracks. The track; can be attached as daughter to another one with TVirtualGeoTrack::AddTrack. Int_t AddVolume(TGeoVolume* volume); Add a volume to the list. Returns index of the volume in list. TGeoNavigator * AddNavigator(); Add a navigator in the list of navigators. If it is the first one make it; current navigator. TGeoNavigator * GetCurrentNavigator() const; Returns current navigator for the calling thread. TGeoNavigatorArray * GetListOfNavigators() const; Get list of navigators for the calling thread. Bool_t SetCurrentNavigator(Int_t index); Switch to another existing navigator for the calling thread. void ClearNavigators(); Clear all navigators. void RemoveNavigator(const TGeoNavigator* nav); Clear a single nav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:37305,Clear,ClearTracks,37305,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,1,['Clear'],['ClearTracks']
Usability,"rary a class is reference guide defined in. Almost all relevant classes can be found in libraries returned by root-config -glibs; the graphics libraries are retuned by root-config --libs. These commands are commonly used in Makefiles. Using root-config instead of enumerating the libraries by hand allows you to link them in a platform independent way. Also, if ROOT library names change you will not need to change your Makefile.; A batch program that does not have a graphic display, which creates, fills, and saves histograms and trees, only needs to link the core libraries (libCore, libRIO), libHist and libTree. If ROOT needs access to other libraries, it loads them dynamically. For example, if the TreeViewer is used, libTreePlayer and all libraries libTreePlayer depends on are loaded also. The dependent libraries are shown in the ROOT reference guide’s library dependency graph. The difference between reference guide libHist and libHistPainter is that the former needs to be explicitly linked and the latter will be loaded automatically at runtime when ROOT needs it, by means of the Plugin Manager. plugin manager; In the Figure 1-2, the libraries represented by green boxes outside of the core are loaded via the plugin manager plugin manager or equivalent techniques, while the white ones are not. Of course, if one wants to access a plugin library directly, it has to be explicitly linked. An example of a plugin library is libMinuit. To create and fill histograms you need to link libHist.so. If the code has a call to fit the histogram, the “fitter” will dynamically load libMinuit if it is not yet loaded.; 1.6.2.3 Plugins: Runtime Library Dependencies for Linking; plugin manager The Plugin Manager TPluginManager allows postponing library dependencies to runtime: a plugin library will only be loaded when it is needed. Non-plugins will need to be linked, and are thus loaded at start-up. Plugins are defined by a base class (e.g. TFile) that will be implemented in a plugin, a t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:22598,guid,guide,22598,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guide']
Usability,"ras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVACrossValidationApplication.C This macro provides an example of how to use TMVA for k-folds cross evaluation in application ;  TMVACrossValidationRegression.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMinimalClassification.C Minimal self-contained example for setting up TMVA with binary classification ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:159305,simpl,simple,159305,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['simpl'],['simple']
Usability,"rateEvent(). const RooArgSet * RooFoamGenerator::generateEvent ; (; UInt_t ; remaining, . double & ; resampleRatio . ). overridevirtual . are we actually generating anything? (the cache always contains at least our function value) ; Implements RooAbsNumGenerator.; Definition at line 140 of file RooFoamGenerator.cxx. ◆ generatorName(). std::string const & RooFoamGenerator::generatorName ; (; ); const. overridevirtual . Return unique name of generator implementation. ; Implements RooAbsNumGenerator.; Definition at line 158 of file RooFoamGenerator.cxx. ◆ registerSampler(). void RooFoamGenerator::registerSampler ; (; RooNumGenFactory & ; fact). staticprotected . Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. ; Definition at line 86 of file RooFoamGenerator.cxx. Friends And Related Symbol Documentation. ◆ RooNumGenFactory. friend class RooNumGenFactory. friend . Definition at line 52 of file RooFoamGenerator.h. Member Data Documentation. ◆ _binding. std::unique_ptr<TFoamIntegrand> RooFoamGenerator::_binding. protected . Binding of RooAbsReal to TFoam function interface. ; Definition at line 55 of file RooFoamGenerator.h. ◆ _range. std::vector<double> RooFoamGenerator::_range. protected . Range of observables to be generated ;. ; Definition at line 58 of file RooFoamGenerator.h. ◆ _tfoam. std::unique_ptr<TFoam> RooFoamGenerator::_tfoam. protected . Instance of TFOAM generator. ; Definition at line 56 of file RooFoamGenerator.h. ◆ _vec. std::vector<double> RooFoamGenerator::_vec. protected . Transfer array for FOAM output. ; Definition at line 59 of file RooFoamGenerator.h. ◆ _xmin. std::vector<double> RooFoamGenerator::_xmin. protected . Lower bound of observables to be generated ;. ; Definition at line 57 of file RooFoamGenerator.h. roofit/roofitcore/src/RooFoamGenerator.h; roofit/roofitcore/src/RooFoamGenerator.cxx. RooFoamGenerator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFoamGenerator.html:7306,Guid,Guide,7306,doc/master/classRooFoamGenerator.html,https://root.cern,https://root.cern/doc/master/classRooFoamGenerator.html,1,['Guid'],['Guide']
Usability,"ration Index: Measure of the ""Variance"" of a sample.; Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. into a ""left-node"" and a ""right-node"" (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) this is then the quality criteria which is optimized for when trying to increase the information in the system (making the best selection ; Definition at line 66 of file RegressionVariance.h. Public Member Functions;  RegressionVariance ();  ;  RegressionVariance (const RegressionVariance &s);  ; virtual ~RegressionVariance ();  ; TString GetName ();  ; Double_t GetSeparationGain (const Double_t nLeft, const Double_t targetLeft, const Double_t target2Left, const Double_t nTot, const Double_t targetTot, const Double_t target2Tot);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; virtual Double_t GetSeparationIndex (const Double_t n, const Double_t target, const Double_t target2);  Separation Index: a simple Variance. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TString fName;  name of the concrete Separation Index implementation ;  . #include <TMVA/RegressionVariance.h>; Constructor & Destructor Documentation. ◆ RegressionVariance() [1/2]. TMVA::RegressionVariance::RegressionVariance ; (; ). inline . Definition at line 71 of file RegressionVariance.h. ◆ RegressionVariance() [2/2]. TMVA::RegressionVariance::RegressionVariance ; (; const RegressionVariance & ; s). inline . Definition at line 74 of file RegressionVariance.h. ◆ ~RegressionVariance(). virtual TMVA::RegressionVariance::~RegressionVariance ; (; ). inlinevirtual . De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html:1552,simpl,simple,1552,doc/master/classTMVA_1_1RegressionVariance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html,1,['simpl'],['simple']
Usability,"rationRAII(TVirtualMutex *mutex)Definition TInterpreter.h:576; ROOT::Internal::InterpreterMutexRegistrationRAII::~InterpreterMutexRegistrationRAII~InterpreterMutexRegistrationRAII()Definition TInterpreter.h:582; TInterpreter::CallFuncIFacePtr_tDefinition TInterpreter.h:82; TInterpreter::CallFuncIFacePtr_t::fDtorDtor_t fDtorDefinition TInterpreter.h:107; TInterpreter::CallFuncIFacePtr_t::fKindEKind fKindDefinition TInterpreter.h:103; TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_tCallFuncIFacePtr_t()Definition TInterpreter.h:94; TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_tCallFuncIFacePtr_t(Generic_t func)Definition TInterpreter.h:96; TInterpreter::CallFuncIFacePtr_t::EKindEKindDefinition TInterpreter.h:83; TInterpreter::CallFuncIFacePtr_t::kCtor@ kCtorDefinition TInterpreter.h:86; TInterpreter::CallFuncIFacePtr_t::kGeneric@ kGenericDefinition TInterpreter.h:85; TInterpreter::CallFuncIFacePtr_t::kDtor@ kDtorDefinition TInterpreter.h:87; TInterpreter::CallFuncIFacePtr_t::kUninitialized@ kUninitializedDefinition TInterpreter.h:84; TInterpreter::CallFuncIFacePtr_t::Generic_tvoid(* Generic_t)(void *, int, void **, void *)Definition TInterpreter.h:90; TInterpreter::CallFuncIFacePtr_t::fGenericGeneric_t fGenericDefinition TInterpreter.h:105; TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_tCallFuncIFacePtr_t(Ctor_t func)Definition TInterpreter.h:98; TInterpreter::CallFuncIFacePtr_t::Dtor_tvoid(* Dtor_t)(void *, unsigned long, int)Definition TInterpreter.h:92; TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_tCallFuncIFacePtr_t(Dtor_t func)Definition TInterpreter.h:100; TInterpreter::CallFuncIFacePtr_t::fCtorCtor_t fCtorDefinition TInterpreter.h:106; TInterpreter::CallFuncIFacePtr_t::Ctor_tvoid(* Ctor_t)(void **, void *, unsigned long)Definition TInterpreter.h:91; mTMarker mDefinition textangle.C:8; outputstatic void output(). coremetaincTInterpreter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:83336,Guid,Guide,83336,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,1,['Guid'],['Guide']
Usability,"rations). void SetBinEdges(Int_t idim, const Double_t* bins); Set the axis # of bins and bin limits on dimension idim. void SetTitle(const char* title); Change (i.e. set) the title. If title is in the form ""stringt;string0;string1;string2 ...""; the histogram title is set to stringt, the title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnBase* RebinBase(Int_t group) const; Combine the content of ""group"" neighboring bins into; a new bin and return the resulting THnBase.; For group=2 and a 3 dimensional histogram, all ""blocks""; of 2*2*2 bins will be put into a bin. THnBase* RebinBase(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnBase.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void ResetBase(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnBase. If ""option"" contains:; 'a': print axis details; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnBase.html:16876,Clear,Clear,16876,root/html534/THnBase.html,https://root.cern,https://root.cern/root/html534/THnBase.html,3,['Clear'],['Clear']
Usability,"rator() ; (; TBuffer & ; buffer, . void * ; start_collection, . const void * ; end_collection, . const TLoopConfiguration * ; loopconf . ); const. inline . Definition at line 130 of file TStreamerInfoActions.h. ◆ operator=(). TConfiguredAction & TStreamerInfoActions::TConfiguredAction::operator= ; (; const TConfiguredAction & ; rval). inline . Definition at line 91 of file TStreamerInfoActions.h. ◆ PrintDebug(). void TStreamerInfoActions::TConfiguredAction::PrintDebug ; (; TBuffer & ; buffer, . void * ; object . ); const. Definition at line 88 of file TStreamerInfoActions.cxx. ◆ Streamer(). void TStreamerInfoActions::TConfiguredAction::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TStreamerInfoActions::TConfiguredAction::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 134 of file TStreamerInfoActions.h. Member Data Documentation. ◆ [union]. union { ... } TStreamerInfoActions::TConfiguredAction. ◆ fAction. TStreamerInfoAction_t TStreamerInfoActions::TConfiguredAction::fAction. Definition at line 77 of file TStreamerInfoActions.h. ◆ fConfiguration. TConfiguration* TStreamerInfoActions::TConfiguredAction::fConfiguration. Definition at line 81 of file TStreamerInfoActions.h. ◆ fLoopAction. TStreamerInfoLoopAction_t TStreamerInfoActions::TConfiguredAction::fLoopAction. Definition at line 79 of file TStreamerInfoActions.h. ◆ fVecPtrLoopAction. TStreamerInfoVecPtrLoopAction_t TStreamerInfoActions::TConfiguredAction::fVecPtrLoopAction. Definition at line 78 of file TStreamerInfoActions.h. Libraries for TStreamerInfoActions::TConfiguredAction:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TStreamerInfoActions.h; io/io/src/TStreamerInfoActions.cxx. TStreamerInfoActionsTConfiguredAction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html:15636,Guid,Guide,15636,doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,1,['Guid'],['Guide']
Usability,rator= ; (; TCudaHostBuffer< AFloat > && ; ). default . ◆ operator[]() [1/2]. template<typename AFloat > . AFloat & TMVA::DNN::TCudaHostBuffer< AFloat >::operator[] ; (; size_t ; index). inline . Definition at line 154 of file CudaBuffers.h. ◆ operator[]() [2/2]. template<typename AFloat > . AFloat TMVA::DNN::TCudaHostBuffer< AFloat >::operator[] ; (; size_t ; index); const. inline . Definition at line 160 of file CudaBuffers.h. ◆ SetConstVal(). template<typename AFloat > . void TMVA::DNN::TCudaHostBuffer< AFloat >::SetConstVal ; (; const AFloat ; constVal). Sets the entire buffer to a constant value. ; Definition at line 70 of file CudaBuffers.cxx. Member Data Documentation. ◆ fComputeStream. template<typename AFloat > . cudaStream_t TMVA::DNN::TCudaHostBuffer< AFloat >::fComputeStream. mutableprivate . cudaStream for data transfer ; Definition at line 48 of file CudaBuffers.h. ◆ fDestructor. template<typename AFloat > . struct TMVA::DNN::TCudaHostBuffer::TDestructor TMVA::DNN::TCudaHostBuffer< AFloat >::fDestructor. private . ◆ fHostPointer. template<typename AFloat > . std::shared_ptr<AFloat *> TMVA::DNN::TCudaHostBuffer< AFloat >::fHostPointer. private . Pointer to the buffer data. ; Definition at line 49 of file CudaBuffers.h. ◆ fOffset. template<typename AFloat > . size_t TMVA::DNN::TCudaHostBuffer< AFloat >::fOffset. private . Offset for sub-buffers. ; Definition at line 46 of file CudaBuffers.h. ◆ fSize. template<typename AFloat > . size_t TMVA::DNN::TCudaHostBuffer< AFloat >::fSize. private . Definition at line 47 of file CudaBuffers.h. ◆ TCudaDeviceBuffer< AFloat >. template<typename AFloat > . friend TMVA::DNN::TCudaHostBuffer< AFloat >::TCudaDeviceBuffer< AFloat >. private . Definition at line 62 of file CudaBuffers.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h; tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx. TMVADNNTCudaHostBuffer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html:5791,Guid,Guide,5791,doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html,1,['Guid'],['Guide']
Usability,"rator=(). void TFolder::operator= ; (; const TFolder & ; ). privatedelete . ◆ RecursiveRemove(). void TFolder::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Recursively remove object from a folder. ; Reimplemented from TObject.; Definition at line 449 of file TFolder.cxx. ◆ Remove(). void TFolder::Remove ; (; TObject * ; obj). virtual . Remove object from this folder. obj must be a TObject or a TFolder. ; Definition at line 457 of file TFolder.cxx. ◆ SaveAs(). void TFolder::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . Save all objects in this folder in filename. ; Each object in this folder will have a key in the file where the name of the key will be the name of the object. ; Reimplemented from TObject.; Definition at line 468 of file TFolder.cxx. ◆ SetOwner(). void TFolder::SetOwner ; (; Bool_t ; owner = kTRUE). virtual . Set ownership. ; If the folder is declared owner, when the folder is deleted, all the objects added via TFolder::Add are deleted via TObject::Delete, otherwise TObject::Clear is called.; NOTE that folder ownership can be set:; via TFolder::SetOwner; or via TCollection::SetOwner on the collection specified to TFolder::AddFolder . Definition at line 483 of file TFolder.cxx. ◆ Streamer(). void TFolder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFolder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file TFolder.h. Member Data Documentation. ◆ fFolders. TCollection* TFolder::fFolders. protected . Definition at line 33 of file TFolder.h. ◆ fIsOwner. Bool_t TFolder::fIsOwner. protected . Definition at line 34 of file TFolder.h. Libraries for TFolder:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TFolder.h; core/base/src/TFolder.cxx. TFolder. ROOT master - Reference Guide Generated on Tue ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:23834,Clear,Clear,23834,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,1,['Clear'],['Clear']
Usability,"rator=(const TMVA::RegressionVariance&); TMVA::RegressionVarianceRegressionVariance(); TMVA::RegressionVarianceRegressionVariance(const TMVA::RegressionVariance& s); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TStringfNamename of the concrete Separation Index impementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationGain(const Double_t& nLeft, const Double_t& targetLeft, const Double_t& target2Left, const Double_t& nTot, const Double_t& targetTot, const Double_t& target2Tot); Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality crition which is optimized for when trying; to increase the information in the system; for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)); which is used as a ""separation"" index should be as small as possible.; the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms... Double_t GetSeparationIndex(const Double_t& n, const Double_t& target, const Double_t& target2); Separation Index: a simple Variance. RegressionVariance(); default constructor. {fName = ""Variance for Regression"";}. RegressionVariance(const TMVA::RegressionVariance& s); copy constructor. {}. virtual ~RegressionVariance(); destructor. {}. TString GetName(); Return the name of the concrete Index implementation. { return fName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: RegressionVariance.h 29122 2009-06-22 06:51:30Z brun $ » Last generated: 2010-12-10 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__RegressionVariance.html:2082,simpl,simple,2082,root/html528/TMVA__RegressionVariance.html,https://root.cern,https://root.cern/root/html528/TMVA__RegressionVariance.html,1,['simpl'],['simple']
Usability,"ratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:1653,Clear,ClearExtra,1653,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,1,['Clear'],['ClearExtra']
Usability,"rawable.hxx. ◆ RDrawableExecRequest. friend class RDrawableExecRequest. friend . Definition at line 119 of file RDrawable.hxx. ◆ RDrawableMenuRequest. friend class RDrawableMenuRequest. friend . Definition at line 118 of file RDrawable.hxx. ◆ RIndirectDisplayItem. friend class RIndirectDisplayItem. friend . Definition at line 116 of file RDrawable.hxx. ◆ RLegend. friend class RLegend. friend . Definition at line 114 of file RDrawable.hxx. ◆ RPadBase. friend class RPadBase. friend . Definition at line 110 of file RDrawable.hxx. ◆ RStyle. friend class RStyle. friend . Definition at line 113 of file RDrawable.hxx. Member Data Documentation. ◆ fAttr. RAttrMap ROOT::Experimental::RDrawable::fAttr. private . attributes values ; Definition at line 172 of file RDrawable.hxx. ◆ fCssClass. std::string ROOT::Experimental::RDrawable::fCssClass. private . user-defined CSS class, used for RStyle ; Definition at line 175 of file RDrawable.hxx. ◆ fCssType. const char* ROOT::Experimental::RDrawable::fCssType {nullptr}. private . ! drawable type, not stored in the root file, must be initialized in constructor ; Definition at line 174 of file RDrawable.hxx. ◆ fId. std::string ROOT::Experimental::RDrawable::fId. private . user-defined CSS id, used for RStyle ; Definition at line 176 of file RDrawable.hxx. ◆ fStyle. std::weak_ptr<RStyle> ROOT::Experimental::RDrawable::fStyle. private . ! style applied for RDrawable, not stored when canvas is saved ; Definition at line 173 of file RDrawable.hxx. ◆ fVersion. Version_t ROOT::Experimental::RDrawable::fVersion {1}. private . ! drawable version, changed from the canvas ; Definition at line 177 of file RDrawable.hxx. Libraries for ROOT::Experimental::RDrawable:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpadv7/inc/ROOT/RDrawable.hxx; graf2d/gpadv7/src/RDrawable.cxx. ROOTExperimentalRDrawable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html:10646,Guid,Guide,10646,doc/master/classROOT_1_1Experimental_1_1RDrawable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html,1,['Guid'],['Guide']
Usability,"rawableprotected; RDrawable(const char *csstype)ROOT::Experimental::RDrawableinlineexplicit; ReleaseHeldCanvases()ROOT::Experimental::RCanvasstatic; Remove()ROOT::Experimental::RCanvas; ROOT::Experimental::RPadBase::Remove(const std::string &id)ROOT::Experimental::RPadBaseinline; ROOT::Experimental::RPadBase::Remove(const std::shared_ptr< RDrawable > &drawable)ROOT::Experimental::RPadBaseinline; RemoveAt(unsigned indx)ROOT::Experimental::RPadBaseinline; ResolveSharedPtrs()ROOT::Experimental::RCanvas; RPadBaseROOT::Experimental::RCanvasfriend; ROOT::Experimental::RPadBase::RPadBase(const char *csstype)ROOT::Experimental::RPadBaseinlineexplicitprotected; Run(double tm=0.)ROOT::Experimental::RCanvas; SaveAs(const std::string &filename)ROOT::Experimental::RCanvas; SetCssClass(const std::string &cl)ROOT::Experimental::RDrawableinline; SetCssType(const char *csstype)ROOT::Experimental::RDrawableinlineprotected; SetDrawableVersion(Version_t vers) overrideROOT::Experimental::RPadBaseprotectedvirtual; SetHeight(int height)ROOT::Experimental::RCanvasinline; SetId(const std::string &id)ROOT::Experimental::RDrawableinline; SetSize(int width, int height)ROOT::Experimental::RCanvasinline; SetTitle(const std::string &title)ROOT::Experimental::RCanvasinline; SetWidth(int width)ROOT::Experimental::RCanvasinline; Show(const std::string &where="""")ROOT::Experimental::RCanvas; TestIfFrameRequired(const RDrawable *drawable)ROOT::Experimental::RPadBaseinlineprivate; Update(bool async=false, CanvasCallback_t callback=nullptr)ROOT::Experimental::RCanvas; UseStyle(const std::shared_ptr< RStyle > &style) overrideROOT::Experimental::RPadBasevirtual; Version_t typedefROOT::Experimental::RDrawable; Wipe()ROOT::Experimental::RPadBaseinline; ~RCanvas() override=defaultROOT::Experimental::RCanvas; ~RDrawable()ROOT::Experimental::RDrawablevirtual; ~RPadBase() overrideROOT::Experimental::RPadBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas-members.html:6693,Guid,Guide,6693,doc/master/classROOT_1_1Experimental_1_1RCanvas-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RCanvas-members.html,1,['Guid'],['Guide']
Usability,"rawing happens. ; Definition at line 315 of file TGHtmlDraw.cxx. ◆ ButtonClicked(). void TGHtml::ButtonClicked ; (; const char * ; name, . const char * ; val . ). virtual . Emit ButtonClicked() signal. ; Definition at line 1286 of file TGHtml.cxx. ◆ CellSpacing(). int TGHtml::CellSpacing ; (; TGHtmlElement * ; pTable). Return the appropriate cell spacing for the given table. ; Definition at line 53 of file TGHtmlTable.cxx. ◆ CheckToggled(). void TGHtml::CheckToggled ; (; const char * ; name, . Bool_t ; on, . const char * ; val . ). virtual . Emit CheckToggled() signal. ; Definition at line 1299 of file TGHtml.cxx. ◆ ClassDefOverride(). TGHtml::ClassDefOverride ; (; TGHtml ; , . 0 ;  . ). protected . ◆ Clear(). void TGHtml::Clear ; (; Option_t * ; = """"). overridevirtual . Erase all HTML from this widget and clear the screen. ; This is typically done before loading a new document. ; Reimplemented from TObject.; Definition at line 310 of file TGHtml.cxx. ◆ ClearGcCache(). void TGHtml::ClearGcCache ; (; ). protected . Clear the cache of GCs. ; Definition at line 516 of file TGHtml.cxx. ◆ ColorDistance(). float TGHtml::ColorDistance ; (; ColorStruct_t * ; pA, . ColorStruct_t * ; pB . ). protected . Compute the squared distance between two colors. ; Definition at line 1613 of file TGHtml.cxx. ◆ ComputeVirtualSize(). void TGHtml::ComputeVirtualSize ; (; ). protected . Computes virtual size of html area. ; Definition at line 508 of file TGHtml.cxx. ◆ ControlSize(). int TGHtml::ControlSize ; (; TGHtmlInput * ; pElem). protected . This routine implements the Sizer() function for <INPUT>, <SELECT> and <TEXTAREA> markup. ; A side effect of sizing these markups is that widgets are created to represent the corresponding input controls.; The function normally returns 0. But if it is dealing with a <SELECT> or <TEXTAREA> that is incomplete, 1 is returned. In that case, the sizer will be called again at some point in the future when more information is available. ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:57308,Clear,ClearGcCache,57308,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['Clear'],['ClearGcCache']
Usability,"rawn but its sons are drawn; VT1_1->SetVisibility(-4); //Node is not drawn. Its immediate sons are drawn; VT2_1->SetVisibility(-4);; MTL_1->SetVisibility(-4);; MTR_1->SetVisibility(-4);; TOFR1->SetVisibility(-4);; ; gBenchmark->Show(""na49"");; }; TBRIK.h; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TGeometry.h; TMaterial.h; TMixture.h; TNode.h; TRotMatrix.h; TTRAP.h; TTUBE.h; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TBRIKA box with faces perpendicular to the axes.Definition TBRIK.h:26; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TGeometryTGeometry description.Definition TGeometry.h:39; TMaterialManages a detector material.Definition TMaterial.h:28; TMixtureManages a detector mixture.Definition TMixture.h:27; TMixture::DefineElementvirtual void DefineElement(Int_t n, Float_t a, Float_t z, Float_t w)Define one mixture element.Definition TMixture.cxx:86; TNodeTNode description.Definition TNode.h:33; TNode::cdvirtual void cd(const char *path=nullptr)Change Current Reference node to this.Definition TNode.cxx:249; TNode::ImportShapeAttributesvirtual void ImportShapeAttributes()Copy shape attributes as node attributes.Definition TNode.cxx:409; TNode::SetVisibilityvirtual void SetVisibility(Int_t vis=1)Set visibility for this node and its sons.Definition TNode.cxx:758; TRotMatrixManages a detector rotation matrix.Definition TRotMatrix.h:28; TShape::SetVisibilityvirtual void SetVisibility(Int_t vis)Definition TShape.h:62; TTRAPA general trapezoid.Definition TTRAP.h:33; TTUBEA tube.Definition TTUBE.h:32; AuthorRene Brun ; Definition in file na49.C. tutorialsgeomna49.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/na49_8C.html:949450,Guid,Guide,949450,doc/master/na49_8C.html,https://root.cern,https://root.cern/doc/master/na49_8C.html,1,['Guid'],['Guide']
Usability,"rawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in a tree. ;  ; file  jets.C;  Usage of a Tree using the JetEvent class. ;  ; file  ntuple1.C;   Simple tree analysis. ;  ; file  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ; file  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ; file  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ; file  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ; file  spider.C;   TSpider example. ;  ; file  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ; file  tcl.C;   How to write a TClonesArray to a TTree ;  ; file  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ; file  tree.C;   Display the Tree data structures ;  ; file  tree0.C;   Simple Event class example ;  ; file  tree1.C;   This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ;  ; file  tree2.C;   This example illustrate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tree.html:2095,Simpl,Simple,2095,doc/master/group__tutorial__tree.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html,1,['Simpl'],['Simple']
Usability,"ray * ; list, . Int_t ; n . ). overridevirtual . Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ; Reimplemented from TLeaf.; Definition at line 148 of file TLeafD32.cxx. ◆ ReadValue(). void TLeafD32::ReadValue ; (; std::istream & ; s, . Char_t ; delim = ' ' . ). overridevirtual . Read a double from std::istream s and store it into the branch buffer. ; Reimplemented from TLeaf.; Definition at line 162 of file TLeafD32.cxx. ◆ SetAddress(). void TLeafD32::SetAddress ; (; void * ; add = nullptr). overridevirtual . Set leaf buffer data address. ; Reimplemented from TLeaf.; Definition at line 172 of file TLeafD32.cxx. ◆ Streamer(). void TLeafD32::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TLeafD32. ; Reimplemented from TLeaf.; Definition at line 203 of file TLeafD32.cxx. ◆ StreamerNVirtual(). void TLeafD32::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TLeafD32.h. Member Data Documentation. ◆ fElement. TStreamerElement* TLeafD32::fElement. protected . ! StreamerElement used for TBuffer read / write ; Definition at line 35 of file TLeafD32.h. ◆ fMaximum. Double32_t TLeafD32::fMaximum. protected . Maximum value if leaf range is specified. ; Definition at line 32 of file TLeafD32.h. ◆ fMinimum. Double32_t TLeafD32::fMinimum. protected . Minimum value if leaf range is specified. ; Definition at line 31 of file TLeafD32.h. ◆ fPointer. Double32_t** TLeafD32::fPointer. protected . ! Address of pointer to data buffer ; Definition at line 34 of file TLeafD32.h. ◆ fValue. Double32_t* TLeafD32::fValue. protected . ! Pointer to data buffer ; Definition at line 33 of file TLeafD32.h. Libraries for TLeafD32:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TLeafD32.h; tree/tree/src/TLeafD32.cxx. TLeafD32. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafD32.html:21791,Guid,Guide,21791,doc/master/classTLeafD32.html,https://root.cern,https://root.cern/doc/master/classTLeafD32.html,1,['Guid'],['Guide']
Usability,"rblock; 3903/// \param [in] selection; 3904/// \parblock; 3905/// A string containing a selection expression.; 3906/// In a selection all usual C++ mathematical and logical operators are allowed.; 3907/// The value corresponding to the selection expression is used as a weight; 3908/// to fill the histogram (a weight of 0 is equivalent to not filling the histogram).\n; 3909/// \n; 3910/// Examples:; 3911/// - ""x<y && sqrt(z)>3.2"": returns a weight = 0 or 1; 3912/// - ""(x+y)*(sqrt(z)>3.2)"": returns a weight = x+y if sqrt(z)>3.2, 0 otherwise\n; 3913/// \n; 3914/// If the selection expression returns an array, it is iterated over in sync with the; 3915/// array returned by the varexp argument (as described below in ""Drawing expressions using arrays and array; 3916/// elements""). For example, if, for a given event, varexp evaluates to; 3917/// `{1., 2., 3.}` and selection evaluates to `{0, 1, 0}`, the resulting histogram is filled with the value 2. For example, for each event here we perform a simple object selection:; 3918/// ~~~{.cpp}; 3919/// // Muon_pt is an array: fill a histogram with the array elements > 100 in each event; 3920/// tree->Draw('Muon_pt', 'Muon_pt > 100'); 3921/// ~~~; 3922/// \endparblock; 3923/// \param [in] option; 3924/// \parblock; 3925/// The drawing option.; 3926/// - When an histogram is produced it can be any histogram drawing option; 3927/// listed in THistPainter.; 3928/// - when no option is specified:; 3929/// - the default histogram drawing option is used; 3930/// if the expression is of the form ""e1"".; 3931/// - if the expression is of the form ""e1:e2""or ""e1:e2:e3"" a cloud of; 3932/// unbinned 2D or 3D points is drawn respectively.; 3933/// - if the expression has four fields ""e1:e2:e3:e4"" a cloud of unbinned 3D; 3934/// points is produced with e1 vs e2 vs e3, and e4 is mapped on the current color; 3935/// palette.; 3936/// - If option COL is specified when varexp has three fields:; 3937/// ~~~ {.cpp}; 3938/// tree.Draw(""e1:e2:e3"","""",""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:155086,simpl,simple,155086,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simple']
Usability,"rce file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsPdf::GenSpec. class RooAbsPdf::GenSpec. RooAbsPdf is the abstract interface for all probability density; functions The class provides hybrid analytical/numerical; normalization for its implementations, error tracing and a MC; generator interface. A minimal implementation of a PDF class derived from RooAbsPdf; should overload the evaluate() function. This functions should; return PDFs value. [Normalization/Integration]. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex, composite PDF; if any of its variables are functions instead of variables. In; such cases the normalization of the composite may not be simply the; integral over the dependents of the top level PDF as these are; functions with potentially non-trivial Jacobian terms themselves.; Therefore. --> No explicit attempt should be made to normalize; the functions output in evaluate(). In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead the choice of normalization is always specified each time a; normalized values is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform a fully numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e. no hidden Jacobian ter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsPdf__GenSpec.html:1075,simpl,simply,1075,root/html530/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html530/RooAbsPdf__GenSpec.html,5,['simpl'],['simply']
Usability,"rce graph to be drawn in high resolution mode. By default, the graph is; drawn in low resolution in case the number of points is greater than the; number of pixels in the current pad.; ; ""][""; ""Cutoff"" style. When this option is selected together with H option, the; first and last vertical lines of the histogram are not drawn.; . . void PaintGraphAsymmErrors(TGraph* theGraph, Option_t* option). Paint this TGraphAsymmErrors with its current attributes.; . void PaintGraphBentErrors(TGraph* theGraph, Option_t* option). Paint this TGraphBentErrors with its current attributes.; . void PaintGraphErrors(TGraph* theGraph, Option_t* option). Paint this TGraphErrors with its current attributes.; . void PaintGraphPolar(TGraph* theGraph, Option_t* option). Paint this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code is from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)).; The curve is approximated by a poly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:24074,simpl,simple,24074,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,1,['simpl'],['simple']
Usability,"rce). Assignment operator. ; Definition at line 335 of file TQpDataDens.cxx. ◆ Print(). void TQpDataDens::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print all class members. ; Reimplemented from TObject.; Definition at line 218 of file TQpDataDens.cxx. ◆ PutAIntoAt(). void TQpDataDens::PutAIntoAt ; (; TMatrixDBase & ; M, . Int_t ; row, . Int_t ; col . ). overridevirtual . Insert the constraint matrix A into the matrix M at index (row,col) for the fundamental linear system. ; Implements TQpDataBase.; Definition at line 255 of file TQpDataDens.cxx. ◆ PutCIntoAt(). void TQpDataDens::PutCIntoAt ; (; TMatrixDBase & ; M, . Int_t ; row, . Int_t ; col . ). overridevirtual . Insert the constraint matrix C into the matrix M at index (row,col) for the fundamental linear system. ; Implements TQpDataBase.; Definition at line 265 of file TQpDataDens.cxx. ◆ PutQIntoAt(). void TQpDataDens::PutQIntoAt ; (; TMatrixDBase & ; M, . Int_t ; row, . Int_t ; col . ). overridevirtual . Insert the Hessian Q into the matrix M at index (row,col) for the fundamental linear system. ; Implements TQpDataBase.; Definition at line 245 of file TQpDataDens.cxx. ◆ Qmult(). void TQpDataDens::Qmult ; (; Double_t ; beta, . TVectorD & ; y, . Double_t ; alpha, . const TVectorD & ; x . ). overridevirtual . calculate y = beta*y + alpha*(fQ*x) ; Implements TQpDataBase.; Definition at line 118 of file TQpDataDens.cxx. Member Data Documentation. ◆ fA. TMatrixD TQpDataDens::fA. protected . Definition at line 69 of file TQpDataDens.h. ◆ fC. TMatrixD TQpDataDens::fC. protected . Definition at line 70 of file TQpDataDens.h. ◆ fQ. TMatrixDSym TQpDataDens::fQ. protected . Definition at line 68 of file TQpDataDens.h. Libraries for TQpDataDens:. [legend]; The documentation for this class was generated from the following files:; math/quadp/inc/TQpDataDens.h; math/quadp/src/TQpDataDens.cxx. TQpDataDens. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataDens.html:18125,Guid,Guide,18125,doc/master/classTQpDataDens.html,https://root.cern,https://root.cern/doc/master/classTQpDataDens.html,1,['Guid'],['Guide']
Usability,"rce:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TTreeViewer. class TTreeViewer: public TGMainFrame. TreeViewer is a graphic user interface designed to handle ROOT trees and to; take advantage of TTree class features. It uses ROOT native GUI widgets adapted for 'drag and drop' functionality.; in the same session.; The following capabilities are making the viewer a helpful tool for analysis:; - several trees may be opened in the same session;; - branches and leaves can be easily browsed or scanned;; - fast drawing of branch expressions by double-clicking;; - new variables/selections easy to compose with the built-in editor;; - histograms can be composed by dragging leaves or user-defined expressions; to X, Y and Z axis items;; - the tree entries to be processed can be selected with a double slider;; - selections can be defined and activated by dragging them to the 'Cut' item;; - all expressions can be aliased and aliases can be used in composing others;; - input/output event lists easy to handle;; - menu with histogram drawing options;; - user commands may be executed within the viewer and the current command; can be echoed;; - current 'Draw' event loop is reflected by a progress bar and may be; interrupted by the user;; - all widgets have self-explaining tool tips and/or context menus;; - expressions/leaves can be dragged to a 'scan box' and scanned by; double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. - a menu bar with entries : File, Edit, Run, Options and Help;; - a toolbar in the upper part where you can issue user commands, change; the drawing option and the histogram name, three check buttons Hist, Rec; and Scan.HIST toggles histogram drawing mode, REC enables recording of the; last command issued and SCAN enables redirecting of TTree::Scan command in; an ASCI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeViewer.html:1416,progress bar,progress bar,1416,root/html602/TTreeViewer.html,https://root.cern,https://root.cern/root/html602/TTreeViewer.html,2,['progress bar'],['progress bar']
Usability,"rce; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(). void GetDeltaSysBackgroundScale(TH1* delta, const char* source, const Int_t* binMap = 0); get correlated shift induced by a background source; delta: output shift vector histogram; source: name of background source; binMap: see method GetEmatrix(); see PrepareSysError(). void GetDeltaSysTau(TH1* delta, const Int_t* binMap = 0); calculate systematic shift from tau variation; ematrix: output; binMap: see method GetEmatrix(). void GetEmatrixSysSource(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given source; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysBackgroundScale(TH2* ematrix, const char* source, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate systematic shift from a given background scale error; ematrix: output; source: name of the error source; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixSysTau(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in regularisation parameter; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixInput(TH2* ematrix, const Int_t* binMap = 0, Bool_t clearEmat = kTRUE); calculate error matrix from error in input vector alone; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to adding the errors. void GetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); propagate error matrix vyy to the result; vyy: error matrix on input data fY; ematrix: output; binMap: see method GetEmatrix(); clearEmat: set kTRUE to clear the histogram prior to addin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:25427,clear,clearEmat,25427,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,9,['clear'],"['clear', 'clearEmat']"
Usability,"rces () override;  ; virtual Bool_t IsValid () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofResourcesStatic.html:3556,Clear,Clear,3556,doc/master/classTProofResourcesStatic.html,https://root.cern,https://root.cern/doc/master/classTProofResourcesStatic.html,1,['Clear'],['Clear']
Usability,"rchitecture_t , typename Layer_t = TLayer<Architecture_t>> . template<typename SharedLayer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::AddLayer ; (; SharedLayer_t & ; layer). inline . Definition at line 247 of file Net.h. ◆ AddLayer() [3/3]. template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::AddLayer ; (; size_t ; width, . EActivationFunction ; f, . Scalar_t ; dropoutProbability = 1.0 . ). Add a layer of the given size to the neural net. ; Definition at line 225 of file Net.h. ◆ Backward(). template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::Backward ; (; const Matrix_t & ; X, . const Matrix_t & ; Y, . const Matrix_t & ; weights . ). inline . Compute the weight gradients in the net from the given training samples X and training labels Y. ; Definition at line 285 of file Net.h. ◆ Clear(). template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::Clear. Remove all layers from the network. ; Definition at line 239 of file Net.h. ◆ CreateClone(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TNet< Architecture_t, Layer_t >::CreateClone ; (; size_t ; batchSize). Create a clone that uses the same weight and biases matrices but potentially a difference batch size. ; Definition at line 212 of file Net.h. ◆ Forward(). template<typename Architecture_t , typename Layer_t > . void TMVA::DNN::TNet< Architecture_t, Layer_t >::Forward ; (; Matrix_t & ; X, . bool ; applyDropout = false . ). inline . Forward a given input through the neural net. ; Computes all layer activations up to the output layer ; Definition at line 273 of file Net.h. ◆ GetBatchSize(). template<typename Architecture_t , typename Layer_t = TLayer<Architecture_t>> . size_t TMVA::DNN::TNet< Architecture_t, Layer_t >::GetBatchSize ; (; ); const. inline . Definition at line 138 of file Net.h. ◆ GetDepth(). template<typename Arch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html:8564,Clear,Clear,8564,doc/master/classTMVA_1_1DNN_1_1TNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html,1,['Clear'],['Clear']
Usability,"rchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TKDE. class TKDE: public TNamed. Function Members (Methods); public:. virtual~TKDE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t data); voidFill(Double_t data, Double_t weight); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const Double_t*GetAdaptiveWeights() const; TF1*GetApproximateBias(UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Double_tGetBias(Double_t x) const; TF1*GetDrawnFunction(); TGraphErrors*GetDrawnGraph(); TF1*GetDrawnLowerFunction(); TF1*GetDrawnUpperFunction(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TKDE.html:567,Clear,Clear,567,root/html604/TKDE.html,https://root.cern,https://root.cern/root/html604/TKDE.html,1,['Clear'],['Clear']
Usability,rd() [1/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; const TWriteLockGuard & ; ). privatedelete . ◆ TWriteLockGuard() [2/2]. ROOT::TWriteLockGuard::TWriteLockGuard ; (; TVirtualRWMutex * ; mutex). inline . Definition at line 141 of file TVirtualRWMutex.h. ◆ ~TWriteLockGuard(). ROOT::TWriteLockGuard::~TWriteLockGuard ; (; ). inline . Definition at line 145 of file TVirtualRWMutex.h. Member Function Documentation. ◆ Class(). static TClass * ROOT::TWriteLockGuard::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TWriteLockGuard::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TWriteLockGuard::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 147 of file TVirtualRWMutex.h. ◆ DeclFileName(). static const char * ROOT::TWriteLockGuard::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 147 of file TVirtualRWMutex.h. ◆ IsA(). TClass * ROOT::TWriteLockGuard::IsA ; (; ); const. inline . ReturnsTClass describing current object ; Definition at line 147 of file TVirtualRWMutex.h. ◆ operator=(). TWriteLockGuard & ROOT::TWriteLockGuard::operator= ; (; const TWriteLockGuard & ; ). privatedelete . ◆ Streamer(). void ROOT::TWriteLockGuard::Streamer ; (; TBuffer & ; ). ◆ StreamerNVirtual(). void ROOT::TWriteLockGuard::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 147 of file TVirtualRWMutex.h. Member Data Documentation. ◆ fHint. TVirtualRWMutex::Hint_t* ROOT::TWriteLockGuard::fHint. private . Definition at line 135 of file TVirtualRWMutex.h. ◆ fMutex. TVirtualRWMutex* const ROOT::TWriteLockGuard::fMutex. private . Definition at line 134 of file TVirtualRWMutex.h. core/base/inc/TVirtualRWMutex.h. ROOTTWriteLockGuard. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TWriteLockGuard.html:3018,Guid,Guide,3018,doc/v632/classROOT_1_1TWriteLockGuard.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TWriteLockGuard.html,1,['Guid'],['Guide']
Usability,"rder to use these algorithm the user needs to provide a function. ROOT provides a common way of specifying them via some interfaces; 13.7 ROOT::Math Function interfaces; To get a consistency in the mathematical methods within ROOT, there exists a set of interfaces to define the basic behaviour of a mathematical function. In order to use the classes presented in this chapter, the mathematical functions defined by the user must inherit from any of the classes seen in the figure:. ROOT::Math Function interface structure. 13.7.1 One-dimensional Function Interfaces; These interfaces are used for numerical algorithms operating only on one-dimensional functions and cannot be applied to multi-dimensional functions. For this case the users needs to define a function object which evaluates in one dimension, and the object will have to derivate from the following:. ROOT::Math::IBaseFunctionOneDim: This class is the most basic function. Provides a method to evaluate the function given a value (simple double) by implementing double operator() (const double ). The user class defined only needs to reimplement the pure abstract method double DoEval(double x), that will do the work of evaluating the function at point x. Example on how to create a class that represents a mathematical function. The user only has to override two methods from IBaseFunctionOneDim:; #include ""Math/IFunction.h"". class MyFunction: public ROOT::Math::IBaseFunctionOneDim; {; double DoEval(double x) const; {; return x*x;; }. ROOT::Math::IBaseFunctionOneDim* Clone() const; {; return new MyFunction();; }; };. ROOT::Math::IGradientFunctionOneDim: Some of the numerical algorithm will need to calculate the derivatives of the function. In these cases, the user will have to provide the necessary code for this to happen. The interface defined in IGradientFunctionOneDim introduced the method double Derivative(double x) that will return the derivative of the function at the point x. The class inherit by the user will ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:687459,simpl,simple,687459,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"re ; (; TF1 * ; func, . Option_t * ; option = """" . ); const. virtual . Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 444 of file TH1.h. ◆ ClearUnderflowAndOverflow(). void TH1::ClearUnderflowAndOverflow ; (; ). virtual . Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:101795,Clear,ClearUnderflowAndOverflow,101795,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"re TVirtualViewer3D and TBuffer3D in the master frame ;  ► graphics;  analyze.C This macro produces the flowchart of TFormula::Analyze ;  anim.CMacro illustrating how to animate a picture using a Timer ;  archi.C This macro displays the ROOT architecture ;  arrow.C Draw arrows ;  basic3d.C Show 3-D polylines and markers ;  canvas.C Example of primitives in a canvas ;  canvas2.C Example of canvas partitioning ;  compile.C This macro produces the flowchart of TFormula::Compile ;  crown.C Draw crowns ;  diamond.C Draw a diamond ;  earth.C This tutorial illustrates the special contour options ;  ellipse.C Draw ellipses ;  eval.C This macro produces the flowchart of TFormula::Eval ;  event.C Illustrate some basic primitives ;  feynman.C Draw Feynman diagrams ;  first.C Show some basic primitives ;  formula1.C Display interpreted functions ;  framework.C An example with basic graphics illustrating the Object Oriented User Interface of ROOT ;  gaxis.C Simple example illustrating how to draw TGaxis objects in various formats ;  gaxis2.C Example illustrating how to draw TGaxis with labels defined by a function ;  gaxis3.C Example illustrating how to modify individual labels of a TGaxis ;  graph_edit_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations ;  greyscale.C Create grey scale of 200 x 200 boxes ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:112041,Simpl,Simple,112041,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['Simpl'],['Simple']
Usability,"re TVirtualViewer3D and TBuffer3D in the master frame ;  ► graphics;  analyze.C This macro produces the flowchart of TFormula::Analyze ;  anim.CMacro illustrating how to animate a picture using a Timer ;  archi.C This macro displays the ROOT architecture ;  arrow.C Draw arrows ;  basic3d.C Show 3-D polylines and markers ;  canvas.C Example of primitives in a canvas ;  canvas2.C Example of canvas partitioning ;  compile.C This macro produces the flowchart of TFormula::Compile ;  crown.C Draw crowns ;  diamond.C Draw a diamond ;  earth.C This tutorial illustrates the special contour options ;  ellipse.C Draw ellipses ;  eval.C This macro produces the flowchart of TFormula::Eval ;  event.C Illustrate some basic primitives ;  feynman.C Draw Feynman diagrams ;  first.C Show some basic primitives ;  formula1.C Display interpreted functions ;  framework.C An example with basic graphics illustrating the Object Oriented User Interface of ROOT ;  gaxis.C Simple example illustrating how to draw TGaxis objects in various formats ;  gaxis2.C Example illustrating how to draw TGaxis with labels defined by a function ;  gaxis3.C Example illustrating how to modify individual labels of a TGaxis ;  graph_edit_playback.CThis macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations ;  gtime.CExample of a graph of data moving in time ;  latex.C This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:113515,Simpl,Simple,113515,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['Simple']
Usability,"re compression; TTree*TBranch::fTree! Pointer to Tree header; Int_tTBranch::fWriteBasketLast basket number written; Long64_tTBranch::fZipBytesTotal number of bytes in all leaves after compression; static Int_tTBranch::fgCount! branch counter. private:. Long64_tfRequestedEntry! Cursor indicating which entry is being requested. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchRef(); Default constructor. TBranchRef(TTree* tree); Main constructor called by TTree::BranchRef. ~TBranchRef(); Typical destructor. void Clear(Option_t* option = """"); Clear entries in the TRefTable. Int_t Fill(); Fill the branch basket with the referenced objects parent numbers. void FillLeaves(TBuffer& b); This function called by TBranch::Fill overloads TBranch::FillLeaves. Bool_t Notify(); This function is called by TRefTable::Notify, itself called by; TRef::GetObject.; The function reads the branch containing the object referenced; by the TRef. void Print(Option_t* option = """") const; Print the TRefTable branch. void ReadLeavesImpl(TBuffer& b); This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. void Reset(Option_t* option = """"); Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. Int_t SetParent(const TObject* obj, Int_t branchID); -- Set the current parent branch. This function is called by TBranchElement::GetEntry(); and TBranchElement::Fill() when reading or writing; branches that may contain referenced objects. TRefTable * GetRefTable() const; {return fRefTable;}. void SetRequestedEntry(Long64_t entry); {fRequestedEntry = entry;}. » Author: Rene Brun 19/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchRef.h 39635 2011-06-09 15:37:27Z pcanal $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranchRef.html:14714,clear,cleared,14714,root/html530/TBranchRef.html,https://root.cern,https://root.cern/root/html530/TBranchRef.html,1,['clear'],['cleared']
Usability,re the unserialized Python object is loaded . ReturnsError code ; Definition at line 294 of file PyMethodBase.cxx. Friends And Related Symbol Documentation. ◆ Factory. friend class Factory. friend . Definition at line 63 of file PyMethodBase.h. Member Data Documentation. ◆ fClassifier. PyObject* TMVA::PyMethodBase::fClassifier. protected . Definition at line 115 of file PyMethodBase.h. ◆ fEval. PyObject * PyMethodBase::fEval = NULL. staticprivate . Definition at line 124 of file PyMethodBase.h. ◆ fGlobalNS. PyObject * PyMethodBase::fGlobalNS = NULL. staticprotected . Definition at line 133 of file PyMethodBase.h. ◆ fLocalNS. PyObject* TMVA::PyMethodBase::fLocalNS. protected . Definition at line 134 of file PyMethodBase.h. ◆ fMain. PyObject * PyMethodBase::fMain = NULL. staticprotected . Definition at line 132 of file PyMethodBase.h. ◆ fModule. PyObject* TMVA::PyMethodBase::fModule. protected . Definition at line 114 of file PyMethodBase.h. ◆ fModuleBuiltin. PyObject * PyMethodBase::fModuleBuiltin = NULL. staticprivate . Definition at line 123 of file PyMethodBase.h. ◆ fModulePickle. PyObject * PyMethodBase::fModulePickle = NULL. staticprotected . Definition at line 128 of file PyMethodBase.h. ◆ fOpen. PyObject * PyMethodBase::fOpen = NULL. staticprivate . Definition at line 125 of file PyMethodBase.h. ◆ fPickleDumps. PyObject * PyMethodBase::fPickleDumps = NULL. staticprotected . Definition at line 129 of file PyMethodBase.h. ◆ fPickleLoads. PyObject * PyMethodBase::fPickleLoads = NULL. staticprotected . Definition at line 130 of file PyMethodBase.h. ◆ fPyReturn. PyObject* TMVA::PyMethodBase::fPyReturn. protected . Definition at line 117 of file PyMethodBase.h. Libraries for TMVA::PyMethodBase:. [legend]; The documentation for this class was generated from the following files:; tmva/pymva/inc/TMVA/PyMethodBase.h; tmva/pymva/src/PyMethodBase.cxx. TMVAPyMethodBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:41090,Guid,Guide,41090,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['Guid'],['Guide']
Usability,"re then follow the instructions on how to report a bug with JIRA.; When you submit a bug, please follow these guidelines:. If you submit a problem, always indicate your ROOT version number (e.g. 6.02.00, 5.34.22) and the platform you are running on (e.g. Ubuntu 14 gcc49, SLC6 clang35).; The bug title subject line should clearly identify the problem.; If you use a non recent version of ROOT, try to test your problem with newer version. If this is too difficult, consult the release and development notes to check if your problem has not already been solved.; Try to quickly search the internet and look in the forum if your problem has been already solved.; Try to share the maximum amount of information. A bug report which only says ""My macro crashes when running on kubuntu but on windows works"" is much less likely to be solved quickly than a complete message with a gdb stacktrace and a reproducer (see next item).; Send a minimal program or macro reproducing the problem. Make sure that your script can be executed directly. If it uses a data file, send the smallest possible data file as a mail attachment, or indicate how to get this file.; If for some reason it is not possible to share a minimal reproducer, try to make sure that your explanations are sufficient to speed up the whole fixing procedure. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guidelines-submitting-bug.html:3710,Guid,Guides,3710,d/guidelines-submitting-bug.html,https://root.cern,https://root.cern/d/guidelines-submitting-bug.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"re type as kSqlValue ;  ; void SetVersion (const TClass *cl, Int_t version=-100);  set structure type as kSqlVersion ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStructure.html:7015,Clear,Clear,7015,doc/master/classTSQLStructure.html,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html,1,['Clear'],['Clear']
Usability,"re& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:4796,clear,clearValueDirty,4796,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"re& set); const set<std::string>&RooAbsArg::attributes() const; const RooFormulaVar&RooResolutionModel::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGaussModel.html:3058,Clear,Clear,3058,root/html526/RooGaussModel.html,https://root.cern,https://root.cern/root/html526/RooGaussModel.html,3,['Clear'],['Clear']
Usability,"re& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistPdf.html:2917,Clear,Clear,2917,root/html534/RooHistPdf.html,https://root.cern,https://root.cern/root/html534/RooHistPdf.html,1,['Clear'],['Clear']
Usability,"re's PyPy. All existing binding generator tools (including PyROOT) rely on CPython internals, or at least on the Python C-API. That does not jive with PyPy as it has for example a garbage collector instead of reference counting. Through some heroics, it does expose a Python C-API, but it's slow as it interferes (blocks, really) the just-in-time compiler. Therefore, within PyPy, there are two new approaches: cffi for C and cppyy for C++. Both are part of the standard PyPy releases. There is also already a PyROOT version for the latter (see: http://root.cern.ch/drupal/content/pypyroot).; Cheers,; Wim. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:49 Permalink . Why? . I don't understand. You wish to maintain backwards compatibility. This implies maintaining the insanity that is the equivalence of ""."" and ""->"". Not only is this wrong, this egregiously ignores performance concerns that come with dereferencing. It also ensures that people using ROOT/Cling while learning C++ will have trouble compiling their programs using actual compilers. It implies that you intend to keep the (at best) insane class hierarchy TF1 <- TF2 <- TF3 and so on. This example shows some of the major design flaws in ROOT -- a 2-dimensional function IS a 1-dimensional function? There is no abstract base class? No templates? It implies that you plan to keep the pointless T in front of all the names of ROOT, even though you will have access to namespaces (finally) and thus can move past the 1970's C practice of avoiding name collisions by a sort of weird Hungarian notation. It implies that you plan to maintain the outdated interfaces which make no use of templates. Templates are one of the most powerful features of C++, are more relevant to performance critical tasks than inheritance, and help ensure the type-safety of code (thereby ensuring the accuracy of data by helping to prevent accidental narrowing etc). It implies that you intend to continue to encourage the use of bare new and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:9021,learn,learning,9021,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['learn'],['learning']
Usability,"re(0,6,""const "")==0) {; 1517 newName = ""const "";; 1518 name.erase(0,6);; 1519 }; 1520 std::string suffix;; 1521 UInt_t nstars = 0;; 1522 while(name[name.length()-nstars-1]=='*') {; 1523 ++nstars;; 1524 suffix.append(""*"");; 1525 }; 1526 if (nstars) {; 1527 name.erase(name.length()-nstars,nstars);; 1528 }; 1529 ; 1530 std::string alternate(context->GetName());; 1531 alternate.append(""::"");; 1532 alternate.append(name);; 1533 ; 1534 TClass *altcl = TClass::GetClass(alternate.c_str(),/*load=*/ false,true);; 1535 if (altcl) {; 1536 newName.append(altcl->GetName());; 1537 newName.append(suffix);; 1538 return altcl;; 1539 }; 1540 ; 1541 size_t ctxt_cursor = strlen(context->GetName());; 1542 for (size_t level = 0; ctxt_cursor != 0; --ctxt_cursor) {; 1543 switch (context->GetName()[ctxt_cursor]) {; 1544 case '<': --level; break;; 1545 case '>': ++level; break;; 1546 case ':': if (level == 0) {; 1547 // we encountered a scope not within a template; 1548 // parameter.; 1549 alternate.clear();; 1550 alternate.append(context->GetName(),ctxt_cursor+1);; 1551 alternate.append(name);; 1552 altcl = TClass::GetClass(alternate.c_str(),/*load=*/ false,true);; 1553 if (altcl) {; 1554 newName.append(altcl->GetName());; 1555 newName.append(suffix);; 1556 return altcl;; 1557 }; 1558 }; 1559 }; 1560 }; 1561 newName.clear();; 1562 return 0;; 1563 }; 1564 ; 1565 TClass *FixCollectionV5(TClass *context, TClass *oldClass, TClass *newClass); 1566 {; 1567 assert(oldClass->GetCollectionProxy() && newClass->GetCollectionProxy());; 1568 ; 1569 TVirtualCollectionProxy *old = oldClass->GetCollectionProxy();; 1570 TVirtualCollectionProxy *current = newClass->GetCollectionProxy();; 1571 Int_t stlkind = old->GetCollectionType();; 1572 ; 1573 if (stlkind == ROOT::kSTLmap || stlkind == ROOT::kSTLmultimap) {; 1574 ; 1575 if (current->GetValueClass() == nullptr) {; 1576 // This should really never happen (the content of map should always; 1577 // be a pair and thus have a TClass ... so let's just give up ...;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:59457,clear,clear,59457,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"re(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooIntegralMorph.html:6456,clear,clearEvalErrorLog,6456,root/html532/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html532/RooIntegralMorph.html,1,['clear'],['clearEvalErrorLog']
Usability,"re(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegralMorph.html:6456,clear,clearEvalErrorLog,6456,root/html528/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html528/RooIntegralMorph.html,1,['clear'],['clearEvalErrorLog']
Usability,"re(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegralMorph.html:6456,clear,clearEvalErrorLog,6456,root/html530/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html530/RooIntegralMorph.html,1,['clear'],['clearEvalErrorLog']
Usability,"re(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModecanNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:3898,Clear,Clear,3898,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,2,['Clear'],['Clear']
Usability,"re); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveCaloData::CellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCaloDataHist.html:2024,Clear,Clear,2024,root/html528/TEveCaloDataHist.html,https://root.cern,https://root.cern/root/html528/TEveCaloDataHist.html,6,['Clear'],['Clear']
Usability,re*fBaseIconbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStart; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance; Inherited Members; Includes; Libraries. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionViewer.html:23598,progress bar,progress bar,23598,root/html528/TSessionViewer.html,https://root.cern,https://root.cern/root/html528/TSessionViewer.html,4,['progress bar'],['progress bar']
Usability,"re, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual voidDestroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TQConnection.html:2304,Clear,Clear,2304,root/html530/TQConnection.html,https://root.cern,https://root.cern/root/html530/TQConnection.html,3,['Clear'],['Clear']
Usability,"re, TObject* obj); virtual voidTList::AddBefore(TObjLink* before, TObject* obj); virtual voidTList::AddFirst(TObject* obj); virtual voidTList::AddFirst(TObject* obj, Option_t* opt); virtual voidTList::AddLast(TObject* obj); virtual voidTList::AddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual voidDestroyed()SIGNAL ; Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQConnection.html:2304,Clear,Clear,2304,root/html528/TQConnection.html,https://root.cern,https://root.cern/root/html528/TQConnection.html,1,['Clear'],['Clear']
Usability,"reNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mTMVA_DNN␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM:CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM:CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|300"" [The Layout of the input]; : Layout: ""DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:9003,Learn,LearningRate,9003,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,2,['Learn'],['LearningRate']
Usability,reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMPWorkerTreeFuncTemplated derivation of TMPWorkerTree handlign generic function tree processing ;  CTMPWorkerTreeSelTemplated derivation of TMPWorkerTree handlign selector tree processing ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elemen,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:181110,simpl,simple,181110,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['simpl'],['simple']
Usability,reacting to messages received from it as specified by the Notify and HandleInput methods ;  CTMPWorkerTreeFuncTemplated derivation of TMPWorkerTree handlign generic function tree processing ;  CTMPWorkerTreeSelTemplated derivation of TMPWorkerTree handlign selector tree processing ;  CTMrbSubevent_Caen;  CTMultiDimFitMultidimensional Fits in ROOT ;  CTMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects ;  CTMultiLayerPerceptron;  CTMutex;  CTMutexImp;  CTMySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStepThis class contains implementation of writing OpenCascade's geometry shapes to the STEP file reproducing the original ROOT geometry tree ;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:189677,simpl,simple,189677,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['simpl'],['simple']
Usability,"readExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:1554,simpl,simply,1554,doc/v632/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html,2,['simpl'],['simply']
Usability,reads.C Fill the same TNtuple from different threads ;  mt201_parallelHistoFill.C Parallel fill of a histogram ;  mt301_TTaskGroupSimple.C Shows how to run items of work asynchronously with a TTaskGroup ;  mt302_TTaskGroupNested.C Calculate Fibonacci numbers exploiting nested parallelism through TTaskGroup ;  mt304_fillHistos.CFill histograms in parallel with automatic binning ;  mtbb001_fillHistos.C Fill histograms in parallel and write them on file ;  mtbb101_fillNtuples.C Fill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.C Parallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:138601,simpl,simple,138601,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['simpl'],['simple']
Usability,"ready been allocated (and assumingly used). In the later case, the function Clear will be called and passed the value of 'clear_options'; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 399 of file TClonesArray.cxx. ◆ DeclFileName(). static const char * TClonesArray::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 83 of file TClonesArray.h. ◆ Delete(). void TClonesArray::Delete ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Use this routine when your objects allocate memory (e.g. objects inheriting from TNamed or containing TStrings allocate memory). If not you better use Clear() since if is faster. ; Implements TCollection.; Definition at line 452 of file TClonesArray.cxx. ◆ Expand(). void TClonesArray::Expand ; (; Int_t ; newSize). overridevirtual . Expand or shrink the array to newSize elements. ; Reimplemented from TObjArray.; Definition at line 480 of file TClonesArray.cxx. ◆ ExpandCreate(). void TClonesArray::ExpandCreate ; (; Int_t ; n). virtual . Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ; If n is less than the current size the array is shrunk and the allocated space is freed. This routine is typically used to create a clonesarray into which one can directly copy object data without going via the ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). ; Definition at line 514 of file TClonesArray.cxx. ◆ ExpandCreateFast(). void TClonesArray::ExpandCreateFast ; (; Int_t ; n). virtual . Expand or shrink the array to n elements and create the clone objects by calling their default ct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:36050,Clear,Clear,36050,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"ready created.; 181 ; 182~~~ {.cpp}; 183 chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; 184 chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));; 185~~~; 186 ; 187 The 2 nodes that we have created inside chamber will both point to a wire_co; 188object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will; 189want now to place symmetrically 1000 chambers on a pad, following a pattern; 190of 20 rows and 50 columns. One way to do this will be to replicate our chamber; 191by positioning it 1000 times in different positions of the pad. Unfortunately,; 192this is far from being the optimal way of doing what we want.; 193Imagine that we would like to find out which of the 1000 chambers is containing; 194a (x,y,z) point defined in the pad reference. You will never have to do that,; 195since the modeller will take care of it for you, but let's guess what it has; 196to do. The most simple algorithm will just loop over all daughters, convert; 197the point from mother to local reference and check if the current chamber; 198contains the point or not. This might be efficient for pads with few chambers,; 199but definitely not for 1000. Fortunately the modeler is smarter than that and; 200create for each volume some optimization structures called voxels (see Voxelization); 201to minimize the penalty having too many daughters, but if you have 100 pads like; 202this in your geometry you will anyway loose a lot in your tracking performance.; 203 ; 204 The way out when volumes can be arranged according to simple patterns is the; 205usage of divisions. We will describe them in detail later on. Let's think now; 206at a different situation : instead of 1000 chambers of the same type, we may; 207have several types of chambers. Let's say all chambers are cylindrical and have; 208a wire inside, but their dimensions are different. However, we would like all; 209to be represented by a single volume family, since they have the same properties.; 210*/; 211 ; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:10598,simpl,simple,10598,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['simpl'],['simple']
Usability,"ream &, TNtupleD &, char, bool);  ; template Long64_t FillNtupleFromStream< Float_t, TNtuple > (std::istream &, TNtuple &, char, bool);  ; bool NextCharacterIsEOL (std::istream &input);  Either '\r' | '\n' or eof of some problem. ;  ; void SkipComment (std::istream &input);  Skips everything from '#' to (including) '\r' or '\n'. ;  ; void SkipEmptyLines (std::istream &input);  Skips empty lines (newline-characters), ws-lines (consisting only of whitespace characters + newline-characters). ;  ; void SkipWSCharacters (std::istream &input);  Skip whitespace characters, but not newline-characters we support ('\r' or '\n'). ;  . Function Documentation. ◆ FillNtupleFromStream(). template<class DataType , class Tuple > . Long64_t ROOT::TreeUtils::FillNtupleFromStream ; (; std::istream & ; inputStream, . Tuple & ; tuple, . char ; delimiter, . bool ; strictMode . ). Function to fill tuples (TNtuple/TNtupleD) from a simple ASCII data file. ; With auto and decltype - we can get rid of DataType parameter :) (or with a simple typedef inside ntuple class). An input file consists of non-empty lines (separated by newline-characters), possibly empty lines, and comments (treated as empty lines). Each non-empty line should contain N numbers - entry for a tuple. Non-strict mode lets you to have newline-characters inside a tuple's row (as it worked in ROOT prior to v5.3xxx). ; Definition at line 80 of file TreeUtils.cxx. ◆ FillNtupleFromStream< Double_t, TNtupleD >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Double_t, TNtupleD > ; (; std::istream & ; , . TNtupleD & ; , . char ; , . bool ;  . ). ◆ FillNtupleFromStream< Float_t, TNtuple >(). template Long64_t ROOT::TreeUtils::FillNtupleFromStream< Float_t, TNtuple > ; (; std::istream & ; , . TNtuple & ; , . char ; , . bool ;  . ). ◆ NextCharacterIsEOL(). bool ROOT::TreeUtils::NextCharacterIsEOL ; (; std::istream & ; input). Either '\r' | '\n' or eof of some problem. ; Definition at line 298 of file TreeUtils.cxx. ◆ SkipComm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html:1738,simpl,simple,1738,doc/master/namespaceROOT_1_1TreeUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TreeUtils.html,2,['simpl'],['simple']
Usability,ream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooCmdArg::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 124 of file RooCmdArg.h. ◆ subArgs() [1/2]. RooLinkedList & RooCmdArg::subArgs ; (; ). inline . Return list of sub-arguments in this RooCmdArg. ; Definition at line 55 of file RooCmdArg.h. ◆ subArgs() [2/2]. RooLinkedList const & RooCmdArg::subArgs ; (; ); const. inline . Return list of sub-arguments in this RooCmdArg. ; Definition at line 52 of file RooCmdArg.h. Member Data Documentation. ◆ _argList. RooLinkedList RooCmdArg::_argList. private . Payload sub-arguments. ; Definition at line 121 of file RooCmdArg.h. ◆ _c. RooArgSet* RooCmdArg::_c = nullptr. private . Payload RooArgSets. ; Definition at line 120 of file RooCmdArg.h. ◆ _d. double RooCmdArg::_d[2]. private . Payload doubles. ; Definition at line 115 of file RooCmdArg.h. ◆ _i. Int_t RooCmdArg::_i[2]. private . Payload integers. ; Definition at line 116 of file RooCmdArg.h. ◆ _none. const RooCmdArg RooCmdArg::_none. staticprivate . Static instance of null object. ; Definition at line 112 of file RooCmdArg.h. ◆ _o. TObject* RooCmdArg::_o[2]. private . Payload objects. ; Definition at line 118 of file RooCmdArg.h. ◆ _prefixSubArgs. bool RooCmdArg::_prefixSubArgs = true. private . Prefix sub-arguments with container name? ; Definition at line 122 of file RooCmdArg.h. ◆ _procSubArgs. bool RooCmdArg::_procSubArgs = false. private . If true argument requires recursive processing. ; Definition at line 119 of file RooCmdArg.h. ◆ _s. std::string RooCmdArg::_s[3]. private . Payload strings. ; Definition at line 117 of file RooCmdArg.h. Libraries for RooCmdArg:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooCmdArg.h; roofit/roofitcore/src/RooCmdArg.cxx. RooCmdArg. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCmdArg.html:21345,Guid,Guide,21345,doc/master/classRooCmdArg.html,https://root.cern,https://root.cern/doc/master/classRooCmdArg.html,1,['Guid'],['Guide']
Usability,"ream. ◆ StreamerNVirtual(). void TGTextView::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 141 of file TGTextView.h. ◆ ToObjXCoord(). Long_t TGTextView::ToObjXCoord ; (; Long_t ; xCoord, . Long_t ; line . ). virtual . Convert x screen coordinate to column in specified line. ; Definition at line 392 of file TGTextView.cxx. ◆ ToObjYCoord(). Long_t TGTextView::ToObjYCoord ; (; Long_t ; yCoord). virtual . Convert y screen coordinate to line number. ; Definition at line 384 of file TGTextView.cxx. ◆ ToScrXCoord(). Long_t TGTextView::ToScrXCoord ; (; Long_t ; xCoord, . Long_t ; line . ). virtual . Convert column number in specified line to screen coordinate. ; Definition at line 360 of file TGTextView.cxx. ◆ ToScrYCoord(). Long_t TGTextView::ToScrYCoord ; (; Long_t ; yCoord). virtual . Convert line number to screen coordinate. ; Definition at line 346 of file TGTextView.cxx. ◆ UnMark(). void TGTextView::UnMark ; (; ). protectedvirtual . Clear marked region. ; Definition at line 1293 of file TGTextView.cxx. ◆ Update(). void TGTextView::Update ; (; ). virtual . update the whole window of text view ; Definition at line 262 of file TGTextView.cxx. ◆ VLayout(). void TGTextView::VLayout ; (; ). protectedvirtual . Vertical layout of widgets (canvas, scrollbar). ; Definition at line 1377 of file TGTextView.cxx. Member Data Documentation. ◆ fClipText. TGText* TGTextView::fClipText. protected . clipboard text buffer ; Definition at line 26 of file TGTextView.h. ◆ fDNDTypeList. Atom_t* TGTextView::fDNDTypeList. protected . handles DND types ; Definition at line 43 of file TGTextView.h. ◆ fFont. FontStruct_t TGTextView::fFont. protected . text font ; Definition at line 27 of file TGTextView.h. ◆ fgDefaultFont. const TGFont * TGTextView::fgDefaultFont = nullptr. staticprotected . Definition at line 45 of file TGTextView.h. ◆ fgDefaultGC. TGGC * TGTextView::fgDefaultGC = nullptr. staticprotected . Definition at line 46 of file TGTextView.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:54415,Clear,Clear,54415,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,1,['Clear'],['Clear']
Usability,"reamer(). void RooPolynomial::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooPolynomial::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file RooPolynomial.h. ◆ translate(). void RooPolynomial::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 114 of file RooPolynomial.cxx. ◆ x(). RooAbsReal const & RooPolynomial::x ; (; ); const. inline . Get the x variable. ; Definition at line 39 of file RooPolynomial.h. Member Data Documentation. ◆ _coefList. RooListProxy RooPolynomial::_coefList. protected . Definition at line 57 of file RooPolynomial.h. ◆ _lowestOrder. Int_t RooPolynomial::_lowestOrder = 1. protected . Definition at line 58 of file RooPolynomial.h. ◆ _wksp. std::vector<double> RooPolynomial::_wksp. mutableprotected . Definition at line 60 of file RooPolynomial.h. ◆ _x. RooRealProxy RooPolynomial::_x. protected . Definition at line 56 of file RooPolynomial.h. Libraries for RooPolynomial:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooPolynomial.h; roofit/roofit/src/RooPolynomial.cxx. RooPolynomial. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:81341,Guid,Guide,81341,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['Guid'],['Guide']
Usability,"reamer(). void TKeyXML::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TKey. ◆ StreamerNVirtual(). void TKeyXML::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TKeyXML.h. ◆ UpdateAttributes(). void TKeyXML::UpdateAttributes ; (; ). update key attributes in key node ; Definition at line 203 of file TKeyXML.cxx. ◆ UpdateObject(). void TKeyXML::UpdateObject ; (; TObject * ; obj). updates object, stored in the node Used for TDirectory data update ; Definition at line 218 of file TKeyXML.cxx. ◆ WriteFile(). Int_t TKeyXML::WriteFile ; (; Int_t ; cycle = 1, . TFile * ; f = nullptr . ). inlinefinalvirtual . Write the encoded object supported by this key. ; The function returns the number of bytes committed to the file. If a write error occurs, the number of bytes returned is -1. ; Reimplemented from TKey.; Definition at line 57 of file TKeyXML.h. ◆ XMLEngine(). TXMLEngine * TKeyXML::XMLEngine ; (; ). protected . return pointer on TXMLEngine object, used for xml conversion ; Definition at line 389 of file TKeyXML.cxx. ◆ XmlReadAny(). void * TKeyXML::XmlReadAny ; (; void * ; obj, . const TClass * ; expectedClass . ). protected . read object from key and cast to expected class ; Definition at line 334 of file TKeyXML.cxx. Member Data Documentation. ◆ fKeyId. Long64_t TKeyXML::fKeyId {0}. protected . node with stored object ; Definition at line 77 of file TKeyXML.h. ◆ fKeyNode. XMLNodePointer_t TKeyXML::fKeyNode {nullptr}. protected . Definition at line 76 of file TKeyXML.h. ◆ fSubdir. Bool_t TKeyXML::fSubdir {kFALSE}. protected . unique identifier of key for search methods ; Definition at line 78 of file TKeyXML.h. Libraries for TKeyXML:. [legend]; The documentation for this class was generated from the following files:; io/xml/inc/TKeyXML.h; io/xml/src/TKeyXML.cxx. TKeyXML. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyXML.html:25935,Guid,Guide,25935,doc/master/classTKeyXML.html,https://root.cern,https://root.cern/doc/master/classTKeyXML.html,1,['Guid'],['Guide']
Usability,"reamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. ULong_t_max!; RooNameSet_name1!; RooNameSet_name2!; ULong_t_next!; map<pair<const RooArgSet*,const RooArgSet*>,unsigned long>_pairToIdx!; vector<pair<const RooArgSet*,const RooArgSet*> >_pairs!; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(ULong_t max = 32). ~RooNormSetCache(); Destructor. void clear(); Clear contents. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. RooNormSetCache(ULong_t max = 32). Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); Match range name first. Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); { return (index(set1,set2,set2RangeName) >= 0); }. Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _pairs.empty()?0:_pairs.back().first; }. const RooArgSet* lastSet2() const; { return _pairs.empty()?0:_pairs.back().second; }. const RooNameSet& nameSet1() const; { return _name1; }. const RooNameSet& nameSet2() const; { return _name2; }. Int_t entries() const; { return _pairs.size(); }. void initialize(const RooNormSetCache& other); { clear(); *this = other; }. » Last changed: Tue Mar 10 17:18:10 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNormSetCache.html:3729,clear,clear,3729,root/html534/RooNormSetCache.html,https://root.cern,https://root.cern/root/html534/RooNormSetCache.html,1,['clear'],['clear']
Usability,"reases opportunity for reuse of design. 1.5 Installing ROOT. To install ROOT you have the choice to download the binaries or the source. The source is quicker to transfer since it is only ~22 MB, but you will need to compile and link it. The binaries compiled with no debug information range from ~35 MB to ~45 MB depending on the target platform.; The installation and building of ROOT is described in Appendix A: Install and Build ROOT. You can download the binaries, or the source. The GNU g++ compiler on most UNIX platforms can compile ROOT.; Before downloading a binary version make sure your machine contains the right run-time environment. In most cases it is not possible to run a version compiled with, e.g., gcc4.0 on a platform where only gcc 3.2 is installed. In such cases you’ll have to install ROOT from source.; ROOT is currently running on the following platforms: supported platforms. GNU/Linux x86-32 (IA32) and x86-64 (AMD64)(GCC,Intel/icc, Portland/PGCC,KAI/KCC); Intel Itanium (IA64) GNU/Linux (GCC, Intel/ecc, SGI/CC); FreeBSD and OpenBSD (GCC); GNU/Hurd (GCC); HP HP-UX 10.x (IA32) and 11 (IA64) (HP CC, aCC, GCC); IBM AIX 4.1 (xlC compiler, GCC); Sun Solaris for SPARC (SUN C++ compiler, GCC); Sun Solaris for x86 (SUN C++ compiler, KAI/KCC); Compaq Alpha (GCC, KAI/KCC, DEC/CXX); SGI Irix 32 and 64 bits (GCC, KAI/KCC, SGI C++ compiler); Windows >= 95 (Microsoft Visual C++ compiler, Cygwin/GCC); MacOS X PPC, x86-32, x86-64 (GCC, Intel/ICC, IBM/xl); PowerPC with GNU/Linux and GCC, Debian v2; PowerPC64 with GNU/Linux and GCC; ARM with GNU/Linux and GCC; LynxOS. 1.6 The Organization of the ROOT Framework; Now after we know in abstract terms what the ROOT framework is, let us look at the physical directories and files that come with the ROOT installation. You may work on a platform where your system administrator has already installed ROOT. You will need to follow the specific development environment for your setup and you may not have write access to the directorie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:15494,UX,UX,15494,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['UX'],['UX']
Usability,"reate WM dependent application environment; 284 if (fAppImp); 285 delete fAppImp;; 286 fAppImp = gGuiFactory->CreateApplicationImp(gROOT->GetName(), &fArgc, fArgv);; 287 if (!fAppImp) {; 288 MakeBatch();; 289 fAppImp = gGuiFactory->CreateApplicationImp(gROOT->GetName(), &fArgc, fArgv);; 290 }; 291 }; 292 ; 293 // Create the canvas colors early so they are allocated before; 294 // any color table expensive bitmaps get allocated in GUI routines (like; 295 // creation of XPM bitmaps).; 296 TColor::InitializeColors();; 297 ; 298 // Hook for further initializing the WM dependent application environment; 299 Init();; 300 ; 301 // Set default screen factor (if not disabled in rc file); 302 if (!only_web && gEnv->GetValue(""Canvas.UseScreenFactor"", 1)) {; 303 Int_t x, y;; 304 UInt_t w, h;; 305 if (gVirtualX) {; 306 gVirtualX->GetGeometry(-1, x, y, w, h);; 307 if (h > 0); 308 gStyle->SetScreenFactor(0.001 * h);; 309 }; 310 }; 311}; 312 ; 313////////////////////////////////////////////////////////////////////////////////; 314/// Clear list containing macro files passed as program arguments.; 315/// This method is called from TRint::Run() to ensure that the macro; 316/// files are only executed the first time Run() is called.; 317 ; 318void TApplication::ClearInputFiles(); 319{; 320 if (fFiles) {; 321 fFiles->Delete();; 322 SafeDelete(fFiles);; 323 }; 324}; 325 ; 326////////////////////////////////////////////////////////////////////////////////; 327/// Return specified argument.; 328 ; 329char *TApplication::Argv(Int_t index) const; 330{; 331 if (fArgv) {; 332 if (index >= fArgc) {; 333 Error(""Argv"", ""index (%d) >= number of arguments (%d)"", index, fArgc);; 334 return nullptr;; 335 }; 336 return fArgv[index];; 337 }; 338 return nullptr;; 339}; 340 ; 341////////////////////////////////////////////////////////////////////////////////; 342/// Get and handle command line options. Arguments handled are removed; 343/// from the argument array. See CommandLineOptionsHelp.h for options",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:11230,Clear,Clear,11230,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['Clear'],['Clear']
Usability,"reate a histogram with the desired axis range first. Draw the empty histogram and then draw the graph using the existing axis from the histogram.; {; c1 = new TCanvas(""c1"",""A Zoomed Graph"",200,10,700,500);; hpx = new TH2F(""hpx"",""Zoomed Graph Example"",10,0,0.5,10,1.0,8.0);; hpx->SetStats(kFALSE); // no statistics; hpx->Draw();; Int_t n = 10;; Double_t x[n] = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; gr = new TGraph(n,x,y);; gr->SetMarkerColor(4);; gr->SetMarkerStyle(20);; gr->Draw(""LP"");// and draw it without an axis; }; The next example is the same graph as above with a zoom in the x and y directions. A zoomed graph. 4.15 The User Interface for Graphs; The class TGraphEditor provides the user interface for setting the following graph attributes interactively:. Title text entry field … sets the title of the graph.; Shape radio button group - sets the graph shapes:. No Line: draw unconnected points;; Smooth Line: a smooth curve;; Simple Line: a simple poly-line;; Bart Chart: a bar chart at each point.; Fill Area: a fill area is drawn. Show Marker - sets markers as visible or invisible.; Exclusion Zone - specifies the exclusion zone parameters :. ’+-‘ check button: sets on which side of the line the exclusion zone will be drawn;; Width combo box: defines the width of the zone. 5 Fitting Histograms; To fit a histogram you can use the Fit Panel on a visible histogram via the context menu, or you can use the TH1::Fit method. The Fit Panel, which is limited, is best for prototyping. The histogram needs to be drawn in a pad before the Fit Panel is invoked. The method TH1::Fit is more powerful and is used in scripts and programs.; 5.1 The Fit Method; The Fit method is implemented in ROOT for the histogram classes TH1, the sparse histogram classes, THnSparse, the graph classes, TGraph, TGraph2D and TMultiGraph for fitting a collection of Graphs with the same function.; 5.1.1 The TH1::Fit Method; To fit a histogram program",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:162884,Simpl,Simple,162884,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"reated by CheckBoundaryErrors method. ;  ; void CheckGeometry (Option_t *option="""");  Perform last checks on the geometry. ;  ; void CheckGeometryFull (Int_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"");  Geometry checking. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check all geometry for illegal overlaps within a limit OVLP. ;  ; Bool_t CheckPath (const char *path) const;  Check if a geometry path is valid without changing the state of the current navigator. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.);  Classify a given point. See TGeoChecker::CheckPoint(). ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option);  Test for shape navigation methods. ;  ; void CleanGarbage ();  Clean temporary volumes and shapes from garbage collection. ;  ; void ClearAttributes ();  Reset all attributes to default ones. ;  ; void ClearNavigators ();  Clear all navigators. ;  ; void ClearOverlaps ();  Clear the list of overlaps. ;  ; void ClearPhysicalNodes (Bool_t mustdelete=kFALSE);  Clear the current list of physical nodes, so that we can start over with a new list. ;  ; void ClearShape (const TGeoShape *shape);  Remove a shape from the list of shapes. ;  ; void ClearThreadData () const;  ; void ClearTracks ();  ; void CloseGeometry (Option_t *option=""d"");  Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ;  ; void ConvertReflections ();  Convert all reflections in geometry to normal rotations + reflected shapes. ;  ; void CountLevels ();  Count maximum number of nodes per volume, maximum depth and maximum number of xtru vertices. ;  ; Int_t CountNodes (const TGeoVolume *vol=nullptr, Int_t nlevels=10000, Int_t option=0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:23795,Clear,ClearNavigators,23795,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,2,['Clear'],"['Clear', 'ClearNavigators']"
Usability,"reated with bounds [1,10]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_expo_expoData_right' created with bounds [20,30]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(expo_over_expo_Int[x|left,right]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_expo_over_expo_Int[x|left,right]_expoData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; Now plotting with unique normalisation for each slice.; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'full', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'left', curve is normalized to data in given range; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'right', curve is normalized to data in given range; ; ; Now plotting with correct norm ranges:; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'left'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalized using explicit choice of ranges 'left,right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalized using explicit choice of ranges 'left,right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) only plotting range 'full'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(expo) p.d.f. curve is normalized using explicit choice of ranges 'left,right'; DateMarch 2020 ; AuthorStephan Hageboeck ; Definition in file rf212_plottingInRanges_blinding.C. tutorialsroofitrf212_plottingInRanges_blinding.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8C.html:9028,Guid,Guide,9028,doc/master/rf212__plottingInRanges__blinding_8C.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8C.html,1,['Guid'],['Guide']
Usability,"rebinned bin number. ;  ; TGNumberEntryField * fBinNumberEntry1;  Label which shows the rebinned bin number for ntuple histogram. ;  ; TGHSlider * fBinOffsetSld;  Add an offset to the origin of the histogram. ;  ; TGHSlider * fBinSlider;  Slider to set rebinning integer value. ;  ; TGHSlider * fBinSlider1;  Slider to set rebinning integer value for ntuple histogram. ;  ; TGTextButton * fCancel;  Cancel-Button to reprobate the rebinned histogram. ;  ; TGComboBox * fCoordsCombo;  Coordinate System combo box. ;  ; TGCheckButton * fDelaydraw;  Delayed drawing of the new axis range. ;  ; TGRadioButton * fDim;  2D-Plot RadioButton ;  ; TGRadioButton * fDim0;  3D-Plot RadioButton ;  ; TGLayoutHints * fDim0lh;  layout hints for 3D-Plot RadioButton ;  ; TGHButtonGroup * fDimGroup;  Radiobuttongroup to change 2D <-> 3D-Plot. ;  ; TGLayoutHints * fDimlh;  layout hints for 2D-Plot RadioButton ;  ; TGComboBox * fErrorCombo;  Error combo box. ;  ; TH1 * fHist;  histogram object ;  ; TGCheckButton * fHistOnOff;  Draw a simple histogram with default options. ;  ; TGCheckButton * fMakeHBar;  Draw Horizontal Bar Chart. ;  ; TGNumberEntryField * fOffsetNumberEntry;  Shows the offset to the origin of the histogram. ;  ; TGComboBox * fPercentCombo;  Percentage of the Bar which is drawn in a different color. ;  ; Bool_t fSameOpt;  flag for option ""same"" ;  ; TGNumberEntryField * fSldMax;  Contains the maximum value of the x-Axis. ;  ; TGNumberEntryField * fSldMin;  Contains the minimum value of the x-Axis. ;  ; TGDoubleHSlider * fSlider;  Slider to set x-axis range. ;  ; TGTextEntry * fTitle;  histogram title input field ;  ; Int_t fTitlePrec;  font precision level ;  ; TGComboBox * fTypeCombo;  histogram type combo box ;  ;  Protected Attributes inherited from TGedFrame; Bool_t fAvoidSignal;  flag for executing slots ;  ; TList * fExtraTabs;  addtional tabs in ged editor ;  ; TGedEditor * fGedEditor;  manager of this frame ;  ; Bool_t fInit;  init flag for setting signals/slots ;  ; TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:34723,simpl,simple,34723,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['simpl'],['simple']
Usability,"recatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProof (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProof () override;  Clean up PROOF environment. ;  ; Int_t ActivateWorker (const char *ord, Bool_t save=kTRUE);  Make sure that the worker identified by the ordinal number 'ord' is in the active list. ;  ; void AddChain (TChain *chain);  Add chain to data set. ;  ; Int_t AddDynamicPath (const char *libpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'libpath' to the lib path search. ;  ; void AddFeedback (const char *name);  Add object to feedback list. ;  ; Int_t AddIncludePath (const char *incpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects that might be needed during the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; virtual Bool_t CancelStagingDataSet (const char *dataset);  Cancels a dataset staging request. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:3182,feedback,feedback,3182,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['feedback'],['feedback']
Usability,"receded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C+",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:7511,Learn,Learning,7511,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['Learn'],['Learning']
Usability,"receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGTextView.h>. Inheritance diagram for TViewTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TViewTimer() [1/2]. TViewTimer::TViewTimer ; (; const TViewTimer & ; ). privatedelete . ◆ TViewTimer() [2/2]. TViewTimer::TViewTimer ; (; TGView * ; t, . Long_t ; ms . ). inline . Definition at line 153 of file TGTextView.h. Member Function Documentation. ◆ Notify(). Bool_t TViewTimer::Notify ; (; ). overridevirtual . Notify when timer times out and reset the timer. ; Reimplemented from TTimer.; Definition at line 60 of file TGTextView.cxx. ◆ operator=(). TViewTimer & TViewTimer::operator= ; (; const TViewTimer & ; ). privatedelete . Member Data Documentation. ◆ fView. TGView* TViewTimer::fView. private . Definition at line 147 of file TGTextView.h. Libraries for TViewTimer:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTextView.h; gui/gui/src/TGTextView.cxx. TViewTimer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewTimer.html:18233,Guid,Guide,18233,doc/master/classTViewTimer.html,https://root.cern,https://root.cern/doc/master/classTViewTimer.html,1,['Guid'],['Guide']
Usability,"recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. Int_t SetBufferSize(Int_t buffersize); Change the underlying buffer size of the cache.; If the change of size means some cache content is lost, or if the buffer; is now larger, setup for a cache refill the next time there is a read; Returns 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will cr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:26553,learn,learning,26553,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['learn'],['learning']
Usability,"recorder is divided into 4 classes according to the current state of recorder.; Internally, there is a pointer to TRecorderState object. This object changes whenever state of recorder is changed. States of recorder are the following:. INACTIVE Implemented in TRecorderInactive class. Default state after TRecorder object is created.; RECORDING Implemented in TRecorderRecording class.; REPLAYING Implemented in TRecorderReplaying class.; PAUSED Implemented in TRecorderPause class. Pause of replaying. Every command for TRecorder is just passed to TRecordeState object. Depending on the current state of recorder, this command is passed to some of the above mentioned classes and if valid, handled there.; Switching between states is not possible from outside. States are switched directly by state objects via:; ChangeState(TRecorderState* newstate, Bool_t deletePreviousState);; When recorder is switched to a new state, the old state object is typically deleted. The only exception is switching from REPLAYING state to PAUSED state. The previous state (REPLAYING) is not deleted in order to be used again after TRecorder::Resume call. STATE TRANSITIONS:. INACTIVE -> RECORDING via TRecorder::Start (Starts recording); RECORDING -> INACTIVE via TRecorder::Stop (Stops recording); INACTIVE -> REPLAYING via TRecorder::Replay (Starts replaying); REPLAYING -> INACTIVE via TRecorder::ReplayStop (Stops replaying); REPLAYING -> PAUSED via TRecorder::Pause (Pause replaying); PAUSED -> REPLAYING via TRecorder::Resume (Resumes replaying); PAUSED -> INACTIVE via TRecorder::ReplayStop (Stops paused replaying) . Definition at line 265 of file TRecorder.h. Public Types; enum  ERecorderState { kInactive; , kRecording; , kPaused; , kReplaying; };  ; enum  EReplayModes { kRealtime; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:1621,PAUSE,PAUSED,1621,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['PAUSE'],['PAUSED']
Usability,"red quantities X, Y, Z and T can always be visualized by a four-dimensional histogram or scatter-plot; its representation on the line-printer is not particularly satisfactory, except for sparse data. If T is an unknown (but single-valued) approximate function of X,Y,Z this function is displayed by a profile3D histogram with much better precision than by a scatter-plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for cell I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)); In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell) e(I,J,K) is computed from the average of the s(I,J,K) for all cells, if the static function TProfile3D::Approximate has been called. This simple/crude approximation was suggested in order to keep the cell during a fit operation. But note that this approximation is not the default behaviour.; Example of a profile3D histogram {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; pt = r.Landau(0,1);; hprof3d->Fill(px,py,pz,pt,1);; }; hprof3d->Draw();; }; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TCanvasThe Canvas class.Definition TCanvas.h:23; TProfile3D::TProfile3DTProfile3D()Default constructor for Profile3D histograms.Definition TProfile3D.cxx:76; TRandom3Random number generator class based on M.Definition TRandom3.h:27",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:1546,simpl,simple,1546,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['simpl'],['simple']
Usability,"redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) from; inside of TGTextEdit::DelChar() method, i.e. TQCommand::GetCommand()->SetUndoArgs(1, somechar);. void Delete(Option_t* option = """"); If ""opt"" is not zero delete every merged command which option string is; equal to ""opt"". If ""opt"" is zero - delete all merged commands. Bool_t CanMerge(TQCommand* c) const; Two commands can be merged if they can be composed into; a single command (Macro command). To allow merging commands user might override this function. void Merge(TQCommand* c); Add command to the list of merged commands.; This make it possible to group complex actions together so an end user; can un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:19203,undo,undo,19203,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,6,['undo'],['undo']
Usability,"ree * ; dt . ). private . The AdaBoost implementation. ; a new training sample is generated by weighting events that are misclassified by the decision tree. The weight applied is \( w = \frac{(1-err)}{err} \) or more general: \( w = (\frac{(1-err)}{err})^\beta \) where \(err\) is the fraction of misclassified events in the tree ( <0.5 assuming demanding the that previous selection was better than random guessing) and ""beta"" being a free parameter (standard: beta = 1) that modifies the boosting. ; Definition at line 1845 of file MethodBDT.cxx. ◆ AdaBoostR2(). Double_t TMVA::MethodBDT::AdaBoostR2 ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . Adaption of the AdaBoost to regression problems (see H.Drucker 1997). ; Definition at line 2192 of file MethodBDT.cxx. ◆ AdaCost(). Double_t TMVA::MethodBDT::AdaCost ; (; std::vector< const TMVA::Event * > & ; eventSample, . DecisionTree * ; dt . ). private . The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for all events... later could be modified to use individual cost matrices for each events as in the original paper... ; true_signal true_bkg; ----------------------------------; sel_signal | Css Ctb_ss Cxx.. in the range [0,1]; sel_bkg | Cts_sb Cbb; and takes this into account when calculating the mis class. cost (former: error fraction): err = sum_events ( weight* y_true*y_sel * beta(event) . Definition at line 2023 of file MethodBDT.cxx. ◆ AddWeightsXMLTo(). void TMVA::MethodBDT::AddWeightsXMLTo ; (; void * ; parent); const. virtual . Write weights to XML. ; Implements TMVA::MethodBase.; Definition at line 2309 of file MethodBDT.cxx. ◆ ApplyPreselectionCuts(). Double_t TMVA::MethodBDT::ApplyPreselectionCuts ; (; const Event * ; ev). private . Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ; . --> -1 for background +1 for Signal ; Definition at line 3132 of file MethodBDT.cxx. ◆ Bagging(). Double_t TMVA::MethodB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:43267,simpl,simple,43267,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['simpl'],['simple']
Usability,"ree header request. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:1551,feedback,feedback,1551,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,1,['feedback'],['feedback']
Usability,"ree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawEntryList(); TProofDrawEntryList(const TProofDrawEntryList&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawEntryList.html:5855,Clear,ClearFormula,5855,root/html602/TProofDrawEntryList.html,https://root.cern,https://root.cern/root/html602/TProofDrawEntryList.html,2,['Clear'],['ClearFormula']
Usability,"ree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawEventList(); TProofDrawEventList(const TProofDrawEventList&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawEventList.html:5855,Clear,ClearFormula,5855,root/html602/TProofDrawEventList.html,https://root.cern,https://root.cern/root/html602/TProofDrawEventList.html,2,['Clear'],['ClearFormula']
Usability,"ree.C Copy a subset of a Tree to a new Tree ;  copytree2.C Copy a subset of a Tree to a new Tree, one branch in a separate file ;  copytree3.C Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries ;  drawsparse.C Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord ;  h1analysis.C Example of analysis class for the H1 data ;  h1analysis.h;  h1analysisProxy.CExample of analysis class for the H1 data using code generated by MakeProxy ;  h1analysisProxy.h;  h1analysisProxyCut.C;  h1analysisTreeReader.C;  h1analysisTreeReader.h;  h1chain.C Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed ;  hsimpleProxy.C ;  hsimpleProxyDriver.C This is the driver of the hsimpleProxy example It provides the infrastructure to run that code on an ntuple To be run from the tutorials directory ;  hsimpleReader.C TTreeReader simplest example ;  htest.C Save histograms in Tree branches ;  hvector.C Write and read STL vectors in a tree ;  JetEvent.cxx;  JetEvent.h;  jets.CUsage of a Tree using the JetEvent class ;  ntuple1.C Simple tree analysis ;  parallelcoord.C Script illustrating the use of the TParalleCoord class ;  parallelcoordtrans.C Use of transparency with ||-Coord ;  printSizes.C This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree ;  run_h1analysis.C Macro driving the analysis can specify file name and type ;  spider.C TSpider example ;  staff.C Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  tcl.C How to write a TClonesArray to a TTree ;  tree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:156231,simpl,simplest,156231,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,4,['simpl'],['simplest']
Usability,"ree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  box.cxxThis ROOT 7 example ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:170329,Simpl,Simple,170329,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['Simple']
Usability,"ree.C Display the Tree data structures ;  tree0.C Simple Event class example ;  tree1.C This example is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct - without a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:163776,Simpl,Simple,163776,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['Simpl'],['Simple']
Usability,"ree.cxx:9374; TTree::InitializeBranchListsvoid InitializeBranchLists(bool checkLeafCount)Divides the top-level branches into two vectors: (i) branches to be processed sequentially and (ii) b...Definition TTree.cxx:5781; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::fClusterSizeLong64_t * fClusterSize[fNClusterRange] Number of entries in each cluster for a given range.Definition TTree.h:104; TTree::fFlushedBytesLong64_t fFlushedBytesNumber of auto-flushed bytes.Definition TTree.h:89; TTree::SetPerfStatsvirtual void SetPerfStats(TVirtualPerfStats *perf)Set perf stats.Definition TTree.cxx:9329; TTree::GetVar2TTreeFormula * GetVar2()Definition TTree.h:568; TTree::fIMTTotBytesstd::atomic< Long64_t > fIMTTotBytes! Total bytes for the IMT flush basketsDefinition TTree.h:160; TTree::SetCacheLearnEntriesvirtual void SetCacheLearnEntries(Int_t n=10)Interface to TTreeCache to set the number of entries for the learning phase.Definition TTree.cxx:8865; TTree::SetBranchAddressInt_t SetBranchAddress(const char *bname, T *add, TBranch **ptr=nullptr)Definition TTree.h:637; TTree::SetTargetMemoryRatiovoid SetTargetMemoryRatio(Float_t ratio)Definition TTree.h:692; TTree::fEntryListTEntryList * fEntryList! Pointer to event selection list (if one)Definition TTree.h:126; TTree::GetTreeIndexvirtual TVirtualIndex * GetTreeIndex() constDefinition TTree.h:558; TTree::DebugInt_t Debug() constDefinition TTree.h:429; TTree::fExternalFriendsTList * fExternalFriends! List of TFriendsElement pointing to us and need to be notified of LoadTree. Content not owned.Definition TTree.h:131; TTree::Mergevirtual Long64_t Merge(TCollection *list, Option_t *option="""")Merge the trees in the TList into this tree.Definition TTree.cxx:6890; TTree::SetMaxVirtualSizevirtual void SetMaxVirtualSize(Long64_t size=0)Definition TTree.h:665; TTree::DropBasketsvirtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:66717,learn,learning,66717,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['learn'],['learning']
Usability,"ree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000. You can use the option ""goff"" to turn off the graphics output; of TTree::Draw in the above example. Automatic interface to TTree::Draw via the TTreeViewer. A complete graphical interface to this function is implemented; in the class TTreeViewer.; To start the TTreeViewer, three possibilities:; - select TTree context menu item ""StartViewer""; - type the command ""TTreeViewer TV(treeName)""; - execute statement ""tree->StartViewer();"". void DropBaskets(); Remove some baskets from memory. void DropBuffers(Int_t nbytes); Drop branch buffers to accomodate nbytes below MaxVirtualsize. Int_t Fill(); Fill all branches. This function loops on all the branches of this tree. For; each branch, it copies to the branch buffer (basket) the current; values of the leaves data types. If a leaf is a simple data type,; a simple conversion to a machine independent format has to be done. This machine independent version of the data is copied into a; basket (each branch has its own basket). When a basket is full; (32k worth of data by default), it is then optionally compressed; and written to disk (this operation is also called comitting or; 'flushing' the basket). The committed baskets are then; immediately removed from memory. The function returns the number of bytes committed to the; individual branches. If a write error occurs, the number of bytes returned is -1. If no data are written, because, e.g., the branch is disabled,; the number of bytes returned is 0. The baskets are flushed and the Tree header saved at regular intervals. At regular intervals, when the amount of data written so far is; greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk.; This makes future reading faster as it guarantees that baskets belonging to nearby; entries will be on the same disk region.; When the first ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:85349,simpl,simple,85349,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,4,['simpl'],['simple']
Usability,"reeprotectedvirtual; Browse(TBrowser *b) overrideTNtuplevirtual; BuildIndex(const char *majorname, const char *minorname=""0"")TTreevirtual; BuildStreamerInfo(TClass *cl, void *pointer=nullptr, bool canOptimize=true)TTree; ChangeFile(TFile *file)TTreevirtual; CheckBranchAddressType(TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr)TTreeprotectedvirtual; CheckedHash()TObjectinline; Class()TNtuplestatic; Class_Name()TNtuplestatic; Class_Version()TNtupleinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneTree(Long64_t nentries=-1, Option_t *option="""") overrideTNtuplevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; TNamed::Copy(TObject &named) const overrideTNamedvirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CopyAddresses(TTree *, bool undo=false)TTreevirtual; CopyEntries(TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false)TTreevirtual; CopyTree(const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; CreateBasket(TBranch *)TTreevirtual; Debug() constTTreeinline; DeclFileName()TNtupleinlinestatic; Delete(Option_t *option="""") overrideTTreevirtual; DirectoryAutoAdd(TDirectory *)TTreevirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *opt) overrideTTreeinlinevirtual; Draw(const char *varexp, const TCut &selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)TTreevirtual; Draw(const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firsten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple-members.html:4230,undo,undo,4230,doc/master/classTNtuple-members.html,https://root.cern,https://root.cern/doc/master/classTNtuple-members.html,1,['undo'],['undo']
Usability,"rees are (or will be) created. ;  ; virtual void WriteTrees ();  Does nothing here ... reimplemented in sub-classes. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:1935,Clear,Clear,1935,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html,1,['Clear'],['Clear']
Usability,"rees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidAddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCanEditElement() const; virtual Bool_tTEveGeoNode::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveGeoNode::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplyS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoTopNode.html:2166,Clear,Clear,2166,root/html528/TEveGeoTopNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoTopNode.html,6,['Clear'],['Clear']
Usability,"ref=""http://www.cplusplus.com/reference/random/ranlux48/"">std::ranlux48</a>). The drawback of this generator is its; 58slow generation time.; 59- TRandom2 is based on the Tausworthe generator of L'Ecuyer, and it has the advantage; 60of being fast and using only 3 words (of 32 bits) for the state. The period however is not impressively long, it is; 6110**26.; 62 ; 63Using the template TRandomGen class (template on the contained Engine type), it is possible to add any generator based; 64on the standard C++ random library (see the C++ <a href=""http://www.cplusplus.com/reference/random/"">random</a>; 65documentation.) or different variants of the MIXMAX generator using the ROOT::Math::MixMaxEngine. Some of the listed; 66generator above (e.g. TRandomMixMax256 or TRandomMT64) are convenient typedef's of generator built using the template; 67TRandomGen class.; 68 ; 69Please note also that this class (TRandom) implements also a very simple generator (linear congruential) with period =; 70\f$10^9\f$, known to have defects (the lower random bits are correlated) and it is failing the majority of the random; 71number generator tests. Therefore it should NOT be used in any statistical study.; 72 ; 73The following table shows some timings (in nanoseconds/call); 74for the random numbers obtained using a macbookpro 2.6 GHz Intel Core i7 CPU:; 75 ; 76 ; 77- TRandom 3 ns/call (but this is a very BAD Generator, not to be used); 78- TRandom2 5 ns/call; 79- TRandom3 5 ns/call; 80- ::TRandomMixMax 6 ns/call; 81- ::TRandomMixMax17 6 ns/call; 82- ::TRandomMT64 9 ns/call; 83- ::TRandomMixMax256 10 ns/call; 84- ::TRandomRanluxpp 14 ns/call; 85- ::TRandom1 80 ns/call; 86- ::TRandomRanlux48 250 ns/call; 87 ; 88The following methods are provided to generate random numbers distributed according to some basic distributions:; 89 ; 90- Exp(Double_t tau); 91- Integer(UInt_t imax); 92- Gaus(Double_t mean, Double_t sigma); 93- Rndm(); 94- Uniform(Double_t); 95- Landau(Double_t mean, Double_t sigma); 96-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom_8cxx_source.html:5385,simpl,simple,5385,doc/master/TRandom_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom_8cxx_source.html,1,['simpl'],['simple']
Usability,"reface; 1 Introduction; 2 Getting Started; 3 Histograms; 4 Graphs; 5 Fitting Histograms; 6 A Little C++; 7 The C++ Interpreter Cling; 8 Object Ownership; 9 Graphics and the Graphical User Interface; 10 Folders and Tasks; 11 Input/Output; 12 Trees; 13 Math Libraries in ROOT; 14 Linear Algebra in ROOT; 15 Adding a Class; 16 Collection Classes; 17 Physics Vectors; 18 The Geometry Package; 19 Python Interface; 20 The Tutorials and Tests; 21 Example Analysis; 22 Networking; 23 Threads; 24 PROOF: Parallel Processing; 25 Writing a Graphical User Interface; 26 The Signal/Slot Communication Mechanism; 27 Automatic HTML Documentation; 28 Appendix A: Install and Build ROOT. WARNING: This documentation is not maintained anymore. Some part might be obsolete or wrong, some part might be missing but still some valuable information can be found there. Instead please refer to the ROOT Reference Guide and the ROOT Manual. If you think some information should be imported in the ROOT Reference Guide or in the ROOT Manual, please post your request to the ROOT Forum or via a Github Issue. Preface; In late 1994, we decided to learn and investigate Object Oriented programming and C++ to better judge the suitability of these relatively new techniques for scientific programming. We knew that there is no better way to learn a new programming environment than to use it to write a program that can solve a real problem. After a few weeks, we had our first histogramming package in C++. A few weeks later we had a rewrite of the same package using the, at that time, very new template features of C++. Again, a few weeks later we had another rewrite of the package without templates since we could only compile the version with templates on one single platform using a specific compiler. Finally, after about four months we had a histogramming package that was faster and more efficient than the well-known FORTRAN based HBOOK histogramming package. This gave us enough confidence in the new technologies to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1032,Guid,Guide,1032,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX.; Definition at line 4350 of file TGCocoa.mm. Member Data Documentation. ◆ fAtomToName. std::vector<std::string> TGCocoa::fAtomToName. private . Definition at line 459 of file TGCocoa.h. ◆ fCocoaDraw. Int_t TGCocoa::fCocoaDraw. protected . Definition at line 445 of file TGCocoa.h. ◆ fDirectDraw. bool TGCocoa::fDirectDraw. protected . Definition at line 448 of file TGCocoa.h. ◆ fDisplayRect. ROOT::MacOSX::X11::Rectangle TGCocoa::fDisplayRect. mutableprivate . Definition at line 466 of file TGCocoa.h. ◆ fDisplayShapeChanged. bool TGCocoa::fDisplayShapeChanged. mutableprivate . Definition at line 465 of file TGCocoa.h. ◆ fDrawMode. EDrawMode TGCocoa::fDrawMode. protected . Definition at line 447 of file TGCocoa.h. ◆ fForegroundProcess. bool TGCocoa::fForegroundProcess. private . Definition at line 455 of file TGCocoa.h. ◆ fgDeleteWindowAtom. Atom_t TGCocoa::fgDeleteWindowAtom = 0. static . Definition at line 469 of file TGCocoa.h. ◆ fNameToAtom. ROOT::MacOSX::X11::name_to_atom_map TGCocoa::fNameToAtom. private . Definition at line 458 of file TGCocoa.h. ◆ fPimpl. std::unique_ptr<ROOT::MacOSX::Details::CocoaPrivate> TGCocoa::fPimpl. protected . Definition at line 444 of file TGCocoa.h. ◆ fSelectedDrawable. Drawable_t TGCocoa::fSelectedDrawable. protected . Definition at line 442 of file TGCocoa.h. ◆ fSelectionOwners. std::map<Atom_t, Window_t> TGCocoa::fSelectionOwners. private . Definition at line 461 of file TGCocoa.h. ◆ fSetApp. bool TGCocoa::fSetApp. private . Definition at line 464 of file TGCocoa.h. ◆ fX11Contexts. std::vector<GCValues_t> TGCocoa::fX11Contexts. private . Definition at line 456 of file TGCocoa.h. graf2d/cocoa/inc/TGCocoa.h; graf2d/cocoa/src/TGCocoa.mm. TGCocoa. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:130344,Guid,Guide,130344,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['Guid'],['Guide']
Usability,"rence Guide ; .  . Loading...; Searching...; No Matches. Files ; Net tutorialsTutorials. ; Examples showing the net classes. . Files; file  authclient.C;  This macro should be run together with authserv.C to test authentication between two remote ROOT sessions. ;  ; file  authserv.C;  This macro should be run together with authclient.C to test authentication between two remote ROOT sessions. ;  ; file  fastMergeServer.C;  This script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block. ;  ; file  hclient.C;  Client program which creates and fills a histogram. ;  ; file  hcons.C;  Histogram consumer script. ;  ; file  hprod.C;  Histogram producer script. ;  ; file  hserv.C;  Server program which waits for two clients to connect. ;  ; file  hserv2.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  parallelMergeServer.C;  This script shows how to make a simple iterative server that can accept connections while handling currently open connections. ;  ; file  parallelMergeTest.C;  ; file  pclient.C;  Client program to test parallel sockets. ;  ; file  pserv.C;  Server program to test parallel sockets. ;  ; file  spy.C;  Client program which allows the snooping of objects from a spyserv process. ;  ; file  spyserv.C;  Server program which allows clients, ""spies"", to connect and snoop objects. ;  ; file  TestAuth.C;  Macro test authentication methods stand alone. ;  ; file  testTUDPSocket.C;  As test echo server use udpserver.c in the same directory. ;  ; file  treeClient.C;  Client program which creates and fills 2 histograms and a TTree. ;  ; file  TUriTest.C;  Rudimentary TUri test macro. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__net.html:1189,simpl,simple,1189,doc/master/group__tutorial__net.html,https://root.cern,https://root.cern/doc/master/group__tutorial__net.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"rence to read object. ;  ; void ExtractReference (XMLNodePointer_t node, const void *ptr, const TClass *cl);  Analyze if node has ""ref"" attribute and register it to object map. ;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; void PerformPostProcessing ();  Function is converts TObject and TString structures to more compact representation. ;  ; void PerformPreProcessing (const TStreamerElement *elem, XMLNodePointer_t elemnode);  Function is unpack TObject and TString structures to be able read them from custom streamers of this objects. ;  ; TXMLStackObj * PopStack ();  Remove one level from xml stack. ;  ; Bool_t ProcessPointer (const void *ptr, XMLNodePointer_t node);  Add ""ptr"" attribute to node, if ptr is null or if ptr is pointer on object, which is already saved in buffer Automatically add ""ref"" attribute to node, where referenced object is stored. ;  ; TXMLStackObj * PushStack (XMLNodePointer_t current, Bool_t simple=kFALSE);  Add new level to xml stack. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; void SetXML (TXMLEngine *xml);  ; void ShiftStack (const char *info=nullptr);  Shift stack node to next. ;  ; TXMLStackObj * Stack (UInt_t depth=0);  ; XMLNodePointer_t StackNode ();  Return pointer on current xml node. ;  ; Bool_t VerifyAttr (XMLNodePointer_t node, const char *name, const char *value, const char *errinfo=nullptr);  Checks, that attribute of specified name exists and has specified value. ;  ; Bool_t VerifyElemNode (const TStreamerElement *elem);  Checks if stack ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferXML.html:40220,simpl,simple,40220,doc/master/classTBufferXML.html,https://root.cern,https://root.cern/doc/master/classTBufferXML.html,1,['simpl'],['simple']
Usability,"rent attributes. ; Definition at line 3499 of file TGraphPainter.cxx. ◆ PaintGrapHist(). void TGraphPainter::PaintGrapHist ; (; TGraph * ; theGraph, . Int_t ; npoints, . const Double_t * ; x, . const Double_t * ; y, . Option_t * ; chopt . ). overridevirtual . This is a service method used by THistPainter to paint 1D histograms. ; It is not used to paint TGraph.; Input parameters:. npoints : Number of points in X or in Y.; x[npoints] or x[0] : x coordinates or (xmin,xmax).; y[npoints] or y[0] : y coordinates or (ymin,ymax).; chopt : Option. The aspect of the histogram is done according to the value of the chopt. Option Description . ""R"" Graph is drawn horizontally, parallel to X axis. (default is vertically, parallel to Y axis).If option R is selected the user must give 2 values for Y (y[0]=YMIN and y[1]=YMAX) or N values for X, one for each channel. Otherwise the user must give, N values for Y, one for each channel or 2 values for X (x[0]=XMIN and x[1]=XMAX) . ""L"" A simple polyline between every points is drawn. . ""H"" An Histogram with equidistant bins is drawn as a polyline. . ""F"" An histogram with equidistant bins is drawn as a fill area. Contour is not drawn unless chopt='H' is also selected.. . ""N"" Non equidistant bins (default is equidistant). If N is the number of channels array X and Y must be dimensioned as follow: If option R is not selected (default) then the user must give (N+1) values for X (limits of channels) or N values for Y, one for each channel. Otherwise the user must give (N+1) values for Y (limits of channels). or N values for X, one for each channel . ""F1"" Idem as 'F' except that fill area base line is the minimum of the pad instead of Y=0. . ""F2"" Draw a Fill area polyline connecting the center of bins . ""C"" A smooth Curve is drawn. . ""*"" A Star is plotted at the center of each bin. . ""P"" Idem with the current marker. . ""P0"" Idem with the current marker. Empty bins also drawn. . ""B"" A Bar chart with equidistant bins is drawn as fill areas (Conto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:46366,simpl,simple,46366,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['simpl'],['simple']
Usability,"rent buttons' layout. ;  ; file  buttonTest.C;  This macro gives an example of how to set/change text button attributes. ;  ; file  calendar.C;  This macro gives an example of how to use html widget to display tabular data. ;  ; file  CPUMeter.C;  Simple macro showing capabilities of the TGSpeedo widget. ;  ; file  customContextMenu.C;  Example showing how to add a function to the class context menu. ;  ; file  customTH1Fmenu.C;  Example showing how to customize a context menu for a class. ;  ; file  drag_and_drop.C;  This tutorial illustrates how to use drag and drop within ROOT. ;  ; file  exec3.C;  Example of using signal/slot in TCanvas/TPad to get feedback about processed events. ;  ; file  exec_macro.C;  This utility macro executes the macro ""macro"" given as first argument and save a capture in a png file. ;  ; file  games.C;  This macro runs three ""games"" that each nicely illustrate the graphics capabilities of ROOT. ;  ; file  gtreeTableTest.C;  This TableTest class is a simple example of how to use a TGTreeTable. ;  ; file  guilabels.C;  This macro gives an example of how to create different kind of labels and the possibility to enable/disable them. ;  ; file  guitest.C;  Test program for ROOT native GUI classes Exactly like $ROOTSYS/test/guitest.cxx but using the new signal and slots communication mechanism. ;  ; file  guitest_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive GUI operations with the guitest.C macro While replaying the session, several temporary macros (guitest0xx.C) macros will be saved. ;  ; file  guiWithCLING.C;  A simple example of entering CLING commands and having the CLING output in a ROOT GUI application window. ;  ; file  iconAsXPMData.C;  A simple example of creating icon image from XPM data, included into the code. ;  ; file  listBox.C;  This macro gives an example of how to create a list box and how to set and use its multiple selection feature. ;  ; file  mditest.C;  GUI MDI feature",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__gui.html:1537,simpl,simple,1537,doc/master/group__tutorial__gui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__gui.html,1,['simpl'],['simple']
Usability,"rent object ; Reimplemented from TObject.; Definition at line 372 of file TGeoPatternFinder.h. ◆ IsOnBoundary(). Bool_t TGeoPatternCylR::IsOnBoundary ; (; const Double_t * ; point); const. overridevirtual . Checks if the current point is on division boundary. ; Reimplemented from TGeoPatternFinder.; Definition at line 1602 of file TGeoPatternFinder.cxx. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternCylR::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 1654 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternCylR & TGeoPatternCylR::operator= ; (; const TGeoPatternCylR & ; pf). assignment operator ; Definition at line 1585 of file TGeoPatternFinder.cxx. ◆ SavePrimitive(). void TGeoPatternCylR::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 1666 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternCylR::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoPatternCylR::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 372 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternCylR::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 1684 of file TGeoPatternFinder.cxx. Libraries for TGeoPatternCylR:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternCylR. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternCylR.html:18297,Guid,Guide,18297,doc/master/classTGeoPatternCylR.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternCylR.html,1,['Guid'],['Guide']
Usability,"rent threads and starts its own sending threads. ;  ; virtual Bool_t ProcessWS (THttpCallArg *arg)=0;  ; Int_t SendCharStarWS (UInt_t wsid, const char *str);  Send string via given websocket id. ;  ; Int_t SendHeaderWS (UInt_t wsid, const char *hdr, const void *buf, int len);  Send binary data with text header via given websocket id. ;  ; Int_t SendWS (UInt_t wsid, const void *buf, int len);  Send binary data via given websocket id. ;  ; void SetDisabled ();  Disable all processing of websockets, normally called shortly before destructor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpWSHandler.html:4365,Clear,Clear,4365,doc/master/classTHttpWSHandler.html,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html,1,['Clear'],['Clear']
Usability,"rent(TEveElement* re); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjectionAxes.html:2219,Clear,Clear,2219,root/html528/TEveProjectionAxes.html,https://root.cern,https://root.cern/root/html528/TEveProjectionAxes.html,16,['Clear'],['Clear']
Usability,"rent(TObject *obj)TAxisinlinevirtual; SetRange(Int_t first=0, Int_t last=0)TAxisvirtual; SetRangeUser(Double_t ufirst, Double_t ulast)TAxisvirtual; SetTickLength(Float_t length=0.03)TAttAxisvirtual; SetTicks(Option_t *option=""+"")TAxisvirtual; SetTickSize(Float_t size=0.03)TAttAxisinlinevirtual; SetTimeDisplay(Int_t value)TAxisinlinevirtual; SetTimeFormat(const char *format="""")TAxisvirtual; SetTimeOffset(Double_t toffset, Option_t *option=""local"")TAxisvirtual; SetTitle(const char *title="""")TNamedvirtual; SetTitleColor(Color_t color=1)TAttAxisvirtual; SetTitleFont(Style_t font=62)TAttAxisvirtual; SetTitleOffset(Float_t offset=1)TAttAxisvirtual; SetTitleSize(Float_t size=0.04)TAttAxisvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTAxisvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TAxisinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttAxis()TAttAxis; TAxis()TAxis; TAxis(Int_t nbins, Double_t xmin, Double_t xmax)TAxis; TAxis(Int_t nbins, const Double_t *xbins)TAxis; TAxis(const TAxis &axis)TAxis; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UnZoom()TAxisvirtual; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ZoomOut(Double_t factor=0, Double_t offset=0)TAxisvirtual; ~TAttAxis()TAttAxisvirtual; ~TAxis() overrideTAxis; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis-members.html:11715,Guid,Guide,11715,doc/master/classTAxis-members.html,https://root.cern,https://root.cern/doc/master/classTAxis-members.html,1,['Guid'],['Guide']
Usability,"rent-bins, so the errors should not be used blindly to perform any calculation involving several bins, like fitting the histogram. One would need to compute also the bin by bin correlation matrix.; 3 kernels are proposed k5a, k5b and k3a. k5a and k5b act on 5x5 cells (i-2,i-1,i,i+1,i+2, and same for j) k5b is a bit more stronger in smoothing k3a acts only on 3x3 cells (i-1,i,i+1, and same for j). By default the kernel ""k5a"" is used. You can select the kernels ""k5b"" or ""k3a"" via the option argument. If TAxis::SetRange has been called on the x or/and y axis, only the bins in the specified range are smoothed. In the current implementation if the first argument is not used (default value=1).; implementation by David McKee (dmcke.nosp@m.e@ba.nosp@m.ma.ua.nosp@m..edu). Extended by Rene Brun ; Reimplemented from TH1.; Definition at line 2727 of file TH2.cxx. ◆ Streamer(). void TH2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TH2. ; Reimplemented from TH1.; Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TProfile2D, and TProfile2Poly.; Definition at line 2830 of file TH2.cxx. ◆ StreamerNVirtual(). void TH2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 133 of file TH2.h. Member Data Documentation. ◆ fScalefactor. Double_t TH2::fScalefactor. protected . Scale factor. ; Definition at line 33 of file TH2.h. ◆ fTsumwxy. Double_t TH2::fTsumwxy. protected . Total Sum of weight*X*Y. ; Definition at line 36 of file TH2.h. ◆ fTsumwy. Double_t TH2::fTsumwy. protected . Total Sum of weight*Y. ; Definition at line 34 of file TH2.h. ◆ fTsumwy2. Double_t TH2::fTsumwy2. protected . Total Sum of weight*Y*Y. ; Definition at line 35 of file TH2.h. Libraries for TH2:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH2.h; hist/hist/src/TH2.cxx. TH2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:110643,Guid,Guide,110643,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['Guid'],['Guide']
Usability,"rentzRotation::kXT@ kXTDefinition LorentzRotation.h:62; ROOT::Math::LorentzRotation::kZZ@ kZZDefinition LorentzRotation.h:64; ROOT::Math::LorentzRotation::kYT@ kYTDefinition LorentzRotation.h:63; ROOT::Math::LorentzRotation::kYX@ kYXDefinition LorentzRotation.h:63; ROOT::Math::LorentzRotation::kZY@ kZYDefinition LorentzRotation.h:64; ROOT::Math::LorentzRotation::kXX@ kXXDefinition LorentzRotation.h:62; ROOT::Math::LorentzRotation::LorentzRotationLorentzRotation()Default constructor (identity transformation)Definition LorentzRotation.cxx:36; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::QuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k).Definition Quaternion.h:49; ROOT::Math::Rotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix.Definition Rotation3D.h:67; ROOT::Math::RotationXRotation class representing a 3D rotation about the X axis by the angle of rotation.Definition RotationX.h:45; ROOT::Math::RotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation.Definition RotationY.h:45; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; mTMarker mDefinition textangle.C:8. mathgenvectorsrcLorentzRotation.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LorentzRotation_8cxx_source.html:13113,Guid,Guide,13113,doc/master/LorentzRotation_8cxx_source.html,https://root.cern,https://root.cern/doc/master/LorentzRotation_8cxx_source.html,1,['Guid'],['Guide']
Usability,"replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html:14510,Clear,ClearProjectedList,14510,doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveStraightLineSet.html,1,['Clear'],['ClearProjectedList']
Usability,"replace=kTRUE, Bool_t update=kTRUE);  Create a replica of element and insert it into VizDB with given tag. ;  ; void VizDB_Reapply ();  Reset visual parameters for this object from VizDB. ;  ; void VizDB_UpdateModel (Bool_t update=kTRUE);  Copy visual parameters from this element to viz-db model. ;  ;  Public Member Functions inherited from ROOT::Experimental::REveProjectable;  REveProjectable ();  Constructor. ;  ;  REveProjectable (const REveProjectable &);  Copy constructor. Does shallow copy. ;  ; virtual ~REveProjectable ();  Destructor. ;  ; virtual void AddProjected (REveProjected *p);  ; virtual void AddProjectedsToSet (std::set< REveElement * > &set);  Add the projected elements to the set, dyn-casting them to REveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; virtual void ClearProjectedList ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (REveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; ProjList_t & RefProjecteds ();  ; virtual void RemoveProjected (REveProjected *p);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html:16147,Clear,ClearProjectedList,16147,doc/master/classROOT_1_1Experimental_1_1REveLine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveLine.html,2,['Clear'],['ClearProjectedList']
Usability,replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TRuby Ruby/ROOT interface; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class ; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summury infor,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:113872,pause,paused,113872,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['pause'],['paused']
Usability,"report_size_overflow(). void ROOT::Internal::VecOps::SmallVectorBase::report_size_overflow ; (; size_t ; MinSize). staticprotected . Report that MinSize doesn't fit into this vector's size type. ; Throws std::length_error or calls report_fatal_error. ; Definition at line 37 of file RVec.cxx. ◆ set_size(). void ROOT::Internal::VecOps::SmallVectorBase::set_size ; (; size_t ; N). inline . Set the array size to N, which the current array must have enough capacity for. ; This does not construct or destroy any elements in the vector.; Clients can use this in conjunction with capacity() to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. ; Definition at line 188 of file RVec.hxx. ◆ size(). size_t ROOT::Internal::VecOps::SmallVectorBase::size ; (; ); const. inline . Definition at line 174 of file RVec.hxx. ◆ SizeTypeMax(). static constexpr size_t ROOT::Internal::VecOps::SmallVectorBase::SizeTypeMax ; (; ). inlinestaticconstexprprotected . The maximum value of the Size_T used. ; Definition at line 153 of file RVec.hxx. Member Data Documentation. ◆ fBeginX. void* ROOT::Internal::VecOps::SmallVectorBase::fBeginX. protected . Definition at line 145 of file RVec.hxx. ◆ fCapacity. Size_T ROOT::Internal::VecOps::SmallVectorBase::fCapacity. protected . Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ; Definition at line 150 of file RVec.hxx. ◆ fSize. Size_T ROOT::Internal::VecOps::SmallVectorBase::fSize = 0. protected . Always >= 0. ; Definition at line 148 of file RVec.hxx. Libraries for ROOT::Internal::VecOps::SmallVectorBase:. [legend]; The documentation for this class was generated from the following files:; math/vecops/inc/ROOT/RVec.hxx; math/vecops/src/RVec.cxx. ROOTInternalVecOpsSmallVectorBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html:5560,Guid,Guide,5560,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorBase.html,1,['Guid'],['Guide']
Usability,"represent and give access to the content of TTree object.; This is intended to be used as part of a generate Selector class; which will hold the directory and its associate. Function Members (Methods); public:. ~TBranchProxyDirector(); voidAttach(ROOT::TBranchProxy* p); voidAttach(ROOT::TFriendProxy* f); TH1F*CreateHistogram(const char* options); Long64_tGetReadEntry() const; TTree*GetTree() const; voidSetReadEntry(Long64_t entry); TTree*SetTree(TTree* newtree); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Long64_t i); ROOT::TBranchProxyDirectorTBranchProxyDirector(TTree* tree, Int_t i). private:. ROOT::TBranchProxyDirector&operator=(const ROOT::TBranchProxyDirector&); ROOT::TBranchProxyDirectorTBranchProxyDirector(const ROOT::TBranchProxyDirector&). Data Members; private:. list<TBranchProxy*>fDirected; Long64_tfEntryEntry currently being read.; list<TFriendProxy*>fFriends; TTree*fTreeTTree we are currently looking at. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBranchProxyDirector(TTree* tree, Long64_t i); Simple constructor. TBranchProxyDirector(TTree* tree, Int_t i); cint has a problem casting int to long long; Simple constructor. void Attach(TBranchProxy* p). void Attach(TFriendProxy* p). TH1F* CreateHistogram(const char* options); Create a temporary 1D histogram. void SetReadEntry(Long64_t entry). TTree* SetTree(TTree* newtree). TBranchProxyDirector(const ROOT::TBranchProxyDirector& ); {;}. TBranchProxyDirector& operator=(const ROOT::TBranchProxyDirector& ); {return *this;}. Long64_t GetReadEntry() const; { return fEntry; }. TTree* GetTree() const; void Print();. { return fTree; }. » Author: Philippe Canal 13/05/2003 » Copyright (C) 1995-2004, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-10 17:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__TBranchProxyDirector.html:1515,Simpl,Simple,1515,root/html534/ROOT__TBranchProxyDirector.html,https://root.cern,https://root.cern/root/html534/ROOT__TBranchProxyDirector.html,2,['Simpl'],['Simple']
Usability,"representations can be cumulated on the same plot. This technique allows seeing clearly where the clusters are on an individual axis but it does not give any hints about the correlations between the axes.; Avery simple technique allows to make the clusters appearing: Instead of painting solid lines we paint dotted lines. The cluttering of each individual line is reduced and the clusters show clearly as we can see on the next figure. The spacing between the dots is a parameter which can be adjusted in order to get the best results. Using dotted lines is a very simple method to reduce the cluttering. Interactivity is a very important aspect of the Parallel Coordinates plots. To really explore the data set it is essential to act directly with the events and the axes. For instance, changing the axes order may show clusters which were not visible in a different order. On the next figure the axes order has been changed interactively. We can see that many more clusters appear and all the “random spheres” we put in the data set are now clearly visible. Having moved the variables u,v,w after the variables x,y,z the correlation between these two sets of variables is clear also. Axis order is very important to show clusters. To pursue further data sets exploration we have implemented the possibility to define selections interactively. A selection is a set of ranges combined together. Within a selection, ranges along the same axis are combined with logical OR, and ranges on different axes with logical AND. A selection is displayed on top of the complete data set using its own color. Only the events fulfilling the selection criteria (ranges) are displayed. Ranges are defined interactively using cursors, like on the first axis on the figure. Several selections can be defined at the same time, each selection having its own color. Selections are set of ranges which can be defined interactively. Several selections can been defined. Each cluster is now clearly visible and the zone wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:614430,clear,clearly,614430,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clearly']
Usability,"request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; virtual Bool_t CancelStagingDataSet (const char *dataset);  Cancels a dataset staging request. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; virtual void ClearCache (const char *file=0);  Remove file from all file caches. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; virtual void ClearDataSetCache (const char *dataset=0);  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *opt="""");  Detach this instance to its proofserv. ;  ; void DisableGoAsyn ();  Signal to disable related switches. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:4750,Clear,ClearInputData,4750,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,6,"['Clear', 'clear']","['ClearInputData', 'clear']"
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecExtraEvent(); TRecExtraEvent(const TRecExtraEvent&); ~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecExtraEvent.html:2472,Resume,Resume,2472,root/html528/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html528/TRecExtraEvent.html,4,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecGuiEvent(); TRecGuiEvent(const TRecGuiEvent&); ~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecGuiEvent.html:2492,Resume,Resume,2492,root/html528/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html528/TRecGuiEvent.html,4,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecWinPair(const TRecWinPair&); TRecWinPair(Window_t key, Window_t value); ~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecWinPair.html:2487,Resume,Resume,2487,root/html528/TRecWinPair.html,https://root.cern,https://root.cern/root/html528/TRecWinPair.html,4,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const TRecorder&); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorder.html:2481,Resume,Resume,2481,root/html528/TRecorder.html,https://root.cern,https://root.cern/root/html528/TRecorder.html,3,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorder.html:2481,Resume,Resume,2481,root/html534/TRecorder.html,https://root.cern,https://root.cern/root/html534/TRecorder.html,1,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecExtraEvent.html:2522,Resume,Resume,2522,root/html602/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html602/TRecExtraEvent.html,2,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecGuiEvent.html:2516,Resume,Resume,2516,root/html602/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html602/TRecGuiEvent.html,2,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecWinPair.html:2511,Resume,Resume,2511,root/html602/TRecWinPair.html,https://root.cern,https://root.cern/root/html602/TRecWinPair.html,2,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorder.html:2505,Resume,Resume,2505,root/html602/TRecorder.html,https://root.cern,https://root.cern/root/html602/TRecorder.html,2,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecEvent.html:2505,Resume,Resume,2505,root/html602/TRecEvent.html,https://root.cern,https://root.cern/root/html602/TRecEvent.html,2,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderState.html:2504,Resume,Resume,2504,root/html602/TRecorderState.html,https://root.cern,https://root.cern/root/html602/TRecorderState.html,2,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderState.html:2454,Resume,Resume,2454,root/html528/TRecorderState.html,https://root.cern,https://root.cern/root/html528/TRecorderState.html,3,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector&); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, Bool_t); virtual voidStreamer(TBuffer&)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderState.html:2456,Resume,Resume,2456,root/html534/TRecorderState.html,https://root.cern,https://root.cern/root/html534/TRecorderState.html,1,['Resume'],['Resume']
Usability,"res that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. ~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecEvent.html:2455,Resume,Resume,2455,root/html528/TRecEvent.html,https://root.cern,https://root.cern/root/html528/TRecEvent.html,4,['Resume'],['Resume']
Usability,"responds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply added to the; existing histogram. Function Members (Methods); public:. virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tTUnfold::DoUnfold(Double_t tau); Double_tTUnfold::DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:3851,Clear,Clear,3851,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,2,['Clear'],['Clear']
Usability,"ress()) {; 3399 tree->SetBranchAddress(branch->GetName(), (void*) branch->GetAddress());; 3400 TBranch* br = tree->GetBranch(branch->GetName());; 3401 if (br) {; 3402 if (br->IsA() != branch->IsA()) {; 3403 Error(; 3404 ""CopyAddresses"",; 3405 ""Branch kind mismatch between input tree '%s' and output tree '%s' for branch '%s': '%s' vs '%s'"",; 3406 tree->GetName(), br->GetTree()->GetName(), br->GetName(), branch->IsA()->GetName(),; 3407 br->IsA()->GetName());; 3408 }; 3409 // The copy does not own any object allocated by SetAddress().; 3410 // FIXME: We do too much here, br may not be a top-level branch.; 3411 if (br->InheritsFrom(TBranchElement::Class())) {; 3412 ((TBranchElement*) br)->ResetDeleteObject();; 3413 }; 3414 } else {; 3415 Warning(""CopyAddresses"", ""Could not find branch named '%s' in tree named '%s'"", branch->GetName(), tree->GetName());; 3416 }; 3417 } else {; 3418 tleaf->SetAddress(leaf->GetValuePointer());; 3419 }; 3420 }; 3421 }; 3422 ; 3423 if (undo &&; 3424 ( tree->IsA()->InheritsFrom(""TNtuple"") || tree->IsA()->InheritsFrom(""TNtupleD"") ); 3425 ) {; 3426 tree->ResetBranchAddresses();; 3427 }; 3428}; 3429 ; 3430namespace {; 3431 ; 3432 enum EOnIndexError { kDrop, kKeep, kBuild };; 3433 ; 3434 bool R__HandleIndex(EOnIndexError onIndexError, TTree *newtree, TTree *oldtree); 3435 {; 3436 // Return true if we should continue to handle indices, false otherwise.; 3437 ; 3438 bool withIndex = true;; 3439 ; 3440 if ( newtree->GetTreeIndex() ) {; 3441 if ( oldtree->GetTree()->GetTreeIndex() == nullptr ) {; 3442 switch (onIndexError) {; 3443 case kDrop:; 3444 delete newtree->GetTreeIndex();; 3445 newtree->SetTreeIndex(nullptr);; 3446 withIndex = false;; 3447 break;; 3448 case kKeep:; 3449 // Nothing to do really.; 3450 break;; 3451 case kBuild:; 3452 // Build the index then copy it; 3453 if (oldtree->GetTree()->BuildIndex(newtree->GetTreeIndex()->GetMajorName(), newtree->GetTreeIndex()->GetMinorName())) {; 3454 newtree->GetTreeIndex()->Append(oldtree->GetTree()-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:135608,undo,undo,135608,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['undo'],['undo']
Usability,"ress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH1::DrawCopyvirtual TH1 * DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constCopy this histogram and Draw in the current pad.Definition TH1.cxx:3113; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetGridxvoid SetGridx(Int_t value=1) overrideDefinition TPad.h:336; TPad::SetGridyvoid SetGridy(Int_t value=1) overrideDefinition TPad.h:337; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::GetFrameTFrame * GetFrame() overrideGet frame.Definition TPad.cxx:2955; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; c1return c1Definition legend1.C:41; h1ReadAndDrawDefinition h1ReadAndDraw.py:1; t1auto * t1Definition textangle.C:20; AuthorRene Brun ; Definition in file h1ReadAndDraw.C. tutorialshisth1ReadAndDraw.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1ReadAndDraw_8C.html:5910,Guid,Guide,5910,doc/master/h1ReadAndDraw_8C.html,https://root.cern,https://root.cern/doc/master/h1ReadAndDraw_8C.html,1,['Guid'],['Guide']
Usability,"ressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:79572,progress bar,progress bars,79572,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['progress bar'],['progress bars']
Usability,"ressBar can be also added when the multithread (MT) mode is enabled.; ProgressBar is added after creating the dataframe object (df): ROOT::RDataFrame df(""tree"", ""file.root"");; ROOT::RDF::Experimental::AddProgressBar(df);; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; Alternatively, RDataFrame can be cast to an RNode first, giving the user more flexibility For example, it can be called at any computational node, such as Filter or Define, not only the head node, with no change to the ProgressBar function itself (please see the Efficient analysis in Python section for appropriate usage in Python): ROOT::RDataFrame df(""tree"", ""file.root"");; auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; ROOT::RDF::Experimental::AddProgressBar(df_1);; ROOT::RDF::RNodeRInterface<::ROOT::Detail::RDF::RNodeBase, void > RNodeDefinition InterfaceUtils.hxx:57; Examples of implemented progress bars can be seen by running Higgs to Four Lepton tutorial and Dimuon tutorial. Working with missing values in the dataset; In certain situations a dataset might be missing one or more values at one or more of its entries. For example:. If the dataset is composed of multiple files and one or more files is missing one or more columns required by the analysis.; When joining different datasets horizontally according to some index value (e.g. the event number), if the index does not find a match in one or more other datasets for a certain entry. For example, suppose that column ""y"" does not have a value for entry 42:; +-------+---+---+; | Entry | x | y |; +-------+---+---+; | 42 | 1 | |; +-------+---+---+; If the RDataFrame application reads that column, for example if a Take() action was requested, the default behaviour is to throw an exception indicating that that column is missing an entry.; The following paragraphs discuss the functionalities provided by RDataFrame to work with missing values in the datas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:80994,progress bar,progress bars,80994,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['progress bar'],['progress bars']
Usability,"ression= 2.80 *; *............................................................................*; *Br 2 :x : x/F *; *Entries : 8460 : Total Size= 34451 bytes File Size = 28849 *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 3 :y : y/F *; *Entries : 8460 : Total Size= 34451 bytes File Size = 28757 *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.18 *; *............................................................................*; *Br 4 :z : z/F *; *Entries : 8460 : Total Size= 34451 bytes File Size = 30674 *; *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.11 *; *............................................................................*; nok = 8460, fentries=8460; . ; ; #include ""TTree.h""; #include ""TFile.h""; #include ""TRandom.h""; #include ""TTree.h""; #include ""TTree.h""; ; Int_t Run, Event;; Float_t x,y,z;; ; void CreateParentTree() {; // create a simple TTree with 5 branches; // Two branches (""Run"" and ""Event"") will be used to index the Tree; TFile *f = new TFile(""treeparent.root"",""recreate"");; TTree *T = new TTree(""T"",""test friend trees"");; T->Branch(""Run"",&Run,""Run/I"");; T->Branch(""Event"",&Event,""Event/I"");; T->Branch(""x"",&x,""x/F"");; T->Branch(""y"",&y,""y/F"");; T->Branch(""z"",&z,""z/F"");; TRandom r;; for (Int_t i=0;i<10000;i++) {; if (i < 5000) Run = 1;; else Run = 2;; Event = i;; x = r.Gaus(10,1);; y = r.Gaus(20,2);; z = r.Landau(2,1);; T->Fill();; }; T->Print();; T->Write();; delete f;; }; void CreateFriendTree() {; // Open the file created by CreateParentTree; // Copy a subset of the TTree into a new TTree; // (see also tutorials copytree.C, copytree2.C and copytree3.C); // Create an index on the new TTree (""Run"",""Event""); // Write the new TTree (including its index); ; TFile *f = new TFile(""treeparent.root"");; TTree *T = (TTree*)f->Get(""T"");; TFile *ff = new TFile(""treefriend.root"",""recreate"");; TTree *TF = T->CopyTree(""z<10"");; TF->SetName(""TF"");; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treefriend_8C.html:3796,simpl,simple,3796,doc/master/treefriend_8C.html,https://root.cern,https://root.cern/doc/master/treefriend_8C.html,1,['simpl'],['simple']
Usability,"retation and number of arguments are mapped to the constructor arguments of the class (after the name and title). . MyPdf(x,m,s) As above, but with an implicitly defined (unique) object name . Creating sets and lists (to be used as inputs above) . {a,b,c} Create RooArgSet or RooArgList (as determined by context) from given contents . Objects that are not created, are assumed to exist in the workspace Object creation expressions as shown above can be nested, e.g. one can do RooGaussian::g(x[-10,10],m[0],3); xDouble_t x[n]Definition legend1.C:17; mTMarker mDefinition textangle.C:8; to create a pdf and its variables in one go. This nesting can be applied recursively e.g. SUM::model( f[0.5,0,1] * RooGaussian::g( x[-10,10], m[0], 3] ),; RooChebychev::c( x, {a0[0.1],a1[0.2],a2[-0.3]} )); f#define f(i)Definition RSha256.hxx:104; creates the sum of a Gaussian and a Chebychev and all its variables.; A separate series of operator meta-type exists to simplify the construction of composite expressions meta-types in all capitals (SUM) create pdfs, meta types in lower case (sum) create functions. Expression Effect . SUM::name(f1*pdf1,f2*pdf2,pdf3] Create sum pdf name with value f1*pdf1+f2*pdf2+(1-f1-f2)*pdf3 . RSUM::name(f1*pdf1,f2*pdf2,pdf3] Create recursive sum pdf name with value f1*pdf1 + (1-f1)(f2*pdf2 + (1-f2)pdf3) . ASUM::name(f1*amp1,f2*amp2,amp3] Create sum pdf name with value f1*amp1+f2*amp2+(1-f1-f2)*amp3 where amplX are amplitudes of type RooAbsReal . sum::name(a1,a2,a3] Create sum function with value a1+a2+a3 . sum::name(a1*b1,a2*b2,a3*b 3] Create sum function with value a1*b1+a2*b2+a3*b3 . PROD::name(pdf1,pdf2] Create product of pdf with name with given input pdfs . PROD::name(pdf1|x,pdf2] Create product of conditional pdf pdf1 given x and pdf2 . prod::name(a,b,c] Create production function with value a*b*c . SIMUL::name(cat,a=pdf1,b=pdf2] Create simultaneous pdf index category cat. Make pdf1 to state a, pdf2 to state b . EXPR::name(<expr>,var,...] Create a generic p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFactoryWSTool.html:34289,simpl,simplify,34289,doc/master/classRooFactoryWSTool.html,https://root.cern,https://root.cern/doc/master/classRooFactoryWSTool.html,2,['simpl'],['simplify']
Usability,"retrieved as a TText with GetLine and GetLineWith wich is also useful to modify the text attributes of a line. ; TCanvas *pavetext(){; TCanvas *c = new TCanvas(""c"");; TPaveText *pt = new TPaveText(.05,.1,.95,.8);; ; pt->AddText(""A TPaveText can contain severals line of text."");; pt->AddText(""They are added to the pave using the AddText method."");; pt->AddLine(.0,.5,1.,.5);; pt->AddText(""Even complex TLatex formulas can be added:"");; TText *t1 = pt->AddText(""F(t) = #sum_{i=-#infty}^{#infty}A(i)cos#[]{#frac{i}{t+i}}"");; ; t1->SetTextColor(kBlue);; ; pt->Draw();; ; TText *t2 = pt->GetLineWith(""Even"");; t2->SetTextColor(kOrange+1);; ; return c;; }; c#define c(i)Definition RSha256.hxx:101; kOrange@ kOrangeDefinition Rtypes.h:67; kBlue@ kBlueDefinition Rtypes.h:66; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::AddLinevirtual TLine * AddLine(Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0)Add a new graphics line to this pavetext.Definition TPaveText.cxx:177; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TPaveText::GetLineWithvirtual TText * GetLineWith(const char *text) constGet Pointer to first containing string text in this pavetext.Definition TPaveText.cxx:302; TTextBase class for several text objects.Definition TText.h:22; ptTPaveText * ptDefinition entrylist_figure1.C:7; t1auto * t1Definition textangle.C:20; AuthorOlivier Couet ; Definition in file pavetext.C. tutorialsgraphicspavetext.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pavetext_8C.html:2445,Guid,Guide,2445,doc/master/pavetext_8C.html,https://root.cern,https://root.cern/doc/master/pavetext_8C.html,1,['Guid'],['Guide']
Usability,"return (*fTFN)(df,X,fA);; 367 //else if(fTFNF1) {; 368 ; 369 TF1 *f1 = (TF1*)fUserFunc;; 370 return f1->EvalPar(X,fA);; 371 //}; 372 //return 0.;; 373}; 374 ; 375////////////////////////////////////////////////////////////////////////////////; 376///; 377/// Execute MINUIT commands. MINImize, SIMplex, MIGrad and FUMili all; 378/// will call TFumili::Minimize method.; 379///; 380/// For full command list see; 381/// MINUIT. Reference Manual. CERN Program Library Long Writeup D506.; 382///; 383/// Improvement and errors calculation are not yet implemented as well; 384/// as Monte-Carlo seeking and minimization.; 385/// Contour commands are also unsupported.; 386///; 387/// - command : command string; 388/// - args : array of arguments; 389/// - nargs : number of arguments; 390 ; 391Int_t TFumili::ExecuteCommand(const char *command, Double_t *args, Int_t nargs){; 392 TString comand = command;; 393 static TString clower = ""abcdefghijklmnopqrstuvwxyz"";; 394 static TString cupper = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";; 395 const Int_t nntot = 40;; 396 const char *cname[nntot] = {; 397 ""MINImize "", // 0 checked; 398 ""SEEk "", // 1 none; 399 ""SIMplex "", // 2 checked same as 0; 400 ""MIGrad "", // 3 checked same as 0; 401 ""MINOs "", // 4 none; 402 ""SET xxx "", // 5 lot of stuff; 403 ""SHOw xxx "", // 6 -----------; 404 ""TOP of pag"", // 7 .; 405 ""fiX "", // 8 .; 406 ""REStore "", // 9 .; 407 ""RELease "", // 10 .; 408 ""SCAn "", // 11 not yet implemented; 409 ""CONtour "", // 12 not yet implemented; 410 ""HESse "", // 13 not yet implemented; 411 ""SAVe "", // 14 obsolete; 412 ""IMProve "", // 15 not yet implemented; 413 ""CALl fcn "", // 16 .; 414 ""STAndard "", // 17 .; 415 ""END "", // 18 .; 416 ""EXIt "", // 19 .; 417 ""RETurn "", // 20 .; 418 ""CLEar "", // 21 .; 419 ""HELP "", // 22 not yet implemented; 420 ""MNContour "", // 23 not yet implemented; 421 ""STOp "", // 24 .; 422 ""JUMp "", // 25 not yet implemented; 423 "" "", //; 424 "" "", //; 425 ""FUMili "", // 28 checked same as 0; 426 "" "", //; 427 "" "", //; 428 "" "", //; 42",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:12718,SIMpl,SIMplex,12718,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['SIMpl'],['SIMplex']
Usability,"return (1+Int_t(color));; }; ; //______________________________________________________________________________; void raytrace() {; raytracing = !raytracing;; if (gGeoManager && gPad) {; auto top = gGeoManager->GetTopVolume();; bool drawn = gPad->GetListOfPrimitives()->FindObject(top);; if (drawn) top->SetVisRaytrace(raytracing);; gPad->Modified();; gPad->Update();; }; }; ; //______________________________________________________________________________; void help() {; ; auto c =(TCanvas *) gROOT->GetListOfCanvases()->FindObject(""geom_help"");; if (c) {; c->Clear();; c->Update();; c->cd();; } else {; c = new TCanvas(""geom_help"",""Help to run demos"",200,10,700,600);; }; ; TPaveText *welcome = new TPaveText(.1,.8,.9,.97);; welcome->AddText(""Welcome to the new geometry package"");; welcome->SetTextFont(32);; welcome->SetTextColor(4);; welcome->SetFillColor(24);; welcome->Draw();; ; TPaveText *hdemo = new TPaveText(.05,.05,.95,.7);; hdemo->SetTextAlign(12);; hdemo->SetTextFont(52);; hdemo->AddText(""- Demo for building TGeo basic shapes and simple geometry. Shape parameters are"");; hdemo->AddText("" displayed in the right pad"");; hdemo->AddText(""- Click left mouse button to execute one demo"");; hdemo->AddText(""- While pointing the mouse to the pad containing the geometry, do:"");; hdemo->AddText(""- .... click-and-move to rotate"");; hdemo->AddText(""- .... press j/k to zoom/unzoom"");; hdemo->AddText(""- .... press l/h/u/i to move the view center around"");; hdemo->AddText(""- Click Ray-trace ON/OFF to toggle ray-tracing"");; hdemo->AddText(""- Use <View with x3d> from the <View> menu to get an x3d view"");; hdemo->AddText(""- .... same methods to rotate/zoom/move the view"");; hdemo->AddText(""- Execute box(1,8) to divide a box in 8 equal slices along X"");; hdemo->AddText(""- Most shapes can be divided on X,Y,Z,Rxy or Phi :"");; hdemo->AddText(""- .... root[0] <shape>(IAXIS, NDIV, START, STEP);"");; hdemo->AddText("" .... IAXIS = 1,2,3 meaning (X,Y,Z) or (Rxy, Phi, Z)"");; hdemo->AddText("" ..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geodemo_8C.html:5899,simpl,simple,5899,doc/master/geodemo_8C.html,https://root.cern,https://root.cern/doc/master/geodemo_8C.html,1,['simpl'],['simple']
Usability,"return a string describing the TUnfold version ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void AddMSparse (TMatrixDSparse *dest, Double_t f, const TMatrixDSparse *src) const;  add a sparse matrix, scaled by a factor, to another scaled matrix ;  ; Bool_t AddRegularisationCondition (Int_t i0, Double_t f0, Int_t i1=-1, Double_t f1=0., Int_t i2=-1, Double_t f2=0.);  add a row of regularisation conditions to the matrix L ;  ; Bool_t AddRegularisationCondition (Int_t nEle, const Int_t *indices, const Double_t *rowData);  add a row of regularisation conditions to the matrix L ;  ; void ClearHistogram (TH1 *h, Double_t x=0.) const;  Initialize bin contents and bin errors for a given histogram. ;  ; virtual void ClearResults (void);  reset all results ;  ; TMatrixDSparse * CreateSparseMatrix (Int_t nrow, Int_t ncol, Int_t nele, Int_t *row, Int_t *col, Double_t *data) const;  create a sparse matrix, given the nonzero elements ;  ; virtual Double_t DoUnfold (void);  core unfolding algorithm ;  ; void ErrorMatrixToHist (TH2 *ematrix, const TMatrixDSparse *emat, const Int_t *binMap, Bool_t doClear) const;  add up an error matrix, also respecting the bin mapping ;  ; const TMatrixDSparse * GetAx (void) const;  vector of folded-back result ;  ; Int_t GetBinFromRow (int ix) const;  converts matrix row to truth histogram bin number ;  ; const TMatrixDSparse * GetDXDAM (int i) const;  matrix contributions of the derivative dx/dA ;  ; const TMatrixDSparse * GetDXDAZ (int i) const;  vect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:17803,Clear,ClearHistogram,17803,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['Clear'],['ClearHistogram']
Usability,"return gOpts[algoname];; 64 return *opt;; 65 }; 66 ; 67 void GenAlgoOptions::PrintAllDefault(std::ostream & os) {; 68 const OptionsMap & gOpts = GenAlgoOptUtil::gAlgoOptions;; 69 for ( OptionsMap::const_iterator pos = gOpts.begin();; 70 pos != gOpts.end(); ++pos) {; 71 os << ""Default specific options for algorithm "" << pos->first << "" : "" << std::endl;; 72 (pos->second).Print(os);; 73 }; 74 }; 75 ; 76 } // end namespace Math; 77 ; 78} // end namespace ROOT; 79 ; GenAlgoOptions.h; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::GenAlgoOptions::PrintAllDefaultstatic void PrintAllDefault(std::ostream &os=std::cout)print all the default optionsDefinition GenAlgoOptions.cxx:67; ROOT::Math::GenAlgoOptions::Printvoid Print(std::ostream &os=std::cout) const overrideprint optionsDefinition GenAlgoOptions.h:114; ROOT::Math::GenAlgoOptions::Defaultstatic IOptions & Default(const char *algoname)Definition GenAlgoOptions.cxx:55; ROOT::Math::GenAlgoOptions::FindDefaultstatic IOptions * FindDefault(const char *algoname)Definition GenAlgoOptions.cxx:48; ROOT::Math::IOptionsGeneric interface for defining configuration options of a numerical algorithm.Definition IOptions.h:28; MathNamespace for new Math classes and functions.; ROOT::Math::GenAlgoOptUtil::gAlgoOptionsstatic OptionsMap gAlgoOptionsDefinition GenAlgoOptions.cxx:30; ROOT::Math::GenAlgoOptUtil::DoFindDefaultIOptions * DoFindDefault(std::string &algoname, OptionsMap &gOpts)Definition GenAlgoOptions.cxx:33; ROOT::Math::OptionsMapstd::map< std::string, ROOT::Math::GenAlgoOptions > OptionsMapDefinition GenAlgoOptions.cxx:25; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcGenAlgoOptions.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenAlgoOptions_8cxx_source.html:4365,Guid,Guide,4365,doc/master/GenAlgoOptions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GenAlgoOptions_8cxx_source.html,1,['Guid'],['Guide']
Usability,"return pointer to X values at the minimum ;  . Protected Attributes; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/Minimizer.h>. Inheritance diagram for ROOT::Math::Minimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ Minimizer() [1/3]. ROOT::Math::Minimizer::Minimizer ; (; ). inline . Default constructor. ; Definition at line 124 of file Minimizer.h. ◆ ~Minimizer(). virtual ROOT::Math::Minimizer::~Minimizer ; (; ). inlinevirtual . Destructor (no operations). ; Definition at line 127 of file Minimizer.h. ◆ Minimizer() [2/3]. ROOT::Math::Minimizer::Minimizer ; (; Minimizer const & ; ). delete . ◆ Minimizer() [3/3]. ROOT::Math::Minimizer::Minimizer ; (; Minimizer && ; ). delete . Member Function Documentation. ◆ Clear(). virtual void ROOT::Math::Minimizer::Clear ; (; ). inlinevirtual . reset for consecutive minimization - implement if needed ; Reimplemented in ROOT::Math::GeneticMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 136 of file Minimizer.h. ◆ Contour(). bool ROOT::Math::Minimizer::Contour ; (; unsigned int ; ivar, . unsigned int ; jvar, . unsigned int & ; npoints, . double * ; xi, . double * ; xj . ). virtual . find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 211 of file Minimizer.cxx. ◆ Correlation(). virtual double ROOT::Math::Minimizer::Correlation ; (; unsigned int ; i, . unsigned int ; j . ); const. inlinevirtual . return correlation coefficient between variable i and j. ; If the variable is fixed or const the return value is zero ; Reimplemented in ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:14306,Clear,Clear,14306,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['Clear'],['Clear']
Usability,"return:; -1 in case of failure; 0 in case we did not find $Alt; the action number in case of success. . Definition at line 657 of file TTreeFormula.cxx. ◆ DefineDimensions(). void TTreeFormula::DefineDimensions ; (; Int_t ; code, . Int_t ; size, . TFormLeafInfoMultiVarDim * ; info, . Int_t & ; virt_dim . ). protected . This method is used internally to decode the dimensions of the variables. ; Definition at line 356 of file TTreeFormula.cxx. ◆ DefinedVariable(). Int_t TTreeFormula::DefinedVariable ; (; TString & ; name, . Int_t & ; action . ). overridevirtual . Check if name is in the list of Tree/Branch leaves. ; This member function redefines the function in ROOT::v5::TFormula If a leaf has a name corresponding to the argument name, then returns a new code.; A TTreeFormula may contain more than one variable. For each variable referenced, the pointers to the corresponding branch and leaf is stored in the object arrays fBranches and fLeaves.; name can be :; Leaf_Name (simple variable or data member of a ClonesArray); Branch_Name.Leaf_Name; Branch_Name.Method_Name; Leaf_Name[index]; Branch_Name.Leaf_Name[index]; Branch_Name.Leaf_Name[index1]; Branch_Name.Leaf_Name[][index2]; Branch_Name.Leaf_Name[index1][index2]. New additions:; Branch_Name.Leaf_Name[OtherLeaf_Name]; Branch_Name.Datamember_Name; '.' can be replaced by '->'; and. Branch_Name[index1].Leaf_Name[index2]; Leaf_name[index].Action().OtherAction(param); Leaf_name[index].Action()[val].OtherAction(param). The expected returned values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized, or is too long, or tree does not exist.; >=0 : the name has been recognized, return the internal code for this name. . Reimplemented from ROOT::v5::TFormula.; Definition at line 2698 of file TTreeFormula.cxx. ◆ EvalClass() [1/2]. TClass * TTreeFormula::EvalClass ; (; ); const. virtual . Evaluate the class of this treeformula. ; If the 'value' of this formula is a simple pointer to an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:35759,simpl,simple,35759,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['simpl'],['simple']
Usability,"return;; 957 fgMutex.lock();; 958 TIter next(fVolumes);; 959 TGeoVolume *vol;; 960 while ((vol = (TGeoVolume *)next())); 961 vol->ClearThreadData();; 962 fgMutex.unlock();; 963}; 964 ; 965////////////////////////////////////////////////////////////////////////////////; 966/// Create thread private data for all geometry objects.; 967 ; 968void TGeoManager::CreateThreadData() const; 969{; 970 if (!fMaxThreads); 971 return;; 972 fgMutex.lock();; 973 TIter next(fVolumes);; 974 TGeoVolume *vol;; 975 while ((vol = (TGeoVolume *)next())); 976 vol->CreateThreadData(fMaxThreads);; 977 fgMutex.unlock();; 978}; 979 ; 980////////////////////////////////////////////////////////////////////////////////; 981/// Clear the current map of threads. This will be filled again by the calling; 982/// threads via ThreadId calls.; 983 ; 984void TGeoManager::ClearThreadsMap(); 985{; 986 if (gGeoManager && !gGeoManager->IsMultiThread()); 987 return;; 988 fgMutex.lock();; 989 if (!fgThreadId->empty()); 990 fgThreadId->clear();; 991 fgNumThreads = 0;; 992 fgMutex.unlock();; 993}; 994 ; 995////////////////////////////////////////////////////////////////////////////////; 996/// Translates the current thread id to an ordinal number. This can be used to; 997/// manage data which is specific for a given thread.; 998 ; 999Int_t TGeoManager::ThreadId(); 1000{; 1001 TTHREAD_TLS(Int_t) tid = -1;; 1002 Int_t ttid = tid; // TTHREAD_TLS_GET(Int_t,tid);; 1003 if (ttid > -1); 1004 return ttid;; 1005 if (gGeoManager && !gGeoManager->IsMultiThread()); 1006 return 0;; 1007 std::thread::id threadId = std::this_thread::get_id();; 1008 TGeoManager::ThreadsMapIt_t it = fgThreadId->find(threadId);; 1009 if (it != fgThreadId->end()); 1010 return it->second;; 1011 // Map needs to be updated.; 1012 fgMutex.lock();; 1013 (*fgThreadId)[threadId] = fgNumThreads;; 1014 tid = fgNumThreads; // TTHREAD_TLS_SET(Int_t,tid,fgNumThreads);; 1015 ttid = fgNumThreads++;; 1016 fgMutex.unlock();; 1017 return ttid;; 1018}; 1019 ; 1020//",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:35885,clear,clear,35885,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['clear'],['clear']
Usability,"revious block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void SetupFeedback () override;  Set up feedback (may not be used in this class). ;  ; void StopFeedback () override;  Stop feedback (may not be used in this class). ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ; void MergeOutput (Bool_t savememvalues=kFALSE) override;  Merge output (may not be used in this class). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:19305,feedback,feedback,19305,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,1,['feedback'],['feedback']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecExtraEvent(); TRecExtraEvent(const TRecExtraEvent&); ~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecExtraEvent.html:2426,Pause,Pause,2426,root/html528/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html528/TRecExtraEvent.html,4,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecGuiEvent(); TRecGuiEvent(const TRecGuiEvent&); ~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecGuiEvent.html:2446,Pause,Pause,2446,root/html528/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html528/TRecGuiEvent.html,4,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecWinPair(const TRecWinPair&); TRecWinPair(Window_t key, Window_t value); ~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecWinPair.html:2441,Pause,Pause,2441,root/html528/TRecWinPair.html,https://root.cern,https://root.cern/root/html528/TRecWinPair.html,4,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const TRecorder&); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorder.html:2435,Pause,Pause,2435,root/html528/TRecorder.html,https://root.cern,https://root.cern/root/html528/TRecorder.html,3,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. TRecorder(); TRecorder(const char* filename, Option_t* option = ""READ""); virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorder.html:2435,Pause,Pause,2435,root/html534/TRecorder.html,https://root.cern,https://root.cern/root/html534/TRecorder.html,1,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecExtraEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecExtraEvent.html:2476,Pause,Pause,2476,root/html602/TRecExtraEvent.html,https://root.cern,https://root.cern/root/html602/TRecExtraEvent.html,2,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecGuiEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecGuiEvent.html:2470,Pause,Pause,2470,root/html602/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html602/TRecGuiEvent.html,2,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecWinPair(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecWinPair.html:2465,Pause,Pause,2465,root/html602/TRecWinPair.html,https://root.cern,https://root.cern/root/html602/TRecWinPair.html,2,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods); public:. virtual~TRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorder.html:2459,Pause,Pause,2459,root/html602/TRecorder.html,https://root.cern,https://root.cern/root/html602/TRecorder.html,2,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecEvent.html:2459,Pause,Pause,2459,root/html602/TRecEvent.html,https://root.cern,https://root.cern/root/html602/TRecEvent.html,2,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecorderState.html:2458,Pause,Pause,2458,root/html602/TRecorderState.html,https://root.cern,https://root.cern/root/html602/TRecorderState.html,2,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector& insp); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderState.html:2408,Pause,Pause,2408,root/html528/TRecorderState.html,https://root.cern,https://root.cern/root/html528/TRecorderState.html,3,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TRecorderState(); static TClass*Class(); virtual TRecorder::ERecorderStateGetState() const; virtual TClass*IsA() const; virtual voidListCmd(const char*); virtual voidListGui(const char*); TRecorderState&operator=(const TRecorderState&); virtual voidPause(TRecorder*); virtual voidPrevCanvases(const char*, Option_t*); virtual Bool_tReplay(TRecorder*, const char*, Bool_t, TRecorder::EReplayModes); virtual voidReplayStop(TRecorder*); virtual voidResume(TRecorder*); virtual voidShowMembers(TMemberInspector&); virtual voidStart(TRecorder*, const char*, Option_t*, Window_t*, Int_t); virtual voidStop(TRecorder*, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRecorderState.html:2410,Pause,Pause,2410,root/html534/TRecorderState.html,https://root.cern,https://root.cern/root/html534/TRecorderState.html,1,['Pause'],['Pause']
Usability,"reviously created ROOT GUI.; This ensures that only events for well known windows are stored.; Events for windows, which were not created during recording,; cannot be replayed. Replaying. 1] To start replaying. TRecorder r(const char *filename); TRecorder r(const char *filename, ""READ""). or:. TRecorder *recorder = new TRecorder;; recorder->Replay(const char *filename,; Bool_t showMouseCursor = kTRUE);. -filename A name of file with recorded events; previously created with TRecorder::Start. -showMouseCursor If kTRUE, mouse cursor is replayed as well.; In that case it is not recommended to use mouse; during replaying. In general, it is not recommended to use mouse to change positions; and states of ROOT windows during replaying. IMPORTANT:; The state of ROOT environment before replaying of some events; must be exactly the same as before recording them.; Therefore it is strongly recommended to start both recording; and replaying with empty ROOT environment. 2] To pause replaying. recorder->Pause(). Replaying is stopped until recorder->Resume() is called. 3] To resume paused replaying. recorder->Resume(). Resumes previously stopped replaying. 4] To stop replaying before its end. recorder->Stop(). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. ~TRecEvent(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecEvent.html:2409,Pause,Pause,2409,root/html528/TRecEvent.html,https://root.cern,https://root.cern/root/html528/TRecEvent.html,4,['Pause'],['Pause']
Usability,"rfaces - TDocOutput should not be used nor re-implemented; directly. TDocOutput generates the index tables:; * classes (THtml invokes TClassDocOutput for each),; * inheritance hierarchy,; * types and typedefs,; * libraries,; * the product index, and; * the module index (including the links to per-module documentation).; It invokes AT&T's GraphViz tool (dot) if available; charts benefit a lot; from it. TDocOutput also writes all pages' header and footer, which can be customized; by calling THtml::SetHeader(), THtml::SetFooter(). Function Members (Methods); public:. TDocOutput(THtml& html); TDocOutput(const TDocOutput&); virtual~TDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tCopyHtmlFile(const char* sourceName, const char* destName = """"); virtual voidCreateClassIndex(); virtual voidCreateClassTypeDefs(); virtual voidCreateHierarchy(); virtual voidCreateModuleIndex(); virtual voidCreateProductIndex(); virtual voidCreateTypeIndex(); virtual voidDecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidDecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::Dra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocOutput.html:1418,Clear,Clear,1418,root/html528/TDocOutput.html,https://root.cern,https://root.cern/root/html528/TDocOutput.html,4,['Clear'],['Clear']
Usability,"rg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:7571,clear,clearValueDirty,7571,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,3,['clear'],['clearValueDirty']
Usability,"rgSet& nullParameters); voidsetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt; RooNLLVar*fNllNull; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void setAlwaysReuseNLL(Bool_t flag); { fAlwaysReuseNll = flag ; }. void setReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: SimpleLikelihoodRatioTestStat.h 39956 2011-06-24 21:06:20Z wouter $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html:2039,Simpl,SimpleLikelihoodRatioTestStat,2039,root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__SimpleLikelihoodRatioTestStat.html,4,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"rgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:3715,clear,clearValueDirty,3715,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,1,['clear'],['clearValueDirty']
Usability,"rgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:6672,clear,clearValueDirty,6672,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,1,['clear'],['clearValueDirty']
Usability,"rgin(0.15);; frame2->GetYaxis()->SetTitleOffset(1.8);; frame2->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooDataSet.h; RooGaussian.h; RooHistPdf.h; RooPlot.h; RooPolynomial.h; RooRealVar.h; TAxis.h; TCanvas.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gPad#define gPadDefinition TVirtualPad.h:308; RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooHistPdfA propability density function sampled from a multidimensional histogram.Definition RooHistPdf.h:30; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooPolynomialRooPolynomial implements a polynomial p.d.f of the form.Definition RooPolynomial.h:25; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::BinsRooCmdArg Bins(Int_t nbin)Definition RooGlobalFunc.cxx:547; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf706_histpdfDefinition rf706_histpdf.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf706_histpdf.C. tutorialsroofitrf706_histpdf.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf706__histpdf_8C.html:4114,Guid,Guide,4114,doc/master/rf706__histpdf_8C.html,https://root.cern,https://root.cern/doc/master/rf706__histpdf_8C.html,1,['Guid'],['Guide']
Usability,"rgument \(z\), which must be in the range \(0 \le z \le 1\) ; kappaThe parameter \(\kappa\), which must be in the range \(0.01 \le \kappa \le 12 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Implements ROOT::Math::Vavilov.; Definition at line 545 of file VavilovFast.cxx. ◆ SetKappaBeta2(). void ROOT::Math::VavilovFast::SetKappaBeta2 ; (; double ; kappa, . double ; beta2 . ). overridevirtual . Change \(\kappa\) and \(\beta^2\) and recalculate coefficients if necessary. ; Parameters. kappaThe parameter \(\kappa\), which must be in the range \(0.01 \le \kappa \le 12 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Implements ROOT::Math::Vavilov.; Definition at line 62 of file VavilovFast.cxx. Member Data Documentation. ◆ fAC. double ROOT::Math::VavilovFast::fAC[14]. private . Definition at line 273 of file VavilovFast.h. ◆ fBeta2. double ROOT::Math::VavilovFast::fBeta2. private . Definition at line 271 of file VavilovFast.h. ◆ fgInstance. VavilovFast * ROOT::Math::VavilovFast::fgInstance = nullptr. staticprivate . Definition at line 279 of file VavilovFast.h. ◆ fHC. double ROOT::Math::VavilovFast::fHC[9]. private . Definition at line 274 of file VavilovFast.h. ◆ fItype. int ROOT::Math::VavilovFast::fItype. private . Definition at line 276 of file VavilovFast.h. ◆ fKappa. double ROOT::Math::VavilovFast::fKappa. private . Definition at line 270 of file VavilovFast.h. ◆ fNpt. int ROOT::Math::VavilovFast::fNpt. private . Definition at line 277 of file VavilovFast.h. ◆ fWCM. double ROOT::Math::VavilovFast::fWCM[201]. private . Definition at line 275 of file VavilovFast.h. Libraries for ROOT::Math::VavilovFast:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/VavilovFast.h; math/mathmore/src/VavilovFast.cxx. ROOTMathVavilovFast. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovFast.html:15759,Guid,Guide,15759,doc/master/classROOT_1_1Math_1_1VavilovFast.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovFast.html,1,['Guid'],['Guide']
Usability,"rgument and transfer the ownership to the collection from a std::unique_ptr. ;  ; template<class Arg_t > ; bool addTyped (const RooAbsCollection &list, bool silent=false);  Adds elements of a given RooAbsCollection to the container if they match the specified type. ;  ; bool allInRange (const char *rangeSpec) const;  Return true if all contained object report to have their value inside the specified range. ;  ; void assign (const RooAbsCollection &other) const;  Sets the value, cache and constant attribute of any argument in our set that also appears in the other set. ;  ; void assignFast (const RooAbsCollection &other, bool setValDirty=true) const;  Functional equivalent of assign() but assumes this and other collection have same layout. ;  ; RooAbsCollection & assignValueOnly (const RooAbsCollection &other, bool forceIfSizeOne=false);  Sets the value of any argument in our set that also appears in the other set. ;  ; TIterator begin ();  ; RooLinkedListIter begin ();  ; RooFIter begin ();  ; const_iterator begin () const;  ; void clear ();  Clear contents. If the collection is owning, it will also delete the contents. ;  ; virtual TObject * clone (const char *newname) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; bool contains (const RooAbsArg &var) const;  Check if collection contains an argument with the same name as var. ;  ; virtual bool containsInstance (const RooAbsArg &var) const;  Check if this exact instance is in this collection. ;  ; std::string contentsString () const;  Return comma separated list of contained object names as STL string. ;  ; virtual TObject * create (const char *newname) const =0;  ; TIterator * createIterator (bool dir=kIterForward) const R__DEPRECATED(6;  TIterator-style iteration over contained elements. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default RooPrinable print options for given Print() flag string For in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:5229,clear,clear,5229,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"ri TUri::Transform ; (; const TUri & ; reference, . const TUri & ; base . ). static . Transform a URI reference into its target URI using given a base URI. ; This is an implementation of the pseudocode in chapter 5.2.2. ; Definition at line 1122 of file TUri.cxx. Friends And Related Symbol Documentation. ◆ operator==. Bool_t operator== ; (; const TUri & ; u1, . const TUri & ; u2 . ). friend . Implementation of a TUri Equivalence operator that uses syntax-based normalisation see chapter 6.2.2. ; Definition at line 116 of file TUri.cxx. Member Data Documentation. ◆ fFragment. TString TUri::fFragment. private . Definition at line 61 of file TUri.h. ◆ fHasFragment. Bool_t TUri::fHasFragment. private . Definition at line 69 of file TUri.h. ◆ fHasHost. Bool_t TUri::fHasHost. private . Definition at line 65 of file TUri.h. ◆ fHasPath. Bool_t TUri::fHasPath. private . Definition at line 67 of file TUri.h. ◆ fHasPort. Bool_t TUri::fHasPort. private . Definition at line 66 of file TUri.h. ◆ fHasQuery. Bool_t TUri::fHasQuery. private . Definition at line 68 of file TUri.h. ◆ fHasScheme. Bool_t TUri::fHasScheme. private . Definition at line 63 of file TUri.h. ◆ fHasUserinfo. Bool_t TUri::fHasUserinfo. private . Definition at line 64 of file TUri.h. ◆ fHost. TString TUri::fHost. private . Definition at line 57 of file TUri.h. ◆ fPath. TString TUri::fPath. private . Definition at line 59 of file TUri.h. ◆ fPort. TString TUri::fPort. private . Definition at line 58 of file TUri.h. ◆ fQuery. TString TUri::fQuery. private . Definition at line 60 of file TUri.h. ◆ fScheme. TString TUri::fScheme. private . Definition at line 55 of file TUri.h. ◆ fUserinfo. TString TUri::fUserinfo. private . Definition at line 56 of file TUri.h. Libraries for TUri:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TUri.h; core/base/src/TUri.cxx. TUri. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUri.html:34433,Guid,Guide,34433,doc/master/classTUri.html,https://root.cern,https://root.cern/doc/master/classTUri.html,1,['Guid'],['Guide']
Usability,"rials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new major version of ROOT will make ROOT much simpler and safer to use: we want to increase clarity and usability.; If you are a physicist, please read on - this is about your ROOT.; The ROOT team will be releasing parts of ROOT 7 throughout the coming years.; Previews will gradually sneak into the ROOT sources, in the namespace ROOT::Experimental for those parts that are not yet cast in stone, and in the namespace ROOT for those that are.; We will use standard C++ types, standard interface behavior (e.g. with respect to ownership and thread safety), good documentation and tests: we are trying to be nice!; Feedback; The main point of the meeting and this page is to solicit your feedback. Most of it has been taken care of in the code already.; Building ROOT 7; Pre-requisites; Support for the c++14 standard is required. Usage of g++ >= 5 or clang >= 3.4 is recommended.; Relevant cmake variables; The CMAKE_CXX_STANDARD cmake variables must be set to at least 14.; Building from source would look similar to this:; $ mkdir root7_build; $ cd roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:2044,simpl,simpler,2044,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,2,"['simpl', 'usab']","['simpler', 'usability']"
Usability,"rials. Detailed Description; Example of function called when a mouse event occurs in a pad. ; When moving the mouse in the canvas, a second canvas shows the projection along X of the bin corresponding to the Y position of the mouse. The resulting histogram is fitted with a gaussian. A ""dynamic"" line shows the current bin position in Y. This more elaborated example can be used as a starting point to develop more powerful interactive applications exploiting CINT as a development engine.; Note that a class is used to hold on to the canvas that display the selected slice. ; import sys; import ctypes; ; from ROOT import gRandom, gPad, gROOT, gVirtualX; from ROOT import kTRUE, kRed; from ROOT import TCanvas, TH2, TH2F; ; ; class DynamicExec:; ; def __init__( self ):; self._cX = None; self._cY = None; self._old = None; ; def __call__( self ):; ; h = gPad.GetSelected();; if not h:; return; ; if not isinstance( h, TH2 ):; return; ; gPad.GetCanvas().FeedbackMode( kTRUE ); ; # erase old position and draw a line at current position; px = gPad.GetEventX(); py = gPad.GetEventY(); ; uxmin, uxmax = gPad.GetUxmin(), gPad.GetUxmax(); uymin, uymax = gPad.GetUymin(), gPad.GetUymax(); pxmin, pxmax = gPad.XtoAbsPixel( uxmin ), gPad.XtoAbsPixel( uxmax ); pymin, pymax = gPad.YtoAbsPixel( uymin ), gPad.YtoAbsPixel( uymax ); ; if self._old != None:; gVirtualX.DrawLine( pxmin, self._old[1], pxmax, self._old[1] ); gVirtualX.DrawLine( self._old[0], pymin, self._old[0], pymax ); gVirtualX.DrawLine( pxmin, py, pxmax, py ); gVirtualX.DrawLine( px, pymin, px, pymax ); ; self._old = px, py; ; upx = gPad.AbsPixeltoX( px ); x = gPad.PadtoX( upx ); upy = gPad.AbsPixeltoY( py ); y = gPad.PadtoY( upy ); ; padsav = gPad; ; # create or set the display canvases; if not self._cX:; self._cX = TCanvas( 'c2', 'Projection Canvas in X', 730, 10, 700, 500 ); else:; self._DestroyPrimitive( 'X' ); ; if not self._cY:; self._cY = TCanvas( 'c3', 'Projection Canvas in Y', 10, 550, 700, 500 ); else:; self._DestroyPrimitiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DynamicSlice_8py.html:1158,Feedback,FeedbackMode,1158,doc/master/DynamicSlice_8py.html,https://root.cern,https://root.cern/doc/master/DynamicSlice_8py.html,1,['Feedback'],['FeedbackMode']
Usability,"ributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGProgressBar.h>. Inheritance diagram for TGVProgressBar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGVProgressBar() [1/2]. TGVProgressBar::TGVProgressBar ; (; const TGWindow * ; p = nullptr, . UInt_t ; w = kProgressBarTextWidth, . UInt_t ; h = 4, . Pixel_t ; back = GetWhitePixel(), . Pixel_t ; barcolor = GetDefaultSelectedBackground(), . GContext_t ; norm = GetDefaultGC()(), . FontStruct_t ; font = GetDefaultFontStruct(), . UInt_t ; options = kDoubleBorder | kSunkenFrame . ). Constructor. ; Definition at line 328 of file TGProgressBar.cxx. ◆ TGVProgressBar() [2/2]. TGVProgressBar::TGVProgressBar ; (; const TGWindow * ; p, . EBarType ; type, . UInt_t ; h . ). Simple constructor allow you to create either a standard progress bar, or a more fancy progress bar (fancy means: double sized border, white background and a bit wider to allow for text to be printed in the bar. ; Definition at line 343 of file TGProgressBar.cxx. ◆ ~TGVProgressBar(). TGVProgressBar::~TGVProgressBar ; (; ). inlineoverride . Definition at line 136 of file TGProgressBar.h. Member Function Documentation. ◆ Class(). static TClass * TGVProgressBar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGVProgressBar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGVProgressBar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 144 of file TGProgressBar.h. ◆ DeclFileName(). static const char * TGVProgressBar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 144 of file TGProgressBar.h. ◆ DoRedraw(). void TGVProgressBar::DoRedraw ; (; ). overrideprotectedvirtual . Draw vert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVProgressBar.html:31515,Simpl,Simple,31515,doc/master/classTGVProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGVProgressBar.html,3,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,"ributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& ise",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsAnaConvPdf.html:4220,clear,clearEvalErrorLog,4220,root/html532/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsAnaConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"ributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:3320,clear,clearEvalErrorLog,3320,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"ributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:2921,clear,clearEvalErrorLog,2921,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,3,['clear'],['clearEvalErrorLog']
Usability,"ributes; int first {0};  first child to request ;  ; bool hidden {false};  show hidden files ;  ; int lastcycle {0};  show only last cycle, -1 - off, 0 - not change, +1 on, ;  ; int number {0};  number of childs to request, 0 - all childs ;  ; std::vector< std::string > path;  requested path ;  ; std::string regex;  applied regex ;  ; bool reload {false};  force items reload ;  ; bool reverse {false};  reverse item order ;  ; std::string sort;  kind of sorting ;  . #include <ROOT/RBrowserRequest.hxx>; Member Data Documentation. ◆ first. int ROOT::RBrowserRequest::first {0}. first child to request ; Definition at line 29 of file RBrowserRequest.hxx. ◆ hidden. bool ROOT::RBrowserRequest::hidden {false}. show hidden files ; Definition at line 33 of file RBrowserRequest.hxx. ◆ lastcycle. int ROOT::RBrowserRequest::lastcycle {0}. show only last cycle, -1 - off, 0 - not change, +1 on, ; Definition at line 35 of file RBrowserRequest.hxx. ◆ number. int ROOT::RBrowserRequest::number {0}. number of childs to request, 0 - all childs ; Definition at line 30 of file RBrowserRequest.hxx. ◆ path. std::vector<std::string> ROOT::RBrowserRequest::path. requested path ; Definition at line 28 of file RBrowserRequest.hxx. ◆ regex. std::string ROOT::RBrowserRequest::regex. applied regex ; Definition at line 36 of file RBrowserRequest.hxx. ◆ reload. bool ROOT::RBrowserRequest::reload {false}. force items reload ; Definition at line 34 of file RBrowserRequest.hxx. ◆ reverse. bool ROOT::RBrowserRequest::reverse {false}. reverse item order ; Definition at line 32 of file RBrowserRequest.hxx. ◆ sort. std::string ROOT::RBrowserRequest::sort. kind of sorting ; Definition at line 31 of file RBrowserRequest.hxx. Libraries for ROOT::RBrowserRequest:. [legend]; The documentation for this class was generated from the following file:; gui/browserv7/inc/ROOT/RBrowserRequest.hxx. ROOTRBrowserRequest. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserRequest.html:2304,Guid,Guide,2304,doc/v632/classROOT_1_1RBrowserRequest.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserRequest.html,1,['Guid'],['Guide']
Usability,"ribution (lower tail). . \[ D(x) = \int_{-\infty}^{x} p(x) dx \]. where \(p(x)\) is the Landau probability density function : ; \[ p(x) = \frac{1}{\xi} \phi (\lambda) \]. with ; \[ \phi(\lambda) = \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} e^{\lambda s + s \log{s}} ds\]. with \(\lambda = (x-x_0)/\xi\). For a detailed description see K.S. Kölbig and B. Schorr, A program package for the Landau distribution, Computer Phys. Comm. 31 (1984) 97-111 [Erratum-ibid. 178 (2008) 972]. The same algorithms as in CERNLIB (DISLAN) is used.; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 336 of file ProbFuncMathCore.cxx. ◆ landau_cdf_c(). double ROOT::Math::landau_cdf_c ; (; double ; x, . double ; xi = 1, . double ; x0 = 0 . ). inline . Complement of the distribution function of the Landau distribution (upper tail). . \[ D(x) = \int_{x}^{+\infty} p(x) dx \]. where p(x) is the Landau probability density function. It is implemented simply as 1. - landau_cdf; Parameters. xThe argument \(x\) ; xiThe width parameter \(\xi\) ; x0The location parameter \(x_0\) . Definition at line 402 of file ProbFuncMathCore.h. ◆ lognormal_cdf(). double ROOT::Math::lognormal_cdf ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). Cumulative distribution function of the lognormal distribution (lower tail). . \[ D(x) = \int_{-\infty}^{x} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \]. For detailed description see Mathworld. ; Definition at line 218 of file ProbFuncMathCore.cxx. ◆ lognormal_cdf_c(). double ROOT::Math::lognormal_cdf_c ; (; double ; x, . double ; m, . double ; s, . double ; x0 = 0 . ). Complement of the cumulative distribution function of the lognormal distribution (upper tail). . \[ D(x) = \int_{x}^{+\infty} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \]. For detailed description see Mathworld. ; Definition at line 210 of file ProbFuncMathCore.cxx. ◆ negative_binomia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__ProbFunc.html:16837,simpl,simply,16837,doc/master/group__ProbFunc.html,https://root.cern,https://root.cern/doc/master/group__ProbFunc.html,1,['simpl'],['simply']
Usability,"rid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator; in the option. Example:. h2->Draw(""SPEC dm(1,2)"");. will paint the 2D histogram h2 using the ""Light Display mode group"" and; the ""Grid Display mode"". The following table summarizes all the possible; combinations of the ""Display modes groups"" and the ""Display modes"". +--------+-------+--------+--------------+; | Simple | Light | Height | Light-Height |; +-----------+--------+-------+--------+--------------+; | Points | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | Grid | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | Contours | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | Bars | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | LinesX | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | LinesY | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | BarsX | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | BarsY | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | Needles | X | - | - | - |; +-----------+--------+-------+--------+--------------+; | Surface | - | X | X | X |; +-----------+--------+-------+--------+--------------+; | Triangles | X | X | X | X |; +-----------+--------+-------+--------+--------------+. * * *. The Pen Attributes can be changed using pa(color, style, width). Example:. h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");. sets the line color to 2, line type to 1 and line width to2. Note that if; pa() is not specified, the histogram ""h2"" line attributes are used. Note; also that operators for SPEC option can be cummulated and specified in; any order. * * *. The buffer size can be change with bf(size). Example:. h2->Draw(""SPEC bf(8000)"");. The spectrum painter nee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:36985,Simpl,Simple,36985,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"ride {};; virtual TBuffer3D & GetBuffer3D(UInt_t reqSections) = 0;; ; protected:; Double_t fX, fY, fZ; // Origin; Int_t fColor;; ; ClassDefOverride(Shape,0);; };; ; ClassImp(Shape);; ; Shape::Shape(Int_t color, Double_t x, Double_t y, Double_t z) :; fX(x), fY(y), fZ(z), fColor(color); {}; ; class Box : public Shape; {; public:; Box(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ);; ~Box() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fDX, fDY, fDZ; // Half lengths; ; ClassDefOverride(Box,0);; };; ; ClassImp(Box);; ; Box::Box(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ) :; Shape(color,x,y,z),; fDX(dX), fDY(dY), fDZ(dZ); {}; ; TBuffer3D & Box::GetBuffer3D(UInt_t reqSections); {; static TBuffer3D buffer(TBuffer3DTypes::kGeneric);; ; // Complete kCore section - this could be moved to Shape base class; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); buffer.fLocalFrame = kFALSE;; buffer.SetLocalMasterIdentity();; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t origin[3] = { fX, fY, fZ };; Double_t halfLength[3] = { fDX, fDY, fDZ };; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // No kShapeSpecific section; ; // Complete kRawSizes section; if (reqSections & TBuffer3D::kRawSizes) {; buffer.SetRawSizes(8, 3*8, 12, 3*12, 6, 6*6);; buffer.SetSectionsValid(TBuffer3D::kRawSizes);; }; // Complete kRaw section; if (reqSections & TBuffer3D::kRaw) {; // Points (8); // 3 components: x,y,z; buffer.fPnts[ 0] = fX - fDX; buffer.fPnts[ 1] = fY - fDY; buffer.fPnts[ 2] = fZ - fDZ; // 0; buffer.fPnts[ 3] = fX + ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DMaster_8C.html:1863,Clear,ClearSectionsValid,1863,doc/master/viewer3DMaster_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DMaster_8C.html,1,['Clear'],['ClearSectionsValid']
Usability,"ride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFunctorBinding.h>. Inheritance diagram for RooFunctorPdfBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooFunctorPdfBinding() [1/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; ). default . ◆ RooFunctorPdfBinding() [2/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; const char * ; name, . const char * ; title, . const ROOT::Math::IBaseFunctionMultiDim & ; ftor, . const RooArgList & ; v . ). Create a RooFit PDF that makes ftor usable as a PDF in RooFit. ; Parameters. nameName of the object. ; titleTitle (e.g. for plotting) ; ftorFunctor instance to be evaluated and normalised. ; vRooFit variables to be passed to the function. . Definition at line 108 of file RooFunctorBinding.cxx. ◆ RooFunctorPdfBinding() [3/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; const RooFunctorPdfBinding & ; other, . const char * ; name = nullptr . ). Definition at line 124 of file RooFunctorBinding.cxx. ◆ ~RooFunctorPdfBinding(). RooFunctorPdfBinding::~RooFunctorPdfBinding ; (; ). inlineoverride . Definition at line 62 of file RooFunctorBinding.h. Member Function Documentation. ◆ Class(). static TClass * RooFunctorPdfBinding::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooFunctorPdfBinding::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooFunctorPdfBinding::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorPdfBinding.html:74570,usab,usable,74570,doc/master/classRooFunctorPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorPdfBinding.html,1,['usab'],['usable']
Usability,"ride;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t SupportsExtension (const char *ext) const;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; virtual void Sync (Int_t mode);  Set synchronisation on or off. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:33777,Clear,Clear,33777,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Clear'],['Clear']
Usability,"ridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 59 of file RooConstVar.h. ◆ isDerived(). bool RooConstVar::isDerived ; (; ); const. inlineoverridevirtual . Returns false, as the value of the constant doesn't depend on other objects. ; Reimplemented from RooAbsArg.; Definition at line 39 of file RooConstVar.h. ◆ Streamer(). void RooConstVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooConstVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 59 of file RooConstVar.h. ◆ translate(). void RooConstVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 61 of file RooConstVar.cxx. ◆ writeToStream(). void RooConstVar::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream. ; Reimplemented from RooAbsReal.; Definition at line 54 of file RooConstVar.cxx. Libraries for RooConstVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooConstVar.h; roofit/roofitcore/src/RooConstVar.cxx. RooConstVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:63836,Guid,Guide,63836,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,1,['Guid'],['Guide']
Usability,"riend . Definition at line 333 of file RooAbsData.h. ◆ RooFit::TestStatistics::RooAbsL. friend class RooFit::TestStatistics::RooAbsL. friend . Definition at line 335 of file RooAbsData.h. Member Data Documentation. ◆ _cachedVars. RooArgSet RooAbsData::_cachedVars. protected . ! External variables cached with this data set ; Definition at line 349 of file RooAbsData.h. ◆ _dstore. std::unique_ptr<RooAbsDataStore> RooAbsData::_dstore. protected . Data storage implementation. ; Definition at line 351 of file RooAbsData.h. ◆ _globalObservables. std::unique_ptr<RooArgSet> RooAbsData::_globalObservables. protected . Snapshot of global observables. ; Definition at line 355 of file RooAbsData.h. ◆ _namePtr. const TNamed* RooAbsData::_namePtr = nullptr. mutableprotected . ! De-duplicated name pointer. This will be equal for all objects with the same name. ; Definition at line 357 of file RooAbsData.h. ◆ _ownedComponents. std::map<std::string,RooAbsData*> RooAbsData::_ownedComponents. protected . Owned external components. ; Definition at line 353 of file RooAbsData.h. ◆ _uniqueId. const RooFit::UniqueId<RooAbsData> RooAbsData::_uniqueId. private . ! ; Definition at line 364 of file RooAbsData.h. ◆ _vars. RooArgSet RooAbsData::_vars. protected . Dimensions of this data set. ; Definition at line 348 of file RooAbsData.h. ◆ defaultStorageType. RooAbsData::StorageType RooAbsData::defaultStorageType =RooAbsData::Vector. staticprotected . Definition at line 312 of file RooAbsData.h. ◆ storageType. StorageType RooAbsData::storageType. protected . Definition at line 314 of file RooAbsData.h. Libraries for RooAbsData:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsData.h; roofit/roofitcore/src/RooAbsData.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooAbsData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:79869,Guid,Guide,79869,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['Guid'],['Guide']
Usability,riend class RooFixedProdPdf. friend . Definition at line 166 of file RooProdPdf.h. ◆ RooProdGenContext. friend class RooProdGenContext. friend . Definition at line 165 of file RooProdPdf.h. Member Data Documentation. ◆ _cacheMgr. RooObjCacheManager RooProdPdf::_cacheMgr. mutableprivate . Definition at line 155 of file RooProdPdf.h. ◆ _cutOff. double RooProdPdf::_cutOff = 0.0. private . Cutoff parameter for running product. ; Definition at line 173 of file RooProdPdf.h. ◆ _defNormSet. RooArgSet RooProdPdf::_defNormSet. private . Default normalization set. ; Definition at line 184 of file RooProdPdf.h. ◆ _extendedIndex. Int_t RooProdPdf::_extendedIndex = -1. private . Index of extended PDF (if any) ; Definition at line 176 of file RooProdPdf.h. ◆ _genCode. RooAICRegistry RooProdPdf::_genCode. mutableprivate . ! Registry of composite direct generator codes ; Definition at line 171 of file RooProdPdf.h. ◆ _pdfList. RooListProxy RooProdPdf::_pdfList. private . List of PDF components. ; Definition at line 174 of file RooProdPdf.h. ◆ _pdfNSetList. std::vector<std::unique_ptr<RooArgSet> > RooProdPdf::_pdfNSetList. private . List of PDF component normalization sets. ; Definition at line 175 of file RooProdPdf.h. ◆ _refRangeName. TNamed* RooProdPdf::_refRangeName = nullptr. mutableprivate . Reference range name for interpretation of conditional products. ; Definition at line 181 of file RooProdPdf.h. ◆ _selfNorm. bool RooProdPdf::_selfNorm = true. private . Is self-normalized. ; Definition at line 183 of file RooProdPdf.h. ◆ _useDefaultGen. bool RooProdPdf::_useDefaultGen = false. private . Use default or distributed event generator. ; Definition at line 179 of file RooProdPdf.h. Libraries for RooProdPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooProdPdf.h; roofit/roofitcore/src/RooProdPdf.cxx. RooProdPdf. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:05 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProdPdf.html:103719,Guid,Guide,103719,doc/master/classRooProdPdf.html,https://root.cern,https://root.cern/doc/master/classRooProdPdf.html,1,['Guid'],['Guide']
Usability,"rieval ...Definition TMap.h:40; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RCompressionSetting::EAlgorithm::kUseGlobal@ kUseGlobalUse the global compression algorithm.Definition Compression.h:93; ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault@ kUseCompiledDefaultUse the compile-time default setting.Definition Compression.h:53; ROOT::RCompressionSetting::ELevel::kUseMin@ kUseMinCompression level reserved when we are not sure what to use (1 is for the fastest compression)Definition Compression.h:72; TFile::InfoListRetSimple struct of the return value of GetStreamerInfoListImpl.Definition TFile.h:145; TFile::InfoListRet::fReturnCodeInt_t fReturnCodeDefinition TFile.h:147; TFile::InfoListRet::fHashROOT::Internal::RConcurrentHashColl::HashValue fHashDefinition TFile.h:148; TFile::InfoListRet::fListTList * fListDefinition TFile.h:146; Drawth1 Draw(). ioioincTFile.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:51978,Guid,Guide,51978,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['Guid'],['Guide']
Usability,"rieves some of them in arrays thanks to GetVal,; generates and draw graphs with these arrays. The option goff in TTree::Draw behaves like any other drawing option except that, at the end, no graphics is produced ( goff= graphics off). This allows to generate as many TTree variables as needed. All the graphics options (except para and candle) are limited to four variables only. And para and candle need at least two variables.; Note that by default TTree::Draw creates the arrays obtained with GetVal with a length corresponding to the parameter fEstimate. By default fEstimate=1000000 and can be modified via TTree::SetEstimate. To keep in memory all the results use: tree->SetEstimate(-1);; SetEstimate should be called if the expected number of selected rows is greater than 1000000. ; The arrays' dimension is 5000; ; void treegetval() {; // create a simple TTree with 5 branches; Int_t run, evt;; Float_t x,y,z;; TTree *T = new TTree(""T"",""test friend trees"");; T->Branch(""Run"",&run,""Run/I"");; T->Branch(""Event"",&evt,""Event/I"");; T->Branch(""x"",&x,""x/F"");; T->Branch(""y"",&y,""y/F"");; T->Branch(""z"",&z,""z/F"");; TRandom r;; for (Int_t i=0;i<10000;i++) {; if (i < 5000) run = 1;; else run = 2;; evt = i;; x = r.Gaus(10,1);; y = r.Gaus(20,2);; z = r.Landau(2,1);; T->Fill();; }; ; // Draw with option goff and generate seven variables; Int_t n = T->Draw(""x:y:z:Run:Event:sin(x):cos(x)"",""Run==1"",""goff"");; printf(""The arrays' dimension is %d\n"",n);; ; // Retrieve variables 0, 5 et 6; Double_t *vx = T->GetVal(0);; Double_t *vxs = T->GetVal(5);; Double_t *vxc = T->GetVal(6);; ; // Create and draw graphs; TGraph *gs = new TGraph(n,vx,vxs);; TGraph *gc = new TGraph(n,vx,vxc);; gs->Draw(""ap"");; gc->Draw(""p"");; }; ; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/treegetval_8C.html:1238,simpl,simple,1238,doc/master/treegetval_8C.html,https://root.cern,https://root.cern/doc/master/treegetval_8C.html,1,['simpl'],['simple']
Usability,"rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TThreadSlots; 13#define ROOT_TThreadSlots; 14 ; 15#include ""RtypesCore.h""; 16 ; 17namespace ROOT {; 18 ; 19 enum EThreadSlotReservation {; 20 // Describe the system wide slot pre-allocation in the TThread; 21 // 'special data' storage array ; meant to be used as thread local; 22 // storage. (See TThread::Tsd); 23 //; 24 // Slot 0 through 19 can be used for user application; 25 // Slot 20 and above are reserved for the global system; 26 kMaxUserThreadSlot = 20,; 27 ; 28 // Slot reserved by ROOT's packages.; 29 kPadThreadSlot = 20,; 30 kClassThreadSlot = 21,; 31 /* This no longer used.; 32 kDirectoryThreadSlot = 22,; 33 */; 34 kFileThreadSlot = 23,; 35 kPerfStatsThreadSlot = 24,; 36 ; 37 kMaxThreadSlot = 25 // Size of the array of thread local slots in TThread; 38 };; 39}; 40 ; 41R__EXTERN void **(*gThreadTsd)(void*,Int_t);; 42 ; 43#endif // ROOT_TThreadSlots; R__EXTERN#define R__EXTERNDefinition DllImport.h:26; RtypesCore.h; Int_tint Int_tDefinition RtypesCore.h:45; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EThreadSlotReservationEThreadSlotReservationDefinition TThreadSlots.h:19; ROOT::kPerfStatsThreadSlot@ kPerfStatsThreadSlotDefinition TThreadSlots.h:35; ROOT::kPadThreadSlot@ kPadThreadSlotDefinition TThreadSlots.h:29; ROOT::kFileThreadSlot@ kFileThreadSlotDefinition TThreadSlots.h:34; ROOT::kMaxUserThreadSlot@ kMaxUserThreadSlotDefinition TThreadSlots.h:26; ROOT::kMaxThreadSlot@ kMaxThreadSlotDefinition TThreadSlots.h:37; ROOT::kClassThreadSlot@ kClassThreadSlotDefinition TThreadSlots.h:30. corebaseincTThreadSlots.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TThreadSlots_8h_source.html:2320,Guid,Guide,2320,doc/master/TThreadSlots_8h_source.html,https://root.cern,https://root.cern/doc/master/TThreadSlots_8h_source.html,1,['Guid'],['Guide']
Usability,"riginal: public RooStats::HypoTestCalculator, public TNamed. HybridCalculatorOriginal class: this class is a fresh rewrite in RooStats of; 	RooStatsCms/LimitCalculator developped by D. Piparo and G. Schott; Authors: D. Piparo, G. Schott - Universitaet Karlsruhe. The class is born from the need to have an implementation of the CLs; method that could take advantage from the RooFit Package.; The basic idea is the following:; - Instantiate an object specifying a signal+background model, a background model and a dataset.; - Perform toy MC experiments to know the distributions of -2lnQ; - Calculate the CLsb and CLs values as ""integrals"" of these distributions. The class allows the user to input models as RooAbsPdf ( TH1 object could be used; by using the RooHistPdf class); The pdfs must be ""extended"": for more information please refer to; http://roofit.sourceforge.net). The dataset can be entered as a; RooAbsData objects. Unlike the TLimit Class a complete MC generation is performed at each step; and not a simple Poisson fluctuation of the contents of the bins.; Another innovation is the treatment of the nuisance parameters. The user; can input in the constructor nuisance parameters.; To include the information that we have about the nuisance parameters a prior; PDF (RooAbsPdf) should be specified. Different test statistic can be used (likelihood ratio, number of events or; profile likelihood ratio. The default is the likelihood ratio.; See the method SetTestStatistic. The number of toys to be generated is controlled by SetNumberOfToys(n). The result of the calculations is returned as a HybridResult object pointer. see also the following interesting references:; - Alex Read, ""Presentation of search results: the CLs technique"",; Journal of Physics G: Nucl. Part. Phys. 28 2693-2704 (2002).; see http://www.iop.org/EJ/abstract/0954-3899/28/10/313/. - Alex Read, ""Modified Frequentist Analysis of Search Results (The CLs Method)"" CERN 2000-005 (30 May 2000). - V. Bartsch, G.Quas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:1350,simpl,simple,1350,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,6,['simpl'],['simple']
Usability,"rimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoSphereEditor.html:22573,undo,undoing,22573,root/html604/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html604/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"rimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for sphere editor. ~TGeoSphereEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to a given sphere. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi1. void DoPhi2(); Slot for phi2. void DoPhi(); Slot for phi slider. void DoTheta1(); Slot for theta1. void DoTheta2(); Slot for theta2. void DoTheta(); Slot for theta slider. TGeoSphereEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoSphereEditor.html:22573,undo,undoing,22573,root/html602/TGeoSphereEditor.html,https://root.cern,https://root.cern/root/html602/TGeoSphereEditor.html,1,['undo'],['undoing']
Usability,"ring &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 24 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 41 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 149 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 180 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 158 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 128 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 140 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html:1966,Clear,ClearOnClose,1966,doc/v632/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomHierarchy.html,1,['Clear'],['ClearOnClose']
Usability,"ring &kind);  Process signals from geometry description object. ;  ; void WebWindowCallback (unsigned connid, const std::string &arg);  Process data from client. ;  . Protected Attributes; RGeomDescription & fDesc;  ! geometry description, shared with external ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomHierarchy.hxx>; Constructor & Destructor Documentation. ◆ RGeomHierarchy(). RGeomHierarchy::RGeomHierarchy ; (; RGeomDescription & ; desc, . bool ; use_server_threads = false . ). constructor ; Definition at line 32 of file RGeomHierarchy.cxx. ◆ ~RGeomHierarchy(). RGeomHierarchy::~RGeomHierarchy ; (; ). virtual . destructor ; Definition at line 48 of file RGeomHierarchy.cxx. Member Function Documentation. ◆ BrowseTo(). void RGeomHierarchy::BrowseTo ; (; const std::string & ; itemname). Let browse to specified location. ; Definition at line 156 of file RGeomHierarchy.cxx. ◆ ClearOnClose(). void RGeomHierarchy::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 187 of file RGeomHierarchy.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomHierarchy::Description ; (; ). inline . Definition at line 48 of file RGeomHierarchy.hxx. ◆ ProcessSignal(). void RGeomHierarchy::ProcessSignal ; (; const std::string & ; kind). protected . Process signals from geometry description object. ; Definition at line 165 of file RGeomHierarchy.cxx. ◆ Show(). void RGeomHierarchy::Show ; (; const RWebDisplayArgs & ; args = """"). Show hierarchy in web window. ; Definition at line 135 of file RGeomHierarchy.cxx. ◆ Update(). void RGeomHierarchy::Update ; (; ). Update client - reload hierarchy. ; Definition at line 147 of file RGeomHierarchy.cxx. ◆ WebWindowCallback(). void RGeomHierarchy::WebWindowCallback ; (; unsigned ; connid, . const std::string & ; arg . ). protected . Process data from client. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html:2022,Clear,ClearOnClose,2022,doc/master/classROOT_1_1RGeomHierarchy.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomHierarchy.html,1,['Clear'],['ClearOnClose']
Usability,"ring the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; virtual Bool_t CancelStagingDataSet (const char *dataset);  Cancels a dataset staging request. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; virtual void ClearCache (const char *file=0);  Remove file from all file caches. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; virtual void ClearDataSetCache (const char *dataset=0);  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParamet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:4558,Clear,ClearFeedback,4558,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,9,"['Clear', 'feedback']","['Clear', 'ClearFeedback', 'feedback']"
Usability,"ring theMethodName, TString methodTitle, TString theOption="""")Book a classifier or regression method.Definition Factory.cxx:352; TMVA::Factory::TestAllMethodsvoid TestAllMethods()Evaluates all booked methods on the testing data and adds the output to the Results in the corresponi...Definition Factory.cxx:1271; TMVA::Factory::EvaluateAllMethodsvoid EvaluateAllMethods(void)Iterates over all MVAs that have been booked, and calls their evaluation methods.Definition Factory.cxx:1376; TMVA::MethodBaseVirtual base Class for all MVA method.Definition MethodBase.h:111; TMVA::MethodCategoryClass for categorizing the phase space.Definition MethodCategory.h:58; TMVA::MethodCategory::AddMethodTMVA::IMethod * AddMethod(const TCut &, const TString &theVariables, Types::EMVA theMethod, const TString &theTitle, const TString &theOptions)adds sub-classifier for a categoryDefinition MethodCategory.cxx:138; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kFisher@ kFisherDefinition Types.h:82; TMVA::Types::kCategory@ kCategoryDefinition Types.h:97; TMVA::Types::kLikelihood@ kLikelihoodDefinition Types.h:79; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TMVA::TMVAGuivoid TMVAGui(const char *fName=""TMVA.root"", TString dataset=""""); Factory.h; AuthorAndreas Hoecker ; Definition in file TMVAClassificationCategory.C. tutorialstmvaTMVAClassificationCategory.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:38256,Guid,Guide,38256,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['Guid'],['Guide']
Usability,"ring& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); Bool_tTEveCaloViz::AssertCellIdCache() const; TEveRGBAPalette*TEveCaloViz::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; Bool_tTEveCaloViz::CellInEtaPhiRng(TEveCaloData::CellData_t&) const; virtual voidTEveCaloViz::CellSelectionChanged(); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCalo3D.html:2412,Clear,Clear,2412,root/html528/TEveCalo3D.html,https://root.cern,https://root.cern/root/html528/TEveCalo3D.html,12,['Clear'],['Clear']
Usability,"ring& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveRGBAPalette*AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTAttBBox::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveDigitSet.html:3768,Clear,Clear,3768,root/html528/TEveDigitSet.html,https://root.cern,https://root.cern/root/html528/TEveDigitSet.html,6,['Clear'],['Clear']
Usability,"ring& name, double val, double step); virtual boolSetVariableValue(unsigned int, double); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string&) const; virtual stringVariableName(unsigned int) const; virtual const double*X() const. private:. ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. intfDebugprint level; unsigned intfMaxCallsmax number of function calls ; unsigned intfMaxItermax number or iterations used to find the minimum; doublefPrecprecision; intfStatusstatus of minimizer ; intfStrategyminimizer strategy; doublefToltolerance (absolute); doublefUperror scale ; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~Minimizer(). Destructor (no operations). {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction & func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction & func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int , double ); set the value of an existing variable. { return fal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:4386,Clear,Clear,4386,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,1,['Clear'],['Clear']
Usability,"ring& name, double val, double step); virtual boolSetVariableValue(unsigned int, double); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string&) const; virtual stringVariableName(unsigned int) const; virtual const double*X() const. private:. ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. intfDebugprint level; unsigned intfMaxCallsmax number of function calls ; unsigned intfMaxItermax number or iterations used to find the minimum; doublefPrecprecision; intfStatusstatus of minimizer ; intfStrategyminimizer strategy; doublefToltolerance (absolute); doublefUperror scale ; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~Minimizer(). Destructor (no operations). {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int , double ); set the value of an existing variable. { return false",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Minimizer.html:4533,Clear,Clear,4533,root/html528/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Minimizer.html,3,['Clear'],['Clear']
Usability,"ring& stringOption); static TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLBoxPainter(const TGLBoxPainter&); virtual voidDeInitGL() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tHasSections() const; virtual voidInitGL() const; TGLBoxPainter&operator=(const TGLBoxPainter&); voidSetPlotColor() const. Data Members; public:. enum EBoxType { kBox; kBox1; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fCoord; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLBoxPainter.html:1363,Clear,ClearBuffers,1363,root/html528/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html528/TGLBoxPainter.html,1,['Clear'],['ClearBuffers']
Usability,"ring& stringOption); static TClass*Class(); Bool_tTGLPlotPainter::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLLegoPainter(const TGLLegoPainter&); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawLegoCartesian() const; voidDrawLegoCylindrical() const; voidDrawLegoPolar() const; voidDrawLegoSpherical() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; TGLLegoPainter&operator=(const TGLLegoPainter&); Bool_tPreparePalette() const; voidSetLegoColor() const. Data Members; public:. enum ELegoType { kColorSimple; kColorLevel; kCylindricBars; };; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLegoPainter.html:1404,Clear,ClearBuffers,1404,root/html528/TGLLegoPainter.html,https://root.cern,https://root.cern/root/html528/TGLLegoPainter.html,1,['Clear'],['ClearBuffers']
Usability,"ring.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; bool; double; int; unsigned int; g_projMngROOT::Experimental::REveProjectionManager * g_projMngDefinition collection_proxies.C:60; eveMngROOT::Experimental::REveManager * eveMngDefinition collection_proxies.C:59; RND_BOX#define RND_BOX(x); kR_maxconst Double_t kR_maxDefinition collection_proxies.C:43; collection_proxiesvoid collection_proxies(bool proj=true)Definition collection_proxies.C:828; kZ_dconst Double_t kZ_dDefinition collection_proxies.C:44; kR_minconst Double_t kR_minDefinition collection_proxies.C:42; ptTPaveText * ptDefinition entrylist_figure1.C:7; eveMngREX::REveManager * eveMngDefinition event_demo.C:41; rhoZViewREX::REveViewer * rhoZViewDefinition event_demo.C:47; rhoZEventSceneREX::REveScene * rhoZEventSceneDefinition event_demo.C:45; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17; ROOT::ExperimentalDefinition RDirectory.hxx:30; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; fw3dlegoDefinition collection_proxies.C:47; fw3dlego::xbins_nconst int xbins_nDefinition collection_proxies.C:48; fw3dlego::xbinsconst double xbins[xbins_n]Definition collection_proxies.C:49; v@ vDefinition rootcling_impl.cxx:3699; ROOT::Experimental::REveCaloData::CellId_tDefinition REveCaloData.hxx:61; ROOT::Experimental::REveCaloData::SliceInfo_t::Setupvoid Setup(const char *name, Float_t threshold, Color_t col, Char_t transp=101)Definition REveCaloData.hxx:46; ROOT::Experimental::REveDataProxyBuilderBase::ProductDefinition REveDataProxyBuilderBase.hxx:29; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. tutorialseve7collection_proxies.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/collection__proxies_8C_source.html:62793,Guid,Guide,62793,doc/master/collection__proxies_8C_source.html,https://root.cern,https://root.cern/doc/master/collection__proxies_8C_source.html,1,['Guid'],['Guide']
Usability,"ring::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::BaseNamevirtual const char * BaseName(const char *pathname)Base name of a file name. Base name of /user/root is root.Definition TSystem.cxx:934; TTreeCacheA cache to speed-up the reading of ROOT datasets.Definition TTreeCache.h:32; TTreeCache::UpdateBranchesvirtual void UpdateBranches(TTree *tree)Update pointer to current Tree and recompute pointers to the branches in the cache.Definition TTreeCache.cxx:2211; TTreeCache::ResetCachevirtual void ResetCache()This will simply clear the cache.Definition TTreeCache.cxx:2040; TTree::TClusterIteratorHelper class to iterate over cluster of baskets.Definition TTree.h:270; TTree::TFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends.Definition TTree.h:188; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::AddFriendvirtual TFriendElement * AddFriend(const char *treename, const char *filename="""")Add a TFriendElement to the list of friends.Definition TTree.cxx:1332; TTree::FindBranchvirtual TBranch * FindBranch(const char *name)Return the branch that correspond to the path 'branchname', which can include the name of the tree or...Definition TTree.cxx:4841; TTree::SetBranchStatusvirtual void SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)Set branch status to Process or DoNotProcess.Definition TTree.cxx:8534; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:143642,simpl,simply,143642,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsAnaConvPdf.html:4201,clear,clearValueDirty,4201,root/html528/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsAnaConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsAnaConvPdf.html:4201,clear,clearValueDirty,4201,root/html530/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsAnaConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCachedPdf.html:3301,clear,clearValueDirty,3301,root/html528/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsCachedPdf.html,2,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedPdf.html:3301,clear,clearValueDirty,3301,root/html530/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedPdf.html,2,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDecay.html:2705,clear,clearValueDirty,2705,root/html528/RooDecay.html,https://root.cern,https://root.cern/root/html528/RooDecay.html,1,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDecay.html:2705,clear,clearValueDirty,2705,root/html530/RooDecay.html,https://root.cern,https://root.cern/root/html530/RooDecay.html,1,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBCPEffDecay.html:3007,clear,clearValueDirty,3007,root/html528/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html528/RooBCPEffDecay.html,8,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBDecay.html:2905,clear,clearValueDirty,2905,root/html528/RooBDecay.html,https://root.cern,https://root.cern/root/html528/RooBDecay.html,1,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooBDecay.html:2905,clear,clearValueDirty,2905,root/html530/RooBDecay.html,https://root.cern,https://root.cern/root/html530/RooBDecay.html,1,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgusBG.html:2729,clear,clearValueDirty,2729,root/html528/RooArgusBG.html,https://root.cern,https://root.cern/root/html528/RooArgusBG.html,46,['clear'],['clearValueDirty']
Usability,"ring>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooExtendPdf.html:3254,clear,clearValueDirty,3254,root/html528/RooExtendPdf.html,https://root.cern,https://root.cern/root/html528/RooExtendPdf.html,60,['clear'],['clearValueDirty']
Usability,"ring ; indent = """" . ); const. overridevirtual . Print the formatted table contents on the given stream. ; Reimplemented from RooPrintable.; Definition at line 189 of file Roo1DTable.cxx. ◆ printName(). void Roo1DTable::printName ; (; std::ostream & ; os); const. overridevirtual . Print the name of the table. ; Reimplemented from RooPrintable.; Definition at line 128 of file Roo1DTable.cxx. ◆ printTitle(). void Roo1DTable::printTitle ; (; std::ostream & ; os); const. overridevirtual . Print the title of the table. ; Reimplemented from RooPrintable.; Definition at line 138 of file Roo1DTable.cxx. ◆ printValue(). void Roo1DTable::printValue ; (; std::ostream & ; os); const. overridevirtual . Print the table value, i.e. the contents, in 'inline' format. ; Reimplemented from RooPrintable.; Definition at line 158 of file Roo1DTable.cxx. ◆ Streamer(). void Roo1DTable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void Roo1DTable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 65 of file Roo1DTable.h. Member Data Documentation. ◆ _count. std::vector<double> Roo1DTable::_count. protected . Array of counters for each state. ; Definition at line 61 of file Roo1DTable.h. ◆ _nOverflow. double Roo1DTable::_nOverflow. protected . Number of overflow entries. ; Definition at line 63 of file Roo1DTable.h. ◆ _total. double Roo1DTable::_total. protected . Total number of entries. ; Definition at line 62 of file Roo1DTable.h. ◆ _types. TObjArray Roo1DTable::_types. protected . Array of defined category states. ; Definition at line 60 of file Roo1DTable.h. Libraries for Roo1DTable:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/Roo1DTable.h; roofit/roofitcore/src/Roo1DTable.cxx. Roo1DTable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo1DTable.html:22301,Guid,Guide,22301,doc/master/classRoo1DTable.html,https://root.cern,https://root.cern/doc/master/classRoo1DTable.html,1,['Guid'],['Guide']
Usability,"rint style. ;  ; bool isValid () const;  ; bool isVerbose () const;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of context, i.e. the observables being generated in this context. ;  ; void printClassName (std::ostream &os) const override;  Print class name of context. ;  ; void printName (std::ostream &os) const override;  Print name of context. ;  ; void printTitle (std::ostream &os) const override;  Print title of context. ;  ; void setVerbose (bool verbose=true);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinnedGenContext.html:2942,Clear,Clear,2942,doc/master/classRooBinnedGenContext.html,https://root.cern,https://root.cern/doc/master/classRooBinnedGenContext.html,2,['Clear'],['Clear']
Usability,"rints only the picture in the pad pointed by pad1. The size of the Postscript picture, by default, is computed to keep the aspect ratio of the picture on the screen, where the size along x is always 20cm. You can set the size of the PostScript picture before generating the picture with a command such as:; TPostScript myps(""myfile.ps"",111); myps.Range(xsize,ysize);; object->Draw();; myps.Close();; TPostScriptInterface to PostScript.Definition TPostScript.h:20; TPostScript::Rangevoid Range(Float_t xrange, Float_t yrange)Set the range for the paper in centimeters.Definition TPostScript.cxx:2062; TPostScript::Closevoid Close(Option_t *opt="""") overrideClose a PostScript file.Definition TPostScript.cxx:442; Drawth1 Draw(); You can set the default paper size with: gStyle->SetPaperSize(xsize,ysize);; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; You can resume writing again in this file with myps.Open();. Note that you may have several Postscript files opened simultaneously. Output type; The output type allows to define how the PostScript output will looks like. It allows to define the page format (A4, Legal etc..), the orientation (Portrait, Landscape) and the number of images (zones) per page. The output type has the following form:; [Format][Nx][Ny][Type]; Formatstatic char * Format(const char *format, va_list ap)Format a string in a circular formatting buffer (using a printf style format descriptor).Definition TString.cxx:2442; Where:. Format : Is an integer between 0 and 99 defining the page format: Format = 3 the paper is in the standard A3 format.; Format = n (1<n<98) is an An format.; Format = 4 and Format=0 are the same and define an A4 page.; The A0 format is selected by Format=99.; The US format Letter is selected by Format = 100.; The US format Legal is selected by Format = 200.; The US format Ledger is selected by Format = 300.; forma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPostScript.html:2152,resume,resume,2152,doc/master/classTPostScript.html,https://root.cern,https://root.cern/doc/master/classTPostScript.html,1,['resume'],['resume']
Usability,"rior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate them; The toy are generated by default for each poi values; (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; each poi value. It can be convenient when the generation time is much larger than the evaluation time,; otherwise it is recoomended to re-generate the toy for each poi scanned point of the posterior function. ROOFIT:; use roofit default integration methods which will produce a nested integral (not reccomended for more; than 1 nuisance parameters). if type = 0 use default specified via class IntegratorMultiDimOptions::SetDefaultIntegrator. SimpleInterval* GetInterval() const; Compute the interval. By Default a central interval is computed; and the result is a SimpleInterval object.; Using the method (to be called before SetInterval) SetLeftSideTailFraction the user can choose the type of interval.; By default the returned interval is a central interval with the confidence level specified; previously in the constructor ( LeftSideTailFraction = 0.5).; For lower limit use SetLeftSideTailFraction = 1; For upper limit use SetLeftSideTailFraction = 0; for shortest intervals use SetLeftSideTailFraction = -1 or call the method SetShortestInterval(); NOTE: The BayesianCalculator covers only the case with one; single parameter of interest; NOTE: User takes ownership of the returned object. double GetMode() const; Returns the value of the parameter for the point in; parameter-space that is the most likely.; How do we do if there are points that are equi-probable?; use approximate posterior; t.b.d use real function to find the mode. void ComputeIntervalUsingRooFit(double c1, double c2) const; internal function compute the interval ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:14209,Simpl,SimpleInterval,14209,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,5,['Simpl'],['SimpleInterval']
Usability,"rious statistical distributions (continuous and discrete). ; Whenever possible the conventions followed are those of the CRC Concise Encyclopedia of Mathematics, Second Edition (or Mathworld). By convention the distributions are centered around 0, so for example in the case of a Gaussian there is no parameter mu. The user must calculate the shift themselves if they wish.; MathCore provides the majority of the probability density functions, of the cumulative distributions and of the quantiles (inverses of the cumulatives). Additional distributions are also provided by the MathMore library. . Modules;  Probability Density Functions (PDF);  Probability density functions of various statistical distributions (continuous and discrete). ;  ;  Cumulative Distribution Functions (CDF);  Cumulative distribution functions of various distributions. ;  ;  Statistical functions from truncated distributions;  Statistical functions for the truncated distributions. ;  ;  Quantile Functions;  Inverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions. ;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Classes; class  ROOT::Math::Vavilov;  Base class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurate;  Class describing a Vavilov distribution. More...;  ; class  ROOT::Math::VavilovAccurateCdf;  Class describing the Vavilov cdf. More...;  ; class  ROOT::Math::VavilovAccuratePdf;  Class describing the Vavilov pdf. More...;  ; class  ROOT::Math::VavilovAccurateQuantile;  Class describing the Vavilov quantile function. More...;  ; class  ROOT::Math::VavilovFast;  Class describing a Vavilov distribution. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__StatFunc.html:2227,Guid,Guide,2227,doc/master/group__StatFunc.html,https://root.cern,https://root.cern/doc/master/group__StatFunc.html,1,['Guid'],['Guide']
Usability,"riptor of the container value type; TStreamerInfoActions::TActionSequence*TGenCollectionProxy::fWriteMemberWise. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEmulatedCollectionProxy(const TEmulatedCollectionProxy& copy); Build a Streamer for an emulated vector whose type is 'name'. TEmulatedCollectionProxy(const char* cl_name, Bool_t silent); Build a Streamer for a collection whose type is described by 'collectionClass'. ~TEmulatedCollectionProxy(); Standard destructor. TVirtualCollectionProxy* Generate() const; Virtual copy constructor. void Destructor(void* p, Bool_t dtorOnly = kFALSE) const; Virtual destructor. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; Virtual array destructor. TGenCollectionProxy * InitializeEx(Bool_t silent); Proxy initializer. Bool_t IsValid() const; Return true if the collection proxy was well initialized. UInt_t Size() const; Return the current size of the container. void Clear(const char* opt = """"); Clear the emulated collection. void Shrink(UInt_t nCurr, UInt_t left, Bool_t force); Shrink the container. void Expand(UInt_t nCurr, UInt_t left); Expand the container. void Resize(UInt_t n, Bool_t force_delete); Resize the container. void* At(UInt_t idx); Return the address of the value at index 'idx'. void* Allocate(UInt_t n, Bool_t forceDelete); Allocate the necessary space. void Insert(const void* data, void* container, size_t size); Insert data into the container where data is a C-style array of the actual type contained in the collection; of the given size. For associative container (map, etc.), the data type is the pair<key,value>. void Commit(void* env). void ReadItems(int nElements, TBuffer& b); Object input streamer. void WriteItems(int nElements, TBuffer& b); Object output streamer. void ReadBuffer(TBuffer& buff, void* pObj, const TClass* onfile); Read portion of the streamer. void ReadBuffer(TBuffer& buff, void* pObj); Read portion of the streamer. void Streamer(TBuffer& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEmulatedCollectionProxy.html:8662,Clear,Clear,8662,root/html602/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TEmulatedCollectionProxy.html,4,['Clear'],['Clear']
Usability,"riptor;  Meta-data for a set of ntuple clusters. More...;  ; class  ROOT::Experimental::Internal::RClusterDescriptorBuilder;  A helper class for piece-wise construction of an RClusterDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  ROOT::Experimental::RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  ROOT::Experimental::Internal::RClusterGroupDescriptorBuilder;  A helper class for piece-wise construction of an RClusterGroupDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RClusterGroupDescriptorIterable;  Used to loop over all the cluster groups of an ntuple (in unspecified order) More...;  ; class  ROOT::Experimental::Internal::RClusterPool;  Managed a set of clusters containing compressed and packed pages. More...;  ; class  ROOT::Experimental::Internal::RColumn;  A column is a storage-backed array of a simple, fixed-size type, from which pages can be mapped into memory. More...;  ; class  ROOT::Experimental::RColumnDescriptor;  Meta-data stored for every column of an ntuple. More...;  ; class  ROOT::Experimental::Internal::RColumnDescriptorBuilder;  A helper class for piece-wise construction of an RColumnDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RColumnDescriptorIterable;  Used to loop over a field's associated columns. More...;  ; class  ROOT::Experimental::Internal::RColumnElementBase;  A column element encapsulates the translation between basic C++ types and their column representation. More...;  ; class  ROOT::Experimental::Internal::RDaosNTupleAnchor;  Entry point for an RNTuple in a DAOS container. More...;  ; class  ROOT::Experimental::REntry;  The REntry is a collection of values in an ntuple corresponding to a complete row in the data set. More...;  ; class  ROOT::Experimental::RExtraTypeInfoDescriptor;  Field specific extra type infor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__NTuple.html:3777,simpl,simple,3777,doc/master/group__NTuple.html,https://root.cern,https://root.cern/doc/master/group__NTuple.html,1,['simpl'],['simple']
Usability,"ritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory(const char* name, const char* title, RooAbsCategory& inputCat, const char* defCatName = ""NotMapped"", Int_t defCatIdx = NoCatIdx); Constructor with input category and name of default output state, which is assigned; to all input category states that do not follow any mapping rule. RooMappedCategory(const RooMappedCategory& other, const char* name = 0). ~RooMappedCategory(); Destructor. Bool_t map(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); Add mapping rule: any input category state label matching the 'inKeyRegExp'; wildcard expression will be mapped to an output state with name 'outKey'. Rules are evaluated in the order they were added. In case an input state; matches more than one rule, the first rules output state will be assigned. RooCatType evaluate() const; Calculate the current value of the object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this mapped category to the specified stream. In addition to the info; from RooAbsCategory::printStream() we add:. Standard : input category; Shape : default value; Verbose : list of mapping rules. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; product operator construction. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. inline RooMappedCategory(); { }. TObject* clone(const char* newname) const; { return new RooMappedCategory(*this,newname); }. » Last changed: Thu Sep 23 20:00:08 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMappedCategory.html:22429,intuit,intuitively,22429,root/html528/RooMappedCategory.html,https://root.cern,https://root.cern/root/html528/RooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"ritance; Inherited Members; Includes; Libraries. Function documentation; RooMappedCategory(const char* name, const char* title, RooAbsCategory& inputCat, const char* defCatName = ""NotMapped"", Int_t defCatIdx = NoCatIdx); Constructor with input category and name of default output state, which is assigned; to all input category states that do not follow any mapping rule. RooMappedCategory(const RooMappedCategory& other, const char* name = 0). ~RooMappedCategory(); Destructor. Bool_t map(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); Add mapping rule: any input category state label matching the 'inKeyRegExp'; wildcard expression will be mapped to an output state with name 'outKey'. Rules are evaluated in the order they were added. In case an input state; matches more than one rule, the first rules output state will be assigned. RooCatType evaluate() const; Calculate the current value of the object. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this mapped category to the specified stream. In addition to the info; from RooAbsCategory::printStream() we add:. Standard : input category; Shape : default value; Verbose : list of mapping rules. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Read object contents from given stream. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooMappedCategory to more intuitively reflect the contents of the; product operator construction. void writeToStream(ostream& os, Bool_t compact) const; Write object contents to given stream. inline RooMappedCategory(); { }. TObject* clone(const char* newname) const; { return new RooMappedCategory(*this,newname); }. » Last changed: Tue Mar 10 17:17:48 2015 » Last generated: 2015-03-10 17:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMappedCategory.html:24323,intuit,intuitively,24323,root/html534/RooMappedCategory.html,https://root.cern,https://root.cern/root/html534/RooMappedCategory.html,1,['intuit'],['intuitively']
Usability,"ritance; Inherited Members; Includes; Libraries. Function documentation; TLeafF(); Default constructor for LeafF*-*-*-*-*-*-*-*-; *-* ============================. TLeafF(TBranch* parent, const char* name, const char* type); Create a LeafF*-*-; *-* ==============; -. ~TLeafF(); Default destructor for a LeafF*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read a float from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafF(). const char * GetTypeName() const; {return ""Float_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TLeafF.h 36407 2010-10-22 02:04:08Z pcanal $ » Last generated: 2010-10-22 11:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLeafF.html:8981,simpl,simple,8981,root/html528/TLeafF.html,https://root.cern,https://root.cern/root/html528/TLeafF.html,1,['simpl'],['simple']
Usability,"ritance; Inherited Members; Includes; Libraries. Function documentation; TLeafF(); Default constructor for LeafF*-*-*-*-*-*-*-*-; *-* ============================. TLeafF(TBranch* parent, const char* name, const char* type); Create a LeafF*-*-; *-* ==============; -. ~TLeafF(); Default destructor for a LeafF*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read a float from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafF(). const char * GetTypeName() const; {return ""Float_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TLeafF.h 36407 2010-10-22 02:04:08Z pcanal $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLeafF.html:9050,simpl,simple,9050,root/html530/TLeafF.html,https://root.cern,https://root.cern/root/html530/TLeafF.html,1,['simpl'],['simple']
Usability,"ritance; Inherited Members; Includes; Libraries. Function documentation; TLeafF(); Default constructor for LeafF*-*-*-*-*-*-*-*-; *-* ============================. TLeafF(TBranch* parent, const char* name, const char* type); Create a LeafF*-*-; *-* ==============; -. ~TLeafF(); Default destructor for a LeafF*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read a float from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafF(). const char * GetTypeName() const; {return ""Float_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TLeafF.h 36407 2010-10-22 02:04:08Z pcanal $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TLeafF.html:9050,simpl,simple,9050,root/html532/TLeafF.html,https://root.cern,https://root.cern/root/html532/TLeafF.html,1,['simpl'],['simple']
Usability,"riteDelete; };. protected:. TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection. private:. THashTable*fTableHash table used to store TPair's. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMap(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); TMap ctor. See THashTable for a description of the arguments. ~TMap(); TMap dtor. Objects are not deleted unless the TMap is the; owner (set via SetOwner()). void Add(TObject* obj); This function may not be used (but we need to provide it since it is; a pure virtual in TCollection). Use Add(key,value) instead. void Add(TObject* key, TObject* value); Add a (key,value) pair to the map. Float_t AverageCollisions() const; Return the ratio of entries vs occupied slots. Int_t Capacity() const; Return number of slots in the hashtable. Use GetSize() to get the; number of objects stored in the TMap. void Clear(Option_t* option = """"); Remove all (key,value) pairs from the map. The keys/values are; deleted depending on the state of key-ownership (SetOwner()) and; value-ownership (SetOwnerValue()). To delete these objects regardless of the ownership state use:; - Delete() to delete only keys;; - DeleteValues() to delete only values;; - DeleteAll() to delete both keys and values. Int_t Collisions(const char* keyname) const; Returns the number of collisions for a key with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* key) const; Returns the number of collisions for a key (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all (key,value) pairs from the map AND delete the keys; when they are allocated on the heap. void DeleteValues(); Remove all (key,value) pairs from the map AND delete the values; when they are allocated on the heap. void DeleteAll(); Remove all (key",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMap.html:8948,Clear,Clear,8948,root/html528/TMap.html,https://root.cern,https://root.cern/root/html528/TMap.html,4,['Clear'],['Clear']
Usability,"riteOptions::GetMaxUnzippedPageSizestd::size_t GetMaxUnzippedPageSize() constDefinition RNTupleWriteOptions.hxx:121; ROOT::Experimental::RNTupleWriteOptions::GetUseImplicitMTEImplicitMT GetUseImplicitMT() constDefinition RNTupleWriteOptions.hxx:136; ROOT::Experimental::RNTupleWriteOptions::EImplicitMT::kDefault@ kDefault; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RResultBase::Throwvoid Throw()Throws an RException with fError.Definition RError.cxx:67; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Experimental::kLeaf@ kLeafDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kRecord@ kRecordDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kCollection@ kCollectionDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kStreamer@ kStreamerDefinition RNTupleUtil.hxx:112; ROOT::Experimental::kVariant@ kVariantDefinition RNTupleUtil.hxx:112; ROOT::Splitstd::vector< std::string > Split(std::string_view str, std::string_view delims, bool skipEmpty=false)Splits a string at each character in delims.Definition StringUtils.cxx:23; writerDefinition writer.py:1; v@ vDefinition rootcling_impl.cxx:3699; ROOT::Experimental::Internal::RNTupleModelChangesetThe incremental changes to a RNTupleModelDefinition RNTupleModel.hxx:108; ROOT::Experimental::Internal::RNTupleModelChangeset::fModelRNTupleModel & fModelDefinition RNTupleModel.hxx:109. treentuplev7srcRNTupleModel.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleModel_8cxx_source.html:36228,Guid,Guide,36228,doc/master/RNTupleModel_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html,1,['Guid'],['Guide']
Usability,"rited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t p[][3], Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t p[][3]) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t p[][3]) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id: TEveBoxSetGL.h 36816 2010-11-20 22:41:48Z matevz $ » Last generated: 2010-12-08 16:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveBoxSetGL.html:5451,clear,cleare,5451,root/html528/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html528/TEveBoxSetGL.html,1,['clear'],['cleare']
Usability,"rited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t p[][3], Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t p[][3]) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t p[][3]) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id: TEveBoxSetGL.h 36816 2010-11-20 22:41:48Z matevz $ » Last generated: 2011-07-04 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveBoxSetGL.html:5451,clear,cleare,5451,root/html530/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html530/TEveBoxSetGL.html,1,['clear'],['cleare']
Usability,"rited Members; Includes; Libraries. Function documentation; TEveBoxSetGL(); Default constructor. ~TEveBoxSetGL(); Destructor. Int_t PrimitiveType() const; Return GL primitive used to render the boxes, based on the; render-mode specified in the model object. void MakeOriginBox(Float_t p[][3], Float_t dx, Float_t dy, Float_t dz) const; Fill array p to represent a box (0,0,0) - (dx,dy,dz). void RenderBoxStdNorm(const Float_t p[][3]) const; Render a box specified by points in array p with standard; axis-aligned normals. void RenderBoxAutoNorm(const Float_t p[][3]) const; Render box, calculate normals on the fly from first three points. void MakeDisplayList() const; Create a display-list for rendering a single box, based on the; current box-type.; Some box-types don't benefit from the display-list rendering and; so display-list is not created. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Determines if display-list will be used for rendering.; Virtual from TGLLogicalShape. void DLCacheDrop(); Called when display lists have been destroyed externally and the; internal display-list data needs to be cleare.; Virtual from TGLLogicalShape. void DLCachePurge(); Called when display-lists need to be returned to the system.; Virtual from TGLLogicalShape. Bool_t SetModel(TObject* obj, Option_t* opt = 0); Set model object.; Virtual from TGLObject. void RenderBoxes(TGLRnrCtx& rnrCtx) const; GL rendering for all box-types. void DirectDraw(TGLRnrCtx& rnrCtx) const; Actual rendering code.; Virtual from TGLLogicalShape. void Render(TGLRnrCtx& rnrCtx); Interface for direct rendering from classes that include TEveBoxSet; as a member. TEveBoxSetGL(const TEveBoxSetGL& ). TEveBoxSetGL& operator=(const TEveBoxSetGL& ). » Last changed: root/eve:$Id: TEveBoxSetGL.h 36816 2010-11-20 22:41:48Z matevz $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveBoxSetGL.html:5515,clear,cleare,5515,root/html532/TEveBoxSetGL.html,https://root.cern,https://root.cern/root/html532/TEveBoxSetGL.html,1,['clear'],['cleare']
Usability,"rivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . void ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::UseSumOfWeightSquare ; (; bool ; on = true). inline . Definition at line 173 of file PoissonLikelihoodFCN.h. Member Data Documentation. ◆ fExecutionPolicy. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ::ROOT::EExecutionPolicy ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fExecutionPolicy. private . Execution policy. ; Definition at line 210 of file PoissonLikelihoodFCN.h. ◆ fGrad. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . std::vector<double> ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fGrad. mutableprivate . for derivatives ; Definition at line 208 of file PoissonLikelihoodFCN.h. ◆ fIsExtended. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . bool ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fIsExtended. private . flag to indicate if is extended (when false is a Multinomial likelihood), default is true ; Definition at line 203 of file PoissonLikelihoodFCN.h. ◆ fNEffPoints. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . unsigned int ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fNEffPoints. mutableprivate . number of effective points used in the fit ; Definition at line 206 of file PoissonLikelihoodFCN.h. ◆ fWeight. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . int ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >::fWeight. private . flag to indicate if needs to evaluate using weight or weight squared (default weight = 0) ; Definition at line 204 of file PoissonLikelihoodFCN.h. math/mathcore/inc/Fit/PoissonLikelihoodFCN.h. ROOTFitPoissonLikelihoodFCN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html:15314,Guid,Guide,15314,doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1PoissonLikelihoodFCN.html,1,['Guid'],['Guide']
Usability,"rivate . Definition at line 41 of file HyperParameterOptimisation.h. ◆ fFoldParameters. std::vector<std::map<TString,Double_t> > TMVA::HyperParameterOptimisationResult::fFoldParameters. Definition at line 52 of file HyperParameterOptimisation.h. ◆ fMethodName. TString TMVA::HyperParameterOptimisationResult::fMethodName. private . Definition at line 46 of file HyperParameterOptimisation.h. ◆ fROCAVG. Float_t TMVA::HyperParameterOptimisationResult::fROCAVG. private . Definition at line 34 of file HyperParameterOptimisation.h. ◆ fROCCurves. std::shared_ptr<TMultiGraph> TMVA::HyperParameterOptimisationResult::fROCCurves. private . Definition at line 45 of file HyperParameterOptimisation.h. ◆ fROCs. std::vector<Float_t> TMVA::HyperParameterOptimisationResult::fROCs. private . Definition at line 35 of file HyperParameterOptimisation.h. ◆ fSeps. std::vector<Double_t> TMVA::HyperParameterOptimisationResult::fSeps. private . Definition at line 37 of file HyperParameterOptimisation.h. ◆ fSigs. std::vector<Double_t> TMVA::HyperParameterOptimisationResult::fSigs. private . Definition at line 36 of file HyperParameterOptimisation.h. ◆ fTrainEff01s. std::vector<Double_t> TMVA::HyperParameterOptimisationResult::fTrainEff01s. private . Definition at line 42 of file HyperParameterOptimisation.h. ◆ fTrainEff10s. std::vector<Double_t> TMVA::HyperParameterOptimisationResult::fTrainEff10s. private . Definition at line 43 of file HyperParameterOptimisation.h. ◆ fTrainEff30s. std::vector<Double_t> TMVA::HyperParameterOptimisationResult::fTrainEff30s. private . Definition at line 44 of file HyperParameterOptimisation.h. Libraries for TMVA::HyperParameterOptimisationResult:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/HyperParameterOptimisation.h; tmva/tmva/src/HyperParameterOptimisation.cxx. TMVAHyperParameterOptimisationResult. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisationResult.html:7098,Guid,Guide,7098,doc/master/classTMVA_1_1HyperParameterOptimisationResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisationResult.html,1,['Guid'],['Guide']
Usability,rivate . Definition at line 47 of file TProofPerfAnalysis.h. ◆ fgDebug. Bool_t TProofPerfAnalysis::fgDebug = kTRUE. staticprivate . Definition at line 69 of file TProofPerfAnalysis.h. ◆ fInitTime. Float_t TProofPerfAnalysis::fInitTime. private . Definition at line 48 of file TProofPerfAnalysis.h. ◆ fLatencyMax. Double_t TProofPerfAnalysis::fLatencyMax. private . Definition at line 55 of file TProofPerfAnalysis.h. ◆ fMaxTime. Float_t TProofPerfAnalysis::fMaxTime. private . Definition at line 50 of file TProofPerfAnalysis.h. ◆ fMBRate. TH1F* TProofPerfAnalysis::fMBRate. private . Definition at line 58 of file TProofPerfAnalysis.h. ◆ fMBRateAvg. Double_t TProofPerfAnalysis::fMBRateAvg. private . Definition at line 63 of file TProofPerfAnalysis.h. ◆ fMBRateAvgMax. Double_t TProofPerfAnalysis::fMBRateAvgMax. private . Definition at line 61 of file TProofPerfAnalysis.h. ◆ fMBRateMax. Double_t TProofPerfAnalysis::fMBRateMax. private . Definition at line 54 of file TProofPerfAnalysis.h. ◆ fMBRateRun. TH1F* TProofPerfAnalysis::fMBRateRun. private . Definition at line 59 of file TProofPerfAnalysis.h. ◆ fMergeTime. Float_t TProofPerfAnalysis::fMergeTime. private . Definition at line 49 of file TProofPerfAnalysis.h. ◆ fPackets. TH1F* TProofPerfAnalysis::fPackets. private . Definition at line 52 of file TProofPerfAnalysis.h. ◆ fSaveResult. Bool_t TProofPerfAnalysis::fSaveResult. private . Definition at line 65 of file TProofPerfAnalysis.h. ◆ fTree. TTree* TProofPerfAnalysis::fTree. private . Definition at line 45 of file TProofPerfAnalysis.h. ◆ fTreeName. TString TProofPerfAnalysis::fTreeName. private . Definition at line 44 of file TProofPerfAnalysis.h. ◆ fWrksInfo. TSortedList TProofPerfAnalysis::fWrksInfo. private . Definition at line 46 of file TProofPerfAnalysis.h. proof/proofbench/inc/TProofPerfAnalysis.h; proof/proofbench/src/TProofPerfAnalysis.cxx. TProofPerfAnalysis. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis.html:27229,Guid,Guide,27229,doc/master/classTProofPerfAnalysis.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis.html,1,['Guid'],['Guide']
Usability,rivate . Definition at line 64 of file TGL5DDataSetEditor.h. ◆ fV4MaxEntry. TGNumberEntryField* TGL5DDataSetEditor::fV4MaxEntry. private . Definition at line 54 of file TGL5DDataSetEditor.h. ◆ fV4MinEntry. TGNumberEntryField* TGL5DDataSetEditor::fV4MinEntry. private . Definition at line 53 of file TGL5DDataSetEditor.h. ◆ fVisibleCheck. TGCheckButton* TGL5DDataSetEditor::fVisibleCheck. private . Definition at line 59 of file TGL5DDataSetEditor.h. ◆ fXRangeSlider. TGDoubleHSlider* TGL5DDataSetEditor::fXRangeSlider. private . Definition at line 37 of file TGL5DDataSetEditor.h. ◆ fXRangeSliderMax. TGNumberEntryField* TGL5DDataSetEditor::fXRangeSliderMax. private . Definition at line 39 of file TGL5DDataSetEditor.h. ◆ fXRangeSliderMin. TGNumberEntryField* TGL5DDataSetEditor::fXRangeSliderMin. private . Definition at line 38 of file TGL5DDataSetEditor.h. ◆ fYRangeSlider. TGDoubleHSlider* TGL5DDataSetEditor::fYRangeSlider. private . Definition at line 41 of file TGL5DDataSetEditor.h. ◆ fYRangeSliderMax. TGNumberEntryField* TGL5DDataSetEditor::fYRangeSliderMax. private . Definition at line 43 of file TGL5DDataSetEditor.h. ◆ fYRangeSliderMin. TGNumberEntryField* TGL5DDataSetEditor::fYRangeSliderMin. private . Definition at line 42 of file TGL5DDataSetEditor.h. ◆ fZRangeSlider. TGDoubleHSlider* TGL5DDataSetEditor::fZRangeSlider. private . Definition at line 45 of file TGL5DDataSetEditor.h. ◆ fZRangeSliderMax. TGNumberEntryField* TGL5DDataSetEditor::fZRangeSliderMax. private . Definition at line 47 of file TGL5DDataSetEditor.h. ◆ fZRangeSliderMin. TGNumberEntryField* TGL5DDataSetEditor::fZRangeSliderMin. private . Definition at line 46 of file TGL5DDataSetEditor.h. Libraries for TGL5DDataSetEditor:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGL5DDataSetEditor.h; graf3d/gl/src/TGL5DDataSetEditor.cxx. TGL5DDataSetEditor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGL5DDataSetEditor.html:49664,Guid,Guide,49664,doc/master/classTGL5DDataSetEditor.html,https://root.cern,https://root.cern/doc/master/classTGL5DDataSetEditor.html,1,['Guid'],['Guide']
Usability,rivate . Definition at line 74 of file TGuiBldDragManager.h. ◆ fFrameMenu. TGPopupMenu* TGuiBldDragManager::fFrameMenu. private . Definition at line 79 of file TGuiBldDragManager.h. ◆ fgGlobalColorDialog. TGColorDialog * TGuiBldDragManager::fgGlobalColorDialog = 0. staticprivate . Definition at line 88 of file TGuiBldDragManager.h. ◆ fgGlobalFontDialog. TGFontDialog * TGuiBldDragManager::fgGlobalFontDialog = 0. staticprivate . Definition at line 91 of file TGuiBldDragManager.h. ◆ fLassoDrawn. Bool_t TGuiBldDragManager::fLassoDrawn. private . Definition at line 75 of file TGuiBldDragManager.h. ◆ fLassoMenu. TGPopupMenu* TGuiBldDragManager::fLassoMenu. private . Definition at line 80 of file TGuiBldDragManager.h. ◆ fListOfDialogs. TList* TGuiBldDragManager::fListOfDialogs. private . Definition at line 86 of file TGuiBldDragManager.h. ◆ fPasteFileName. TString TGuiBldDragManager::fPasteFileName. private . Definition at line 76 of file TGuiBldDragManager.h. ◆ fPimpl. TGuiBldDragManagerPimpl* TGuiBldDragManager::fPimpl. private . Definition at line 71 of file TGuiBldDragManager.h. ◆ fSelected. TGFrame* TGuiBldDragManager::fSelected. private . Definition at line 84 of file TGuiBldDragManager.h. ◆ fSelectionIsOn. Bool_t TGuiBldDragManager::fSelectionIsOn. private . Definition at line 78 of file TGuiBldDragManager.h. ◆ fStop. Bool_t TGuiBldDragManager::fStop. private . Definition at line 83 of file TGuiBldDragManager.h. ◆ fTargetId. Window_t TGuiBldDragManager::fTargetId. private . Definition at line 81 of file TGuiBldDragManager.h. ◆ fTmpBuildFile. TString TGuiBldDragManager::fTmpBuildFile. private . Definition at line 77 of file TGuiBldDragManager.h. Libraries for TGuiBldDragManager:. [legend]; The documentation for this class was generated from the following files:; gui/guibuilder/inc/TGuiBldDragManager.h; gui/guibuilder/src/TGuiBldDragManager.cxx. TGuiBldDragManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:39 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManager.html:72856,Guid,Guide,72856,doc/master/classTGuiBldDragManager.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManager.html,1,['Guid'],['Guide']
Usability,"rivate; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH1static; Class_Name()TH1static; Class_Version()TH1inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH1virtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TH1inlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1-members.html:2185,Clear,ClearUnderflowAndOverflow,2185,doc/master/classTH1-members.html,https://root.cern,https://root.cern/doc/master/classTH1-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"rivate; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH2static; Class_Name()TH2static; Class_Version()TH2inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH2virtual; TH1::TAttLine::Copy(TAttLine &attline) constTAttLine; TH1::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TH2inlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2-members.html:2400,Clear,ClearUnderflowAndOverflow,2400,doc/master/classTH2-members.html,https://root.cern,https://root.cern/doc/master/classTH2-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"rivate; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *option="""") constTH1virtual; Class()TH3static; Class_Name()TH3static; Class_Version()TH3inlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; ClearUnderflowAndOverflow()TH1virtual; Clone(const char *newname="""") const overrideTH1virtual; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral(Bool_t onlyPositive=false)TH1virtual; Copy(TObject &hnew) const overrideTH3virtual; TH1::TAttLine::Copy(TAttLine &attline) constTAttLine; TH1::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TH3inlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TH1virtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTH1virtual; Divide(TF1 *f1, Double_t c1=1)TH1virtual; Divide(const TH1 *h1)TH1virtual; Divide(const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""")TH1virtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3-members.html:2503,Clear,ClearUnderflowAndOverflow,2503,doc/master/classTH3-members.html,https://root.cern,https://root.cern/doc/master/classTH3-members.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"rivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; struct  ROOT::Math::MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; struct  ROOT::Math::VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  . Typedefs; typedef double(* ROOT::Math::GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  . Enumerations; enum  ROOT::Math::IntegrationMultiDim::Type { ;   ROOT::Math::IntegrationMultiDim::kDEFAULT = -1; , ROOT::Math::IntegrationMultiDim::kADAPTIVE; , ROOT::Math::IntegrationMultiDim::kVEGAS; , ROOT::Math::IntegrationMultiDim::kMISER; , ;   ROOT::Math::IntegrationMultiDim::kPLAIN. };  enumeration specifying the integration types. More...;  . Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMonteFuncPointer)(double *, size_t, void *). Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ; The templated C++ function class must implement:; double operator( const double * x); This class defines static methods with will be used to fill the gsl_monte_function used by GSL. See for examples the GSL online manual ; Definition at line 56 of file GSLMonteFunctionAdapter.h. Enumeration Type Documentation. ◆ Type. enum ROOT::Math::IntegrationMultiDim::Type. enumeration specifying the integration types. . EnumeratorkDEFAULT default type specified in the static option . kADAPTIVE adaptive multi-dimensional integration . kVEGAS MC integration. . kMISER MC integration. . kPLAIN MC integration. . Definition at line 47 of file AllIntegrationTypes.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MCIntegration.html:2892,Guid,Guide,2892,doc/master/group__MCIntegration.html,https://root.cern,https://root.cern/doc/master/group__MCIntegration.html,1,['Guid'],['Guide']
Usability,"rix.; If can_edit is true (default), the user will be able to edit the; transformation parameters via TEveElementEditor. void DestroyMainTrans(); Destroy the main transformation matrix, it will always be taken; as identity. Editing of transformation parameters is disabled. void SetTransMatrix(Double_t* carr); Set transformation matrix from colum-major array. void SetTransMatrix(const TGeoMatrix& mat); Set transformation matrix from TGeo's matrix. Bool_t AcceptElement(TEveElement* el); Check if el can be added to this element. In the base-class version we only make sure the new child is not; equal to this. void AddElement(TEveElement* el); Add el to the list of children. void RemoveElement(TEveElement* el); Remove el from the list of children. void RemoveElementLocal(TEveElement* el); Perform additional local removal of el.; Called from RemoveElement() which does whole untangling.; Put into special function as framework-related handling of; element removal should really be common to all classes and; clearing of local structures happens in between removal; of list-tree-items and final removal.; If you override this, you should also override; RemoveElementsLocal(). void RemoveElementsInternal(); Remove all elements. This assumes removing of all elements can; be done more efficiently then looping over them and removing one; by one. This protected function performs the removal on the; level of TEveElement. void RemoveElements(); Remove all elements. This assumes removing of all elements can; be done more efficiently then looping over them and removing; them one by one. void RemoveElementsLocal(); Perform additional local removal of all elements.; See comment to RemoveElementlocal(TEveElement*). void ProjectChild(TEveElement* el, Bool_t same_depth = kTRUE); If this is a projectable, loop over all projected replicas and; add the projected image of child 'el' there. This is supposed to; be called after you add a child to a projectable after it has; already been projected.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveElement.html:24371,clear,clearing,24371,root/html528/TEveElement.html,https://root.cern,https://root.cern/root/html528/TEveElement.html,6,['clear'],['clearing']
Usability,"rixT<Element> &TMatrixT<Element> Use(const TMatrixT<double>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, double* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixT.h 39086 2011-05-04 09:36:17Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMatrixT_double_.html:26492,Clear,Clear,26492,root/html530/TMatrixT_double_.html,https://root.cern,https://root.cern/root/html530/TMatrixT_double_.html,1,['Clear'],['Clear']
Usability,"rixT<Element> &TMatrixT<Element> Use(const TMatrixT<double>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, double* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id: TMatrixT.h 39086 2011-05-04 09:36:17Z moneta $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMatrixT_double_.html:26492,Clear,Clear,26492,root/html532/TMatrixT_double_.html,https://root.cern,https://root.cern/root/html532/TMatrixT_double_.html,1,['Clear'],['Clear']
Usability,"rization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; bool exists (std::string histoName);  for monitoring ;  ; double factorWeightDecay () const;  get the weight-decay factor ;  ; virtual bool hasConverged (double testError);  has this training converged already? ;  ; double learningRate () const;  get the learning rate ;  ; size_t maxConvergenceCount () const;  returns the max convergence count so far ;  ; size_t minError () const;  returns the smallest error so far ;  ; MinimizerType minimizerType () const;  which minimizer shall be used (e.g. SGD) ;  ; double momentum () const;  get the momentum (e.g. for SGD) ;  ; void pads (int numPads);  preparation for monitoring ;  ; void plot (std::string histoN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:2553,clear,clear,2553,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,3,"['clear', 'learn']","['clear', 'learning', 'learningRate']"
Usability,rizontalFrame* TGMsgBox::fIconFrame. protected . frame containing icon and text ; Definition at line 61 of file TGMsgBox.h. ◆ fIgnore. TGButton * TGMsgBox::fIgnore. protected . Definition at line 56 of file TGMsgBox.h. ◆ fL1. TGLayoutHints* TGMsgBox::fL1. protected . Definition at line 63 of file TGMsgBox.h. ◆ fL2. TGLayoutHints * TGMsgBox::fL2. protected . Definition at line 63 of file TGMsgBox.h. ◆ fL3. TGLayoutHints * TGMsgBox::fL3. protected . Definition at line 63 of file TGMsgBox.h. ◆ fL4. TGLayoutHints * TGMsgBox::fL4. protected . Definition at line 63 of file TGMsgBox.h. ◆ fL5. TGLayoutHints * TGMsgBox::fL5. protected . layout hints ; Definition at line 63 of file TGMsgBox.h. ◆ fLabelFrame. TGVerticalFrame* TGMsgBox::fLabelFrame. protected . frame containing text ; Definition at line 62 of file TGMsgBox.h. ◆ fMsgList. TList* TGMsgBox::fMsgList. protected . text (list of TGLabels) ; Definition at line 64 of file TGMsgBox.h. ◆ fNewer. TGButton* TGMsgBox::fNewer. protected . Definition at line 58 of file TGMsgBox.h. ◆ fNo. TGButton * TGMsgBox::fNo. protected . Definition at line 55 of file TGMsgBox.h. ◆ fNoAll. TGButton * TGMsgBox::fNoAll. protected . buttons in dialog box ; Definition at line 57 of file TGMsgBox.h. ◆ fOK. TGButton * TGMsgBox::fOK. protected . Definition at line 55 of file TGMsgBox.h. ◆ fRetCode. Int_t* TGMsgBox::fRetCode. protected . address to store return code ; Definition at line 65 of file TGMsgBox.h. ◆ fRetry. TGButton* TGMsgBox::fRetry. protected . Definition at line 56 of file TGMsgBox.h. ◆ fYes. TGButton* TGMsgBox::fYes. protected . Definition at line 55 of file TGMsgBox.h. ◆ fYesAll. TGButton * TGMsgBox::fYesAll. protected . Definition at line 57 of file TGMsgBox.h. Libraries for TGMsgBox:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMsgBox.h; gui/gui/src/TGMsgBox.cxx. TGMsgBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMsgBox.html:44477,Guid,Guide,44477,doc/master/classTGMsgBox.html,https://root.cern,https://root.cern/doc/master/classTGMsgBox.html,1,['Guid'],['Guide']
Usability,"rizontalFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TGStatusBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddText(const char* text, Int_t partidx = 0)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGStatusBar.html:1474,Clear,Clear,1474,root/html528/TGStatusBar.html,https://root.cern,https://root.cern/root/html528/TGStatusBar.html,4,['Clear'],['Clear']
Usability,"rker3DBox::SetPosition ; (; Float_t ; x, . Float_t ; y, . Float_t ; z . ). virtual . Set position. ; Definition at line 396 of file TMarker3DBox.cxx. ◆ SetRefObject(). virtual void TMarker3DBox::SetRefObject ; (; TObject * ; obj = nullptr). inlinevirtual . Definition at line 77 of file TMarker3DBox.h. ◆ SetSize(). void TMarker3DBox::SetSize ; (; Float_t ; dx, . Float_t ; dy, . Float_t ; dz . ). virtual . Set size. ; Definition at line 386 of file TMarker3DBox.cxx. ◆ Streamer(). void TMarker3DBox::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TMarker3DBox. ; Reimplemented from TObject.; Definition at line 447 of file TMarker3DBox.cxx. ◆ StreamerNVirtual(). void TMarker3DBox::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TMarker3DBox.h. Member Data Documentation. ◆ fDx. Float_t TMarker3DBox::fDx. protected . Definition at line 43 of file TMarker3DBox.h. ◆ fDy. Float_t TMarker3DBox::fDy. protected . Definition at line 44 of file TMarker3DBox.h. ◆ fDz. Float_t TMarker3DBox::fDz. protected . Definition at line 45 of file TMarker3DBox.h. ◆ fPhi. Float_t TMarker3DBox::fPhi. protected . Definition at line 48 of file TMarker3DBox.h. ◆ fRefObject. TObject* TMarker3DBox::fRefObject. protected . Definition at line 49 of file TMarker3DBox.h. ◆ fTheta. Float_t TMarker3DBox::fTheta. protected . Definition at line 47 of file TMarker3DBox.h. ◆ fX. Float_t TMarker3DBox::fX. protected . Definition at line 40 of file TMarker3DBox.h. ◆ fY. Float_t TMarker3DBox::fY. protected . Definition at line 41 of file TMarker3DBox.h. ◆ fZ. Float_t TMarker3DBox::fZ. protected . Definition at line 42 of file TMarker3DBox.h. Libraries for TMarker3DBox:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TMarker3DBox.h; graf3d/g3d/src/TMarker3DBox.cxx. TMarker3DBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMarker3DBox.html:21871,Guid,Guide,21871,doc/master/classTMarker3DBox.html,https://root.cern,https://root.cern/doc/master/classTMarker3DBox.html,1,['Guid'],['Guide']
Usability,"rkerStyle(kOpenSquare);; g4->SetLineWidth(3); g4->SetMarkerColor(kBlue);; g5->SetLineWidth(3); g5->SetMarkerStyle(kFullSquare);; ; g1->Draw(""CA* PLC PFC"");; g2->Draw(""PC PLC PFC"");; g3->Draw(""PC PLC PFC"");; g4->Draw(""*C PLC PFC"");; g5->Draw(""PC PLC PFC"");; ; gPad->BuildLegend();; }; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kOpenSquare@ kOpenSquareDefinition TAttMarker.h:56; kCircle@ kCircleDefinition TAttMarker.h:53; kFullSquare@ kFullSquareDefinition TAttMarker.h:55; kSolar@ kSolarDefinition TColor.h:132; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TStyle::SetOptTitlevoid SetOptTitle(Int_t tit=1)Definition TStyle.h:334; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; xDouble_t x[n]Definition legend1.C:17; AuthorOlivier Couet ; Definition in file graphpalettecolor.C. tutorialsgraphsgraphpalettecolor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphpalettecolor_8C.html:3677,Guid,Guide,3677,doc/master/graphpalettecolor_8C.html,https://root.cern,https://root.cern/doc/master/graphpalettecolor_8C.html,1,['Guid'],['Guide']
Usability,"rking in both Python and ROOT style, and although it is succeeding, it isn’t perfect: there are edges. The following sections explain in some detail what you can expect, and what you need to watch out for.; 19.1.5.1 Access to ROOT Classes; Before a ROOT class can be used from Python, its dictionary needs to be loaded into the current process. Starting with ROOT version 4.00/06, this happens automatically for all classes that are declared to the auto-loading mechanism through so-called rootmap files. Effectively, this means that all classes in the ROOT distributions are directly available for import. For example:; from ROOT import TCanvas # available at startup; c = TCanvas(). from ROOT import TLorentzVector # triggers auto-load of libPhysics; l = TLorentzVector(); Although it is not recommended, a simple way of working with PyROOT is doing a global import:; from ROOT import *. c = TCanvas(); l = TLorentzVector(); Keeping the ROOT namespace (“import ROOT”), or only importing from ROOT those classes that you will actually use (see above), however, will always be cleaner and clearer:; import ROOT. c = ROOT.TCanvas(); l = ROOT.TLorentzVector(); Since it is foreseen that most people will use the simple approach anyway, the request to copy all from module ROOT will not actually result in copying all ROOT classes into the current namespace. Instead, classes will still be bound (and possibly loaded) on an as-needed basis. Note carefully how this is different from other Python (extension) modules, and what to expect if you use the normal inspection tools (such as e.g. ‘dir()’). This feature prevents the inspection tools from being swamped by an enormous amount of classes, but they can no longer be used to explore unknown parts of the system (e.g. to find out which classes are available). Furthermore, because of this approach, <tab>-completion will usually not be available until after the first use (and hence creation) of a class.; Access to class static functions, public dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1051147,clear,clearer,1051147,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clearer']
Usability,"rks are stable and performing for a large variety of ; : linear and non-linear classification problems. However, in contrast; : to (e.g.) boosted decision trees, the user is advised to reduce the ; : number of input variables that have only little discrimination power. ; : ; : In the tests we have carried out so far, the MLP and ROOT networks; : (TMlpANN, interfaced via TMVA) performed equally well, with however; : a clear speed advantage for the MLP. The Clermont-Ferrand neural ; : net (CFMlpANN) exhibited worse classification performance in these; : tests, which is partly due to the slow convergence of its training; : (at least 10k training cycles are required to achieve approximately; : competitive results).; : ; : ␛[1mOvertraining: ␛[0monly the TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; : constrain the weights of the relatively simple architectures required; : to achieve good performance. Hence no overtraining should occur, and ; : the use of validation samples would only reduce the available training; : information. However, if the performance on the training sample is ; : found to be significantly better than the one found with the inde-; : pendent test sample, caution is needed. The results for these samples ; : are printed to standard output at the end of each training job.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : The hidden layer architecture for all ANNs is defined by the option; : ""HiddenLayers=N+1,N,..."", where here the first hidden layer has N+1; : neurons and the second N neurons (and so on), and where N is the number ; : of input variables. Excessive numbers of hidden layers should be avoided,; : in favour of more neurons in the first hidden layer.; : ; : The number of cycles should be above 500. As said, if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:43211,simpl,simple,43211,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['simpl'],['simple']
Usability,"rkspace::import(w) importing RooRealVar::a1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::bkgfrac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::sig; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; ; RooWorkspace(w) w contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,sigma1,sigma2,x); ; p.d.f.s; -------; RooChebychev::bkg[ x=x coefList=(a0,a1) ] = 0.8; RooAddPdf::model[ bkgfrac * bkg + [%] * sig ] = 0.9/1; RooAddPdf::sig[ sig1frac * sig1 + [%] * sig2 ] = 1/1; RooGaussian::sig1[ x=x mean=mean sigma=sigma1 ] = 1; RooGaussian::sig2[ x=x mean=mean sigma=sigma2 ] = 1; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); DateApril 2009 ; AuthorWouter Verkerke ; Definition in file rf509_wsinteractive.C. tutorialsroofitrf509_wsinteractive.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf509__wsinteractive_8C.html:9556,Guid,Guide,9556,doc/master/rf509__wsinteractive_8C.html,https://root.cern,https://root.cern/doc/master/rf509__wsinteractive_8C.html,1,['Guid'],['Guide']
Usability,"rlapping, but func-coefficient; pairs may overlap each other. In the present implementation, coefficients may not be observables or derive; from observables. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; cout << ""RooRealSumPdf::getAnalyticalIntegralWN:""<<GetName()<<""(""<<allVars<<"",analVars,""<<(normSet2?*normSet2:RooArgSet())<<"",""<<(rangeName?rangeName:""<none>"") << endl;; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; cout << ""RooRealSumPdf::analyticalIntegralWN:""<<GetName()<<""(""<<code<<"",""<<(normSet2?*normSet2:RooArgSet())<<"",""<<(rangeName?rangeName:""<none>"") << endl;; Implement analytical integrations by deferring integration of component; functions to integrators of components. Double_t expectedEvents(const RooArgSet* nset) const; return getNorm(nset) ;. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooRealSumPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. const RooArgList& funcList() const; { return _funcList ; }. const RooArgList& coefList() const; { return _coefList ; }. Double_t expectedEvents(const RooArgSet* nset) const. » Last changed: Fri Dec 2 14:27:01 2011 » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealSumPdf.html:45047,intuit,intuitively,45047,root/html532/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html532/RooRealSumPdf.html,1,['intuit'],['intuitively']
Usability,"rlaps(const TGeoVolume *vol, Double_t ovlp=0.1, Option_t *option="""") const overrideCheck overlaps for the top volume of the geometry, within a limit OVLP.Definition TGeoPainter.cxx:234; TGeoPainter::SetBombFactorsvoid SetBombFactors(Double_t bombx=1.3, Double_t bomby=1.3, Double_t bombz=1.3, Double_t bombr=1.3) overrideSet cartesian and radial bomb factors for translations.Definition TGeoPainter.cxx:1949; TGeoPainter::DefaultColorsvoid DefaultColors() overrideSet default volume colors according to tracking media.Definition TGeoPainter.cxx:570; TGeoPainter::CheckEditvoid CheckEdit()Check if Ged library is loaded and load geometry editor classe.Definition TGeoPainter.cxx:682; TGeoPainter::CheckBoundaryErrorsvoid CheckBoundaryErrors(Int_t ntracks=1000000, Double_t radius=-1.) overrideCheck pushes and pulls needed to cross the next boundary with respect to the position given by FindNe...Definition TGeoPainter.cxx:200; TGeoPainter::ClearVisibleVolumesvoid ClearVisibleVolumes()Clear the list of visible volumes reset the kVisOnScreen bit for volumes previously in the list.Definition TGeoPainter.cxx:263; TGeoPainter::GetColorInt_t GetColor(Int_t base, Float_t light) const overrideGet index of a base color with given light intensity (0,1)Definition TGeoPainter.cxx:292; TGeoPainter::LocalToMasterVectvoid LocalToMasterVect(const Double_t *local, Double_t *master) constConvert a local vector according view rotation matrix.Definition TGeoPainter.cxx:1249; TGeoPainter::DrawVolumevoid DrawVolume(TGeoVolume *vol, Option_t *option="""") overrideDraw method.Definition TGeoPainter.cxx:820; TGeoPainter::GetDrawnVolumeTGeoVolume * GetDrawnVolume() const overrideGet currently drawn volume.Definition TGeoPainter.cxx:338; TGeoPainter::DrawPolygonvoid DrawPolygon(const TGeoPolygon *poly) overrideDraw a polygon in 3D.Definition TGeoPainter.cxx:770; TGeoPainter::fNsegmentsInt_t fNsegmentsDefinition TGeoPainter.h:47; TGeoPainter::Testvoid Test(Int_t npoints, Option_t *option) overrideCheck time o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:101713,Clear,ClearVisibleVolumesvoid,101713,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,3,['Clear'],"['Clear', 'ClearVisibleVolumes', 'ClearVisibleVolumesvoid']"
Usability,"rline) const;  Use the information in the TGTextLayout object to display an underline below an individual character. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextLayout.html:2789,Clear,Clear,2789,doc/master/classTGTextLayout.html,https://root.cern,https://root.cern/doc/master/classTGTextLayout.html,1,['Clear'],['Clear']
Usability,"rlineChar(). void TGTextLayout::UnderlineChar ; (; Drawable_t ; dst, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . Int_t ; underline . ); const. Use the information in the TGTextLayout object to display an underline below an individual character. ; This procedure does not draw the text, just the underline.; This procedure is useful for simple widgets that need to display single-font, multi-line text with an individual character underlined and want TGFont to handle the details. To display larger amounts of underlined text, construct and use an underlined font.; dst – Window or pixmap in which to draw. gc – Graphics context to use for drawing text. x, y – Upper-left hand corner of rectangle in which to draw (pixels). underline – Index of the single character to underline, or -1 for no underline. ; Definition at line 970 of file TGFont.cxx. Friends And Related Symbol Documentation. ◆ TGFont. friend class TGFont. friend . Definition at line 108 of file TGFont.h. Member Data Documentation. ◆ fChunks. LayoutChunk_t* TGTextLayout::fChunks. protected . Array of chunks. The actual size will be maxChunks. ; Definition at line 115 of file TGFont.h. ◆ fFont. const TGFont* TGTextLayout::fFont. protected . The font used when laying out the text. ; Definition at line 111 of file TGFont.h. ◆ fNumChunks. Int_t TGTextLayout::fNumChunks. protected . Number of chunks actually used in following array. ; Definition at line 114 of file TGFont.h. ◆ fString. const char* TGTextLayout::fString. protected . The string that was laid out. ; Definition at line 112 of file TGFont.h. ◆ fWidth. Int_t TGTextLayout::fWidth. protected . The maximum width of all lines in the text layout. ; Definition at line 113 of file TGFont.h. Libraries for TGTextLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFont.h; gui/gui/src/TGFont.cxx. TGTextLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextLayout.html:21705,Guid,Guide,21705,doc/master/classTGTextLayout.html,https://root.cern,https://root.cern/doc/master/classTGTextLayout.html,1,['Guid'],['Guide']
Usability,"rlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:49079,simpl,simple,49079,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,3,['simpl'],['simple']
Usability,"rlyArc(110, 30, 12.5*sqrt(2), 315, 45);; gluon1->Draw();; ; t.DrawLatex(135,6,""#bar{q}"");; t.DrawLatex(135,55,""q"");; t.DrawLatex(135,30,""g"");; c1->Update();; gStyle->SetLineWidth(linsav);; }; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TArcCreate an Arc.Definition TArc.h:26; TAttLine::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCurlyArcImplements curly or wavy arcs used to draw Feynman diagrams.Definition TCurlyArc.h:16; TCurlyLineImplements curly or wavy polylines used to draw Feynman diagrams.Definition TCurlyLine.h:19; TCurlyLine::SetWavyvirtual void SetWavy()Set wavy.Definition TCurlyLine.cxx:369; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPolyLine::Drawvoid Draw(Option_t *option="""") overrideDraw this polyline with its current attributes.Definition TPolyLine.cxx:215; c1return c1Definition legend1.C:41; ginitstatic int ginitDefinition rsalib.cxx:256; lTLine lDefinition textangle.C:4; AuthorOtto Schaile ; Definition in file feynman.C. tutorialsgraphicsfeynman.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/feynman_8C.html:2730,simpl,simple,2730,doc/master/feynman_8C.html,https://root.cern,https://root.cern/doc/master/feynman_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"rm.cxx. ◆ General2(). void TSpectrum2Transform::General2 ; (; Double_t ** ; working_matrix, . Double_t * ; working_vector, . Int_t ; numx, . Int_t ; numy, . Int_t ; direction, . Int_t ; type, . Int_t ; degree . ). protected . This function calculates generalized (mixed) 2D transforms Function parameters: . working_matrix-pointer to matrix of transformed data; working_vector-pointer to vector where the data are processed; numx,numy-lengths of processed data; direction-forward or inverse; type-type of transform (see manual); degree-degree of transform (see manual) . Definition at line 1040 of file TSpectrum2Transform.cxx. ◆ GeneralExe(). Int_t TSpectrum2Transform::GeneralExe ; (; Double_t * ; working_space, . Int_t ; zt_clear, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates generalized (mixed) transforms of different degrees. ; Function parameters:; working_space-pointer to vector of transformed data; zt_clear-flag to clear imaginary data before staring; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 449 of file TSpectrum2Transform.cxx. ◆ GeneralInv(). Int_t TSpectrum2Transform::GeneralInv ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; degree, . Int_t ; type . ). protected . This function calculates inverse generalized (mixed) transforms Function parameters: . working_space-pointer to vector of transformed data; num-length of processed data; degree-degree of transform (see manual); type-type of mixed transform (see manual) . Definition at line 566 of file TSpectrum2Transform.cxx. ◆ Haar(). void TSpectrum2Transform::Haar ; (; Double_t * ; working_space, . Int_t ; num, . Int_t ; direction . ). protected . This function calculates Haar transform of a part of data. ; Function parameters:; working_space-pointer to vector of transformed data; num-length of processed data; direction-forward or inverse transform . Definition at line 109 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:26109,clear,clear,26109,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['clear'],['clear']
Usability,"rmVariable.h:111; ROOT::Math::MinimTransformVariable::DerivativeIntToExtdouble DerivativeIntToExt(double x) constDefinition MinimTransformVariable.h:129; ROOT::Math::MinimTransformVariable::fBoundsbool fBoundshas double boundDefinition MinimTransformVariable.h:143; ROOT::Math::MinimTransformVariable::fLowerdouble fLowerlower parameter limitDefinition MinimTransformVariable.h:145; ROOT::Math::MinimTransformVariable::fUpBoundbool fUpBoundhas upper bound paramDefinition MinimTransformVariable.h:142; ROOT::Math::SinVariableTransformationSin Transformation class for dealing with double bounded variables.Definition MinimizerVariableTransformation.h:38; ROOT::Math::SqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables.Definition MinimizerVariableTransformation.h:58; ROOT::Math::SqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables.Definition MinimizerVariableTransformation.h:74; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::EMinimVariableTypeEMinimVariableTypeEnumeration describing the status of the variable The enumeration are used in the minimizer classes t...Definition MinimTransformVariable.h:27; ROOT::Math::kFix@ kFixfixed variableDefinition MinimTransformVariable.h:29; ROOT::Math::kUpBound@ kUpBoundvariable has an upper boundsDefinition MinimTransformVariable.h:32; ROOT::Math::kBounds@ kBoundsvariable has two boundsDefinition MinimTransformVariable.h:30; ROOT::Math::kLowBound@ kLowBoundvariable has a lower boundDefinition MinimTransformVariable.h:31; ROOT::Math::kDefault@ kDefaultfree variable (unlimited)Definition MinimTransformVariable.h:28; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathMinimTransformVariable.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimTransformVariable_8h_source.html:10152,Guid,Guide,10152,doc/master/MinimTransformVariable_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimTransformVariable_8h_source.html,1,['Guid'],['Guide']
Usability,rmal. Double_t TGeoNavigator::fNormal[3]. private . last computed safety radius ; Definition at line 46 of file TGeoNavigator.h. ◆ fOverlapClusters. Int_t* TGeoNavigator::fOverlapClusters. private . current recursive position in fOverlapClusters ; Definition at line 60 of file TGeoNavigator.h. ◆ fOverlapMark. Int_t TGeoNavigator::fOverlapMark. private . current size of fOverlapClusters ; Definition at line 59 of file TGeoNavigator.h. ◆ fOverlapSize. Int_t TGeoNavigator::fOverlapSize. private . next daughter index after FindNextBoundary ; Definition at line 58 of file TGeoNavigator.h. ◆ fPath. TString TGeoNavigator::fPath. private . current local matrix of the selected division cell ; Definition at line 84 of file TGeoNavigator.h. ◆ fPoint. Double_t TGeoNavigator::fPoint[3]. private . unit vector to current checked shape ; Definition at line 49 of file TGeoNavigator.h. ◆ fSafety. Double_t TGeoNavigator::fSafety. private . step to be done from current point and direction ; Definition at line 44 of file TGeoNavigator.h. ◆ fSearchOverlaps. Bool_t TGeoNavigator::fSearchOverlaps. private . internal array for overlaps ; Definition at line 61 of file TGeoNavigator.h. ◆ fStartSafe. Bool_t TGeoNavigator::fStartSafe. private . flags the type of the current node ; Definition at line 63 of file TGeoNavigator.h. ◆ fStep. Double_t TGeoNavigator::fStep. private . Definition at line 43 of file TGeoNavigator.h. ◆ fThreadId. Int_t TGeoNavigator::fThreadId. private . last safety returned from parallel world (negative if invalid) ; Definition at line 54 of file TGeoNavigator.h. ◆ fTopNode. TGeoNode* TGeoNavigator::fTopNode. private . current node ; Definition at line 76 of file TGeoNavigator.h. Libraries for TGeoNavigator:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoNavigator.h; geom/geom/src/TGeoNavigator.cxx. TGeoNavigator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:51716,Guid,Guide,51716,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['Guid'],['Guide']
Usability,"rmalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitly, or via; a string containing the formula to be used to define them, exactly as; for a TCut.; The learning method is defined using the; TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :; TMultiLayerPerceptron::kStochastic, ; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS; A weight can be assigned to events, either in the constructor, either; with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight; is taken into account.; Finally, one starts the training with; TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The; first argument is the number of epochs while option is a string that; can contain: ""text"" (simple text output) , ""graph""; (evoluting graphical training curves), ""update=X"" (step for; the text/graph output update) or ""+"" (will skip the; randomisation and start from the previous values). All combinations; are available. . Example:; net.Train(100,""text, graph, update=10"").; When the neural net is trained, it can be used; directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a; standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finaly, note that even if this implementation is inspired from the mlpfit code,; the feature lists are not exac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:7438,Learn,Learning,7438,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['Learn'],['Learning']
Usability,"rmat, and colored.; For instance it is possible to pipe the differences of one file like this:; git diff path/to/file.cxx | tig. or see the changes of one revision like this:; git show b204d4c87 | tig. The most important interactive tig commands are:. 'h': opens the help screen; 'q': closes current window; 'Q': closes all windows and exits. Log view; Tig invoked without any argument spawns a full log view with one line per commit including author, date and log message. Heads of the different branches are clearly indicated. To see a graph view indicating branching graphically (just like git log --oneline --graph), do:; tig --all. A log can be selected with Enter to see the revision changes.; An example of useful application of the log view is interactive cherry-picking: just press 'C' to cherry-pick currently selected commit into your current branch.; Blame view; Blame view is extremely useful to see which lines were committed by whom. It is an improved version of the standard git blame command with a much clearer and interactive output.; Each line can be selected to display the associated full commit log and diff. Usage:; tig blame path/to/file.cxx. Interactive staging and current status; tig status opens an interactive display to quickly select files to be staged. Move over the file and press 'u' to (un)stage it. The .gitconfig file; This file contains global (~/.gitconfig) or repository-local configuration settings. You can (eg):. Set user and email information to label commits usefully:; git config --global user.name ""Chris Green"" ; git config --global user.email <email-address>. Set colors for various types of command output.; Set which local branches track which remote branches.; Set pull behavior for branches to be rebase rather than merge.; Define aliases as shortcuts for internal or external commands. See the attached .gitconfig example. Have fun!; Reproduced with permission from the following page: https://cdcvs.fnal.gov/redmine/projects/cet-is-public/wiki/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:17796,clear,clearer,17796,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['clear'],['clearer']
Usability,rmulaExpression(). std::string RooLegacyExpPoly::getFormulaExpression ; (; bool ; expand); const. Definition at line 299 of file RooLegacyExpPoly.cxx. ◆ getLogVal(). double RooLegacyExpPoly::getLogVal ; (; const RooArgSet * ; set); const. overridevirtual . Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ; Reimplemented from RooAbsPdf.; Definition at line 191 of file RooLegacyExpPoly.cxx. ◆ IsA(). TClass * RooLegacyExpPoly::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 57 of file RooLegacyExpPoly.h. ◆ lowestOrder(). int RooLegacyExpPoly::lowestOrder ; (; ); const. inline . Return the order for the first coefficient in the list. ; Definition at line 33 of file RooLegacyExpPoly.h. ◆ Streamer(). void RooLegacyExpPoly::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooLegacyExpPoly::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file RooLegacyExpPoly.h. ◆ x(). RooAbsReal const & RooLegacyExpPoly::x ; (; ); const. inline . Get the x variable. ; Definition at line 27 of file RooLegacyExpPoly.h. Member Data Documentation. ◆ _coefList. RooListProxy RooLegacyExpPoly::_coefList. protected . Definition at line 46 of file RooLegacyExpPoly.h. ◆ _lowestOrder. int RooLegacyExpPoly::_lowestOrder. protected . Definition at line 47 of file RooLegacyExpPoly.h. ◆ _x. RooRealProxy RooLegacyExpPoly::_x. protected . Definition at line 45 of file RooLegacyExpPoly.h. Libraries for RooLegacyExpPoly:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooLegacyExpPoly.h; roofit/roofit/src/RooLegacyExpPoly.cxx. RooLegacyExpPoly. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:58 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:80633,Guid,Guide,80633,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['Guid'],['Guide']
Usability,"rmulaThe FORMULA class (ROOT version 5) ;  CTFormulaPrimitiveThe Formula Primitive class ;  CTOperOffset;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTPoolManagerA manager for the scheduler behind ROOT multithreading operations ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  CTypeTraits;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  ►Ndetail;  Cindices;  Cis_array_class;  Cis_array_class< std::array< T, N > >;  Cis_array_class< std::initializer_list< T > >;  Cis_array_class< std::vector< T > >;  Cmake_indices_;  ►Cmake_indices_impl;  Ctype >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==0)>::type >;  Cmake_indices_impl< First, Step, N, typename std::enable_if<(N==1)>::type >;  Cmake_indices_next;  Cmake_indices_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:73444,simpl,simple,73444,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['simpl'],['simple']
Usability,"rn fClass; }. UInt_t GetNVariables() const. UInt_t GetNTargets() const. UInt_t GetNSpectators() const. Float_t GetValue(UInt_t ivar) const. std::vector<Float_t>& GetValues(); For a detailed explanation, please see the heading ""Avoid Duplication in const and Non-const Member Function,"" on p. 23, in Item 3 ""Use const whenever possible,"" in Effective C++, 3d ed by Scott Meyers, ISBN-13: 9780321334879.; http://stackoverflow.com/questions/123758/how-do-i-remove-code-duplication-between-similar-const-and-non-const-member-func. const std::vector<Float_t>& GetValues() const. Float_t GetTarget(UInt_t itgt) const; { return fTargets.at(itgt); }. std::vector<Float_t>& GetTargets(); { return fTargets; }. const std::vector<Float_t>& GetTargets() const; { return fTargets; }. Float_t GetSpectator(UInt_t ivar) const. std::vector<Float_t>& GetSpectators(); { return fSpectators; }. const std::vector<Float_t>& GetSpectators() const; { return fSpectators; }. void SetWeight(Double_t w); { fWeight=w; }. void SetBoostWeight(Double_t w) const; { fDoNotBoost ? fDoNotBoost = kFALSE : fBoostWeight=w; }. void ScaleBoostWeight(Double_t s) const; { fDoNotBoost ? fDoNotBoost = kFALSE : fBoostWeight *= s; }. void SetClass(UInt_t t); { fClass=t; }. void SetVal(UInt_t ivar, Float_t val). void SetTarget(UInt_t itgt, Float_t value). void SetSpectator(UInt_t ivar, Float_t value). void SetVariableArrangement(vector<UInt_t> *const m) const. void SetDoNotBoost() const; { fDoNotBoost = kTRUE; }. void ClearDynamicVariables(); {}. void CopyVarValues(const TMVA::Event& other). void Print(ostream& o) const. void SetIsTraining(Bool_t ). void SetIgnoreNegWeightsInTraining(Bool_t ). » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Event.html:8407,Clear,ClearDynamicVariables,8407,root/html534/TMVA__Event.html,https://root.cern,https://root.cern/root/html534/TMVA__Event.html,1,['Clear'],['ClearDynamicVariables']
Usability,"rn true if index can be applied to the TTree. ;  ; void SetTree (TTree *T) override;  See TTreeIndex::SetTree. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFormulaLeaves (const TTree *parent) override;  Updates the parent formulae. ;  ;  Public Member Functions inherited from TVirtualIndex;  TVirtualIndex ();  pointer to Tree ;  ;  ~TVirtualIndex () override;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainIndex.html:2881,Clear,Clear,2881,doc/master/classTChainIndex.html,https://root.cern,https://root.cern/doc/master/classTChainIndex.html,1,['Clear'],['Clear']
Usability,"rn;; }; view = gPad->GetView();; if (!view) {; grotate = kFALSE;; return;; }; view->SetView(longit,view->GetLatitude(),view->GetPsi(),irep);; gPad->Modified();; gPad->Update();; }; delete timer;; }; ; //______________________________________________________________________________; void axes(); {; axis = !axis;; TView *view = gPad ? gPad->GetView() : nullptr;; if(view); view->ShowAxis();; }; ; //______________________________________________________________________________; TCanvas *create_canvas(const char *title); {; auto c = (TCanvas *) gROOT->GetListOfCanvases()->FindObject(""geom_draw"");; if (c) {; c->Clear();; c->Update();; c->SetTitle(title);; } else {; c = new TCanvas(""geom_draw"", title, 700,1000);; }; if (comments) {; c->Divide(1,2,0,0);; c->GetPad(2)->SetPad(0,0,1,0.4);; c->GetPad(1)->SetPad(0,0.4,1,1);; c->cd(1);; }; ; return c;; }; ; //______________________________________________________________________________; void box(Int_t iaxis=0, Int_t ndiv=8, Double_t start=0, Double_t step=0); {; auto c = create_canvas(""A simple box"");; ; if (gGeoManager) delete gGeoManager;; new TGeoManager(""box"", ""A simple box"");; TGeoMaterial *mat = new TGeoMaterial(""Al"", 26.98,13,2.7);; TGeoMedium *med = new TGeoMedium(""MED"",1,mat);; TGeoVolume *top = gGeoManager->MakeBox(""TOP"",med,100,100,100);; gGeoManager->SetTopVolume(top);; TGeoVolume *vol = gGeoManager->MakeBox(""BOX"",med, 20,30,40);; vol->SetLineColor(randomColor());; vol->SetLineWidth(2);; top->AddNode(vol,1);; if ((iaxis > 0) && (iaxis < 4)) {; TGeoVolume *slice = vol->Divide(""SLICE"",iaxis,ndiv,start,step);; if (!slice) return;; slice->SetLineColor(randomColor());; }; gGeoManager->CloseGeometry();; gGeoManager->SetNsegments(80);; ; top->Draw();; ; MakePicture();; if (!comments) return;; c->cd(2);; TPaveText *pt = new TPaveText(0.01,0.01,0.99,0.99);; pt->SetLineColor(1);; TGeoBBox *box = (TGeoBBox *) vol->GetShape();; TText *text = pt->AddText(""TGeoBBox - box class"");; text->SetTextColor(2);; AddMemberInfo(pt, ""fDX"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geodemo_8C.html:9124,simpl,simple,9124,doc/master/geodemo_8C.html,https://root.cern,https://root.cern/doc/master/geodemo_8C.html,2,['simpl'],['simple']
Usability,"rned. ; Definition at line 202 of file TGPicture.cxx. ◆ GetPicture() [4/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name, . UInt_t ; new_width, . UInt_t ; new_height . ). Get picture with specified size from pool (picture will be scaled if necessary). ; Picture must be freed using TGPicturePool::FreePicture(). If picture is not found 0 is returned. ; Definition at line 138 of file TGPicture.cxx. ◆ IsA(). TClass * TGPicturePool::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 113 of file TGPicture.h. ◆ operator=(). TGPicturePool & TGPicturePool::operator= ; (; const TGPicturePool & ; pp). protected . assignment operator ; Definition at line 67 of file TGPicture.cxx. ◆ Print(). void TGPicturePool::Print ; (; Option_t * ; option = """"); const. overridevirtual . List all pictures in the pool. ; Reimplemented from TObject.; Definition at line 307 of file TGPicture.cxx. ◆ Streamer(). void TGPicturePool::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGPicturePool::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 113 of file TGPicture.h. Member Data Documentation. ◆ fClient. const TGClient* TGPicturePool::fClient. protected . client for which we keep icon pool ; Definition at line 92 of file TGPicture.h. ◆ fPath. TString TGPicturePool::fPath. protected . icon search path ; Definition at line 93 of file TGPicture.h. ◆ fPicList. THashTable* TGPicturePool::fPicList. protected . hash table containing the icons ; Definition at line 94 of file TGPicture.h. Libraries for TGPicturePool:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGPicture.h; gui/gui/src/TGPicture.cxx. TGPicturePool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicturePool.html:15225,Guid,Guide,15225,doc/master/classTGPicturePool.html,https://root.cern,https://root.cern/doc/master/classTGPicturePool.html,1,['Guid'],['Guide']
Usability,"rnelTrivial(). virtual TMVA::PDEFoamKernelTrivial::~PDEFoamKernelTrivial ; (; ). inlinevirtual . Definition at line 45 of file PDEFoamKernelTrivial.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::PDEFoamKernelTrivial::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::PDEFoamKernelTrivial::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::PDEFoamKernelTrivial::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 50 of file PDEFoamKernelTrivial.h. ◆ DeclFileName(). static const char * TMVA::PDEFoamKernelTrivial::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 50 of file PDEFoamKernelTrivial.h. ◆ Estimate(). Float_t TMVA::PDEFoamKernelTrivial::Estimate ; (; PDEFoam * ; foam, . std::vector< Float_t > & ; txvec, . ECellValue ; cv . ). virtual . Simple kernel estimator. ; It returns the cell value 'cv', corresponding to the event vector 'txvec' (in foam coordinates).; Parameters:. foam - the pdefoam to search in; txvec - event vector in foam coordinates [0,1]; cv - cell value to estimate . Implements TMVA::PDEFoamKernelBase.; Definition at line 75 of file PDEFoamKernelTrivial.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamKernelTrivial::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamKernelBase.; Definition at line 50 of file PDEFoamKernelTrivial.h. ◆ Streamer(). virtual void TMVA::PDEFoamKernelTrivial::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamKernelBase. ◆ StreamerNVirtual(). void TMVA::PDEFoamKernelTrivial::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file PDEFoamKernelTrivial.h. Libraries for TMVA::PDEFoamKernelTrivial:. [legend]; The documentation for this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html:12430,Simpl,Simple,12430,doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,1,['Simpl'],['Simple']
Usability,"rning an empty string representation of size capacity and containing ncha...Definition TString.cxx:261; TString::MaybeWildcardBool_t MaybeWildcard() constReturns true if string contains one of the wildcard characters ""[]*?"".Definition TString.cxx:964; TString::InitCharvoid InitChar(char c)Initialize a string with a single character.Definition TString.cxx:148; TString::MaxSizestatic Ssiz_t MaxSize()Definition TString.h:261; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::GetLongPointerchar * GetLongPointer()Definition TString.h:252; TString::Itoastatic TString Itoa(Int_t value, Int_t base)Converts an Int_t to a TString with respect to the base specified (2-36).Definition TString.cxx:2092; TString::Sizeofvirtual Int_t Sizeof() constReturns size string will occupy on I/O buffer.Definition TString.cxx:1401; TString::ClobberSsiz_t Clobber(Ssiz_t nc)Clear string and make sure it has a capacity of nc.Definition TString.cxx:1246; TString::Clonevoid Clone(Ssiz_t nc)Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current...Definition TString.cxx:1279; TString::SetSizevoid SetSize(Ssiz_t s)Definition TString.h:248; TString::Zerovoid Zero()Definition TString.h:264; TString::SetLongPointervoid SetLongPointer(char *p)Definition TString.h:251; TString::GetLongSizeSsiz_t GetLongSize() constDefinition TString.h:247; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::Classstatic TClass * Class(); TString::GetInitialCapacitystatic Ssiz_t GetInitialCapacity()Definition TString.cxx:1568; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::AssertElementvoid AssertElement(Ssiz_t nc) constCheck to make sure a string index is in range.Definition TString.cxx:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:104534,Clear,Clear,104534,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['Clear'],['Clear']
Usability,"rning an empty string representation of size capacity and containing ncha...Definition TString.cxx:261; TString::MaybeWildcardBool_t MaybeWildcard() constReturns true if string contains one of the wildcard characters ""[]*?"".Definition TString.cxx:964; TString::InitCharvoid InitChar(char c)Initialize a string with a single character.Definition TString.cxx:148; TString::MaxSizestatic Ssiz_t MaxSize()Definition TString.h:261; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::GetLongPointerchar * GetLongPointer()Definition TString.h:252; TString::Itoastatic TString Itoa(Int_t value, Int_t base)Converts an Int_t to a TString with respect to the base specified (2-36).Definition TString.cxx:2092; TString::Sizeofvirtual Int_t Sizeof() constReturns size string will occupy on I/O buffer.Definition TString.cxx:1401; TString::ClobberSsiz_t Clobber(Ssiz_t nc)Clear string and make sure it has a capacity of nc.Definition TString.cxx:1246; TString::operator+=TString & operator+=(const char *s)Definition TString.h:584; TString::GetShortSizeSsiz_t GetShortSize() constDefinition TString.h:244; TString::IsWhitespaceBool_t IsWhitespace() constDefinition TString.h:415; TString::Clonevoid Clone(Ssiz_t nc)Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current...Definition TString.cxx:1279; TString::SetSizevoid SetSize(Ssiz_t s)Definition TString.h:248; TString::GetLongPointerconst char * GetLongPointer() constDefinition TString.h:253; TString::operator+=std::enable_if< ROOT::TypeTraits::IsUnsignedNumeral< T >::value, TString >::type & operator+=(T u); TString::GetShortPointerconst char * GetShortPointer() constDefinition TString.h:255; TString::Zerovoid Zero()Definition TString.h:264; TString::GetLongCapSsiz_t GetLongCap() constDefinition TString.h:250; TString::SetLongPointervoid SetLongPointer(char *p)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8h_source.html:52931,Clear,Clear,52931,doc/master/TString_8h_source.html,https://root.cern,https://root.cern/doc/master/TString_8h_source.html,1,['Clear'],['Clear']
Usability,"rning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidAppendParticle(Int_t pdg, TLorentzVector* p); voidClearEvent(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Int_tfDebugDebug level; TPythia8*fPythia8Pointer to pythia8. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8Decayer(); constructor. void Init(); Initialize the decayer. void Decay(Int_t pdg, TLorentzVector* p); Decay a single particle. Int_t ImportParticles(TClonesArray* particles); import the decay products into particles array. void SetForceDecay(Int_t type); Set forced decay mode. void ForceDecay(); ForceDecay not yet implemented. Float_t GetPartialBranchingRatio(Int_t ipart). Float_t GetLifetime(Int_t kf); return lifetime in seconds of teh particle with PDG number pdg. void ReadDecayTable(); to read a decay table (not yet implemented). void AppendParticle(Int_t pdg, TLorentzVector* p); Append a particle to the stack. void ClearEvent(); Clear the event stack. TPythia8Decayer(). virtual ~TPythia8Decayer(); {;}. void SetDebugLevel(Int_t debug); {fDebug = debug;}. » Author: Andreas Morsch 04/07/2008 » Copyright (c) 1998-2008, ALICE Experiment at CERN, All rights reserved. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-03-14 16:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPythia8Decayer.html:6353,Clear,ClearEvent,6353,root/html534/TPythia8Decayer.html,https://root.cern,https://root.cern/root/html534/TPythia8Decayer.html,2,['Clear'],"['Clear', 'ClearEvent']"
Usability,"rningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms.Definition TVirtualFFT.h:88; TVirtualFFT::FFTstatic TVirtualFFT * FFT(Int_t ndim, Int_t *n, Option_t *option)Returns a pointer to the FFT of requested size and type.Definition TVirtualFFT.cxx:131; TVirtualFFT::GetPointRealvirtual Double_t GetPointReal(Int_t ipoint, Bool_t fromInput=kFALSE) const =0; bool; double; int; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; f1TF1 * f1Definition legend1.C:11; TMath::InfinityDouble_t Infinity()Returns an infinity as defined by the IEEE standard.Definition TMath.h:917; formula1Definition formula1.py:1. histhistsrcTF1Convolution.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1Convolution_8cxx_source.html:30282,Guid,Guide,30282,doc/master/TF1Convolution_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1Convolution_8cxx_source.html,1,['Guid'],['Guide']
Usability,"rningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; angleOption_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; TMath.h; TNamed.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gPad#define gPadDefinition TVirtualPad.h:308; TAttFillFill Area Attributes class.Definition TAttFill.h:19; TAttFill::Modifyvirtual void Modify()Change current fill area attributes if necessary.Definition TAttFill.cxx:216; TAttLineLine Attributes class.Definition TAttLine.h:18; TAttLine::Modifyvirtual void Modify()Change current line attributes if necessary.Definition TAttLine.cxx:247; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::TwoPiconstexpr Double_t TwoPi()Definition TMath.h:44; AuthorTimur Pocheptsov ; Definition in file polytest1.C. tutorialsgraphicspolytest1.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/polytest1_8C.html:5662,Guid,Guide,5662,doc/master/polytest1_8C.html,https://root.cern,https://root.cern/doc/master/polytest1_8C.html,1,['Guid'],['Guide']
Usability,"rns the largest of a and b.Definition TMathBase.h:250; TMath::SortItrvoid SortItr(Iterator first, Iterator last, IndexIterator index, Bool_t down=kTRUE)Sort the n1 elements of the Short_t array defined by its iterators.Definition TMathBase.h:406; TMath::NextPrimeLong_t NextPrime(Long_t x); TMath::SignT1 Sign(T1 a, T2 b)Returns a value with the magnitude of a and the sign of b.Definition TMathBase.h:175; TMath::RangeShort_t Range(Short_t lb, Short_t ub, Short_t x)Returns x if lb < x < up, lb if x < lb and ub if x > ub.Definition TMathBase.h:302; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::OddBool_t Odd(Long_t a)Returns true if a is odd.Definition TMathBase.h:117; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::SignBitBool_t SignBit(Integer a)Returns whether the sign of Integer a is negative.Definition TMathBase.h:155; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TMath::EvenBool_t Even(Long_t a)Returns true if a is even.Definition TMathBase.h:113; CompareAscDefinition TMathBase.h:386; CompareAsc::fDataT fDataDefinition TMathBase.h:395; CompareAsc::operator()bool operator()(Index i1, Index i2)Definition TMathBase.h:391; CompareAsc::CompareAscCompareAsc(T d)Definition TMathBase.h:388; CompareDescDefinition TMathBase.h:373; CompareDesc::operator()bool operator()(Index i1, Index i2)Definition TMathBase.h:378; CompareDesc::CompareDescCompareDesc(T d)Definition TMathBase.h:375; CompareDesc::fDataT fDataDefinition TMathBase.h:382. corebaseincTMathBase.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMathBase_8h_source.html:20395,Guid,Guide,20395,doc/master/TMathBase_8h_source.html,https://root.cern,https://root.cern/doc/master/TMathBase_8h_source.html,1,['Guid'],['Guide']
Usability,rns; Parameters. dfltif result is not defined ; namename of the env variable . Definition at line 47 of file RWebWindowsManager.cxx. ◆ GetCodeVersion(). std::string ROOT::RWebWindowWSHandler::GetCodeVersion ; (; ). inlineoverrideprotectedvirtual . Method generate extra suffix for all kinds of loaded code. ; Reimplemented from THttpWSHandler.; Definition at line 38 of file RWebWindowWSHandler.hxx. ◆ GetDefaultPageContent(). TString ROOT::RWebWindowWSHandler::GetDefaultPageContent ; (; ). inlineoverridevirtual . returns content of default web-page THttpWSHandler interface ; Reimplemented from THttpWSHandler.; Definition at line 135 of file RWebWindowWSHandler.hxx. ◆ ProcessBatchHolder(). Bool_t ROOT::RWebWindowWSHandler::ProcessBatchHolder ; (; std::shared_ptr< THttpCallArg > & ; ). inlineoverrideprotectedvirtual . Method used to accept or reject root_batch_holder.js request. ; Reimplemented from THttpWSHandler.; Definition at line 33 of file RWebWindowWSHandler.hxx. ◆ ProcessWS(). Bool_t ROOT::RWebWindowWSHandler::ProcessWS ; (; THttpCallArg * ; arg). inlineoverridevirtual . Process websocket request - called from THttpServer thread THttpWSHandler interface. ; Implements THttpWSHandler.; Definition at line 142 of file RWebWindowWSHandler.hxx. ◆ VerifyDefaultPageContent(). void ROOT::RWebWindowWSHandler::VerifyDefaultPageContent ; (; std::shared_ptr< THttpCallArg > & ; arg). inlineoverrideprotectedvirtual . Method called when default page content is prepared for use By default no-cache header is provided. ; Reimplemented from THttpWSHandler.; Definition at line 41 of file RWebWindowWSHandler.hxx. Member Data Documentation. ◆ fWindow. RWebWindow& ROOT::RWebWindowWSHandler::fWindow. ! window reference ; Definition at line 123 of file RWebWindowWSHandler.hxx. gui/webdisplay/src/RWebWindowWSHandler.hxx; gui/webdisplay/src/RWebWindowsManager.cxx. ROOTRWebWindowWSHandler. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html:18088,Guid,Guide,18088,doc/v632/classROOT_1_1RWebWindowWSHandler.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowWSHandler.html,1,['Guid'],['Guide']
Usability,"rnum = Int_t(fCmPar[i])-1;; 487 FixParameter(parnum);; 488 }; 489 return 0;; 490 case 9: // REStore <code>; 491 if (nargs<1) return 0;; 492 if(fCmPar[0]==0.); 493 for (i=0;i<fNpar;i++); 494 ReleaseParameter(i);; 495 else; 496 if(fCmPar[0]==1.) {; 497 ReleaseParameter(fLastFixed);; 498 std::cout <<fLastFixed<<std::endl;; 499 }; 500 return 0;; 501 case 10: // RELease <parno> ...; 502 if (nargs<1) return -1; // No parameters specified; 503 for (i=0;i<nargs;i++) {; 504 Int_t parnum = Int_t(fCmPar[i])-1;; 505 ReleaseParameter(parnum);; 506 }; 507 return 0;; 508 case 11: // SCAn not implemented; 509 return -10;; 510 case 12: // CONt not implemented; 511 return -10;; 512 ; 513 case 13: // HESSe not implemented; 514 return -10;; 515 case 14: // SAVe; 516 Printf(""SAVe command is obsolete"");; 517 return -10;; 518 case 15: // IMProve not implemented; 519 return -10;; 520 case 16: // CALl fcn <iflag>; 521 {if(nargs<1) return -1;; 522 Int_t flag = Int_t(fCmPar[0]);; 523 Double_t fval;; 524 Eval(fNpar,fGr,fval,fA,flag);; 525 return 0;}; 526 case 17: // STAndard must call function STAND; 527 return 0;; 528 case 18: case 19:; 529 case 20: case 24: {; 530 Double_t fval;; 531 Int_t flag = 3;; 532 Eval(fNpar,fGr,fval,fA,flag);; 533 return 0;; 534 }; 535 case 21:; 536 Clear();; 537 return 0;; 538 case 22: //HELp not implemented; 539 case 23: //MNContour not implemented; 540 case 25: // JUMp not implemented; 541 return -10;; 542 case 26: case 27: case 29: case 30: case 31: case 32:; 543 return 0; // blank commands; 544 case 33: case 34: case 35: case 36: case 37: case 38:; 545 case 39:; 546 Printf(""Obsolete command. Use corresponding SET command instead"");; 547 return -10;; 548 default:; 549 break;; 550 }; 551 return 0;; 552}; 553 ; 554////////////////////////////////////////////////////////////////////////////////; 555/// Called from TFumili::ExecuteCommand in case; 556/// of ""SET xxx"" and ""SHOW xxx"".; 557 ; 558Int_t TFumili::ExecuteSetCommand(Int_t nargs){; 559 static Int_t nntot = 30;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:16400,Clear,Clear,16400,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['Clear'],['Clear']
Usability,"roach:; * standard http interface to ROOT application; * no any temporary ROOT files when access data; * user interface running in all browsers. Starting HTTP server. To start http server, at any time create instance; of the THttpServer class like:; serv = new THttpServer(""http:8080"");. This will starts civetweb-based http server with http port 8080.; Than one should be able to open address ""http://localhost:8080""; in any modern browser (IE, Firefox, Chrome) and browse objects,; created in application. By default, server can access files,; canvases and histograms via gROOT pointer. All such objects; can be displayed with JSROOT graphics. At any time one could register other objects with the command:. TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);. If objects content is changing in the application, one could; enable monitoring flag in the browser - than objects view; will be regularly updated. More information: http://root.cern.ch/drupal/content/users-guide. Function Members (Methods); public:. THttpServer(const char* engine = ""civetweb:8080""); virtual~THttpServer(); voidTObject::AbstractMethod(const char* method) const; voidAddLocation(const char* prefix, const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreateEngine(const char* engine); Bool_tCreateItem(const char* fullname, const char* title); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constME",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpServer.html:1592,guid,guide,1592,root/html534/THttpServer.html,https://root.cern,https://root.cern/root/html534/THttpServer.html,1,['guid'],['guide']
Usability,"rocedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenkins procedure called root-releasenotes; Update the releases xml with the Jenkins procedure called root-release-makeReleasesXml; Once authenticated, import the releases xml in the site clicking import here (Be reminded: this works for authenticated users only!).; Eventually edit the 'highlights' section, which is currently commented, in the generated release page.; If this applies, mark the release as Pro or Old and remove the attribute to the one previously holding it. There are radio buttons exposed by Drupal when editing a release's page.; If not a patch release edit reference-guide page to add the new reference guide for the release. Announcements. send mail to the following mailing lists: root-planning@cern.ch, root-dev@cern.ch, roottalk@cern.ch, root-godparents@cern.ch, root-ambassadors@cern.ch; write announcement in RootTalk forum news. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:4805,Guid,Guides,4805,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"rocessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table); Static function setting the current TRefTable. void Streamer(TBuffer& ); Stream an object of class TRefTable. TRefTable(). Int_t GetNumPIDs() const; {return fNumPIDs;}. Int_t GetSize(Int_t pid) const; {return fAllocSize[GetInternalIdxForPID(pid)];}. Int_t GetN(Int_t pid) const; {return fN[GetInternalIdxForPID(pid)];}. TObject * GetOwner() const; {return fOwner;}. TObjArray * GetParents() const; {return fParents;}. UInt_t GetUID() const; {return fUID;}. TProcessID * GetUIDContext() const; {return fUIDContext;}. void SetUID(UInt_t uid, TProcessID* context = 0); {fUID=uid; fUIDContext = context;}. » Author: Rene Brun 17/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRefTable.html:10305,Clear,Clear,10305,root/html534/TRefTable.html,https://root.cern,https://root.cern/root/html534/TRefTable.html,3,['Clear'],['Clear']
Usability,"rocessID with GUID guid. TObject * GetParent(Int_t uid, TProcessID* context = 0) const; Return object corresponding to uid. Int_t GetInternalIdxForPID(TProcessID* procid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. Int_t GetInternalIdxForPID(Int_t pid) const; Get the index for fProcessIDs, fAllocSize, etc given a PID.; Uses fMapPIDtoInternal and the pid's GUID / fProcessGUID. TRefTable * GetRefTable(); Static function returning the current TRefTable. Bool_t Notify(); This function is called by TRef::Streamer or TStreamerInfo::ReadBuffer; when reading a reference.; This function, in turns, notifies the TRefTable owner for action.; eg, when the owner is a TBranchRef, TBranchRef::Notify is called; to read the branch containing the referenced object. void ReadBuffer(TBuffer& b); Fill buffer b with the fN elements in fParentdIDs.; This function is called by TBranchRef::ReadLeaves. void Reset(Option_t* = """"); Clear all entries in the table. Int_t SetParent(const TObject* parent, Int_t branchID); -- Set current parent object, typically a branch of a tree. This function is called by TBranchElement::Fill() and by; TBranchElement::GetEntry(). void SetRefTable(TRefTable* table); Static function setting the current TRefTable. void Streamer(TBuffer& b); Stream an object of class TRefTable. TRefTable(). Int_t GetNumPIDs() const; {return fNumPIDs;}. Int_t GetSize(Int_t pid) const; {return fAllocSize[GetInternalIdxForPID(pid)];}. Int_t GetN(Int_t pid) const; {return fN[GetInternalIdxForPID(pid)];}. TObject * GetOwner() const; {return fOwner;}. TObjArray * GetParents() const; {return fParents;}. UInt_t GetUID() const; {return fUID;}. TProcessID * GetUIDContext() const; {return fUIDContext;}. void SetUID(UInt_t uid, TProcessID* context = 0); {fUID=uid; fUIDContext = context;}. » Author: Rene Brun 17/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TRefT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRefTable.html:10217,Clear,Clear,10217,root/html528/TRefTable.html,https://root.cern,https://root.cern/root/html528/TRefTable.html,3,['Clear'],['Clear']
Usability,"rocessNode each time Next is called. //; 219// //; 220////////////////////////////////////////////////////////////////////////////; 221 ; 222class TGeoIterator;; 223 ; 224class TGeoIteratorPlugin : public TObject {; 225protected:; 226 const TGeoIterator *fIterator = nullptr; // Caller iterator; 227private:; 228 // No copy; 229 TGeoIteratorPlugin(const TGeoIteratorPlugin &);; 230 TGeoIteratorPlugin &operator=(const TGeoIteratorPlugin &);; 231 ; 232public:; 233 TGeoIteratorPlugin() : TObject(), fIterator(nullptr) {}; 234 ~TGeoIteratorPlugin() override {}; 235 ; 236 virtual void ProcessNode() = 0;; 237 void SetIterator(const TGeoIterator *iter) { fIterator = iter; }; 238 ; 239 ClassDefOverride(TGeoIteratorPlugin, 0) // ABC for user plugins connecter to a geometry iterator.; 240};; 241 ; 242////////////////////////////////////////////////////////////////////////////; 243// //; 244// TGeoIterator - iterator for the node tree //; 245// //; 246////////////////////////////////////////////////////////////////////////////; 247 ; 248class TGeoIterator {; 249private:; 250 TGeoVolume *fTop = nullptr; // Top volume of the iterated branch; 251 Bool_t fMustResume = kFALSE; // Private flag to resume from current node.; 252 Bool_t fMustStop = kFALSE; // Private flag to signal that the iterator has finished.; 253 Int_t fLevel = 0; // Current level in the tree; 254 Int_t fType = 0; // Type of iteration; 255 Int_t *fArray = nullptr; // Array of node indices for the current path; 256 TGeoHMatrix *fMatrix = nullptr; // Current global matrix; 257 TString fTopName; // User name for top; 258 TGeoIteratorPlugin *fPlugin = nullptr; // User iterator plugin; 259 Bool_t fPluginAutoexec = kFALSE; // Plugin automatically executed during next(); 260 ; 261 void IncreaseArray();; 262 ; 263protected:; 264 TGeoIterator(); 265 : fTop(nullptr),; 266 fMustResume(kFALSE),; 267 fMustStop(kFALSE),; 268 fLevel(0),; 269 fType(0),; 270 fArray(nullptr),; 271 fMatrix(nullptr),; 272 fTopName(),; 273 fPlugin(nullptr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNode_8h_source.html:10361,resume,resume,10361,doc/master/TGeoNode_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNode_8h_source.html,1,['resume'],['resume']
Usability,"rocessing bit according to 'on'. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop the process after this event. If timeout is positive, start; a timer firing after timeout seconds to hard-stop time-expensive; events. void SetDispatchTimer(Bool_t on = kTRUE); Enable/disable the timer to dispatch pening events while processing. void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); Enable/disable the timer to stop/abort processing.; The 'timeout' is in seconds. void AddQueryResult(TQueryResult* q); Add query result to the list, making sure that there are no; duplicates. void RemoveQueryResult(const char* ref); Remove all query result instances referenced 'ref' from; the list of results. TQueryResult * GetQueryResult(const char* ref); Get query result instances referenced 'ref' from; the list of results. void SetCurrentQuery(TQueryResult* q); Set current query and save previous value. void AddInput(TObject* inp); Add object to input list. void ClearInput(); Clear input list. TObject * GetOutput(const char* name) const; Get output object by name. TList * GetOutputList() const; Get output list. Int_t ReinitSelector(TQueryResult* qr); Reinitialize fSelector using the selector files in the query result.; Needed when Finalize is called after a Process execution for the same; selector name. Int_t AddOutputObject(TObject* obj); Incorporate output object (may not be used in this class). void AddOutput(TList* out); Incorporate output list (may not be used in this class). void StoreOutput(TList* out); Store output list (may not be used in this class). void StoreFeedback(TObject* slave, TList* out); Store feedback list (may not be used in this class). void Progress(Long64_t total, Long64_t processed); Report progress (may not be used in this class). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress (may not be used in this class). void Progress(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayer.html:15030,Clear,ClearInput,15030,root/html528/TProofPlayer.html,https://root.cern,https://root.cern/root/html528/TProofPlayer.html,12,['Clear'],"['Clear', 'ClearInput']"
Usability,"rocessing(); ; # Train the neural network classifier; model.train_classifier(); sbi_model = model; ; ; # Function to compute the likelihood ratio using the trained classifier; def learned_likelihood_ratio(*args):; n = max(*(len(a) for a in args)); X = np.zeros((n, len(args))); for i in range(len(args)):; X[:, i] = args[i]; prob = sbi_model.classifier.predict_proba(X)[:, 1]; return prob / (1.0 - prob); ; ; # Create combined variable list for ROOT; combined_vars = ROOT.RooArgList(); for var in x_vars + mu_vars:; combined_vars.add(var); ; # Create a custom likelihood ratio function using the trained classifier; lhr_learned = ROOT.RooFit.bindFunction(""MyBinFunc"", learned_likelihood_ratio, combined_vars); ; # Calculate the 'analytical' likelihood ratio; lhr_calc = ROOT.RooFormulaVar(""lhr_calc"", ""x[0] / x[1]"", [ws[""gauss""], ws[""uniform""]]); ; # Define the 'analytical' negative logarithmic likelihood ratio; nll_gauss = ws[""gauss""].createNLL(ws[""obs_data""]); ; # Create the learned pdf and NLL sum based on the learned likelihood ratio; pdf_learned = ROOT.RooWrapperPdf(""learned_pdf"", ""learned_pdf"", lhr_learned, True); ; nllr_learned = pdf_learned.createNLL(ws[""obs_data""]); ; # Plot the learned and analytical summed negativelogarithmic likelihood; frame1 = mu_vars[0].frame(; Title=""NLL of SBI vs. Morphing;#mu_{1};NLL"",; Range=(mu_observed[0] - 1, mu_observed[0] + 1),; ); nll_gauss.plotOn(frame1, ShiftToZero=True, LineColor=""kP6Blue+1"", Name=""gauss""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""Ignore"") # Silence some warnings; nll_morph.plotOn(frame1, ShiftToZero=True, LineColor=""kP6Blue+2"", Name=""morph""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""PrintErrors""); nllr_learned.plotOn(frame1, LineColor=""kP6Blue"", ShiftToZero=True, Name=""learned""); ; ; # Declare a helper function in ROOT to dereference unique_ptr; ROOT.gInterpreter.Declare(; """"""; RooAbsArg &my_deref(std::unique_ptr<RooAbsArg> const& ptr) { return *ptr; }; """"""; ); ; # Choose normalization set for lhr_calc to plot over;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html:8912,learn,learned,8912,doc/master/rf617__simulation__based__inference__multidimensional_8py.html,https://root.cern,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html,2,['learn'],['learned']
Usability,"rofile2D by multiplication of h1 by h2.; 1254///; 1255/// `this = (c1*h1)*(c2*h2)`; 1256 ; 1257Bool_t TProfile2D::Multiply(const TH1 *, const TH1 *, Double_t, Double_t, Option_t *); 1258{; 1259 Error(""Multiply"",""Multiplication of profile2D histograms not implemented"");; 1260 return kFALSE;; 1261}; 1262 ; 1263////////////////////////////////////////////////////////////////////////////////; 1264/// Project this profile2D into a 2-D histogram along X,Y.; 1265///; 1266/// The projection is always of the type TH2D.; 1267///; 1268/// - if option ""E"" is specified the errors of the projected histogram are computed and set; 1269/// to be equal to the errors of the profile.; 1270/// Option ""E"" is defined as the default one in the header file.; 1271/// - if option """" is specified the histogram errors are simply the sqrt of its content; 1272/// - if option ""B"" is specified, the content of bin of the returned histogram; 1273/// will be equal to the GetBinEntries(bin) of the profile,; 1274/// - if option ""C=E"" the bin contents of the projection are set to the; 1275/// bin errors of the profile; 1276/// - if option ""W"" is specified the bin content of the projected histogram is set to the; 1277/// product of the bin content of the profile and the entries.; 1278/// With this option the returned histogram will be equivalent to the one obtained by; 1279/// filling directly a TH2D using the 3-rd value as a weight.; 1280/// This option makes sense only for profile filled with all weights =1.; 1281/// When the profile is weighted (filled with weights different than 1) the; 1282/// bin error of the projected histogram (obtained using this option ""W"") cannot be; 1283/// correctly computed from the information stored in the profile. In that case the; 1284/// obtained histogram contains as bin error square the weighted sum of the square of the; 1285/// profiled observable (TProfile2D::fSumw2[bin] ); 1286 ; 1287TH2D *TProfile2D::ProjectionXY(const char *name, Option_t *option) const; 1288{; 12",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:44686,simpl,simply,44686,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['simpl'],['simply']
Usability,"rofileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooProfileLL(const RooProfileLL& other, const char* name = 0); Copy constructor. ~RooProfileLL(); Destructor. const RooArgSet& bestFitParams() const. const RooArgSet& bestFitObs() const. RooAbsReal* createProfile(const RooArgSet& paramsOfInterest); Optimized implementation of createProfile for profile likelihoods.; Return profile of original function in terms of stated parameters; of interest rather than profiling recursively. Double_t evaluate() const; Evaluate profile likelihood by minimizing likelihood w.r.t. all; parameters that are not considered observables of this profile; likelihood object. void validateAbsMin() const; Check that parameters and likelihood value for 'best fit' are still valid. If not,; because the best fit has never been calculated, or because constant parameters have; changed value or parameters have changed const/float status, the minimum is recalculated. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). TObject* clone(const char* newname) const; { return new RooProfileLL(*this,newname); }. void setAlwaysStartFromMin(Bool_t flag); { _startFromMin = flag ; }. Bool_t alwaysStartFromMin() const; { return _startFromMin ; }. RooMinuit* minuit(); { return _minuit ; }. RooAbsReal& nll(); { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void clearAbsMin(); { _absMinValid = kFALSE ; }. Int_t numEval() const; { return _neval ; }. » Last changed: Mon Jul 4 15:23:44 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProfileLL.html:36118,clear,clearAbsMin,36118,root/html530/RooProfileLL.html,https://root.cern,https://root.cern/root/html530/RooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"rofileLL(const char* name, const char* title, RooAbsReal& nll, const RooArgSet& observables); Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooProfileLL(const RooProfileLL& other, const char* name = 0); Copy constructor. ~RooProfileLL(); Destructor. const RooArgSet& bestFitParams() const. const RooArgSet& bestFitObs() const. RooAbsReal* createProfile(const RooArgSet& paramsOfInterest); Optimized implementation of createProfile for profile likelihoods.; Return profile of original function in terms of stated parameters; of interest rather than profiling recursively. Double_t evaluate() const; Evaluate profile likelihood by minimizing likelihood w.r.t. all; parameters that are not considered observables of this profile; likelihood object. void validateAbsMin() const; Check that parameters and likelihood value for 'best fit' are still valid. If not,; because the best fit has never been calculated, or because constant parameters have; changed value or parameters have changed const/float status, the minimum is recalculated. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). TObject* clone(const char* newname) const; { return new RooProfileLL(*this,newname); }. void setAlwaysStartFromMin(Bool_t flag); { _startFromMin = flag ; }. Bool_t alwaysStartFromMin() const; { return _startFromMin ; }. RooMinuit* minuit(); { return _minuit ; }. RooAbsReal& nll(); { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void clearAbsMin(); { _absMinValid = kFALSE ; }. Int_t numEval() const; { return _neval ; }. » Last changed: Thu Nov 3 20:09:01 2011 » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProfileLL.html:36497,clear,clearAbsMin,36497,root/html532/RooProfileLL.html,https://root.cern,https://root.cern/root/html532/RooProfileLL.html,1,['clear'],['clearAbsMin']
Usability,"rogressBar.h. ◆ GetValueFormat(). const char * TGProgressBar::GetValueFormat ; (; ); const. inline . Definition at line 67 of file TGProgressBar.h. ◆ Increment(). void TGProgressBar::Increment ; (; Float_t ; inc). Increment progress position. ; Definition at line 110 of file TGProgressBar.cxx. ◆ IsA(). TClass * TGProgressBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar.; Definition at line 90 of file TGProgressBar.h. ◆ Percent(). virtual void TGProgressBar::Percent ; (; Bool_t ; on). inlinevirtual . Reimplemented in TGVProgressBar.; Definition at line 78 of file TGProgressBar.h. ◆ Reset(). void TGProgressBar::Reset ; (; ). virtual . Reset progress bar (i.e. set pos to 0). ; Definition at line 126 of file TGProgressBar.cxx. ◆ SavePrimitive(). void TGProgressBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save progress bar parameters as a C++ statement(s) on output stream out. ; Reimplemented from TGFrame.; Reimplemented in TGVProgressBar.; Definition at line 396 of file TGProgressBar.cxx. ◆ SetBarColor() [1/2]. void TGProgressBar::SetBarColor ; (; const char * ; color = ""blue""). Set progress bar color. ; Definition at line 166 of file TGProgressBar.cxx. ◆ SetBarColor() [2/2]. void TGProgressBar::SetBarColor ; (; Pixel_t ; color). virtual . Set progress bar color. ; Definition at line 156 of file TGProgressBar.cxx. ◆ SetBarType(). void TGProgressBar::SetBarType ; (; EBarType ; type). Set bar type. ; Definition at line 146 of file TGProgressBar.cxx. ◆ SetFillType(). void TGProgressBar::SetFillType ; (; EFillType ; type). Set fill type. ; Definition at line 136 of file TGProgressBar.cxx. ◆ SetForegroundColor(). void TGProgressBar::SetForegroundColor ; (; Pixel_t ; pixel). overridevirtual . Change text color drawing. ; Reimplemented from TGFrame.; Definition at line 207 of file TGProgressBar.cxx. ◆ SetMax(). void TGProgressB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGProgressBar.html:34767,progress bar,progress bar,34767,doc/master/classTGProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGProgressBar.html,1,['progress bar'],['progress bar']
Usability,rogressbool progressDefinition RooAbsReal.h:490; RooAbsReal::PlotOpt::doeevalbool doeevalDefinition RooAbsReal.h:489; RooAbsReal::PlotOpt::addToWgtSelfdouble addToWgtSelfDefinition RooAbsReal.h:482; RooAbsReal::PlotOpt::shiftToZerobool shiftToZeroDefinition RooAbsReal.h:471; RooAbsReal::PlotOpt::projDataSetconst RooArgSet * projDataSetDefinition RooAbsReal.h:472; RooAbsReal::PlotOpt::binProjDatabool binProjDataDefinition RooAbsReal.h:468; RooAbsReal::PlotOpt::stypeScaleType stypeDefinition RooAbsReal.h:466; RooAbsReal::PlotOpt::curveNameSuffixconst char * curveNameSuffixDefinition RooAbsReal.h:486; RooAbsReal::PlotOpt::addToCurveNameconst char * addToCurveNameDefinition RooAbsReal.h:481; RooAbsReal::PlotOpt::numeeInt_t numeeDefinition RooAbsReal.h:487; RooAbsReal::PlotOpt::errorFRconst RooFitResult * errorFRDefinition RooAbsReal.h:491; RooAbsReal::PlotOpt::rangeHidouble rangeHiDefinition RooAbsReal.h:475; RooAbsReal::PlotOpt::numCPUInt_t numCPUDefinition RooAbsReal.h:484; RooAbsReal::PlotOpt::projSetconst RooArgSet * projSetDefinition RooAbsReal.h:469; RooAbsReal::PlotOpt::postRangeFracScalebool postRangeFracScaleDefinition RooAbsReal.h:476; RooAbsReal::PlotOpt::curveInvisiblebool curveInvisibleDefinition RooAbsReal.h:479; RooAbsReal::PlotOpt::curveNameconst char * curveNameDefinition RooAbsReal.h:480; RooAbsReal::PlotOpt::projDataconst RooAbsData * projDataDefinition RooAbsReal.h:467; RooAbsReal::PlotOpt::drawOptionsOption_t * drawOptionsDefinition RooAbsReal.h:464; RooAbsReal::PlotOpt::rangeLodouble rangeLoDefinition RooAbsReal.h:474; RooFit::UniqueIdA UniqueId can be added as a class member to enhance any class with a unique identifier for each inst...Definition UniqueId.h:39; RooFit::UniqueId::Value_tunsigned long Value_tDefinition UniqueId.h:41; TreeReadBufferDefinition TreeReadBuffer.h:18; mTMarker mDefinition textangle.C:8. roofitroofitcoreincRooAbsReal.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:50 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:61482,Guid,Guide,61482,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['Guid'],['Guide']
Usability,"rojected is used as secondary inheritance. ; Reimplemented from TEveProjected.; Definition at line 142 of file TEveStraightLineSet.h. ◆ IsA(). TClass * TEveStraightLineSetProjected::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveStraightLineSet.; Definition at line 144 of file TEveStraightLineSet.h. ◆ operator=(). TEveStraightLineSetProjected & TEveStraightLineSetProjected::operator= ; (; const TEveStraightLineSetProjected & ; ). private . ◆ SetDepthLocal(). void TEveStraightLineSetProjected::SetDepthLocal ; (; Float_t ; d). overrideprotectedvirtual . Set depth (z-coordinate) of the projected points. ; Reimplemented from TEveProjected.; Definition at line 229 of file TEveStraightLineSet.cxx. ◆ SetProjection(). void TEveStraightLineSetProjected::SetProjection ; (; TEveProjectionManager * ; mng, . TEveProjectable * ; model . ). overridevirtual . Set projection manager and model object. ; Reimplemented from TEveProjected.; Definition at line 218 of file TEveStraightLineSet.cxx. ◆ Streamer(). void TEveStraightLineSetProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveStraightLineSet. ◆ StreamerNVirtual(). void TEveStraightLineSetProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 144 of file TEveStraightLineSet.h. ◆ UpdateProjection(). void TEveStraightLineSetProjected::UpdateProjection ; (; ). overridevirtual . Callback that actually performs the projection. ; Called when projection parameters have been updated. ; Implements TEveProjected.; Definition at line 253 of file TEveStraightLineSet.cxx. Libraries for TEveStraightLineSetProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveStraightLineSet.h; graf3d/eve/src/TEveStraightLineSet.cxx. TEveStraightLineSetProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveStraightLineSetProjected.html:49355,Guid,Guide,49355,doc/master/classTEveStraightLineSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEveStraightLineSetProjected.html,1,['Guid'],['Guide']
Usability,"rojects: NoSY | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer A suggested work flow for distributed projects: NoSY. Overview; Building on the tips and other points explained elsewhere, this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html:1042,Guid,Guides,1042,d/suggested-work-flow-distributed-projects-nosy.html,https://root.cern,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html,1,['Guid'],['Guides']
Usability,"rol-K Delete marked text if any or delete all characters to the right of the cursor . Control-U Delete all characters on the line . Control-V Paste the clipboard text into line edit. . Control-X Cut the marked text, copy to clipboard. . Control-Y Paste the clipboard text into line edit. . All other keys with valid ASCII codes insert themselves into the line. ; Reimplemented from TGFrame.; Definition at line 1216 of file TGTextEntry.cxx. ◆ HandleMotion(). Bool_t TGTextEntry::HandleMotion ; (; Event_t * ; event). overridevirtual . Handle mouse motion event in the text entry widget. ; Reimplemented from TGFrame.; Definition at line 1394 of file TGTextEntry.cxx. ◆ HandleSelection(). Bool_t TGTextEntry::HandleSelection ; (; Event_t * ; event). overridevirtual . Handle text selection event. ; Reimplemented from TGFrame.; Definition at line 1476 of file TGTextEntry.cxx. ◆ HandleSelectionClear(). Bool_t TGTextEntry::HandleSelectionClear ; (; Event_t * ; event). overridevirtual . Handle selection clear event. ; Reimplemented from TGFrame.; Definition at line 1485 of file TGTextEntry.cxx. ◆ HandleSelectionRequest(). Bool_t TGTextEntry::HandleSelectionRequest ; (; Event_t * ; event). overridevirtual . Handle request to send current clipboard contents to requestor window. ; Reimplemented from TGFrame.; Definition at line 1496 of file TGTextEntry.cxx. ◆ HandleTimer(). Bool_t TGTextEntry::HandleTimer ; (; TTimer * ; t). overridevirtual . Handle cursor blink timer. ; Reimplemented from TObject.; Definition at line 1558 of file TGTextEntry.cxx. ◆ HasMarkedText(). Bool_t TGTextEntry::HasMarkedText ; (; ); const. inline . Definition at line 122 of file TGTextEntry.h. ◆ HasOwnFont(). Bool_t TGTextEntry::HasOwnFont ; (; ); const. inline . Definition at line 158 of file TGTextEntry.h. ◆ Home(). void TGTextEntry::Home ; (; Bool_t ; mark = kFALSE). Moves the text cursor to the left end of the line. ; If mark is kTRUE text will be marked towards the first position, if not any marked text w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEntry.html:56268,clear,clear,56268,doc/master/classTGTextEntry.html,https://root.cern,https://root.cern/doc/master/classTGTextEntry.html,1,['clear'],['clear']
Usability,"rom AFS/CVMFS | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development How to setup ROOT externals from AFS/CVMFS. The following instructions are useful for setting up an environment with all the required ROOT e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:1032,Guid,Guides,1032,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,1,['Guid'],['Guides']
Usability,rom TObject. ◆ StreamerNVirtual(). void TGondzioSolver::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 103 of file TGondzioSolver.h. Member Data Documentation. ◆ fAcceptTol. Double_t TGondzioSolver::fAcceptTol. protected . Definition at line 74 of file TGondzioSolver.h. ◆ fBeta_max. Double_t TGondzioSolver::fBeta_max. protected . Definition at line 76 of file TGondzioSolver.h. ◆ fBeta_min. Double_t TGondzioSolver::fBeta_min. protected . Definition at line 75 of file TGondzioSolver.h. ◆ fCorrector_resid. TQpResidual* TGondzioSolver::fCorrector_resid. protected . Definition at line 81 of file TGondzioSolver.h. ◆ fCorrector_step. TQpVar* TGondzioSolver::fCorrector_step. protected . Definition at line 78 of file TGondzioSolver.h. ◆ fFactory. TQpProbBase* TGondzioSolver::fFactory. protected . Definition at line 83 of file TGondzioSolver.h. ◆ fMaximum_correctors. Int_t TGondzioSolver::fMaximum_correctors. protected . Definition at line 68 of file TGondzioSolver.h. ◆ fNumberGondzioCorrections. Int_t TGondzioSolver::fNumberGondzioCorrections. protected . Definition at line 70 of file TGondzioSolver.h. ◆ fPrintlevel. Int_t TGondzioSolver::fPrintlevel. protected . Definition at line 61 of file TGondzioSolver.h. ◆ fStep. TQpVar* TGondzioSolver::fStep. protected . Definition at line 79 of file TGondzioSolver.h. ◆ fStepFactor0. Double_t TGondzioSolver::fStepFactor0. protected . Definition at line 72 of file TGondzioSolver.h. ◆ fStepFactor1. Double_t TGondzioSolver::fStepFactor1. protected . Definition at line 73 of file TGondzioSolver.h. ◆ fTsig. Double_t TGondzioSolver::fTsig. protected . Definition at line 63 of file TGondzioSolver.h. Libraries for TGondzioSolver:. [legend]; The documentation for this class was generated from the following files:; math/quadp/inc/TGondzioSolver.h; math/quadp/src/TGondzioSolver.cxx. TGondzioSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:29 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGondzioSolver.html:18849,Guid,Guide,18849,doc/master/classTGondzioSolver.html,https://root.cern,https://root.cern/doc/master/classTGondzioSolver.html,1,['Guid'],['Guide']
Usability,"rom a ROOT dataset into a basic TensorFlow workflow. ;  ;  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ;  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ;  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ;  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ;  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ;  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ;  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ;  tmva103_Application.C;   This tutorial illustrates how you can conveniently apply BDTs in C++ using the fast tree inference engine offered by TMVA. ;  ;  TMVA_CNN_Classification.C;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_CNN_Classification.py;   TMVA Classification Example Using a Convolutional Neural Network ;  ;  TMVA_Higgs_Classification.C;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_Higgs_Classification.py;   Classification example of TMVA based on public Higgs UCI dataset ;  ;  TMVA_RNN_Classification.C;   TMVA Classification Example Using a Recurrent Neural Network ;  ;  TMVA_RNN_Classification.py;   TMVA Classification Example Using a Recurrent Neural Network ;  ;  TMVA_SOFIE_GNN.py;  ;  TMVA_SOFIE_GNN_Application.C;  ;  TMVA_SOFIE_GNN_Parser.py;  ;  TMVA_SOFIE_Inference.py;   This macro provides an example of using a tra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:1848,learn,learn,1848,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,1,['learn'],['learn']
Usability,"rom a gaussian"", 100, -3, 3);; 446 h1.FillRandom(""gaus"", 10000);; 447~~~; 448 TH1::GetRandom can be used to return a random number distributed; 449 according to the contents of a histogram.; 450 ; 451\anchor making-a-copy; 452### Making a copy of a histogram; 453 Like for any other ROOT object derived from TObject, one can use; 454 the Clone() function. This makes an identical copy of the original; 455 histogram including all associated errors and functions, e.g.:; 456~~~ {.cpp}; 457 TH1F *hnew = (TH1F*)h->Clone(""hnew"");; 458~~~; 459 ; 460\anchor normalizing; 461### Normalizing histograms; 462 ; 463 One can scale a histogram such that the bins integral is equal to; 464 the normalization parameter via TH1::Scale(Double_t norm), where norm; 465 is the desired normalization divided by the integral of the histogram.; 466 ; 467 ; 468\anchor drawing-histograms; 469## Drawing histograms; 470 ; 471 Histograms are drawn via the THistPainter class. Each histogram has; 472 a pointer to its own painter (to be usable in a multithreaded program).; 473 Many drawing options are supported.; 474 See THistPainter::Paint() for more details.; 475 ; 476 The same histogram can be drawn with different options in different pads.; 477 When a histogram drawn in a pad is deleted, the histogram is; 478 automatically removed from the pad or pads where it was drawn.; 479 If a histogram is drawn in a pad, then filled again, the new status; 480 of the histogram will be automatically shown in the pad next time; 481 the pad is updated. One does not need to redraw the histogram.; 482 To draw the current version of a histogram in a pad, one can use; 483~~~ {.cpp}; 484 h->DrawCopy();; 485~~~; 486 This makes a clone (see Clone below) of the histogram. Once the clone; 487 is drawn, the original histogram may be modified or deleted without; 488 affecting the aspect of the clone.; 489 ; 490 One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular; 491 value for the maximum or the minimum sc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:20399,usab,usable,20399,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['usab'],['usable']
Usability,"rom the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (default to 100).; - A 'cached' TChain switches over to a new file. WHY DO WE NEED the TreeCache when doing data analysis?. When writing a TTree, the branch buffers are kept in memory.; A typical branch buffersize (before compression) is typically 32 KBytes.; After compression, the zipped buffer may be just a few Kbytes.; The branch buffers cannot be much larger in case of Trees with several",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:1365,learn,learning,1365,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,2,['learn'],['learning']
Usability,"rom the container. void RemoveItem(TGFrame* item); Remove item from container. const TGFrame * GetNextSelected(void** current); Return the next selected item. If the ""current"" pointer is 0, the first; selected item will be returned. void ActivateItem(TGFrameElement* el); Activate item. void DeActivateItem(TGFrameElement* el); DeActivate item. TGPosition GetPagePosition() const; Returns page position. TGDimension GetPageDimension() const; Returns page dimension. void SetPagePosition(const TGPosition& pos); Set page position. void SetPagePosition(Int_t x, Int_t y); Set page position. void SetPageDimension(const TGDimension& dim); Set page dimension. void SetPageDimension(UInt_t w, UInt_t h); Set page dimension. void DoRedraw(); Redraw content of container in the viewport region. void DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); Draw a region of container in viewport.; x, y, w, h are position and dimension of area to be; redrawn in viewport coordinates. void ClearViewPort(); Clear view port and redraw full content. Bool_t HandleExpose(Event_t* event); Handle expose events. Do not use double buffer. Bool_t HandleButton(Event_t* event); Handle mouse button event in container. const TGPicture * GetObjPicture(TGFrame* f); Retrieve icons associated with class ""name"". Association is made; via the user's ~/.root.mimes file or via $ROOTSYS/etc/root.mimes. void SetDragPixmap(const TGPicture* pic); Set drag window pixmaps and hotpoint. Bool_t HandleDoubleClick(Event_t* event); Handle double click mouse event. Bool_t HandleMotion(Event_t* event); Handle mouse motion events. Bool_t HandleKey(Event_t* event); The key press event handler converts a key press to some line editor; action. TGFrame * FindFrameByName(const char* name); Find frame by name. void Search(Bool_t close = kTRUE); Invokes search dialog. Looks for item with the entered name. void OnAutoScroll(); Autoscroll while close to & beyond The Wall. void SearchPattern(); Search for entry which name begins with pattern.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGContainer.html:26652,Clear,ClearViewPort,26652,root/html534/TGContainer.html,https://root.cern,https://root.cern/root/html534/TGContainer.html,4,['Clear'],"['Clear', 'ClearViewPort']"
Usability,"rompt.Definition TRint.cxx:595; TRint::Terminatevirtual void Terminate(int status) overrideTerminate the application.Definition TRint.cxx:722; TRint::fPromptchar fPrompt[64]Definition TRint.h:37; TRint::TabCompletionHookInt_t TabCompletionHook(char *buf, int *pLoc, std::ostream &out) overrideForward tab completion request to our TTabCom::Hook().Definition TRint.cxx:827; TRint::GetPromptvirtual char * GetPrompt()Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"".Definition TRint.cxx:575; TRint::HandleExceptionvoid HandleException(Int_t sig) overrideHandle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException)...Definition TRint.cxx:704; TRint::~TRintvirtual ~TRint()Destructor.Definition TRint.cxx:316; TRint::PrintLogovirtual void PrintLogo(Bool_t lite=kFALSE)Print the ROOT logo on standard output.Definition TRint.cxx:512; TRint::ExecLogonvoid ExecLogon()Execute logon macro's.Definition TRint.cxx:341; TRint::ProcessRemoteLongptr_t ProcessRemote(const char *line, Int_t *error=nullptr) overrideProcess the content of a line starting with "".R"" (already stripped-off) The format is [user@]host[:di...Definition TRint.cxx:768; TRint::fBackslashContinueBool_t fBackslashContinueDefinition TRint.h:41; TRint::fDefaultPromptTString fDefaultPromptDefinition TRint.h:35; TRint::operator=TRint & operator=(const TRint &)=delete; TRint::fNonContinuePromptTString fNonContinuePromptDefinition TRint.h:36; TRint::fCaughtSignalInt_t fCaughtSignalDefinition TRint.h:39; TRint::fNcmdInt_t fNcmdDefinition TRint.h:34; TRint::TRintTRint(const TRint &)=delete; TRint::GetInputHandlerTFileHandler * GetInputHandler()Definition TRint.h:65; TRint::fInputHandlerTFileHandler * fInputHandlerDefinition TRint.h:40; TStringBasic string class.Definition TString.h:139; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235. corerintincTRint.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8h_source.html:6037,Guid,Guide,6037,doc/master/TRint_8h_source.html,https://root.cern,https://root.cern/doc/master/TRint_8h_source.html,1,['Guid'],['Guide']
Usability,"roof::AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); voidTProof::AddInput(TObject* obj); voidTProof::AddInputData(TObject* obj, Bool_t push = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tTProof::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:2132,Clear,ClearDataSetCache,2132,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,6,['Clear'],['ClearDataSetCache']
Usability,"roofBenchDataSet.cxx. ◆ DeclFileName(). static const char * TProofBenchDataSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file TProofBenchDataSet.h. ◆ Handle(). Int_t TProofBenchDataSet::Handle ; (; const char * ; dset, . TObject * ; type . ). protected . Physically remove the dataset 'dset', i.e. ; remove the dataset and the files it describes Return 0 on success, -1 on error ; Definition at line 111 of file TProofBenchDataSet.cxx. ◆ IsA(). TClass * TProofBenchDataSet::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 47 of file TProofBenchDataSet.h. ◆ IsProof(). Bool_t TProofBenchDataSet::IsProof ; (; TProof * ; p). inline . Definition at line 41 of file TProofBenchDataSet.h. ◆ ReleaseCache(). Int_t TProofBenchDataSet::ReleaseCache ; (; const char * ; dset). Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ; Definition at line 46 of file TProofBenchDataSet.cxx. ◆ RemoveFiles(). Int_t TProofBenchDataSet::RemoveFiles ; (; const char * ; dset). Physically remove the dataset 'dset', i.e. ; remove the dataset and the files it describes Return 0 on success, -1 on error ; Definition at line 63 of file TProofBenchDataSet.cxx. ◆ Streamer(). void TProofBenchDataSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TProofBenchDataSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file TProofBenchDataSet.h. Member Data Documentation. ◆ fProof. TProof* TProofBenchDataSet::fProof. protected . Definition at line 32 of file TProofBenchDataSet.h. proof/proofbench/inc/TProofBenchDataSet.h; proof/proofbench/src/TProofBenchDataSet.cxx. TProofBenchDataSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchDataSet.html:13647,Guid,Guide,13647,doc/master/classTProofBenchDataSet.html,https://root.cern,https://root.cern/doc/master/classTProofBenchDataSet.html,1,['Guid'],['Guide']
Usability,"root_fsolver).; Default algorithm is ""hybrids"" (without derivative). virtual ~GSLMultiRootFinder(); destructor. GSLMultiRootFinder(const GSLMultiRootFinder &); usually copying is non trivial, so we make this unaccessible. void SetType(EType type); set the type for an algorithm without derivatives. void SetType(EDerivType type); set the type of algorithm using derivatives. void SetType(const char* name); set the type using a string. int AddFunction(const ROOT::Math::IMultiGenFunction& func). add (set) a single function fi(x1,...xn) which is part of the system of; specifying the begin and end of the iterator.; If using a derivative type algorithm the function must implement the; ROOT::Math::IMultiGradFunction interface; Return the current number of function in the list and 0 if failed to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html:5873,Clear,Clear,5873,root/html534/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html,6,"['Clear', 'clear']","['Clear', 'clear']"
Usability,rootspi/rdoc/src/master/math/mathcore/src/MixMaxEngineImpl.h>; Constructor & Destructor Documentation. ◆ MixMaxEngineImpl(). template<int N> . ROOT::Math::MixMaxEngineImpl< N >::MixMaxEngineImpl ; (; uint64_t ; ). inline . Definition at line 54 of file MixMaxEngineImpl.h. ◆ ~MixMaxEngineImpl(). template<int N> . ROOT::Math::MixMaxEngineImpl< N >::~MixMaxEngineImpl ; (; ). inline . Definition at line 57 of file MixMaxEngineImpl.h. Member Function Documentation. ◆ Counter(). template<int N> . int ROOT::Math::MixMaxEngineImpl< N >::Counter ; (; ). inline . Definition at line 63 of file MixMaxEngineImpl.h. ◆ GetState(). template<int N> . void ROOT::Math::MixMaxEngineImpl< N >::GetState ; (; std::vector< uint64_t > & ; ). inline . Definition at line 62 of file MixMaxEngineImpl.h. ◆ IntRndm(). template<int N> . double ROOT::Math::MixMaxEngineImpl< N >::IntRndm ; (; ). inline . Definition at line 60 of file MixMaxEngineImpl.h. ◆ Iterate(). template<int N> . void ROOT::Math::MixMaxEngineImpl< N >::Iterate ; (; ). inline . Definition at line 65 of file MixMaxEngineImpl.h. ◆ Rndm(). template<int N> . double ROOT::Math::MixMaxEngineImpl< N >::Rndm ; (; ). inline . Definition at line 59 of file MixMaxEngineImpl.h. ◆ SetCounter(). template<int N> . void ROOT::Math::MixMaxEngineImpl< N >::SetCounter ; (; int ; ). inline . Definition at line 64 of file MixMaxEngineImpl.h. ◆ SetSeed(). template<int N> . void ROOT::Math::MixMaxEngineImpl< N >::SetSeed ; (; uint64_t ; ). inline . Definition at line 58 of file MixMaxEngineImpl.h. ◆ SetState(). template<int N> . void ROOT::Math::MixMaxEngineImpl< N >::SetState ; (; const std::vector< uint64_t > & ; ). inline . Definition at line 61 of file MixMaxEngineImpl.h. The documentation for this class was generated from the following files:; math/mathcore/inc/Math/MixMaxEngine.h; math/mathcore/src/MixMaxEngineImpl.h. ROOTMathMixMaxEngineImpl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl.html:2688,Guid,Guide,2688,doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngineImpl.html,1,['Guid'],['Guide']
Usability,"rop ; (; ); const. protected . Hand out our shared property, create on the fly and register in shared map if necessary. ; Definition at line 1280 of file RooRealVar.cxx. ◆ sharedPropList(). RooRealVar::SharedPropertiesMap * RooRealVar::sharedPropList ; (; ). staticprotected . List of properties shared among clones of a variable. ; Return a reference to a map of weak pointers to RooRealVarSharedProperties. ; Definition at line 60 of file RooRealVar.cxx. ◆ Streamer(). void RooRealVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class RooRealVar. ; Reimplemented from RooAbsRealLValue.; Definition at line 1219 of file RooRealVar.cxx. ◆ StreamerNVirtual(). void RooRealVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file RooRealVar.h. ◆ translate(). void RooRealVar::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 85 of file RooRealVar.cxx. ◆ valueResetCounter(). std::size_t RooRealVar::valueResetCounter ; (; ); const. inline . Returns how many times the value of this RooRealVar was reset. ; Definition at line 55 of file RooRealVar.h. ◆ writeToStream(). void RooRealVar::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to given stream. ; Reimplemented from RooAbsRealLValue.; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:91508,simpl,simple,91508,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['simpl'],['simple']
Usability,"roperty description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Update (FuncTempInfo_t *info);  Update the TFunctionTemplate to reflect the new info. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunctionTemplate.html:2365,Clear,Clear,2365,doc/master/classTFunctionTemplate.html,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html,1,['Clear'],['Clear']
Usability,"roperty |= kIsDestructor;; 8949 if (fd->isInlined()); 8950 property |= kIsInlined;; 8951 return property;; 8952}; 8953 ; 8954////////////////////////////////////////////////////////////////////////////////; 8955/// Return the name of this function template.; 8956 ; 8957void TCling::FuncTempInfo_Name(FuncTempInfo_t *ft_info, TString &output) const; 8958{; 8959 output.Clear();; 8960 if (!ft_info) return;; 8961 const clang::FunctionTemplateDecl *ft = (clang::FunctionTemplateDecl*)ft_info;; 8962 std::string buf;; 8963 GetFunctionName(ft->getTemplatedDecl(), buf);; 8964 output = buf;; 8965}; 8966 ; 8967////////////////////////////////////////////////////////////////////////////////; 8968/// Return the comments associates with this function template.; 8969 ; 8970void TCling::FuncTempInfo_Title(FuncTempInfo_t *ft_info, TString &output) const; 8971{; 8972 output.Clear();; 8973 if (!ft_info) return;; 8974 const clang::FunctionTemplateDecl *ft = (const clang::FunctionTemplateDecl*)ft_info;; 8975 ; 8976 // Iterate over the redeclarations, we can have multiple definitions in the; 8977 // redecl chain (came from merging of pcms).; 8978 if (const RedeclarableTemplateDecl *AnnotFD; 8979 = ROOT::TMetaUtils::GetAnnotatedRedeclarable((const RedeclarableTemplateDecl*)ft)) {; 8980 if (AnnotateAttr *A = AnnotFD->getAttr<AnnotateAttr>()) {; 8981 output = A->getAnnotation().str();; 8982 return;; 8983 }; 8984 }; 8985 if (!ft->isFromASTFile()) {; 8986 // Try to get the comment from the header file if present; 8987 // but not for decls from AST file, where rootcling would have; 8988 // created an annotation; 8989 output = ROOT::TMetaUtils::GetComment(*ft).str();; 8990 }; 8991}; 8992 ; 8993 ; 8994//______________________________________________________________________________; 8995//; 8996// MethodInfo interface; 8997//; 8998 ; 8999////////////////////////////////////////////////////////////////////////////////; 9000/// Interface to cling function; 9001 ; 9002void TCling::MethodInfo_Delete(Met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:348450,Clear,Clear,348450,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['Clear'],['Clear']
Usability,"roperty, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t wid, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t wid, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ;  ; void ClearAreaAux (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h);  ; void ClearWindow () override;  Clears the entire area of the current window. ;  ; void ClearWindow (Window_t wid) override;  Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; void CloseDisplay () override;  Closes connection to display server and destroys all windows. ;  ; void ClosePixmap () override;  Deletes current pixmap. ;  ; void CloseWindow () override;  Deletes current window. ;  ; void CocoaDrawOFF ();  ; void CocoaDrawON ();  ; void ConvertPrimarySelection (Window_t wid, Atom_t clipboard, Time_t when) override;  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dst, GContext_t gc, Int_t srcX, Int_t srcY, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY) override;  Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ;  ; void CopyAreaAux (Drawable_t src, Drawable_t dst, const GCValues_t &gc, Int_t srcX, Int_t srcY, UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:3090,Clear,ClearWindow,3090,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,6,['Clear'],"['ClearArea', 'ClearWindow', 'Clears']"
Usability,"ropertyNotify event on that window. id - the window whose property you want to change; property - specifies the property name; type - the type of the property; the X server does not; interpret the type but simply passes it back to; an application that might ask about the window; properties; data - the property data; len - the length of the specified data format. void DrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); Uses the components of the specified GC to draw a line between the; specified set of points (x1, y1) and (x2, y2). GC components in use: function, plane-mask, line-width, line-style,; cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin,; and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; (see also the GCValues_t structure). void ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); Paints a rectangular area in the specified window ""id"" according to; the specified dimensions with the window's background pixel or pixmap. id - specifies the window; x, y - coordinates, which are relative to the origin; w, h - the width and height which define the rectangle dimensions. Bool_t CheckEvent(Window_t id, EGEventType type, Event_t& ev); Check if there is for window ""id"" an event of type ""type"". If there; is it fills in the event structure and return true. If no such event; return false. void SendEvent(Window_t id, Event_t* ev); Specifies the event ""ev"" is to be sent to the window ""id"".; This function requires you to pass an event mask. void DispatchClientMessage(UInt_t messageID); Force processing of event, sent by SendEvent before. void WMDeleteNotify(Window_t id); Tells WM to send message when window is closed via WM. void SetKeyAutoRepeat(Bool_t on = kTRUE); Turns key auto repeat on (kTRUE) or off (kFALSE). void GrabKey(Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab = kTRUE); Establishes a passiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:50381,Clear,ClearArea,50381,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,3,['Clear'],['ClearArea']
Usability,"ropertyNotify event on that window. id - the window whose property you want to change; property - specifies the property name; type - the type of the property; the X server does not; interpret the type but simply passes it back to; an application that might ask about the window; properties; data - the property data; len - the length of the specified data format. void DrawLine(Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2); Uses the components of the specified GC to draw a line between the; specified set of points (x1, y1) and (x2, y2). GC components in use: function, plane-mask, line-width, line-style,; cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin,; and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; (see also the GCValues_t structure). void ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); Paints a rectangular area in the specified window ""id"" according to; the specified dimensions with the window's background pixel or pixmap. id - specifies the window; x, y - coordinates, which are relative to the origin; w, h - the width and height which define the rectangle dimensions. Bool_t CheckEvent(Window_t id, EGEventType type, Event_t& ev); Check if there is for window ""id"" an event of type ""type"". If there; is it fills in the event structure and return true. If no such event; return false. void SendEvent(Window_t id, Event_t* ev); Specifies the event ""ev"" is to be sent to the window ""id"".; This function requires you to pass an event mask. void WMDeleteNotify(Window_t id); Tells WM to send message when window is closed via WM. void SetKeyAutoRepeat(Bool_t on = kTRUE); Turns key auto repeat on (kTRUE) or off (kFALSE). void GrabKey(Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab = kTRUE); Establishes a passive grab on the keyboard. In the future, the; keyboard is actively grabbed, the last-keyboard-grab ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:47439,Clear,ClearArea,47439,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,3,['Clear'],['ClearArea']
Usability,"ror(""CloneTTree"", ""TTree has not been cloned\n"");; 3283 delete newtree;; 3284 newtree = nullptr;; 3285 return nullptr;; 3286 }; 3287 } else {; 3288 newtree->CopyEntries( this, nentries, option, false );; 3289 }; 3290 }; 3291 ; 3292 return newtree;; 3293}; 3294 ; 3295////////////////////////////////////////////////////////////////////////////////; 3296/// Set branch addresses of passed tree equal to ours.; 3297/// If undo is true, reset the branch addresses instead of copying them.; 3298/// This ensures 'separation' of a cloned tree from its original.; 3299 ; 3300void TTree::CopyAddresses(TTree* tree, bool undo); 3301{; 3302 // Copy branch addresses starting from branches.; 3303 TObjArray* branches = GetListOfBranches();; 3304 Int_t nbranches = branches->GetEntriesFast();; 3305 for (Int_t i = 0; i < nbranches; ++i) {; 3306 TBranch* branch = (TBranch*) branches->UncheckedAt(i);; 3307 if (branch->TestBit(kDoNotProcess)) {; 3308 continue;; 3309 }; 3310 if (undo) {; 3311 TBranch* br = tree->GetBranch(branch->GetName());; 3312 tree->ResetBranchAddress(br);; 3313 } else {; 3314 char* addr = branch->GetAddress();; 3315 if (!addr) {; 3316 if (branch->IsA() == TBranch::Class()) {; 3317 // If the branch was created using a leaflist, the branch itself may not have; 3318 // an address but the leaf might already.; 3319 TLeaf *firstleaf = (TLeaf*)branch->GetListOfLeaves()->At(0);; 3320 if (!firstleaf || firstleaf->GetValuePointer()) {; 3321 // Either there is no leaf (and thus no point in copying the address); 3322 // or the leaf has an address but we can not copy it via the branche; 3323 // this will be copied via the next loop (over the leaf).; 3324 continue;; 3325 }; 3326 }; 3327 // Note: This may cause an object to be allocated.; 3328 branch->SetAddress(nullptr);; 3329 addr = branch->GetAddress();; 3330 }; 3331 TBranch* br = tree->GetBranch(branch->GetFullName());; 3332 if (br) {; 3333 if (br->GetMakeClass() != branch->GetMakeClass()); 3334 br->SetMakeClass(branch->GetMakeClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:131015,undo,undo,131015,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['undo'],['undo']
Usability,"ros ;  CTEveFrameBoxDescription of a 2D or 3D frame that can be used to visually group a set of objects ;  CTEveFrameBoxGLA class encapsulating GL rendering of TEveFrameBox via a static member function ;  CTEveGDoubleValuatorComposite GUI element for selection of range (label, two number-entries and double-slider) ;  CTEveGedEditorSpecialization of TGedEditor for proper update propagation to TEveManager ;  CTEveGedNameFrameSpecialization of TGedNameFrame used in EVE ;  CTEveGedNameTextButtonSpecialization of TGTextButton for EVE name frame ;  CTEveGeoManagerHolderException safe wrapper for setting gGeoManager ;  CTEveGeoNodeWrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement ;  CTEveGeoNodeEditorEditor for TEveGeoNode class ;  ►CTEveGeoPolyShapeDescription of TEveGeoPolyShape ;  CEdge_t;  CTEveGeoShapeWrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections) ;  CTEveGeoShapeExtractGlobally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts ;  CTEveGeoShapeProjectedA 3D projected TEveGeoShape ;  CTEveGeoTopNodeA wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement ;  CTEveGeoTopNodeEditorEditor for TEveGeoTopNode class ;  CTEveGListTreeEditorFrameComposite GUI frame for parallel display of a TGListTree and TEveGedEditor ;  CTEveGridStepperProvide discrete position coordinates for placement of objects on regular grids ;  CTEveGridStepperEditorEditor for TEveGridStepper class ;  CTEveGridStepperSubEditorSub-editor for TEveGridStepper class ;  CTEveGTriVecValuatorComposite GUI element for setting three numerical values (label, three number-entries) ;  CTEveGValuatorComposite GUI element for single value selection (supports label, number-entry and slider) ;  CTEveGValuatorBaseBase class for composite GUI eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:125631,simpl,simplified,125631,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,6,['simpl'],['simplified']
Usability,"rotated system. Example : the identity matrix (no rotation) is composed by theta1=90, phi1=0, theta2=90, phi2=90, theta3=0, phi3=0 SetBit(kGeoRotation); ; Definition at line 920 of file TGeoMatrix.cxx. ◆ ~TGeoRotation(). TGeoRotation::~TGeoRotation ; (; ). inlineoverride . Definition at line 183 of file TGeoMatrix.h. Member Function Documentation. ◆ CheckMatrix(). void TGeoRotation::CheckMatrix ; (; ). protected . performes an orthogonality check and finds if the matrix is a reflection Warning(""CheckMatrix"", ""orthogonality check not performed yet""); ; Definition at line 1379 of file TGeoMatrix.cxx. ◆ Class(). static TClass * TGeoRotation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoRotation::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoRotation::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 242 of file TGeoMatrix.h. ◆ Clear(). void TGeoRotation::Clear ; (; Option_t * ; option = """"). overridevirtual . reset data members ; Reimplemented from TObject.; Definition at line 1030 of file TGeoMatrix.cxx. ◆ DeclFileName(). static const char * TGeoRotation::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 242 of file TGeoMatrix.h. ◆ Determinant(). Double_t TGeoRotation::Determinant ; (; ); const. computes determinant of the rotation matrix ; Definition at line 1364 of file TGeoMatrix.cxx. ◆ FastRotZ(). void TGeoRotation::FastRotZ ; (; const Double_t * ; sincos). Perform a rotation about Z having the sine/cosine of the rotation angle. ; Definition at line 1039 of file TGeoMatrix.cxx. ◆ GetAngles() [1/2]. void TGeoRotation::GetAngles ; (; Double_t & ; phi, . Double_t & ; theta, . Double_t & ; psi . ); const. Retrieve Euler angles. ; Definition at line 1340 of file TGeoMatrix.cxx. ◆ GetAngles() [2/2]. void TGeoRotation::GetAngles ; (; Double_t & ; the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRotation.html:20745,Clear,Clear,20745,doc/master/classTGeoRotation.html,https://root.cern,https://root.cern/doc/master/classTGeoRotation.html,1,['Clear'],['Clear']
Usability,rotation matrices. ; Definition at line 47 of file TGeometry.h. ◆ fGeomLevel. Int_t TGeometry::fGeomLevel. private . Definition at line 52 of file TGeometry.h. ◆ fIsReflection. Bool_t TGeometry::fIsReflection[kMAXLEVELS]. private . Definition at line 58 of file TGeometry.h. ◆ fMaterialPointer. TMaterial** TGeometry::fMaterialPointer. private . Pointer to current node. ; Definition at line 48 of file TGeometry.h. ◆ fMaterials. THashList* TGeometry::fMaterials. private . Definition at line 42 of file TGeometry.h. ◆ fMatrices. THashList* TGeometry::fMatrices. private . Definition at line 43 of file TGeometry.h. ◆ fMatrix. TRotMatrix* TGeometry::fMatrix. private . Definition at line 46 of file TGeometry.h. ◆ fMatrixPointer. TRotMatrix** TGeometry::fMatrixPointer. private . Pointers to materials. ; Definition at line 49 of file TGeometry.h. ◆ fNodes. TList* TGeometry::fNodes. private . Definition at line 45 of file TGeometry.h. ◆ fRotMatrix. Double_t TGeometry::fRotMatrix[kMAXLEVELS][kMatrixSize]. private . Definition at line 57 of file TGeometry.h. ◆ fShapePointer. TShape** TGeometry::fShapePointer. private . Pointers to rotation matrices. ; Definition at line 50 of file TGeometry.h. ◆ fShapes. THashList* TGeometry::fShapes. private . Definition at line 44 of file TGeometry.h. ◆ fTranslation. Double_t TGeometry::fTranslation[kMAXLEVELS][kVectorSize]. private . Definition at line 56 of file TGeometry.h. ◆ fX. Double_t TGeometry::fX. private . Definition at line 53 of file TGeometry.h. ◆ fY. Double_t TGeometry::fY. private . Definition at line 54 of file TGeometry.h. ◆ fZ. Double_t TGeometry::fZ. private . The global translation of the current node. ; Definition at line 55 of file TGeometry.h. Libraries for TGeometry:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TGeometry.h; graf3d/g3d/src/TGeometry.cxx. TGeometry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeometry.html:31422,Guid,Guide,31422,doc/master/classTGeometry.html,https://root.cern,https://root.cern/doc/master/classTGeometry.html,1,['Guid'],['Guide']
Usability,"rotected . Set pack-wise length of frame f. ; Definition at line 87 of file TGPack.cxx. ◆ SetFramePosition(). void TGPack::SetFramePosition ; (; TGFrame * ; f, . Int_t ; pos . ). protected . Set pack-wise position of frame f. ; Definition at line 98 of file TGPack.cxx. ◆ SetUseSplitters(). void TGPack::SetUseSplitters ; (; Bool_t ; x). inline . Definition at line 107 of file TGPack.h. ◆ SetVertical(). void TGPack::SetVertical ; (; Bool_t ; x). Sets the vertical flag and reformats the back to new stacking direction. ; Definition at line 569 of file TGPack.cxx. ◆ ShowFrame(). void TGPack::ShowFrame ; (; TGFrame * ; f). overridevirtual . Show sub frame. ; Virtual from TGCompositeFrame. ; Reimplemented from TGCompositeFrame.; Definition at line 350 of file TGPack.cxx. ◆ Streamer(). void TGPack::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGPack::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 109 of file TGPack.h. Member Data Documentation. ◆ fDragOverflow. Int_t TGPack::fDragOverflow. protected . ! ; Definition at line 50 of file TGPack.h. ◆ fNVisible. Int_t TGPack::fNVisible. protected . number of visible frames ; Definition at line 53 of file TGPack.h. ◆ fSplitterLen. Int_t TGPack::fSplitterLen. protected . Definition at line 48 of file TGPack.h. ◆ fUseSplitters. Bool_t TGPack::fUseSplitters. protected . Definition at line 47 of file TGPack.h. ◆ fVertical. Bool_t TGPack::fVertical. protected . Definition at line 46 of file TGPack.h. ◆ fWeightSum. Float_t TGPack::fWeightSum. protected . total sum of sub frame weights ; Definition at line 52 of file TGPack.h. Libraries for TGPack:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGPack.h; gui/gui/src/TGPack.cxx. TGPack. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPack.html:41346,Guid,Guide,41346,doc/master/classTGPack.html,https://root.cern,https://root.cern/doc/master/classTGPack.html,1,['Guid'],['Guide']
Usability,"rotected Member Functions |; Protected Attributes |; List of all members ; TGeoRotation Class ReferenceThe Geometry Package » Geometry classes. ; Class describing rotations. ; A rotation is a 3*3 array Column vectors has to be orthogonal unit vectors. ; Definition at line 168 of file TGeoMatrix.h. Public Member Functions;  TGeoRotation ();  Default constructor. ;  ;  TGeoRotation (const char *name);  Named rotation constructor. ;  ;  TGeoRotation (const char *name, Double_t phi, Double_t theta, Double_t psi);  Default rotation constructor with Euler angles. ;  ;  TGeoRotation (const char *name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3);  Rotation constructor a la GEANT3. ;  ;  TGeoRotation (const TGeoMatrix &other);  Copy ctor. ;  ;  TGeoRotation (const TGeoRotation &other);  Copy ctor. ;  ;  ~TGeoRotation () override;  ; void Clear (Option_t *option="""") override;  reset data members ;  ; Double_t Determinant () const;  computes determinant of the rotation matrix ;  ; void FastRotZ (const Double_t *sincos);  Perform a rotation about Z having the sine/cosine of the rotation angle. ;  ; void GetAngles (Double_t &phi, Double_t &theta, Double_t &psi) const;  Retrieve Euler angles. ;  ; void GetAngles (Double_t &theta1, Double_t &phi1, Double_t &theta2, Double_t &phi2, Double_t &theta3, Double_t &phi3) const;  Retrieve rotation angles. ;  ; void GetInverse (Double_t *invmat) const;  Get the inverse rotation matrix (which is simply the transpose) ;  ; Double_t GetPhiRotation (Bool_t fixX=kFALSE) const;  Returns rotation angle about Z axis in degrees. ;  ; const Double_t * GetRotationMatrix () const override;  ; const Double_t * GetScale () const override;  ; const Double_t * GetTranslation () const override;  ; TGeoHMatrix Inverse () const override;  Return a temporary inverse of this. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  Perform orthogonality test for rotation. ;  ; void LocalToMaster (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRotation.html:1097,Clear,Clear,1097,doc/master/classTGeoRotation.html,https://root.cern,https://root.cern/doc/master/classTGeoRotation.html,1,['Clear'],['Clear']
Usability,"rotectedvirtual . This is virtual method from base-class TEveProjected. ; Reimplemented from TEveProjected.; Definition at line 140 of file TEveBox.cxx. ◆ SetProjection(). void TEveBoxProjected::SetProjection ; (; TEveProjectionManager * ; mng, . TEveProjectable * ; model . ). overridevirtual . This is virtual method from base-class TEveProjected. ; Reimplemented from TEveProjected.; Definition at line 148 of file TEveBox.cxx. ◆ Streamer(). void TEveBoxProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement. ◆ StreamerNVirtual(). void TEveBoxProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file TEveBox.h. ◆ UpdateProjection(). void TEveBoxProjected::UpdateProjection ; (; ). overridevirtual . Re-project the box. ; Projects all points and finds 2D convex-hull.; The only issue is with making sure that initial conditions for hull-search are reasonable – that is, there are no overlaps with the first point. ; Implements TEveProjected.; Definition at line 161 of file TEveBox.cxx. Friends And Related Symbol Documentation. ◆ TEveBoxProjectedGL. friend class TEveBoxProjectedGL. friend . Definition at line 59 of file TEveBox.h. Member Data Documentation. ◆ fBreakIdx. Int_t TEveBoxProjected::fBreakIdx. protected . Definition at line 67 of file TEveBox.h. ◆ fDebugPoints. vVector2_t TEveBoxProjected::fDebugPoints. protected . Definition at line 68 of file TEveBox.h. ◆ fgDebugCornerPoints. Bool_t TEveBoxProjected::fgDebugCornerPoints = kFALSE. staticprotected . Definition at line 72 of file TEveBox.h. ◆ fPoints. vVector2_t TEveBoxProjected::fPoints. protected . Definition at line 66 of file TEveBox.h. Libraries for TEveBoxProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveBox.h; graf3d/eve/src/TEveBox.cxx. TEveBoxProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxProjected.html:43439,Guid,Guide,43439,doc/master/classTEveBoxProjected.html,https://root.cern,https://root.cern/doc/master/classTEveBoxProjected.html,1,['Guid'],['Guide']
Usability,"rotoClass (TProtoClass *pc);  ; virtual ~TProtoClass ();  Destructor. ;  ; void Delete (Option_t *opt="""") override;  Delete the containers that are usually owned by their TClass. ;  ; Bool_t FillTClass (TClass *pcl);  Move data from this TProtoClass into cl. ;  ; TList * GetBaseList ();  ; std::vector< TDataMember * > & GetData ();  ; std::vector< TString > & GetDepClasses ();  ; TList * GetEnumList ();  ; const TList * GetListOfEnums ();  ; std::vector< TProtoRealData > & GetPRDList ();  ; int GetSize ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProtoClass.html:1553,Clear,Clear,1553,doc/master/classTProtoClass.html,https://root.cern,https://root.cern/doc/master/classTProtoClass.html,1,['Clear'],['Clear']
Usability,"rough the THnSparse and draw a THnSparse using TParallelCoord. ;  ;  h1analysis.C;   Example of analysis class for the H1 data. ;  ;  h1analysis.h;  ;  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ;  h1analysisProxy.h;  ;  h1analysisProxyCut.C;  ;  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ;  h1analysisTreeReader.h;  ;  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ;  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ;  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ;  hsimpleReader.C;   TTreeReader simplest example. ;  ;  htest.C;   Save histograms in Tree branches ;  ;  hvector.C;   Write and read STL vectors in a tree. ;  ;  JetEvent.cxx;  ;  JetEvent.h;  ;  jets.C;  Usage of a Tree using the JetEvent class. ;  ;  ntuple1.C;   Simple tree analysis. ;  ;  parallelcoord.C;   Script illustrating the use of the TParallelCoord class ;  ;  parallelcoordtrans.C;   Use of transparency with ||-Coord. ;  ;  printSizes.C;   This macro can be used to get aggregate information on the size take on disk or in memory by the various branches in a TTree. ;  ;  run_h1analysis.C;   Macro driving the analysis can specify file name and type ;  ;  spider.C;   TSpider example. ;  ;  staff.C;   Create a plot of the data in cernstaff.root To create cernstaff.root, execute tutorial $ROOTSYS/tutorials/tree/cernbuild.C ;  ;  tcl.C;   How to write a TClonesArray to a TTree ;  ;  temperature.C;  This tutorial illustrates how to use the highlight mode with trees. ;  ;  tree.C;   Display the Tree data structures ;  ;  tree0.C;   Simple Event class example ;  ;  tree1.C;   This example is a variant of hsimple.C but using a TTree instead of a TNtuple. ;  ;  tree2.C;   This example illustrates how to make a Tree from variables or arrays in a C struct ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html:2253,Simpl,Simple,2253,doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,https://root.cern,https://root.cern/doc/master/dir_d8553f50e1e7f7818badd4fd8ca54378.html,1,['Simpl'],['Simple']
Usability,"round) of the final node (basket) in which the given events ends up. ;  ; void CheckEventWithPrunedTree (const TMVA::Event *) const;  pass a single validation event through a pruned decision tree on the way down the tree, fill in all the ""intermediate"" information that would normally be there from training. ;  ; virtual const char * ClassName () const;  ; UInt_t CleanTree (DecisionTreeNode *node=nullptr);  remove those last splits that result in two leaf nodes that are both of the type (i.e. ;  ; void ClearTree ();  clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree ;  ; UInt_t CountLeafNodes (TMVA::Node *n=nullptr);  return the number of terminal nodes in the sub-tree below Node n ;  ; virtual DecisionTreeNode * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; void DescendTree (Node *n=nullptr);  descend a tree to find all its leaf nodes ;  ; Bool_t DoRegression () const;  ; void FillEvent (const TMVA::Event &event, TMVA::DecisionTreeNode *node);  fill the existing the decision tree structure by filling event in from the top node and see where they happen to end up ;  ; void FillTree (const EventList &eventSample);  fill the existing the decision tree structure by filling event in from the top node and see where they happen to end up ;  ; Types::EAnalysisType GetAnalysisType (void);  ; TMVA::DecisionTreeNode * GetEventNode (const TMVA::Event &e) const;  get the pointer to the leaf node where a particular event ends up in... (used in gradient boosting) ;  ; std::vector< Double_t > GetFisherCoefficients (const EventConstList &eventSample, UInt_t nFisherVars, UInt_t *mapVarInFisher);  calculate the fisher coefficients for the event sample and the variables used ;  ; Int_t GetNNodesBeforePruning ();  ; Node * GetNode (ULong_t sequence, UInt_t depth);  retrieve node from the tree. ;  ; Double_t GetNodePurityLimit () const;  ; Double_t GetPruneStrength () const;  ; void GetRandomisedVariables (Bool_t *useVariable,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:4024,Clear,ClearTree,4024,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,2,"['Clear', 'clear']","['ClearTree', 'clear']"
Usability,"roupLightHeight modes group; Int_tfLevels# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfLine; Int_tfMaximumXScreenResolution!buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading accordi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:11961,simpl,simple,11961,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['simpl'],['simple']
Usability,"rovided to client; 261 int fJsonComp{0}; ///<! default JSON compression; 262 std::string fActiveItemName; ///<! name of item which should be activated in hierarchy; 263 ; 264 RGeomConfig fCfg; ///<! configuration parameter editable from GUI; 265 ; 266 TVirtualMutex *fMutex{nullptr}; ///<! external mutex used to protect all data; 267 ; 268 std::vector<std::pair<const void *, RGeomSignalFunc_t>> fSignals; ///<! registered signals; 269 ; 270 void PackMatrix(std::vector<float> &arr, TGeoMatrix *matr);; 271 ; 272 int MarkVisible(bool on_screen = false);; 273 ; 274 void ProduceIdShifts();; 275 ; 276 int ScanNodes(bool only_visible, int maxlvl, RGeomScanFunc_t func);; 277 ; 278 void ResetRndrInfos();; 279 ; 280 ShapeDescr &FindShapeDescr(TGeoShape *shape);; 281 ; 282 ShapeDescr &MakeShapeDescr(TGeoShape *shape);; 283 ; 284 int GetUsedNSegments(int min = 20);; 285 ; 286 int CountShapeFaces(TGeoShape *shape);; 287 ; 288 void CopyMaterialProperties(TGeoVolume *vol, RGeomNode &node);; 289 ; 290 void CollectNodes(RGeomDrawing &drawing, bool all_nodes = false);; 291 ; 292 std::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes = false);; 293 ; 294 void ClearDescription();; 295 ; 296 void BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume);; 297 ; 298 TGeoVolume *GetVolume(int nodeid);; 299 ; 300 int IsPhysNodeVisible(const std::vector<int> &stack);; 301 ; 302public:; 303 RGeomDescription() = default;; 304 ; 305 void AddSignalHandler(const void *handler, RGeomSignalFunc_t func);; 306 ; 307 void RemoveSignalHandler(const void *handler);; 308 ; 309 void IssueSignal(const void *handler, const std::string &kind);; 310 ; 311 /** Set mutex, it must be recursive one */; 312 void SetMutex(TVirtualMutex *mutex) { fMutex = mutex; }; 313 /** Return currently used mutex */; 314 TVirtualMutex *GetMutex() const { return fMutex; }; 315 ; 316 /** Set maximal number of nodes which should be selected for drawing */; 317 void SetMaxVisNodes(int cnt) { TLockGuard lock(fMutex); fCfg.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:10768,Clear,ClearDescription,10768,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,2,['Clear'],['ClearDescription']
Usability,"rovides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ;  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ;  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ;  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ;  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ;  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ;  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ;  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ;  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ;  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ;  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ;  TMVARegressionApplication.C;   This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  . tutorialstmva. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html:6282,simpl,simple,6282,doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,https://root.cern,https://root.cern/doc/master/dir_afb41fc0ce910d0ed999b271277cf431.html,4,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"rowsable Class Reference. ; TBrowser helper for THnBase. ; Definition at line 300 of file THnBase.h. Public Member Functions;  THnBaseBrowsable (THnBase *hist, Int_t axis);  Construct a THnBaseBrowsable. ;  ;  ~THnBaseBrowsable () override;  Destruct a THnBaseBrowsable. ;  ; void Browse (TBrowser *b) override;  Browse an axis of a THnBase, i.e. draw its projection. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:1257,Clear,Clear,1257,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,1,['Clear'],['Clear']
Usability,"rowsable objects (like containers or lists of other objects). ;  ; const THashList * ParticleList () const;  ; void Print (Option_t *opt="""") const override;  Print contents of PDG database. ;  ; virtual void ReadPDGTable (const char *filename="""");  read list of particles from a file if the particle list does not exist, it is created, otherwise particles are added to the existing list See $ROOTSYS/etc/pdg_table.txt to see the file format ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t WritePDGTable (const char *filename);  write contents of the particle DB into a file ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatabasePDG.html:3482,Clear,Clear,3482,doc/master/classTDatabasePDG.html,https://root.cern,https://root.cern/doc/master/classTDatabasePDG.html,1,['Clear'],['Clear']
Usability,"rowsable::RElementPath_t & GetPath () const;  ; virtual void ResetConn ();  ; virtual std::string SendWidgetContent ();  ; std::string SendWidgetTitle ();  Returns string which can be send to browser client to set/change title of the widget tab. ;  ; virtual void SetActive ();  ; void SetPath (const Browsable::RElementPath_t &path);  . Public Attributes; std::string fCatchedKind;  ; RWebWindow * fWindow {nullptr};  . Inheritance diagram for ROOT::RBrowserCatchedWidget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RBrowserCatchedWidget(). ROOT::RBrowserCatchedWidget::RBrowserCatchedWidget ; (; const std::string & ; name, . RWebWindow * ; win, . const std::string & ; kind . ). inline . Definition at line 249 of file RBrowser.cxx. Member Function Documentation. ◆ GetKind(). std::string ROOT::RBrowserCatchedWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 243 of file RBrowser.cxx. ◆ GetTitle(). std::string ROOT::RBrowserCatchedWidget::GetTitle ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 247 of file RBrowser.cxx. ◆ GetUrl(). std::string ROOT::RBrowserCatchedWidget::GetUrl ; (; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 245 of file RBrowser.cxx. ◆ Show(). void ROOT::RBrowserCatchedWidget::Show ; (; const std::string & ; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 241 of file RBrowser.cxx. Member Data Documentation. ◆ fCatchedKind. std::string ROOT::RBrowserCatchedWidget::fCatchedKind. Definition at line 239 of file RBrowser.cxx. ◆ fWindow. RWebWindow* ROOT::RBrowserCatchedWidget::fWindow {nullptr}. Definition at line 238 of file RBrowser.cxx. gui/browserv7/src/RBrowser.cxx. ROOTRBrowserCatchedWidget. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserCatchedWidget.html:2877,Guid,Guide,2877,doc/v632/classROOT_1_1RBrowserCatchedWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserCatchedWidget.html,1,['Guid'],['Guide']
Usability,"rowse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1S.html:3644,Clear,ClearUnderflowAndOverflow,3644,doc/master/classTH1S.html,https://root.cern,https://root.cern/doc/master/classTH1S.html,7,['Clear'],['ClearUnderflowAndOverflow']
Usability,"rowse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Copy (TObject &hnew) const override;  Copy this histogram structure to newth1. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:26409,Clear,ClearUnderflowAndOverflow,26409,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['Clear'],['ClearUnderflowAndOverflow']
Usability,"rowser; 147/// firefox - use Mozilla Firefox web browser; 148/// edge - use Microsoft Edge web browser (Windows only); 149/// native - either chrome/edge or firefox, only these browsers support batch (headless) mode; 150/// default - default system web-browser, no batch mode; 151/// cef - Chromium Embeded Framework, local display, local communication; 152/// qt5 - Qt5 QWebEngine, local display, local communication; 153/// qt6 - Qt6 QWebEngineCore, local display, local communication; 154/// local - either cef or qt5 or qt6; 155/// off - disable web display; 156/// on - first try ""local"", then ""native"", then ""default"" (default option); 157/// `<prog>` - any program name which will be started to open widget URL, like ""/usr/bin/opera""; 158 ; 159RWebDisplayArgs &RWebDisplayArgs::SetBrowserKind(const std::string &_kind); 160{; 161 std::string kind = _kind;; 162 ; 163 auto pos = kind.find(""?"");; 164 if (pos == 0) {; 165 SetUrlOpt(kind.substr(1));; 166 kind.clear();; 167 } else if (pos != std::string::npos) {; 168 SetUrlOpt(kind.substr(pos+1));; 169 kind.resize(pos);; 170 }; 171 ; 172 pos = kind.find(""size:"");; 173 if (pos != std::string::npos) {; 174 auto epos = kind.find_first_of("" ;"", pos+5);; 175 if (epos == std::string::npos) epos = kind.length();; 176 SetSizeAsStr(kind.substr(pos+5, epos-pos-5));; 177 kind.erase(pos, epos-pos);; 178 }; 179 ; 180 pos = kind.find(""pos:"");; 181 if (pos != std::string::npos) {; 182 auto epos = kind.find_first_of("" ;"", pos+4);; 183 if (epos == std::string::npos) epos = kind.length();; 184 SetPosAsStr(kind.substr(pos+4, epos-pos-4));; 185 kind.erase(pos, epos-pos);; 186 }; 187 ; 188 pos = kind.rfind(""headless"");; 189 if ((pos != std::string::npos) && (pos == kind.length() - 8)) {; 190 SetHeadless(true);; 191 kind.resize(pos);; 192 if ((pos > 0) && (kind[pos-1] == ';')) kind.resize(pos-1);; 193 }; 194 ; 195 // very special handling of qt5/qt6 which can specify pointer as a string; 196 if ((kind.find(""qt5:"") == 0) || (kind.find(""qt6:"") == 0)) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebDisplayArgs_8cxx_source.html:5764,clear,clear,5764,doc/master/RWebDisplayArgs_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RWebDisplayArgs_8cxx_source.html,2,['clear'],['clear']
Usability,"rowserRequest.hxx:35; ROOT::RBrowserRequest::hiddenbool hiddenshow hidden filesDefinition RBrowserRequest.hxx:33; ROOT::RBrowserRequest::numberint numbernumber of childs to request, 0 - all childsDefinition RBrowserRequest.hxx:30; ROOT::RBrowserRequest::reversebool reversereverse item orderDefinition RBrowserRequest.hxx:32; ROOT::RBrowserRequest::sortstd::string sortkind of sortingDefinition RBrowserRequest.hxx:31; ROOT::RBrowserRequest::pathstd::vector< std::string > pathrequested pathDefinition RBrowserRequest.hxx:28; ROOT::RBrowserRequest::reloadbool reloadforce items reloadDefinition RBrowserRequest.hxx:34; ROOT::RBrowserRequest::firstint firstfirst child to requestDefinition RBrowserRequest.hxx:29; ROOT::RBrowserRequest::regexstd::string regexapplied regexDefinition RBrowserRequest.hxx:36; TBufferJSON::ToJSONstatic TString ToJSON(const T *obj, Int_t compact=0, const char *member_name=nullptr)Definition TBufferJSON.h:75; TBufferJSON::kSkipTypeInfo@ kSkipTypeInfodo not store typenames in JSONDefinition TBufferJSON.h:48; TBufferJSON::kNoSpaces@ kNoSpacesno new lines plus remove all spaces around "","" and "":"" symbolsDefinition TBufferJSON.h:39; TEnv::SetValuevirtual void SetValue(const char *name, const char *value, EEnvLevel level=kEnvChange, const char *type=nullptr)Set the value of a resource or create a new resource.Definition TEnv.cxx:736; TObjectMother of all ROOT objects.Definition TObject.h:41; TString::Dataconst char * Data() constDefinition TString.h:376; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::BrowserLogROOT::Experimental::RLogChannel & BrowserLog()Log channel for Browser diagnostics.Definition RBrowserData.cxx:35. guibrowserv7srcRBrowserData.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:22006,Guid,Guide,22006,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,1,['Guid'],['Guide']
Usability,"roximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Log likelihood function with Gaussian approximation. ; Definition at line 250 of file LDA.cxx. ◆ GetProb(). Float_t TMVA::LDA::GetProb ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). Signal probability with Gaussian approximation. ; Definition at line 237 of file LDA.cxx. ◆ Initialize(). void TMVA::LDA::Initialize ; (; const LDAEvents & ; inputSignal, . const LDAEvents & ; inputBackground . ). Create LDA matrix using local events found by knn method. ; Definition at line 66 of file LDA.cxx. ◆ Log(). MsgLogger & TMVA::LDA::Log ; (; ); const. inlineprivate . Definition at line 65 of file LDA.h. Member Data Documentation. ◆ fDebug. Bool_t TMVA::LDA::fDebug. private . documentation! ; Definition at line 76 of file LDA.h. ◆ fEventFraction. std::map<Int_t, Float_t> TMVA::LDA::fEventFraction. private . documentation! ; Definition at line 75 of file LDA.h. ◆ fLogger. MsgLogger* TMVA::LDA::fLogger. mutableprivate . ! message logging service ; Definition at line 78 of file LDA.h. ◆ fMu. std::map<Int_t, std::vector<Float_t> > TMVA::LDA::fMu. private . documentation! ; Definition at line 72 of file LDA.h. ◆ fNumParams. UInt_t TMVA::LDA::fNumParams. private . documentation! ; Definition at line 71 of file LDA.h. ◆ fSigma. TMatrixF* TMVA::LDA::fSigma. private . documentation! ; Definition at line 73 of file LDA.h. ◆ fSigmaInverse. TMatrixF* TMVA::LDA::fSigmaInverse. private . documentation! ; Definition at line 74 of file LDA.h. ◆ fTolerence. Float_t TMVA::LDA::fTolerence. private . documentation! ; Definition at line 70 of file LDA.h. Libraries for TMVA::LDA:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/LDA.h; tmva/tmva/src/LDA.cxx. TMVALDA. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LDA.html:3774,Guid,Guide,3774,doc/master/classTMVA_1_1LDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html,1,['Guid'],['Guide']
Usability,"roxy*TEmulatedCollectionProxy::InitializeEx(Bool_t silent); voidTEmulatedCollectionProxy::ReadItems(int nElements, TBuffer& b); voidReadMap(UInt_t nElements, TBuffer& b); voidTEmulatedCollectionProxy::Shrink(UInt_t nCurr, UInt_t left, Bool_t force); voidTEmulatedCollectionProxy::WriteItems(int nElements, TBuffer& b); voidWriteMap(UInt_t nElements, TBuffer& b). private:. TEmulatedMapProxy&operator=(const TEmulatedMapProxy& rhs). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; kNeedDelete; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; void*TGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCopyIterator; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteIterator; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; void*TGenCollectionProxy::fFunctionNextIterator; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEmulatedMapProxy.html:4723,clear,clear,4723,root/html534/TEmulatedMapProxy.html,https://root.cern,https://root.cern/root/html534/TEmulatedMapProxy.html,1,['clear'],['clear']
Usability,"roxyList;  Stack of recursive proxies. ;  ; TObjArray * fReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) ;  ; Sizing_t fResize;  Container accessors: resize container. ;  ; Method fSize;  Container accessors: size of container. ;  ; Staged_t fStaged;  Optimization: Keep staged array once they were created. ;  ; int fSTL_type;  STL container type. ;  ; Info_t fTypeinfo;  Type information. ;  ; Value * fVal;  Descriptor of the Value_type. ;  ; int fValDiff;  Offset between two consecutive value_types (memory layout). ;  ; int fValOffset;  Offset from key to value (in maps) ;  ; std::atomic< Value * > fValue;  Descriptor of the container value type. ;  ; TStreamerInfoActions::TActionSequence * fWriteMemberWise;  ;  Protected Attributes inherited from TVirtualCollectionProxy; TClassRef fClass;  ; UInt_t fProperties;  . Inheritance diagram for TGenVectorProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGenVectorProxy(). TGenVectorProxy::TGenVectorProxy ; (; const TGenCollectionProxy & ; c). inline . Definition at line 42 of file TGenCollectionProxy.cxx. ◆ ~TGenVectorProxy(). TGenVectorProxy::~TGenVectorProxy ; (; ). inlineoverride . Definition at line 46 of file TGenCollectionProxy.cxx. Member Function Documentation. ◆ At(). void * TGenVectorProxy::At ; (; UInt_t ; idx). inlineoverridevirtual . Return the address of the value at index 'idx'. ; Reimplemented from TGenCollectionProxy.; Definition at line 50 of file TGenCollectionProxy.cxx. ◆ DeleteItem(). void TGenVectorProxy::DeleteItem ; (; Bool_t ; force, . void * ; ptr . ); const. inlineoverridevirtual . Call to delete/destruct individual item. ; Reimplemented from TGenCollectionProxy.; Definition at line 66 of file TGenCollectionProxy.cxx. io/io/src/TGenCollectionProxy.cxx. TGenVectorProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenVectorProxy.html:12720,Guid,Guide,12720,doc/master/classTGenVectorProxy.html,https://root.cern,https://root.cern/doc/master/classTGenVectorProxy.html,1,['Guid'],['Guide']
Usability,"rpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs; return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Loop over components for plot sampling hints and merge them if there are multiple. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Loop over components for plot sampling hints and merge them if there are multiple. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooAddPdf with cache-and-track. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; P.d.f is self normalized. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. const RooArgSet& getCoefNormalization() const; { return _refCoefNorm ; }. const char* getCoefRange() const; { return _refCoefRangeName?RooNameReg::str(_refCoefRangeName):"""" ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:51357,intuit,intuitively,51357,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,3,['intuit'],['intuitively']
Usability,"rptr);  ; template<typename T1 > ; RResultPtr< T1 > RDFDetail::MakeResultPtr (const std::shared_ptr< T1 > &, ::ROOT::Detail::RDF::RLoopManager &, std::shared_ptr< RDFInternal::RActionBase >);  ; ROOT::Internal::RDF::SnapshotPtr_t ROOT::Internal::RDF::CloneResultAndAction (const ROOT::Internal::RDF::SnapshotPtr_t &inptr, const std::string &outputFileName);  ; RResultPtr< T > ROOT::Internal::RDF::CloneResultAndAction (const RResultPtr< T > &inptr);  ; class ROOT::Internal::RDF::GraphDrawing::GraphCreatorHelper;  ; template<typename T1 > ; ROOT::RDF::Experimental::RResultMap< T1 > ROOT::RDF::Experimental::VariationsFor (RResultPtr< T1 > resPtr);  ; class RResultHandle;  . #include <ROOT/RResultPtr.hxx>; Member Typedef Documentation. ◆ SPT_t. template<typename T > . using ROOT::RDF::RResultPtr< T >::SPT_t = std::shared_ptr<T>. private . Definition at line 121 of file RResultPtr.hxx. ◆ Value_t. template<typename T > . using ROOT::RDF::RResultPtr< T >::Value_t = T. Convenience alias to simplify access to proxied type. ; Definition at line 206 of file RResultPtr.hxx. Constructor & Destructor Documentation. ◆ RResultPtr() [1/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; std::shared_ptr< T > ; objPtr, . RDFDetail::RLoopManager * ; lm, . std::shared_ptr< RDFInternal::RActionBase > ; actionPtr . ). inlineprivate . Definition at line 199 of file RResultPtr.hxx. ◆ RResultPtr() [2/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; ). default . ◆ RResultPtr() [3/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T > & ; ). default . ◆ RResultPtr() [4/5]. template<typename T > . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; RResultPtr< T > && ; ). default . ◆ RResultPtr() [5/5]. template<typename T > . template<typename T2 , std::enable_if_t< std::is_constructible< std::shared_ptr< T >, std::shared_ptr< T2 > >::value, int > = 0> . ROOT::RDF::RResultPtr< T >::RResultPtr ; (; const RResultPtr< T2 > & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html:5515,simpl,simplify,5515,doc/master/classROOT_1_1RDF_1_1RResultPtr.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RResultPtr.html,1,['simpl'],['simplify']
Usability,rrInSq. protected . Input: uncorr error squared from bgr sources. ; Definition at line 74 of file TUnfoldSys.h. ◆ fBgrIn. TMap* TUnfoldSys::fBgrIn. protected . Input: size of background sources. ; Definition at line 72 of file TUnfoldSys.h. ◆ fDAinColRelSq. TMatrixD* TUnfoldSys::fDAinColRelSq. protected . Input: normalized column err.sq. (inp.matr.) ; Definition at line 66 of file TUnfoldSys.h. ◆ fDAinRelSq. TMatrixDSparse* TUnfoldSys::fDAinRelSq. protected . Input: normalized errors from input matrix. ; Definition at line 64 of file TUnfoldSys.h. ◆ fDeltaCorrAx. TMap* TUnfoldSys::fDeltaCorrAx. protected . Result: syst.shift from fSysIn on fAx. ; Definition at line 90 of file TUnfoldSys.h. ◆ fDeltaCorrX. TMap* TUnfoldSys::fDeltaCorrX. protected . Result: syst.shift from fSysIn on fX. ; Definition at line 88 of file TUnfoldSys.h. ◆ fDeltaSysTau. TMatrixDSparse* TUnfoldSys::fDeltaSysTau. protected . Result: systematic shift from tau. ; Definition at line 92 of file TUnfoldSys.h. ◆ fDtau. Double_t TUnfoldSys::fDtau. protected . Input: error on tau. ; Definition at line 78 of file TUnfoldSys.h. ◆ fEmatUncorrAx. TMatrixDSparse* TUnfoldSys::fEmatUncorrAx. protected . Result: syst.error from fDA2 on fAx. ; Definition at line 86 of file TUnfoldSys.h. ◆ fEmatUncorrX. TMatrixDSparse* TUnfoldSys::fEmatUncorrX. protected . Result: syst.error from fDA2 on fX. ; Definition at line 84 of file TUnfoldSys.h. ◆ fSysIn. TMap* TUnfoldSys::fSysIn. protected . Input: correlated errors. ; Definition at line 70 of file TUnfoldSys.h. ◆ fVyyData. TMatrixDSparse* TUnfoldSys::fVyyData. protected . Input: error on fY prior to bgr subtraction. ; Definition at line 82 of file TUnfoldSys.h. ◆ fYData. TMatrixD* TUnfoldSys::fYData. protected . Input: fY prior to bgr subtraction. ; Definition at line 80 of file TUnfoldSys.h. hist/unfold/inc/TUnfoldSys.h; hist/unfold/src/TUnfoldSys.cxx. TUnfoldSys. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:42 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:51589,Guid,Guide,51589,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['Guid'],['Guide']
Usability,"rray with names of written files - text or binary If data was send from client, ""send"" entry will be placed. ;  ; void Run (double tm=0.);  Run window functionality for specified time If no action can be performed - just sleep specified time. ;  ; void Send (unsigned connid, const std::string &data);  Sends data to specified connection. ;  ; void SendBinary (unsigned connid, const void *data, std::size_t len);  Send binary data to specified connection. ;  ; void SendBinary (unsigned connid, std::string &&data);  Send binary data to specified connection. ;  ; _R__DEPRECATED_LATER(""Use GetUrl() to get valid connection URL"") std _R__DEPRECATED_LATER(""Use GetAddr() to get valid connection URL"") std void SetCallBacks (WebWindowConnectCallback_t conn, WebWindowDataCallback_t data, WebWindowConnectCallback_t disconn=nullptr);  Set call-backs function for connect, data and disconnect events. ;  ; void SetClearOnClose (const std::shared_ptr< void > &handle=nullptr);  Set handle which is cleared when last active connection is closed Typically can be used to destroy web-based widget at such moment. ;  ; void SetClientVersion (const std::string &vers);  Set client version, used as prefix in scripts URL When changed, web browser will reload all related JS files while full URL will be different Default is empty value - no extra string in URL Version should be string like ""1.2"" or ""ver1.subv2"" and not contain any special symbols. ;  ; void SetConnectCallBack (WebWindowConnectCallback_t func);  Set call-back function for new connection. ;  ; void SetConnLimit (unsigned lmt=0);  Configure maximal number of allowed connections - 0 is unlimited Will not affect already existing connections Default is 1 - the only client is allowed. ;  ; void SetConnToken (const std::string &token="""");  Configures connection token (default none) When specified, in URL of webpage such token should be provided as &token=value parameter, otherwise web window will refuse connection. ;  ; void SetDataCallBac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:6476,clear,cleared,6476,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['clear'],['cleared']
Usability,"rray(const ULong_t *l, Int_t n)=0; TBuffer::ReadClassEmulatedvirtual Int_t ReadClassEmulated(const TClass *cl, void *object, const TClass *onfile_class=nullptr)=0; TBuffer::Bufferchar * Buffer() constDefinition TBuffer.h:96; TBuffer::ReadArrayvirtual Int_t ReadArray(Char_t *&c)=0; TBuffer::StreamObjectvirtual void StreamObject(void *obj, const std::type_info &typeinfo, const TClass *onFileClass=nullptr)=0; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TMemberStreamerDefinition TMemberStreamer.h:26; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::Readvirtual Int_t Read(const char *name)Read contents of object with specified name from the current directory.Definition TObject.cxx:654; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TRefTableA TRefTable maintains the association between a referenced object and the parent object supporting th...Definition TRefTable.h:35; TStreamerElementDefinition TStreamerElement.h:32; TStreamerInfoActions::TActionSequenceDefinition TStreamerInfoActions.h:177; TStringBasic string class.Definition TString.h:139; TVirtualArrayWrapper around an object and giving indirect access to its content even if the object is not of a cla...Definition TVirtualArray.h:27; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; TStreamerInfoActionsDefinition TBuffer.h:39; lTLine lDefinition textangle.C:4. corebaseincTBuffer.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8h_source.html:47190,Guid,Guide,47190,doc/master/TBuffer_8h_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8h_source.html,1,['Guid'],['Guide']
Usability,"rrayC>: public THnSparse. THnSparseBinIter iterates over all filled bins of a THnSparse. Function Members (Methods); public:. virtual~THnSparseT<TArrayC>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayC_.html:1047,Clear,Clear,1047,root/html602/THnSparseT_TArrayC_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayC_.html,2,['Clear'],['Clear']
Usability,"rrayD>: public THnSparse. THnSparseBinIter iterates over all filled bins of a THnSparse. Function Members (Methods); public:. virtual~THnSparseT<TArrayD>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayD_.html:1047,Clear,Clear,1047,root/html602/THnSparseT_TArrayD_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayD_.html,2,['Clear'],['Clear']
Usability,"rrayF::AddAt(Float_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1F.html:2006,Clear,Clear,2006,root/html534/TH1F.html,https://root.cern,https://root.cern/root/html534/TH1F.html,1,['Clear'],['Clear']
Usability,"rrayF::AddAt(Float_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2F.html:2353,Clear,Clear,2353,root/html534/TH2F.html,https://root.cern,https://root.cern/root/html534/TH2F.html,1,['Clear'],['Clear']
Usability,"rrayF::AddAt(Float_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3F.html:2194,Clear,Clear,2194,root/html534/TH3F.html,https://root.cern,https://root.cern/root/html534/TH3F.html,1,['Clear'],['Clear']
Usability,"rrayF>: public THnSparse. THnSparseBinIter iterates over all filled bins of a THnSparse. Function Members (Methods); public:. virtual~THnSparseT<TArrayF>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayF_.html:1047,Clear,Clear,1047,root/html602/THnSparseT_TArrayF_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayF_.html,2,['Clear'],['Clear']
Usability,"rrayI>: public THnSparse. THnSparseBinIter iterates over all filled bins of a THnSparse. Function Members (Methods); public:. virtual~THnSparseT<TArrayI>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayI_.html:1047,Clear,Clear,1047,root/html602/THnSparseT_TArrayI_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayI_.html,2,['Clear'],['Clear']
Usability,"rrayL>: public THnSparse. THnSparseBinIter iterates over all filled bins of a THnSparse. Function Members (Methods); public:. virtual~THnSparseT<TArrayL>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayL_.html:1047,Clear,Clear,1047,root/html602/THnSparseT_TArrayL_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayL_.html,2,['Clear'],['Clear']
Usability,"rrayS::AddAt(Short_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayS::Adopt(Int_t n, Short_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Short_tTArrayS::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1S.html:1982,Clear,Clear,1982,root/html534/TH1S.html,https://root.cern,https://root.cern/root/html534/TH1S.html,1,['Clear'],['Clear']
Usability,"rrayS::AddAt(Short_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayS::Adopt(Int_t n, Short_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Short_tTArrayS::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH2::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2S.html:2331,Clear,Clear,2331,root/html534/TH2S.html,https://root.cern,https://root.cern/root/html534/TH2S.html,1,['Clear'],['Clear']
Usability,"rrayS::AddAt(Short_t c, Int_t i); virtual voidAddBinContent(Int_t bin); virtual voidAddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayS::Adopt(Int_t n, Short_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Short_tTArrayS::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH3::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& hnew) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* option = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3S.html:2201,Clear,Clear,2201,root/html534/TH3S.html,https://root.cern,https://root.cern/root/html534/TH3S.html,1,['Clear'],['Clear']
Usability,"rrayS>: public THnSparse. THnSparseBinIter iterates over all filled bins of a THnSparse. Function Members (Methods); public:. virtual~THnSparseT<TArrayS>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHnSparse::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHnSparse::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHnSparse::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayS_.html:1047,Clear,Clear,1047,root/html602/THnSparseT_TArrayS_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayS_.html,2,['Clear'],['Clear']
Usability,rrection.cxx;  ConfidenceBelt.cxx;  DetailedOutputAggregator.cxx;  FeldmanCousins.cxx;  FrequentistCalculator.cxx;  Heaviside.cxx;  HLFactory.cxx;  HybridCalculator.cxx;  HybridCalculatorOriginal.cxx;  HybridPlot.cxx;  HybridResult.cxx;  HypoTestCalculatorGeneric.cxx;  HypoTestInverter.cxx;  HypoTestInverterOriginal.cxx;  HypoTestInverterPlot.cxx;  HypoTestInverterResult.cxx;  HypoTestPlot.cxx;  HypoTestResult.cxx;  LikelihoodInterval.cxx;  LikelihoodIntervalPlot.cxx;  MarkovChain.cxx;  MCMCCalculator.cxx;  MCMCInterval.cxx;  MCMCIntervalPlot.cxx;  MetropolisHastings.cxx;  ModelConfig.cxx;  NeymanConstruction.cxx;  NumberCountingPdfFactory.cxx;  NumberCountingUtils.cxx;  PdfProposal.cxx;  PointSetInterval.cxx;  ProfileInspector.cxx;  ProfileLikelihoodCalculator.cxx;  ProfileLikelihoodTestStat.cxx;  ProposalHelper.cxx;  RatioOfProfiledLikelihoodsTestStat.cxx;  RooStatsUtils.cxx;  SamplingDistPlot.cxx;  SamplingDistribution.cxx;  SequentialProposal.cxx;  SimpleInterval.cxx;  SimpleLikelihoodRatioTestStat.cxx;  SPlot.cxx;  ToyMCImportanceSampler.cxx;  ToyMCSampler.cxx;  ToyMCStudy.cxx;  UniformProposal.cxx;  UpperLimitMCSModule.cxx;  ► sql;  ► mysql;  ► inc;  LinkDef.h;  TMySQLResult.h;  TMySQLRow.h;  TMySQLServer.h;  TMySQLStatement.h;  ► src;  TMySQLResult.cxx;  TMySQLRow.cxx;  TMySQLServer.cxx;  TMySQLStatement.cxx;  ► odbc;  ► inc;  LinkDef.h;  TODBCResult.h;  TODBCRow.h;  TODBCServer.h;  TODBCStatement.h;  ► src;  TODBCResult.cxx;  TODBCRow.cxx;  TODBCServer.cxx;  TODBCStatement.cxx;  ► oracle;  ► inc;  LinkDef.h;  TOracleResult.h;  TOracleRow.h;  TOracleServer.h;  TOracleStatement.h;  ► src;  TOracleResult.cxx;  TOracleRow.cxx;  TOracleServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  LinkDef.h;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  LinkDef.h;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:85567,Simpl,SimpleLikelihoodRatioTestStat,85567,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,rrection.cxx;  ConfidenceBelt.cxx;  DetailedOutputAggregator.cxx;  FeldmanCousins.cxx;  FrequentistCalculator.cxx;  Heaviside.cxx;  HLFactory.cxx;  HybridCalculator.cxx;  HybridCalculatorOriginal.cxx;  HybridPlot.cxx;  HybridResult.cxx;  HypoTestCalculatorGeneric.cxx;  HypoTestInverter.cxx;  HypoTestInverterOriginal.cxx;  HypoTestInverterPlot.cxx;  HypoTestInverterResult.cxx;  HypoTestPlot.cxx;  HypoTestResult.cxx;  LikelihoodInterval.cxx;  LikelihoodIntervalPlot.cxx;  MarkovChain.cxx;  MCMCCalculator.cxx;  MCMCInterval.cxx;  MCMCIntervalPlot.cxx;  MetropolisHastings.cxx;  ModelConfig.cxx;  NeymanConstruction.cxx;  NumberCountingPdfFactory.cxx;  NumberCountingUtils.cxx;  PdfProposal.cxx;  PointSetInterval.cxx;  ProfileInspector.cxx;  ProfileLikelihoodCalculator.cxx;  ProfileLikelihoodTestStat.cxx;  ProposalHelper.cxx;  RatioOfProfiledLikelihoodsTestStat.cxx;  RooStatsUtils.cxx;  SamplingDistPlot.cxx;  SamplingDistribution.cxx;  SequentialProposal.cxx;  SimpleInterval.cxx;  SimpleLikelihoodRatioTestStat.cxx;  SPlot.cxx;  ToyMCImportanceSampler.cxx;  ToyMCSampler.cxx;  ToyMCStudy.cxx;  UniformProposal.cxx;  UpperLimitMCSModule.cxx;  ► sql;  ► mysql;  ► inc;  TMySQLResult.h;  TMySQLRow.h;  TMySQLServer.h;  TMySQLStatement.h;  ► src;  TMySQLResult.cxx;  TMySQLRow.cxx;  TMySQLServer.cxx;  TMySQLStatement.cxx;  ► odbc;  ► inc;  TODBCResult.h;  TODBCRow.h;  TODBCServer.h;  TODBCStatement.h;  ► src;  TODBCResult.cxx;  TODBCRow.cxx;  TODBCServer.cxx;  TODBCStatement.cxx;  ► oracle;  ► inc;  TOracleResult.h;  TOracleRow.h;  TOracleServer.h;  TOracleStatement.h;  ► src;  TOracleResult.cxx;  TOracleRow.cxx;  TOracleServer.cxx;  TOracleStatement.cxx;  ► pgsql;  ► inc;  TPgSQLResult.h;  TPgSQLRow.h;  TPgSQLServer.h;  TPgSQLStatement.h;  ► src;  TPgSQLResult.cxx;  TPgSQLRow.cxx;  TPgSQLServer.cxx;  TPgSQLStatement.cxx;  ► sapdb;  ► inc;  TSapDBResult.h;  TSapDBRow.h;  TSapDBServer.h;  ► src;  TSapDBResult.cxx;  TSapDBRow.cxx;  TSapDBServer.cxx;  ► sqlite;  ► inc;  TSQLiteResult.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:83668,Simpl,SimpleLikelihoodRatioTestStat,83668,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,4,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"rrent directory.Definition TTree.cxx:9753; ROOT::VecOps::cosRVec< PromoteType< T > > cos(const RVec< T > &v)Definition RVec.hxx:1852; ROOT::VecOps::acosRVec< PromoteType< T > > acos(const RVec< T > &v)Definition RVec.hxx:1855; ROOT::VecOps::sinRVec< PromoteType< T > > sin(const RVec< T > &v)Definition RVec.hxx:1851; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.tmptmpDefinition TMVA_SOFIE_GNN_Parser.py:196; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169; TMath::GausDouble_t Gaus(Double_t x, Double_t mean=0, Double_t sigma=1, Bool_t norm=kFALSE)Calculates a gaussian function with mean and sigma.Definition TMath.cxx:471; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::DegToRadconstexpr Double_t DegToRad()Conversion from degree to radian: .Definition TMath.h:79; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; AuthorAndreas Hoecker ; Definition in file createData.C. tutorialstmvacreateData.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/createData_8C.html:66425,Guid,Guide,66425,doc/master/createData_8C.html,https://root.cern,https://root.cern/doc/master/createData_8C.html,1,['Guid'],['Guide']
Usability,"rrent range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs; return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Loop over components for plot sampling hints and merge them if there are multiple. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; P.d.f is self normalized. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. const RooArgSet& getCoefNormalization() const; { return _refCoefNorm ; }. const char* getCoefRange() const; { return _refCoefRangeName?RooNameReg::str(_refCoefRangeName):"""" ; }. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Mon Jul 4 15:21:36 2011 » Last generated: 2011-07-04 15:21; This page ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAddPdf.html:48174,intuit,intuitively,48174,root/html530/RooAddPdf.html,https://root.cern,https://root.cern/root/html530/RooAddPdf.html,1,['intuit'],['intuitively']
Usability,"rrent range w.r.t the reference range. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs; return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Loop over components for plot sampling hints and merge them if there are multiple. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force RooRealIntegral to offer all observables for internal integration. Bool_t selfNormalized() const; P.d.f is self normalized. ExtendMode extendMode() const; Return extended mode capabilities. Double_t expectedEvents(const RooArgSet* nset) const. const RooArgList& pdfList() const; Return list of component p.d.fs. const RooArgList& coefList() const; Return list of coefficients of component p.d.f.s. const RooArgSet& getCoefNormalization() const; { return _refCoefNorm ; }. const char* getCoefRange() const; { return _refCoefRangeName?RooNameReg::str(_refCoefRangeName):"""" ; }. CacheElem* getProjCache(const RooArgSet* nset, const RooArgSet* iset = 0, const char* rangeName = 0) const. » Last changed: Sat Oct 9 22:38:34 2010 » Last generated: 2010-10-09 22:38; This page ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:47806,intuit,intuitively,47806,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,1,['intuit'],['intuitively']
Usability,"rrent value to fade over given time (sec) and number of steps. ; Definition at line 1606 of file TGLViewer.cxx. ◆ BeginScene(). void TGLViewer::BeginScene ; (; ). inlineoverridevirtual . Implements TVirtualViewer3D.; Definition at line 210 of file TGLViewer.h. ◆ BuildingScene(). Bool_t TGLViewer::BuildingScene ; (; ); const. inlineoverridevirtual . Implements TVirtualViewer3D.; Definition at line 211 of file TGLViewer.h. ◆ CanLoopOnPrimitives(). Bool_t TGLViewer::CanLoopOnPrimitives ; (; ); const. inlineoverridevirtual . Reimplemented from TVirtualViewer3D.; Definition at line 202 of file TGLViewer.h. ◆ Class(). static TClass * TGLViewer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLViewer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLViewer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 395 of file TGLViewer.h. ◆ ClearCurrentOvlElm(). void TGLViewer::ClearCurrentOvlElm ; (; ). Reset current overlay-element to zero, eventually notifying the old one that the mouse has left. ; Usually called when mouse leaves the window. ; Definition at line 2328 of file TGLViewer.cxx. ◆ Clicked() [1/2]. void TGLViewer::Clicked ; (; TObject * ; obj). virtual . Emit Clicked signal. ; Definition at line 2158 of file TGLViewer.cxx. ◆ Clicked() [2/2]. void TGLViewer::Clicked ; (; TObject * ; obj, . UInt_t ; button, . UInt_t ; state . ). virtual . Emit Clicked signal with button id and modifier state. ; Definition at line 2166 of file TGLViewer.cxx. ◆ CloseComposite(). void TGLViewer::CloseComposite ; (; ). inlineoverridevirtual . Implements TVirtualViewer3D.; Definition at line 216 of file TGLViewer.h. ◆ ColorSet(). TGLColorSet & TGLViewer::ColorSet ; (; ). inline . Definition at line 234 of file TGLViewer.h. ◆ CreateGLWidget(). virtual void TGLViewer::CreateGLWidget ; (; ). inlinevirtual . Reimplemented in TGLEmbeddedViewer, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:41493,Clear,ClearCurrentOvlElm,41493,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['Clear'],['ClearCurrentOvlElm']
Usability,"rride;  Print head info about the content. ;  ; void Prt (const char *what, Bool_t newline=kTRUE);  Special printing procedure. ;  ; Int_t Retrieve (const char *ord=""*"", TProofLog::ERetrieveOpt opt=TProofLog::kTrailing, const char *fname=0, const char *pattern=0);  Retrieve the content of the log file associated with worker 'ord'. ;  ; Int_t Save (const char *ord=""*"", const char *fname=0, Option_t *opt=""w"");  Save the content associated with worker 'ord' to finel 'fname'. ;  ; void SetLogToBox (Bool_t lgbox=kFALSE);  ; TDatime StartTime ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLog.html:2772,Clear,Clear,2772,doc/master/classTProofLog.html,https://root.cern,https://root.cern/doc/master/classTProofLog.html,1,['Clear'],['Clear']
Usability,"rrideprotectedvirtual . AddLast is not allowed in this class. ; See TList::AddLast for the intended behavior. ; Reimplemented from TList.; Definition at line 158 of file TViewPubDataMembers.cxx. ◆ After(). TObject * TViewPubDataMembers::After ; (; const TObject * ; obj); const. overrideprotectedvirtual . After is not allowed in this class. ; See TList::After for the intended behavior. ; Reimplemented from TList.; Definition at line 231 of file TViewPubDataMembers.cxx. ◆ At(). TObject * TViewPubDataMembers::At ; (; Int_t ; idx); const. overridevirtual . Returns the object at position idx. Returns 0 if idx is out of range. ; Reimplemented from TList.; Definition at line 211 of file TViewPubDataMembers.cxx. ◆ Before(). TObject * TViewPubDataMembers::Before ; (; const TObject * ; obj); const. overrideprotectedvirtual . Before is not allowed in this class. ; See TList::Before for the intended behavior. ; Reimplemented from TList.; Definition at line 241 of file TViewPubDataMembers.cxx. ◆ Clear(). void TViewPubDataMembers::Clear ; (; Option_t * ; option = """"). overrideprotectedvirtual . Clear is not allowed in this class. ; See TList::Clear for the intended behavior. ; Reimplemented from TList.; Definition at line 69 of file TViewPubDataMembers.cxx. ◆ Delete(). void TViewPubDataMembers::Delete ; (; Option_t * ; option = """"). overrideprotectedvirtual . Delete is not allowed in this class. ; See TList::Delete for the intended behavior. ; Reimplemented from TList.; Definition at line 78 of file TViewPubDataMembers.cxx. ◆ FindObject() [1/2]. TObject * TViewPubDataMembers::FindObject ; (; const char * ; name); const. overridevirtual . Find an object in this list using its name. ; Requires a sequential scan till the object has been found. Returns 0 if object with specified name is not found. ; Reimplemented from TList.; Definition at line 88 of file TViewPubDataMembers.cxx. ◆ FindObject() [2/2]. TObject * TViewPubDataMembers::FindObject ; (; const TObject * ; obj); const. overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubDataMembers.html:24244,Clear,Clear,24244,doc/master/classTViewPubDataMembers.html,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html,1,['Clear'],['Clear']
Usability,"rridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoTorus::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetSegsAndPols(). void TGeoTorus::SetSegsAndPols ; (; TBuffer3D & ; buff); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetTorusDimensions(). void TGeoTorus::SetTorusDimensions ; (; Double_t ; r, . Double_t ; rmin, . Double_t ; rmax, . Double_t ; phi1, . Double_t ; dphi . ). ◆ Sizeof3D(). void TGeoTorus::Sizeof3D ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SolveCubic(). Int_t TGeoTorus::SolveCubic ; (; Double_t ; a, . Double_t ; b, . Double_t ; c, . Double_t * ; x . ); const. ◆ SolveQuartic(). Int_t TGeoTorus::SolveQuartic ; (; Double_t ; a, . Double_t ; b, . Double_t ; c, . Double_t ; d, . Double_t * ; x . ); const. ◆ Streamer(). void TGeoTorus::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoTorus::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 91 of file TGeoTorus.h. ◆ ToBoundary(). Double_t TGeoTorus::ToBoundary ; (; const Double_t * ; pt, . const Double_t * ; dir, . Double_t ; r, . Bool_t ; in . ); const. Member Data Documentation. ◆ fDphi. Double_t TGeoTorus::fDphi. protected . Definition at line 24 of file TGeoTorus.h. ◆ fPhi1. Double_t TGeoTorus::fPhi1. protected . Definition at line 23 of file TGeoTorus.h. ◆ fR. Double_t TGeoTorus::fR. protected . Definition at line 20 of file TGeoTorus.h. ◆ fRmax. Double_t TGeoTorus::fRmax. protected . Definition at line 22 of file TGeoTorus.h. ◆ fRmin. Double_t TGeoTorus::fRmin. protected . Definition at line 21 of file TGeoTorus.h. Libraries for TGeoTorus:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoTorus.h. TGeoTorus. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTorus.html:32160,Guid,Guide,32160,doc/master/classTGeoTorus.html,https://root.cern,https://root.cern/doc/master/classTGeoTorus.html,1,['Guid'],['Guide']
Usability,"rridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 51 of file TGraphStruct.h. ◆ Layout(). Int_t TGraphStruct::Layout ; (; ). Layout the graph into a GraphViz data structure. ; Definition at line 199 of file TGraphStruct.cxx. ◆ SavePrimitive(). void TGraphStruct::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 273 of file TGraphStruct.cxx. ◆ SetMargin(). void TGraphStruct::SetMargin ; (; Double_t ; m = 10). inline . Definition at line 49 of file TGraphStruct.h. ◆ Streamer(). void TGraphStruct::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 326 of file TGraphStruct.cxx. ◆ StreamerNVirtual(). void TGraphStruct::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 51 of file TGraphStruct.h. Member Data Documentation. ◆ fEdges. TList* TGraphStruct::fEdges. protected . List of edges in this TGraphStruct. ; Definition at line 31 of file TGraphStruct.h. ◆ fGVC. GVC_s* TGraphStruct::fGVC. protected . Graphviz context. ; Definition at line 29 of file TGraphStruct.h. ◆ fGVGraph. GVizAgraph_t* TGraphStruct::fGVGraph. protected . Graphviz graph. ; Definition at line 28 of file TGraphStruct.h. ◆ fMargin. Double_t TGraphStruct::fMargin. protected . Margin around the graph (in dots) ; Definition at line 32 of file TGraphStruct.h. ◆ fNodes. TList* TGraphStruct::fNodes. protected . List of nodes in this TGraphStruct. ; Definition at line 30 of file TGraphStruct.h. Libraries for TGraphStruct:. [legend]; The documentation for this class was generated from the following files:; graf2d/gviz/inc/TGraphStruct.h; graf2d/gviz/src/TGraphStruct.cxx. TGraphStruct. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphStruct.html:19123,Guid,Guide,19123,doc/master/classTGraphStruct.html,https://root.cern,https://root.cern/doc/master/classTGraphStruct.html,1,['Guid'],['Guide']
Usability,rridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 93 of file SimpleInterval.cxx. ◆ LowerLimit(). virtual double RooStats::SimpleInterval::LowerLimit ; (; ). inlinevirtual . return the interval lower limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 46 of file SimpleInterval.h. ◆ operator=(). SimpleInterval & SimpleInterval::operator= ; (; const SimpleInterval & ; other). default constructor ; Definition at line 64 of file SimpleInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::SimpleInterval::SetConfidenceLevel ; (; double ; ). inlineoverridevirtual . set the confidence level for the interval. ; Simple interval is defined at construction time so this function has no effect ; Implements RooStats::ConfInterval.; Definition at line 40 of file SimpleInterval.h. ◆ Streamer(). void RooStats::SimpleInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::SimpleInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file SimpleInterval.h. ◆ UpperLimit(). virtual double RooStats::SimpleInterval::UpperLimit ; (; ). inlinevirtual . return the interval upper limit ; Reimplemented in RooStats::HypoTestInverterResult.; Definition at line 48 of file Simp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:16249,Simpl,SimpleInterval,16249,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,3,['Simpl'],['SimpleInterval']
Usability,"rror matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply added to the; existing histogram. Function Members (Methods); public:. TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea); virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:3338,clear,cleared,3338,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,2,"['clear', 'simpl']","['cleared', 'simply']"
Usability,"rror matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply added to the; existing histogram. Function Members (Methods); public:. virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tTUnfold::DoUnfold(Double_t tau); Double_tTUnfold::DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.); virtual voidTObject::Draw(Option_t* option = """"); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:3362,clear,cleared,3362,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,4,"['clear', 'simpl']","['cleared', 'simply']"
Usability,"rror will not decrease after that value the training will stop; - Batch size (This value must be the same specified in the input layout); - Test Repetitions (the interval when the test error will be computed); ; ; #### 3. Define general DNN options; ; We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; In addition to input layout, batch layout and training strategy we add now:; ; - Type of Loss function (e.g. CROSSENTROPY); - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); - Variable Transformation; - Type of Architecture (e.g. CPU, GPU, Standard); ; We can then book the DL method using the built option string; ; ***/; ; if (useDL) {; ; bool useDLGPU = false;; #ifdef R__HAS_TMVAGPU; useDLGPU = true;; #endif; ; // Define DNN layout; TString inputLayoutString = ""InputLayout=1|1|7"";; TString batchLayoutString= ""BatchLayout=1|128|7"";; TString layoutString (""Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|64|TANH,DENSE|1|LINEAR"");; // Define Training strategies; // one can catenate several training strategies; TString training1(""LearningRate=1e-3,Momentum=0.9,""; ""ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,""; ""MaxEpochs=30,WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,"" // ADAM default parameters; ""DropConfig=0.0+0.0+0.0+0."");; // TString training2(""LearningRate=1e-3,Momentum=0.9""; // ""ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,""; // ""MaxEpochs=20,WeightDecay=1e-4,Regularization=None,""; // ""Optimizer=SGD,DropConfig=0.0+0.0+0.0+0."");; ; TString trainingStrategyString (""TrainingStrategy="");; trainingStrategyString += training1; // + ""|"" + training2;; ; // General Options.; ; TString dnnOptions (""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=G:""; ""WeightInitialization=XAVIER"");; dnnOptions.Append ("":""); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:66028,Learn,LearningRate,66028,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"rs ; TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Referenceabstract. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >Generic Optimizer class. ; This class represents the general class for all optimizers in the Deep Learning Module. ; Definition at line 45 of file Optimizer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Optimizer.h>. Inheritance diagram for TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Archi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:1318,learn,learningRate,1318,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,1,['learn'],['learningRate']
Usability,"rs ; TMVA::TTrainingSettings Struct Reference. ; All of the options that can be specified in the training string. ; Definition at line 72 of file MethodDL.h. Public Attributes; size_t batchSize;  ; size_t convergenceSteps;  ; std::vector< Double_t > dropoutProbabilities;  ; Double_t learningRate;  ; size_t maxEpochs;  ; Double_t momentum;  ; bool multithreading;  ; DNN::EOptimizer optimizer;  ; TString optimizerName;  ; std::map< TString, double > optimizerParams;  ; DNN::ERegularization regularization;  ; size_t testInterval;  ; Double_t weightDecay;  . #include <TMVA/MethodDL.h>; Member Data Documentation. ◆ batchSize. size_t TMVA::TTrainingSettings::batchSize. Definition at line 73 of file MethodDL.h. ◆ convergenceSteps. size_t TMVA::TTrainingSettings::convergenceSteps. Definition at line 75 of file MethodDL.h. ◆ dropoutProbabilities. std::vector<Double_t> TMVA::TTrainingSettings::dropoutProbabilities. Definition at line 83 of file MethodDL.h. ◆ learningRate. Double_t TMVA::TTrainingSettings::learningRate. Definition at line 80 of file MethodDL.h. ◆ maxEpochs. size_t TMVA::TTrainingSettings::maxEpochs. Definition at line 76 of file MethodDL.h. ◆ momentum. Double_t TMVA::TTrainingSettings::momentum. Definition at line 81 of file MethodDL.h. ◆ multithreading. bool TMVA::TTrainingSettings::multithreading. Definition at line 85 of file MethodDL.h. ◆ optimizer. DNN::EOptimizer TMVA::TTrainingSettings::optimizer. Definition at line 78 of file MethodDL.h. ◆ optimizerName. TString TMVA::TTrainingSettings::optimizerName. Definition at line 79 of file MethodDL.h. ◆ optimizerParams. std::map<TString,double> TMVA::TTrainingSettings::optimizerParams. Definition at line 84 of file MethodDL.h. ◆ regularization. DNN::ERegularization TMVA::TTrainingSettings::regularization. Definition at line 77 of file MethodDL.h. ◆ testInterval. size_t TMVA::TTrainingSettings::testInterval. Definition at line 74 of file MethodDL.h. ◆ weightDecay. Double_t TMVA::TTrainingSettings::weightDecay. D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html:1203,learn,learningRate,1203,doc/master/structTMVA_1_1TTrainingSettings.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html,1,['learn'],['learningRate']
Usability,"rs R,; O and T. Why one have to define so many volumes to make an R?""; A: Well, in real life some objects have much more complex shapes that an ""R"". The modeller cannot just know all of them; the idea is to make a complex object by using elementary building blocks that have known shapes (called ""primitive shapes""). Gluing these together in the appropriate way is the user responsibility.; Q: ""I am getting the global picture but not making much out of it... There; are also a lot of calls to TGeoVolume::AddNode() that I do not understand.""; A: A volume is positioned inside another one by using this method. The relative geometrical transformation as well as a copy number must be specified. When positioned, a volume becomes a ""node"" of its container and a new object of the class TGeoNode is automatically created. This method is therefore the key element for the creation of a hierarchical link between two volumes. As it will be described further on in this document, there are few other methods performing similar actions, but let us keep things simple for the time being. In addition, notice that there are some visualization-related calls in the example followed by a final TGeoVolume::Draw() call for the top volume. These are explained in details in the section ""Visualization Settings and Attributes"". At this point, you will probably like to see how this geometry looks like. You just need to run the example and you will get the following picture that you can rotate using the mouse; or you can zoom / move it around (see what the Help menu of the GL window displays).; % root rootgeom.C; rootgeomTGeoNode * rootgeom()Definition eveGeoBrowser.C:47. Now let us browse the hierarchy that was just created. Start a browser and double-click on the item simple1 representing the gGeoManager object. Note that right click opens the context menu of the manager class where several global methods are available.; root[] new TBrowser;; TBrowserUsing a TBrowser one can browse all ROOT objects.De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:10988,simpl,simple,10988,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simple']
Usability,"rs are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:32688,simpl,simple,32688,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['simpl'],['simple']
Usability,"rs are rounded. In case of option ""ARC"", the corner radius is specified; via TPave::SetCornerRadius(rad) where rad is given in percent; of the pave height (default value is 0.2). The individual text items are entered via AddText; By default, text items inherits from the default pavetext AttText.; A title can be added later to this pavetext via TPaveText::SetLabel. ~TPaveText(); pavetext default destructor. TPaveText(const TPaveText& pavetext); pavetext copy constructor. TPaveText& operator=(const TPaveText& ); assignment operator. TBox * AddBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Add a new graphics box to this pavetext. TLine * AddLine(Double_t x1 = 0, Double_t y1 = 0, Double_t x2 = 0, Double_t y2 = 0); Add a new graphics line to this pavetext. TText * AddText(Double_t x1, Double_t y1, const char* label); Add a new Text line to this pavetext at given coordinates. TText * AddText(const char* label); Add a new Text line to this pavetext. void Clear(Option_t* option = """"); Clear all lines in this pavetext. void DeleteText(); Delete text at the mouse position. void Draw(Option_t* option = """"); Draw this pavetext with its current attributes. void DrawFile(const char* filename, Option_t* option = """"); Draw lines in filename in this pavetext. void EditText(); Edit text at the mouse position. TText * GetLine(Int_t number) const; Get Pointer to line number in this pavetext. TText * GetLineWith(const char* text) const; Get Pointer to first containing string text in this pavetext. TObject * GetObject(Double_t& ymouse, Double_t& yobj) const; Get object pointed by the mouse in this pavetext. Int_t GetSize() const; return number of text lines (ignoring Tlines, etc). void InsertLine(); Add a new lineine at the mouse position. void InsertText(const char* label); Add a new Text line at the mouse position. void Paint(Option_t* option = """"); Paint this pavetext with its current attributes. void PaintPrimitives(Int_t mode); Paint list of primitives in this pavetext. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveText.html:14408,Clear,Clear,14408,root/html534/TPaveText.html,https://root.cern,https://root.cern/root/html534/TPaveText.html,6,['Clear'],['Clear']
Usability,"rs if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Change window attributes. ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the background color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  Close connection to display server. ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Cop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:2778,Clear,ClearArea,2778,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,4,['Clear'],"['Clear', 'ClearArea']"
Usability,"rs many options to paint 1D, 2D and 3D histograms.; When the Draw() method of a histogram is called for the first time; (TH1::Draw), it creates a THistPainter object and saves a; pointer to this ""painter"" as a data member of the histogram. The; THistPainter class specializes in the drawing of histograms. It is; separated from the histogram so that one can have histograms without the; graphics overhead, for example in a batch program. Each histogram have its own; painter rather than a central singleton painter painting all histograms, allows; two histograms to be drawn in two threads without overwriting the painter's; values.; When a displayed histogram is filled again, there is not need to call the; Draw() method again; the image will be refreshed the next time the; pad will be updated.; A pad is updated after one of these three actions:. a carriage control on the ROOT command line,; a click inside the pad,; a call to TPad::Update. By default a call to TH1::Draw() clears the pad of all objects; before drawing the new image of the histogram. One can use the ""SAME""; option to leave the previous display intact and superimpose the new histogram.; The same histogram can be drawn with different graphics options in different; pads.; When a displayed histogram is deleted, its image is automatically removed; from the pad.; To create a copy of the histogram when drawing it, one can use; TH1::DrawClone(). This will clone the histogram and allow to change; and delete the original one without affecting the clone.; Histograms' plotting options; Most options can be concatenated with or without spaces or commas, for example:. h->Draw(""E1 SAME"");. The options are not case sensitive:. h->Draw(""e1 same"");. The default drawing option can be set with TH1::SetOption and retrieve; using TH1::GetOption:. root [0] h->Draw(); // Draw ""h"" using the standard histogram representation.; root [1] h->Draw(""E""); // Draw ""h"" using error bars; root [3] h->SetOption(""E""); // Change the default drawing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:3561,clear,clears,3561,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,6,['clear'],['clears']
Usability,"rs the possibility of allocating and deleting memory. Forgetting to delete allocated memory is a programming error called a ""memory leak"", i.e. the memory of your process grows and eventually your program crashes. Even if you always delete the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in terms of CPU time.; Without entering into technical details, TClonesArray allows you to ""reuse"" the same portion of memory for new/delete avoiding memory fragmentation and memory growth and improving the performance by orders of magnitude. Every time the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be allocated once per process and disposed of (deleted) only when not needed any more.; So a job should see only one deletion for each TClonesArray, which should be Clear()ed during the job several times. Deleting a TClonesArray is a double waste. Not only you do not avoid memory fragmentation, but you worsen it because the TClonesArray itself is a rather heavy structure, and there is quite some code in the destructor, so you have more memory fragmentation and slower code. NOTE 2; When investigating misuse of TClonesArray, please make sure of the following:. Use Clear() or Clear(""C"") instead of Delete(). This will improve program execution time.; TClonesArray object classes containing pointers allocate memory. To avoid causing memory leaks, special Clear(""C"") must be used for clearing TClonesArray. When option ""C"" is specified, ROOT automatically executes the Clear() method (by default it is em",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:3371,Clear,Clear,3371,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,"rs with validity for the current values of those parameters. It can be retrieved later by callin retrieveObject() ; Definition at line 71 of file RooExpensiveObjectCache.cxx. ◆ retrieveObject(). const TObject * RooExpensiveObjectCache::retrieveObject ; (; const char * ; name, . TClass * ; tc, . const RooArgSet & ; params . ). Retrieve object from cache that was registered under given name with given parameters, if current parameter values match those that were stored in the registry for this object. ; The return object is owned by the cache instance. ; Definition at line 93 of file RooExpensiveObjectCache.cxx. ◆ setObj(). bool RooExpensiveObjectCache::setObj ; (; Int_t ; uid, . TObject * ; obj . ). Place new payload object in cache element with given unique ID. ; Cache will take ownership of provided object! ; Definition at line 148 of file RooExpensiveObjectCache.cxx. ◆ size(). Int_t RooExpensiveObjectCache::size ; (; ); const. inline . Definition at line 43 of file RooExpensiveObjectCache.h. ◆ Streamer(). void RooExpensiveObjectCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooExpensiveObjectCache::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file RooExpensiveObjectCache.h. Member Data Documentation. ◆ _map. std::map<TString,ExpensiveObject*> RooExpensiveObjectCache::_map. protected . Definition at line 78 of file RooExpensiveObjectCache.h. ◆ _nextUID. Int_t RooExpensiveObjectCache::_nextUID = 0. protected . Definition at line 76 of file RooExpensiveObjectCache.h. Libraries for RooExpensiveObjectCache:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooExpensiveObjectCache.h; roofit/roofitcore/src/RooExpensiveObjectCache.cxx. RooExpensiveObjectCache. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExpensiveObjectCache.html:16873,Guid,Guide,16873,doc/master/classRooExpensiveObjectCache.html,https://root.cern,https://root.cern/doc/master/classRooExpensiveObjectCache.html,1,['Guid'],['Guide']
Usability,"rs(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGaussModel.html:3461,clear,clearShapeDirty,3461,root/html534/RooGaussModel.html,https://root.cern,https://root.cern/root/html534/RooGaussModel.html,9,['clear'],['clearShapeDirty']
Usability,"rs); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; static Bool_tfAlwaysReuseNll; boolfFirstEval; RooNLLVar*fNllAlt! transient copy of the alt NLL; RooNLLVar*fNllNull! transient copy of the null NLL; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; Bool_tfReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters). virtual ~SimpleLikelihoodRatioTestStat(). void SetAlwaysReuseNLL(Bool_t flag); { fAlwaysReuseNll = flag ; }. void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. void SetNullParameters(const RooArgSet& nullParameters). void SetAltParameters(const RooArgSet& altParameters). bool ParamsAreEqual(). Double_t Evaluate(RooAbsData& data, RooArgSet& nullPOI). const TString GetVarName() const. » Author: Kyle Cranmer and Sven Kreiss June 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: SimpleLikelihoodRatioTestStat.h 42339 2011-11-30 23:54:18Z moneta $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html:2054,Simpl,SimpleLikelihoodRatioTestStat,2054,root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html532/RooStats__SimpleLikelihoodRatioTestStat.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"rs, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:6900,clear,clearShapeDirty,6900,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,2,['clear'],['clearShapeDirty']
Usability,"rs,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:17882,Simpl,Simple,17882,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,rs.cxx;  Executors.h;  MethodProxy.cxx;  MethodProxy.h;  ObjectProxy.cxx;  ObjectProxy.h;  PropertyProxy.cxx;  PropertyProxy.h;  PyCallable.h;  PyROOT.h;  PyRootType.cxx;  PyRootType.h;  PyStrings.cxx;  PyStrings.h;  Pythonize.cxx;  Pythonize.h;  RootModule.cxx;  RootWrapper.cxx;  RootWrapper.h;  TCallContext.cxx;  TCallContext.h;  TClassMethodHolder.cxx;  TClassMethodHolder.h;  TConstructorHolder.cxx;  TConstructorHolder.h;  TCustomPyTypes.cxx;  TCustomPyTypes.h;  TemplateProxy.cxx;  TemplateProxy.h;  TFunctionHolder.cxx;  TFunctionHolder.h;  TMemoryRegulator.cxx;  TMemoryRegulator.h;  TMethodHolder.cxx;  TMethodHolder.h;  TPyArg.cxx;  TPyBufferFactory.cxx;  TPyBufferFactory.h;  TPyClassGenerator.cxx;  TPyClassGenerator.h;  TPyDispatcher.cxx;  TPyException.cxx;  TPyFitFunction.cxx;  TPyReturn.cxx;  TPyROOTApplication.cxx;  TPySelector.cxx;  TPython.cxx;  TSetItemHolder.cxx;  TSetItemHolder.h;  TTupleOfInstances.cxx;  TTupleOfInstances.h;  Utility.cxx;  Utility.h;  ► r;  ► doc;  users-guide;  ► inc;  RExports.h;  TRDataFrame.h;  TRDataFrame__ctors.h;  TRFunctionExport.h;  TRFunctionImport.h;  TRFunctionImport__oprtr.h;  TRInterface.h;  TRInterface_Binding.h;  TRInternalFunction.h;  TRInternalFunction__ctors.h;  TRObject.h;  ► src;  RExports.cxx;  TRCompletion.cxx;  TRCompletion.h;  TRDataFrame.cxx;  TRFunctionExport.cxx;  TRFunctionImport.cxx;  TRInterface.cxx;  TRObject.cxx;  ► tests;  Binding.C;  Class.C;  DataFrame.C;  Exception.C;  ExpClass.C;  Functions.C;  Functor.C;  FunModule.C;  Object.C;  Proxy.C;  ROOTR.C;  ► core;  ► base;  ► doc;  ► macros;  fillpatterns.C;  fonts.C;  textalign.C;  textangle.C;  ► inc;  ► ROOT;  RConfig.h;  RConfig.hxx;  StringConv.hxx;  TExecutor.hxx;  TSequentialExecutor.hxx;  Bswapcpy.h;  Buttons.h;  Bytes.h;  Byteswap.h;  CommandLineOptionsHelp.h;  DllImport.h;  GLConstants.h;  Gtypes.h;  GuiTypes.h;  Htypes.h;  KeySymbols.h;  LinkDef1.h;  LinkDef2.h;  LinkDef3.h;  Match.h;  MessageTypes.h;  RConfig.h;  Riostream.h;  Rpair.h;  RQ_OBJ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:1415,guid,guide,1415,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['guid'],['guide']
Usability,"rsion_t TJSONStackObj::fClVersion {0}. custom structure for stl container reading ; Definition at line 358 of file TBufferJSON.cxx. ◆ fElem. TStreamerElement* TJSONStackObj::fElem {nullptr}. Definition at line 344 of file TBufferJSON.cxx. ◆ fIndx. std::unique_ptr<TArrayIndexProducer> TJSONStackObj::fIndx. indent level ; Definition at line 355 of file TBufferJSON.cxx. ◆ fInfo. TStreamerInfo* TJSONStackObj::fInfo {nullptr}. Definition at line 343 of file TBufferJSON.cxx. ◆ fIsElemOwner. Bool_t TJSONStackObj::fIsElemOwner {kFALSE}. Definition at line 346 of file TBufferJSON.cxx. ◆ fIsObjStarted. Bool_t TJSONStackObj::fIsObjStarted {kFALSE}. indicate that value is written ; Definition at line 348 of file TBufferJSON.cxx. ◆ fIsPostProcessed. Bool_t TJSONStackObj::fIsPostProcessed {kFALSE}. Definition at line 347 of file TBufferJSON.cxx. ◆ fIsStreamerInfo. Bool_t TJSONStackObj::fIsStreamerInfo {kFALSE}. element in streamer info ; Definition at line 345 of file TBufferJSON.cxx. ◆ fLevel. Int_t TJSONStackObj::fLevel {0}. pointer on members counter, can be inherit from parent stack objects ; Definition at line 354 of file TBufferJSON.cxx. ◆ fMemberCnt. int TJSONStackObj::fMemberCnt {1}. raw values ; Definition at line 352 of file TBufferJSON.cxx. ◆ fMemberPtr. int* TJSONStackObj::fMemberPtr {nullptr}. count number of object members, normally _typename is first member ; Definition at line 353 of file TBufferJSON.cxx. ◆ fNode. nlohmann::json* TJSONStackObj::fNode {nullptr}. producer of ndim indexes ; Definition at line 356 of file TBufferJSON.cxx. ◆ fStlRead. std::unique_ptr<StlRead> TJSONStackObj::fStlRead. JSON node, used for reading. ; Definition at line 357 of file TBufferJSON.cxx. ◆ fValues. std::vector<std::string> TJSONStackObj::fValues. enable base64 coding when writing array ; Definition at line 351 of file TBufferJSON.cxx. io/io/src/TBufferJSON.cxx. TJSONStackObj. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:16077,Guid,Guide,16077,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,1,['Guid'],['Guide']
Usability,"rsion_t TObjectSpy::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 48 of file TObjectSpy.h. ◆ DeclFileName(). static const char * TObjectSpy::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 48 of file TObjectSpy.h. ◆ GetObject(). TObject * TObjectSpy::GetObject ; (; ); const. inline . Definition at line 45 of file TObjectSpy.h. ◆ IsA(). TClass * TObjectSpy::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 48 of file TObjectSpy.h. ◆ operator=(). TObjectSpy & TObjectSpy::operator= ; (; const TObjectSpy & ; s). privatedelete . ◆ RecursiveRemove(). void TObjectSpy::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Sets the object pointer to zero if the object is deleted in the RecursiveRemove() operation. ; Reimplemented from TObject.; Definition at line 68 of file TObjectSpy.cxx. ◆ SetObject(). void TObjectSpy::SetObject ; (; TObject * ; obj, . Bool_t ; fixMustCleanupBit = kTRUE . ). Set obj as the spy target. ; Definition at line 79 of file TObjectSpy.cxx. ◆ Streamer(). void TObjectSpy::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TObjectSpy::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TObjectSpy.h. Member Data Documentation. ◆ fObj. TObject* TObjectSpy::fObj. protected . Definition at line 37 of file TObjectSpy.h. ◆ fResetMustCleanupBit. Bool_t TObjectSpy::fResetMustCleanupBit. protected . Definition at line 38 of file TObjectSpy.h. Libraries for TObjectSpy:. [legend]; The documentation for this class was generated from the following files:; core/gui/inc/TObjectSpy.h; core/gui/src/TObjectSpy.cxx. TObjectSpy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectSpy.html:13594,Guid,Guide,13594,doc/master/classTObjectSpy.html,https://root.cern,https://root.cern/doc/master/classTObjectSpy.html,1,['Guid'],['Guide']
Usability,"rsion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Public Attributes inherited from TGFrameElement; TGFrame * fFrame;  ; TGLayoutHints * fLayout;  ; Int_t fState;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TGLBFrameElement:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGLBFrameElement(). TGLBFrameElement::TGLBFrameElement ; (; TGFrame * ; f, . TGLayoutHints * ; l . ). inline . Definition at line 457 of file TGListBox.cxx. ◆ ~TGLBFrameElement(). TGLBFrameElement::~TGLBFrameElement ; (; ). inlineoverride . Definition at line 458 of file TGListBox.cxx. Member Function Documentation. ◆ Compare(). Int_t TGLBFrameElement::Compare ; (; const TObject * ; obj); const. inlineoverridevirtual . Compare abstract method. ; Must be overridden if a class wants to be able to compare itself with other objects. Must return -1 if this is smaller than obj, 0 if objects are equal and 1 if this is larger than obj. ; Reimplemented from TObject.; Definition at line 461 of file TGListBox.cxx. ◆ IsSortable(). Bool_t TGLBFrameElement::IsSortable ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 460 of file TGListBox.cxx. gui/gui/src/TGListBox.cxx. TGLBFrameElement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBFrameElement.html:11256,Guid,Guide,11256,doc/master/classTGLBFrameElement.html,https://root.cern,https://root.cern/doc/master/classTGLBFrameElement.html,1,['Guid'],['Guide']
Usability,"rst ; (; TObject * ; obj, . Option_t * ; opt = """", . Bool_t ; modified = kTRUE . ). overridevirtual . Add an object as first in list of primitives with speicified draw option When. ; modified set to kTRUE (default) pad will be marked as modifiedLet avoid usage of gPad when drawing object(s) in canvas or in subpads. ; Implements TVirtualPad.; Definition at line 439 of file TPad.cxx. ◆ AutoExec(). void TPad::AutoExec ; (; ). virtual . Execute the list of Execs when a pad event occurs. ; Definition at line 508 of file TPad.cxx. ◆ Browse(). void TPad::Browse ; (; TBrowser * ; b). overridevirtual . Browse pad. ; Reimplemented from TObject.; Definition at line 523 of file TPad.cxx. ◆ BuildLegend(). TLegend * TPad::BuildLegend ; (; Double_t ; x1 = 0.3, . Double_t ; y1 = 0.21, . Double_t ; x2 = 0.3, . Double_t ; y2 = 0.21, . const char * ; title = """", . Option_t * ; option = """" . ). overridevirtual . Build a legend from the graphical objects in the pad. ; A simple method to build automatically a TLegend from the primitives in a TPad.; Only those deriving from TAttLine, TAttMarker and TAttFill are added, excluding TPave and TFrame derived classes.; ReturnsThe built TLegend; Parameters. [in]x1,y1,x2,y2The TLegend coordinates ; [in]titleThe legend title. By default it is "" "" ; [in]optionThe TLegend option. The caller program owns the returned TLegend.; If the pad contains some TMultiGraph or THStack the individual graphs or histograms in them are added to the TLegend. Automatic placement of the legend; If x1 is equal to x2 and y1 is equal to y2 the legend will be automatically placed to avoid overlapping with the existing primitives already displayed. x1 is considered as the width of the legend and y1 the height. By default the legend is automatically placed with width = x1= x2 = 0.3 and height = y1= y2 = 0.21. ; Implements TVirtualPad.; Definition at line 555 of file TPad.cxx. ◆ cd(). TVirtualPad * TPad::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set Current pad. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:58707,simpl,simple,58707,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['simpl'],['simple']
Usability,rt ; (; ). inline . Definition at line 275 of file TProof.h. ◆ GetWorkers(). TList * TMergerInfo::GetWorkers ; (; ). inline . Definition at line 272 of file TProof.h. ◆ GetWorkersToMerge(). Int_t TMergerInfo::GetWorkersToMerge ; (; ). inline . Definition at line 277 of file TProof.h. ◆ IsA(). TClass * TMergerInfo::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 290 of file TProof.h. ◆ IsActive(). Bool_t TMergerInfo::IsActive ; (; ). inline . Definition at line 288 of file TProof.h. ◆ operator=(). TMergerInfo & TMergerInfo::operator= ; (; const TMergerInfo & ; ). private . ◆ SetMergedWorker(). void TMergerInfo::SetMergedWorker ; (; ). Increase number of already merged workers by 1. ; Definition at line 298 of file TProof.cxx. ◆ Streamer(). void TMergerInfo::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMergerInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 290 of file TProof.h. Member Data Documentation. ◆ fIsActive. Bool_t TMergerInfo::fIsActive. private . Definition at line 260 of file TProof.h. ◆ fMergedObjects. Int_t TMergerInfo::fMergedObjects. private . Definition at line 252 of file TProof.h. ◆ fMergedWorkers. Int_t TMergerInfo::fMergedWorkers. private . Definition at line 256 of file TProof.h. ◆ fMerger. TSlave* TMergerInfo::fMerger. private . Definition at line 250 of file TProof.h. ◆ fPort. Int_t TMergerInfo::fPort. private . Definition at line 251 of file TProof.h. ◆ fWorkers. TList* TMergerInfo::fWorkers. private . Definition at line 259 of file TProof.h. ◆ fWorkersToMerge. Int_t TMergerInfo::fWorkersToMerge. private . Definition at line 254 of file TProof.h. proof/proof/inc/TProof.h; proof/proof/src/TProof.cxx. TMergerInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMergerInfo.html:15145,Guid,Guide,15145,doc/master/classTMergerInfo.html,https://root.cern,https://root.cern/doc/master/classTMergerInfo.html,1,['Guid'],['Guide']
Usability,"rt); RooWorkspace(const char* name, const char* title = 0); virtual~RooWorkspace(); voidTObject::AbstractMethod(const char* method) const; static voidaddClassDeclImportDir(const char* dir); static voidaddClassImplImportDir(const char* dir); Bool_taddStudy(RooAbsStudy& study); RooArgSetallCatFunctions() const; RooArgSetallCats() const; list<RooAbsData*>allData() const; RooArgSetallFunctions() const; list<TObject*>allGenericObjects() const; RooArgSetallPdfs() const; RooArgSetallResolutionModels() const; RooArgSetallVars() const; virtual voidTObject::AppendPad(Option_t* option = """"); RooAbsArg*arg(const char* name) const; RooArgSetargSet(const char* nameList) const; static voidautoImportClassCode(Bool_t flag); virtual voidTObject::Browse(TBrowser* b); Bool_tcancelTransaction(); RooCategory*cat(const char* name) const; RooAbsCategory*catfunc(const char* name) const; Bool_tcd(const char* path = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearStudies(); virtual TObject*TNamed::Clone(const char* newname = """") const; Bool_tcommitTransaction(); virtual Int_tTNamed::Compare(const TObject* obj) const; TIterator*componentIterator() const; const RooArgSet&components() const; virtual voidTNamed::Copy(TObject& named) const; RooAbsData*data(const char* name) const; Bool_tdefineSet(const char* name, const char* contentList); Bool_tdefineSet(const char* name, const RooArgSet& aset, Bool_t importMissing = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace.html:2417,Clear,Clear,2417,root/html526/RooWorkspace.html,https://root.cern,https://root.cern/root/html526/RooWorkspace.html,4,['Clear'],['Clear']
Usability,"rt[0], fNpoints);; 982 Double_t result = s.Eval(x);; 983 return result;; 984 }; 985 }; 986 //linear interpolation; 987 //In case x is < fX[0] or > fX[fNpoints-1] return the extrapolated point; 988 ; 989 //find points in graph around x assuming points are not sorted; 990 // (if point are sorted use a binary search); 991 Int_t low = -1;; 992 Int_t up = -1;; 993 if (TestBit(TGraph::kIsSortedX) ) {; 994 low = TMath::BinarySearch(fNpoints, fX, x);; 995 if (low == -1) {; 996 // use first two points for doing an extrapolation; 997 low = 0;; 998 }; 999 if (fX[low] == x) return fY[low];; 1000 if (low == fNpoints-1) low--; // for extrapolating; 1001 up = low+1;; 1002 }; 1003 else {; 1004 // case TGraph is not sorted; 1005 ; 1006 // find neighbours simply looping all points; 1007 // and find also the 2 adjacent points: (low2 < low < x < up < up2 ); 1008 // needed in case x is outside the graph ascissa interval; 1009 Int_t low2 = -1;; 1010 Int_t up2 = -1;; 1011 ; 1012 for (Int_t i = 0; i < fNpoints; ++i) {; 1013 if (fX[i] < x) {; 1014 if (low == -1 || fX[i] > fX[low]) {; 1015 low2 = low;; 1016 low = i;; 1017 } else if (low2 == -1) low2 = i;; 1018 } else if (fX[i] > x) {; 1019 if (up == -1 || fX[i] < fX[up]) {; 1020 up2 = up;; 1021 up = i;; 1022 } else if (up2 == -1) up2 = i;; 1023 } else // case x == fX[i]; 1024 return fY[i]; // no interpolation needed; 1025 }; 1026 ; 1027 // treat cases when x is outside graph min max abscissa; 1028 if (up == -1) {; 1029 up = low;; 1030 low = low2;; 1031 }; 1032 if (low == -1) {; 1033 low = up;; 1034 up = up2;; 1035 }; 1036 }; 1037 // do now the linear interpolation; 1038 assert(low != -1 && up != -1);; 1039 ; 1040 if (fX[low] == fX[up]) return fY[low];; 1041 Double_t yn = fY[up] + (x - fX[up]) * (fY[low] - fY[up]) / (fX[low] - fX[up]);; 1042 return yn;; 1043}; 1044 ; 1045////////////////////////////////////////////////////////////////////////////////; 1046/// Execute action corresponding to one event.; 1047///; 1048/// This member function is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:33318,simpl,simply,33318,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['simpl'],['simply']
Usability,"rtainty ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1144 of file TUnfoldSys.cxx. ◆ GetEmatrixSysBackgroundUncorr(). void TUnfoldSys::GetEmatrixSysBackgroundUncorr ; (; TH2 * ; ematrix, . const char * ; source, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from background uncorrelated uncertainty ; Parameters. [in]ematrixoutput histogram ; [in]sourceidentifier of the background source ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram. this method returns the covariance contributions to the unfolding result arising from the background source source and the uncorrelated (background histogram uncertainties). Also see method SubtractBackground() ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1229 of file TUnfoldSys.cxx. ◆ GetEmatrixSysSource(). void TUnfoldSys::GetEmatrixSysSource ; (; TH2 * ; ematrix, . const char * ; name, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). covariance contribution from a systematic variation of the response matrix ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]nameidentifier of the systematic variation ; [in]binMap(default=nullptr) remapping of histogram bins ; [in]clearEmat(default=true) if true, clear the histogram prior to adding the covariance matrix contribution. Returns the covariance matrix contribution from shifting the given uncertainty source within one sigma ; the array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 1113 of file TUnfoldSys.cxx. ◆ GetEmatrixSysTau(). void TUnfoldSys::GetEmatrixSysTau ; (; TH2 * ; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:39967,clear,clearEmat,39967,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['clear'],['clearEmat']
Usability,"rticle database; TDatime Date and time 950130 124559; TDecayChannel Class describing a particle decay channel; TDecompBK Matrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictionary ABC defining interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBoxSet Collection of 3D primitives (fixed-size boxes, boxes of different sizes, or arbitrary sexto-epipeds); each primitive can be assigned a signal value and a TRef.; TEveBoxSetGL GL-renderer for TEveBoxSet class.; TEveBrowser Specialization of TRootBrowser for Eve.; TEveCalo2D Class for visualization of projected calorimeter event data.; TEveCalo2DGL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:53138,feedback,feedback,53138,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['feedback'],['feedback']
Usability,"rtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 311 of file TS3WebFile.cxx. ◆ SetAccessKey(). void TS3WebFile::SetAccessKey ; (; const TString & ; accessKey). inlineprotected . Definition at line 83 of file TS3WebFile.h. ◆ SetMsgReadBuffer10(). void TS3WebFile::SetMsgReadBuffer10 ; (; const char * ; redirectLocation = nullptr, . Bool_t ; tempRedirect = kFALSE . ). overrideprotectedvirtual . Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET request compliant to the authentication mechanism used by the S3 protocol. ; The GET request must contain an ""Authorization"" header with the signature of the request, generated using the user's secret access key. ; Reimplemented from TWebFile.; Definition at line 301 of file TS3WebFile.cxx. ◆ SetSecretKey(). void TS3WebFile::SetSecretKey ; (; const TString & ; secretKey). inlineprotected . Definition at line 84 of file TS3WebFile.h. ◆ Streamer(). void TS3WebFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile. ◆ StreamerNVirtual(). void TS3WebFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 105 of file TS3WebFile.h. Member Data Documentation. ◆ fS3Request. TS3HTTPRequest TS3WebFile::fS3Request. protected . Definition at line 87 of file TS3WebFile.h. ◆ fUseMultiRange. Bool_t TS3WebFile::fUseMultiRange. protected . Definition at line 88 of file TS3WebFile.h. Libraries for TS3WebFile:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TS3WebFile.h; net/net/src/TS3WebFile.cxx. TS3WebFile. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:57307,Guid,Guide,57307,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['Guid'],['Guide']
Usability,"rtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGSplitFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 139 of file TGSplitFrame.h. ◆ SwallowBack(). void TGSplitFrame::SwallowBack ; (; ). Swallow back the child frame previously extracted, and close its parent (transient frame). ; Definition at line 631 of file TGSplitFrame.cxx. ◆ SwitchFrames(). void TGSplitFrame::SwitchFrames ; (; TGFrame * ; frame, . TGCompositeFrame * ; dest, . TGFrame * ; prev . ). static . Switch (exchange) two frames. ; frame is the source, dest is the destination (the new parent) prev is the frame that has to be exchanged with the source (the one actually in the destination) ; Definition at line 659 of file TGSplitFrame.cxx. ◆ SwitchToMain(). void TGSplitFrame::SwitchToMain ; (; ). Switch the actual embedded frame to the main (first) split frame. ; Definition at line 699 of file TGSplitFrame.cxx. ◆ Undocked(). void TGSplitFrame::Undocked ; (; TGFrame * ; frame). Emit Undocked() signal. ; Definition at line 711 of file TGSplitFrame.cxx. ◆ UnSplit(). void TGSplitFrame::UnSplit ; (; const char * ; which). Close (unmap and remove from the list of frames) the frame contained in this split frame. ; Definition at line 720 of file TGSplitFrame.cxx. ◆ VSplit(). void TGSplitFrame::VSplit ; (; UInt_t ; w = 0). virtual . Vertically split the frame. ; Definition at line 452 of file TGSplitFrame.cxx. Member Data Documentation. ◆ fFirst. TGSplitFrame* TGSplitFrame::fFirst. protected . Pointer to the first child (if any) ; Definition at line 87 of file TGSplitFrame.h. ◆ fFrame. TGFrame* TGSplitFrame::fFrame. protected . Pointer to the embedded frame (if any) ; Definition at line 84 of file TGSplitFrame.h. ◆ fHRatio. Float_t TGSplitFrame::fHRatio. protected . Height ratio between the first child and this. ; Definition at line 91 of file TGSplitFrame.h. ◆ fSecond. TGSplitFrame* TGSplitFrame::fSecond. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitFrame.html:40977,Undo,Undocked,40977,doc/master/classTGSplitFrame.html,https://root.cern,https://root.cern/doc/master/classTGSplitFrame.html,1,['Undo'],['Undocked']
Usability,"rtual Int_t GetNpaves() {return fNpaves;}; 31 void Paint(Option_t *option="""") override;; 32 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 33 virtual void SetNpaves(Int_t npaves=5) {fNpaves=npaves;} // *MENU*; 34 ; 35 ClassDefOverride(TPavesText,1) //Stacked Paves with text strings; 36};; 37 ; 38#endif; 39 ; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TPaveText.h; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPavesTextA PaveText (see TPaveText) with several stacked paves.Definition TPavesText.h:18; TPavesText::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TPavesText.cxx:120; TPavesText::Paintvoid Paint(Option_t *option="""") overridePaint this pavestext with its current attributes.Definition TPavesText.cxx:88; TPavesText::GetNpavesvirtual Int_t GetNpaves()Definition TPavesText.h:30; TPavesText::~TPavesText~TPavesText() overridePavestext default destructor.Definition TPavesText.cxx:60; TPavesText::fNpavesInt_t fNpavesNumber of stacked paves.Definition TPavesText.h:21; TPavesText::SetNpavesvirtual void SetNpaves(Int_t npaves=5)Definition TPavesText.h:33; TPavesText::TPavesTextTPavesText()Pavestext default constructor.Definition TPavesText.cxx:33; double; int; Drawth1 Draw(). graf2dgrafincTPavesText.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPavesText_8h_source.html:3011,Guid,Guide,3011,doc/master/TPavesText_8h_source.html,https://root.cern,https://root.cern/doc/master/TPavesText_8h_source.html,1,['Guid'],['Guide']
Usability,"rtual Option_t * GetAddOption() constDefinition TList.h:148; TObjLink::fObjectTObject * fObjectDefinition TList.h:134; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjLink::NextSPTObjLinkPtr_t NextSP()Definition TList.h:153; TObjLink::TObjLinkTObjLink(TObject *obj)Definition TList.h:142; TObjLink::TObjLinkTObjLink(const TObjLink &)=delete; TObjLink::GetOptionvirtual Option_t * GetOption() constDefinition TList.h:149; TObjLink::fPrevTObjLinkWeakPtr_t fPrevDefinition TList.h:132; TObjLink::~TObjLinkvirtual ~TObjLink()Definition TList.h:143; TObjLink::NextTObjLink * Next()Definition TList.h:151; TObjLink::fNextTObjLinkPtr_t fNextDefinition TList.h:131; TObjLink::PrevSPTObjLinkPtr_t PrevSP()Definition TList.h:154; TObjLink::TObjLinkTObjLink()=delete; TObjLink::TObjLinkWeakPtr_tstd::weak_ptr< TObjLink > TObjLinkWeakPtr_tDefinition TList.h:129; TObjLink::operator=TObjLink & operator=(const TObjLink &)=delete; TObjOptLinkDefinition TList.h:166; TObjOptLink::SetOptionvoid SetOption(Option_t *option) overrideDefinition TList.h:176; TObjOptLink::fOptionTString fOptionDefinition TList.h:169; TObjOptLink::TObjOptLinkTObjOptLink(TObject *obj, Option_t *opt)Definition TList.h:172; TObjOptLink::~TObjOptLink~TObjOptLink()Definition TList.h:173; TObjOptLink::GetOptionOption_t * GetOption() const overrideDefinition TList.h:175; TObjOptLink::GetAddOptionOption_t * GetAddOption() const overrideDefinition TList.h:174; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetOptionvirtual Option_t * GetOption() constDefinition TObject.h:139; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; bool; int; nconst Int_t nDefinition legend1.C:16; lTLine lDefinition textangle.C:4. corecontincTList.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8h_source.html:19697,Guid,Guide,19697,doc/master/TList_8h_source.html,https://root.cern,https://root.cern/doc/master/TList_8h_source.html,1,['Guid'],['Guide']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE, Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:4237,clear,clearShapeDirty,4237,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:4192,clear,clearShapeDirty,4192,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedReal.html:4264,clear,clearShapeDirty,4264,root/html534/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedReal.html,15,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:4173,clear,clearShapeDirty,4173,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:4128,clear,clearShapeDirty,4128,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsHiddenReal.html:3632,clear,clearShapeDirty,3632,root/html532/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html532/RooAbsHiddenReal.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedReal.html:4200,clear,clearShapeDirty,4200,root/html532/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedReal.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStepFunction.html:3898,clear,clearShapeDirty,3898,root/html532/RooStepFunction.html,https://root.cern,https://root.cern/root/html532/RooStepFunction.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStepFunction.html:4057,clear,clearShapeDirty,4057,root/html534/RooStepFunction.html,https://root.cern,https://root.cern/root/html534/RooStepFunction.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t binnedL = kFAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:4846,clear,clearShapeDirty,4846,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, RooFit::MPSplit, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooXYChi2Var.html:4452,clear,clearShapeDirty,4452,root/html534/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html534/RooXYChi2Var.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, Bool_t = kFALSE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:5378,clear,clearShapeDirty,5378,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t = kFALSE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataWeightedAverage.html:4219,clear,clearShapeDirty,4219,root/html534/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html534/RooDataWeightedAverage.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNLLVar.html:4673,clear,clearShapeDirty,4673,root/html532/RooNLLVar.html,https://root.cern,https://root.cern/root/html532/RooNLLVar.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooXYChi2Var.html:4293,clear,clearShapeDirty,4293,root/html532/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html532/RooXYChi2Var.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChi2Var.html:5171,clear,clearShapeDirty,5171,root/html532/RooChi2Var.html,https://root.cern,https://root.cern/root/html532/RooChi2Var.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataWeightedAverage.html:4036,clear,clearShapeDirty,4036,root/html532/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html532/RooDataWeightedAverage.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgListcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProduct.html:3557,clear,clearShapeDirty,3557,root/html534/RooProduct.html,https://root.cern,https://root.cern/root/html534/RooProduct.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProduct.html:3503,clear,clearShapeDirty,3503,root/html532/RooProduct.html,https://root.cern,https://root.cern/root/html532/RooProduct.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo1DMomentMorphFunction.html:3530,clear,clearShapeDirty,3530,root/html532/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html532/Roo1DMomentMorphFunction.html,46,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ParamHistFunc.html:3650,clear,clearShapeDirty,3650,root/html534/ParamHistFunc.html,https://root.cern,https://root.cern/root/html534/ParamHistFunc.html,177,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ParamHistFunc.html:3579,clear,clearShapeDirty,3579,root/html532/ParamHistFunc.html,https://root.cern,https://root.cern/root/html532/ParamHistFunc.html,8,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; voidcopyCacheFast(const RooRealVar& other, Bool_t setValDirty = kTRUE); static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealVar.html:3919,clear,clearShapeDirty,3919,root/html534/RooRealVar.html,https://root.cern,https://root.cern/root/html534/RooRealVar.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; voidcopyCacheFast(const RooRealVar& other, Bool_t setValDirty = kTRUE); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealVar.html:3855,clear,clearShapeDirty,3855,root/html532/RooRealVar.html,https://root.cern,https://root.cern/root/html532/RooRealVar.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealMPFE.html:4511,clear,clearShapeDirty,4511,root/html534/RooRealMPFE.html,https://root.cern,https://root.cern/root/html534/RooRealMPFE.html,3,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealMPFE.html:4407,clear,clearShapeDirty,4407,root/html532/RooRealMPFE.html,https://root.cern,https://root.cern/root/html532/RooRealMPFE.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:4078,clear,clearShapeDirty,4078,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,2,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:4033,clear,clearShapeDirty,4033,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,2,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedReal.html:4105,clear,clearShapeDirty,4105,root/html530/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedReal.html,4,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStepFunction.html:3898,clear,clearShapeDirty,3898,root/html530/RooStepFunction.html,https://root.cern,https://root.cern/root/html530/RooStepFunction.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNLLVar.html:4578,clear,clearShapeDirty,4578,root/html528/RooNLLVar.html,https://root.cern,https://root.cern/root/html528/RooNLLVar.html,2,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooXYChi2Var.html:4293,clear,clearShapeDirty,4293,root/html530/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html530/RooXYChi2Var.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooChi2Var.html:5171,clear,clearShapeDirty,5171,root/html530/RooChi2Var.html,https://root.cern,https://root.cern/root/html530/RooChi2Var.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataWeightedAverage.html:4036,clear,clearShapeDirty,4036,root/html530/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html530/RooDataWeightedAverage.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProduct.html:3420,clear,clearShapeDirty,3420,root/html530/RooProduct.html,https://root.cern,https://root.cern/root/html530/RooProduct.html,1,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/PiecewiseInterpolation.html:3555,clear,clearShapeDirty,3555,root/html528/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html528/PiecewiseInterpolation.html,60,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealMPFE.html:4312,clear,clearShapeDirty,4312,root/html528/RooRealMPFE.html,https://root.cern,https://root.cern/root/html528/RooRealMPFE.html,2,['clear'],['clearShapeDirty']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:4148,Clear,Clear,4148,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:4103,Clear,Clear,4103,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedReal.html:4175,Clear,Clear,4175,root/html534/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedReal.html,15,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:4084,Clear,Clear,4084,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t inter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:4039,Clear,Clear,4039,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsHiddenReal.html:3543,Clear,Clear,3543,root/html532/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html532/RooAbsHiddenReal.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedReal.html:4111,Clear,Clear,4111,root/html532/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedReal.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStepFunction.html:3809,Clear,Clear,3809,root/html532/RooStepFunction.html,https://root.cern,https://root.cern/root/html532/RooStepFunction.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStepFunction.html:3968,Clear,Clear,3968,root/html534/RooStepFunction.html,https://root.cern,https://root.cern/root/html534/RooStepFunction.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:4757,Clear,Clear,4757,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, RooFit::MPSplit, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooXYChi2Var.html:4363,Clear,Clear,4363,root/html534/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html534/RooXYChi2Var.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:5289,Clear,Clear,5289,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataWeightedAverage.html:4130,Clear,Clear,4130,root/html534/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html534/RooDataWeightedAverage.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual RooAbsReal*RooAbsRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNLLVar.html:4584,Clear,Clear,4584,root/html532/RooNLLVar.html,https://root.cern,https://root.cern/root/html532/RooNLLVar.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooXYChi2Var.html:4204,Clear,Clear,4204,root/html532/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html532/RooXYChi2Var.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); virtual RooAbsReal*Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChi2Var.html:5082,Clear,Clear,5082,root/html532/RooChi2Var.html,https://root.cern,https://root.cern/root/html532/RooChi2Var.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataWeightedAverage.html:3947,Clear,Clear,3947,root/html532/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html532/RooDataWeightedAverage.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgListcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProduct.html:3468,Clear,Clear,3468,root/html534/RooProduct.html,https://root.cern,https://root.cern/root/html534/RooProduct.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProduct.html:3414,Clear,Clear,3414,root/html532/RooProduct.html,https://root.cern,https://root.cern/root/html532/RooProduct.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo1DMomentMorphFunction.html:3441,Clear,Clear,3441,root/html532/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html532/Roo1DMomentMorphFunction.html,46,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ParamHistFunc.html:3561,Clear,Clear,3561,root/html534/ParamHistFunc.html,https://root.cern,https://root.cern/root/html534/ParamHistFunc.html,177,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ParamHistFunc.html:3490,Clear,Clear,3490,root/html532/ParamHistFunc.html,https://root.cern,https://root.cern/root/html532/ParamHistFunc.html,8,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; voidcopyCacheFast(const RooRealVar& other, Bool_t setValDirty = kTRUE); static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealVar.html:3830,Clear,Clear,3830,root/html534/RooRealVar.html,https://root.cern,https://root.cern/root/html534/RooRealVar.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; voidcopyCacheFast(const RooRealVar& other, Bool_t setValDirty = kTRUE); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealVar.html:3766,Clear,Clear,3766,root/html532/RooRealVar.html,https://root.cern,https://root.cern/root/html532/RooRealVar.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealMPFE.html:4422,Clear,Clear,4422,root/html534/RooRealMPFE.html,https://root.cern,https://root.cern/root/html534/RooRealMPFE.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealMPFE.html:4318,Clear,Clear,4318,root/html532/RooRealMPFE.html,https://root.cern,https://root.cern/root/html532/RooRealMPFE.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsOptTestStatistic.html:3989,Clear,Clear,3989,root/html528/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsOptTestStatistic.html,2,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:3944,Clear,Clear,3944,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,2,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCachedReal.html:4016,Clear,Clear,4016,root/html530/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html530/RooAbsCachedReal.html,4,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStepFunction.html:3809,Clear,Clear,3809,root/html530/RooStepFunction.html,https://root.cern,https://root.cern/root/html530/RooStepFunction.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNLLVar.html:4489,Clear,Clear,4489,root/html528/RooNLLVar.html,https://root.cern,https://root.cern/root/html528/RooNLLVar.html,2,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooXYChi2Var.html:4204,Clear,Clear,4204,root/html530/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html530/RooXYChi2Var.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooChi2Var.html:5082,Clear,Clear,5082,root/html530/RooChi2Var.html,https://root.cern,https://root.cern/root/html530/RooChi2Var.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataWeightedAverage.html:3947,Clear,Clear,3947,root/html530/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html530/RooDataWeightedAverage.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooProduct.html:3331,Clear,Clear,3331,root/html530/RooProduct.html,https://root.cern,https://root.cern/root/html530/RooProduct.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/PiecewiseInterpolation.html:3466,Clear,Clear,3466,root/html528/PiecewiseInterpolation.html,https://root.cern,https://root.cern/root/html528/PiecewiseInterpolation.html,60,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealMPFE.html:4223,Clear,Clear,4223,root/html528/RooRealMPFE.html,https://root.cern,https://root.cern/root/html528/RooRealMPFE.html,2,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProfileLL.html:3826,Clear,Clear,3826,root/html532/RooProfileLL.html,https://root.cern,https://root.cern/root/html532/RooProfileLL.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsRea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProfileLL.html:3985,Clear,Clear,3985,root/html534/RooProfileLL.html,https://root.cern,https://root.cern/root/html534/RooProfileLL.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearAbsMin(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProfileLL.html:3826,Clear,Clear,3826,root/html528/RooProfileLL.html,https://root.cern,https://root.cern/root/html528/RooProfileLL.html,2,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:5487,Clear,Clear,5487,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,1,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:5646,Clear,Clear,5646,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,3,['Clear'],['Clear']
Usability,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvolution.html:5487,Clear,Clear,5487,root/html530/RooNumConvolution.html,https://root.cern,https://root.cern/root/html530/RooNumConvolution.html,1,['Clear'],['Clear']
Usability,"rtual TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"");  This function calculates the background spectrum in this histogram. ;  ; virtual Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05);  Interface to TSpectrum::Search. ;  ; virtual void Smooth (Int_t ntimes=1, Option_t *option="""");  Smooth bin contents of this histogram. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 (Bool_t flag=kTRUE);  Create structure to store sum of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:48781,Clear,Clear,48781,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['Clear'],['Clear']
Usability,"rtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorList.html:1872,Clear,Clear,1872,root/html602/TSelectorList.html,https://root.cern,https://root.cern/root/html602/TSelectorList.html,2,['Clear'],['Clear']
Usability,"rtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveArrow.html:2002,Clear,ClearStamps,2002,root/html528/TEveArrow.html,https://root.cern,https://root.cern/root/html528/TEveArrow.html,2,['Clear'],['ClearStamps']
Usability,"rtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTGPictureButton::CreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGPictureButton::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGButton::EmitSignals(Bool_t wasUp); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGButton::SetToggleButton(Bool_t); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). private:. TGImageMap&operator=(const TGImageMap&); TGImageMap(const TGImageMap&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGImageMap.html:15835,Clear,ClearFlags,15835,root/html602/TGImageMap.html,https://root.cern,https://root.cern/root/html602/TGImageMap.html,2,['Clear'],['ClearFlags']
Usability,"rtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTDataSet::AddMain(TDataSet* set); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidSetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); voidSetGenericType(); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char *const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. enum TTable::EColumnType { kNAN; kFloat; kInt; kLong; kShort; kDouble; kUInt; kULong; kUShort; kUChar; kChar; kPtr; kBool; kEndColumnType; };; enum TTable::ETableBits { kIsNotOwn; };; enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenericTable.html:13616,Clear,Clear,13616,root/html528/TGenericTable.html,https://root.cern,https://root.cern/root/html528/TGenericTable.html,4,['Clear'],['Clear']
Usability,"rtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTDataSet::AddMain(TDataSet* set); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidSetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); voidSetGenericType(); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char*const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. static const char*TTable::fgTypeName[13]; static TDataSet::EDataSetPassTDataSet::kAll; static TDataSet::ESetBitsTDataSet::kArray; static TObject::(anonymous)TObject::kBitMask; static TTable::EColumnTypeTTable::kBool; static TObject::EStatusBitsT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenericTable.html:13839,Clear,Clear,13839,root/html602/TGenericTable.html,https://root.cern,https://root.cern/root/html602/TGenericTable.html,2,['Clear'],['Clear']
Usability,"rtual voidTSelector::SlaveTerminate(); virtual UInt_tTSelectorDraw::SplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSelectorDraw::TakeAction(); virtual voidTSelectorDraw::TakeEstimate(); virtual voidTSelectorDraw::Terminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSelectorDraw::ClearFormula(); virtual Bool_tTSelectorDraw::CompileVariables(const char* varexp = """", const char* selection = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTSelectorDraw::InitArrays(Int_t newsize); voidTObject::MakeZombie(). private:. TEveSelectorToEventList(const TEveSelectorToEventList&); TEveSelectorToEventList&operator=(const TEveSelectorToEventList&). Data Members; public:. enum TSelectorDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tTSelectorDraw::fAction! Action type; Bool_tTSelectorDraw::fCleanElisttrue if original Tree elist must be saved; Long64_tTSelectorDraw::fCurrentSubEntryCurrent subentry when fSelectMultiple is true. Used to fill TEntryListArray; Int_tTSelectorDraw::fDime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveSelectorToEventList.html:7310,Clear,ClearFormula,7310,root/html534/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html534/TEveSelectorToEventList.html,1,['Clear'],['ClearFormula']
Usability,"rtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual void BuildRenderData ();  Write transformation Matrix to render data. ;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual Bool_t CanEditMainTransparency () const;  ; virtual void CheckReferenceCount (const std::string &from=""<unknown>"");  Check external references to this and eventually auto-destruct the render-element. ;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (REveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual REveElement * CloneElement () const;  Clone the element via copy constructor. ;  ; virtual REveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CopyVizParams (const REveElement *el);  Copy visualization parameters from element el. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all child",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html:3252,Clear,ClearStamps,3252,doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REvePointSetArray.html,1,['Clear'],['ClearStamps']
Usability,"rtual void AddElement (REveElement *el);  Add el to the list of children. ;  ; virtual void AddStamp (UChar_t bits);  Add (bitwise or) given stamps to fChangeBits. ;  ; virtual void Annihilate ();  Optimized destruction without check of reference-count. ;  ; virtual void AnnihilateElements ();  Annihilate elements. ;  ; Bool_t ApplyVizTag (const TString &tag, const TString &fallback_tag="""");  Set the VizTag, find model-element from the VizDB and copy visualization-parameters from it. ;  ; virtual void BuildRenderData ();  Write transformation Matrix to render data. ;  ; virtual Bool_t CanEditElement () const;  ; virtual Bool_t CanEditMainColor () const;  ; virtual Bool_t CanEditMainTrans () const;  ; virtual Bool_t CanEditMainTransparency () const;  ; virtual void CheckReferenceCount (const std::string &from=""<unknown>"");  Check external references to this and eventually auto-destruct the render-element. ;  ; virtual void ClearStamps ();  ; virtual void CloneChildrenRecurse (REveElement *dest, Int_t level=0) const;  Clone children and attach them to the dest element. ;  ; virtual REveElement * CloneElement () const;  Clone the element via copy constructor. ;  ; virtual REveElement * CloneElementRecurse (Int_t level=0) const;  Clone elements and recurse 'level' deep over children. ;  ; virtual void CopyVizParamsFromDB ();  Copy visualization parameters from the model-element fVizModel. ;  ; void CSCApplyMainColorToAllChildren ();  ; void CSCApplyMainColorToMatchingChildren ();  ; void CSCApplyMainTransparencyToAllChildren ();  ; void CSCApplyMainTransparencyToMatchingChildren ();  ; void CSCImplySelectAllChildren ();  ; void CSCTakeMotherAsMaster ();  ; void DecDenyDestroy ();  Decreases the deny-destroy count of the element. ;  ; void DecImpliedSelected ();  ; virtual void Destroy ();  Destroy this element. ;  ; virtual void DestroyElements ();  Destroy all children of this element. ;  ; virtual void DestroyMainTrans ();  Destroy the main transformation matrix, it w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html:5468,Clear,ClearStamps,5468,doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrackList.html,1,['Clear'],['ClearStamps']
Usability,rtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public Attributes; class TMVA::Config::IONames fIONames;  ; class TMVA::Config::VariablePlotting fVariablePlotting;  . Protected Attributes; Executor fExecutor;  . Private Member Functions;  Config ();  constructor - set defaults ;  ;  Config (const Config &);  ; virtual ~Config ();  destructor ;  ; MsgLogger & Log () const;  ; Config & operator= (const Config &);  . Private Attributes; std::atomic< Bool_t > fDrawProgressBar;  draw progress bar to indicate training evolution ;  ; MsgLogger * fLogger;  ! message logger ;  ; std::atomic< UInt_t > fNWorkers;  Default number of workers for multi-process jobs. ;  ; std::atomic< Bool_t > fSilent;  no output at all ;  ; std::atomic< Bool_t > fUseColoredConsole;  coloured standard output ;  ; std::atomic< Bool_t > fWriteOptionsReference;  if set true: Configurable objects write file with option reference ;  . Static Private Attributes; static std::atomic< Config * > fgConfigPtr { 0 };  . #include <TMVA/Config.h>; Constructor & Destructor Documentation. ◆ Config() [1/2]. TMVA::Config::Config ; (; ). private . constructor - set defaults ; Definition at line 51 of file Config.cxx. ◆ Config() [2/2]. TMVA::Config::Config ; (; const Config & ; ). private . ◆ ~Config(). TMVA::Config::~Config ; (; ). privatevirtual . destructor ; Definition at line 82 of file Config.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Config::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const ch,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Config.html:2428,progress bar,progress bar,2428,doc/master/classTMVA_1_1Config.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html,1,['progress bar'],['progress bar']
Usability,"rtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetTitle(const char *title) overrideTHnBasevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTHnvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)THninline; Sumw2() overrideTHnvirtual; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; THn()=defaultTHnprotected; THn(const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax)THnprotected; THn(const char *name, const char *title, Int_t dim, const Int_t *nbins, const std::vector< std::vector< double > > &xbins)THnprotected; THnBase()THnBaseinlineprotected; THnBase(const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax)THnBaseprotected; THnBase(const char *name, const char *title, Int_t dim, const Int_t *nbins, const std::vector< std::vector< double > > &xbins)THnBaseprotected; THnBase(const THnBase &other)THnBaseprotected; THnBase(THnBase &&other)THnBaseprotected; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UpdateXStat(const Double_t *x, Double_t w=1.)THnBaseinlineprotected; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~THn() overrideTHn; ~THnBase() overrideTHnBase; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn-members.html:12156,Guid,Guide,12156,doc/master/classTHn-members.html,https://root.cern,https://root.cern/doc/master/classTHn-members.html,1,['Guid'],['Guide']
Usability,"rtualGLProxy.cxx:39; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TNtuple.h; TParallelCoordRange.h; TParallelCoordVar.h; TParallelCoord.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; TStyle.h; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TColor::SetAlphavirtual void SetAlpha(Float_t a)Definition TColor.h:70; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TParallelCoordVarTParallelCoord axes.Definition TParallelCoordVar.h:24; TParallelCoordVar::SetHistogramHeightvoid SetHistogramHeight(Double_t h=0)Set the height of the bar histogram.Definition TParallelCoordVar.cxx:892; TParallelCoordVar::Drawvoid Draw(Option_t *option="""") overrideDraw the axis.Definition TParallelCoordVar.cxx:150; TParallelCoordParallel Coordinates class.Definition TParallelCoord.h:28; TParallelCoord::SetLineColorvoid SetLineColor(Color_t col)Definition TParallelCoord.h:127; TParallelCoord::GetVarListTList * GetVarList()Definition TParallelCoord.h:102; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gl_2parallelcoordtrans_8C.html:5677,simpl,simple,5677,doc/master/gl_2parallelcoordtrans_8C.html,https://root.cern,https://root.cern/doc/master/gl_2parallelcoordtrans_8C.html,2,['simpl'],['simple']
Usability,"rtualPad * GetPadSave () const override;  ; TObject * GetSelected () const override;  ; Option_t * GetSelectedOpt () const;  ; TVirtualPad * GetSelectedPad () const override;  ; Int_t GetSelectedX () const;  ; Int_t GetSelectedY () const;  ; Bool_t GetShowEditor () const;  ; Bool_t GetShowEventStatus () const;  ; Bool_t GetShowToolBar () const;  ; Bool_t GetShowToolTips () const;  ; UInt_t GetWh () const override;  ; UInt_t GetWindowHeight () const;  ; Int_t GetWindowTopX ();  Returns current top x position of window on screen. ;  ; Int_t GetWindowTopY ();  Returns current top y position of window on screen. ;  ; UInt_t GetWindowWidth () const;  ; UInt_t GetWw () const override;  ; Size_t GetXsizeReal () const;  ; Size_t GetXsizeUser () const;  ; Size_t GetYsizeReal () const;  ; Size_t GetYsizeUser () const;  ; virtual void HandleInput (EEventType button, Int_t x, Int_t y);  Handle Input Events. ;  ; Bool_t HasMenuBar () const;  ; virtual void HighlightConnect (const char *slot);  This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot. ;  ; virtual void Highlighted (TVirtualPad *pad, TObject *obj, Int_t x, Int_t y);  Emit Highlighted() signal. ;  ; void Iconify ();  Iconify canvas. ;  ; Bool_t IsBatch () const override;  ; Bool_t IsDrawn () const;  ; Bool_t IsFolder () const override;  Is folder ? ;  ; Bool_t IsGrayscale ();  Check whether this canvas is to be drawn in grayscale mode. ;  ; Bool_t IsRetained () const override;  ; Bool_t IsUpdated () const;  ; Bool_t IsWeb () const override;  Is web canvas. ;  ; void ls (Option_t *option="""") const override;  List all pads. ;  ; void MoveOpaque (Int_t set=1);  Set option to move objects/pads in a canvas. ;  ; Bool_t OpaqueMoving () const override;  ; Bool_t OpaqueResizing () const override;  ; void Paint (Option_t *option="""") override;  Paint canvas. ;  ; virtual TPad * Pick (Int_t px, Int_t py, TObject *prevSelObj);  Prepare for pick, call TPad::Pick() and when selected object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:6102,simpl,simplification,6102,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,2,['simpl'],['simplification']
Usability,"rtualPad * GetPadSave () const override;  ; TObject * GetSelected () const override;  ; Option_t * GetSelectedOpt () const;  ; TVirtualPad * GetSelectedPad () const override;  ; Int_t GetSelectedX () const;  ; Int_t GetSelectedY () const;  ; Bool_t GetShowEditor () const;  ; Bool_t GetShowEventStatus () const;  ; Bool_t GetShowToolBar () const;  ; Bool_t GetShowToolTips () const;  ; UInt_t GetWh () const override;  ; UInt_t GetWindowHeight () const;  ; Int_t GetWindowTopX ();  Returns current top x position of window on screen. ;  ; Int_t GetWindowTopY ();  Returns current top y position of window on screen. ;  ; UInt_t GetWindowWidth () const;  ; UInt_t GetWw () const override;  ; Size_t GetXsizeReal () const;  ; Size_t GetXsizeUser () const;  ; Size_t GetYsizeReal () const;  ; Size_t GetYsizeUser () const;  ; virtual void HandleInput (EEventType button, Int_t x, Int_t y);  Handle Input Events. ;  ; Bool_t HasMenuBar () const;  ; virtual void HighlightConnect (const char *slot);  This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot. ;  ; virtual void Highlighted (TVirtualPad *pad, TObject *obj, Int_t x, Int_t y);  Emit Highlighted() signal. ;  ; void Iconify ();  Iconify canvas. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const override;  ; Bool_t IsDrawn () const;  ; Bool_t IsFolder () const override;  Is folder ? ;  ; Bool_t IsGrayscale ();  Check whether this canvas is to be drawn in grayscale mode. ;  ; Bool_t IsRetained () const override;  ; Bool_t IsUpdated () const;  ; Bool_t IsWeb () const override;  Is web canvas. ;  ; void ls (Option_t *option="""") const override;  List all pads. ;  ; void MoveOpaque (Int_t set=1);  Set option to move objects/pads in a canvas. ;  ; Bool_t OpaqueMoving () const override;  ; Bool_t OpaqueResizing () const override;  ; void Paint (Option_t *option="""") override;  Paint canvas. ;  ; virtual TPad * Pick (Int_t px, Int_t py, TObject *prevSelObj);  Prepare for pick, call TPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:8208,simpl,simplification,8208,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,2,['simpl'],['simplification']
Usability,"rtualStreamerInfo.; Definition at line 1291 of file TStreamerInfo.cxx. ◆ BuildOld(). void TStreamerInfo::BuildOld ; (; ). overridevirtual . rebuild the TStreamerInfo structure ; Implements TVirtualStreamerInfo.; Definition at line 1705 of file TStreamerInfo.cxx. ◆ CallShowMembers(). void TStreamerInfo::CallShowMembers ; (; const void * ; obj, . TMemberInspector & ; insp, . Bool_t ; isTransient . ); const. overridevirtual . Emulated a call ShowMembers() on the obj of this class type, passing insp and parent. ; Implements TVirtualStreamerInfo.; Definition at line 2752 of file TStreamerInfo.cxx. ◆ Class(). static TClass * TStreamerInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStreamerInfo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStreamerInfo::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 254 of file TStreamerInfo.h. ◆ Clear(). void TStreamerInfo::Clear ; (; Option_t * ; option = """"). overridevirtual . If opt contains 'built', reset this StreamerInfo as if Build or BuildOld was never called on it (useful to force their re-running). ; Implements TVirtualStreamerInfo.; Definition at line 2616 of file TStreamerInfo.cxx. ◆ Clone(). TObject * TStreamerInfo::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a clone of an object using the Streamer facility. ; If newname is specified, this will be the name of the new object. ; Reimplemented from TNamed.; Definition at line 2818 of file TStreamerInfo.cxx. ◆ CompareContent(). Bool_t TStreamerInfo::CompareContent ; (; TClass * ; cl, . TVirtualStreamerInfo * ; info, . Bool_t ; warn, . Bool_t ; complete, . TFile * ; file . ). overridevirtual . Return True if the current StreamerInfo in cl or info is equivalent to this TStreamerInfo. ; In this context 'Equivalent' means the same number of persistent data member which the same actual C++ type and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:36670,Clear,Clear,36670,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['Clear'],['Clear']
Usability,rtualStreamerInfo::kTString@ kTStringDefinition TVirtualStreamerInfo.h:123; TVirtualStreamerInfo::kOffsetP@ kOffsetPDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kCacheNew@ kCacheNewDefinition TVirtualStreamerInfo.h:133; TVirtualStreamerInfo::kUShort@ kUShortDefinition TVirtualStreamerInfo.h:121; TVirtualStreamerInfo::kOffsetL@ kOffsetLDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kDouble@ kDoubleDefinition TVirtualStreamerInfo.h:119; TVirtualStreamerInfo::kCharStar@ kCharStarDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kAnyP@ kAnyPDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kAny@ kAnyDefinition TVirtualStreamerInfo.h:123; TVirtualStreamerInfo::kSTLp@ kSTLpDefinition TVirtualStreamerInfo.h:125; TVirtualStreamerInfo::kAnyp@ kAnypDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kConvP@ kConvPDefinition TVirtualStreamerInfo.h:127; TVirtualStreamerInfo::kObject@ kObjectDefinition TVirtualStreamerInfo.h:123; TVirtualStreamerInfo::kSkipL@ kSkipLDefinition TVirtualStreamerInfo.h:126; TVirtualStreamerInfo::kFloat@ kFloatDefinition TVirtualStreamerInfo.h:118; TVirtualStreamerInfo::kInt@ kIntDefinition TVirtualStreamerInfo.h:118; TVirtualStreamerInfo::kULong@ kULongDefinition TVirtualStreamerInfo.h:121; TVirtualStreamerInfo::kTObject@ kTObjectDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kLong64@ kLong64Definition TVirtualStreamerInfo.h:122; TVirtualStreamerInfo::kCounter@ kCounterDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kTNamed@ kTNamedDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kSkipP@ kSkipPDefinition TVirtualStreamerInfo.h:126; bool; double; int; unsigned int; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; v@ vDefinition rootcling_impl.cxx:3699; lTLine lDefinition textangle.C:4. ioiosrcTStreamerInfoReadBuffer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoReadBuffer_8cxx_source.html:91607,Guid,Guide,91607,doc/master/TStreamerInfoReadBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoReadBuffer_8cxx_source.html,1,['Guid'],['Guide']
Usability,"rtualX.; IsTransparent is implemented as inline function in TAttFill. void SetFillColor(Color_t fcolor); Delegate to gVirtualX. void SetFillStyle(Style_t fstyle); Delegate to gVirtualX. void SetOpacity(Int_t percent); Delegate to gVirtualX. Short_t GetTextAlign() const; Delegate to gVirtualX. Float_t GetTextAngle() const; Delegate to gVirtualX. Color_t GetTextColor() const; Delegate to gVirtualX. Font_t GetTextFont() const; Delegate to gVirtualX. Float_t GetTextSize() const; Delegate to gVirtualX. Float_t GetTextMagnitude() const; Delegate to gVirtualX. void SetTextAlign(Short_t align); Delegate to gVirtualX. void SetTextAngle(Float_t tangle); Delegate to gVirtualX. void SetTextColor(Color_t tcolor); Delegate to gVirtualX. void SetTextFont(Font_t tfont); Delegate to gVirtualX. void SetTextSize(Float_t tsize); Delegate to gVirtualX. void SetTextSizePixels(Int_t npixels); Delegate to gVirtualX. Int_t CreateDrawable(UInt_t w, UInt_t h); Not required at the moment. void ClearDrawable(); Not required at the moment. void CopyDrawable(Int_t id, Int_t px, Int_t py); Not required at the moment. void DestroyDrawable(); Not required at the moment. void SelectDrawable(Int_t device); For gVirtualX this means select pixmap (or window); and all subsequent drawings will go into; this pixmap. For OpenGL this means the change of; coordinate system and viewport. void InitPainter(); Init gl-pad painter:; 1. 2D painter does not use depth test, should not modify; depth-buffer content (except initial cleanup).; 2. Disable cull face.; 3. Disable lighting.; 4. Set viewport (to the whole canvas area).; 5. Set camera.; 6. Unlock painter. void InvalidateCS(); When TPad::Range for gPad is called, projection; must be changed in OpenGL. void LockPainter(); Locked state of painter means, that; GL context can be invalid, so no GL calls; can be executed. void DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Draw line segment. void DrawLineNDC(Double_t u1, Double_t v1, Double_t u2, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPadPainter.html:5713,Clear,ClearDrawable,5713,root/html528/TGLPadPainter.html,https://root.cern,https://root.cern/root/html528/TGLPadPainter.html,6,['Clear'],['ClearDrawable']
Usability,"rtual_b);  ; TVector2 Unit () const;  Return module normalized to 1. ;  ; Double_t X () const;  ; Double_t Y () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVector2.html:3748,Clear,Clear,3748,doc/master/classTVector2.html,https://root.cern,https://root.cern/doc/master/classTVector2.html,1,['Clear'],['Clear']
Usability,"rtyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ;  ; void ClearWindow () override;  Clears the entire area of the current window. ;  ; void ClearWindow (Window_t id) override;  Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; void CloseDisplay () override;  Closes connection to display server and destroys all windows. ;  ; void ClosePixmap () override;  Deletes current pixmap. ;  ; void CloseWindow () override;  Deletes current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies the specified components from the source GC ""org"" to the destinatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:2442,Clear,ClearWindow,2442,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,3,['Clear'],"['ClearArea', 'ClearWindow', 'Clears']"
Usability,"ruct_tfFontStructfont used to draw position text; TStringfFormatformat used to show position not in percent; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Float_tfMaxlogical maximum value (default 100); UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; Float_tfMinlogical minimum value (default 0); UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tfNormGCtext drawing graphics context; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tfPercentshow position in percent (default true); Float_tfPoslogical position [fMin,fMax]; Int_tfPosPixposition of progress bar in pixel coordinates; Bool_tfShowPosshow position value (default false); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGProgressBar.html:17896,progress bar,progress bar,17896,root/html528/TGProgressBar.html,https://root.cern,https://root.cern/root/html528/TGProgressBar.html,6,['progress bar'],['progress bar']
Usability,"ructor ; Definition at line 95 of file GSLMultiRootFinder.cxx. ◆ GSLMultiRootFinder() [4/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const GSLMultiRootFinder & ; ). delete . ◆ GSLMultiRootFinder() [5/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; GSLMultiRootFinder && ; ). delete . Member Function Documentation. ◆ AddFunction() [1/2]. int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). Definition at line 110 of file GSLMultiRootFinder.cxx. ◆ AddFunction() [2/2]. template<class Function > . int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; Function & ; f, . int ; ndim . ). inline . same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ; Definition at line 193 of file GSLMultiRootFinder.h. ◆ Clear(). void ROOT::Math::GSLMultiRootFinder::Clear ; (; ). clear list of functions ; Definition at line 127 of file GSLMultiRootFinder.cxx. ◆ ClearFunctions(). void ROOT::Math::GSLMultiRootFinder::ClearFunctions ; (; ). protected . Definition at line 118 of file GSLMultiRootFinder.cxx. ◆ Dim(). unsigned int ROOT::Math::GSLMultiRootFinder::Dim ; (; ); const. inline . return the number of sunctions set in the class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLMultiRootFinder.cxx. ◆ GetType(). std::pair< bool, int > ROOT::Math::GSLMultiRootFinder::GetType ; (; const char * ; name). protected . Definition at line 207 of file GSLMultiRootFinder.cxx. ◆ Iterations(). int ROOT::Math::GSLMultiRootFinder::It",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:7870,Clear,ClearFunctions,7870,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['Clear'],['ClearFunctions']
Usability,"ructor Documentation. ◆ TGVerticalFrame(). TGVerticalFrame::TGVerticalFrame ; (; const TGWindow * ; p = nullptr, . UInt_t ; w = 1, . UInt_t ; h = 1, . UInt_t ; options = kChildFrame, . Pixel_t ; back = GetDefaultFrameBackground() . ). inline . Definition at line 376 of file TGFrame.h. Member Function Documentation. ◆ Class(). static TClass * TGVerticalFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGVerticalFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGVerticalFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 382 of file TGFrame.h. ◆ DeclFileName(). static const char * TGVerticalFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 382 of file TGFrame.h. ◆ IsA(). TClass * TGVerticalFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 382 of file TGFrame.h. ◆ SavePrimitive(). void TGVerticalFrame::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a vertical frame widget as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 3187 of file TGFrame.cxx. ◆ Streamer(). void TGVerticalFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGVerticalFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 382 of file TGFrame.h. Libraries for TGVerticalFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFrame.h; gui/gui/src/TGFrame.cxx. TGVerticalFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVerticalFrame.html:32351,Guid,Guide,32351,doc/master/classTGVerticalFrame.html,https://root.cern,https://root.cern/doc/master/classTGVerticalFrame.html,1,['Guid'],['Guide']
Usability,ructor. ; Definition at line 2388 of file TSessionViewer.cxx. Member Function Documentation. ◆ Build(). void TSessionQueryFrame::Build ; (; TSessionViewer * ; gui). Build query information frame. ; Definition at line 2396 of file TSessionViewer.cxx. ◆ Class(). static TClass * TSessionQueryFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSessionQueryFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSessionQueryFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 448 of file TSessionViewer.h. ◆ DeclFileName(). static const char * TSessionQueryFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 448 of file TSessionViewer.h. ◆ Feedback(). void TSessionQueryFrame::Feedback ; (; TList * ; objs). Feedback function connected to Feedback signal. ; Used to update feedback histograms. ; Definition at line 2550 of file TSessionViewer.cxx. ◆ GetQueryEditFrame(). TEditQueryFrame * TSessionQueryFrame::GetQueryEditFrame ; (; ); const. inline . Definition at line 419 of file TSessionViewer.h. ◆ GetStatsCanvas(). TCanvas * TSessionQueryFrame::GetStatsCanvas ; (; ); const. inline . Definition at line 418 of file TSessionViewer.h. ◆ GetTab(). TGTab * TSessionQueryFrame::GetTab ; (; ); const. inline . Definition at line 420 of file TSessionViewer.h. ◆ IndicateStop(). void TSessionQueryFrame::IndicateStop ; (; Bool_t ; aborted). Indicate that Cancel or Stop was clicked. ; Definition at line 2878 of file TSessionViewer.cxx. ◆ IsA(). TClass * TSessionQueryFrame::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 448 of file TSessionViewer.h. ◆ Modified(). void TSessionQueryFrame::Modified ; (; Bool_t ; mod = kTRUE). Notify changes in query editor settings. ; Definition ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:34473,feedback,feedback,34473,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,1,['feedback'],['feedback']
Usability,"ructor. ; Definition at line 247 of file TProofProgressLog.cxx. Member Function Documentation. ◆ AddBuffer(). void TProofProgressLog::AddBuffer ; (; const char * ; buffer). Add text to the window. ; Definition at line 298 of file TProofProgressLog.cxx. ◆ BuildLogList(). void TProofProgressLog::BuildLogList ; (; Bool_t ; create = kFALSE). Build the list of workers. ; For this, extract the logs and take the names of TProofLogElements ; Definition at line 319 of file TProofProgressLog.cxx. ◆ Class(). static TClass * TProofProgressLog::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofProgressLog::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofProgressLog::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file TProofProgressLog.h. ◆ Clear(). void TProofProgressLog::Clear ; (; Option_t * ; = nullptr). overridevirtual . Clear log window. ; Reimplemented from TObject.; Definition at line 271 of file TProofProgressLog.cxx. ◆ CloseWindow(). void TProofProgressLog::CloseWindow ; (; ). overridevirtual . Handle close button or when closed via window manager action. ; Reimplemented from TGMainFrame.; Definition at line 310 of file TProofProgressLog.cxx. ◆ DeclFileName(). static const char * TProofProgressLog::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TProofProgressLog.h. ◆ DoLog(). void TProofProgressLog::DoLog ; (; Bool_t ; grep = kFALSE). Display logs. ; 'grep' is set to kTRUE if it is invoked by pressing the 'Filter' button. ; Definition at line 388 of file TProofProgressLog.cxx. ◆ Init(). void TProofProgressLog::Init ; (; Int_t ; w = 700, . Int_t ; h = 600 . ). private . Init window frame for log messages. ; Definition at line 70 of file TProofProgressLog.cxx. ◆ IsA(). TClass * TProofProgressLog::IsA ; (; ); const. inlineoverridev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:39888,Clear,Clear,39888,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['Clear'],['Clear']
Usability,"ructors then this is a generic one protected. ; Parameters. namethe name algorithm. ; dataloaderTMVA::DataLoader object with the data. ; fileoptional file to save the results. ; optionsextra options for the algorithm. . Definition at line 40 of file Envelope.cxx. ◆ ~Envelope(). Envelope::~Envelope ; (; ). Default destructor. ; Definition at line 62 of file Envelope.cxx. Member Function Documentation. ◆ BookMethod() [1/2]. void TMVA::Envelope::BookMethod ; (; TString ; methodName, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodNameString with the name of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 163 of file Envelope.cxx. ◆ BookMethod() [2/2]. void TMVA::Envelope::BookMethod ; (; Types::EMVA ; method, . TString ; methodTitle, . TString ; options = """" . ). virtual . Method to book the machine learning method to perform the algorithm. ; Parameters. methodenum TMVA::Types::EMVA with the type of the mva method ; methodTitleString with the method title. ; optionsString with the options for the method. . Definition at line 152 of file Envelope.cxx. ◆ Class(). static TClass * TMVA::Envelope::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Envelope::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Envelope::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 123 of file Envelope.h. ◆ DeclFileName(). static const char * TMVA::Envelope::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 123 of file Envelope.h. ◆ Evaluate(). virtual void TMVA::Envelope::Evaluate ; (; ). pure virtual . Virtual method to be implemented with your algorithm. ; Implemented in TMVA::Experimental:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Envelope.html:18369,learn,learning,18369,doc/master/classTMVA_1_1Envelope.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html,1,['learn'],['learning']
Usability,"ructure in the browser. ;  ; virtual Bool_t CancelStagingDataSet (const char *dataset);  Cancels a dataset staging request. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; virtual void ClearCache (const char *file=0);  Remove file from all file caches. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; virtual void ClearDataSetCache (const char *dataset=0);  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *opt="""");  Detach this instance to its proofserv. ;  ; void DisableGoAsyn ();  Signal to disable related switches. ;  ; Int_t DownloadPackage (const char *par, const char *dstdir=0);  Download a PROOF archive (PAR file) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:4885,Clear,ClearPackage,4885,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['Clear'],['ClearPackage']
Usability,"rue value using the measurement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumFunc;  CCacheElem;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass RooRealVarSharedProperties is an implementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:125554,simpl,simple,125554,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['simpl'],['simple']
Usability,"rue value using the measurement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumFunc;  CCacheElem;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:118131,simpl,simple,118131,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['simpl'],['simple']
Usability,"rue value using the measurement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is an add-on modules to RooMCStudy that allows you to randomize input generation parameters ;  CGausParam;  CGausParamSet;  CUniParam;  CUniParamSet;  CRooRangeBinningRooRangeBinning is binning/range definition that only defines a range but no binning ;  CRooRangeBooleanRooRangeBoolean ;  CRooRealAnalyticLightweight RooAbsFunc interface adaptor that binds an analytic integral of a RooAbsReal object (specified by a code) to a set of dependent variables ;  CRooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present it as a simple array oriented interface ;  CRooRealConstantRooRealConstant provides static functions to create and keep track of RooRealVar constants ;  CRooRealIntegralRooRealIntegral performs hybrid numerical/analytical integrals of RooAbsReal objects The class performs none of the actual integration, but only manages the logic of what variables can be integrated analytically, accounts for eventual jacobian terms and defines what numerical integrations needs to be done to complement the analytical integral ;  CRooRealMPFERooRealMPFE is the multi-processor front-end for parallel calculation of RooAbsReal objects ;  CRooRealProxyRooRealProxy is the concrete proxy for RooAbsReal objects A RooRealProxy is the general mechanism to store references to RooAbsReals inside a RooAbsArg ;  ►CRooRealSumPdfClass RooRealSumPdf implements a PDF constructed from a sum of functions: ;  CCacheElem;  CRooRealVarRooRealVar represents a fundamental (non-derived) real valued object ;  CRooRealVarSharedPropertiesClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:101974,simpl,simple,101974,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['simpl'],['simple']
Usability,"rueName(). virtual const char * TInterpreter::TypeInfo_TrueName ; (; TypeInfo_t * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 534 of file TInterpreter.h. ◆ TypeName(). virtual const char * TInterpreter::TypeName ; (; const char * ; s). pure virtual . Implemented in TCling. ◆ UnloadAllSharedLibraryMaps(). virtual Int_t TInterpreter::UnloadAllSharedLibraryMaps ; (; ). pure virtual . Implemented in TCling. ◆ UnloadFile(). virtual int TInterpreter::UnloadFile ; (; const char * ; ); const. inlinevirtual . Reimplemented in TCling.; Definition at line 271 of file TInterpreter.h. ◆ UnloadLibraryMap(). virtual Int_t TInterpreter::UnloadLibraryMap ; (; const char * ; library). pure virtual . Implemented in TCling. ◆ UnRegisterTClassUpdate(). virtual void TInterpreter::UnRegisterTClassUpdate ; (; const TClass * ; oldcl). pure virtual . Implemented in TCling. ◆ UpdateEnumConstants(). virtual void TInterpreter::UpdateEnumConstants ; (; TEnum * ; enumObj, . TClass * ; cl . ); const. pure virtual . Implemented in TCling. ◆ UpdateListOfGlobalFunctions(). virtual void TInterpreter::UpdateListOfGlobalFunctions ; (; ). pure virtual . Implemented in TCling. ◆ UpdateListOfGlobals(). virtual void TInterpreter::UpdateListOfGlobals ; (; ). pure virtual . Implemented in TCling. ◆ UpdateListOfMethods(). virtual void TInterpreter::UpdateListOfMethods ; (; TClass * ; cl); const. pure virtual . Implemented in TCling. ◆ UpdateListOfTypes(). virtual void TInterpreter::UpdateListOfTypes ; (; ). pure virtual . Implemented in TCling. Friends And Related Symbol Documentation. ◆ SuspendAutoParsing. friend class SuspendAutoParsing. friend . Definition at line 66 of file TInterpreter.h. Libraries for TInterpreter:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TInterpreter.h; core/meta/src/TInterpreter.cxx. TInterpreter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:98443,Guid,Guide,98443,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Guid'],['Guide']
Usability,"rvLite.cxx. ◆ HandleTermination(). void TProofServLite::HandleTermination ; (; ). overridevirtual . Called when the client is not alive anymore; terminate the session. ; Reimplemented from TProofServ.; Definition at line 329 of file TProofServLite.cxx. ◆ IsA(). TClass * TProofServLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProofServ.; Definition at line 55 of file TProofServLite.h. ◆ Setup(). Int_t TProofServLite::Setup ; (; ). overrideprivatevirtual . Print the ProofServ logo on standard output. ; Return 0 on success, -1 on error ; Reimplemented from TProofServ.; Definition at line 338 of file TProofServLite.cxx. ◆ SetupOnFork(). Int_t TProofServLite::SetupOnFork ; (; const char * ; ord). private . Finalize the server setup afetr forking. ; Return 0 on success, -1 on error ; Definition at line 506 of file TProofServLite.cxx. ◆ Streamer(). void TProofServLite::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofServ. ◆ StreamerNVirtual(). void TProofServLite::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TProofServLite.h. ◆ Terminate(). void TProofServLite::Terminate ; (; Int_t ; status). overridevirtual . Terminate the proof server. ; Reimplemented from TProofServ.; Definition at line 428 of file TProofServLite.cxx. Member Data Documentation. ◆ fInterruptHandler. TProofServLiteInterruptHandler* TProofServLite::fInterruptHandler. private . Definition at line 33 of file TProofServLite.h. ◆ fSockPath. TString TProofServLite::fSockPath. private . Definition at line 34 of file TProofServLite.h. ◆ fTerminated. Bool_t TProofServLite::fTerminated. private . Definition at line 36 of file TProofServLite.h. proof/proof/inc/TProofServLite.h; proof/proof/src/TProofServLite.cxx. TProofServLite. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLite.html:32872,Guid,Guide,32872,doc/master/classTProofServLite.html,https://root.cern,https://root.cern/doc/master/classTProofServLite.html,1,['Guid'],['Guide']
Usability,"rvables ;  ;  Protected Attributes inherited from RooCacheManager< RooAbsCacheElement >; Int_t _lastIndex;  ! Last slot accessed ;  ; Int_t _maxSize;  ! Maximum size ;  ; std::vector< RooNormSetCache > _nsetCache;  ! Normalization/Integration set manager ;  ; std::vector< RooAbsCacheElement * > _object;  ! Payload ;  ; Int_t _size;  ! Actual use ;  ; bool _wired;  ! In wired mode, there is a single payload which is returned always ;  ;  Protected Attributes inherited from RooAbsCache; RooAbsArg * _owner;  Pointer to owning RooAbsArg. ;  . Static Protected Attributes; static bool _clearObsList;  Clear obslist on sterilize? ;  . #include <RooObjCacheManager.h>. Inheritance diagram for RooObjCacheManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooObjCacheManager() [1/2]. RooObjCacheManager::RooObjCacheManager ; (; RooAbsArg * ; owner = nullptr, . Int_t ; maxSize = 2, . bool ; clearCacheOnServerRedirect = true, . bool ; allowOptimize = false . ). Constructor of object cache manager for given owner. ; If clearCacheOnServerRedirect is true all cache elements will be cleared when a server redirect is intercepted by the cache manager. This is the default strategy and should only be overridden when you really understand what you're doing as properly implementing server redirect in cache elements can get very complicated, especially if there are (cyclical) reference back to the owning object ; Definition at line 47 of file RooObjCacheManager.cxx. ◆ RooObjCacheManager() [2/2]. RooObjCacheManager::RooObjCacheManager ; (; const RooObjCacheManager & ; other, . RooAbsArg * ; owner = nullptr . ). Copy constructor. ; Definition at line 59 of file RooObjCacheManager.cxx. ◆ ~RooObjCacheManager(). RooObjCacheManager::~RooObjCacheManager ; (; ). override . Destructor. ; Definition at line 71 of file RooObjCacheManager.cxx. Member Function Documentation. ◆ Class(). static TClass * RooObjCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:7001,clear,clearCacheOnServerRedirect,7001,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,rval(). bool PointSetInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameter is in the interval ; Method to determine if a parameter point is in the interval. ; Implements RooStats::ConfInterval.; Definition at line 65 of file PointSetInterval.cxx. ◆ LowerLimit(). double PointSetInterval::LowerLimit ; (; RooRealVar & ; param). return lower limit on a given parameter ; Definition at line 149 of file PointSetInterval.cxx. ◆ SetConfidenceLevel(). void RooStats::PointSetInterval::SetConfidenceLevel ; (; double ; cl). inlineoverridevirtual . set the confidence level for the interval ; Implements RooStats::ConfInterval.; Definition at line 35 of file PointSetInterval.h. ◆ Streamer(). void RooStats::PointSetInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooStats::ConfInterval. ◆ StreamerNVirtual(). void RooStats::PointSetInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 62 of file PointSetInterval.h. ◆ UpperLimit(). double PointSetInterval::UpperLimit ; (; RooRealVar & ; param). return upper limit on a given parameter ; Definition at line 135 of file PointSetInterval.cxx. Member Data Documentation. ◆ fConfidenceLevel. double RooStats::PointSetInterval::fConfidenceLevel. private . confidence level ; Definition at line 66 of file PointSetInterval.h. ◆ fParameterPointsInInterval. RooAbsData* RooStats::PointSetInterval::fParameterPointsInInterval. private . either a histogram (RooDataHist) or a tree (RooDataSet) ; Definition at line 67 of file PointSetInterval.h. Libraries for RooStats::PointSetInterval:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/PointSetInterval.h; roofit/roostats/src/PointSetInterval.cxx. RooStatsPointSetInterval. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html:17658,Guid,Guide,17658,doc/master/classRooStats_1_1PointSetInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1PointSetInterval.html,1,['Guid'],['Guide']
Usability,"rval; RooAbsPdf*RooStats::CombinedCalculator::fPdf; Double_tRooStats::CombinedCalculator::fSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodCalculator(); default constructor. ProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.05, const RooArgSet* nullParams = 0); constructor from pdf and parameters; the pdf must contain eventually the nuisance parameters. ProfileLikelihoodCalculator(RooAbsData& data, RooStats::ModelConfig& model, Double_t size = 0.05); construct from a ModelConfig. Assume data model.GetPdf() will provide full description of model including; constraint term on the nuisances parameters. ~ProfileLikelihoodCalculator(); destructor; cannot delete prod pdf because it will delete all the composing pdf's; if (fOwnPdf) delete fPdf;; fPdf = 0;. void DoReset() const; reset and clear fit result; to be called when a new model or data are set in the calculator. RooAbsReal * DoGlobalFit() const; perform a global fit of the likelihood letting with all parameter of interest and; nuisance parameters; keep the list of fitted parameters. RooFitResult * DoMinimizeNLL(RooAbsReal* nll); Minimizer the given NLL using the default options. LikelihoodInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a profile likelihood ratio and uses that to construct a RooStats::LikelihoodInterval. HypoTestResult* GetHypoTest() const; Main interface to get a HypoTestResult.; It does two fits:; the first lets the null parameters float, so it's a maximum likelihood estimate; the second is to the null (fixing null parameters to their specified values): eg. a conditional maximum likelihood; the ratio of the likelihood at the conditional MLE to the MLE is the profile likelihood ratio.; Wilks' theorem is used to get p-values. ProfileLikelihoodCalculator(); default constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ProfileLikelihoodCalculator.html:6493,clear,clear,6493,root/html534/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__ProfileLikelihoodCalculator.html,1,['clear'],['clear']
Usability,"rval; RooAbsPdf*RooStats::CombinedCalculator::fPdf; Double_tRooStats::CombinedCalculator::fSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodCalculator(); default constructor. ProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.05, const RooArgSet* nullParams = 0); constructor from pdf and parameters; the pdf must contain eventually the nuisance parameters. ProfileLikelihoodCalculator(RooAbsData& data, RooStats::ModelConfig& model, Double_t size = 0.05); construct from a ModelConfig. Assume data model.GetPdf() will provide full description of model including; constraint term on the nuisances parameters. ~ProfileLikelihoodCalculator(); destructor; cannot delete prod pdf because it will delete all the composing pdf's; if (fOwnPdf) delete fPdf;; fPdf = 0;. void DoReset() const; reset and clear fit result; to be called when a new model or data are set in the calculator. void DoGlobalFit() const; perform a global fit of the likelihood letting with all parameter of interest and; nuisance parameters; keep the list of fitted parameters. LikelihoodInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a profile likelihood ratio and uses that to construct a RooStats::LikelihoodInterval. HypoTestResult* GetHypoTest() const; Main interface to get a HypoTestResult.; It does two fits:; the first lets the null parameters float, so it's a maximum likelihood estimate; the second is to the null (fixing null parameters to their specified values): eg. a conditional maximum likelihood; the ratio of the likelihood at the conditional MLE to the MLE is the profile likelihood ratio.; Wilks' theorem is used to get p-values. ProfileLikelihoodCalculator(); default constructor (needed for I/O). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html:6155,clear,clear,6155,root/html528/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html,3,['clear'],['clear']
Usability,"rvirtual TObject * ReadObjWithBuffer(char *bufferRead)To read a TObject* from bufferRead.Definition TKey.cxx:893; TKey::lsvirtual void ls(Bool_t current) constList Key contents.Definition TKey.cxx:695; TKey::GetMotherDirTDirectory * GetMotherDir() constDefinition TKey.h:85; TKey::GetCycleShort_t GetCycle() constReturn cycle number associated to this key.Definition TKey.cxx:578; TKey::ReadObjvirtual TObject * ReadObj()To read a TObject* from the file.Definition TKey.cxx:759; TKey::Createvirtual void Create(Int_t nbytes, TFile *f=nullptr)Create a TKey object of specified size.Definition TKey.cxx:460; TKey::DeleteBuffervirtual void DeleteBuffer()Delete key buffer(s).Definition TKey.cxx:560; TKey::WriteFilevirtual Int_t WriteFile(Int_t cycle=1, TFile *f=nullptr)Write the encoded object supported by this key.Definition TKey.cxx:1456; TKey::GetBuffervirtual char * GetBuffer() constDefinition TKey.h:78; TKey::ReadBuffervirtual void ReadBuffer(char *&buffer)Decode input buffer.Definition TKey.cxx:1219; TKey::fMotherDirTDirectory * fMotherDir!pointer to mother directoryDefinition TKey.h:52; TKey::fClassNameTString fClassNameObject Class name.Definition TKey.h:47; TKey::Printvoid Print(Option_t *option="""") const overridePrint key contents.Definition TKey.cxx:715; TKey::FillBuffervoid FillBuffer(char *&buffer) overrideEncode key header into output buffer.Definition TKey.cxx:602; TKey::GetBufferRefTBuffer * GetBufferRef() constDefinition TKey.h:79; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Readvirtual Int_t Read(const char *name)Read contents of object with specified name from the current directory.Definition TObject.cxx:654; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; int. ioioincTKey.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8h_source.html:13714,Guid,Guide,13714,doc/master/TKey_8h_source.html,https://root.cern,https://root.cern/doc/master/TKey_8h_source.html,1,['Guid'],['Guide']
Usability,"rvirtual void PaintH3BoxRaster()Control function to draw a 3D histogram with boxes.Definition THistPainter.cxx:7690; THistPainter::PaintHistvirtual void PaintHist(Option_t *option)Control routine to draw 1D histogramsDefinition THistPainter.cxx:6837; THistPainter::SetHighlightvoid SetHighlight() overrideSet highlight (enable/disable) mode for fH.Definition THistPainter.cxx:3857; THistPainter::DefineColorLevelsvirtual void DefineColorLevels(Int_t ndivz)Define the color levels used to paint legos, surfaces etc..Definition THistPainter.cxx:9603; THistPainter::fObjectInfoTString fObjectInfoDefinition THistPainter.h:75; THistPainter::GetXHighlightBinvirtual Int_t GetXHighlightBin() constDefinition THistPainter.h:87; THistPainter::PaintColorLevelsvirtual void PaintColorLevels(Option_t *option)Control function to draw a 2D histogram as a color plot.Definition THistPainter.cxx:5766; THistPainter::IsInsideBool_t IsInside(Int_t x, Int_t y) overrideReturn kTRUE if the cell ix, iy is inside one of the graphical cuts.Definition THistPainter.cxx:3994; TListA doubly linked list.Definition TList.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TPainter3dAlgorithmsThe Legos and Surfaces painter class.Definition TPainter3dAlgorithms.h:28; TPieDraw a Pie Chart,.Definition TPie.h:23; TStringBasic string class.Definition TString.h:139; TVirtualHistPainterAbstract interface to a histogram painter.Definition TVirtualHistPainter.h:30; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; v@ vDefinition rootcling_impl.cxx:3699; THistRenderingRegionDefinition THistPainter.h:44; THistRenderingRegion::fBinRangestd::pair< Int_t, Int_t > fBinRangeDefinition THistPainter.h:46; THistRenderingRegion::fPixelRangestd::pair< Int_t, Int_t > fPixelRangeDefinition THistPainter.h:45; lTLine lDefinition textangle.C:4. histhistpainterincTHistPainter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8h_source.html:23313,Guid,Guide,23313,doc/master/THistPainter_8h_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8h_source.html,1,['Guid'],['Guide']
Usability,"rwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web browser. ;  ; virtual void Help (const char *line);  The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ;  ; virtual void LoadGraphicsLibs ();  Load shared libs necessary for graphics. ;  ; virtual void MakeBatch ();  Switch to batch mode. ;  ; void SetSignalHandler (TSignalHandler *sh);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TApplication; static void Close (TApplication *app);  Static function used to close a remote application. ;  ; static TApplication * Open (const char *url, Int_t debug, const char *script);  Static function used to attach to an existing remote application or to start one. ;  ; static Int_t ParseRemoteLine (const char *ln, TString &hostdi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:19386,guid,guide,19386,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['guid'],['guide']
Usability,"rwrite; kWriteDelete; };. private:. Int_tfCountnumber of updates contributing to error field; Double_tfDEDwsum of deltas; Double_tfDeltalocal error field; Double_tfLearnRatelearning rate parameter; TMVA::TNeuron*fPostNeuronpointer to post-neuron; TMVA::TNeuron*fPreNeuronpointer to pre-neuron; Double_tfWeightweight of the synapse; static TMVA::MsgLogger*fgLogger! message logger, static to save resources. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); constructor. ~TSynapse(); destructor. void SetWeight(Double_t weight); set synapse weight. Double_t GetWeightedValue(); get output of pre-neuron weighted by synapse weight. Double_t GetWeightedDelta(); get error field of post-neuron weighted by synapse weight. void AdjustWeight(); adjust the weight based on the error field all ready calculated by CalculateDelta. void CalculateDelta(); calculate/adjust the error field for this synapse. TSynapse(). Double_t GetWeight(); get the weight of the synapse. { return fWeight; }. void SetLearningRate(Double_t rate); set the learning rate. { fLearnRate = rate; }. Double_t GetLearningRate(); get the learning rate. { return fLearnRate; }. void DecayLearningRate(Double_t rate); decay the learning rate. { fLearnRate *= (1-rate); }. void SetPreNeuron(TMVA::TNeuron* pre); set the pre-neuron. { fPreNeuron = pre; }. void SetPostNeuron(TMVA::TNeuron* post); set hte post-neuron. { fPostNeuron = post; }. void InitDelta(); initialize the error field of the synpase to 0. { fDelta = 0.0; fCount = 0; }. void SetDEDw(Double_t DEDw); { fDEDw = DEDw; }. Double_t GetDEDw(); { return fDEDw; }. Double_t GetDelta(); { return fDelta; }. » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TSynapse.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__TSynapse.html:6660,learn,learning,6660,root/html530/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html530/TMVA__TSynapse.html,3,['learn'],['learning']
Usability,"ry Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TQCommand() [1/3]. TQCommand::TQCommand ; (; const char * ; clname = nullptr, . void * ; obj = nullptr, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; clname - class name.; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments:; if either clname or obj is NULL that means that redo/undo is function; to specify default arguments for redo/undo method/function '=' must precede to argument value. Example: TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case undo parameter can be omitted.; Example: TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. Definition at line 168 of file TQCommand.cxx. ◆ TQCommand() [2/3]. TQCommand::TQCommand ; (; TObject * ; obj, . const char * ; redo = nullptr, . const char * ; undo = nullptr . ). Constructor. ; Input parameters:; obj - an object; redo - method or function to do/redo operation; undo - method or function to undo operation. Comments: to specify default arguments for redo/undo method/function '=' must precede to argument value.; Example: TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");; undo method can be same as redo one. In that case ""undo"" can parameter be omitted.; Example: TQCommand(gPad, ""SetFillStyle(Style_t)"");. Definition at line 199 of file TQCommand.cxx. ◆ TQCommand() [3/3]. TQCommand::TQCommand ; (; const TQCommand & ; com). Copy constructor. ; Definition at line 209 of file TQCommand.cxx. ◆ ~TQCommand(). TQCommand::~TQCommand ; (; ). virtual . dtor. ; Definition at line 249 of file TQCommand.cxx. Member Function Documentation. ◆ Add() [1/2]. void TQCommand::Add ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 91 of file TQCommand.h. ◆ Add() [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:32707,undo,undo,32707,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,ry level . Definition at line 479 of file TRandom1.cxx. ◆ Streamer(). void TRandom1::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TRandom. ◆ StreamerNVirtual(). void TRandom1::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TRandom1.h. Member Data Documentation. ◆ fCarry. Float_t TRandom1::fCarry. protected . Definition at line 36 of file TRandom1.h. ◆ fCount24. Int_t TRandom1::fCount24. protected . Definition at line 34 of file TRandom1.h. ◆ fFloatSeedTable. Float_t TRandom1::fFloatSeedTable[24]. protected . Definition at line 35 of file TRandom1.h. ◆ fgMaxIndex. int TRandom1::fgMaxIndex = 215. staticprotected . Definition at line 39 of file TRandom1.h. ◆ fgNumEngines. int TRandom1::fgNumEngines = 0. staticprotected . Definition at line 38 of file TRandom1.h. ◆ fIlag. Int_t TRandom1::fIlag. protected . Definition at line 32 of file TRandom1.h. ◆ fIntModulus. const Int_t TRandom1::fIntModulus. protected . Definition at line 37 of file TRandom1.h. ◆ fJlag. Int_t TRandom1::fJlag. protected . Definition at line 33 of file TRandom1.h. ◆ fLuxury. Int_t TRandom1::fLuxury. protected . Definition at line 31 of file TRandom1.h. ◆ fMantissaBit12. const Double_t TRandom1::fMantissaBit12. protected . Definition at line 42 of file TRandom1.h. ◆ fMantissaBit24. const Double_t TRandom1::fMantissaBit24. protected . Temporary array of seed values (transient) ; Definition at line 41 of file TRandom1.h. ◆ fNskip. Int_t TRandom1::fNskip. protected . Definition at line 30 of file TRandom1.h. ◆ fTheSeeds. const UInt_t* TRandom1::fTheSeeds. protected . Definition at line 40 of file TRandom1.h. Libraries for TRandom1:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/TRandom1.h; math/mathcore/src/TRandom1.cxx. TRandom1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom1.html:24001,Guid,Guide,24001,doc/master/classTRandom1.html,https://root.cern,https://root.cern/doc/master/classTRandom1.html,1,['Guid'],['Guide']
Usability,"ry marker types:; 4, 20, 24 : round points, size in pixels;; 2, 3, 5 : crosses, size in scene units;; 28 : as above, line width 2 pixels;; all other : square points, size in pixels. Marker-size (from TAttMarker) is multiplied by 5!; An identification of type TObject* can be assigned to each point via SetPointId() method. Set the fOwnIds flag if the ids are owned by the point-set and should be deleted when pointset is cleared or destructed.; Copy-constructor and assignment operator COPIES the ids if the are not owned and CLONES them if they are owned.; The ids are not streamed. ; Definition at line 21 of file TPointSet3D.h. Public Member Functions;  TPointSet3D ();  ;  TPointSet3D (const TPointSet3D &t);  Copy constructor. ;  ;  TPointSet3D (Int_t n, Double_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Float_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Marker_t m=1, Option_t *opt="""");  ;  ~TPointSet3D () override;  Destructor. ;  ; void ClearIds ();  Clears the id-array. If ids are owned the TObjects are deleted. ;  ; void ComputeBBox () override;  Compute the bounding box of this points set. ;  ; Bool_t GetOwnIds () const;  ; TObject * GetPointId (Int_t n) const;  ; TClass * IsA () const override;  ; TPointSet3D & operator= (const TPointSet3D &t);  Assignment operator. ;  ; virtual void PointSelected (Int_t n);  This virtual method is called from TPointSet3DGL when a point is selected. ;  ; void SetOwnIds (Bool_t o);  ; void SetPointId (Int_t n, TObject *id);  Set id of point n. ;  ; void SetPointId (TObject *id);  Set id of last point. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TPointSet3D. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPolyMarker3D;  TPolyMarker3D ();  3-D polymarker default constructor. ;  ;  TPolyMarker3D (const TPolyMarker3D &p);  3-D polymarker copy ctor. ;  ;  TPolyMarker3D (Int_t n, Double_t *p, Marker_t marker=1, Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:1427,Clear,ClearIds,1427,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,2,['Clear'],"['ClearIds', 'Clears']"
Usability,"ry plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite Local worker PROOF Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TPyDispatcher Python dispatcher class; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia6 Interface to Pythia6.1 Event Generator; TPythia6Decayer Particle Decayer Base Class; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQApplication creates ROOT environement with the Qt windowing system; TQCanvasImp ABC describing Qt GUI independent main window; TQCanvasMenu interface to Qt based context sensitive popup menus; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQMimeTypes Pool of mime type objects; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQRootApplication creates Qt environement interface with the ROOT windowing system; TQRootCanvas interface to Qt eventloop to handle user input; TQRootDialog prompt for the arguments of an object's member function; TQRootGuiFactory Qt ROOT Gui factory; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:111014,undo,undo,111014,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['undo'],['undo']
Usability,"ry starting with the current point, the modeller needs to know the current direction (nx,ny,nz). This direction is stored as Double_t fCurrentDirection[3] by the navigator and it represents a direction in the global frame. It can be retrieved with:; Const Double_t *cdir = gGeoManager->GetCurrentDirection();; The direction can be initialized in a similar manner as the current point:; gGeoManager->SetCurrentDirection(nx,ny,nz);; // or:; gGeoManager->SetCurrentDirection(Double_t *dir);; 18.5.4 Initializing the State; Setting the initial point and direction is not enough for initializing tracking. The modeller needs to find out where the initial point is located in the geometrical hierarchy. Due to the containment based architecture of the model, this is the deepest positioned object containing the point. For illustrating this, imagine that we have a simple structure with a top volume A and another one Bpositioned inside. Since Ais a top volume, its associated node A_1 will define MARS and our simple hierarchy of nodes (positioned volumes) will be: /A_1/B_1. Suppose now that the initial point is contained by B_1. This implies by default that the point is also contained by A_1, since B_1 have to be fully contained by this. After searching the point location, the modeller will consider that the point is located inside B_1, which will be considered as the representative object (node) for the current state. This is stored as: TGeoNode *TGeoManager::fCurrentNodeand can be asked from the manager class only after the 'Where am I?' was completed:; TGeoNode *current = gGeoManager->GetCurrentNode();; In order to find the location of the current point inside the hierarchy of nodes, after setting this point it is mandatory to call the ‘Where am I?' method:; gGeoManager->FindNode();; In order to have more flexibility, there are in fact several alternative ways of initializing a modeller state:; // Setting the point and finding the state in one step:; gGeoManager->FindNode(Double_t x,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:974934,simpl,simple,974934,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"rySearchTree(). TMVA::BinarySearchTree::~BinarySearchTree ; (; void ; ). virtual . destructor ; Definition at line 92 of file BinarySearchTree.cxx. Member Function Documentation. ◆ CalcStatistics(). void TMVA::BinarySearchTree::CalcStatistics ; (; TMVA::Node * ; n = nullptr). calculate basic statistics (mean, rms for each variable) ; Definition at line 430 of file BinarySearchTree.cxx. ◆ Class(). static TClass * TMVA::BinarySearchTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::BinarySearchTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::BinarySearchTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 173 of file BinarySearchTree.h. ◆ ClassName(). virtual const char * TMVA::BinarySearchTree::ClassName ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 81 of file BinarySearchTree.h. ◆ Clear(). void TMVA::BinarySearchTree::Clear ; (; TMVA::Node * ; n = nullptr). clear nodes ; Definition at line 354 of file BinarySearchTree.cxx. ◆ CreateFromXML(). TMVA::BinarySearchTree * TMVA::BinarySearchTree::CreateFromXML ; (; void * ; node, . UInt_t ; tmva_Version_Code = 262657 . ). static . re-create a new tree (decision tree or search tree) from XML ; Definition at line 103 of file BinarySearchTree.cxx. ◆ CreateNode(). virtual Node * TMVA::BinarySearchTree::CreateNode ; (; UInt_t ; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 78 of file BinarySearchTree.h. ◆ CreateTree(). virtual BinaryTree * TMVA::BinarySearchTree::CreateTree ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 79 of file BinarySearchTree.h. ◆ DeclFileName(). static const char * TMVA::BinarySearchTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file BinarySearchTree.h. ◆ DestroyNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:9180,Clear,Clear,9180,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['Clear'],['Clear']
Usability,"r ; yy . ). inline . Set internal data based on 2 Scalar numbers. ; Definition at line 86 of file Cartesian2D.h. ◆ SetX(). template<class T = double> . void ROOT::Math::Cartesian2D< T >::SetX ; (; Scalar ; a). inline . set the x coordinate value keeping y constant ; Definition at line 102 of file Cartesian2D.h. ◆ SetXY(). template<class T = double> . void ROOT::Math::Cartesian2D< T >::SetXY ; (; Scalar ; xx, . Scalar ; yy . ). inline . set all values using cartesian coordinates ; Definition at line 112 of file Cartesian2D.h. ◆ SetY(). template<class T = double> . void ROOT::Math::Cartesian2D< T >::SetY ; (; Scalar ; a). inline . set the y coordinate value keeping x constant ; Definition at line 107 of file Cartesian2D.h. ◆ X(). template<class T = double> . Scalar ROOT::Math::Cartesian2D< T >::X ; (; ); const. inline . Definition at line 93 of file Cartesian2D.h. ◆ x(). template<class T = double> . Scalar ROOT::Math::Cartesian2D< T >::x ; (; ); const. inline . Definition at line 162 of file Cartesian2D.h. ◆ Y(). template<class T = double> . Scalar ROOT::Math::Cartesian2D< T >::Y ; (; ); const. inline . Definition at line 94 of file Cartesian2D.h. ◆ y(). template<class T = double> . Scalar ROOT::Math::Cartesian2D< T >::y ; (; ); const. inline . Definition at line 163 of file Cartesian2D.h. Member Data Documentation. ◆ Dimension. template<class T = double> . constexpr unsigned int ROOT::Math::Cartesian2D< T >::Dimension = 2U. staticconstexpr . Definition at line 45 of file Cartesian2D.h. ◆ fX. template<class T = double> . T ROOT::Math::Cartesian2D< T >::fX. private . (Contiguous) data containing the coordinates values x and y ; Definition at line 211 of file Cartesian2D.h. ◆ fY. template<class T = double> . T ROOT::Math::Cartesian2D< T >::fY. private . Definition at line 212 of file Cartesian2D.h. math/genvector/inc/Math/GenVector/Cartesian2D.h. ROOTMathCartesian2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Cartesian2D.html:8274,Guid,Guide,8274,doc/master/classROOT_1_1Math_1_1Cartesian2D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Cartesian2D.html,1,['Guid'],['Guide']
Usability,"s ();  Calculate properties for an atomic number. ;  ; Double_t GetfCoulomb () const;  ; Double_t GetfRadTsai () const;  ; TGeoIsotope * GetIsotope (Int_t i) const;  Return i-th isotope in the element. ;  ; Int_t GetNisotopes () const;  ; Double_t GetRelativeAbundance (Int_t i) const;  Return relative abundance of i-th isotope in this element. ;  ; Bool_t HasIsotopes () const;  ; Bool_t IsDefined () const;  ; Bool_t IsUsed () const;  ; Int_t N () const;  ; Double_t Neff () const;  Returns effective number of nucleons. ;  ; void SetDefined (Bool_t flag=kTRUE);  ; void SetUsed (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Z () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoElementRN.html:4529,Clear,Clear,4529,doc/master/classTGeoElementRN.html,https://root.cern,https://root.cern/doc/master/classTGeoElementRN.html,1,['Clear'],['Clear']
Usability,"s (SimpleRNN, LSTM or GRU); ; ; if useKeras:; for i in range(3):; if use_rnn_type[i]:; modelName = ""model_"" + rnn_types[i] + "".h5""; trainedModelName = ""trained_"" + modelName; print(""Building recurrent keras model using a"", rnn_types[i], ""layer""); # create python script which can be executed; # create 2 conv2d layer + maxpool + dense; from tensorflow.keras.models import Sequential; from tensorflow.keras.optimizers import Adam; ; # from keras.initializers import TruncatedNormal; # from keras import initializations; from tensorflow.keras.layers import Input, Dense, Dropout, Flatten, SimpleRNN, GRU, LSTM, Reshape, BatchNormalization; ; model = Sequential(); model.add(Reshape((10, 30), input_shape=(10 * 30,))); # add recurrent neural network depending on type / Use option to return the full output; if rnn_types[i] == ""LSTM"":; model.add(LSTM(units=10, return_sequences=True)); elif rnn_types[i] == ""GRU"":; model.add(GRU(units=10, return_sequences=True)); else:; model.add(SimpleRNN(units=10, return_sequences=True)); # m.AddLine(""model.add(BatchNormalization())"");; model.add(Flatten()) # needed if returning the full time output sequence; model.add(Dense(64, activation=""tanh"")); model.add(Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(modelName); model.summary(); print(""saved recurrent model"", modelName); ; if not os.path.exists(modelName):; useKeras = False; print(""Error creating Keras recurrent model file - Skip using Keras""); else:; # book PyKeras method only if Keras model could be created; print(""Booking Keras model "", rnn_types[i]); factory.BookMethod(; dataloader,; TMVA.Types.kPyKeras,; ""PyKeras_"" + rnn_types[i],; H=True,; V=False,; VarTransform=None,; FilenameModel=modelName,; FilenameTrainedModel=""trained_"" + modelName,; NumEpochs=maxepochs,; BatchSize=batchSize,; GpuOptions=""allow_growth=True"",; ); ; ; # use BDT in case not using Keras or TMVA DL; if not useKera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:59802,Simpl,SimpleRNN,59802,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Simpl'],['SimpleRNN']
Usability,"s (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLMonitoringWriter.html:2280,Clear,Clear,2280,doc/master/classTSQLMonitoringWriter.html,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html,1,['Clear'],['Clear']
Usability,"s (in principle against good; design since a child class should not provide less functionality; than its parent, however, sometimes it is necessary). void Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; Use this method to declare a method obsolete. Specify as of which version; the method is obsolete and as from which version it will be removed. Bool_t GetObjectStat(); Get status of object stat flag. void SetObjectStat(Bool_t stat); Turn on/off tracking of objects in the TObjectTable. Long_t GetDtorOnly(); return destructor only flag. void SetDtorOnly(void* obj); set destructor only flag. void operator delete(void* ptr); operator delete. void operator delete[](void* ptr); operator delete []. void operator delete(void* ptr, void* vp); Only called by placement new when throwing an exception. void operator delete[](void* ptr, void* vp); Only called by placement new[] when throwing an exception. void MakeZombie(); { fBits |= kZombie; }. void Clear(Option_t* = """"); { }. Option_t * GetOption() const; { return """"; }. Bool_t IsSortable() const; { return kFALSE; }. Bool_t IsOnHeap() const; { return TestBit(kIsOnHeap); }. Bool_t IsZombie() const; { return TestBit(kZombie); }. void * operator new(size_t sz); ----- operators. { return TStorage::ObjectAlloc(sz); }. void * operator new[](size_t sz); { return TStorage::ObjectAlloc(sz); }. void * operator new(size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void * operator new[](size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void SetBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TObject.html:18836,Clear,Clear,18836,root/html534/TObject.html,https://root.cern,https://root.cern/root/html534/TObject.html,3,['Clear'],['Clear']
Usability,"s (in principle against good; design since a child class should not provide less functionality; than its parent, however, sometimes it is necessary). void Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; Use this method to declare a method obsolete. Specify as of which version; the method is obsolete and as from which version it will be removed. Bool_t GetObjectStat(); Get status of object stat flag. void SetObjectStat(Bool_t stat); Turn on/off tracking of objects in the TObjectTable. Long_t GetDtorOnly(); return destructor only flag. void SetDtorOnly(void* obj); set destructor only flag. void operator delete(void* ptr); operator delete. void operator delete[](void* ptr); operator delete []. void operator delete(void* ptr, void* vp); Only called by placement new when throwing an exception. void operator delete[](void* ptr, void* vp); Only called by placement new[] when throwing an exception. void MakeZombie(); { fBits |= kZombie; }. void Clear(Option_t* = """"); { }. Option_t * GetOption() const; { return """"; }. Bool_t IsSortable() const; { return kFALSE; }. Bool_t IsOnHeap() const; { return TestBit(kIsOnHeap); }. Bool_t IsZombie() const; { return TestBit(kZombie); }. void * operator new(size_t sz); ----- operators. { return TStorage::ObjectAlloc(sz); }. void * operator new[](size_t sz); { return TStorage::ObjectAlloc(sz); }. void * operator new(size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void * operator new[](size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void SetBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TObject.h 38832 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TObject.html:18818,Clear,Clear,18818,root/html530/TObject.html,https://root.cern,https://root.cern/root/html530/TObject.html,2,['Clear'],['Clear']
Usability,"s * GetValueClass() const overrideReturn a pointer to the TClass representing the content.Definition TGenCollectionProxy.cxx:1038; TGenCollectionProxy::fEnvEnvironBase_t * fEnvAddress of the currently proxied object.Definition TGenCollectionProxy.h:314; TGenCollectionProxy::kBIT_ISSTRING@ kBIT_ISSTRINGDefinition TGenCollectionProxy.h:47; TGenCollectionProxy::kBIT_ISTSTRING@ kBIT_ISTSTRINGDefinition TGenCollectionProxy.h:48; TGenCollectionProxy::fFunctionDeleteIteratorDeleteIterator_t fFunctionDeleteIteratorDefinition TGenCollectionProxy.h:327; TGenCollectionProxy::fCollectCollectfunc_t fCollectMethod to collect objects from container.Definition TGenCollectionProxy.h:309; TGenCollectionProxy::PushProxyvoid PushProxy(void *objstart) overrideAdd an object.Definition TGenCollectionProxy.cxx:1299; TGenCollectionProxy::PopProxyvoid PopProxy() overrideRemove the last object.Definition TGenCollectionProxy.cxx:1334; TGenCollectionProxy::GetTypeEDataType GetType() const overrideIf the content is a simple numerical value, return its type (see TDataType)Definition TGenCollectionProxy.cxx:1051; TGenCollectionProxy::InitializeTGenCollectionProxy * Initialize(Bool_t silent) constProxy initializer.Definition TGenCollectionProxy.cxx:770; TGenCollectionProxy::InitializeExvirtual TGenCollectionProxy * InitializeEx(Bool_t silent)Proxy initializer.Definition TGenCollectionProxy.cxx:843; TGenCollectionProxy::Commitvoid Commit(void *env) overrideCommit the change.Definition TGenCollectionProxy.cxx:1277; TGenCollectionProxy::fNamestd::string fNameName of the class being proxied.Definition TGenCollectionProxy.h:299; TGenCollectionProxy::GetFunctionCopyIteratorCopyIterator_t GetFunctionCopyIterator(Bool_t read=kTRUE) overrideSee typedef void (*CopyIterator_t)(void *&dest, const void *source); Copy the iterator source,...Definition TGenCollectionProxy.cxx:1642; TGenCollectionProxy::fSTL_typeint fSTL_typeSTL container type.Definition TGenCollectionProxy.h:320; TGenCollectionProxy::fFunctionCop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:79204,simpl,simple,79204,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['simpl'],['simple']
Usability,"s * TGX11::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGX11.h. ◆ ClearArea(). void TGX11::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the background color. ; Reimplemented from TVirtualX.; Definition at line 1741 of file GX11Gui.cxx. ◆ ClearPixmap(). void TGX11::ClearPixmap ; (; Drawable * ; pix). private . Clear the pixmap pix. ; Definition at line 407 of file TGX11.cxx. ◆ ClearWindow() [1/2]. void TGX11::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 422 of file TGX11.cxx. ◆ ClearWindow() [2/2]. void TGX11::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 2142 of file GX11Gui.cxx. ◆ CloseDisplay(). void TGX11::CloseDisplay ; (; ). overridevirtual . Close connection to display server. ; Reimplemented from TVirtualX.; Definition at line 840 of file GX11Gui.cxx. ◆ ClosePixmap(). void TGX11::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 439 of file TGX11.cxx. ◆ CloseWindow(). void TGX11::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 447 of file TGX11.cxx. ◆ CloseWindow1(). void TGX11::CloseWindow1 ; (; ). private . Delete current window. ; Definition at line 461 of file TGX11.cxx. ◆ CollectImageColors(). void TGX11::CollectImageColors ; (; ULong_t ; pixel, . ULong_t *& ; orgcolors, . Int_t & ; ncolors, . Int_t & ; maxcolors . ). private . Collect in orgcolors all different original image colors. ; Definition at line 2949 of file TGX11.cxx. ◆ ConvertP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:58503,Clear,Clear,58503,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Clear'],['Clear']
Usability,"s *cl, Bool_t useBcnt=kFALSE)=0;  ; virtual UInt_t WriteVersionMemberWise (const TClass *cl, Bool_t useBcnt=kFALSE)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer.html:16726,Clear,Clear,16726,doc/master/classTBuffer.html,https://root.cern,https://root.cern/doc/master/classTBuffer.html,2,['Clear'],['Clear']
Usability,"s + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void Scale (Double_t c);  Scale contents and errors of this histogram by c: this = this * c It does not modify the histogram's number of entries. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  ; void SetBinEdges (Int_t idim, const Double_t *bins);  Set the axis # of bins and bin limits on dimension idim. ;  ; void SetBinError (const Int_t *idx, Double_t e);  ; void SetBinError (Long64_t bin, Double_t e);  ; void SetEntries (Double_t entries);  ; void SetTitle (const char *title) override;  Change (i.e. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:13502,Clear,Clear,13502,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,3,['Clear'],['Clear']
Usability,s . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Interfacing ROOT and Spark. Presently two ways are available to exploit the widely adopted Spark technology for carrying out ROOT based data analysis:. PyROOTSpark : offers the possibility to use a simple map reduce interface to run existing root code with a few changes on Spark resources. The key is to use the PyROOT inteface in combination with PySpark.; Spark-ROOT : offers the possibility to read ROOT files connecting the format directly to Spark's DataFrames/Datasets/RDDs. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/interfacing-root-and-spark.html:2075,simpl,simple,2075,d/interfacing-root-and-spark.html,https://root.cern,https://root.cern/d/interfacing-root-and-spark.html,3,"['Guid', 'guid', 'simpl']","['Guides', 'guidelines', 'simple']"
Usability,"s . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it is possible to exploit all the available CPUs by using PROOF-Lite. N.B. PROOF-Lite doesn't work on Windows yet and it requires to use a selector composed of a source file and a header file. You can download both files from there: ProofEventSelector.h ProofEventSelector.C or on the linux terminal. wget https://raw.githubusercontent.com/root-mirror/training/master/old-files/ProofEventSelector.C; wget https://raw.githubusercontent.com/root-mirror/training/master/old-files/ProofEventSelector.h. Then you can simply use it like this:; TProof::Open("""");; // create a TChain instead of a TTree; TChain *chain = new TChain(""EventTree"", ""Event Data Chain"");; // add our file; chain->Add(""http://root.cern/files/introtutorials/eventdata.root"");; // tell the chain that we want to use PROOF; chain->SetProof();; // run the selector; chain->Process(""ProofEventSelector.C+"");. For the functions used, see the documentation of the TChain constructor and TChain::Add().; You need to register the histogram in your selector's output list, by passing it to GetOutputList()->Add(hist), ideally right after you have created it with new TH1F(...). If you don't add it to the output list, PROOF cannot know that this histogram is the result of the analysis.; Note: If the network is good, try to take this file instead: http://root.cern/files/introtutorials/eventdata-10k.root, it contains more events.; Then the TChain::Process() call is the same than before, but it will now use all your CPUs!; . ‹ Histogramming in a Selector; up; The End ›. Navigate through this book; Meet a TTree; Accessing a TTree With a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:2509,simpl,simply,2509,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,1,['simpl'],['simply']
Usability,"s . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Code Owners. ROOT consists of several loosely coupled but consistently designed parts. The ""code owners"" of these parts are experts that review pull requests and guide these packages over a couple of years.; An up-to-date, detailed mapping of code versus owners can be found at https://github.com/root-project/root/blob/master/.github/CODEOWNERS. The long-term, coarse list can be found below:; Module; Code Owner; I/O; Philippe Canal (Fermilab);  •  Compression; Oksana Shadura (Nebraska-Lincoln); Math, Statistics, Machine Learning; Lorenzo Moneta (CERN);  •  RooFit; Wouter Verkerke (NIKHEF), Stephan Hageboeck (CERN);  •  New histograms (RHist); Hadrien Grasland (LAL), Axel Naumann (CERN); Graphics; Olivier Couet (CERN), Sergey Linev (GSI); RDataFrame; Enrico Guiraud (CERN); Web-GUI, http Server; Sergey Linev (GSI), Bertrand Bellenot (CERN); Event Display; Matevz Tadel (UCSD), Alja Mrak-Tadel (UCSD); PyROOT; Enric Tejedor (CERN); cling; Axel Naumann (CERN); Build System; Oksana Shadura (Nebraska-Lincoln); C++ Modules; Vassil Vassilev (Princeton), Oksana Shadura (Nebraska-Lincoln); Documentation; Olivier Couet (CERN). Sitemap. Downlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/code-owners.html:2022,guid,guide,2022,d/code-owners.html,https://root.cern,https://root.cern/d/code-owners.html,1,['guid'],['guide']
Usability,"s . ◆ Class_Version(). static constexpr Version_t RooRealVarSharedProperties::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 66 of file RooRealVarSharedProperties.h. ◆ DeclFileName(). static const char * RooRealVarSharedProperties::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 66 of file RooRealVarSharedProperties.h. ◆ disownBinnings(). void RooRealVarSharedProperties::disownBinnings ; (; ). inline . Definition at line 56 of file RooRealVarSharedProperties.h. ◆ IsA(). TClass * RooRealVarSharedProperties::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 66 of file RooRealVarSharedProperties.h. ◆ Streamer(). void RooRealVarSharedProperties::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooRealVarSharedProperties::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file RooRealVarSharedProperties.h. Friends And Related Symbol Documentation. ◆ RooRealVar. friend class RooRealVar. friend . Definition at line 62 of file RooRealVarSharedProperties.h. Member Data Documentation. ◆ _altBinning. std::unordered_map<std::string,RooAbsBinning*> RooRealVarSharedProperties::_altBinning. protected . Optional alternative ranges and binnings. ; Definition at line 64 of file RooRealVarSharedProperties.h. ◆ _ownBinnings. bool RooRealVarSharedProperties::_ownBinnings {true}. protected . Definition at line 65 of file RooRealVarSharedProperties.h. Libraries for RooRealVarSharedProperties:. [legend]; The documentation for this class was generated from the following file:; roofit/roofitcore/inc/RooRealVarSharedProperties.h. RooRealVarSharedProperties. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVarSharedProperties.html:14804,Guid,Guide,14804,doc/master/classRooRealVarSharedProperties.html,https://root.cern,https://root.cern/doc/master/classRooRealVarSharedProperties.html,1,['Guid'],['Guide']
Usability,s ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TWin32Mutex::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TWin32Mutex::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 45 of file TWin32Mutex.h. ◆ DeclFileName(). static const char * TWin32Mutex::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TWin32Mutex.h. ◆ IsA(). TClass * TWin32Mutex::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TMutexImp.; Definition at line 45 of file TWin32Mutex.h. ◆ Lock(). Int_t TWin32Mutex::Lock ; (; ). overridevirtual . Lock the mutex. ; Implements TMutexImp.; Definition at line 48 of file TWin32Mutex.cxx. ◆ Streamer(). void TWin32Mutex::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TMutexImp. ◆ StreamerNVirtual(). void TWin32Mutex::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TWin32Mutex.h. ◆ TryLock(). Int_t TWin32Mutex::TryLock ; (; ). overridevirtual . Try locking the mutex. Returns 0 if mutex can be locked. ; Implements TMutexImp.; Definition at line 57 of file TWin32Mutex.cxx. ◆ UnLock(). Int_t TWin32Mutex::UnLock ; (; void ; ). overridevirtual . Unlock the mutex. ; Implements TMutexImp.; Definition at line 67 of file TWin32Mutex.cxx. Friends And Related Symbol Documentation. ◆ TWin32Condition. friend class TWin32Condition. friend . Definition at line 30 of file TWin32Mutex.h. Member Data Documentation. ◆ fCritSect. CRITICAL_SECTION TWin32Mutex::fCritSect. private . Definition at line 33 of file TWin32Mutex.h. core/thread/inc/TWin32Mutex.h; core/thread/src/TWin32Mutex.cxx. TWin32Mutex. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32Mutex.html:13244,Guid,Guide,13244,doc/master/classTWin32Mutex.html,https://root.cern,https://root.cern/doc/master/classTWin32Mutex.html,1,['Guid'],['Guide']
Usability,"s ; // for each data subset designated by C states; RooSimultaneous* simPdf = builder.buildPdf(*config,&D) ;; . The above snippet of code demonstrates the concept of RooSimPdfBuilder:; the user defines a single 'prototype' PDF that defines the structure of all; PDF components of the RooSimultaneous PDF to be built. RooSimPdfBuilder ; then takes this prototype and replicates it as a component ; PDF for each state of the C index category.; . In the above example RooSimPdfBuilder; will first replicate k and s into ; k_C1,k_C2 and s_C1,s_C2, as prescribed in the; configuration. Then it will recursively replicate all PDF nodes that depend on; the 'split' parameter nodes: gauss into gauss_C1,C2, argus ; into argus_C1,C2 and finally pdf into pdf_C1,pdf_C2. ; When PDFs for all states of C have been replicated; they are assembled into a RooSimultaneous PDF, which is returned by the buildPdf(); method.; . Although in this very simple example the use of RooSimPdfBuilder doesn't; reduce the amount of code much, it is already easier to read and maintain; because there is no duplicate code. As the complexity of the RooSimultaneous; to be built increases, the advantages of RooSimPdfBuilder will become more and; more apparent.; ; Builder configuration rules for a single prototype PDF. Each builder configuration needs at minumum two lines, physModels and splitCats, which identify; the ingredients of the build. In this section we only explain the building rules for; builds from a single prototype PDF. In that case the physModels line always reads; . physModels = {pdfName}; . The second line, splitCats, indicates which categories are going to be used to ; differentiate the various subsets of the 'master' input data set. You can enter; a single category here, or multiple if necessary:; . splitCats = {catName} [{catName} ...]; . All listed splitcats must be RooCategories that appear in the dataset provided to; RooSimPdfBuilder::buildPdf(). The parameter splitting prescriptions, the essen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimPdfBuilder.html:3888,simpl,simple,3888,root/html526/RooSimPdfBuilder.html,https://root.cern,https://root.cern/root/html526/RooSimPdfBuilder.html,7,['simpl'],['simple']
Usability,s ;  SQLiteIPLocation.C ;  SQLitePlatformDistribution.C ;  SQLiteTimeVersionOfRoot.C ;  SQLiteVersionsOfRoot.C ;  sqlselect.CQuery example to MySQL test database ;  sqlselect.py Query example to MySQL test database ;  sqltables.CThis is an example illustrating how the TSQLFile class can be used ;  ► thread;  stressThreadPool.CUsage: ;  threadPool.CUsage: ;  threads.CExample of a simple script creating 3 threads ;  threadsh1.CExample of a simple script creating 3 threads ;  threadsh2.CExample of a simple script creating 2 threads each with one canvas ;  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVACrossValidationApplication.C This macro provides an example of how to use TMVA for k-folds cross evaluation in application ;  TMVACrossValidationRegression.C This macro provides an example of how to use TMVA for k-folds cross evaluation ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMinimalClassification.C Minimal self-contained example for setting up TMVA with binary classifi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:164931,simpl,simple,164931,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['simpl'],['simple']
Usability,"s = 110, kygaus = 111, kzgaus = 112, kxygaus = 115,; 179 klandau = 120 , kxlandau = 120, kylandau = 121, kzlandau = 122, kxylandau = 125,; 180 kpol = 130 , kxpol = 130, kypol = 131, kzpol = 132,; 181 ; 182 kParameter = 140,; 183 kConstant = 141,; 184 kBoolOptimize = 142,; 185 kStringConst = 143,; 186 kVariable = 144,; 187 kFunctionCall = 145,; 188 kData = 146,; 189 kUnary = 147,; 190 kBinary = 148,; 191 kThree = 149,; 192 kDefinedVariable = 150,; 193 kDefinedString = 151,; 194 //; 195 kPlusD = 152,; 196 kPlusDD = 153,; 197 kMultD = 154,; 198 kMultDD = 155,; 199 kBoolOptimizeOr = 156,; 200 kBoolOptimizeAnd = 157,; 201 kBoolSet = 158,; 202 kFDM = 159,; 203 kFD0 = 160,; 204 kFD1 = 161,; 205 kFD2 = 162,; 206 kFD3 = 163; 207 };; 208 ; 209public:; 210 // TFormula status bits; 211 enum {; 212 kNotGlobal = BIT(10), // don't store in gROOT->GetListOfFunction; 213 kNormalized = BIT(14), // set to true if the function (ex gausn) is normalized; 214 kLinear = BIT(16) //set to true if the function is for linear fitting; 215 };; 216 ; 217 TFormula();; 218 TFormula(const char *name,const char *formula);; 219 TFormula(const TFormula &formula);; 220 TFormula& operator=(const TFormula &rhs);; 221 ~TFormula() override;; 222 ; 223 public:; 224 void Optimize();; 225 virtual void Analyze(const char *schain, Int_t &err, Int_t offset=0);; 226 virtual Bool_t AnalyzeFunction(TString &chaine, Int_t &err, Int_t offset=0);; 227 virtual Int_t Compile(const char *expression="""");; 228 void Copy(TObject &formula) const override;; 229 void Clear(Option_t *option="""") override;; 230 virtual char *DefinedString(Int_t code);; 231 virtual Double_t DefinedValue(Int_t code);; 232 virtual Int_t DefinedVariable(TString &variable,Int_t &action);; 233 virtual Double_t Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;; 234 virtual Double_t EvalParOld(const Double_t *x, const Double_t *params=nullptr);; 235 virtual Double_t EvalPar(const Double_t *x, const Double_t *params=nullptr){return ((*this).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/v5_2TFormula_8h_source.html:7993,Clear,Clear,7993,doc/master/v5_2TFormula_8h_source.html,https://root.cern,https://root.cern/doc/master/v5_2TFormula_8h_source.html,1,['Clear'],['Clear']
Usability,"s Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. TQObject. ←; TQCommand. ←. TQUndoManager. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQCommand.html:19517,undo,undo,19517,root/html602/TQCommand.html,https://root.cern,https://root.cern/root/html602/TQCommand.html,2,['undo'],['undo']
Usability,"s Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooProduct(); Default constructor. ~RooProduct(); Destructor. RooProduct(const char* name, const char* title, const RooArgSet& _prodSet); Construct function representing the product of functions in prodSet. RooProduct(const RooProduct& other, const char* name = 0); Copy constructor. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; Force internal handling of integration of given observable if any; of the product terms depend on it. Int_t getPartIntList(const RooArgSet* iset, const char* rangeName = 0) const; Return list of (partial) integrals whose product defines the integral of this; RooProduct over the observables in iset in range isetRange. If no such list; exists, create it now and store it in the cache for future use. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Declare that we handle all integrations internally. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Calculate integral internally from appropriate partial integral cache. Double_t calculate(const RooArgList& partIntList) const; Calculate and return product of partial terms in partIntList. const char* makeFPName(const char* pfx, const RooArgSet& terms) const; Construct automatic name for internal product terms. Double_t evaluate() const; Evaluate product of input functions. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProduct to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooProduct(*this, newname); }. ProdMap* groupProductTerms(const RooArgSet& ) const. » Last changed: Mon Dec 7 13:48:44 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProduct.html:34113,intuit,intuitively,34113,root/html526/RooProduct.html,https://root.cern,https://root.cern/root/html526/RooProduct.html,1,['intuit'],['intuitively']
Usability,"s Details::RWebWindowPlugin. friend . Definition at line 42 of file RFileDialog.hxx. Member Data Documentation. ◆ fBrowsable. RBrowserData ROOT::RFileDialog::fBrowsable. protected . ! central browsing element ; Definition at line 55 of file RFileDialog.hxx. ◆ fCallback. RFileDialogCallback_t ROOT::RFileDialog::fCallback. protected . ! function receiving result, called once ; Definition at line 64 of file RFileDialog.hxx. ◆ fCanChangePath. bool ROOT::RFileDialog::fCanChangePath {true}. protected . ! if working path can be changed via gui elements ; Definition at line 56 of file RFileDialog.hxx. ◆ fDidSelect. bool ROOT::RFileDialog::fDidSelect {false}. protected . ! true when dialog is selected or closed ; Definition at line 60 of file RFileDialog.hxx. ◆ fKind. EDialogTypes ROOT::RFileDialog::fKind {kOpenFile}. protected . ! dialog kind OpenFile, SaveAs, NewFile ; Definition at line 53 of file RFileDialog.hxx. ◆ fNameFilters. std::vector<std::string> ROOT::RFileDialog::fNameFilters. protected . ! name filters ; Definition at line 62 of file RFileDialog.hxx. ◆ fSelect. std::string ROOT::RFileDialog::fSelect. protected . ! result of file selection ; Definition at line 63 of file RFileDialog.hxx. ◆ fSelectedFilter. std::string ROOT::RFileDialog::fSelectedFilter. protected . ! name of selected filter ; Definition at line 61 of file RFileDialog.hxx. ◆ fTitle. std::string ROOT::RFileDialog::fTitle. protected . ! title, when not specified default will be used ; Definition at line 54 of file RFileDialog.hxx. ◆ fWebWindow. std::shared_ptr<RWebWindow> ROOT::RFileDialog::fWebWindow. protected . ! web window for file dialog ; Definition at line 58 of file RFileDialog.hxx. Libraries for ROOT::RFileDialog:. [legend]; The documentation for this class was generated from the following files:; gui/browserv7/inc/ROOT/RFileDialog.hxx; gui/browserv7/src/RFileDialog.cxx. ROOTRFileDialog. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html:14134,Guid,Guide,14134,doc/v632/classROOT_1_1RFileDialog.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RFileDialog.html,1,['Guid'],['Guide']
Usability,"s Element > . void TMatrixTSparse< Element >::APlusB ; (; const TMatrixTSparse< Element > & ; a, . const TMatrixTSparse< Element > & ; b, . Int_t ; constr = 0 . ). protected . General matrix addition. ; Replace this matrix with C such that C = A + B. Note, matrix C is allocated for constr=1. ; Definition at line 845 of file TMatrixTSparse.cxx. ◆ Class() [1/2]. template<class Element > . static TClass * TMatrixTSparse< Element >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class() [2/2]. TClass * TMatrixTSparse< double >::Class ; (; ). ◆ Class_Name(). template<class Element > . static const char * TMatrixTSparse< Element >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class Element > . static constexpr Version_t TMatrixTSparse< Element >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 215 of file TMatrixTSparse.h. ◆ Clear(). template<class Element > . void TMatrixTSparse< Element >::Clear ; (; Option_t * ; = """"). inlineoverridevirtual . Implements TMatrixTBase< Element >.; Definition at line 130 of file TMatrixTSparse.h. ◆ ColNorm(). template<class Element > . Element TMatrixTSparse< Element >::ColNorm. overridevirtual . Column matrix norm, MAX{ SUM{ |M(i,j)|, over i}, over j}. ; The norm is induced by the 1 vector norm. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 2341 of file TMatrixTSparse.cxx. ◆ conservative_sparse_sparse_product_impl(). template<class Element > . void TMatrixTSparse< Element >::conservative_sparse_sparse_product_impl ; (; const TMatrixTSparse< Element > & ; lhs, . const TMatrixTSparse< Element > & ; rhs, . Int_t ; constr = 0 . ). protected . General Sparse Matrix Multiplication (SpMM). ; This code is an adaptation of Eigen SpMM implementation. This product is conservative, meaning that it preserves the symbolic non zeros. Given lhs, rhs, it computes this = rhs * lhs. Note, result matrix is only allocated when constr=1. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:38113,Clear,Clear,38113,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['Clear'],['Clear']
Usability,"s Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TTreeViewer. class TTreeViewer: public TGMainFrame. TreeViewer is a graphic user interface designed to handle ROOT trees and to; take advantage of TTree class features. It uses ROOT native GUI widgets adapted for 'drag and drop' functionality.; in the same session.; The following capabilities are making the viewer a helpful tool for analysis:; - several trees may be opened in the same session;; - branches and leaves can be easily browsed or scanned;; - fast drawing of branch expressions by double-clicking;; - new variables/selections easy to compose with the built-in editor;; - histograms can be composed by dragging leaves or user-defined expressions; to X, Y and Z axis items;; - the tree entries to be processed can be selected with a double slider;; - selections can be defined and activated by dragging them to the 'Cut' item;; - all expressions can be aliased and aliases can be used in composing others;; - input/output event lists easy to handle;; - menu with histogram drawing options;; - user commands may be executed within the viewer and the current command; can be echoed;; - current 'Draw' event loop is reflected by a progress bar and may be; interrupted by the user;; - all widgets have self-explaining tool tips and/or context menus;; - expressions/leaves can be dragged to a 'scan box' and scanned by; double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. - a menu bar with entries : File, Edit, Run, Options and Help;; - a toolbar in the upper part where you can issue user commands, change; the drawing option and the histogram name, three check buttons Hist, Rec; and Scan.HIST toggles histogram drawing mode, REC enables recording of the; last command issued and SCAN enables redirecting of TTree::Scan command in; an ASCI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeViewer.html:1392,progress bar,progress bar,1392,root/html530/TTreeViewer.html,https://root.cern,https://root.cern/root/html530/TTreeViewer.html,3,['progress bar'],['progress bar']
Usability,"s Libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for minimization is the class ROOT::Math::Minimizer and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is organized in fitting classes present in MathCore in the (ROOT::Fit namespace) for providing the fitting functionality and the use the minimization libraries via the common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:; Minuit: library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits.; Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions.; Fumili: library providing the implementation of the original Fumili fitting algorithm (class TFumili). Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:; Matrix: general matrix package providing matrix classes (TMatrixD and TMatrixF) and vector classes (TVectorD and TVectorF) and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: Classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transforma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Math.html:2136,Simpl,Simplex,2136,doc/master/group__Math.html,https://root.cern,https://root.cern/doc/master/group__Math.html,2,['Simpl'],['Simplex']
Usability,"s Reference. . Definition at line 95 of file TDocDirective.h. Public Member Functions;  TDocMacroDirective ();  ;  ~TDocMacroDirective () override;  Destructor. ;  ; void AddLine (const TSubString &line) override;  Add a macro line. ;  ; void DeleteOutput () const override;  ; const char * GetEndTag () const override;  ; Bool_t GetResult (TString &result) override;  Get the result (i.e. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDocDirective; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMacroDirective.html:1270,Clear,Clear,1270,doc/master/classTDocMacroDirective.html,https://root.cern,https://root.cern/doc/master/classTDocMacroDirective.html,1,['Clear'],['Clear']
Usability,"s Roo1DTable: public RooTable. Roo1DTable implements a one-dimensional table. A table is the category; equivalent of a plot. To create a table use the RooDataSet::table method.; . Function Members (Methods); public:. Roo1DTable(); Roo1DTable(const Roo1DTable& other); Roo1DTable(const char* name, const char* title, const RooAbsCategory& cat); virtual~Roo1DTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(RooAbsCategory& cat, Double_t weight = 1.0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tget(const char* label, Bool_t sil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo1DTable.html:877,Clear,Clear,877,root/html526/Roo1DTable.html,https://root.cern,https://root.cern/root/html526/Roo1DTable.html,5,['Clear'],['Clear']
Usability,"s TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Suspend ();  Suspend worker. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondor.html:3183,Clear,Clear,3183,doc/master/classTCondor.html,https://root.cern,https://root.cern/doc/master/classTCondor.html,1,['Clear'],['Clear']
Usability,"s TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_th1.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:161865,simpl,simple,161865,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simple']
Usability,"s TVirtualGeoPainter.; Definition at line 104 of file RGeoPainter.hxx. ◆ ShapeDistancetoPrimitive(). Int_t ROOT::RGeoPainter::ShapeDistancetoPrimitive ; (; const TGeoShape * ; , . Int_t ; , . Int_t ; , . Int_t ;  . ); const. inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 105 of file RGeoPainter.hxx. ◆ Test(). void ROOT::RGeoPainter::Test ; (; Int_t ; , . Option_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 106 of file RGeoPainter.hxx. ◆ TestOverlaps(). void ROOT::RGeoPainter::TestOverlaps ; (; const char * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 107 of file RGeoPainter.hxx. ◆ TestVoxels(). Bool_t ROOT::RGeoPainter::TestVoxels ; (; TGeoVolume * ; ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 108 of file RGeoPainter.hxx. ◆ UnbombTranslation(). void ROOT::RGeoPainter::UnbombTranslation ; (; const Double_t * ; , . Double_t * ;  . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 109 of file RGeoPainter.hxx. ◆ Weight(). Double_t ROOT::RGeoPainter::Weight ; (; Double_t ; , . Option_t * ; = ""v"" . ). inlineoverridevirtual . Implements TVirtualGeoPainter.; Definition at line 110 of file RGeoPainter.hxx. Member Data Documentation. ◆ fGeoManager. TGeoManager* ROOT::RGeoPainter::fGeoManager {nullptr}. private . Definition at line 22 of file RGeoPainter.hxx. ◆ fTopVisible. Int_t ROOT::RGeoPainter::fTopVisible {-1}. private . ! is s ; Definition at line 25 of file RGeoPainter.hxx. ◆ fViewer. std::shared_ptr<RGeomViewer> ROOT::RGeoPainter::fViewer. private . Definition at line 24 of file RGeoPainter.hxx. Libraries for ROOT::RGeoPainter:. [legend]; The documentation for this class was generated from the following files:; geom/webviewer/inc/ROOT/RGeoPainter.hxx; geom/webviewer/src/RGeoPainter.cxx. ROOTRGeoPainter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html:32771,Guid,Guide,32771,doc/master/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoPainter.html,1,['Guid'],['Guide']
Usability,"s VI > . static const char * RooCFunction1Binding< VO, VI >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 252 of file RooCFunction1Binding.h. ◆ evaluate(). template<class VO , class VI > . double RooCFunction1Binding< VO, VI >::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 245 of file RooCFunction1Binding.h. ◆ IsA(). template<class VO , class VI > . TClass * RooCFunction1Binding< VO, VI >::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 252 of file RooCFunction1Binding.h. ◆ printArgs(). template<class VO , class VI > . void RooCFunction1Binding< VO, VI >::printArgs ; (; std::ostream & ; os); const. inlineoverridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 227 of file RooCFunction1Binding.h. ◆ Streamer(). template<class VO , class VI > . void RooCFunction1Binding< VO, VI >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). template<class VO , class VI > . void RooCFunction1Binding< VO, VI >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 252 of file RooCFunction1Binding.h. Member Data Documentation. ◆ func. template<class VO , class VI > . RooCFunction1Ref<VO,VI> RooCFunction1Binding< VO, VI >::func. protected . Definition at line 242 of file RooCFunction1Binding.h. ◆ x. template<class VO , class VI > . RooRealProxy RooCFunction1Binding< VO, VI >::x. protected . Definition at line 243 of file RooCFunction1Binding.h. roofit/roofit/inc/RooCFunction1Binding.h. RooCFunction1Binding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1Binding.html:63921,Guid,Guide,63921,doc/master/classRooCFunction1Binding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1Binding.html,1,['Guid'],['Guide']
Usability,"s [0, 1]; cv - cell value, see definition of ECellValue . Definition at line 170 of file PDEFoamKernelLinN.cxx. ◆ IsA(). virtual TClass * TMVA::PDEFoamKernelLinN::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::PDEFoamKernelBase.; Definition at line 57 of file PDEFoamKernelLinN.h. ◆ Streamer(). virtual void TMVA::PDEFoamKernelLinN::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::PDEFoamKernelBase. ◆ StreamerNVirtual(). void TMVA::PDEFoamKernelLinN::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 57 of file PDEFoamKernelLinN.h. ◆ WeightLinNeighbors(). Float_t TMVA::PDEFoamKernelLinN::WeightLinNeighbors ; (; PDEFoam * ; foam, . std::vector< Float_t > & ; txvec, . ECellValue ; cv, . Bool_t ; treatEmptyCells . ). protected . Returns the cell value, corresponding to 'txvec' (foam coordinates [0,1]), weighted by the neighbor cells via a linear function. ; Parameters:; foam - the foam to search in; txvec - event vector, transformed into foam coordinates [0,1]; cv - cell value to be weighted; treatEmptyCells - if this option is set to false (default), it is not checked, wether the cell value or neighbor cell values are undefined (using foam->CellValueIsUndefined()). If this option is set to true, than only non-empty neighbor cells are taken into account for weighting. If the cell value of the cell, which contains txvec, is empty, than its value is estimated by the average value of the non-empty neighbor cells (using GetAverageNeighborsValue()). . Definition at line 106 of file PDEFoamKernelLinN.cxx. Libraries for TMVA::PDEFoamKernelLinN:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamKernelLinN.h; tmva/tmva/src/PDEFoamKernelLinN.cxx. TMVAPDEFoamKernelLinN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelLinN.html:15628,Guid,Guide,15628,doc/master/classTMVA_1_1PDEFoamKernelLinN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelLinN.html,1,['Guid'],['Guide']
Usability,"s a weight=1 for each bin (it is an unweighted least-square; 4238/// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; 4239/// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; 4240/// are corrected by the obtained chi2 value using this scaling expression:; 4241/// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; 4242/// no point errors.; 4243///; 4244/// #### Excluding points; 4245///; 4246/// You can use TF1::RejectPoint inside your fitting function to exclude some points; 4247/// within a certain range from the fit. See the tutorial `fit/fitExclude.C`.; 4248///; 4249///; 4250/// #### Warning when using the option ""0""; 4251///; 4252/// When selecting the option ""0"", the fitted function is added to; 4253/// the list of functions of the histogram, but it is not drawn when the histogram is drawn.; 4254/// You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; 4255///; 4256/// ~~~ {.cpp}; 4257/// h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; 4258/// h.Draw(); // function is not drawn; 4259/// h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; 4260/// h.Draw(); // function is visible again; 4261/// ~~~; 4262///; 4263 ; 4264TFitResultPtr TH1::Fit(TF1 *f1 ,Option_t *option ,Option_t *goption, Double_t xxmin, Double_t xxmax); 4265{; 4266 // implementation of Fit method is in file hist/src/HFitImpl.cxx; 4267 Foption_t fitOption;; 4268 ROOT::Fit::FitOptionsMake(ROOT::Fit::EFitObjectType::kHistogram,option,fitOption);; 4269 ; 4270 // create range and minimizer options with default values; 4271 ROOT::Fit::DataRange range(xxmin,xxmax);; 4272 ROOT::Math::MinimizerOptions minOption;; 4273 ; 4274 // need to empty the buffer before; 4275 // (t.b.d. do a ML unbinned fit with buffer data); 4276 if (fBuffer) BufferEmpty();; 4277 ; 4278 return ROOT::Fit::FitObject(this, f1 , fitOption , minOptio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:176108,undo,undo,176108,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['undo'],['undo']
Usability,"s all created helper objects into a list which can then be browsed. For details of what these browser helper objects can do, see e.g. TMethodBrowsable, which allows methods to show up in the TBrowser.; Only registered helper objects are created. By default, only TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable are registered (see RegisterDefaultGenerators). You can prevent any of their objects to show up in the browser by unregistering the generator: TMethodBrowsable::Unregister(); TMethodBrowsable::Unregisterstatic void Unregister()Wrapper for the registration method.Definition TBranchBrowsable.cxx:595; will stop creating browsable method helper objects from that call on. Note that these helper objects are cached (in TBranch::fBrowsables); already created (and thus cached) browsables will still appear in the browser even after unregistering the corresponding generator.; You can implement your own browsable objects and their generator; see e.g. the simple TCollectionPropertyBrowsable. Note that you will have to register your generator just like any other, and that you should implement the following methods for your own class, mainly for consistency reasons: static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; TVirtualBranchBrowsable::RegisterGeneratorstatic void RegisterGenerator(MethodCreateListOfBrowsables_t generator)Adds a generator to be called when browsing branches.Definition TBranchBrowsable.cxx:356; TVirtualBranchBrowsable::UnregisterGeneratorstatic void UnregisterGenerator(MethodCreateListOfBrowsables_t generator)Removes a generator from the list of generators to be called when browsing branches.Definition TBranchBrowsable.cxx:372; where GetBrowsables is a static member function of your class, that creates the browsable helper objects, and has the signature static Int_t GetBrowsables(TList& list, const TBranch*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualBranchBrowsable.html:1661,simpl,simple,1661,doc/master/classTVirtualBranchBrowsable.html,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html,1,['simpl'],['simple']
Usability,"s an assembly or a scaled assembly.Definition TGeoVolume.cxx:1822; TGeoVolume::MakeReflectedVolumeTGeoVolume * MakeReflectedVolume(const char *newname="""") constMake a copy of this volume which is reflected with respect to XY plane.Definition TGeoVolume.cxx:1958; TGeoVolume::IsVisiblevirtual Bool_t IsVisible() constDefinition TGeoVolume.h:155; TGeoVoxelFinderFinder class handling voxels.Definition TGeoVoxelFinder.h:20; TGeoVoxelFinder::SetNeedRebuildvoid SetNeedRebuild(Bool_t flag=kTRUE)Definition TGeoVoxelFinder.h:107; TGeoXtruDefinition TGeoXtru.h:22; TGeoXtru::GetNvertInt_t GetNvert() constDefinition TGeoXtru.h:96; TGeoXtru::Classstatic TClass * Class(); THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; THashList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition THashList.cxx:207; THashList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition THashList.cxx:189; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; THashList::AddLastvoid AddLast(TObject *obj) overrideAdd object at the end of the list.Definition THashList.cxx:95; TIterDefinition TCollection.h:235; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TKey::GetClassNamevirtual const char * GetClassName() constDefinition TKey.h:75; TKey::ReadObjvirtual TObject * ReadObj()To read a TObject* from the file.Definition TKey.cxx:759; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::Deletevoid Delete(Option_t *option="""") overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:238322,Clear,Clearvoid,238322,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"s and Manuals | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User's Guide; 6 Serie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:1018,Guid,Guides,1018,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['Guid'],['Guides']
Usability,"s and hits in web browser ;  geom_cms.C;  points.CThis example display only points in web browser ;  projection_prescale.C;  show_extract.CHelper script for showing of extracted / simplified geometries ;  table.CThis example display table in web browser ;  tracks.CThis example display only points in web browser ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  fitLinear2.C Fit a 5d hyperplane by n points, using the linear fitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:107061,Simpl,Simple,107061,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['Simple']
Usability,"s are in many cases an; The inter-relation of three measured quantities X, Y, Z and T can always; be visualized by a four-dimensional histogram or scatter-plot;; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If T is an unknown (but single-valued); approximate function of X,Y,Z this function is displayed by a profile3D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)). In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell); e(I,J,K) is computed from the average of the s(I,J,K) for all cells.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. Example of a profile3D histogram; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; pt = r.Landau(0,1);; hprof3d->Fill(px,py,pz,pt,1);; }; hprof3d->Draw();; }. NOTE: A TProfile3D is drawn as it was a simple TH3. Function Members (Methods); public:. TProfile3D(); TProfile3D(const TProfile3D& profile); TProfile3D(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins, Option_t* option = """"); TProfile3D(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup, Option_t* option = """"); virtual~TProfile3D()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:1364,simpl,simple,1364,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,3,['simpl'],['simple']
Usability,"s are part of the persistent histogram. The option ""SAME""; By default, when an histogram is drawn, the current pad is cleared before drawing. In order to keep the previous drawing and draw on top of it the option SAME should be use. The histogram drawn with the option SAME uses the coordinates system available in the current pad.; This option can be used alone or combined with any valid drawing option but some combinations must be use with care.; Limitations. It does not work when combined with the LEGO and SURF options unless the histogram plotted with the option SAME has exactly the same ranges on the X, Y and Z axis as the currently drawn histogram. To superimpose lego plots histograms' stacks should be used. Colors automatically picked in palette; SinceROOT version 6.09/01; When several histograms are painted in the same canvas thanks to the option ""SAME"" or via a THStack it might be useful to have an easy and automatic way to choose their color. The simplest way is to pick colors in the current active color palette. Palette coloring for histogram is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and PMC (Palette Marker Color). When one of these options is given to TH1::Draw the histogram get its color from the current color palette defined by gStyle->SetPalette(...). The color is determined according to the number of objects having palette coloring in the current pad.; ; void histpalettecolor(); {; auto C = new TCanvas();; ; gStyle->SetOptTitle(kFALSE);; gStyle->SetOptStat(0);; ; auto h1 = new TH1F(""h1"",""Histogram drawn with full circles"",100,-4,4);; auto h2 = new TH1F(""h2"",""Histogram drawn with full squares"",100,-4,4);; auto h3 = new TH1F(""h3"",""Histogram drawn with full triangles up"",100,-4,4);; auto h4 = new TH1F(""h4"",""Histogram drawn with full triangles down"",100,-4,4);; auto h5 = new TH1F(""h5"",""Histogram drawn with empty circles"",100,-4,4);; ; TRandom3 rng;; Double_t px,py;; for (Int_t i = 0; i < 25000; i++) {; rng.Rannor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:16748,simpl,simplest,16748,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['simpl'],['simplest']
Usability,"s as for normal volumes, so that navigation is still optimized. Assemblies are useful for grouping hierarchically volumes which are otherwise defined in a flat manner, but also to avoid clashes between container shapes. To define an assembly one should just input a name, then start adding other volumes (or volume assemblies) as content. ; Definition at line 316 of file TGeoVolume.h. Classes; struct  ThreadData_t;  . Public Member Functions;  TGeoVolumeAssembly ();  Default constructor. ;  ;  TGeoVolumeAssembly (const char *name);  Constructor. ;  ;  ~TGeoVolumeAssembly () override;  Destructor. The assembly is owner of its ""shape"". ;  ; TGeoNode * AddNode (TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""") override;  Add a component to the assembly. ;  ; void AddNodeOverlap (TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat, Option_t *option) override;  Add an overlapping node - not allowed for assemblies. ;  ; void ClearThreadData () const override;  ; TGeoVolume * CloneVolume () const override;  Clone this volume. ;  ; void CreateThreadData (Int_t nthreads) override;  ; TGeoVolume * Divide (const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""") override;  Division makes no sense for assemblies. ;  ; TGeoVolume * Divide (TGeoVolume *cell, TGeoPatternFinder *pattern, Option_t *option=""spacedout"");  Assign to the assembly a collection of identical volumes positioned according a predefined pattern. ;  ; void DrawOnly (Option_t *) override;  draw only this volume ;  ; Int_t GetCurrentNodeIndex () const override;  ; Int_t GetNextNodeIndex () const override;  ; ThreadData_t & GetThreadData () const;  ; TClass * IsA () const override;  ; Bool_t IsAssembly () const override;  Returns true if the volume is an assembly or a scaled assembly. ;  ; Bool_t IsVisible () const override;  ; void SetCurrentNodeIndex (Int_t index);  ; void SetNextNodeIndex (Int_t index);  ; void Streamer (TBuffer &) ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:1649,Clear,ClearThreadData,1649,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,1,['Clear'],['ClearThreadData']
Usability,"s as necessary. TSubString Strip(TString::EStripType s = kTrailing, char c = ' ') const; Return a substring of self stripped at beginning and/or end. void ToLower(); Change string to lower-case. void ToUpper(); Change string to upper case. void AssertElement(Ssiz_t nc) const; Check to make sure a string index is in range. Ssiz_t AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); Calculate a nice capacity greater than or equal to newCap. void Clear(); Clear string without changing its capacity. void Clobber(Ssiz_t nc); Clear string and make sure it has a capacity of nc. void Clone(Ssiz_t nc); Make self a distinct copy with capacity of at least tot, where tot cannot; be smaller than the current length. Preserve previous contents. void FillBuffer(char*& buffer) const; Copy string into I/O buffer. void ReadBuffer(char*& buffer); Read string from I/O buffer. TString * ReadString(TBuffer& b, const TClass* clReq); Read TString object from buffer. Simplified version of; TBuffer::ReadObject (does not keep track of multiple; references to same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Int_t Sizeof() const; Returns size string will occupy on I/O buffer. void Streamer(TBuffer& ); Stream a string object. void WriteString(TBuffer& b, const TString* a); Write TString object to buffer. Simplified version of; TBuffer::WriteObject (does not keep track of multiple; references to the same string). We need to have it here; because TBuffer::ReadObject can only handle descendant; of TObject. Ssiz_t GetInitialCapacity(). Ssiz_t GetResizeIncrement(). Ssiz_t GetMaxWaste(). Ssiz_t InitialCapacity(Ssiz_t ic = 15); Set default initial capacity for all TStrings. Default is 15. Ssiz_t ResizeIncrement(Ssiz_t ri = 16); Set default resize increment for all TStrings. Default is 16. Ssiz_t MaxWaste(Ssiz_t mw = 15); Set maximum space that may be wasted in a string before doing a resize.; Default is 15. TSubString operator()(Ssiz_t start, Ssiz_t len)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TString.html:13965,Simpl,Simplified,13965,root/html534/TString.html,https://root.cern,https://root.cern/root/html534/TString.html,3,['Simpl'],['Simplified']
Usability,"s at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Development. The links in this menu and in the block on your right are intended for the ROOT developers and for people who want to contribute to the ROOT system. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sign in. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/development.html:2250,Guid,Guides,2250,d/development.html,https://root.cern,https://root.cern/d/development.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"s by decreasing volume of the bounding box. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGeoVolume. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnmarkSaved ();  Reset SavePrimitive bits. ;  ; Bool_t Valid () const;  Check if the shape of this volume is valid. ;  ; void VisibleDaughters (Bool_t vis=kTRUE);  set visibility for daughters ;  ; void Voxelize (Option_t *option);  build the voxels for this volume ;  ; Double_t Weight (Double_t precision=0.01, Option_t *option=""va"");  Estimate the weight of a volume (in kg) with SIGMA(M)/M better than PRECISION. ;  ; Double_t WeightA () const;  Analytical computation of the weight. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:24914,Clear,Clear,24914,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['Clear'],['Clear']
Usability,"s calculated . Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);. For usage examples see $ROOTSYS/test/stressLinear.cxx. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TDecompBase(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompBase.html:3381,clear,clear,3381,root/html528/TDecompBase.html,https://root.cern,https://root.cern/root/html528/TDecompBase.html,6,['clear'],['clear']
Usability,"s class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates, . const char ; appendage[], . std::ostream & ; out, . TString::ECaseCompare ; cmp = TStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9936,Clear,ClearGlobalFunctions,9936,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearGlobalFunctions']
Usability,"s class ; Definition at line 334 of file TVirtualX.h. ◆ ClearArea(). void TVirtualX::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1603 of file TVirtualX.cxx. ◆ ClearWindow() [1/2]. void TVirtualX::ClearWindow ; (; ). virtual . Clears the entire area of the current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 177 of file TVirtualX.cxx. ◆ ClearWindow() [2/2]. void TVirtualX::ClearWindow ; (; Window_t ; id). virtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1872 of file TVirtualX.cxx. ◆ CloseDisplay(). void TVirtualX::CloseDisplay ; (; ). virtual . Closes connection to display server and destroys all windows. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1207 of file TVirtualX.cxx. ◆ ClosePixmap(). void TVirtualX::ClosePixmap ; (; ). virtual . Deletes current pixmap. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 191 of file TVirtualX.cxx. ◆ CloseWindow(). void TVirtualX::CloseWindow ; (; ). virtual . Deletes current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 184 of file TVirtualX.cxx. ◆ ConvertPrimarySelection(). void TVirtualX::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t ; clipboard, . Time_t ; when . ). virtual . Causes a SelectionRequest event to be sent to the current primary selecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:55525,Clear,Clears,55525,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,2,['Clear'],"['ClearArea', 'Clears']"
Usability,"s class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (defualt: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?) - URL of CERN's xWho; Root.Html.Charset (default: ISO-8859-1) - HTML character set. IX. Behind the scene; Internally, THtml is just an API class that sets up the list of known; classes, and forwards API invocations to the ""work horses"".; TDocOutput; generates the output by letting a; TDocParser; object parse the sources, which in turn invokes objects deriving from; TDocDirective; to process directives.; . Function Members (Methods); public:. virtual~THtml(); voidTObject::AbstractMethod(const char* method) const; voidAddMacroPath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConvert(const char* filename, const char* title, const char* dirname = """", const char* relpath = ""../"", Int_t includeOutput = kNoOutput, const char* context = """"); virtual voidTObject::Copy(TObject& object) const; Bool_tCopyFileFromEtcDir(const char* filename) const; virtual voidCreateAuxiliaryFiles() const; voidCreateHierarchy(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THtml.html:17422,Clear,Clear,17422,root/html602/THtml.html,https://root.cern,https://root.cern/root/html602/THtml.html,2,['Clear'],['Clear']
Usability,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/modules.html:11316,simpl,simple,11316,doc/v614/modules.html,https://root.cern,https://root.cern/doc/v614/modules.html,2,['simpl'],['simple']
Usability,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/modules.html:11061,simpl,simple,11061,doc/v610/modules.html,https://root.cern,https://root.cern/doc/v610/modules.html,2,['simpl'],['simple']
Usability,"s collection; External dependents of those elements and recursively any dependents of those dependents (if deepCopy flag is set). If deepCopy is specified, the client-server links between the cloned list elements and the cloned external dependents are reconnected to each other, making the snapshot a completely self-contained entity. ; Definition at line 102 of file RooAbsCollection.cxx. ◆ Streamer(). void RooArgSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCollection.; Reimplemented in RooCollectionProxy< RooArgSet >. ◆ StreamerNVirtual(). void RooArgSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 188 of file RooArgSet.h. ◆ writeToFile(). void RooArgSet::writeToFile ; (; const char * ; fileName); const. Write contents of the argset to specified file. ; See writeToStream() for details ; Definition at line 230 of file RooArgSet.cxx. ◆ writeToStream(). void RooArgSet::writeToStream ; (; std::ostream & ; os, . bool ; compact, . const char * ; section = nullptr . ); const. virtual . Write the contents of the argset in ASCII form to given stream. ; A line is written for each element contained in the form <argName> = <argValue>; The <argValue> part of each element is written by the arguments' writeToStream() function. Parameters. osThe stream to write to. ; compactWrite only the bare values, separated by ' '. . NoteIn compact mode, the stream cannot be read back into a RooArgSet, but only into a RooArgList, because the variable names are lost. ; Parameters. sectionIf non-null, add a section header like [<section>]. . Definition at line 272 of file RooArgSet.cxx. Libraries for RooArgSet:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooArgSet.h; roofit/roofitcore/src/RooArgSet.cxx. RooArgSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgSet.html:46242,Guid,Guide,46242,doc/master/classRooArgSet.html,https://root.cern,https://root.cern/doc/master/classRooArgSet.html,1,['Guid'],['Guide']
Usability,"s color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGQuartz.html:33855,Clear,Clear,33855,doc/master/classTGQuartz.html,https://root.cern,https://root.cern/doc/master/classTGQuartz.html,3,['Clear'],['Clear']
Usability,"s constructor substituted the static methods TChain::MakeTDSet; removing any residual dependence of 'tree' on 'proof'. ~TDSet(); Cleanup. Long64_t Process(TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process TDSet on currently active PROOF session.; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process TDSet on currently active PROOF session.; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TList * GetOutputList(); Get list with all object created during processing (see Process()). void Print(Option_t* option = """") const; Print TDSet basic or full data. When option=""a"" print full data. void SetObjName(const char* objname); Set/change object name. void SetDirectory(const char* dir); Set/change directory. Bool_t Add(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); Add file to list of files to be analyzed. Optionally with the; objname and dir arguments the default, TDSet wide, objname and; dir can be overridden. Bool_t Add(TDSet* set); Add specified data set to the this set. Bool_t Add(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); Add files passed as list of TFileInfo, TUrl or TObjString objects .; If",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDSet.html:11370,Clear,ClearInput,11370,root/html534/TDSet.html,https://root.cern,https://root.cern/root/html534/TDSet.html,6,['Clear'],"['Clear', 'ClearInput']"
Usability,"s copies of Elt to the end. ; Definition at line 665 of file RVec.hxx. ◆ append() [3/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::append ; (; std::initializer_list< T > ; IL). inline . Definition at line 674 of file RVec.hxx. ◆ assign() [1/3]. template<typename T > . template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; in_iter ; in_start, . in_iter ; in_end . ). inline . Definition at line 692 of file RVec.hxx. ◆ assign() [2/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; size_type ; NumElts, . const T & ; Elt . ). inline . Definition at line 680 of file RVec.hxx. ◆ assign() [3/3]. template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::assign ; (; std::initializer_list< T > ; IL). inline . Definition at line 698 of file RVec.hxx. ◆ clear(). template<typename T > . void ROOT::Detail::VecOps::RVecImpl< T >::clear ; (; ). inline . Definition at line 586 of file RVec.hxx. ◆ emplace_back(). template<typename T > . template<typename... ArgTypes> . reference ROOT::Detail::VecOps::RVecImpl< T >::emplace_back ; (; ArgTypes &&... ; Args). inline . Definition at line 920 of file RVec.hxx. ◆ erase() [1/2]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::erase ; (; const_iterator ; CI). inline . Definition at line 704 of file RVec.hxx. ◆ erase() [2/2]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::erase ; (; const_iterator ; CS, . const_iterator ; CE . ). inline . Definition at line 721 of file RVec.hxx. ◆ insert() [1/5]. template<typename T > . iterator ROOT::Detail::VecOps::RVecImpl< T >::insert ; (; iterator ; I, . const T & ; Elt . ). inline . Definition at line 773 of file RVec.hxx. ◆ insert() [2/5]. template<typename T > . template<typename ItTy , typename = typename std::enabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:10570,clear,clear,10570,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,1,['clear'],['clear']
Usability,"s create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticconstexpr . The initial number of empty processing slots that a TThreadedObject is constructed with by default. ; Deprecated: TThreadedObject grows as more slots are required. ; Definition at line 155 of file TThreadedObject.hxx. ◆ fIsMerged. template<class T > . bool ROOT::TThreadedObject< T >::fIsMerged. private . Remember if the objects have been merged already. ; Definition at line 335 of file TThreadedObject.hxx. ◆ fModel. template<class T > . std::unique_ptr<T> ROOT::TThreadedObject< T >::fModel. private . Use to store a ""model"" of the object. ; Definition at line 327 of file TThreadedObject.hxx. ◆ fObjPointers. template<class T > . std::deque<std::shared_ptr<T> > ROOT::TThreadedObject< T >::fObjPointers. private . An object pointer per slot. ; Definition at line 329 of file TThreadedObject.hxx. ◆ fSpinMutex. template<class T > . ROOT::TSpinMutex ROOT::TThreadedObject< T >::fSpinMutex. mutableprivate . Protects concurrent access to fThrIDSlotMap, fObjPointers. ; Definition at line 334 of file TThreadedObject.hxx. ◆ fThrIDSlotMap. template<class T > . std::map<std::thread::id, unsigned> ROOT::TThreadedObject< T >::fThrIDSlotMap. private . A mapping between the thread IDs and the slots. ; Definition at line 333 of file TThreadedObject.hxx. core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTThreadedObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TThreadedObject.html:11099,Guid,Guide,11099,doc/master/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TThreadedObject.html,1,['Guid'],['Guide']
Usability,"s created by previous executions. ; Definition at line 192 of file TTask.cxx. ◆ Add(). void TTask::Add ; (; TTask * ; task). virtual . Add TTask to this. ; Definition at line 176 of file TTask.cxx. ◆ Browse(). void TTask::Browse ; (; TBrowser * ; b). overridevirtual . Browse the list of tasks. ; It is recommended to add the top level task to the list of ROOT browsables by: gROOT->GetListOfBrowsables()->Add(myTopLevelTask). Reimplemented from TObject.; Definition at line 211 of file TTask.cxx. ◆ Class(). static TClass * TTask::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTask::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTask::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file TTask.h. ◆ CleanTasks(). void TTask::CleanTasks ; (; ). virtual . Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ; Definition at line 222 of file TTask.cxx. ◆ Clear(). void TTask::Clear ; (; Option_t * ; option = """"). overridevirtual . Recursively call the Clear function of this task and its subtasks. ; The Clear function must be implemented for each derived class to clear all data structures created by a previous execution of a task. This function is automatically called by the CleanTasks function. ; Reimplemented from TNamed.; Definition at line 240 of file TTask.cxx. ◆ Continue(). void TTask::Continue ; (; ). virtual . Resume execution at the current break point. ; Definition at line 247 of file TTask.cxx. ◆ DeclFileName(). static const char * TTask::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file TTask.h. ◆ Exec(). void TTask::Exec ; (; Option_t * ; option). virtual . Dummy Execute. ; This function must be redefined in the derived cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:17693,Clear,Clear,17693,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"s description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::ObjBuildConfig. class RooSimWSTool::ObjBuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__ObjBuildConfig.html:1099,simpl,simple,1099,root/html534/RooSimWSTool__ObjBuildConfig.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__ObjBuildConfig.html,3,['simpl'],['simple']
Usability,"s description; function members; data members; class charts. ROOT; » ROOFIT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual voidEnableDetailedOutput(bool e = true); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const RooArgSet*GetDetailedOutput() const; virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); static voidSetAlwaysReuseNLL(Bool_t flag); virtual voidSetConditionalObservables(const RooArgSet& set); voidSetNullParameters(const RooArgSet& nullParameters); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp) const; RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(); RooStats::TestStatisticRooStats::TestStatistic::TestStatistic(const RooStats::TestStatistic&). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; RooArgSetfConditionalObs; RooArgSet*fDetailedOutput!; boolfDetailedOutputEnabled; boolfFirstEval; RooAbsReal*fNllAlt! transient copy of the alt NLL; RooAbsReal*fNllNull! transie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html:445,Simpl,SimpleLikelihoodRatioTestStat,445,root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html602/RooStats__SimpleLikelihoodRatioTestStat.html,16,['Simpl'],"['SimpleLikelihoodRatioTestStat', 'SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat']"
Usability,"s drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; TH1F *he4 = new TH1F(""he4"",""Distribution drawn with option E4"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he4->Fill(gRandom->Gaus(0,1));; he4->SetFillColor(kRed);; he4->GetXaxis()->SetRange(40,48);; ce4->cd(1);; he4->Draw(""E4"");; ce4->cd(2);; TH1F *he3 = he4->DrawClone(""E3"");; he3->SetTitle(""Distribution drawn option E3"");; return ce4;; }; The bar chart option; The option ""B"" allows to draw simple vertical bar charts.; The bar width is controlled with TH1::SetBarWidth(),; and the bar offset wihtin the bin, with TH1::SetBarOffset().; These two settings are useful to draw several histograms on the; same plot as shown in the following example:. Picture; Source. {; int i;; const Int_t nx = 8;; char *os_X[nx] = {""8"",""32"",""128"",""512"",""2048"",""8192"",""32768"",""131072""};; float d_35_0[nx] = {0.75, -3.30, -0.92, 0.10, 0.08, -1.69, -1.29, -2.37};; float d_35_1[nx] = {1.01, -3.02, -0.65, 0.37, 0.34, -1.42, -1.02, -2.10};. TCanvas *cb = new TCanvas(""cb"",""cb"",600,400);; cb->SetGrid();. gStyle->SetHistMinimumZero();. TH1F *h1b = new TH1F(""h1b"",""Option B example"",nx,0,nx);; h1b->SetFillColor(4);; h1b->SetBarWidth(0.4);; h1b->SetBarOffset(0.1);; h1b->SetStats(0);; h1b->SetMi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:20463,simpl,simple,20463,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['simpl'],['simple']
Usability,"s fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 1753 of file GX11Gui.cxx. ◆ Class(). static TClass * TGX11::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGX11.h. ◆ ClearArea(). void TGX11::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the background color. ; Reimplemented from TVirtualX.; Definition at line 1741 of file GX11Gui.cxx. ◆ ClearPixmap(). void TGX11::ClearPixmap ; (; Drawable * ; pix). private . Clear the pixmap pix. ; Definition at line 407 of file TGX11.cxx. ◆ ClearWindow() [1/2]. void TGX11::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 422 of file TGX11.cxx. ◆ ClearWindow() [2/2]. void TGX11::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 2142 of file GX11Gui.cxx. ◆ CloseDisplay(). void TGX11::CloseDisplay ; (; ). overridevirtual . Close connection to display server. ; Reimplemented from TVirtualX.; Definition at line 840 of file GX11Gui.cxx. ◆ ClosePixmap(). void TGX11::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 439 of file TGX11.cxx. ◆ CloseWindow(). void TGX11::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 447 of file TGX11.cxx. ◆ CloseWindow1(). void TGX11::CloseWindow1 ; (; ). private . Delete current window. ; Definition at line 461 of file TGX11.cxx. ◆ CollectImageColors(). void TGX11::CollectImageColors ; (; ULong_t ; pixel, . ULong_t *& ; org",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:58320,Clear,Clear,58320,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Clear'],['Clear']
Usability,"s first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 35 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 63 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 444 of file RGeomViewer.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomViewer::Description ; (; ). inline . Definition at line 107 of file RGeomViewer.hxx. ◆ GetShowColumns(). bool ROOT::RGeomViewer::GetShowColumns ; (; ); const. inline . Definition at line 97 of file RGeomViewer.hxx. ◆ GetShowHierarchy(). bool ROOT::RGeomViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 93 of file RGeomViewer.hxx. ◆ GetStackFromJson(). std::vector< int > RGeomViewer::GetStackFromJson ; (; const std::string & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 164 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html:4460,Clear,ClearOnClose,4460,doc/v632/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomViewer.html,1,['Clear'],['ClearOnClose']
Usability,"s first message ;  ; TGeoManager * fGeoManager {nullptr};  ! geometry to show ;  ; bool fInfoActive {false};  ! true when info page active and node info need to be provided ;  ; std::string fSelectedVolume;  ! name of selected volume ;  ; bool fShowColumns {true};  ! show columns in hierarchy ;  ; bool fShowHierarchy {true};  ! if hierarchy visible by default ;  ; std::string fTitle;  ! title of geometry viewer ;  ; std::shared_ptr< RGeomHierarchy > fWebHierarchy;  ! web handle for hierarchy part ;  ; std::shared_ptr< RWebWindow > fWebWindow;  ! web window to show geometry ;  . #include <ROOT/RGeomViewer.hxx>; Constructor & Destructor Documentation. ◆ RGeomViewer(). RGeomViewer::RGeomViewer ; (; TGeoManager * ; mgr = nullptr, . const std::string & ; volname = """" . ). constructor ; Definition at line 43 of file RGeomViewer.cxx. ◆ ~RGeomViewer(). RGeomViewer::~RGeomViewer ; (; ). virtual . destructor ; Definition at line 71 of file RGeomViewer.cxx. Member Function Documentation. ◆ ClearOnClose(). void RGeomViewer::ClearOnClose ; (; const std::shared_ptr< void > & ; handle). Set handle which will be cleared when connection is closed Must be called after window is shown. ; Definition at line 452 of file RGeomViewer.cxx. ◆ Description(). RGeomDescription & ROOT::RGeomViewer::Description ; (; ). inline . Definition at line 107 of file RGeomViewer.hxx. ◆ GetShowColumns(). bool ROOT::RGeomViewer::GetShowColumns ; (; ); const. inline . Definition at line 97 of file RGeomViewer.hxx. ◆ GetShowHierarchy(). bool ROOT::RGeomViewer::GetShowHierarchy ; (; ); const. inline . Returns default hierarchy browser visibility. ; Definition at line 93 of file RGeomViewer.hxx. ◆ GetStackFromJson(). std::vector< int > RGeomViewer::GetStackFromJson ; (; const std::string & ; json, . bool ; node_ids = false . ). protected . convert JSON into stack array ; Definition at line 172 of file RGeomViewer.cxx. ◆ GetTitle(). const std::string & ROOT::RGeomViewer::GetTitle ; (; ); const. inline . Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html:4506,Clear,ClearOnClose,4506,doc/master/classROOT_1_1RGeomViewer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomViewer.html,1,['Clear'],['ClearOnClose']
Usability,"s for Doxygen | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Formatting Comments for Doxygen. The ROOT team has adopted Doxygen for generating the reference manual. Here you will find a number of conve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/formatting-comments-doxygen.html:1021,Guid,Guides,1021,d/formatting-comments-doxygen.html,https://root.cern,https://root.cern/d/formatting-comments-doxygen.html,1,['Guid'],['Guides']
Usability,"s for visualization are those defined before closing the geometry. ; Definition at line 1455 of file TGeoManager.cxx. ◆ ClearNavigators(). void TGeoManager::ClearNavigators ; (; ). Clear all navigators. ; Definition at line 881 of file TGeoManager.cxx. ◆ ClearOverlaps(). void TGeoManager::ClearOverlaps ; (; ). Clear the list of overlaps. ; Definition at line 1605 of file TGeoManager.cxx. ◆ ClearPhysicalNodes(). void TGeoManager::ClearPhysicalNodes ; (; Bool_t ; mustdelete = kFALSE). Clear the current list of physical nodes, so that we can start over with a new list. ; If MUSTDELETE is true, delete previous nodes. ; Definition at line 3542 of file TGeoManager.cxx. ◆ ClearShape(). void TGeoManager::ClearShape ; (; const TGeoShape * ; shape). Remove a shape from the list of shapes. ; Definition at line 1617 of file TGeoManager.cxx. ◆ ClearThreadData(). void TGeoManager::ClearThreadData ; (; ); const. Definition at line 953 of file TGeoManager.cxx. ◆ ClearThreadsMap(). void TGeoManager::ClearThreadsMap ; (; ). static . Clear the current map of threads. ; This will be filled again by the calling threads via ThreadId calls. ; Definition at line 984 of file TGeoManager.cxx. ◆ ClearTracks(). void TGeoManager::ClearTracks ; (; ). inline . Definition at line 415 of file TGeoManager.h. ◆ CloseGeometry(). void TGeoManager::CloseGeometry ; (; Option_t * ; option = ""d""). Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all volumes, counting the total number of physical nodes and registering the manager class to the browser. ; Definition at line 1480 of file TGeoManager.cxx. ◆ ConvertReflections(). void TGeoManager::ConvertReflections ; (; ). Convert all reflections in geometry to normal rotations + reflected shapes. ; Definition at line 1723 of file TGeoManager.cxx. ◆ CountLevels(). void TGeoManager::CountLevels ; (; ). Count maximum number of nodes per volume, maximum depth and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:78700,Clear,ClearThreadsMap,78700,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['ClearThreadsMap']
Usability,"s generated.; ; Click in the canvas area, near the edges, with the right mouse button; and select the Print item. You can select the name of the Postscript; file. If the file name is xxx.ps, you will generate a Postscript file named; xxx.ps. If the file name is xxx.eps, you generate an encapsulated Postscript; file instead.; ; In your program (or macro), you can type:; ; c1->Print(""xxx.ps"") or c1->Print(""xxx.eps""); ; This will generate a file corresponding to the picture in the canvas; pointed by c1.; pad1->Print(""xxx.ps""); prints only the picture in the pad pointed by pad1. The size; of the Postscript picture, by default, is computed to keep the aspect ratio; of the picture on the screen, where the size along x is always 20cm. You; can set the size of the PostScript picture before generating the picture; with a command such as:; ; TPostScript myps(""myfile.ps"",111); myps.Range(xsize,ysize);; object->Draw();; myps.Close();; ; You can set the default paper size with:; ; gStyle->SetPaperSize(xsize,ysize);; ; You can resume writing again in this file with myps.Open();.; Note that you may have several Postscript files opened simultaneously.; ; Output type; The output type allows to define how the PostScript output will looks like.; It allows to define the page format (A4, Legal etc..), the orientation; (Portrait, Landscape) and the number of images (zones) per page.; The output type has the following form:; ; [Format][Nx][Ny][Type]; ; Where:; ; Format : Is an integer between 0 and 99 defining the page format.; Example:; Format = 3 the paper is in the standard A3 format.; Format = n (1 Format = 4 and Format=0 are the same and define an A4 page.; The A0 format is selected by Format=99.; The US format Letter is selected by Format = 100.; The US format Legal is selected by Format = 200.; The US format Ledger is selected by Format = 300.; Nx, Ny : Specify respectively the number of zones on the x and y axis.; Nx and Ny are integers between 1 and 9.; Type : Can be equal to:; ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:1767,resume,resume,1767,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,3,['resume'],['resume']
Usability,"s hierarchy: Used to describe 3D objects (“shapes”) - filled /added by negotiation with viewer via TVirtualViewer3D. A typical interaction between viewer and client using these, taken from TGeoPainter is:; TVirtualViewer3D * viewer = gPad->GetViewer3D();; // Does viewer prefer local frame positions?; Bool_t localFrame = viewer->PreferLocalFrame();; // Perform first fetch of buffer from the shape and try adding it to the viewer; const TBuffer3D &buffer = shape.GetBuffer3D(TBuffer3D::kCore |; TBuffer3D::kBoundingBox |; TBuffer3D::kShapeSpecific,; localFrame);; Int_t reqSections = viewer->AddObject(buffer, &addDaughters);. // If the viewer requires additional sections fetch from the shape; // (if possible) and add again; if (reqSections != TBuffer3D::kNone); shape.GetBuffer3D(reqSections, localFrame);; Together these allow clients to publish objects to any one of the 3D viewers free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; In addition to external viewers, created in separate windows, this architecture is also used by internal TPad drawing when it requires 3D projections. Publishing to a viewer consists of the following steps:; 1- Create / obtain viewer handle.; 2- Begin scene on viewer.; 3- Fill mandatory parts of TBuffer3D describing object.; 4- Add to viewer.; 5- Fill optional parts of TBuffer3D as requested by viewer.; [ …. repeat 3/4/5 as required for other/child objects]; 6- End scene on viewer.; You should attach the top-level node of your external geometry (or the manager) to a TPad object using TObject::Draw(), and perform the publishing to the viewer in your object’s TObject::Paint() overloaded method. See “Scene Rebuilds”, and example scripts, for more details.; 9.13.4.1 Creating / Obtaining Viewer Handle; External viewers are bound to a TPad object (this may be removed as a requirement in the future). You can create o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:403319,simpl,simple,403319,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"s if not already set. ;  ; void Scale (Double_t c);  Scale contents and errors of this histogram by c: this = this * c It does not modify the histogram's number of entries. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  ; void SetBinEdges (Int_t idim, const Double_t *bins);  Set the axis # of bins and bin limits on dimension idim. ;  ; void SetBinError (const Int_t *idx, Double_t e);  ; void SetBinError (Long64_t bin, Double_t e);  ; void SetEntries (Double_t entries);  ; void SetTitle (const char *title) override;  Change (i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:10244,Clear,Clear,10244,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['Clear'],['Clear']
Usability,s in External Applications? . How to let graphics primitives respond to a mouse click? . How to Pick Objects? . How to redraw Axis and plot borders? . How to reuse a color palette ? . How to set ranges on axis? . How to Use the Graphics Editor? . How to use the PostScript interface? . Linear Algebra. How to Create and Fill a Matrix? . How to Fit Histograms or Data Points? . How to fit using the FitPanel . How to Invert a Matrix . How to Perform a Linear Fit? . Multicore. How to express parallelism on many cores? . Histograms. How to Find Peaks in Histograms ? . How to Get Started with Histogram Classes? . How To Merge Histogram Files? . Input/Output. How to Merge Custom Objects? . How to Quickly Inspect the Content of a File? . How to Read Objects from a File? . How to Read Remote Files? . How to use the ClassDef Preprocessor Macro? . How to Write Objects to a File? . Trees. How to Read a Tree? . How to Use Chains (Lists of Files)? . How to Write a Tree? . Developer's Tips. How To Suppress Understood Valgrind False Positives? . Integrate ROOT into my project with CMake . Report a bug with JIRA . Running ROOT tests . Writing a Graphical User Interface. How to Use the ROOT GUI Builder? . How to Use the Signal/Slot Communication Mechanism? . Virtual Monte Carlo. How to Use Virtual Monte Carlo? . . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/howtos.html:4343,Guid,Guides,4343,d/howtos.html,https://root.cern,https://root.cern/d/howtos.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,s in the cache; TObjArray*fBranches! List of branches to be stored in the cache; char*TFileCacheRead::fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tTFileCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously ; Long64_tfEntryCurrent! current lowest entry number in the cache; Long64_tfEntryMax! last entry in the cache; Long64_tfEntryMin! first entry in the cache; Long64_tfEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tfFillTimes! how many times we can fill the current buffer; Bool_tfFirstBuffer! true if first buffer is used for prefetching; Long64_tfFirstEntry! save the value of the first entry; Bool_tfFirstTime! save the fact that we processes the first entry; Bool_tfIsLearning! true if cache is in learning mode; Bool_tfIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; Int_tfNReadMissNumber of blocks read and not found in the chache; Int_tfNReadOkNumber of blocks read and found in the cache; Int_tfNReadPrefNumber of blocks that were prefetched; Int_tTFileCacheRead::fNbNumber of long buffers; Int_tfNbranches! Number of branches in the cache; Int_tTFileCacheRead::fNseekNumber of blocks to be prefetched; Int_tTFileCacheRead::fNtotTotal size of prefetched blocks; Bool_tfOneTime! used in the learning phase ; TTree*fOwner! pointer to the owner Tree/chain; Long64_t*TFileCacheRead::fPos[fNb] start of long buffers; TFilePrefetch*TFileCacheRead::fPrefetch!Object that does the asynchronous reading in another thread; Long64_tTFileCacheRead::fPrefetchedBlocksNumber of blocks prefetched.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:17169,learn,learning,17169,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,4,['learn'],['learning']
Usability,"s in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat ; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCSamplerOld A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModule MCStudy module to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses iostream data into tokens; RooStringVar String-valued variable ; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:47224,simpl,simple,47224,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,6,"['Simpl', 'simpl']","['SimpleInterval', 'SimpleLikelihoodRatioTestStat', 'simple']"
Usability,"s in x dimension of grid; int nodesy; // number of nodes in y dimension of grid; int count_reg; // width between contours, applies only for contours display mode; int alfa; // angles of display,alfa+beta must be less or equal to 90, alpha- angle; // between base line of Canvas and left lower edge of picture picture; // base plane; int beta; // angle between base line of Canvas and right lower edge of picture base plane; int view_angle; // rotation angle of the view, it can be 0, 90, 180, 270 degrees; int levels; // # of color levels for rainbowed display modes, it does not apply for; // simple display modes algorithm group; float rainbow1_step; // determines the first component step for neighbouring color; // levels, applies only for rainbowed display modes, it does not apply; // for simple display modes algorithm group; float rainbow2_step; // determines the second component step for neighbouring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; float rainbow3_step; // determines the third component step for neighbouring; // color levels, applies only for rainbowed display modes, it does not; // apply for simple display modes algorithm group; int color_alg; // applies only for rainbowed display modes (rgb smooth algorithm,; // rgb modulo color component, cmy smooth algorithm, cmy modulo; // color component, cie smooth algorithm, cie modulo color component,; // yiq smooth algorithm, yiq modulo color component, hsv smooth; // algorithm, hsv modulo color component, it does not apply for simple; // display modes algorithm group [15]; float l_h_weight; // weight between shading according to fictive light source and; // according to channels counts, applies only for; // PICTURE2_MODE_GROUP_LIGHT_HEIGHT modes group; int xlight; // x position of fictive light source, applies only for rainbowed display; // modes with shading according to light; int ylight; // y position of fictive light source, applies",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:72425,simpl,simple,72425,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['simpl'],['simple']
Usability,"s inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Inheritance diagram for TApplicationRemote::TARFileStat:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TARFileStat(). TApplicationRemote::TARFileStat::TARFileStat ; (; const char * ; fn, . TMD5 * ; md5, . Long_t ; mt . ). inline . Definition at line 59 of file TApplicationRemote.h. Member Data Documentation. ◆ fMD5. TMD5 TApplicationRemote::TARFileStat::fMD5. Definition at line 61 of file TApplicationRemote.h. ◆ fModtime. Long_t TApplicationRemote::TARFileStat::fModtime. Definition at line 62 of file TApplicationRemote.h. Libraries for TApplicationRemote::TARFileStat:. [legend]; The documentation for this class was generated from the following file:; net/net/inc/TApplicationRemote.h. TApplicationRemoteTARFileStat. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote_1_1TARFileStat.html:11594,Guid,Guide,11594,doc/master/classTApplicationRemote_1_1TARFileStat.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote_1_1TARFileStat.html,1,['Guid'],['Guide']
Usability,s method is invoked via context menu during guibuilding. ; Definition at line 6063 of file TGuiBldDragManager.cxx. ◆ ChangeBackgroundColor() [3/5]. void TGuiBldDragManager::ChangeBackgroundColor ; (; TGCompositeFrame * ; fr). Change background color via context menu for this frame and all subframes. ; This method is activated via context menu during guibuilding. ; Definition at line 5873 of file TGuiBldDragManager.cxx. ◆ ChangeBackgroundColor() [4/5]. void TGuiBldDragManager::ChangeBackgroundColor ; (; TGFrame * ; fr). Change background color via context menu. ; Definition at line 5859 of file TGuiBldDragManager.cxx. ◆ ChangeBackgroundColor() [5/5]. void TGuiBldDragManager::ChangeBackgroundColor ; (; TGListBox * ; fr). Set background color for list box entries. ; This method is invoked via context menu during guibuilding. ; Definition at line 6160 of file TGuiBldDragManager.cxx. ◆ ChangeBarColor(). void TGuiBldDragManager::ChangeBarColor ; (; TGProgressBar * ; fr). Set progress bar color via TGColorDialog. ; This method is activated via context menu during guibuilding. ; Definition at line 6177 of file TGuiBldDragManager.cxx. ◆ ChangeImage(). void TGuiBldDragManager::ChangeImage ; (; TGIcon * ; fr). Invoke file dialog to assign a new image. ; This method is activated via context menu during guibuilding. ; Definition at line 6271 of file TGuiBldDragManager.cxx. ◆ ChangePicture(). void TGuiBldDragManager::ChangePicture ; (; TGPictureButton * ; fr). Invoke file dialog to assign a new picture. ; This method is activated via context menu during guibuilding. ; Definition at line 5992 of file TGuiBldDragManager.cxx. ◆ ChangeProperties() [1/2]. void TGuiBldDragManager::ChangeProperties ; (; TGLabel * ; fr). Edit properties via font selection dialog. ; This method is activated via context menu during guibuilding. ; Definition at line 6104 of file TGuiBldDragManager.cxx. ◆ ChangeProperties() [2/2]. void TGuiBldDragManager::ChangeProperties ; (; TGTextButton * ; fr). Edit prop,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldDragManager.html:42848,progress bar,progress bar,42848,doc/master/classTGuiBldDragManager.html,https://root.cern,https://root.cern/doc/master/classTGuiBldDragManager.html,1,['progress bar'],['progress bar']
Usability,"s method must be overridden when a class wants to print itself. ;  ; void printArgs (std::ostream &os) const override;  Print arguments of fit result, i.e. the parameters of the fit. ;  ; void printClassName (std::ostream &os) const override;  Print class name of fit result. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print fit result to stream 'os'. ;  ; void printName (std::ostream &os) const override;  Print name of fit result. ;  ; void printTitle (std::ostream &os) const override;  Print title of fit result. ;  ; void printValue (std::ostream &os) const override;  Print the value of the fit result, i.e.g the status, minimized FCN, edm and covariance quality code. ;  ; const RooArgList & randomizePars () const;  Generate random perturbations of the final parameters using the covariance matrix. ;  ; TMatrixDSym reducedCovarianceMatrix (const RooArgList &params) const;  Return a reduced covariance matrix (Note that Vred is a simple sub-matrix of V, row/columns are ordered to matched the convention given in input argument 'params'. ;  ; void setConstParList (const RooArgList &list);  Fill the list of constant parameters. ;  ; void setCovarianceMatrix (TMatrixDSym &V);  Store externally provided correlation matrix in this RooFitResult ;. ;  ; void setCovQual (Int_t val);  ; void setEDM (double val);  ; void setFinalParList (const RooArgList &list);  Fill the list of final values of the floating parameters. ;  ; void setInitParList (const RooArgList &list);  Fill the list of initial values of the floating parameters. ;  ; void setMinNLL (double val);  ; void SetName (const char *name) override;  Change name of RooFitResult object. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change name and title of RooFitResult object. ;  ; void setNumInvalidNLL (Int_t val);  ; void setStatus (Int_t val);  ; void setStatusHistory (std::vector< std::pair< std::string, int > > &hist);  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:5377,simpl,simple,5377,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['simpl'],['simple']
Usability,"s name of object. ;  ; const char * GetType () const;  ; const char * GetValue () const;  ; Bool_t IsNumeric () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLColumnData.html:1672,Clear,Clear,1672,doc/master/classTSQLColumnData.html,https://root.cern,https://root.cern/doc/master/classTSQLColumnData.html,1,['Clear'],['Clear']
Usability,"s not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries;}. void SetEntries(Long64_t entries); { fEntries = entries; SetLastUpdate();}. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; SetLastUpdate();}. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; SetLastUpdate();}. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; SetLastUpdate();}. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; SetLastUpdate();}. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; SetLastUpdate();}. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofProgressStatus.h 30859 2009-10-24 14:53:07Z ganis $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressStatus.html:8549,learn,learnTime,8549,root/html528/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html528/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"s not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries;}. void SetEntries(Long64_t entries); { fEntries = entries; SetLastUpdate();}. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; SetLastUpdate();}. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; SetLastUpdate();}. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; SetLastUpdate();}. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; SetLastUpdate();}. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; SetLastUpdate();}. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofProgressStatus.h 38810 2011-04-12 16:22:59Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofProgressStatus.html:8671,learn,learnTime,8671,root/html530/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html530/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"s not defined. TProofProgressStatus(Long64_t fEntries = 0, Long64_t fBytesRead = 0, Long64_t fReadCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0). Long64_t GetEntries() const; { return fEntries; }. Long64_t GetBytesRead() const; { return fBytesRead; }. Long64_t GetReadCalls() const; { return fReadCalls; }. Double_t GetLearnTime() const; { return fLearnTime; }. Double_t GetProcTime() const; { return fProcTime; }. Double_t GetCPUTime() const; { return fCPUTime; }. Double_t GetLastUpdate() const; { return fLastUpdate; }. Double_t GetRate() const; { return ((fProcTime > 0) ? fEntries/fProcTime : 0); }. void SetLastEntries(Long64_t entries); { fLastEntries = entries;}. void SetEntries(Long64_t entries); { fEntries = entries; SetLastUpdate();}. void IncEntries(Long64_t entries = 1); { fLastEntries = entries; fEntries += entries; SetLastUpdate();}. void IncBytesRead(Long64_t bytesRead); { fBytesRead += bytesRead; SetLastUpdate();}. void SetBytesRead(Long64_t bytesRead); { fBytesRead = bytesRead; SetLastUpdate();}. void IncReadCalls(Long64_t readCalls); { fReadCalls += readCalls; SetLastUpdate();}. void SetReadCalls(Long64_t readCalls); { fReadCalls = readCalls; SetLastUpdate();}. void SetLearnTime(Double_t learnTime); { fLearnTime = learnTime; }. void SetLastProcTime(Double_t procTime); { fLastProcTime = procTime; }. void SetProcTime(Double_t procTime); { fProcTime = procTime; }. void IncProcTime(Double_t procTime); { fLastProcTime = procTime; fProcTime += procTime; }. void SetCPUTime(Double_t procTime); { fCPUTime = procTime; }. void IncCPUTime(Double_t procTime); { fCPUTime += procTime; }. » Author: Jan Iwaszkiewicz 08/08/08 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofProgressStatus.h 38810 2011-04-12 16:22:59Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofProgressStatus.html:8671,learn,learnTime,8671,root/html532/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html532/TProofProgressStatus.html,2,['learn'],['learnTime']
Usability,"s object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TDocParser.h>. Inheritance diagram for TDocMethodWrapper:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkDocumented . Definition at line 41 of file TDocParser.h. Member Function Documentation. ◆ GetMethod(). virtual TMethod * TDocMethodWrapper::GetMethod ; (; ); const. pure virtual . ◆ GetOverloadIdx(). virtual Int_t TDocMethodWrapper::GetOverloadIdx ; (; ); const. pure virtual . html/inc/TDocParser.h. TDocMethodWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMethodWrapper.html:10196,Guid,Guide,10196,doc/master/classTDocMethodWrapper.html,https://root.cern,https://root.cern/doc/master/classTDocMethodWrapper.html,1,['Guid'],['Guide']
Usability,"s object is deleted, it is removed from the table via the cleanup mechanism invoked by the TObject destructor.; Each TProcessID has a table (TObjArray *fObjects) that keeps track of all referenced objects. If a referenced object has a fUniqueID set, a pointer to this unique object may be found via fObjects->At(fUniqueID). In the same way, when a TRef::GetObject is called, GetObject uses its own fUniqueID to find the pointer to the referenced object. See TProcessID::GetObjectWithID and PutObjectWithID.; When a referenced object is deleted, its slot in fObjects is set to null.; See also TProcessUUID: a specialized TProcessID to manage the single list of TUUIDs. ; Definition at line 74 of file TProcessID.h. Public Member Functions;  TProcessID ();  Default constructor. ;  ; virtual ~TProcessID ();  Destructor. ;  ; void CheckInit ();  Initialize fObjects. ;  ; void Clear (Option_t *option="""") override;  delete the TObjArray pointing to referenced objects this function is called by TFile::Close(""R"") ;  ; Int_t DecrementCount ();  The reference fCount is used to delete the TProcessID in the TFile destructor when fCount = 0. ;  ; Int_t GetCount () const;  ; TObjArray * GetObjects () const;  ; TObject * GetObjectWithID (UInt_t uid);  returns the TObject with unique identifier uid in the table of objects ;  ; Int_t IncrementCount ();  Increase the reference count to this object. ;  ; TClass * IsA () const override;  ; void PutObjectWithID (TObject *obj, UInt_t uid=0);  stores the object at the uid th slot in the table of objects The object uniqued is set as well as its kMustCleanup bit ;  ; void RecursiveRemove (TObject *obj) override;  called by the object destructor remove reference to obj from the current table if it is referenced ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProcessID.html:2091,Clear,Clear,2091,doc/master/classTProcessID.html,https://root.cern,https://root.cern/doc/master/classTProcessID.html,1,['Clear'],['Clear']
Usability,"s object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCachedReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:46353,clear,clearEvalErrorLog,46353,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,4,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"s object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsHiddenReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:46833,clear,clearEvalErrorLog,46833,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,8,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"s objects from R's objects ;  ►NTF1Helper;  CTGradientParFunctionFunction class representing the derivative with respect a parameter of a given TF1 ;  ►Nv5;  CTF1Data;  CTFormulaThe FORMULA class (ROOT version 5) ;  CTFormulaPrimitiveThe Formula Primitive class ;  CTOperOffset;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTPoolManagerA manager for the scheduler behind ROOT multithreading operations ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTRWSpinLock;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  ►Ntest;  Ctest;  ►NTMath;  CLimits;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  CBatchEncapsulates one mini-batch ;  CClassificationSettingsSettings for classificationused to distinguish between different function signatures ;  CLayerLayer defines the layout of a layer ;  CLayerDataLayerData holds the data of one layer ;  CMeanVariance;  CNetNeural net ;  CSettingsSettings for the training of the neural net ;  CSteepestSteepest Gradient Descent algorithm (SGD) ;  CTBatchTBatch ;  CTBatchIteratorTBatchIterator ;  CTCpuThe TCpu architecture class ;  ►CTCpuBufferTCpuBuffer ;  CTDestruc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:67567,simpl,simple,67567,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['simpl'],['simple']
Usability,"s of bins.; In this case, give kRegModeNone in the constructor and specify; the bin grouping with calls to; RegularizeBins() specify a 1-dimensional group of bins; RegularizeBins2D() specify a 2-dimensional group of bins. For ultimate flexibility, the regularisation condition can be set on each; bin individually; -> give kRegModeNone in the constructor and use; RegularizeSize() regularize one bin; RegularizeDerivative() regularize the slope given by two bins; RegularizeCurvature() regularize the curvature given by three bins. Function Members (Methods); public:. TUnfold(const TUnfold&); TUnfold(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintArea); virtual~TUnfold(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDoUnfold(Double_t tau); Double_tDoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:11175,Clear,Clear,11175,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,3,['Clear'],['Clear']
Usability,"s of thresholds. More...;  ; class  RooBinWidthFunction;  Returns the bin width (or volume) given a RooHistFunc. More...;  ; class  RooBrentRootFinder;  Implement the abstract 1-dimensional root finding interface using the Brent-Decker method. More...;  ; class  RooCachedPdf;  Implementation of RooAbsCachedPdf that can cache any external RooAbsPdf input function provided in the constructor. More...;  ; class  RooCachedReal;  Implementation of RooAbsCachedReal that can cache any external RooAbsReal input function provided in the constructor. More...;  ; class  RooCacheManager< T >;  Manages the storage of any type of data indexed on the choice of normalization and optionally the set of integrated observables. More...;  ; class  RooCategory;  Object to represent discrete states. More...;  ; class  RooChangeTracker;  Meta object that tracks value changes in a given set of RooAbsArgs by registering itself as value client of these objects. More...;  ; class  RooChi2Var;  Simple \( \chi^2 \) calculation from a binned dataset and a PDF. More...;  ; class  RooClassFactory;  Similar to TTree::MakeClass(), generates skeleton code for RooAbsPdf and RooAbsReal functions given a list of input parameter names. More...;  ; class  RooCmdArg;  Named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods. More...;  ; class  RooCmdConfig;  Configurable parser for RooCmdArg named arguments. More...;  ; class  RooCollectionProxy< RooCollection_t >;  Concrete proxy for RooArgSet or RooArgList objects. More...;  ; class  RooCompositeDataStore;  Combines several disjunct datasets into one. More...;  ; class  RooConstraintSum;  Calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions. More...;  ; class  RooConstVar;  Represents a constant real-valued object. More...;  ; class  RooConvCoefVar;  Auxiliary class that represents the coef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:6519,Simpl,Simple,6519,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['Simpl'],['Simple']
Usability,"s one daughter. Of course, the gas has some container also, but let us keeps it like that for the sake of simplicity. Since we did not supply the third argument, the wire will be positioned with an identity transformation inside the chamber.; 18.4.2.6 Overlapping Volumes; Positioning volumes that does not overlap their neighbors nor extrude their container is sometimes quite strong constraint. Having a limited set of geometric shapes might force sometimes overlaps. Since overlapping is contradictory to containment, a point belonging to an overlapping region will naturally belong to all overlapping partners. The answer provided by the modeller to “Where am I?” is no longer deterministic if there is no priority assigned.; There are two ways out provided by the modeller in such cases and we will illustrate them by examples. Suppose we have 2 crossing tubes that we have to describe. Such a structure cannot be decomposed in a containment schema. This is a typical example of simple structure that can be handled by using composite shapes. What we have to do is to define as shapes the inner and outer parts of the tubes (tubes having Rmin=0,Rmax=inner/outer radius), then to make a composite:; C = (Tub1out+Tub2out)-(Tub1in+Tub2in); On the other hand, if we have an EM calorimeter having a honeycomb structure, Boolean combinations do not help anymore. Here the problem is that we usually have a very large number of cells that are naturally belonging to the same container. This result in a very flat and slow structure for that particular container, which we would very much want to avoid by introducing additional levels in depth. We can describe the basic cell as a hexahedron that we can represent by using a polygon primitive shape. Instead of putting one by one all cells in the same container, we can define rows of such elements, fitting in box-shaped containers. Then we can put row-beside-row inside the container, making life much easier for its navigation algorithms. The problem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:946436,simpl,simple,946436,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"s paper:; K. Savvidy and G. Savvidy, Spectrum and Entropy of C-systems. MIXMAX random number generator, Chaos, Solitons & Fractals, Volume 91, (2016) pp. 33–38 http://dx.doi.org/10.1016/j.chaos.2016.05.003 ; Definition at line 105 of file TRandomGen.h. ◆ TRandomMixMax17. typedef TRandomGen<ROOT::Math::MixMaxEngine<17,0> > TRandomMixMax17. MIXMAX generator based on a state of N=17. ; This generator has a fast seeding time compared to N=240. This generator is described in this paper:; K. Savvidy and G. Savvidy, Spectrum and Entropy of C-systems. MIXMAX random number generator, Chaos, Solitons & Fractals, Volume 91, (2016) pp. 33–38 http://dx.doi.org/10.1016/j.chaos.2016.05.003 ; Definition at line 116 of file TRandomGen.h. ◆ TRandomMixMax256. typedef TRandomGen<ROOT::Math::MixMaxEngine<256,2> > TRandomMixMax256. MIXMAX generator based on a state of N=256, based on the generator described in this paper: ; K. Savvidy, The MIXMAX random number generator, Computer Physics Communications 196 (2015), pp 161–165 http://dx.doi.org/10.1016/j.cpc.2015.06.003; This generator has been implemented with a skipping value of 2 iterations (so retaining one matrix iteration every 3). ; Definition at line 130 of file TRandomGen.h. ◆ TRandomMT64. typedef TRandomGen<ROOT::Math::StdEngine<std::mt19937_64> > TRandomMT64. Generator based on a the Mersenne-Twister generator with 64 bits, using the implementation provided by the standard library, std::mt19937_64 (see http://www.cplusplus.com/reference/random/mt19937_64/ ) ; Definition at line 141 of file TRandomGen.h. ◆ TRandomRanlux48. typedef TRandomGen<ROOT::Math::StdEngine<std::ranlux48> > TRandomRanlux48. Generator based on a the RanLux generator with 48 bits, using the implementation provided by the standard library, std::ranlux48 (see http://www.cplusplus.com/reference/random/ranlux48/ ) ; Definition at line 149 of file TRandomGen.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Random.html:7606,Guid,Guide,7606,doc/master/group__Random.html,https://root.cern,https://root.cern/doc/master/group__Random.html,1,['Guid'],['Guide']
Usability,"s particularly useful when dealing with datasets of a moderate size (small enough to fit the RAM) over which several explorative loops need to be performed as fast as possible. In addition, caching can be useful when no file on disk needs to be created as a side effect of checkpointing part of the analysis.; All steps in the caching are lazy, i.e. the cached data frame is actually filled only when the event loop is triggered on it.; ; void df019_Cache(); {; // We create a data frame on top of the hsimple example.; auto hsimplePath = gROOT->GetTutorialDir();; hsimplePath += ""/hsimple.root"";; ROOT::RDataFrame df(""ntuple"", hsimplePath.Data());; ; // We apply a simple cut and define a new column.; auto df_cut = df.Filter([](float py) { return py > 0.f; }, {""py""}); .Define(""px_plus_py"", [](float px, float py) { return px + py; }, {""px"", ""py""});; ; // We cache the content of the dataset. Nothing has happened yet: the work to accomplish; // has been described. As for `Snapshot`, the types and columns can be written out explicitly; // or left for the jitting to handle (`df_cached` is intentionally unused - it shows how; // to create a *cached* dataframe specifying column types explicitly):; auto df_cached = df_cut.Cache<float, float>({""px_plus_py"", ""py""});; auto df_cached_implicit = df_cut.Cache();; auto h = df_cached_implicit.Histo1D<float>(""px_plus_py"");; ; // Now the event loop on the cached dataset is triggered. This event triggers the loop; // on the `df` data frame lazily.; h->DrawCopy();; }; h#define h(i)Definition RSha256.hxx:106; gROOT#define gROOTDefinition TROOT.h:406; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; df019_CacheDefinition df019_Cache.py:1; . DateJune 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df019_Cache.C. tutorialsdataframedf019_Cache.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df019__Cache_8C.html:2540,Guid,Guide,2540,doc/master/df019__Cache_8C.html,https://root.cern,https://root.cern/doc/master/df019__Cache_8C.html,1,['Guid'],['Guide']
Usability,"s point you can use the mouse to click on the contour of; the histogram hpx. When the mouse is clicked, the bin number and its; contents are printed.; Example2 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. void AutoExec(); Execute the list of Execs when a pad event occurs. void Browse(TBrowser* b); Browse pad. TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"); Build a legend from the graphical objects in the pad. A simple method to to build automatically a TLegend from the primitives in; a TPad. Only those deriving from TAttLine, TAttMarker and TAttFill are; added, excluding TPave and TFrame derived classes.; x1, y1, x2, y2 are the Tlegend coordinates.; title is the legend title. By default it is "" "". If the pad contains some TMultiGraph or THStack the individual graphs or; histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number subpads.; Returns the new current pad, or 0 in case of failure.; For example:; c1.Divide(2,3); // create 6 pads (2 divisions along x, 3 along y).; To set the current pad to the bottom right pad, do; c1.cd(6);; Note1: c1.cd() is equivalent to c1.cd(0) and sets the current pad; to c1 itself.; Note2: after a statement like c1.cd(6), the global variable gPad; points to the current pad. One can use gPad to se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:30919,simpl,simple,30919,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,3,['simpl'],['simple']
Usability,"s possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQCommand & operator=(const TQCommand& ). TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TQCommand.html:23807,undo,undo,23807,root/html534/TQCommand.html,https://root.cern,https://root.cern/root/html534/TQCommand.html,3,['undo'],['undo']
Usability,"s possible, kFALSE if it's not.; By default, only single tial undo action is possible. void Redo(Option_t* option = """"); Execute command and then smerged commands. void Undo(Option_t* option = """"); Unexecute all merged commands and the command.; Merged commands are executed in reverse order. const char * GetName() const; Returns the command name. Default name is ""ClassName::RedoName(args)""; If list of merged commands is not empty the name is; ""ClassName::RedoName(args):cname1:cname2 ..."". const char * GetTitle() const; Returns command description.; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"". const char * GetRedoName() const; Returns the name of redo command. const char * GetUndoName() const; Returns the name of undo command. Long_t * GetRedoArgs() const; Returns a pointer to array of redo arguments. Long_t * GetUndoArgs() const; Returns a pointer to array of undo arguments. Int_t GetNRargs() const; Returns a number of redo arguments. Int_t GetNUargs() const; Returns a number of undo arguments. void * GetObject() const; Returns an object for which undo redo acions are applied. Int_t GetStatus() const; Returns a number of sequential undo or redo operations. Bool_t IsMacro() const; Returns kTRUE if neither redo nor undo action specified. Bool_t IsUndoing() const; Undo action is in progress. Bool_t IsRedoing() const; Redo action is in progress. Bool_t IsExecuting() const; Returns kTRUE if command execution is in progress. void SetName(const char* name); Sets name of the command. void SetTitle(const char* title); Sets description of the command. void ls(Option_t* option = """") const; ls this command and merged commands. void PrintCollectionHeader(Option_t* option) const; Print collection header. TQConnection * GetRedo() const; { return fRedo; }. TQConnection * GetUndo() const; { return fUndo; }. void Add(TObject* obj, Option_t* opt). » Author: Valeriy Onuchin 04/27/2004 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:23532,undo,undo,23532,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,3,['undo'],['undo']
Usability,"s read; TList*TEventIter::fPacketslist of packets processed packets; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile, const char* objname = 0); Load a tree from s TDSetElement. Int_t GetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList** evl = 0); Get loop range. void PreProcessEvent(Long64_t ent); Actions to be done just before processing entry 'entry'.; Called by TProofPlayer. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-04 09:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEventIterTree.html:8480,learn,learning,8480,root/html604/TEventIterTree.html,https://root.cern,https://root.cern/root/html604/TEventIterTree.html,1,['learn'],['learning']
Usability,"s read; TList*TEventIter::fPacketslist of packets processed packets; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile, const char* objname = 0); Load a tree from s TDSetElement. Int_t GetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList** evl = 0); Get loop range. void PreProcessEvent(Long64_t ent); Actions to be done just before processing entry 'entry'.; Called by TProofPlayer. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 14:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEventIterTree.html:8480,learn,learning,8480,root/html602/TEventIterTree.html,https://root.cern,https://root.cern/root/html602/TEventIterTree.html,1,['learn'],['learning']
Usability,"s related to input layout but not the same.; If the first layer is dense it should be ``1 | batch size ! number of variables`` (features); ; *(note the use of the character `|` as separator of input parameters for DNN layout)*; ; note that in case of only dense layer the input layout could be omitted but it is required when defining more; complex architectures; ; - **layer layout** string defining the layer architecture. The syntax is; - layer type (e.g. DENSE, CONV, RNN); - layer parameters (e.g. number of units); - activation function (e.g TANH, RELU,...); ; *the different layers are separated by the ``"",""`` *; ; #### 2. Define Training Strategy; ; We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; One can then concatenate different training strategy with different parameters. The training strategy are separated by; the ``""|""`` separator.; ; - Optimizer; - Learning rate; - Momentum (valid for SGD and RMSPROP); - Regularization and Weight Decay; - Dropout; - Max number of epochs; - Convergence steps. if the test error will not decrease after that value the training will stop; - Batch size (This value must be the same specified in the input layout); - Test Repetitions (the interval when the test error will be computed); ; ; #### 3. Define general DNN options; ; We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; In addition to input layout, batch layout and training strategy we add now:; ; - Type of Loss function (e.g. CROSSENTROPY); - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); - Variable Transformation; - Type of Architecture (e.g. CPU, GPU, Standard); ; We can then book the DL method using the built option string; ; ***/; ; if (useDL) {; ; bool useDLGPU = false;; #ifdef R__HAS_TMVAGPU; useDLGPU = true;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:64626,Learn,Learning,64626,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Learn'],['Learning']
Usability,"s returned in ""nGoodStrings"". ; Definition at line 685 of file TTabCom.cxx. ◆ AppendListOfFilesInDirectory(). void TTabCom::AppendListOfFilesInDirectory ; (; const char ; dirName[], . TSeqCollection * ; pList . ). static . [static utility function]///////////////////////////// ; adds a TObjString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9389,Clear,ClearClasses,9389,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearClasses']
Usability,"s returns false. ; Definition at line 30 of file TArray.cxx. ◆ ReadArray(). TArray * TArray::ReadArray ; (; TBuffer & ; b, . const TClass * ; clReq . ). static . Read TArray object from buffer. ; Simplified version of TBuffer::ReadObject (does not keep track of multiple references to same array). ; Definition at line 41 of file TArray.cxx. ◆ Set(). virtual void TArray::Set ; (; Int_t ; n). pure virtual . Implemented in TArrayC, TArrayD, TArrayF, TArrayI, TArrayL, TArrayL64, and TArrayS. ◆ SetAt(). virtual void TArray::SetAt ; (; Double_t ; v, . Int_t ; i . ). pure virtual . Implemented in TArrayC, TArrayD, TArrayF, TArrayI, TArrayL, TArrayL64, and TArrayS. ◆ Streamer(). virtual void TArray::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TArrayC, TArrayD, TArrayF, TArrayI, TArrayL, TArrayL64, TArrayS, TGLTH3Composition, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D. ◆ StreamerNVirtual(). void TArray::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TArray.h. ◆ WriteArray(). void TArray::WriteArray ; (; TBuffer & ; b, . const TArray * ; a . ). static . Write TArray object to buffer. ; Simplified version of TBuffer::WriteObject (does not keep track of multiple references to the same array). ; Definition at line 82 of file TArray.cxx. Friends And Related Symbol Documentation. ◆ operator<<. TBuffer & operator<< ; (; TBuffer & ; b, . const TArray * ; obj . ). friend . Write TArray or derived object to buffer. ; Definition at line 112 of file TArray.cxx. Member Data Documentation. ◆ fN. Int_t TArray::fN. Definition at line 38 of file TArray.h. Libraries for TArray:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TArray.h; core/cont/src/TArray.cxx. TArray. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArray.html:6554,Simpl,Simplified,6554,doc/master/classTArray.html,https://root.cern,https://root.cern/doc/master/classTArray.html,2,"['Guid', 'Simpl']","['Guide', 'Simplified']"
Usability,"s signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t MakeSelector (const char *selfile);  Create the selector object and save the relevant files and binary information in the cache so that the worker can pick it up. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayerRemote; TProof * GetProof () const;  ; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:21397,feedback,feedback,21397,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['feedback'],['feedback']
Usability,"s some information about the network in the terminal. void GatherInformations(); Collect information about what is usefull in the network.; This method has to be called first when analyzing a network.; Fills the two analysis trees. void DrawDInput(Int_t i); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; the ith input. void DrawDInputs(); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; each input.; DrawDInputs() draws something that approximates the distribution of the; derivative of the NN w.r.t. each input. That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const char* bg); Draws the distribution of the neural network (using ith neuron).; Two distributions are drawn, for events passing respectively the ""signal""; and ""background"" cuts. Only the test sample is used. TProfile* DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); Create a profile of the difference of the MLP output minus the; true value for a given output node outnode, vs the true value for; outnode, for all test data events. This method is mainly useful; when doing regression analysis with the MLP (i.e. not classification,; but continuous truth values).; The resulting TProfile histogram is returned.; It is not drawn if option ""goff"" is specified.; Options are passed to TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMLPAnalyzer.html:7541,learn,learn,7541,root/html534/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html534/TMLPAnalyzer.html,3,['learn'],['learn']
Usability,"s the persp camera - one of kCameraPerspXOZ, kCameraPerspYOZ, kCameraPerspXOY; 'fov' - field of view (lens angle) in degrees (clamped to 0.1 - 170.0); 'dolly' - distance from 'center'; 'center' - world position from which dolly/hRotate/vRotate are measured; camera rotates round this, always facing in (in center of viewport); 'hRotate' - horizontal rotation from initial configuration in degrees; 'hRotate' - vertical rotation from initial configuration in degrees. void ReinitializeCurrentCamera(const TGLVector3& hAxis, const TGLVector3& vAxis, Bool_t redraw = kTRUE); Change base-vectors defining the camera-base transformation of current; camera. hAxis and vAxis are the default directions for forward; (inverted) and upwards. TGLAutoRotator* GetAutoRotator(); Get the auto-rotator for this viewer. void SetAutoRotator(TGLAutoRotator* ar); Set the auto-rotator for this viewer. The old rotator is deleted. void GetGuideState(Int_t& axesType, Bool_t& axesDepthTest, Bool_t& referenceOn, Double_t* referencePos) const; Fetch the state of guides (axes & reference markers) into arguments. void SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); Set the state of guides (axes & reference markers) from arguments. void SetDrawCameraCenter(Bool_t x); Draw camera look at and rotation point. const TGLPhysicalShape * GetSelected() const; Return selected physical shape. void MouseOver(TGLPhysicalShape* ); Emit MouseOver signal. void MouseOver(TGLPhysicalShape* , UInt_t state); Emit MouseOver signal. void MouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void ReMouseOver(TObject* obj, UInt_t state); Emit MouseOver signal. void UnMouseOver(TObject* obj, UInt_t state); Emit UnMouseOver signal. void Clicked(TObject* obj); Emit Clicked signal. void Clicked(TObject* obj, UInt_t button, UInt_t state); Emit Clicked signal with button id and modifier state. void ReClicked(TObject* obj, UInt_t button, UInt_t state); Emit ReClicked signal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLViewer.html:33920,guid,guides,33920,root/html534/TGLViewer.html,https://root.cern,https://root.cern/root/html534/TGLViewer.html,2,['guid'],['guides']
Usability,"s the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:11448,clear,clear,11448,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['clear'],['clear']
Usability,"s them to digit-set you should; also call TProcessID::Get/SetObjectCount() at the beginning / end; of processing of an event. See documentation for class TRef, in; particular section 'ObjectNumber'. If you use value-is-color mode and want to use transparency, set; the transparency to non-zero value so that GL-renderer will be; properly informed. If you want to use single color for all elements call:; UseSingleColor(); Palette controls will not work in this case. A pointer to a rectangle / box of class TEveFrameBox can be set via; void SetFrame(TEveFrameBox* b);; A single TEveFrameBox can be shared among several digit-sets (it is; reference-counted). The following flafs affect how the frame-box will drawn; and used for selection and highlight:; Bool_t fSelectViaFrame;; Bool_t fHighlightFrame;. TEveDigitSet is sub-lcassed from TEveSecondarySelectable -- this means; individual digits can be selected. By calling:; TEveSecondarySelectable::SetAlwaysSecSelect(kTRUE);; one can enforce immediate feedback (highlight, tooltip and select on normal; left-mouse click) on given digit-set. See also:; TEveQuadSet: rectangle, hexagon or line per digit; TEveBoxSet a 3D box per digit. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TEveDigitSet(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveDigitSet.html:2283,feedback,feedback,2283,root/html532/TEveDigitSet.html,https://root.cern,https://root.cern/root/html532/TEveDigitSet.html,4,['feedback'],['feedback']
Usability,"s title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Reimplemented from TObject.; Definition at line 868 of file xRooNode.cxx. ◆ rvar(). RooAbsRealLValue * Axis2::rvar ; (; ); const. inlineprivate . Definition at line 908 of file xRooNode.cxx. ◆ Set() [1/3]. void Axis2::Set ; (; Int_t ; nbins, . const double * ; xbins . ). inlineoverridevirtual . Initialize axis with variable bins. ; Reimplemented from TAxis.; Definition at line 881 of file xRooNode.cxx. ◆ Set() [2/3]. void Axis2::Set ; (; Int_t ; nbins, . const float * ; xbins . ). inlineoverridevirtual . Initialize axis with variable bins. ; Reimplemented from TAxis.; Definition at line 887 of file xRooNode.cxx. ◆ Set() [3/3]. void Axis2::Set ; (; Int_t ; nbins, . double ; xmin, . double ; xmax . ). inlineoverridevirtual . Initialize axis with fix bins. ; Reimplemented from TAxis.; Definition at line 894 of file xRooNode.cxx. ◆ SetTitle(). void Axis2::SetTitle ; (; const char * ; title). inlineoverridevirtual . Set the title of the TNamed. ; Reimplemented from TNamed.; Definition at line 872 of file xRooNode.cxx. ◆ TAxis() [1/4]. TAxis::TAxis ; (; ). Default constructor. ; Definition at line 79 of file TAxis.cxx. ◆ TAxis() [2/4]. TAxis::TAxis ; (; const TAxis & ; axis). Copy constructor. ; Definition at line 82 of file TAxis.cxx. ◆ TAxis() [3/4]. TAxis::TAxis ; (; Int_t ; nbins, . const Double_t * ; xbins . ). Axis constructor for variable bin size. ; Definition at line 81 of file TAxis.cxx. ◆ TAxis() [4/4]. TAxis::TAxis ; (; Int_t ; nbins, . Double_t ; xmin, . Double_t ; xmax . ). Axis constructor for axis with fix bin size. ; Definition at line 80 of file TAxis.cxx. ◆ var(). RooAbsLValue * Axis2::var ; (; ); const. inlineprivate . Definition at line 907 of file xRooNode.cxx. roofit/xroofit/src/xRooNode.cxx. Axis2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classAxis2.html:24885,Guid,Guide,24885,doc/master/classAxis2.html,https://root.cern,https://root.cern/doc/master/classAxis2.html,1,['Guid'],['Guide']
Usability,"s to be calculated. using this function one can increase the stepSize of the mutation when we have good success (to pass fast through the easy phase-space) and reduce the learning rate if we are in a difficult ""territory"" of the phase-space. ; Definition at line 112 of file ConvergenceTest.cxx. Member Data Documentation. ◆ fBestResult. Float_t TMVA::ConvergenceTest::fBestResult. private . Definition at line 81 of file ConvergenceTest.h. ◆ fConvValue. Float_t TMVA::ConvergenceTest::fConvValue. private . ! the best ""fitness"" value ; Definition at line 76 of file ConvergenceTest.h. ◆ fCounter. Int_t TMVA::ConvergenceTest::fCounter. private . ! counts the number of steps without improvement ; Definition at line 75 of file ConvergenceTest.h. ◆ fCurrentValue. Float_t TMVA::ConvergenceTest::fCurrentValue. protected . ! current value ; Definition at line 68 of file ConvergenceTest.h. ◆ fImprovement. Float_t TMVA::ConvergenceTest::fImprovement. protected . ! minimum improvement which counts as improvement ; Definition at line 70 of file ConvergenceTest.h. ◆ fLastResult. Float_t TMVA::ConvergenceTest::fLastResult. private . Definition at line 82 of file ConvergenceTest.h. ◆ fMaxCounter. Int_t TMVA::ConvergenceTest::fMaxCounter. private . ! maximum value for the counter so far ; Definition at line 77 of file ConvergenceTest.h. ◆ fSteps. Int_t TMVA::ConvergenceTest::fSteps. protected . ! number of steps without improvement required for convergence ; Definition at line 71 of file ConvergenceTest.h. ◆ fSuccessList. std::deque<Short_t> TMVA::ConvergenceTest::fSuccessList. private . to calculate the improvement-speed ; Definition at line 83 of file ConvergenceTest.h. Libraries for TMVA::ConvergenceTest:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ConvergenceTest.h; tmva/tmva/src/ConvergenceTest.cxx. TMVAConvergenceTest. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html:5598,Guid,Guide,5598,doc/master/classTMVA_1_1ConvergenceTest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html,1,['Guid'],['Guide']
Usability,"s to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(). void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:15006,Clear,Clear,15006,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,1,['Clear'],['Clear']
Usability,"s to modify worker lists. ;  ; Bool_t IsIdle ();  Return the idle status. ;  ; virtual void MakePlayer ();  Make player instance. ;  ; virtual void ProcessNext (TString *slb=0);  process the next query from the queue of submitted jobs. ;  ; Int_t SetupCommon ();  Common part (between TProofServ and TXProofServ) of the setup phase. ;  ; Bool_t UnlinkDataDir (const char *path);  Scan recursively the datadir and unlink it if empty Return kTRUE if it can be unlinked, kFALSE otherwise. ;  ;  Protected Member Functions inherited from TApplication;  TApplication ();  Default ctor. Can be used by classes deriving from TApplication. ;  ; virtual void Forum (const char *line);  The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ;  ; virtual void GitHub (const char *line);  The function ("".gh <type>"") submits a new issue on GitHub via web browser. ;  ; virtual void Help (const char *line);  The function lists useful commands ("".help"") or opens the online reference guide, generated with Doxygen ("".help scope"" or "".help scope::member""). ;  ; virtual void LoadGraphicsLibs ();  Load shared libs necessary for graphics. ;  ; virtual void MakeBatch ();  Switch to batch mode. ;  ; virtual Longptr_t ProcessRemote (const char *line, Int_t *error=nullptr);  Process the content of a line starting with "".R"" (already stripped-off) The format is. ;  ; void SetSignalHandler (TSignalHandler *sh);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TApplication; static void Close (TApplication *app);  Static function used to close a remote application. ;  ; static TApplication * Open (const char *url, Int_t debug, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLite.html:26186,guid,guide,26186,doc/master/classTProofServLite.html,https://root.cern,https://root.cern/doc/master/classTProofServLite.html,1,['guid'],['guide']
Usability,"s to the top-most canvas, if any (const version). ;  ; virtual RCanvas * GetCanvas ()=0;  Access to the top-most canvas, if any (non-const version). ;  ; std::shared_ptr< RFrame > GetFrame ();  Get a frame object if exists. ;  ; const std::shared_ptr< RFrame > GetFrame () const;  Get a frame object if exists. ;  ; std::shared_ptr< RDrawable > GetPrimitive (unsigned num) const;  returns primitive of given number ;  ; auto GetPrimitives () const;  Get all primitives contained in the pad. ;  ; unsigned NumPrimitives () const;  returns number of primitives in the pad ;  ; bool Remove (const std::shared_ptr< RDrawable > &drawable);  Remove drawable from list of primitives. ;  ; bool Remove (const std::string &id);  Remove an object from the list of primitives. ;  ; bool RemoveAt (unsigned indx);  Remove drawable at specified position. ;  ; void UseStyle (const std::shared_ptr< RStyle > &style) override;  Use provided style for pad and all primitives inside. ;  ; void Wipe ();  Wipe the pad by clearing the list of primitives. ;  ;  Public Member Functions inherited from ROOT::Experimental::RDrawable;  RDrawable (const char *csstype);  ; virtual ~RDrawable ();  ; void ClearStyle ();  ; const std::string & GetCssClass () const;  ; const char * GetCssType () const;  ; const std::string & GetId () const;  ; void SetCssClass (const std::string &cl);  ; void SetId (const std::string &id);  . Protected Member Functions;  RPadBase (const char *csstype);  Allow derived classes to default construct a RPadBase. ;  ; void CollectShared (Internal::RIOSharedVector_t &) override;  Collect all shared items to resolve shared_ptr after IO. ;  ; void DisplayPrimitives (RPadBaseDisplayItem &paditem, RDisplayContext &ctxt);  Create display items for all primitives in the pad Each display item gets its special id, which used later for client-server communication Second parameter is version id which already delivered to the client. ;  ; void SetDrawableVersion (Version_t vers) override;  Assign ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html:3375,clear,clearing,3375,doc/master/classROOT_1_1Experimental_1_1RPadBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RPadBase.html,1,['clear'],['clearing']
Usability,"s to viewer; void FillColorsMap(TStructViewer* sv); {; for (int i = 0; i < ncl ; i++); sv->SetColor(clnames[i], (Int_t)gRandom->Integer(8)+2);; }; ; void gviz3d(); {; // Creating a pointer to list; TList* pointer = crazy(2,10);; ; // Creating a viewer; TStructViewer* sv = new TStructViewer(pointer);; ; // adding colors; FillColorsMap(sv);; ; sv->Draw();; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; TList.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TStructViewer.h; TCollection::SetNamevoid SetName(const char *name)Definition TCollection.h:206; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TRandom::Integervirtual UInt_t Integer(UInt_t imax)Returns a random integer uniformly distributed on the interval [ 0, imax-1 ].Definition TRandom.cxx:361; TStructViewerDefinition TStructViewer.h:26; TStructViewer::SetColorvoid SetColor(TString name, Int_t color)Sets color for the class ""name"" to color ""color"".Definition TStructViewer.cxx:450; TStructViewer::Drawvoid Draw(Option_t *option="""") overrideDraw object if there is valid pointer.Definition TStructViewer.cxx:342; AuthorTimur Pocheptsov ; Definition in file gviz3d.C. tutorialsglgviz3d.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gviz3d_8C.html:3351,Guid,Guide,3351,doc/master/gviz3d_8C.html,https://root.cern,https://root.cern/doc/master/gviz3d_8C.html,1,['Guid'],['Guide']
Usability,"s true will be ignored unless All the strings in ""*pList"" are ""ExcludedByFignore()""; in addition, the number of strings which were not ""ExcludedByFignore()"" is returned in ""nGoodStrings"". ; Definition at line 685 of file TTabCom.cxx. ◆ AppendListOfFilesInDirectory(). void TTabCom::AppendListOfFilesInDirectory ; (; const char ; dirName[], . TSeqCollection * ; pList . ). static . [static utility function]///////////////////////////// ; adds a TObjString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9233,Clear,ClearAll,9233,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearAll']
Usability,"s tutorials. Detailed Description; An example with basic graphics illustrating the Object Oriented User Interface of ROOT. . ; void framework() {; TCanvas *c1 = new TCanvas(""c1"",""The ROOT Framework"",200,10,700,500);; c1->Range(0,0,19,12);; //; TPavesText *rootf = new TPavesText(0.4,0.6,18,2.3,20,""tr"");; rootf->AddText(""ROOT Framework"");; rootf->SetFillColor(42);; rootf->Draw();; //; TPavesText *eventg = new TPavesText(0.99,2.66,3.29,5.67,4,""tr"");; eventg->SetFillColor(38);; eventg->AddText(""Event"");; eventg->AddText(""Generators"");; eventg->Draw();; //; TPavesText *simul = new TPavesText(3.62,2.71,6.15,7.96,7,""tr"");; simul->SetFillColor(41);; simul->AddText(""Detector"");; simul->AddText(""Simulation"");; simul->Draw();; //; TPavesText *recon = new TPavesText(6.56,2.69,10.07,10.15,11,""tr"");; recon->SetFillColor(48);; recon->AddText(""Event"");; recon->AddText(""Reconstruction"");; recon->Draw();; //; TPavesText *daq = new TPavesText(10.43,2.74,14.0,10.81,11,""tr"");; daq->AddText(""Data"");; daq->AddText(""Acquisition"");; daq->Draw();; //; TPavesText *anal = new TPavesText(14.55,2.72,17.9,10.31,11,""tr"");; anal->SetFillColor(42);; anal->AddText(""Data"");; anal->AddText(""Analysis"");; anal->Draw();; c1->Update();; }; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPavesTextA PaveText (see TPaveText) with several stacked paves.Definition TPavesText.h:18; TPavesText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavestext with its current attributes.Definition TPavesText.cxx:80; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file framework.C. tutorialsgraphicsframework.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/framework_8C.html:2101,Guid,Guide,2101,doc/master/framework_8C.html,https://root.cern,https://root.cern/doc/master/framework_8C.html,1,['Guid'],['Guide']
Usability,"s used for async running; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. private:. TCondor*fCondorproxy for our Condor pool; TTimer*fTimertimer for delayed Condor COD suspend. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofCondor(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start proof using condor. ~TProofCondor(); Clean up Condor PROOF environment. Bool_t StartSlaves(Bool_t ); Setup Condor workers using dynamic information. void SetActive(Bool_t active); Suspend or resume PROOF via Condor. TString GetJobAd(); Get job Ad. TProofCondor(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0). void SetActive(); { TProof::SetActive(); }. » Author: Fons Rademakers 13/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofCondor.html:28587,resume,resume,28587,root/html604/TProofCondor.html,https://root.cern,https://root.cern/root/html604/TProofCondor.html,1,['resume'],['resume']
Usability,"s used for async running; TSelector*TProof::fSelectorSelector to be processed, if any; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TList*TProof::fTerminatedSlaveInfoslist of unique infos of terminated slaves; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. private:. TCondor*fCondorproxy for our Condor pool; TTimer*fTimertimer for delayed Condor COD suspend. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofCondor(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start proof using condor. ~TProofCondor(); Clean up Condor PROOF environment. Bool_t StartSlaves(Bool_t ); Setup Condor workers using dynamic information. void SetActive(Bool_t active); Suspend or resume PROOF via Condor. TString GetJobAd(); Get job Ad. TProofCondor(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0). void SetActive(); { TProof::SetActive(); }. » Author: Fons Rademakers 13/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-30 15:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:28326,resume,resume,28326,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,1,['resume'],['resume']
Usability,"s used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CQuad12F;  CQuad1F;  CQuad4F;  CQuad4FGrad;  CQuad8F;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) ;  CVariableMetricEDMEstimator;  CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  Cvec;  CVectorOuterProduct;  ►NQu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:64032,simpl,simplex,64032,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,3,['simpl'],['simplex']
Usability,"s useful to contact us first to discuss the code you want to develop or the bug you want to fix.; Picking up an Idea; We maintain a set of ""ideas"" for talented scientists and developers to pick up. An ""idea"" is a sketch of a development project, a functionality a missing feature we would like to see in our tool, in your ROOT! You can inspect the ideas in the following list. Ideas. ; 30-01-2019 ; Transform GNU-makefile tests to CMake; ROOT's test suite has several crucial tests that still try on GNU-Makefile. We need to integrate them with CMake. ; 30-01-2019 ; Better argument parsing; Use a C++ command line argument library for defining and parsing ROOT's options. ; 30-01-2019 ; More tests, more benchmarks!; ROOT relies on testing, including performance testing - and we need to improve both. ; 05-01-2016 ; Wanted: A tool to 'warn' user of inefficient (for I/O) construct in data model; A tool to 'warn' user of inefficient (for I/O) construct in data model. ; 02-09-2015 ; Wanted: Storage of HEP data via key/value storage solutions; Interface the ROOT I/O to key/value stores. Completed ideas. ; 28-03-2015 ; Commandline tools for ROOT files inspection, modification and automated plotting; Create a unix-like set of Python command line tools to explore, modify and display the content of ROOT files. . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/collaborate-with-us.html:4359,Guid,Guides,4359,d/collaborate-with-us.html,https://root.cern,https://root.cern/d/collaborate-with-us.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"s very cluttered and useless. To improve the readability of the Parallel Coordinates output and to explore interactively the data set, many techniques are available. We have implemented a few in ROOT. First of all, in order to show better where the clusters on the various axes are, a 1D histogram is associated to each axis. These histograms (one per axis) are filled according to the number of lines passing through the bins. The histogram’s axis can be represented with colors or as bar charts. These histograms can be represented which colors (get from a palette according to the bin contents) or as bar charts. Both representations can be cumulated on the same plot. This technique allows seeing clearly where the clusters are on an individual axis but it does not give any hints about the correlations between the axes.; Avery simple technique allows to make the clusters appearing: Instead of painting solid lines we paint dotted lines. The cluttering of each individual line is reduced and the clusters show clearly as we can see on the next figure. The spacing between the dots is a parameter which can be adjusted in order to get the best results. Using dotted lines is a very simple method to reduce the cluttering. Interactivity is a very important aspect of the Parallel Coordinates plots. To really explore the data set it is essential to act directly with the events and the axes. For instance, changing the axes order may show clusters which were not visible in a different order. On the next figure the axes order has been changed interactively. We can see that many more clusters appear and all the “random spheres” we put in the data set are now clearly visible. Having moved the variables u,v,w after the variables x,y,z the correlation between these two sets of variables is clear also. Axis order is very important to show clusters. To pursue further data sets exploration we have implemented the possibility to define selections interactively. A selection is a set of ranges co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:613781,clear,clearly,613781,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clearly']
Usability,"s when the objective function stored is a Chi2Func or a PoissonLikelihood; 983 // This also set the model function correctly if it has not been set; 984 ; 985 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction, BinData> >() ) return;; 986 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction, UnBinData> >() ) return;; 987 ; 988 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction, BinData> >() ) return;; 989 if ( GetDataFromFCN<BasicFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction, UnBinData> >() ) return;; 990 ; 991 //MATH_INFO_MSG(""Fitter::ExamineFCN"",""Objective function is not of a known type - FitData and ModelFunction objects are not available"");; 992 return;; 993}; 994 ; 995 } // end namespace Fit; 996 ; 997} // end namespace ROOT; BasicFCN.h; BinData.h; Chi2FCN.h; Error.h; MATH_INFO_MSG#define MATH_INFO_MSG(loc, str)Pre-processor macro to report messages which can be configured to use ROOT error or simply an std::io...Definition Error.h:77; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; MATH_WARN_MSG#define MATH_WARN_MSG(loc, str)Definition Error.h:80; FcnAdapter.h; FitConfig.h; FitMethodFunction.h; FitResult.h; Fitter.h; IParamFunction.h; LogLikelihoodFCN.h; MinimizerOptions.h; Minimizer.h; MultiDimParamFunctionAdapter.h; PoissonLikelihoodFCN.h; f#define f(i)Definition RSha256.hxx:104; h#define h(i)Definition RSha256.hxx:106; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:39478,simpl,simply,39478,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['simpl'],['simply']
Usability,"s where the C++ implementation of the method expects the address of a pointer.; For example: v = ROOT.std.vector('int')(); t.Branch('my_vector_branch', v); The following signatures are treated in this pythonization:; ( const char*, void*, const char*, Int_t = 32000 ); ( const char*, const char*, T**, Int_t = 32000, Int_t = 99 ); ( const char*, T**, Int_t = 32000, Int_t = 99 ) . Definition at line 361 of file TTreePyz.cxx. ◆ ClearProxiedObjects(). PyObject * PyROOT::ClearProxiedObjects ; (; PyObject * ; self, . PyObject * ; args . ). Definition at line 69 of file PyROOTWrapper.cxx. ◆ CPPInstanceExpand(). PyObject * PyROOT::CPPInstanceExpand ; (; PyObject * ; self, . PyObject * ; args . ). Deserialize pickled objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. Helper function that deserializes pickled objects. It needs to be included in the extension module API because otherwise it is not callable from Python. This is important because it will be Python itself calling it when trying to expand a serialized object. ; Definition at line 38 of file CPPInstancePyz.cxx. ◆ GetBranchAttr(). PyObject * PyROOT::GetBranchAttr ; (; PyObject * ; self, . PyObject * ; args . ). Definition at line 177 of file TTreePyz.cxx. ◆ Init(). void PyROOT::Init ; (; ). Definition at line 53 of file PyROOTWrapper.cxx. ◆ RegisterConverterAlias(). PyObject * PyROOT::RegisterConverterAlias ; (; PyObject * ; , . PyObject * ; args . ). Definition at line 39 of file PyROOTModule.cxx. ◆ RegisterExecutorAlias(). PyObject * PyROOT::RegisterExecutorAlias ; (; PyObject * ; , . PyObject * ; args . ). Definition at line 51 of file PyROOTModule.cxx. Variable Documentation. ◆ gRootModule. R__EXTERN PyObject * PyROOT::gRootModule = nullptr. Definition at line 37 of file PyROOTModule.cxx. PyROOT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:51 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespacePyROOT.html:6311,Guid,Guide,6311,doc/master/namespacePyROOT.html,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html,1,['Guid'],['Guide']
Usability,"s with no lights (but lighting still enabled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t[4] rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t[4] rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t[4] rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLUtil.html:12535,simpl,simple,12535,root/html604/TGLUtil.html,https://root.cern,https://root.cern/root/html604/TGLUtil.html,1,['simpl'],['simple']
Usability,"s with no lights (but lighting still enabled); are partially visible. void DrawSphere(const TGLVertex3& position, Double_t radius, const UChar_t[4] rgba); Draw sphere, centered on vertex 'position', with radius 'radius',; color 'rgba'. void DrawLine(const TGLLine3& line, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t[4] rgba); Draw thick line (tube) defined by 'line', with head at end shape; 'head' - box/arrow/none, (head) size 'size', color 'rgba'. void DrawLine(const TGLVertex3& start, const TGLVector3& vector, TGLUtil::ELineHeadShape head, Double_t size, const UChar_t[4] rgba); Draw thick line (tube) running from 'start', length 'vector',; with head at end of shape 'head' - box/arrow/none,; (head) size 'size', color 'rgba'. void DrawRing(const TGLVertex3& center, const TGLVector3& normal, Double_t radius, const UChar_t* rgba); Draw ring, centered on 'center', lying on plane defined by 'center' & 'normal'; of outer radius 'radius', color 'rgba'. void DrawReferenceMarker(const TGLCamera& camera, const TGLVertex3& pos, Float_t radius = 3, const UChar_t* rgba = 0); Draw a sphere- marker on world-coordinate 'pos' with pixel; radius 'radius'. Color argument is optional. void DrawSimpleAxes(const TGLCamera& camera, const TGLBoundingBox& bbox, Int_t axesType); Draw simple xyz-axes for given bounding-box. void DrawNumber(const TString& num, const TGLVertex3& pos, Bool_t center = kFALSE); Draw number in string 'num' via internal 8x8-pixel bitmap on; vertex 'pos'. If 'center' is true, the number is centered on 'pos'.; Only numbers, '.', '-' and ' ' are supported. TGLColor& operator=(const TGLUtil& ). TGLUtil(const TGLUtil& ). virtual ~TGLUtil(); {}. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLUtil.html:12535,simpl,simple,12535,root/html602/TGLUtil.html,https://root.cern,https://root.cern/root/html602/TGLUtil.html,1,['simpl'],['simple']
Usability,"s |; Protected Member Functions |; Protected Attributes |; List of all members ; RooFunctorPdfBinding Class ReferenceRooFit » RooFit. ; RooFunctorPdfBinding makes math functions from ROOT usable as PDFs in RooFit. ; It takes a ROOT::Math::IBaseFunctionMultiDim, and binds the variables of this function to the RooFit variables passed in the constructor. When the PDF is evaluated, the bound function is evaluated, and also integrated numerically to normalise it to unity over the range of its observables.; Instances of function binding classes are fully functional RooFit function objects with one exception: if the bound function is not a standard TMath or MathMore function the class cannot be persisted in a RooWorkspace without registering the function pointer first using RooCFunction1Binding<T1,T2>::register(). ; Definition at line 56 of file RooFunctorBinding.h. Public Member Functions;  RooFunctorPdfBinding ()=default;  ;  RooFunctorPdfBinding (const char *name, const char *title, const ROOT::Math::IBaseFunctionMultiDim &ftor, const RooArgList &vars);  Create a RooFit PDF that makes ftor usable as a PDF in RooFit. ;  ;  RooFunctorPdfBinding (const RooFunctorPdfBinding &other, const char *name=nullptr);  ;  ~RooFunctorPdfBinding () override;  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t cod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorPdfBinding.html:1309,usab,usable,1309,doc/master/classRooFunctorPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorPdfBinding.html,1,['usab'],['usable']
Usability,"s “Draw” and “Exit” and keyboard mnemonics Alt+D, Alt+E for their selection. The letter D and E appear underlined on the screen. All text buttons should have a unique shortcut key with the exception of OK and Cancel.; These buttons are usually placed within a window to provide fast access to frequently used or critical commands. They help in situations where a command is not available through the menu bar. You already know that a command string can be passed in the text button via the constructor:; TGTextButton(const TGWindow *p, const char *s, const char *cmd,; Int_t id, GContext_t norm, FontStruct_t font,; UInt_t options);; A button label can be changed by SetText(new_label). There are important guidelines to be followed about a button label. The text has to provide a meaningful description of the performed action. The single-word label should be used whenever possible, only two-three words for clarity, if necessary. Do not number labels. Always follow all platform presentation and usage guidelines for standard button functions. Let’s remember a few standard names and definitions of well known buttons:; OK - any changed information in a window is accepted and the window is closed;; Cancel - closes window without implementing submitted changes;; Reset- resets defaults and cancels any changed information that has not be submitted;; Apply - any changed information is accepted and again displayed in the window that remains open;; Close - closes the window;; Help - opens online Help.; Below are examples of text buttons. Note the two placement methods. The first example should be used when there are one to three command buttons; the second one when there are more than three buttons. Picture buttons are usually rectangular in shape with an icon or graphics label. These buttons may appear alone or placed in a group at the window’s top or side. They are most frequently used to quickly access commands, many of which are normally accessed through the tool bar. For example, t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1178400,guid,guidelines,1178400,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guidelines']
Usability,"s"",this,kFALSE,kFALSE),; Default constructor; Should only be used by proof.; _piter = _par.createIterator() ;; _oiter = _obs.createIterator() ;. RooBarlowBeestonLL(const char *name, const char *title, 				 RooAbsReal& nllIn /*, const RooArgSet& observables*/); _obs(""paramOfInterest"",""Parameters of interest"",this),; _par(""nuisanceParam"",""Nuisance parameters"",this,kFALSE,kFALSE),; Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooBarlowBeestonLL(const RooStats::HistFactory::RooBarlowBeestonLL& other, const char* name = 0); _obs(""obs"",this,other._obs),; _par(""par"",this,other._par),; Copy constructor. ~RooBarlowBeestonLL(); Destructor. void initializeBarlowCache(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const. Double_t evaluate() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). if (_minuit) {; delete _minuit ;; _minuit = 0 ;; }. TObject* clone(const char* newname) const; { return new RooBarlowBeestonLL(*this,newname); }. RooAbsReal& nll(); void setAlwaysStartFromMin(Bool_t flag) { _startFromMin = flag ; }; Bool_t alwaysStartFromMin() const { return _startFromMin ; }; RooMinuit* minuit() { return _minuit ; }. { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void setPdf(RooAbsPdf* pdf); void clearAbsMin() { _absMinValid = kFALSE ; }; Int_t numEval() const { return _neval ; }. { _pdf = pdf; }. void setDataset(RooAbsData* data); { _data = data; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html:37851,clear,clearAbsMin,37851,root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__RooBarlowBeestonLL.html,1,['clear'],['clearAbsMin']
Usability,"s"",this,kFALSE,kFALSE),; Default constructor; Should only be used by proof.; _piter = _par.createIterator() ;; _oiter = _obs.createIterator() ;. RooBarlowBeestonLL(const char *name, const char *title, 				 RooAbsReal& nllIn /*, const RooArgSet& observables*/); _obs(""paramOfInterest"",""Parameters of interest"",this),; _par(""nuisanceParam"",""Nuisance parameters"",this,kFALSE,kFALSE),; Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooBarlowBeestonLL(const RooStats::HistFactory::RooBarlowBeestonLL& other, const char* name = 0); _obs(""obs"",this,other._obs),; _par(""par"",this,other._par),; Copy constructor. ~RooBarlowBeestonLL(); Destructor. void initializeBarlowCache(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const. Double_t evaluate() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). if (_minuit) {; delete _minuit ;; _minuit = 0 ;; }. TObject* clone(const char* newname) const; { return new RooBarlowBeestonLL(*this,newname); }. RooAbsReal& nll(); void setAlwaysStartFromMin(Bool_t flag) { _startFromMin = flag ; }; Bool_t alwaysStartFromMin() const { return _startFromMin ; }; RooMinuit* minuit() { return _minuit ; }. { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void setPdf(RooAbsPdf* pdf); void clearAbsMin() { _absMinValid = kFALSE ; }; Int_t numEval() const { return _neval ; }. { _pdf = pdf; }. void setDataset(RooAbsData* data); { _data = data; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__HistFactory__RooBarlowBeestonLL.html:39434,clear,clearAbsMin,39434,root/html604/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html604/RooStats__HistFactory__RooBarlowBeestonLL.html,1,['clear'],['clearAbsMin']
Usability,"s"",this,kFALSE,kFALSE),; Default constructor; Should only be used by proof.; _piter = _par.createIterator() ;; _oiter = _obs.createIterator() ;. RooBarlowBeestonLL(const char *name, const char *title, 				 RooAbsReal& nllIn /*, const RooArgSet& observables*/); _obs(""paramOfInterest"",""Parameters of interest"",this),; _par(""nuisanceParam"",""Nuisance parameters"",this,kFALSE,kFALSE),; Constructor of profile likelihood given input likelihood nll w.r.t; the given set of variables. The input log likelihood is minimized w.r.t; to all other variables of the likelihood at each evaluation and the; value of the global log likelihood minimum is always subtracted. RooBarlowBeestonLL(const RooStats::HistFactory::RooBarlowBeestonLL& other, const char* name = 0); _obs(""obs"",this,other._obs),; _par(""par"",this,other._par),; Copy constructor. ~RooBarlowBeestonLL(); Destructor. void initializeBarlowCache(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const. Double_t evaluate() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ). if (_minuit) {; delete _minuit ;; _minuit = 0 ;; }. TObject* clone(const char* newname) const; { return new RooBarlowBeestonLL(*this,newname); }. RooAbsReal& nll(); void setAlwaysStartFromMin(Bool_t flag) { _startFromMin = flag ; }; Bool_t alwaysStartFromMin() const { return _startFromMin ; }; RooMinuit* minuit() { return _minuit ; }. { return const_cast<RooAbsReal&>(_nll.arg()) ; }. void setPdf(RooAbsPdf* pdf); void clearAbsMin() { _absMinValid = kFALSE ; }; Int_t numEval() const { return _neval ; }. { _pdf = pdf; }. void setDataset(RooAbsData* data); { _data = data; }. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html:39434,clear,clearAbsMin,39434,root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__RooBarlowBeestonLL.html,1,['clear'],['clearAbsMin']
Usability,"s"". ; Definition at line 685 of file TTabCom.cxx. ◆ AppendListOfFilesInDirectory(). void TTabCom::AppendListOfFilesInDirectory ; (; const char ; dirName[], . TSeqCollection * ; pList . ). static . [static utility function]///////////////////////////// ; adds a TObjString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9419,Clear,ClearClasses,9419,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearClasses']
Usability,"s'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:19876,Clear,Clear,19876,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Clear'],['Clear']
Usability,"s() const; Int_tindex(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); voidinitialize(const RooNormSetCache& other); virtual TClass*IsA() const; const RooArgSet*lastSet1() const; const RooArgSet*lastSet2() const; const RooNameSet&nameSet1() const; const RooNameSet&nameSet2() const; RooNormSetCache&operator=(const RooNormSetCache&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidexpand(). Data Members; protected:. RooSetPair*_asArr! do not persist; RooHashTable*_htable! do not persist; RooNameSet_name1!; RooNameSet_name2!; Int_t_nreg; Int_t_regSize; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(Int_t regSize = 10); Construct normalization set manager with given initial size. RooNormSetCache(const RooNormSetCache& other); Copy constructor. ~RooNormSetCache(); Destructor. void clear(); Clear contents. void initialize(const RooNormSetCache& other); Initialize cache from contents of given other cache. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. void expand(); Expand registry size by doubling capacity. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _nreg>0?_asArr[_nreg-1]._set1:0 ; }. const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNormSetCache.html:2560,clear,clear,2560,root/html528/RooNormSetCache.html,https://root.cern,https://root.cern/root/html528/RooNormSetCache.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"s() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegralMorph.html:6532,clear,clearValueDirty,6532,root/html528/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html528/RooIntegralMorph.html,1,['clear'],['clearValueDirty']
Usability,"s() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegralMorph.html:6532,clear,clearValueDirty,6532,root/html530/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html530/RooIntegralMorph.html,1,['clear'],['clearValueDirty']
Usability,"s() const; const RooFormulaVar&basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooResolutionModel.html:4308,clear,clearEvalError,4308,root/html528/RooResolutionModel.html,https://root.cern,https://root.cern/root/html528/RooResolutionModel.html,1,['clear'],['clearEvalError']
Usability,"s() const; const RooFormulaVar&basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooResolutionModel.html:4308,clear,clearEvalError,4308,root/html530/RooResolutionModel.html,https://root.cern,https://root.cern/root/html530/RooResolutionModel.html,1,['clear'],['clearEvalError']
Usability,"s())) fit = (TF1*)f;; 1264 }; 1265 TIter next(functions);; 1266 while ((f = (TObject*) next())) {; 1267 if (f->InheritsFrom(TF1::Class())) {; 1268 fit = (TF1*)f;; 1269 break;; 1270 }; 1271 }; 1272 TPaletteAxis *palette = (TPaletteAxis*)functions->FindObject(""palette"");; 1273 if (palette) palette->Paint();; 1274 }; 1275 if (fit && !theGraph->TestBit(TGraph::kNoStats)) PaintStats(theGraph, fit);; 1276 }; 1277}; 1278 ; 1279 ; 1280////////////////////////////////////////////////////////////////////////////////; 1281/// [Control function to draw a graph.](\ref GrP1); 1282 ; 1283void TGraphPainter::PaintGraph(TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt); 1284{; 1285 ; 1286 if (theGraph->InheritsFrom(""TGraphPolar"")); 1287 gPad->PushSelectableObject(theGraph);; 1288 ; 1289 Int_t optionLine , optionAxis , optionCurve , optionStar , optionMark;; 1290 Int_t optionBar , optionR , optionOne , optionE;; 1291 Int_t optionFill , optionZ , optionCurveFill, optionIAxis;; 1292 Int_t i, npt, nloop;; 1293 Int_t drawtype=0;; 1294 Double_t xlow, xhigh, ylow, yhigh;; 1295 Double_t barxmin, barxmax, barymin, barymax;; 1296 Double_t uxmin, uxmax;; 1297 Double_t x1, xn, y1, yn;; 1298 Double_t dbar, bdelta;; 1299 Int_t theNpoints = theGraph->GetN();; 1300 ; 1301 if (npoints <= 0) {; 1302 Error(""PaintGraph"", ""illegal number of points (%d)"", npoints);; 1303 return;; 1304 }; 1305 TString opt = chopt;; 1306 opt.ToUpper();; 1307 opt.ReplaceAll(""SAME"","""");; 1308 ; 1309 if (opt.Contains(""L"")) optionLine = 1; else optionLine = 0;; 1310 if (opt.Contains(""A"")) optionAxis = 1; else optionAxis = 0;; 1311 if (opt.Contains(""C"")) optionCurve = 1; else optionCurve = 0;; 1312 if (opt.Contains(""*"")) optionStar = 1; else optionStar = 0;; 1313 if (opt.Contains(""P"")) optionMark = 1; else optionMark = 0;; 1314 if (opt.Contains(""B"")) optionBar = 1; else optionBar = 0;; 1315 if (opt.Contains(""R"")) optionR = 1; else optionR = 0;; 1316 if (opt.Contains(""1"")) optionOne = 1; else",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:47672,ux,uxmin,47672,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"s());; 3335 br->SetAddress(addr);; 3336 // The copy does not own any object allocated by SetAddress().; 3337 if (br->InheritsFrom(TBranchElement::Class())) {; 3338 ((TBranchElement*) br)->ResetDeleteObject();; 3339 }; 3340 } else {; 3341 Warning(""CopyAddresses"", ""Could not find branch named '%s' in tree named '%s'"", branch->GetName(), tree->GetName());; 3342 }; 3343 }; 3344 }; 3345 ; 3346 // Copy branch addresses starting from leaves.; 3347 TObjArray* tleaves = tree->GetListOfLeaves();; 3348 Int_t ntleaves = tleaves->GetEntriesFast();; 3349 std::set<TLeaf*> updatedLeafCount;; 3350 for (Int_t i = 0; i < ntleaves; ++i) {; 3351 TLeaf* tleaf = (TLeaf*) tleaves->UncheckedAt(i);; 3352 TBranch* tbranch = tleaf->GetBranch();; 3353 TBranch* branch = GetBranch(tbranch->GetName());; 3354 if (!branch) {; 3355 continue;; 3356 }; 3357 TLeaf* leaf = branch->GetLeaf(tleaf->GetName());; 3358 if (!leaf) {; 3359 continue;; 3360 }; 3361 if (branch->TestBit(kDoNotProcess)) {; 3362 continue;; 3363 }; 3364 if (undo) {; 3365 // Now we know whether the address has been transfered; 3366 tree->ResetBranchAddress(tbranch);; 3367 } else {; 3368 TBranchElement *mother = dynamic_cast<TBranchElement*>(leaf->GetBranch()->GetMother());; 3369 bool needAddressReset = false;; 3370 if (leaf->GetLeafCount() && (leaf->TestBit(TLeaf::kNewValue) || !leaf->GetValuePointer() || (mother && mother->IsObjectOwner())) && tleaf->GetLeafCount()); 3371 {; 3372 // If it is an array and it was allocated by the leaf itself,; 3373 // let's make sure it is large enough for the incoming data.; 3374 if (leaf->GetLeafCount()->GetMaximum() < tleaf->GetLeafCount()->GetMaximum()) {; 3375 leaf->GetLeafCount()->IncludeRange( tleaf->GetLeafCount() );; 3376 updatedLeafCount.insert(leaf->GetLeafCount());; 3377 needAddressReset = true;; 3378 } else {; 3379 needAddressReset = (updatedLeafCount.find(leaf->GetLeafCount()) != updatedLeafCount.end());; 3380 }; 3381 }; 3382 if (needAddressReset && leaf->GetValuePointer()) {; 3383 if (leaf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:133051,undo,undo,133051,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['undo'],['undo']
Usability,"s()->SetMoreLogLabels();; graphe->GetYaxis()->SetMoreLogLabels();; graphe->Draw(""a pl rx ry"");; ; // TGraphAsymmErrors; auto graphae = new TGraphAsymmErrors();; graphae->GetXaxis()->SetNdivisions(514);; graphae->GetYaxis()->SetNdivisions(514);; graphae->SetMarkerStyle(kCircle);; graphae->SetPoint(0,5,5);; graphae->SetPointError(0,1,3,3,1);; graphae->SetPoint(1,9,9);; graphae->SetPointError(1,1,3,1,3);; ; c->cd(4);; gPad->SetGrid();; graphae->Draw(""a pl "");; ; c->cd(5);; gPad->SetGrid();; graphae->Draw(""a pl rx ry "");; ; c->cd(6);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphae->GetXaxis()->SetMoreLogLabels();; graphae->GetYaxis()->SetMoreLogLabels();; graphae->Draw(""a pl rx ry"");; ; // TGraphBentErrors; auto graphbe = new TGraphBentErrors();; graphbe->GetXaxis()->SetNdivisions(514);; graphbe->GetYaxis()->SetNdivisions(514);; graphbe->SetMarkerStyle(kCircle);; graphbe->SetPoint(0,5,5);; graphbe->SetPointError(0,1,3,3,1,.5,.2,.5,.2);; graphbe->SetPoint(1,9,9);; graphbe->SetPointError(1,1,3,1,3,-.5,-.2,-.5,-.2);; ; c->cd(7);; gPad->SetGrid();; graphbe->Draw(""a pl "");; ; c->cd(8);; gPad->SetGrid();; graphbe->Draw(""a pl rx ry "");; ; c->cd(9);; gPad->SetGrid();; gPad->SetLogx();; gPad->SetLogy();; graphbe->GetXaxis()->SetMoreLogLabels();; graphbe->GetYaxis()->SetMoreLogLabels();; graphbe->Draw(""a pl rx ry"");; }; c#define c(i)Definition RSha256.hxx:101; kCircle@ kCircleDefinition TAttMarker.h:53; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraphBentErrorsA TGraphBentErrors is a TGraph with bent, asymmetric error bars.Definition TGraphBentErrors.h:25; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; AuthorOlivier Couet ; Definition in file graphreverse.C. tutorialsgraphsgraphreverse.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graphreverse_8C.html:2812,Guid,Guide,2812,doc/master/graphreverse_8C.html,https://root.cern,https://root.cern/doc/master/graphreverse_8C.html,1,['Guid'],['Guide']
Usability,"s(). virtual void TVirtualStreamerInfo::CallShowMembers ; (; const void * ; obj, . TMemberInspector & ; insp, . Bool_t ; isTransient . ); const. pure virtual . Implemented in TStreamerInfo. ◆ CanDelete(). Bool_t TVirtualStreamerInfo::CanDelete ; (; ). static . static function returning true if ReadBuffer can delete object ; Definition at line 78 of file TVirtualStreamerInfo.cxx. ◆ CanOptimize(). Bool_t TVirtualStreamerInfo::CanOptimize ; (; ). static . static function returning true if optimization can be on ; Definition at line 86 of file TVirtualStreamerInfo.cxx. ◆ Class(). static TClass * TVirtualStreamerInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TVirtualStreamerInfo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TVirtualStreamerInfo::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 216 of file TVirtualStreamerInfo.h. ◆ Clear(). virtual void TVirtualStreamerInfo::Clear ; (; Option_t * ; option = """"). overridepure virtual . Set name and title to empty strings (""""). ; Reimplemented from TNamed.; Implemented in TStreamerInfo. ◆ CompareContent(). virtual Bool_t TVirtualStreamerInfo::CompareContent ; (; TClass * ; cl, . TVirtualStreamerInfo * ; info, . Bool_t ; warn, . Bool_t ; complete, . TFile * ; file . ). pure virtual . Implemented in TStreamerInfo. ◆ Compile(). virtual void TVirtualStreamerInfo::Compile ; (; ). pure virtual . Implemented in TStreamerInfo. ◆ DeclFileName(). static const char * TVirtualStreamerInfo::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 216 of file TVirtualStreamerInfo.h. ◆ DeleteArray(). virtual void TVirtualStreamerInfo::DeleteArray ; (; void * ; p, . Bool_t ; dtorOnly = kFALSE . ). pure virtual . Implemented in TStreamerInfo. ◆ Destructor(). virtual void TVirtualStreamerInfo::Destructor ; (; void * ; p, . Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:22839,Clear,Clear,22839,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['Clear'],['Clear']
Usability,"s(). void TGraphNode::SaveAttributes ; (; std::ostream & ; out). Save attributes as a C++ statement(s) on output stream out called by TGraphStruct::SavePrimitive. ; Definition at line 155 of file TGraphNode.cxx. ◆ SavePrimitive(). void TGraphNode::SavePrimitive ; (; std::ostream & ; , . Option_t * ;  . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 147 of file TGraphNode.cxx. ◆ SetGVNode(). void TGraphNode::SetGVNode ; (; GVizAgnode_t * ; gvn). inline . Definition at line 48 of file TGraphNode.h. ◆ SetTextAngle(). void TGraphNode::SetTextAngle ; (; Float_t ; tangle). inlineoverridevirtual . Set the text angle. ; Reimplemented from TAttText.; Definition at line 49 of file TGraphNode.h. ◆ Streamer(). void TGraphNode::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Definition at line 164 of file TGraphNode.cxx. ◆ StreamerNVirtual(). void TGraphNode::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TGraphNode.h. Member Data Documentation. ◆ fGVNode. GVizAgnode_t* TGraphNode::fGVNode. protected . Graphviz node. ; Definition at line 33 of file TGraphNode.h. ◆ fH. Double_t TGraphNode::fH. protected . Node height. ; Definition at line 36 of file TGraphNode.h. ◆ fW. Double_t TGraphNode::fW. protected . Node width. ; Definition at line 37 of file TGraphNode.h. ◆ fX. Double_t TGraphNode::fX. protected . Node's center X coordinate. ; Definition at line 34 of file TGraphNode.h. ◆ fY. Double_t TGraphNode::fY. protected . Node's center Y coordinate. ; Definition at line 35 of file TGraphNode.h. Libraries for TGraphNode:. [legend]; The documentation for this class was generated from the following files:; graf2d/gviz/inc/TGraphNode.h; graf2d/gviz/src/TGraphNode.cxx. TGraphNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphNode.html:22207,Guid,Guide,22207,doc/master/classTGraphNode.html,https://root.cern,https://root.cern/doc/master/classTGraphNode.html,1,['Guid'],['Guide']
Usability,"s(); TMatrixDSparse*TUnfold::CreateSparseMatrix(Int_t nrow, Int_t ncol, Int_t nele, Int_t* row, Int_t* col, Double_t* data) const; static voidTUnfold::DeleteMatrix(TMatrixD** m); static voidTUnfold::DeleteMatrix(TMatrixDSparse** m); voidDoBackgroundSubtraction(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tTUnfold::DoUnfold(); voidTUnfold::ErrorMatrixToHist(TH2* ematrix, const TMatrixDSparse* emat, const Int_t* binMap, Bool_t doClear) const; const TMatrixDSparse*TUnfold::GetAx() const; Int_tTUnfold::GetBinFromRow(int ix) const; const TMatrixDSparse*TUnfold::GetDXDAM(int i) const; const TMatrixDSparse*TUnfold::GetDXDAZ(int i) const; const TMatrixDSparse*TUnfold::GetDXDtauSquared() const; const TMatrixDSparse*TUnfold::GetDXDY() const; const TMatrixDSparse*TUnfold::GetE() const; const TMatrixDSparse*TUnfold::GetEinv() const; voidGetEmatrixFromVyy(const TMatrixDSparse* vyy, TH2* ematrix, const Int_t* binMap, Bool_t clearEmat); Int_tTUnfold::GetNx() const; Int_tTUnfold::GetNy() const; virtual TStringTUnfold::GetOutputBinName(Int_t iBinX) const; Double_tTUnfold::GetRhoIFromMatrix(TH1* rhoi, const TMatrixDSparse* eOrig, const Int_t* binMap, TH2* invEmat) const; Int_tTUnfold::GetRowFromBin(int ix) const; TMatrixDSparse*GetSummedErrorMatrixXX(); TMatrixDSparse*GetSummedErrorMatrixYY(); const TMatrixDSparse*TUnfold::GetVxx() const; const TMatrixDSparse*TUnfold::GetVxxInv() const; const TMatrixDSparse*TUnfold::GetVyyInv() const; const TMatrixD*TUnfold::GetX() const; TMatrixDSparse*TUnfold::InvertMSparseSymmPos(const TMatrixDSparse* A, Int_t* rank) const; voidTObject::MakeZombie(); TMatrixDSparse*TUnfold::MultiplyMSparseM(const TMatrixDSparse* a, const TMatrixD* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const; TMatrixDSparse*TUnfold::MultiplyMSparseMSparseTranspVector(const TMatrixDSparse* m1, const TMatrixDSparse* m2, const TMatrixTBase<Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:13039,clear,clearEmat,13039,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,3,['clear'],['clearEmat']
Usability,"s(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsAnaConvPdf.html:4279,clear,clearEvalErrorLog,4279,root/html602/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"s(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedPdf.html:3384,clear,clearEvalErrorLog,3384,root/html534/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedPdf.html,6,['clear'],['clearEvalErrorLog']
Usability,"s(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDecay.html:2788,clear,clearEvalErrorLog,2788,root/html534/RooDecay.html,https://root.cern,https://root.cern/root/html534/RooDecay.html,3,['clear'],['clearEvalErrorLog']
Usability,"s(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBCPEffDecay.html:3090,clear,clearEvalErrorLog,3090,root/html534/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html534/RooBCPEffDecay.html,12,['clear'],['clearEvalErrorLog']
Usability,"s(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBDecay.html:2988,clear,clearEvalErrorLog,2988,root/html534/RooBDecay.html,https://root.cern,https://root.cern/root/html534/RooBDecay.html,3,['clear'],['clearEvalErrorLog']
Usability,"s(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooArgusBG.html:2812,clear,clearEvalErrorLog,2812,root/html534/RooArgusBG.html,https://root.cern,https://root.cern/root/html534/RooArgusBG.html,133,['clear'],['clearEvalErrorLog']
Usability,"s(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. ULong_t_max!; RooNameSet_name1!; RooNameSet_name2!; ULong_t_next!; RooNormSetCache::PairIdxMapType_pairToIdx!; RooNormSetCache::PairVectType_pairs!; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(ULong_t max = 32). ~RooNormSetCache(); Destructor. void clear(); Clear contents. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. RooNormSetCache(ULong_t max = 32). Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); Match range name first. Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); { return (index(set1,set2,set2RangeName) >= 0); }. Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _pairs.empty()?0:_pairs.back().first; }. const RooArgSet* lastSet2() const; { return _pairs.empty()?0:_pairs.back().second; }. const RooNameSet& nameSet1() const; { return _name1; }. const RooNameSet& nameSet2() const; { return _name2; }. Int_t entries() const; { return _pairs.size(); }. void initialize(const RooNormSetCache& other); { clear(); *this = other; }. » Last changed: Tue Jun 2 15:32:35 2015 » Last generated: 2015-06-02 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooNormSetCache.html:3694,clear,clear,3694,root/html604/RooNormSetCache.html,https://root.cern,https://root.cern/root/html604/RooNormSetCache.html,1,['clear'],['clear']
Usability,"s(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidBegin1D(TTree* t); virtual voidBegin2D(TTree* t); virtual voidBegin3D(TTree* t); virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). private:. voidDefVar1D(); voidDefVar2D(); voidDefVar3D(). Data Members; public:. enum TProofDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTProofDraw::fDimensionDimension of the current expression; TH1*fHistogram; TStringTProofDraw::fInitialExp; TList*TSelector::fInputlist of objects available during processing; TTreeFormulaManage",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDrawHist.html:5703,Clear,ClearFormula,5703,root/html528/TProofDrawHist.html,https://root.cern,https://root.cern/root/html528/TProofDrawHist.html,1,['Clear'],['ClearFormula']
Usability,"s(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual voidchangeBasis(RooFormulaVar* basis); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:4795,Clear,Clear,4795,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,2,['Clear'],['Clear']
Usability,"s(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:7406,clear,clearEvalError,7406,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,3,['clear'],['clearEvalError']
Usability,"s(cw);; w->Draw();; }; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; TColorWheelDraw the ROOT Color Wheel.Definition TColorWheel.h:23. The complete list of predefined color names is the following:; kWhite = 0, kBlack = 1, kGray = 920, kRed = 632, kGreen = 416,; kBlue = 600, kYellow = 400, kMagenta = 616, kCyan = 432, kOrange = 800,; kSpring = 820, kTeal = 840, kAzure = 860, kViolet = 880, kPink = 900; kTeal@ kTealDefinition Rtypes.h:67; kGray@ kGrayDefinition Rtypes.h:65; kPink@ kPinkDefinition Rtypes.h:67; kOrange@ kOrangeDefinition Rtypes.h:67; kBlack@ kBlackDefinition Rtypes.h:65; kGreen@ kGreenDefinition Rtypes.h:66; kWhite@ kWhiteDefinition Rtypes.h:65; kCyan@ kCyanDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kAzure@ kAzureDefinition Rtypes.h:67; kViolet@ kVioletDefinition Rtypes.h:67; kSpring@ kSpringDefinition Rtypes.h:67; Note the special role of color kWhite (color number 0). It is the default background color also. For instance in a PDF or PS files (as paper is usually white) it is simply not painted. To have a white color behaving like the other color the simplest is to define an other white color not attached to the color index 0:; Int_t ci = TColor::GetFreeColorIndex();; TColor *color = new TColor(ci, 1., 1., 1.);. Bright and dark colors; Dark and bright colors are used to add 3D effects to graphical objects like TWbox, TPave, TPaveText, TPaveLabel, etc. and in colored lego plots.; Two static functions are available that return the bright or dark color number corresponding to a given color index. If these variants don't already exist, they are created as needed: Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; TColor::GetColorBrightstatic Int_t GetColorBright(Int_t color)Static function: Returns the bright color number corresponding to n If the TColor object does not exi...Definition TColor.cxx:2087; TColor::GetColorDarkstatic Int_t GetColorDark(Int_t color)Static function: Returns t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:5028,simpl,simply,5028,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['simpl'],['simply']
Usability,"s(var1)<0.5 && abs(var2-0.5)<1"";; mycutb = """"; ; # build the string options for DataLoader::PrepareTrainingAndTestTree; dataloader.PrepareTrainingAndTestTree(; mycuts,; mycutb,; nTrain_Signal=nTrainSig,; nTrain_Background=nTrainBkg,; SplitMode=""Random"",; SplitSeed=100,; NormMode=""NumEvents"",; V=False,; CalcCorrelations=False,; ); ; print(""prepared DATA LOADER ""); ; ; ## Book TMVA recurrent models; ; # Book the different types of recurrent models in TMVA (SimpleRNN, LSTM or GRU); ; ; if useTMVA_RNN:; for i in range(3):; if not use_rnn_type[i]:; continue; ; rnn_type = rnn_types[i]; ; ## Define RNN layer layout; ## it should be LayerType (RNN or LSTM or GRU) | number of units | number of inputs | time steps | remember output (typically no=0 | return full sequence; rnnLayout = str(rnn_type) + ""|10|"" + str(ninput) + ""|"" + str(ntime) + ""|0|1,RESHAPE|FLAT,DENSE|64|TANH,LINEAR""; ; ## Defining Training strategies. Different training strings can be concatenate. Use however only one; trainingString1 = ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize="" + str(batchSize); trainingString1 += "",TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs="" + str(maxepochs); trainingString1 += ""Optimizer=ADAM,DropConfig=0.0+0.+0.+0.""; ; ## define the inputlayout string for RNN; ## the input data should be organize as following:; ##/ input layout for RNN: time x ndim; ## add after RNN a reshape layer (needed top flatten the output) and a dense layer with 64 units and a last one; ## Note the last layer is linear because when using Crossentropy a Sigmoid is applied already; ## Define the full RNN Noption string adding the final options for all network; rnnName = ""TMVA_"" + str(rnn_type); factory.BookMethod(; dataloader,; TMVA.Types.kDL,; rnnName,; H=False,; V=True,; ErrorStrategy=""CROSSENTROPY"",; VarTransform=None,; WeightInitialization=""XAVIERUNIFORM"",; ValidationSize=0.2,; RandomSeed=1234,; InputLayout=str(ntime) + ""|"" + str(ninput),; Layout=rnnLayout,; Tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:56894,Learn,LearningRate,56894,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Learn'],['LearningRate']
Usability,"s).Definition TClass.h:517; TContextMenuThis class provides an interface to context sensitive popup menus.Definition TContextMenu.h:44; TEnv::GetValuevirtual Int_t GetValue(const char *name, Int_t dflt) constReturns the integer value for a resource.Definition TEnv.cxx:491; TGuiFactory::CreateBrowserImpvirtual TBrowserImp * CreateBrowserImp(TBrowser *b, const char *title, UInt_t width, UInt_t height, Option_t *opt="""")Create a batch version of TBrowserImp.Definition TGuiFactory.cxx:92; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Classstatic TClass * Class(); TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TStringBasic string class.Definition TString.h:139; TStyle::GetScreenFactorFloat_t GetScreenFactor() constDefinition TStyle.h:256; TSystem::AddTimervirtual void AddTimer(TTimer *t)Add timer to list of system timers.Definition TSystem.cxx:471; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TTimer::Resetvoid Reset()Reset the timer.Definition TTimer.cxx:159; bool; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. coreguisrcTBrowser.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBrowser_8cxx_source.html:23566,Guid,Guide,23566,doc/master/TBrowser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBrowser_8cxx_source.html,1,['Guid'],['Guide']
Usability,"s); const. inlineoverridevirtual . Interface to print value of object. ; Reimplemented from RooPrintable.; Definition at line 53 of file RooStringVar.h. ◆ readFromStream(). bool RooStringVar::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose . ). overridevirtual . Read object contents from given stream. ; Implements RooAbsArg.; Definition at line 59 of file RooStringVar.cxx. ◆ setTreeBranchStatus(). void RooStringVar::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 137 of file RooStringVar.cxx. ◆ setVal(). void RooStringVar::setVal ; (; const char * ; newVal). inline . Definition at line 34 of file RooStringVar.h. ◆ Streamer(). void RooStringVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStringVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 77 of file RooStringVar.h. ◆ syncCache(). void RooStringVar::syncCache ; (; const RooArgSet * ; = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Definition at line 67 of file RooStringVar.h. ◆ writeToStream(). void RooStringVar::writeToStream ; (; std::ostream & ; os, . bool ;  . ); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 42 of file RooStringVar.h. Member Data Documentation. ◆ _string. std::string RooStringVar::_string. private . Definition at line 75 of file RooStringVar.h. ◆ _stringAddr. std::string* RooStringVar::_stringAddr. private . Definition at line 76 of file RooStringVar.h. Libraries for RooStringVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooStringVar.h; roofit/roofitcore/src/RooStringVar.cxx. RooStringVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:44973,Guid,Guide,44973,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,1,['Guid'],['Guide']
Usability,"s); public:. TGeoElementRN(); TGeoElementRN(Int_t A, Int_t Z, Int_t iso, Double_t level, Double_t deltaM, Double_t halfLife, const char* JP, Double_t natAbun, Double_t th_f, Double_t tg_f, Double_t th_s, Double_t tg_s, Int_t status); virtual~TGeoElementRN(); Double_tTGeoElement::A() const; voidTObject::AbstractMethod(const char* method) const; voidAddDecay(TGeoDecayChannel* dc); voidAddDecay(Int_t decay, Int_t diso, Double_t branchingRatio, Double_t qValue); voidTGeoElement::AddIsotope(TGeoIsotope* isotope, Double_t relativeAbundance); voidAddRatio(TGeoBatemanSol& ratio); virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAtomicNo() const; virtual voidTObject::Browse(TBrowser* b); Bool_tCheckDecays() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tDecayResult(TGeoDecayChannel* dc) const; TObjArray*Decays() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Int_tENDF(Int_t a, Int_t z, Int_t iso); virtual Int_tENDFCode() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFillPopulation(TObjArray* population, Double_t precision = 0.001, Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoElementRN.html:1380,Clear,Clear,1380,root/html528/TGeoElementRN.html,https://root.cern,https://root.cern/root/html528/TGeoElementRN.html,4,['Clear'],['Clear']
Usability,"s);  Update the weights, given the current weight gradients. ;  . Protected Attributes; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredBiasGradients;  The sum of the square of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fPastSquaredWeightGradients;  The sum of the square of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fWorkBiasTensor;  working tensor used to keep a temporary copy of bias or bias gradients ;  ; std::vector< std::vector< Matrix_t > > fWorkWeightTensor;  working tensor used to keep a temporary copy of weights or weight gradients ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Adagrad.h>. Inheritance diagram for TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Adagrad.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Adagrad.h. Constructor & Destructor Documentation. ◆ TAdagrad(). template<typename Architecture_t , typename Layer_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:3456,learn,learning,3456,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['learn'],['learning']
Usability,"s)THnD, THnT<Double_t>. Function Members (Methods); public:. THnT<double>(); THnT<double>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<double>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_double_.html:2233,Clear,Clear,2233,root/html534/THnT_double_.html,https://root.cern,https://root.cern/root/html534/THnT_double_.html,1,['Clear'],['Clear']
Usability,"s)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TVirtualViewer3D. ←. TGLScenePad. TGLViewer; ←. TGLEmbeddedViewer. TGLSAViewer. TViewer3DPad. TViewerX3D. Function documentation; TVirtualViewer3D* Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Create a Viewer 3D of specified type. virtual ~TVirtualViewer3D(); {}. Bool_t PreferLocalFrame() const; Viewers must always handle master (absolute) positions - and; buffer producers must be able to supply them. Some viewers may; prefer local frame & translation - and producers can optionally; supply them. Bool_t CanLoopOnPrimitives() const; Viewers can implement their own loop over pad's primitive list. { return kFALSE; }. void PadPaint(TVirtualPad* ); When they can, TPad::Paint() and TPad::PaintModified() simply; call the following function:. {}. void ObjectPaint(TObject* , Option_t* = """"); {}. void BeginScene(); Addition/removal of objects must occur between Begin/EndUpdate calls. Bool_t BuildingScene() const. void EndScene(). Int_t AddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); Simple object addition - buffer represents a unique single positioned object. Int_t AddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); Complex object addition - for adding physical objects which have common logical; shapes. In this case buffer describes template shape (aside from kCore). Bool_t OpenComposite(const TBuffer3D& buffer, Bool_t* addChildren = 0). void CloseComposite(). void AddCompositeOp(UInt_t operation). TObject * SelectObject(Int_t , Int_t ); {return 0;}. void DrawViewer(); {}. void PrintObjects(); {}. void ResetCameras(); {}. void ResetCamerasAfterNextUpdate(); {}. » Author: Olivier Couet 05/10/2004 » Copyright (C) 1995-2004, Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualViewer3D.html:18042,simpl,simply,18042,root/html602/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html602/TVirtualViewer3D.html,2,['simpl'],['simply']
Usability,"s, CSV's and other data formats ;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTPoolManagerA manager for the scheduler behind ROOT multithreading operations ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  CTypeTraits;  ►NROOTwriter;  CROOTwriter;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) ;  CTInterpreterLookupH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:76253,simpl,simple,76253,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['simpl'],['simple']
Usability,"s, Int_t len); Read buffer at position pos if the request is in the list of; prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; they are going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void Le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:26001,learn,learning,26001,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['learn'],['learning']
Usability,"s, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:18346,simpl,simply,18346,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,3,['simpl'],['simply']
Usability,"s, Long64_t firstentry=0);  Process this tree executing the TSelector code in the specified filename. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Process this tree executing the code in the specified selector. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual void RemoveFriend (TTree *);  Remove a friend from the list of friends. ;  ; virtual void Reset (Option_t *option="""");  Reset baskets, buffers and entries count in all branches and leaves. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Resets the state of this TTree after a merge (keep the customization but forget the data). ;  ; virtual void ResetBranchAddress (TBranch *);  Tell all of our branches to set their addresses to zero. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:17353,simpl,simply,17353,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,1,['simpl'],['simply']
Usability,"s, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions. ◆ RemoveAll() [1/2]. void TCollection::RemoveAll ; (; ). inline . Definition at line 204 of file TCollection.h. ◆ RemoveAll() [2/2]. void TCollection::RemoveAll ; (; TCollection * ; col). virtual . Remove all objects in collection col from this collection. ; Definition at line 594 of file TCollection.cxx. ◆ SetCurrentCollection(). void TCollection::SetCurrentCollection ; (; ). Set this collection to be the globally accessible collection. ; Definition at line 688 of file TCollection.cxx. ◆ SetName(). void TCollection::SetName ; (; const char * ; name). inline . Definition at line 206 of file TCollection.h. ◆ SetOwner(). void TCollection::SetOwner ; (; Bool_t ; enable = kTRUE). virtual . Set whether this collection is the owner (enable==true) of its content. ; If it is the owner of its contents, these objects will be deleted whenever the collection itself is deleted. The objects might also be deleted or destructed when Clear is called (depending on the collection). ; Reimplemented in TClonesArray.; Definition at line 746 of file TCollection.cxx. ◆ StartGarbageCollection(). void TCollection::StartGarbageCollection ; (; ). static . Set up for garbage collection. ; Definition at line 696 of file TCollection.cxx. ◆ Streamer(). void TCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 606 of file TCollection.cxx. ◆ StreamerNVirtual(). void TCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 222 of file TColle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:33287,Clear,Clear,33287,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,2,['Clear'],['Clear']
Usability,"s, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TFileHandler; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TProofServLiteInputHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofServLiteInputHandler(). TProofServLiteInputHandler::TProofServLiteInputHandler ; (; TProofServLite * ; s, . Int_t ; fd . ). inline . Definition at line 163 of file TProofServLite.cxx. Member Function Documentation. ◆ Notify(). Bool_t TProofServLiteInputHandler::Notify ; (; ). overridevirtual . Handle input on the socket. ; Reimplemented from TFileHandler.; Definition at line 172 of file TProofServLite.cxx. ◆ ReadNotify(). Bool_t TProofServLiteInputHandler::ReadNotify ; (; ). inlineoverridevirtual . Notify when something can be read from the descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 166 of file TProofServLite.cxx. Member Data Documentation. ◆ fServ. TProofServLite* TProofServLiteInputHandler::fServ. private . Definition at line 161 of file TProofServLite.cxx. proof/proof/src/TProofServLite.cxx. TProofServLiteInputHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteInputHandler.html:17499,Guid,Guide,17499,doc/master/classTProofServLiteInputHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteInputHandler.html,1,['Guid'],['Guide']
Usability,"s, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*GetDataSet(const char* uri, const char* = 0); TMap*TProof::GetDataSetQuota(const char* optStr = """"); virtual TMap*GetDataSets(const char* uri = """", const char* = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTProof::Getenv(const char* env, const char* ord = ""0""); static const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:6487,Feedback,Feedback,6487,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,2,['Feedback'],['Feedback']
Usability,"s, which automatizes the process of compilation and linking.; In /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master.build/tutorials there are 3 demonstration programs:; foam_kanwa.C; is a simple example how to run FOAM in interactive mode. To run this macro issue the following simple command from the Linux shell:; root foam_kanwa.C; or from CLING:; root [0] .x foam_kanwa.C; Simulation will start and graphical canvas with plot of the distribution function appear. In this example we defined the distribution function simply as a global function function Camel2.; foam_demo.C; shows usage of FOAM in compiled mode, which is the preferred method. The integrand function is defined now as a Density method from class TFDISTR inheriting from abstract class TFoamIntegrand. User can modify interface to integrand function according to their needs but they should always remember to define Density method which provides the density distribution. Enter CLING interpreter and type:; root [0] gSystem->Load(""libFoam.so""); root [1] .x foam_demo.C+; to load FOAM library, compile and execute macro foam_demo.C. A shared object foam_demo_C.so is created in the current directory. At the end of exploration phase FOAM object including distribution function will be written to disk.; foam_demopers.C; demonstrates persistency of FOAM classes. To run this macro type:; root [0] .x foam_demopers.C; Program reads the FOAM object from disk, checks its consistency and prints geometry of cells. Next starts the the generation. It can be interpreted directly by CLING because compiled TFDISTR class is already available in foam_demo_C.so library. . Files; file  foam_demo.C;   Demonstrate the TFoam class. ;  ; file  foam_demopers.C;   This simple macro demonstrates persistency of FOAM object. ;  ; file  foam_kanwa.C;   This program can be execute from the command line as folows: ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__FOAM.html:2672,simpl,simple,2672,doc/master/group__tutorial__FOAM.html,https://root.cern,https://root.cern/doc/master/group__tutorial__FOAM.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"s-1,xaxis->GetNbins() );; 11324 xaxis->SetRange(binx,binx2);; 11325 Int_t firstY = yaxis->GetFirst();; 11326 Int_t lastY = yaxis->GetLast();; 11327 Int_t biny = firstY + Int_t((lastY-firstY)*(py-pymin)/(pymax-pymin));; 11328 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11329 yaxis->SetRange(biny,biny2);; 11330 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11331 if (nbins>1 && line1[0].GetX()) {; 11332 gVirtualX->DrawPolyLine(2,line2);; 11333 gVirtualX->DrawPolyLine(2,line3);; 11334 gVirtualX->DrawPolyLine(2,line4);; 11335 gVirtualX->DrawPolyLine(5,endface1);; 11336 gVirtualX->DrawPolyLine(5,endface2);; 11337 }; 11338 xx[0] = xaxis->GetBinCenter(binx);; 11339 xx[1] = yaxis->GetBinCenter(biny);; 11340 xx[2] = zaxis->GetXmin();; 11341 view->WCtoNDC(xx,u);; 11342 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11343 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11344 xx[2] = zaxis->GetXmax();; 11345 view->WCtoNDC(xx,u);; 11346 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11347 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11348 gVirtualX->DrawPolyLine(2,line1);; 11349 if (nbins>1) {; 11350 xx[2] = zaxis->GetXmin();; 11351 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11352 xx[0] = xaxis->GetBinCenter(binx);; 11353 view->WCtoNDC(xx,u);; 11354 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11355 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11356 xx[2] = zaxis->GetXmax();; 11357 view->WCtoNDC(xx,u);; 11358 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11359 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11360 ; 11361 xx[2] = zaxis->GetXmin();; 11362 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11363 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11364 view->WCtoNDC(xx,u);; 11365 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11366 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11367 xx[2] = zaxis->GetXmax();; 11368 view->WCtoNDC(xx,u);; 11369 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11370 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:411506,ux,uxmin,411506,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"s-1,yaxis->GetNbins() );; 11095 yaxis->SetRange(biny,biny2);; 11096 Int_t firstZ = zaxis->GetFirst();; 11097 Int_t lastZ = zaxis->GetLast();; 11098 Int_t binz = firstZ + Int_t((lastZ-firstZ)*(py-pymin)/(pymax-pymin));; 11099 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11100 zaxis->SetRange(binz,binz2);; 11101 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11102 if (nbins>1 && line1[0].GetX()) {; 11103 gVirtualX->DrawPolyLine(2,line2);; 11104 gVirtualX->DrawPolyLine(2,line3);; 11105 gVirtualX->DrawPolyLine(2,line4);; 11106 gVirtualX->DrawPolyLine(5,endface1);; 11107 gVirtualX->DrawPolyLine(5,endface2);; 11108 }; 11109 xx[0] = xaxis->GetXmin();; 11110 xx[2] = zaxis->GetBinCenter(binz);; 11111 xx[1] = yaxis->GetBinCenter(biny);; 11112 view->WCtoNDC(xx,u);; 11113 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11114 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11115 xx[0] = xaxis->GetXmax();; 11116 view->WCtoNDC(xx,u);; 11117 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11118 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11119 gVirtualX->DrawPolyLine(2,line1);; 11120 if (nbins>1) {; 11121 xx[0] = xaxis->GetXmin();; 11122 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11123 xx[1] = yaxis->GetBinCenter(biny);; 11124 view->WCtoNDC(xx,u);; 11125 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11126 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11127 xx[0] = xaxis->GetXmax();; 11128 view->WCtoNDC(xx,u);; 11129 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11130 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11131 ; 11132 xx[0] = xaxis->GetXmin();; 11133 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11134 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11135 view->WCtoNDC(xx,u);; 11136 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11137 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11138 xx[0] = xaxis->GetXmax();; 11139 view->WCtoNDC(xx,u);; 11140 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11141 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:402197,ux,uxmin,402197,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"s->size() + 1);; 793 ; 794 // If we just moved the element we're inserting, be sure to update; 795 // the reference.; 796 const T *EltPtr = &Elt;; 797 if (I <= EltPtr && EltPtr < this->end()); 798 ++EltPtr;; 799 ; 800 *I = *EltPtr;; 801 return I;; 802 }; 803 ; 804 iterator insert(iterator I, size_type NumToInsert, const T &Elt); 805 {; 806 // Convert iterator to elt# to avoid invalidating iterator when we reserve(); 807 size_t InsertElt = I - this->begin();; 808 ; 809 if (I == this->end()) { // Important special case for empty vector.; 810 append(NumToInsert, Elt);; 811 return this->begin() + InsertElt;; 812 }; 813 ; 814 if (I < this->begin() || I > this->end()) {; 815 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 816 }; 817 ; 818 // Ensure there is enough space.; 819 reserve(this->size() + NumToInsert);; 820 ; 821 // Uninvalidate the iterator.; 822 I = this->begin() + InsertElt;; 823 ; 824 // If there are more elements between the insertion point and the end of the; 825 // range than there are being inserted, we can use a simple approach to; 826 // insertion. Since we already reserved space, we know that this won't; 827 // reallocate the vector.; 828 if (size_t(this->end() - I) >= NumToInsert) {; 829 T *OldEnd = this->end();; 830 append(std::move_iterator<iterator>(this->end() - NumToInsert), std::move_iterator<iterator>(this->end()));; 831 ; 832 // Copy the existing elements that get replaced.; 833 std::move_backward(I, OldEnd - NumToInsert, OldEnd);; 834 ; 835 std::fill_n(I, NumToInsert, Elt);; 836 return I;; 837 }; 838 ; 839 // Otherwise, we're inserting more elements than exist already, and we're; 840 // not inserting at the end.; 841 ; 842 // Move over the elements that we're about to overwrite.; 843 T *OldEnd = this->end();; 844 this->set_size(this->size() + NumToInsert);; 845 size_t NumOverwritten = OldEnd - I;; 846 this->uninitialized_move(I, OldEnd, this->end() - NumOverwritten);; 847 ; 848 // Replace the overwritten part.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:28916,simpl,simple,28916,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['simpl'],['simple']
Usability,"s. ;  ; file  hierarchical_scene.C;  ; file  histobrowser.C;  Demonstrates how to use EVE as a histogram browser. ;  ; file  jetcone.C;  Demonstrates usage of TEveJetCone class. ;  ; file  lineset.C;  Demonstrates usage of class TEveStraightLineSet. ;  ; file  lineset.C;  Demonstrates usage of class REveStraightLineSet. ;  ; file  MultiView.C;  Multi-view (3d, rphi, rhoz) service class using EVE Window Manager. ;  ; file  overlay_palette.C;  ; file  overlay_test.C;  Demonstrates usage of TEveBox class. ;  ; file  pack.C;  Demonstrates usage of class TGPack. ;  ; file  paramlist.C;  Demonstrates usage of simple configuration via TEveParamList class. ;  ; file  pointset.C;  Demonstrates usage of class TEvePointSet. ;  ; file  projection.C;  Demonstrates usage of automatic 2D projections - class TEveProjectionManager. ;  ; file  projection_prescale.C;  Demonstrates usage pre-scaling for automatic 2D projections. ;  ; file  pythia_display.C;  Demo showing H -> ZZ -> 4 mu generated by Pythia. ;  ; file  quadset.C;  Demonstates usage of 2D digit class TEveQuadSet. ;  ; file  run_alice_esd.C;  Complex example showing ALICE ESD track visualization. ;  ; file  run_alice_esd_split.C;  Complex example showing ALICE ESD visualization in several views. ;  ; file  selection_sigs.C;  Test signals from TEveSelection class. ;  ; file  show_extract.C;  Helper script for showing of extracted / simplified geometries. ;  ; file  SplitGLView.C;  Helper classes for the alice_esd_split.C demo. ;  ; file  text.C;  Demonstrates usage of class TEveText - 2D & 3D text in GL. ;  ; file  track.C;  Demonstrates usage of TEveTrackPRopagator with different magnetic field configurations. ;  ; file  triangleset.C;  Demonstrates usage of class TEveTriangleSet. ;  ; file  view3ds.C;  Loading and display of basic 3DS models. ;  ; file  window_manager.C;  Demonstrates usage of EVE window-manager. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__eve.html:3848,simpl,simplified,3848,doc/master/group__tutorial__eve.html,https://root.cern,https://root.cern/doc/master/group__tutorial__eve.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,"s. ;  ; void RedirectOutput (Bool_t on=kTRUE);  Control output redirection to TProof::fLogFileW. ;  ; void SetInitTime () override;  Set init time. ;  ; void SetMerging (Bool_t on=kTRUE) override;  Switch on/off merge timer. ;  ; void StopProcess (Bool_t abort, Int_t timeout=-1) override;  Stop process after this event. ;  ; void StoreFeedback (TObject *slave, TList *out) override;  Store feedback results from the specified slave. ;  ; void StoreOutput (TList *out) override;  Store received output list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const override;  ; TObject * GetOutput (const char *name) const override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:4428,Clear,ClearInput,4428,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,2,['Clear'],"['Clear', 'ClearInput']"
Usability,"s. Another particular case where volume families are used is when we want that a volume positioned inside a container to match one ore more container limits. Suppose we want to position the same box inside 2 different volumes and we want the Z size to match the one of each container:; TGeoVolume *container1 = gGeoManager->MakeBox(""C1"",imed,10,10,30);; TGeoVolume *container2 = gGeoManager->MakeBox(""C2"",imed,10,10,20);; TGeoVolume *pvol = gGeoManager->MakeBox(""PVOL"",jmed,3,3,-1);; container1->AddNode(pvol,1);; container2->AddNode(pvol,1);; Note that the third parameter of PVOL is negative, which does not make sense as half-length on Z. This is interpreted as: when positioned, create a box replacing all invalid parameters with the corresponding dimensions of the container. This is also internally handled by the **TGeoVolumeMulti** class, which does not need to be instantiated by users.; Dividing Volumes; Volumes can be divided according a pattern. The simplest division can be done along one axis that can be: X,Y,Z,Phi,Rxy or Rxyz. Let's take a simple case: we would like to divide a box in N equal slices along X coordinate, representing a new volume family. Supposing we already have created the initial box, this can be done like:; TGeoVolume *slicex = box->Divide(""SLICEX"",1,N);; N#define N; TGeoVolume::Dividevirtual TGeoVolume * Divide(const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed=0, Option_t *option="""")Division a la G3.Definition TGeoVolume.cxx:1103; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; Here SLICEX is the name of the new family representing all slices and 1 is the slicing axis. The meaning of the axis index is the following: for all volumes having shapes like box, trd1, trd2, trap, gtraorpara -1, 2, 3 mean X, Y, Z; for tube, tubs, cone, cons -1 means Rxy, 2 means phi and 3 means Z; for pcon and pgon - 2 means phi and 3 means Z; for spheres 1 means Rand 2 means ph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:45833,simpl,simplest,45833,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['simpl'],['simplest']
Usability,"s. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode==AClean ? (flipAClean() ? ADirty : AClean ) : _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). » Last changed: Mon Jul 4 15:21:16 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsArg.html:40882,clear,clearValueDirty,40882,root/html530/RooAbsArg.html,https://root.cern,https://root.cern/root/html530/RooAbsArg.html,2,['clear'],"['clearShapeDirty', 'clearValueDirty']"
Usability,"s. Exploiting the well-known properties of the derivative, one can express this derivative as the product of the local partial derivative by the weighted sum of the outputs derivatives (for a neuron) or as the product of the input value with the local partial derivative of the output neuron (for a synapse). This computation is called “back-propagation of the errors”. Six learning methods are implemented.; 5.12.3.1 Stochastic Minimization; This is the most trivial learning method. The Robbins-Monro stochastic approximation is applied to multilayer perceptrons. The weights are updated after each example according to the formula:; \[; w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t); \]; with:; \[; \Delta w_{ij}(t) = - \eta \left(; \frac{\partial e_p}{\partial w_{ij}} + \delta \right) +; \epsilon \Delta w_{ij}(t-1); \]; The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.2 Steepest Descent With Fixed Step Size (Batch Learning); It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.3 Steepest Descent Algorithm; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower Tau = higher precision = slower search. A value Tau=3 seems reasonable.; 5.12.3.4 Conjugate Gradients With the Polak-Ribiere Updating Formula; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent (estimated by using the Polak-Ribiere formula).; 5.12.3.5 Conjugate Gradients With the Fletcher-Reeves Updating Formula; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent (estimated by using the Fletch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:233130,Learn,Learning,233130,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Learn'],['Learning']
Usability,"s. Function documentation; RooNumConvolution(). RooNumConvolution(const char* name, const char* title, RooRealVar& convVar, RooAbsReal& pdf, RooAbsReal& resmodel, const RooNumConvolution* proto = 0); Constructor of convolution operator PDF. convVar : convolution variable (on which both pdf and resmodel should depend); pdf : input 'physics' pdf; resmodel : input 'resultion' pdf. output is pdf(x) (X) resmodel(x) = Int [ pdf(x') resmodel (x-x') ] dx'. RooNumConvolution(const RooNumConvolution& other, const char* name = 0); Copy constructor. void initialize() const; One-time initialization of object. ~RooNumConvolution(); Destructor. Double_t evaluate() const; Calculate convolution integral. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Intercept server redirects. Throw away cache, as figuring out redirections on the cache is an unsolvable problem. void clearConvolutionWindow(); Removes previously defined convolution window, reverting to convolution from -inf to +inf. void setConvolutionWindow(RooAbsReal& centerParam, RooAbsReal& widthParam, Double_t widthScaleFactor = 1); Restrict convolution integral to finite range [ x - C - S*W, x - C + S*W ]; where x is current value of convolution variablem, C = centerParam, W=widthParam and S = widthScaleFactor; Inputs centerParam and withParam can be function expressions (RooAbsReal, RooFormulaVar) etc. void setCallWarning(Int_t threshold = 2000); Activate warning messages if number of function calls needed for evaluation of convolution integral; exceeds given threshold. void setCallProfiling(Bool_t flag, Int_t nbinX = 40, Int_t nbinCall = 40, Int_t nCallHigh = 1000); Activate call profile if flag is set to true. A 2-D histogram is kept that stores the required number; of function calls versus the value of x, the convolution variable. All clones of RooNumConvolution objects will keep logging to the histogram of the original class; so that performa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:36993,clear,clearConvolutionWindow,36993,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,7,['clear'],['clearConvolutionWindow']
Usability,"s. In between the input and output layers are a variable number; of k hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.) ; As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. ; The learning method used by the CFMlpANN is only stochastic.; */; . Function Members (Methods); public:. virtual~MethodCFMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCFMlpANN.html:1703,learn,learning,1703,root/html602/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCFMlpANN.html,2,['learn'],['learning']
Usability,"s. In between the input and output layers are a variable number; of k hidden layers with arbitrary numbers of neurons. (While the; structure of the input and output layers is determined by the problem, the; hidden layers can be configured by the user through the option string; of the method booking.) ; As indicated in the sketch, all neuron inputs to a layer are linear; combinations of the neuron output of the previous layer. The transfer; from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be; zero (deactivated), one (linear), or non-linear. The above example uses; a sigmoid activation function. The transfer function of the output layer; is usually linear. As a consequence: an ANN without hidden layer should; give identical discrimination power as a linear discriminant analysis (Fisher).; In case of one hidden layer, the ANN computes a linear combination of; sigmoid. ; The learning method used by the CFMlpANN is only stochastic.; */; . Function Members (Methods); public:. virtual~MethodCFMlpANN(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html:1703,learn,learning,1703,root/html528/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html,4,['learn'],['learning']
Usability,"s. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; RooObjCacheManager Class ReferenceRooFit » RooFit Core. ; Implementation of a RooCacheManager<RooAbsCacheElement> that specializes in the storage of cache elements that contain RooAbsArg objects. ; Caches with RooAbsArg derived payload require special care as server redirects cache operation mode changes and constant term optimization calls may need to be forwarded to such cache payload. This cache manager takes care of all these operations by forwarding these calls to the RooAbsCacheElement interface functions, which have a sensible default implementation. ; Definition at line 29 of file RooObjCacheManager.h. Public Member Functions;  RooObjCacheManager (const RooObjCacheManager &other, RooAbsArg *owner=nullptr);  Copy constructor. ;  ;  RooObjCacheManager (RooAbsArg *owner=nullptr, Int_t maxSize=2, bool clearCacheOnServerRedirect=true, bool allowOptimize=false);  Constructor of object cache manager for given owner. ;  ;  ~RooObjCacheManager () override;  Destructor. ;  ; void findConstantNodes (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  If clearOnRedirect is false, forward constant term optimization calls to cache elements. ;  ; void insertObjectHook (RooAbsCacheElement &) override;  Set owner link on all object inserted into cache. ;  ; TClass * IsA () const override;  ; void operModeHook () override;  Intercept changes to cache operation mode and forward to cache elements. ;  ; void optimizeCacheMode (const RooArgSet &, RooArgSet &, RooLinkedList &) override;  Intercept calls to perform automatic optimization of cache mode operation. ;  ; void printCompactTreeHook (std::ostream &, const char *) override;  Add details on cache contents when printing in tree mode. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  Intercept server redirect calls. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooObjCacheManager.html:1103,clear,clearCacheOnServerRedirect,1103,doc/master/classRooObjCacheManager.html,https://root.cern,https://root.cern/doc/master/classRooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,s. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; TGenCollectionProxy::Method Class Reference. ; Small helper to execute (compiler) generated function for the access to STL or other containers. ; AuthorM.Frank ; Version1.0 ; Date10/10/2004 ; Definition at line 193 of file TGenCollectionProxy.h. Public Types; typedef void *(* Call_t) (void *);  . Public Member Functions;  Method ();  ;  Method (Call_t c);  ;  Method (const Method &m);  ; void * invoke (void *obj) const;  ; Method & operator= (const Method &m);  . Public Attributes; Call_t call;  . #include <TGenCollectionProxy.h>; Member Typedef Documentation. ◆ Call_t. typedef void *(* TGenCollectionProxy::Method::Call_t) (void *). Definition at line 195 of file TGenCollectionProxy.h. Constructor & Destructor Documentation. ◆ Method() [1/3]. TGenCollectionProxy::Method::Method ; (; ). inline . Definition at line 197 of file TGenCollectionProxy.h. ◆ Method() [2/3]. TGenCollectionProxy::Method::Method ; (; Call_t ; c). inline . Definition at line 198 of file TGenCollectionProxy.h. ◆ Method() [3/3]. TGenCollectionProxy::Method::Method ; (; const Method & ; m). inline . Definition at line 199 of file TGenCollectionProxy.h. Member Function Documentation. ◆ invoke(). void * TGenCollectionProxy::Method::invoke ; (; void * ; obj); const. inline . Definition at line 201 of file TGenCollectionProxy.h. ◆ operator=(). Method & TGenCollectionProxy::Method::operator= ; (; const Method & ; m). inline . Definition at line 200 of file TGenCollectionProxy.h. Member Data Documentation. ◆ call. Call_t TGenCollectionProxy::Method::call. Definition at line 196 of file TGenCollectionProxy.h. Libraries for TGenCollectionProxy::Method:. [legend]; The documentation for this class was generated from the following file:; io/io/inc/TGenCollectionProxy.h. TGenCollectionProxyMethod. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy_1_1Method.html:2051,Guid,Guide,2051,doc/master/classTGenCollectionProxy_1_1Method.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy_1_1Method.html,1,['Guid'],['Guide']
Usability,"s. Namespaces ; gui_ex.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; A Simple GUI Example. ; from __future__ import print_function; ; import os, sys, ROOT; ; def pygaus( x, par ):; import math; if (par[2] != 0.0):; arg1 = (x[0]-par[1])/par[2]; arg2 = (0.01*0.39894228)/par[2]; arg3 = par[0]/(1+par[3]); ; gauss = arg3*arg2*math.exp(-0.5*arg1*arg1); else:; print('returning 0'); gauss = 0.; return gauss; ; tpygaus = ROOT.TF1( 'pygaus', pygaus, -4, 4, 4 ); tpygaus.SetParameters( 1., 0., 1. ); ; def MyDraw():; btn = ROOT.BindObject( ROOT.gTQSender, ROOT.TGTextButton ); if btn.WidgetId() == 10:; global tpygaus, window; tpygaus.Draw(); ROOT.gPad.Update(); ; m = ROOT.TPyDispatcher( MyDraw ); ; ; class pMainFrame( ROOT.TGMainFrame ):; def __init__( self, parent, width, height ):; ROOT.TGMainFrame.__init__( self, parent, width, height ); ; self.Canvas = ROOT.TRootEmbeddedCanvas( 'Canvas', self, 200, 200 ); self.AddFrame( self.Canvas, ROOT.TGLayoutHints(ROOT.kLHintsExpandX | ROOT.kLHintsExpandY) ); self.ButtonsFrame = ROOT.TGHorizontalFrame( self, 200, 40 ); ; self.DrawButton = ROOT.TGTextButton( self.ButtonsFrame, '&Draw', 10 ); self.DrawButton.Connect( 'Clicked()', ""TPyDispatcher"", m, 'Dispatch()' ); self.ButtonsFrame.AddFrame( self.DrawButton, ROOT.TGLayoutHints() ); ; self.ExitButton = ROOT.TGTextButton( self.ButtonsFrame, '&Exit', 20 ); self.ExitButton.SetCommand( 'TPython::Exec( ""raise SystemExit"" )' ); self.ButtonsFrame.AddFrame( self.ExitButton, ROOT.TGLayoutHints() ); ; self.AddFrame( self.ButtonsFrame, ROOT.TGLayoutHints() ); ; self.SetWindowName( 'My first GUI' ); self.MapSubwindows(); self.Resize( self.GetDefaultSize() ); self.MapWindow(); ; def __del__(self):; self.Cleanup(); ; ; if __name__ == '__main__':; window = pMainFrame( ROOT.gClient.GetRoot(), 200, 200 ); AuthorWim Lavrijsen ; Definition in file gui_ex.py. tutorialspyrootgui_ex.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gui__ex_8py.html:2049,Guid,Guide,2049,doc/master/gui__ex_8py.html,https://root.cern,https://root.cern/doc/master/gui__ex_8py.html,1,['Guid'],['Guide']
Usability,s. See TDirectory::WriteTObject. ; [in]bufsizeBuffer size. See TDirectory::WriteTObject. This overload takes care of instances of classes that are not derived from TObject. The method redirects to TDirectory::WriteObjectAny. ; Reimplemented in TDirectoryFile.; Definition at line 1400 of file TDirectory.cxx. Friends And Related Symbol Documentation. ◆ ROOT::Internal::TDirectoryAtomicAdapter. friend struct ROOT::Internal::TDirectoryAtomicAdapter. friend . Definition at line 169 of file TDirectory.h. ◆ TContext. friend class TContext. friend . Definition at line 168 of file TDirectory.h. Member Data Documentation. ◆ fContext. TContext* TDirectory::fContext {nullptr}. protected . Buffer for GetPath() function. ; Definition at line 145 of file TDirectory.h. ◆ fContextPeg. std::atomic<size_t> TDirectory::fContextPeg {0}. protected . thread local gDirectory pointing to this object. ; Definition at line 153 of file TDirectory.h. ◆ fgAddDirectory. Bool_t TDirectory::fgAddDirectory = kTRUE. staticprotected . MSVC doesn't support = ATOMIC_FLAG_INIT;. ; Definition at line 156 of file TDirectory.h. ◆ fGDirectories. std::vector<SharedGDirectory_t> TDirectory::fGDirectories. protected . Definition at line 151 of file TDirectory.h. ◆ fList. TList* TDirectory::fList {nullptr}. protected . Definition at line 142 of file TDirectory.h. ◆ fMother. TObject* TDirectory::fMother {nullptr}. protected . Definition at line 141 of file TDirectory.h. ◆ fPathBuffer. TString TDirectory::fPathBuffer. mutableprotected . Definition at line 144 of file TDirectory.h. ◆ fSpinLock. std::atomic_flag TDirectory::fSpinLock. mutableprotected . Counter delaying the TDirectory destructor from finishing. ; Definition at line 154 of file TDirectory.h. ◆ fUUID. TUUID TDirectory::fUUID. protected . Definition at line 143 of file TDirectory.h. core/base/inc/TDirectory.h; core/base/src/TDirectory.cxx. TDirectory. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:11:03 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:58231,Guid,Guide,58231,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,1,['Guid'],['Guide']
Usability,"s.; REPLAYING Implemented in TRecorderReplaying class.; PAUSED Implemented in TRecorderPause class. Pause of replaying. Every command for TRecorder is just passed to TRecordeState object. Depending on the current state of recorder, this command is passed to some of the above mentioned classes and if valid, handled there.; Switching between states is not possible from outside. States are switched directly by state objects via:; ChangeState(TRecorderState* newstate, Bool_t deletePreviousState);; When recorder is switched to a new state, the old state object is typically deleted. The only exception is switching from REPLAYING state to PAUSED state. The previous state (REPLAYING) is not deleted in order to be used again after TRecorder::Resume call. STATE TRANSITIONS:. INACTIVE -> RECORDING via TRecorder::Start (Starts recording); RECORDING -> INACTIVE via TRecorder::Stop (Stops recording); INACTIVE -> REPLAYING via TRecorder::Replay (Starts replaying); REPLAYING -> INACTIVE via TRecorder::ReplayStop (Stops replaying); REPLAYING -> PAUSED via TRecorder::Pause (Pause replaying); PAUSED -> REPLAYING via TRecorder::Resume (Resumes replaying); PAUSED -> INACTIVE via TRecorder::ReplayStop (Stops paused replaying) . Definition at line 265 of file TRecorder.h. Public Types; enum  ERecorderState { kInactive; , kRecording; , kPaused; , kReplaying; };  ; enum  EReplayModes { kRealtime; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:2025,PAUSE,PAUSED,2025,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,8,"['PAUSE', 'Pause', 'Resume', 'pause']","['PAUSED', 'Pause', 'Resume', 'Resumes', 'paused']"
Usability,"s.; Terminate(): called at the end of the loop on the tree,; a convenient place to draw/fit your histograms. If the Tree (Chain) has an associated EventList, the loop is on the nentries; of the EventList, starting at firstentry, otherwise the loop is on the; specified Tree entries. Long64_t Project(const char* hname, const char* varexp, const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Make a projection of a tree using selections. Depending on the value of varexp (described in Draw) a 1-D, 2-D, etc.,; projection of the tree will be filled in histogram hname.; Note that the dimension of hname must match with the dimension of varexp. TSQLResult* Query(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Loop over entries and return a TSQLResult object containing entries following selection. Long64_t ReadFile(const char* filename, const char* branchDescriptor = """"); Create or simply read branches from filename. if branchDescriptor = """" (default), it is assumed that the Tree descriptor; is given in the first line of the file with a syntax like; A/D:Table[2]/F:Ntracks/I:astring/C; otherwise branchDescriptor must be specified with the above syntax.; -If the type of the first variable is not specified, it is assumed to be ""/F""; -if the type of any other variable is not specified, the type of the previous; variable is assumed. eg; x:y:z (all variables are assumed of type ""F""; x/D:y:z (all variables are of type ""D""; x:y/D:z (x is type ""F"", y and z of type ""D""; -If the type is a string of characters. This will read; subsequent characters until a whitespace is found (whitespace; characters are considered to be blank, newline and tab). Lines in the input file starting with ""#"" are ignored.; This function will read and ignore any whitespace characters; (this includes blank spaces and the newline and tab characters). A TBranch object is creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:110971,simpl,simply,110971,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['simpl'],['simply']
Usability,"s.cxx:356; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraph2D::fNpointsInt_t fNpointsNumber of points in the data set.Definition TGraph2D.h:45; TGraph2D::fZDouble_t * fZ[fNpoints]Definition TGraph2D.h:52; TGraph2D::fHistogramTH2D * fHistogram!2D histogram of z values linearly interpolated on the trianglesDefinition TGraph2D.h:58; TGraph2D::fDelaunayTObject * fDelaunay! Pointer to Delaunay interpolator objectDefinition TGraph2D.h:59; TGraph2D::GetNInt_t GetN() constDefinition TGraph2D.h:122; TGraph2D::operator=TGraph2D & operator=(const TGraph2D &)Graph2D operator ""="".Definition TGraph2D.cxx:557; TGraph2D::fXDouble_t * fX[fNpoints]Definition TGraph2D.h:50; TGraph2D::fYDouble_t * fY[fNpoints] Data set to be plottedDefinition TGraph2D.h:51; TGraph2D::Scalevirtual void Scale(Double_t c1=1., Option_t *option=""z"")Multiply the values of a TGraph2D by a constant c1.Definition TGraph2D.cxx:1506; TGraph2D::AddPointvirtual void AddPoint(Double_t x, Double_t y, Double_t z)Append a new point to the graph.Definition TGraph2D.h:93; TGraph2D::fSizeInt_t fSize!Real size of fX, fY and fZDefinition TGraph2D.h:49; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; exDouble_t ex[n]Definition legend1.C:17; v@ vDefinition rootcling_impl.cxx:3699. histhistsrcTGraph2DErrors.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html:19826,Guid,Guide,19826,doc/master/TGraph2DErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html,1,['Guid'],['Guide']
Usability,"s.h. ◆ SetMissed() [2/2]. void TPerfStats::SetMissed ; (; TBranch * ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 141 of file TPerfStats.h. ◆ SetNumEvents(). void TPerfStats::SetNumEvents ; (; Long64_t ; num). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 133 of file TPerfStats.h. ◆ Setup(). void TPerfStats::Setup ; (; TList * ; input). static . Setup the PROOF input list with requested statistics and tracing options. ; Definition at line 727 of file TPerfStats.cxx. ◆ SetUsed() [1/2]. void TPerfStats::SetUsed ; (; size_t ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 144 of file TPerfStats.h. ◆ SetUsed() [2/2]. void TPerfStats::SetUsed ; (; TBranch * ; , . size_t ;  . ). inlineoverridevirtual . Implements TVirtualPerfStats.; Definition at line 143 of file TPerfStats.h. ◆ SimpleEvent(). void TPerfStats::SimpleEvent ; (; EEventType ; type). overridevirtual . Simple event. ; Implements TVirtualPerfStats.; Definition at line 387 of file TPerfStats.cxx. ◆ Start(). void TPerfStats::Start ; (; TList * ; input, . TList * ; output . ). static . Initialize PROOF statistics run. ; Definition at line 744 of file TPerfStats.cxx. ◆ Stop(). void TPerfStats::Stop ; (; ). static . Terminate the PROOF statistics run. ; Definition at line 764 of file TPerfStats.cxx. ◆ Streamer(). void TPerfStats::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPerfStats::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file TPerfStats.h. ◆ UnzipEvent(). void TPerfStats::UnzipEvent ; (; TObject * ; tree, . Long64_t ; pos, . Double_t ; start, . Int_t ; complen, . Int_t ; objlen . ). overridevirtual . Record TTree file unzip event. ; start is the TimeStamp before unzip pos is where in the file the compressed buffer came from complen is th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPerfStats.html:20874,Simpl,Simple,20874,doc/master/classTPerfStats.html,https://root.cern,https://root.cern/doc/master/classTPerfStats.html,1,['Simpl'],['Simple']
Usability,"s.h:113; ROOT::GetClassTClass * GetClass(T *)Definition TClass.h:663; ROOT::CreateClassTClass * CreateClass(const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il)Global function called by a class' static Dictionary() method (see the ClassDef macro).Definition TClass.cxx:5869; ROOT::DelFunc_tvoid(* DelFunc_t)(void *)Definition Rtypes.h:111; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28; ROOT::NewArrFunc_tvoid *(* NewArrFunc_t)(Long_t size, void *arena)Definition Rtypes.h:110; ROOT::EFunctionMatchModeEFunctionMatchModeDefinition TDictionary.h:161; ROOT::kConversionMatch@ kConversionMatchDefinition TDictionary.h:163; ROOT::ResetClassVersionvoid ResetClassVersion(TClass *, const char *, Short_t)Global function to update the version number.Definition TClassTable.cxx:951; ROOT::DelArrFunc_tvoid(* DelArrFunc_t)(void *)Definition Rtypes.h:112; ROOT::NewFunc_tvoid *(* NewFunc_t)(void *)Definition Rtypes.h:109; ROOT::MergeFunc_tLong64_t(* MergeFunc_t)(void *, TCollection *, TFileMergeInfo *)Definition Rtypes.h:115; whatstatic const char * whatDefinition stlLoader.cc:5; ROOT::Internal::TClassGetClassHelperDefinition TClass.h:630; ROOT::Internal::TClassGetClassHelper::GetClassstatic TClass * GetClass(Bool_t load, Bool_t silent)Definition TClass.h:631; TClass::ObjectPtrDefinition TClass.h:140; TClass::ObjectPtr::fPtrvoid * fPtrDefinition TClass.h:141; TClass::ObjectPtr::GetAllocatorTVirtualStreamerInfo * GetAllocator() constDefinition TClass.h:149; TClass::ObjectPtr::GetPtrvoid * GetPtr() constDefinition TClass.h:147; TClass::ObjectPtr::fAllocatorTVirtualStreamerInfo * fAllocatorDefinition TClass.h:143; TClass::ObjectPtr::ObjectPtrObjectPtr(void *ptr=nullptr, TVirtualStreamerInfo *allocator=nullptr)Definition TClass.h:145; Drawth1 Draw(); lTLine lDefinition textangle.C:4. coremetaincTClass.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:86505,Guid,Guide,86505,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['Guid'],['Guide']
Usability,"s1 = 1, . Int_t ; axis2 = 2 . ); const. virtual . Return covariance between axis1 and axis2. ; Definition at line 1163 of file TH2.cxx. ◆ GetRandom2(). void TH2::GetRandom2 ; (; Double_t & ; x, . Double_t & ; y, . TRandom * ; rng = nullptr . ). virtual . Return 2 random numbers along axis x and y distributed according to the cell-contents of this 2-D histogram. ; Return a NaN if the histogram has a bin with negative content; Parameters. [out]xreference to random generated x value ; [out]yreference to random generated y value ; [in]rng(optional) Random number generator pointer used (default is gRandom) . Definition at line 1200 of file TH2.cxx. ◆ GetStats(). void TH2::GetStats ; (; Double_t * ; stats); const. overridevirtual . Fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; If no axis-subranges are specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If sub-ranges are specified, the function recomputes these quantities from the bin contents in the current axis ranges.; Note that the mean value/StdDev is computed using the bins in the currently defined ranges (see TAxis::SetRange). By default the ranges include all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram. ; Reimplemented from TH1.; Reimplemented in TH2Poly, TProfile2D, and TProfile2Poly.; Definition at line 1254 of file TH2.cxx. ◆ Integral() [1/5]. Double_t TH2::Integral ; (; Int_t ; firstxbin, . Int_t ; lastxbin, . Int_t ; firstybin, . Int_t ; lastybin, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [firstxbin,lastxbin],[firstybin,l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:86155,simpl,simply,86155,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['simpl'],['simply']
Usability,"s2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample showing how to customize a context menu for a class ;  drag_and_drop.CThis tutorial illustrates how to use drag and drop within ROOT ;  exec3.CExample of using signal/slot in TCanvas/TPad to get feedback about processed events ;  exec_macro.CThis utility macro executes the macro ""macro"" given as first argument and save a capture in a png file ;  games.CThis macro runs three ""games"" that eac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:117634,Pause,Pause,117634,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['Pause'],['Pause']
Usability,s::HypoTestInverter. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::MaxLikelihoodEstimateTestStat. RooStats::MetropolisHastings. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::NumEventsTestStat. RooStats::PdfProposal. RooStats::PointSetInterval. RooStats::ProfileLikelihoodCalculator. RooStats::ProfileLikelihoodTestStat. RooStats::ProposalFunction←. RooStats::PdfProposal. RooStats::UniformProposal. RooStats::ProposalHelper. RooStats::RatioOfProfiledLikelihoodsTestStat. RooStats::SPlot. RooStats::SamplingDistPlot←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStats::SamplingSummary. RooStats::SamplingSummaryLookup. RooStats::SimpleInterval←. RooStats::HypoTestInverterResult. RooStats::SimpleLikelihoodRatioTestStat. RooStats::ToyMCSampler. RooStats::ToyMCSamplerOld. RooStats::ToyMCStudy. RooStats::UniformProposal. RooStats::UpperLimitMCSModule. RooStepFunction. RooStringVar. RooStudyManager. RooStudyPackage. RooSuperCategory. RooTFnBinding. RooTFnPdfBinding. RooTFoamBinding. RooTObjWrap. RooTable←. Roo1DTable. RooThreshEntry. RooThresholdCategory. RooTreeData. RooTreeDataStore. RooTruthModel. RooUnblindCPAsymVar. RooUnblindOffset. RooUnblindPrecision. RooUnblindUniform. RooUniform. RooUniformBinning. RooVoigtian. RooWorkspace. RooWorkspace::CodeRepo. RooWorkspace::WSDir. RooXYChi2Var. TASImage. TASImagePlugin←. TASPluginGS. TASPaletteEditor. TASPluginGS. TAdvancedGraphicsDialog. TApplication←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TQApplication. TRint. TApplicationRemote. TApplicationServer. TArc. TArchiveFile←. TZIPFile. TArchiveMember←. TZIPMember. TArrayC←. TH1C. TH2C. TH3C; ←. TGLTH3Co,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassHierarchy.html:25241,Simpl,SimpleLikelihoodRatioTestStat,25241,root/html528/ClassHierarchy.html,https://root.cern,https://root.cern/root/html528/ClassHierarchy.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,s::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::MaxLikelihoodEstimateTestStat. RooStats::MetropolisHastings. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::NumEventsTestStat. RooStats::PdfProposal. RooStats::PointSetInterval. RooStats::ProfileLikelihoodCalculator. RooStats::ProfileLikelihoodTestStat. RooStats::ProposalFunction←. RooStats::PdfProposal. RooStats::SequentialProposal. RooStats::UniformProposal. RooStats::ProposalHelper. RooStats::RatioOfProfiledLikelihoodsTestStat. RooStats::SPlot. RooStats::SamplingDistPlot←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStats::SamplingSummary. RooStats::SamplingSummaryLookup. RooStats::SequentialProposal. RooStats::SimpleInterval←. RooStats::HypoTestInverterResult. RooStats::SimpleLikelihoodRatioTestStat. RooStats::ToyMCSampler. RooStats::ToyMCSamplerOld. RooStats::ToyMCStudy. RooStats::UniformProposal. RooStats::UpperLimitMCSModule. RooStepFunction. RooStringVar. RooStudyManager. RooStudyPackage. RooSuperCategory. RooTFnBinding. RooTFnPdfBinding. RooTFoamBinding. RooTObjWrap. RooTable←. Roo1DTable. RooThreshEntry. RooThresholdCategory. RooTreeData. RooTreeDataStore. RooTruthModel. RooUnblindCPAsymVar. RooUnblindOffset. RooUnblindPrecision. RooUnblindUniform. RooUniform. RooUniformBinning. RooVectorDataStore. RooVectorDataStore::RealFullVector. RooVoigtian. RooWorkspace. RooWorkspace::CodeRepo. RooWorkspace::WSDir. RooXYChi2Var. TAS3File. TASImage. TASImagePlugin←. TASPluginGS. TASPaletteEditor. TASPluginGS. TAdvancedGraphicsDialog. TApplication←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TQApplication. TRint. TAppl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassHierarchy.html:25950,Simpl,SimpleInterval,25950,root/html532/ClassHierarchy.html,https://root.cern,https://root.cern/root/html532/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,s::HypoTestInverterOriginal. RooStats::HypoTestInverterPlot. RooStats::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::MaxLikelihoodEstimateTestStat. RooStats::MetropolisHastings. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::NumEventsTestStat. RooStats::PdfProposal. RooStats::PointSetInterval. RooStats::ProfileLikelihoodCalculator. RooStats::ProfileLikelihoodTestStat. RooStats::ProposalFunction←. RooStats::PdfProposal. RooStats::SequentialProposal. RooStats::UniformProposal. RooStats::ProposalHelper. RooStats::RatioOfProfiledLikelihoodsTestStat. RooStats::SPlot. RooStats::SamplingDistPlot←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStats::SamplingSummary. RooStats::SamplingSummaryLookup. RooStats::SequentialProposal. RooStats::SimpleInterval←. RooStats::HypoTestInverterResult. RooStats::SimpleLikelihoodRatioTestStat. RooStats::ToyMCSampler. RooStats::ToyMCSamplerOld. RooStats::ToyMCStudy. RooStats::UniformProposal. RooStats::UpperLimitMCSModule. RooStepFunction. RooStringVar. RooStudyManager. RooStudyPackage. RooSuperCategory. RooTFnBinding. RooTFnPdfBinding. RooTFoamBinding. RooTObjWrap. RooTable←. Roo1DTable. RooThreshEntry. RooThresholdCategory. RooTreeData. RooTreeDataStore. RooTruthModel. RooUnblindCPAsymVar. RooUnblindOffset. RooUnblindPrecision. RooUnblindUniform. RooUniform. RooUniformBinning. RooVoigtian. RooWorkspace. RooWorkspace::CodeRepo. RooWorkspace::WSDir. RooXYChi2Var. TASImage. TASImagePlugin←. TASPluginGS. TASPaletteEditor. TASPluginGS. TAdvancedGraphicsDialog. TApplication←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TRint. TApplicationRemote. TApplicationServer. TArc. TArchiveFile←. TZIPFile. TArchiveMember←,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassHierarchy.html:25515,Simpl,SimpleInterval,25515,root/html530/ClassHierarchy.html,https://root.cern,https://root.cern/root/html530/ClassHierarchy.html,1,['Simpl'],['SimpleInterval']
Usability,s::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::MaxLikelihoodEstimateTestStat. RooStats::MetropolisHastings. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::NumEventsTestStat. RooStats::PdfProposal. RooStats::PointSetInterval. RooStats::ProfileLikelihoodCalculator. RooStats::ProfileLikelihoodTestStat. RooStats::ProposalFunction←. RooStats::PdfProposal. RooStats::SequentialProposal. RooStats::UniformProposal. RooStats::ProposalHelper. RooStats::RatioOfProfiledLikelihoodsTestStat. RooStats::SPlot. RooStats::SamplingDistPlot←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStats::SamplingSummary. RooStats::SamplingSummaryLookup. RooStats::SequentialProposal. RooStats::SimpleInterval←. RooStats::HypoTestInverterResult. RooStats::SimpleLikelihoodRatioTestStat. RooStats::ToyMCSampler. RooStats::ToyMCSamplerOld. RooStats::ToyMCStudy. RooStats::UniformProposal. RooStats::UpperLimitMCSModule. RooStepFunction. RooStringVar. RooStudyManager. RooStudyPackage. RooSuperCategory. RooTFnBinding. RooTFnPdfBinding. RooTFoamBinding. RooTObjWrap. RooTable←. Roo1DTable. RooThreshEntry. RooThresholdCategory. RooTreeData. RooTreeDataStore. RooTruthModel. RooUnblindCPAsymVar. RooUnblindOffset. RooUnblindPrecision. RooUnblindUniform. RooUniform. RooUniformBinning. RooVectorDataStore. RooVectorDataStore::RealFullVector. RooVoigtian. RooWorkspace. RooWorkspace::CodeRepo. RooWorkspace::WSDir. RooXYChi2Var. TAS3File. TASImage. TASImagePlugin←. TASPluginGS. TASPaletteEditor. TASPluginGS. TAdvancedGraphicsDialog. TApplication←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TQApplication. TRint. TApplicationRemote. TApplicationServer. TArc. TArchiveFile←. TZIPFile. TA,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassHierarchy.html:26011,Simpl,SimpleLikelihoodRatioTestStat,26011,root/html532/ClassHierarchy.html,https://root.cern,https://root.cern/root/html532/ClassHierarchy.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,s::HypoTestInverterResult. RooStats::HypoTestPlot. RooStats::HypoTestResult←. RooStats::HybridResult. RooStats::LikelihoodInterval. RooStats::LikelihoodIntervalPlot. RooStats::MCMCCalculator. RooStats::MCMCInterval. RooStats::MCMCIntervalPlot. RooStats::MarkovChain. RooStats::MaxLikelihoodEstimateTestStat. RooStats::MetropolisHastings. RooStats::ModelConfig. RooStats::NeymanConstruction. RooStats::NumEventsTestStat. RooStats::PdfProposal. RooStats::PointSetInterval. RooStats::ProfileLikelihoodCalculator. RooStats::ProfileLikelihoodTestStat. RooStats::ProposalFunction←. RooStats::PdfProposal. RooStats::SequentialProposal. RooStats::UniformProposal. RooStats::ProposalHelper. RooStats::RatioOfProfiledLikelihoodsTestStat. RooStats::SPlot. RooStats::SamplingDistPlot←. RooStats::HypoTestPlot. RooStats::SamplingDistribution. RooStats::SamplingSummary. RooStats::SamplingSummaryLookup. RooStats::SequentialProposal. RooStats::SimpleInterval←. RooStats::HypoTestInverterResult. RooStats::SimpleLikelihoodRatioTestStat. RooStats::ToyMCSampler. RooStats::ToyMCSamplerOld. RooStats::ToyMCStudy. RooStats::UniformProposal. RooStats::UpperLimitMCSModule. RooStepFunction. RooStringVar. RooStudyManager. RooStudyPackage. RooSuperCategory. RooTFnBinding. RooTFnPdfBinding. RooTFoamBinding. RooTObjWrap. RooTable←. Roo1DTable. RooThreshEntry. RooThresholdCategory. RooTreeData. RooTreeDataStore. RooTruthModel. RooUnblindCPAsymVar. RooUnblindOffset. RooUnblindPrecision. RooUnblindUniform. RooUniform. RooUniformBinning. RooVoigtian. RooWorkspace. RooWorkspace::CodeRepo. RooWorkspace::WSDir. RooXYChi2Var. TASImage. TASImagePlugin←. TASPluginGS. TASPaletteEditor. TASPluginGS. TAdvancedGraphicsDialog. TApplication←. PyROOT::TPyROOTApplication. TApplicationRemote. TApplicationServer. TGApplication. TProofServ; ←. TProofServLite. TXProofServ. TRint. TApplicationRemote. TApplicationServer. TArc. TArchiveFile←. TZIPFile. TArchiveMember←. TZIPMember. TArrayC←. TH1C. TH2C. TH3C; ←. TGLTH3Composition. TArr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassHierarchy.html:25576,Simpl,SimpleLikelihoodRatioTestStat,25576,root/html530/ClassHierarchy.html,https://root.cern,https://root.cern/root/html530/ClassHierarchy.html,1,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,"s::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 49 of file RooBifurGauss.h. ◆ Streamer(). void RooBifurGauss::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooBifurGauss::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooBifurGauss.h. ◆ translate(). void RooBifurGauss::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 65 of file RooBifurGauss.cxx. Member Data Documentation. ◆ mean. RooRealProxy RooBifurGauss::mean. protected . Definition at line 40 of file RooBifurGauss.h. ◆ sigmaL. RooRealProxy RooBifurGauss::sigmaL. protected . Definition at line 41 of file RooBifurGauss.h. ◆ sigmaR. RooRealProxy RooBifurGauss::sigmaR. protected . Definition at line 42 of file RooBifurGauss.h. ◆ x. RooRealProxy RooBifurGauss::x. protected . Definition at line 39 of file RooBifurGauss.h. Libraries for RooBifurGauss:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooBifurGauss.h; roofit/roofit/src/RooBifurGauss.cxx. RooBifurGauss. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:79152,Guid,Guide,79152,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['Guid'],['Guide']
Usability,"s::SamplingDistribution*GetBackgroundTestStatDist(int index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); doubleGetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; RooStats::SamplingDistribution*GetExpectedPValueDist(int index) const; doubleGetExpectedUpperLimit(double nsig = 0, const char* opt = """") const; virtual const char*TObject::GetIconName() const; RooStats::HypoTestInverterResult::InterpolOption_tGetInterpolationOption() const; RooStats::HypoTestResult*GetLastResult() const; doubleGetLastXValue() const; doubleGetLastYError() const; doubleGetLastYValue() const; RooStats::SamplingDistribution*GetLowerLimitDistribution() const; virtual const char*TNamed::GetName() const; RooStats::SamplingDistribution*GetNullTestStatDist(int index) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*RooStats::SimpleInterval::GetParameters() const; RooStats::HypoTestResult*GetResult(int index) const; RooStats::SamplingDistribution*GetSignalAndBackgroundTestStatDist(int index) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; RooStats::SamplingDistribution*GetUpperLimitDistribution() const; doubleGetXValue(int index) const; doubleGetYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const RooStats::HypoTestInverterResult& other, const char* name); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::Inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:3488,Simpl,SimpleInterval,3488,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"s::SamplingDistribution*GetBackgroundTestStatDist(int index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); doubleGetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; RooStats::SamplingDistribution*GetExpectedPValueDist(int index) const; doubleGetExpectedUpperLimit(double nsig = 0, const char* opt = """") const; virtual const char*TObject::GetIconName() const; RooStats::HypoTestInverterResult::InterpolOption_tGetInterpolationOption() const; RooStats::HypoTestResult*GetLastResult() const; doubleGetLastXValue() const; doubleGetLastYError() const; doubleGetLastYValue() const; RooStats::SamplingDistribution*GetLowerLimitDistribution() const; virtual const char*TNamed::GetName() const; RooStats::SamplingDistribution*GetNullTestStatDist(int index) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*RooStats::SimpleInterval::GetParameters() const; RooStats::HypoTestResult*GetResult(int index) const; RooStats::SamplingDistribution*GetSignalAndBackgroundTestStatDist(int index) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; RooStats::SamplingDistribution*GetUpperLimitDistribution() const; doubleGetXValue(int index) const; doubleGetYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const RooStats::HypoTestInverterResult&); RooStats::HypoTestInverterResultHypoTestInverterResult(const RooStats::HypoTestInverterResult& other, const char* name); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:3661,Simpl,SimpleInterval,3661,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['Simpl'],['SimpleInterval']
Usability,"s::SamplingDistribution*GetBackgroundTestStatDist(int index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); doubleGetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; RooStats::SamplingDistribution*GetExpectedPValueDist(int index) const; doubleGetExpectedUpperLimit(double nsig = 0, const char* opt = """") const; virtual const char*TObject::GetIconName() const; RooStats::HypoTestInverterResult::InterpolOption_tGetInterpolationOption() const; RooStats::HypoTestResult*GetLastResult() const; doubleGetLastXValue() const; doubleGetLastYError() const; doubleGetLastYValue() const; RooStats::SamplingDistribution*GetLowerLimitDistribution() const; virtual const char*TNamed::GetName() const; RooStats::SamplingDistribution*GetNullTestStatDist(int index) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*RooStats::SimpleInterval::GetParameters() const; RooStats::HypoTestResult*GetResult(int index) const; RooStats::SamplingDistribution*GetSignalAndBackgroundTestStatDist(int index) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; RooStats::SamplingDistribution*GetUpperLimitDistribution() const; doubleGetXValue(int index) const; doubleGetYError(int index) const; doubleGetYValue(int index) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name = 0); RooStats::HypoTestInverterResultHypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:3465,Simpl,SimpleInterval,3465,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"s::TActionSequence& sequence, void* object); virtual Int_tApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tCheckObject(const TObject* obj); virtual Bool_tCheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBufferFile.html:1810,Clear,Clear,1810,root/html532/TBufferFile.html,https://root.cern,https://root.cern/root/html532/TBufferFile.html,4,['Clear'],['Clear']
Usability,s::TFileInfo::fMBRateMin. Definition at line 177 of file TProofPerfAnalysis.cxx. ◆ fMBRateP. TGraph* TProofPerfAnalysis::TFileInfo::fMBRateP. Definition at line 182 of file TProofPerfAnalysis.cxx. ◆ fMBRatePRemote. TGraph* TProofPerfAnalysis::TFileInfo::fMBRatePRemote. Definition at line 183 of file TProofPerfAnalysis.cxx. ◆ fPackets. Int_t TProofPerfAnalysis::TFileInfo::fPackets. Definition at line 161 of file TProofPerfAnalysis.cxx. ◆ fPackList. TList TProofPerfAnalysis::TFileInfo::fPackList. Definition at line 164 of file TProofPerfAnalysis.cxx. ◆ fRateP. TGraph* TProofPerfAnalysis::TFileInfo::fRateP. Definition at line 180 of file TProofPerfAnalysis.cxx. ◆ fRatePRemote. TGraph* TProofPerfAnalysis::TFileInfo::fRatePRemote. Definition at line 181 of file TProofPerfAnalysis.cxx. ◆ fRPackets. Int_t TProofPerfAnalysis::TFileInfo::fRPackets. Definition at line 162 of file TProofPerfAnalysis.cxx. ◆ fRWrkList. TList TProofPerfAnalysis::TFileInfo::fRWrkList. Definition at line 166 of file TProofPerfAnalysis.cxx. ◆ fSizeAvg. Long64_t TProofPerfAnalysis::TFileInfo::fSizeAvg. Definition at line 171 of file TProofPerfAnalysis.cxx. ◆ fSizeMax. Long64_t TProofPerfAnalysis::TFileInfo::fSizeMax. Definition at line 172 of file TProofPerfAnalysis.cxx. ◆ fSizeMin. Long64_t TProofPerfAnalysis::TFileInfo::fSizeMin. Definition at line 173 of file TProofPerfAnalysis.cxx. ◆ fSizeP. TGraph* TProofPerfAnalysis::TFileInfo::fSizeP. Definition at line 179 of file TProofPerfAnalysis.cxx. ◆ fStart. Float_t TProofPerfAnalysis::TFileInfo::fStart. Definition at line 168 of file TProofPerfAnalysis.cxx. ◆ fStop. Float_t TProofPerfAnalysis::TFileInfo::fStop. Definition at line 169 of file TProofPerfAnalysis.cxx. ◆ fWrkList. TList TProofPerfAnalysis::TFileInfo::fWrkList. Definition at line 165 of file TProofPerfAnalysis.cxx. proof/proofbench/src/TProofPerfAnalysis.cxx. TProofPerfAnalysisTFileInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TFileInfo.html:14777,Guid,Guide,14777,doc/master/classTProofPerfAnalysis_1_1TFileInfo.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TFileInfo.html,1,['Guid'],['Guide']
Usability,"s:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GDML; » TGDMLParse. class TGDMLParse: public TObject. Function Members (Methods); public:. TGDMLParse(); TGDMLParse(const TGDMLParse&); virtual~TGDMLParse(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGeoVolume*GDMLReadFile(const char* filename = ""test.gdml""); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDMLParse.html:638,Clear,Clear,638,root/html528/TGDMLParse.html,https://root.cern,https://root.cern/root/html528/TGDMLParse.html,4,['Clear'],['Clear']
Usability,"s:; git push --all. Some more advanced operations. Important tip: if you're going to do a git operation the outcome of which is even remotely uncertain to be the desired one: make a copy of your repository:; mkdir -p <path-to-safe-dir>; tar -cf - . | tar -xC <path-to-safe-dir>. Disk space is cheap and rm -rf is easy. Note that you must copy the entire repository, since all the important information is in the .git directory tree at the top level. Stashing; This is a good way quickly to get a clean tree if you want to merge or rebase (see below) to import changes from a branch without having to commit your current work. Save uncommitted changes to the current working area to the stash (not a commit operation):; git stash. Apply previously-saved stash:; git stash pop. (pops off the changes and applies them to the current working area) or; git stash apply. which applies the changes but retains them on the stack.; Examine the current state of the stash:; git stash list. Clear the entire stash:; git stash clear. Rebasing; Rebasing is changing history, if you think that git stores history. As mentioned above, it doesn't: it saves objects with parent, child and other (eg date, author, etc) information. In a truly distributed environment, the actual history will be different for every repository depending exactly how and when changes were fetched, merged or pushed.; Rebasing is a good way to do a couple of things:. ""Squash"" related commits in your local repository prior to a push (eg, ""Implement feature X,"" ""Tests for feature X"" and, ""Fix bugs found while testing feature X"").; Simplify merging branches and keeping up-to-date with remote changes during long periods between pushes. Important tip: do not attempt to rebase anything that has already been pushed to a remote repository. Your next push will almost certainly fail (and quite right too). Squashing related commits:. Squash some of the last few commits in your current branch:; git rebase -i HEAD~5. Your configured editor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:11023,Clear,Clear,11023,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"s; 365 //; 366 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform spectator variables"" << Endl;; 367 for (formIt = fSpectatorFormulas.begin(), formItEnd = fSpectatorFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 368 fSpectatorFormulas.clear();; 369 for (UInt_t i=0; i<dsi.GetNSpectators(); i++) {; 370 ttf = new TTreeFormula( TString::Format( ""Formula%s"", dsi.GetSpectatorInfo(i).GetInternalName().Data() ),; 371 dsi.GetSpectatorInfo(i).GetExpression().Data(), tr );; 372 CheckTTreeFormula( ttf, dsi.GetSpectatorInfo(i).GetExpression(), hasDollar );; 373 fSpectatorFormulas.push_back( ttf );; 374 }; 375 ; 376 //; 377 // the cuts (one per class, if non-existent: formula pointer = 0); 378 //; 379 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform cuts"" << Endl;; 380 for (formIt = fCutFormulas.begin(), formItEnd = fCutFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 381 fCutFormulas.clear();; 382 for (UInt_t clIdx=0; clIdx<dsi.GetNClasses(); clIdx++) {; 383 const TCut& tmpCut = dsi.GetClassInfo(clIdx)->GetCut();; 384 const TString tmpCutExp(tmpCut.GetTitle());; 385 ttf = 0;; 386 if (tmpCutExp!="""") {; 387 ttf = new TTreeFormula( Form(""CutClass%i"",clIdx), tmpCutExp, tr );; 388 Bool_t worked = CheckTTreeFormula( ttf, tmpCutExp, hasDollar );; 389 if( !worked ){; 390 Log() << kWARNING << ""Please check class \"""" << dsi.GetClassInfo(clIdx)->GetName(); 391 << ""\"" cut \"""" << dsi.GetClassInfo(clIdx)->GetCut() << Endl;; 392 }; 393 }; 394 fCutFormulas.push_back( ttf );; 395 }; 396 ; 397 //; 398 // the weights (one per class, if non-existent: formula pointer = 0); 399 //; 400 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform weights"" << Endl;; 401 for (formIt = fWeightFormula.begin(), formItEnd = fWeightFormula.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 402 fWeightFormula.clear();; 403 for (UInt_t clIdx=0; clIdx<dsi.GetNClasses(); clIdx++) {; 404 const TStr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:15606,clear,clear,15606,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['clear'],['clear']
Usability,"s; Includes; Libraries. Function documentation; TLeafL(); Default constructor for LeafI*-*-*-*-*-*-*-*-; *-* ============================. TLeafL(TBranch* parent, const char* name, const char* type); Create a LeafL*-*-; *-* ==============; -. ~TLeafL(); Default destructor for a LeafL*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ======================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* =========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. LongDouble_t GetValueLongDouble(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a long integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Long64_t GetValueLong64(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafL.html:8875,simpl,simple,8875,root/html534/TLeafL.html,https://root.cern,https://root.cern/root/html534/TLeafL.html,1,['simpl'],['simple']
Usability,"s; Includes; Libraries. Function documentation; TLeafL(); Default constructor for LeafI*-*-*-*-*-*-*-*-; *-* ============================. TLeafL(TBranch* parent, const char* name, const char* type); Create a LeafL*-*-; *-* ==============; -. ~TLeafL(); Default destructor for a LeafL*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ======================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* =========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. LongDouble_t GetValueLongDouble(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a long integer from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Long64_t GetValueLong64(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafL.html:9367,simpl,simple,9367,root/html602/TLeafL.html,https://root.cern,https://root.cern/root/html602/TLeafL.html,2,['simpl'],['simple']
Usability,"s; Int_tfColorAlgapplies only for rainbowed display modes (rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm, cmy modulo color component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo color component, it does not apply for simple display modes algorithm group; Int_tfContWidthwidth between contours, applies only for contours display mode; Int_tfDisplayModespectrum display mode (points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles); Double_tfDxspline; Double_tfDyspline; Short_t*fEnvelope!; Short_t*fEnvelopeContour!; Double_tfGbezx; Double_tfGbezy; TH2*fH2pointer to 2D histogram TH2; Double_tfKx; Double_tfKy; Double_tfLHweightweight between shading according to fictive light source and according to channels counts, applies only for kModeGroupLightHeight modes group; Int_tfLevels# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfLine; Int_tfMaximumXScreenResolution!buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring colo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:11074,simpl,simple,11074,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['simpl'],['simple']
Usability,"s; SetFillColorAlpha(), SetLineColorAlpha(),; SetMarkerColorAlpha() and SetTextColorAlpha().; In the following example the fill color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetFillColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; . Function Members (Methods); public:. virtual~TColor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& color) const; static voidCreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorsGray(); static voidCreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorWheel(); static Int_tCreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TColor.html:9623,Clear,Clear,9623,root/html602/TColor.html,https://root.cern,https://root.cern/root/html602/TColor.html,2,['Clear'],['Clear']
Usability,"s; data members; class charts. ROOT; » HIST; » HIST; » THnT<char>. class THnT<char>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<char>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_char_.html:988,Clear,Clear,988,root/html602/THnT_char_.html,https://root.cern,https://root.cern/root/html602/THnT_char_.html,2,['Clear'],['Clear']
Usability,"s; data members; class charts. ROOT; » HIST; » HIST; » THnT<long>. class THnT<long>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_long_.html:988,Clear,Clear,988,root/html602/THnT_long_.html,https://root.cern,https://root.cern/root/html602/THnT_long_.html,2,['Clear'],['Clear']
Usability,"s; list is sorted by slave performace the active list will contain first; the most performant nodes. Returns the number of active slaves.; If random is TRUE, and nodes is less than the number of available workers,; a random selection is done.; Returns -1 in case of error. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ClearData(UInt_t what = kUnregistered, const char* dsname = 0); Remove files for the data directory.; The option 'what' can take the values:; kPurge remove all files and directories under '~/data'; kUnregistered remove only files not in registered datasets (default); kDataset remove files belonging to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:59595,Clear,ClearDataProgress,59595,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,18,"['Clear', 'Progress bar', 'clear']","['ClearDataProgress', 'Progress bar', 'clear']"
Usability,"s=0, double min=0, double max=0);  ; TH2F * getHistogram (const TH2F *dummy, std::string histoName, int bins=0, double min=0, double max=0, int bins2=0, double min2=0, double max2=0);  . Private Attributes; TCanvas * fCanvas;  ; std::map< std::string, TH1F * > m_histos1D;  ; std::map< std::string, TH2F * > m_histos2D;  . #include <TMVA/Monitoring.h>; Constructor & Destructor Documentation. ◆ Monitoring(). TMVA::Monitoring::Monitoring ; (; ). inline . Definition at line 26 of file Monitoring.h. ◆ ~Monitoring(). TMVA::Monitoring::~Monitoring ; (; ). inline . Definition at line 31 of file Monitoring.h. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::Monitoring::addPoint ; (; std::string ; histoName, . double ; x . ). inline . Definition at line 169 of file Monitoring.h. ◆ addPoint() [2/2]. void TMVA::Monitoring::addPoint ; (; std::string ; histoName, . double ; x, . double ; y . ). inline . Definition at line 176 of file Monitoring.h. ◆ clear(). void TMVA::Monitoring::clear ; (; std::string ; histoName). inline . Definition at line 183 of file Monitoring.h. ◆ create() [1/2]. void TMVA::Monitoring::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . Definition at line 132 of file Monitoring.h. ◆ create() [2/2]. void TMVA::Monitoring::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max, . int ; bins2, . double ; min2, . double ; max2 . ). inline . Definition at line 138 of file Monitoring.h. ◆ exists() [1/3]. bool TMVA::Monitoring::exists ; (; std::string ; histoName). inline . Definition at line 116 of file Monitoring.h. ◆ exists() [2/3]. bool TMVA::Monitoring::exists ; (; TH1F * ; dummy, . std::string ; histoName . ). inline . Definition at line 99 of file Monitoring.h. ◆ exists() [3/3]. bool TMVA::Monitoring::exists ; (; TH2F * ; dummy, . std::string ; histoName . ). inline . Definition at line 107 of file Monitoring.h. ◆ GetCanvas(). TCanvas * TMVA::Monitoring::GetCanvas ; (; ). i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Monitoring.html:2160,clear,clear,2160,doc/master/classTMVA_1_1Monitoring.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Monitoring.html,1,['clear'],['clear']
Usability,"s=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""N"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|100,TANH|50,TANH|10,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""GPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""Optimizer=ADAM,LearningRate=1e-3,TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DL_CPU : [dataset] : Create Transformation ""N"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : vari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:5444,Learn,LearningRate,5444,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Learn'],['LearningRate']
Usability,"s=p_ph_bkg_set, LineColor=""r""); model0.paramOn(frame); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt_text1 = [; ""No template uncertainties"",; ""are taken into account."",; ""This leads to low errors"",; ""for the parameters A, since"",; ""the only source of errors"",; ""are the data statistics."",; ]; for text in pt_text1:; pt.AddText(text); ; pt.DrawClone(); ; ; can.cd(2); frame = x.frame(Title=""Barlow Beeston for Sig & Bkg separately""); sumData.plotOn(frame); model1.plotOn(frame, LineColor=""b"", VisualizeError=result1); # Plot data again to show it on top of error bands:; sumData.plotOn(frame); model1.plotOn(frame, LineColor=""b""); p_ph_sig1_set = {p_ph_sig1}; p_ph_bkg1_set = {p_ph_bkg1}; model1.plotOn(frame, Components=p_ph_sig1_set, LineColor=""kAzure""); model1.plotOn(frame, Components=p_ph_bkg1_set, LineColor=""r""); model1.paramOn(frame, Parameters={Asig1, Abkg1}); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text2 = [; ""With gamma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A."",; ]; ; for text in pt_text2:; pt.AddText(text); ; pt.DrawClone(); ; can.cd(3); frame = x.frame(Title=""Barlow Beeston light for (Sig+Bkg)""); sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b"", VisualizeError=result2); # Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b""); p_ph_sig2_set = {p_ph_sig2}; p_ph_bkg2_set = {p_ph_bkg2}; model2.plotOn(frame, Components=p_ph_sig2_set, LineColor=""kAzure""); model2.plotOn(frame, Components=p_ph_bkg2_set, LineColor=""r""); model2.paramOn(frame, Parameters={Asig2, Abkg2}); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text3 = [; ""When signal and background"",; ""template share one gamma para-"",; ""meter per bin, they adapt less."",; ""The errors of the A parameters"",; ""also shrink sl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:5939,Clear,Clear,5939,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['Clear'],['Clear']
Usability,"s> Separation from histogram (PDF): 0.540 (0.000); : Dataset[dataset] : Evaluation of LD on training sample; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_LD.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_LD.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: FDA_GA for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ FDA_GA ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The function discriminant analysis (FDA) is a classifier suitable ; : to solve linear or simple nonlinear discrimination problems.; : ; : The user provides the desired function with adjustable parameters; : via the configuration option string, and FDA fits the parameters to; : it, requiring the signal (background) function value to be as close; : as possible to 1 (0). Its advantage over the more involved and; : automatic nonlinear discriminators is the simplicity and transparency ; : of the discrimination expression. A shortcoming is that FDA will; : underperform for involved problems with complicated, phase space; : dependent nonlinear correlations.; : ; : Please consult the Users Guide for the format of the formula string; : and the allowed parameter ranges:; : documentation/tmva/UsersGuide/TMVAUsersGuide.pdf; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : The FDA performance depends on the complexity and fidelity of the; : user-defined discriminator function. As a general rule, it should; : be able to reproduce the discrimination power of any linear; : discriminant analysis. To reach into the nonlinear domain, it is; : useful to inspect the correlation profiles of the input variables,; : and add quadratic and higher polynomial terms between variables as; : necessary. Comparison with more involved nonlinear classifiers can; : be used as a guide.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:38816,simpl,simplicity,38816,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['simpl'],['simplicity']
Usability,"sA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLIsoPainter(const TGLIsoPainter&); virtual voidDeInitGL() const; voidDrawMesh(const TGLIsoPainter::Mesh_t& mesh, Int_t level) const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFindMinMax(); Bool_tHasSections() const; virtual voidInitGL() const; TGLIsoPainter&operator=(const TGLIsoPainter&); voidSetMesh(TGLIsoPainter::Mesh_t& mesh, Double_t isoValue); voidSetSurfaceColor(Int_t ind) const. Data Members; public:. enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLIsoPainter.html:1534,Clear,ClearBuffers,1534,root/html532/TGLIsoPainter.html,https://root.cern,https://root.cern/root/html532/TGLIsoPainter.html,1,['Clear'],['ClearBuffers']
Usability,"sA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLParametricPlot(const TGLParametricPlot&); virtual voidDeInitGL() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidInitColors(); virtual voidInitGL() const; TGLParametricPlot&operator=(const TGLParametricPlot&); voidSetSurfaceColor() const. Data Members; public:. enum EMeshSize { kLow; kHigh; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fCoord; Bool_tTGLPlotPainter::fDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLParametricPlot.html:2272,Clear,ClearBuffers,2272,root/html532/TGLParametricPlot.html,https://root.cern,https://root.cern/root/html532/TGLParametricPlot.html,1,['Clear'],['ClearBuffers']
Usability,"sA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; virtual voidTGLPlotPainter::DrawPaletteAxis() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLTH3CompositionPainter(const TGLTH3CompositionPainter& rhs); virtual voidDeInitGL() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; virtual voidInitGL() const; TGLTH3CompositionPainter&operator=(const TGLTH3CompositionPainter& rhs); voidSetColor(Int_t color) const. Data Members; public:. enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TGLPlotPainter::fCoord; Bool_tTGLPlotPainter::fDrawAxes; Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLTH3CompositionPainter.html:1579,Clear,ClearBuffers,1579,root/html532/TGLTH3CompositionPainter.html,https://root.cern,https://root.cern/root/html532/TGLTH3CompositionPainter.html,1,['Clear'],['ClearBuffers']
Usability,"sArg to our cache. ;  ; void fillTreeBranch (TTree &t) override;  Fill tree branch associated with this object. ;  ; bool isValid () const override;  WVE (08/21/01) Probably obsolete now. ;  ; virtual bool isValidString (const char *, bool) const;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *=nullptr) override;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStringVar.html:32178,clear,clearShapeDirty,32178,doc/master/classRooStringVar.html,https://root.cern,https://root.cern/doc/master/classRooStringVar.html,3,['clear'],"['clearShapeDirty', 'clearValueAndShapeDirty', 'clearValueDirty']"
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategoryLValue.html:2197,Clear,Clear,2197,root/html532/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html532/RooAbsCategoryLValue.html,1,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsString.html:1956,Clear,Clear,1956,root/html532/RooAbsString.html,https://root.cern,https://root.cern/root/html532/RooAbsString.html,1,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:2128,Clear,Clear,2128,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBinningCategory.html:1967,Clear,Clear,1967,root/html532/RooBinningCategory.html,https://root.cern,https://root.cern/root/html532/RooBinningCategory.html,5,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStringVar.html:1851,Clear,Clear,1851,root/html532/RooStringVar.html,https://root.cern,https://root.cern/root/html532/RooStringVar.html,1,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCategoryLValue.html:2197,Clear,Clear,2197,root/html528/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html528/RooAbsCategoryLValue.html,2,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsCategory.html:2128,Clear,Clear,2128,root/html528/RooAbsCategory.html,https://root.cern,https://root.cern/root/html528/RooAbsCategory.html,2,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsString.html:1956,Clear,Clear,1956,root/html528/RooAbsString.html,https://root.cern,https://root.cern/root/html528/RooAbsString.html,2,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBinningCategory.html:1967,Clear,Clear,1967,root/html528/RooBinningCategory.html,https://root.cern,https://root.cern/root/html528/RooBinningCategory.html,10,['Clear'],['Clear']
Usability,"sArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStringVar.html:1851,Clear,Clear,1851,root/html528/RooStringVar.html,https://root.cern,https://root.cern/root/html528/RooStringVar.html,2,['Clear'],['Clear']
Usability,"sArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<std::string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsArg.html:1039,clear,clearing,1039,root/html528/RooAbsArg.html,https://root.cern,https://root.cern/root/html528/RooAbsArg.html,4,['clear'],['clearing']
Usability,"sArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:1039,clear,clearing,1039,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,2,['clear'],['clearing']
Usability,"sArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<std::string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:1039,clear,clearing,1039,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,1,['clear'],['clearing']
Usability,"sArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategoryLValue.html:2389,clear,clearValueDirty,2389,root/html602/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html602/RooAbsCategoryLValue.html,2,['clear'],['clearValueDirty']
Usability,"sArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """"",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategory.html:2320,clear,clearValueDirty,2320,root/html602/RooAbsCategory.html,https://root.cern,https://root.cern/root/html602/RooAbsCategory.html,2,['clear'],['clearValueDirty']
Usability,"sArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsString.html:2148,clear,clearValueDirty,2148,root/html602/RooAbsString.html,https://root.cern,https://root.cern/root/html602/RooAbsString.html,2,['clear'],['clearValueDirty']
Usability,"sArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinningCategory.html:1948,clear,clearValueDirty,1948,root/html602/RooBinningCategory.html,https://root.cern,https://root.cern/root/html602/RooBinningCategory.html,10,['clear'],['clearValueDirty']
Usability,"sArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStringVar.html:1875,clear,clearValueDirty,1875,root/html602/RooStringVar.html,https://root.cern,https://root.cern/root/html602/RooStringVar.html,2,['clear'],['clearValueDirty']
Usability,"sArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:3816,clear,clearValueDirty,3816,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,2,['clear'],['clearValueDirty']
Usability,"sArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:4262,clear,clearValueDirty,4262,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['clear'],['clearValueDirty']
Usability,"sArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegralMorph.html:6522,Clear,Clear,6522,root/html534/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html534/RooIntegralMorph.html,3,['Clear'],['Clear']
Usability,"sBase(ClassInfo_t*, const char*) const; virtual Bool_tClassInfo_IsEnum(const char*) const; virtual Bool_tClassInfo_IsLoaded(ClassInfo_t*) const; virtual Bool_tClassInfo_IsValid(ClassInfo_t*) const; virtual Bool_tClassInfo_IsValidMethod(ClassInfo_t*, const char*, const char*, Long_t*) const; virtual const char*ClassInfo_Name(ClassInfo_t*) const; virtual void*ClassInfo_New(ClassInfo_t*) const; virtual void*ClassInfo_New(ClassInfo_t*, int) const; virtual void*ClassInfo_New(ClassInfo_t*, void*) const; virtual void*ClassInfo_New(ClassInfo_t*, int, void*) const; virtual intClassInfo_Next(ClassInfo_t*) const; virtual Long_tClassInfo_Property(ClassInfo_t*) const; virtual intClassInfo_RootFlag(ClassInfo_t*) const; virtual intClassInfo_Size(ClassInfo_t*) const; virtual Long_tClassInfo_Tagnum(ClassInfo_t*) const; virtual const char*ClassInfo_Title(ClassInfo_t*) const; virtual const char*ClassInfo_TmpltName(ClassInfo_t*) const; virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearFileBusy(); virtual voidClearStack(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreateListOfBaseClasses(TClass* cl); virtual voidCreateListOfDataMembers(TClass* cl); virtual voidCreateListOfMethodArgs(TFunction* m); virtual voidCreateListOfMethods(TClass* cl); virtual intDataMemberInfo_ArrayDim(DataMemberInfo_t*) const; virtual voidDataMemberInfo_Delete(DataMemberInfo_t*) const; virtual DataMemberInfo_t*DataMemberInfo_Factory(ClassInfo_t* = 0) const; virtual DataMemberInfo_t*DataMemberInfo_FactoryCopy(DataMemberInfo_t*) const; virtual Bool_tDataMemberInfo_IsValid(DataMemberInfo_t*) const; virtual intDataMemberInfo_MaxIndex(DataMemberInfo_t*, Int_t) const; virtual const char*DataMemberInfo_Name(DataMemberInfo_t*) const; virtual intDataMemberInfo_Next(DataMemberInfo_t*) const; virtual Long_tDataMemberInfo_Offs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInterpreter.html:4823,Clear,Clear,4823,root/html534/TInterpreter.html,https://root.cern,https://root.cern/root/html534/TInterpreter.html,1,['Clear'],['Clear']
Usability,"sBinning.cxx. ◆ printValue(). void RooAbsBinning::printValue ; (; std::ostream & ; os); const. overridevirtual . Print binning value, i.e the bin boundary positions. ; Reimplemented from RooPrintable.; Definition at line 94 of file RooAbsBinning.cxx. ◆ removeHook(). virtual void RooAbsBinning::removeHook ; (; RooAbsRealLValue & ; ); const. inlinevirtual . Hook interface function to execute code upon removal from a RooAbsRealLValue. ; Reimplemented in RooParamBinning.; Definition at line 120 of file RooAbsBinning.h. ◆ setMax(). virtual void RooAbsBinning::setMax ; (; double ; xhi). inlinevirtual . Change upper bound to xhi. ; Reimplemented in RooLinTransBinning, and RooRangeBinning.; Definition at line 78 of file RooAbsBinning.h. ◆ setMin(). virtual void RooAbsBinning::setMin ; (; double ; xlo). inlinevirtual . Change lower bound to xlo. ; Reimplemented in RooLinTransBinning, and RooRangeBinning.; Definition at line 74 of file RooAbsBinning.h. ◆ setRange(). virtual void RooAbsBinning::setRange ; (; double ; xlo, . double ; xhi . ). pure virtual . Implemented in RooBinning, RooLinTransBinning, RooParamBinning, RooRangeBinning, and RooUniformBinning. ◆ Streamer(). void RooAbsBinning::Streamer ; (; TBuffer & ; R__b). overridevirtual . Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ; Reimplemented from TObject.; Reimplemented in RooBinning, RooLinTransBinning, RooParamBinning, RooRangeBinning, and RooUniformBinning.; Definition at line 116 of file RooAbsBinning.cxx. ◆ StreamerNVirtual(). void RooAbsBinning::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 125 of file RooAbsBinning.h. Libraries for RooAbsBinning:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsBinning.h; roofit/roofitcore/src/RooAbsBinning.cxx. RooAbsBinning. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsBinning.html:25822,Guid,Guide,25822,doc/master/classRooAbsBinning.html,https://root.cern,https://root.cern/doc/master/classRooAbsBinning.html,1,['Guid'],['Guide']
Usability,sCollection.h. ◆ useHashMapForFind(). void RooAbsCollection::useHashMapForFind ; (; bool ; flag); const. Parameters. [in]flagSwitch hash map on or off. . Definition at line 1604 of file RooAbsCollection.cxx. Member Data Documentation. ◆ _allRRV. bool RooAbsCollection::_allRRV = true. protected . All contents are RRV. ; Definition at line 405 of file RooAbsCollection.h. ◆ _hashAssistedFind. std::unique_ptr<HashAssistedFind> RooAbsCollection::_hashAssistedFind. mutableprivate . ! ; Definition at line 446 of file RooAbsCollection.h. ◆ _list. Storage_t RooAbsCollection::_list. protected . Actual object storage. ; Definition at line 400 of file RooAbsCollection.h. ◆ _name. TString RooAbsCollection::_name. protected . Our name. ; Definition at line 404 of file RooAbsCollection.h. ◆ _ownCont. bool RooAbsCollection::_ownCont = false. protected . Flag to identify a list that owns its contents. ; Definition at line 403 of file RooAbsCollection.h. ◆ _sizeThresholdForMapSearch. std::size_t RooAbsCollection::_sizeThresholdForMapSearch = 100. private . ! ; Definition at line 447 of file RooAbsCollection.h. ◆ _structureTag. TNamed* RooAbsCollection::_structureTag {nullptr}. mutableprotected . ! Structure tag ; Definition at line 412 of file RooAbsCollection.h. ◆ _typedStructureTag. TNamed* RooAbsCollection::_typedStructureTag {nullptr}. mutableprotected . ! Typed structure tag ; Definition at line 413 of file RooAbsCollection.h. ◆ _uniqueId. const RooFit::UniqueId<RooAbsCollection> RooAbsCollection::_uniqueId. private . Definition at line 453 of file RooAbsCollection.h. Libraries for RooAbsCollection:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsCollection.h; roofit/roofitcore/src/RooAbsCollection.cxx; /home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/v632_TMP/pyzdoc/_roofit.pyzdoc. RooAbsCollection. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:64850,Guid,Guide,64850,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['Guid'],['Guide']
Usability,"sCompiled(). void RooFit::Detail::CompileContext::markAsCompiled ; (; RooAbsArg & ; arg); const. Definition at line 74 of file NormalizationHelpers.cxx. ◆ setBinnedLikelihoodMode(). void RooFit::Detail::CompileContext::setBinnedLikelihoodMode ; (; bool ; flag). inline . Definition at line 49 of file NormalizationHelpers.h. ◆ setBinWidthFuncFlag(). void RooFit::Detail::CompileContext::setBinWidthFuncFlag ; (; bool ; flag). inline . Definition at line 51 of file NormalizationHelpers.h. ◆ setLikelihoodMode(). void RooFit::Detail::CompileContext::setLikelihoodMode ; (; bool ; flag). inline . Definition at line 47 of file NormalizationHelpers.h. Member Data Documentation. ◆ _binnedLikelihoodMode. bool RooFit::Detail::CompileContext::_binnedLikelihoodMode = false. private . Definition at line 65 of file NormalizationHelpers.h. ◆ _binWidthFuncFlag. bool RooFit::Detail::CompileContext::_binWidthFuncFlag = false. private . Definition at line 66 of file NormalizationHelpers.h. ◆ _clonedArgsSet. std::unordered_map<TNamed const *, RooAbsArg *> RooFit::Detail::CompileContext::_clonedArgsSet. private . Definition at line 61 of file NormalizationHelpers.h. ◆ _likelihoodMode. bool RooFit::Detail::CompileContext::_likelihoodMode = false. private . Definition at line 64 of file NormalizationHelpers.h. ◆ _replacements. std::unordered_map<RooAbsArg *, RooAbsArg *> RooFit::Detail::CompileContext::_replacements. private . Definition at line 62 of file NormalizationHelpers.h. ◆ _topLevelNormSet. RooArgSet const& RooFit::Detail::CompileContext::_topLevelNormSet. private . Definition at line 60 of file NormalizationHelpers.h. Libraries for RooFit::Detail::CompileContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooFit/Detail/NormalizationHelpers.h; roofit/roofitcore/src/NormalizationHelpers.cxx. RooFitDetailCompileContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CompileContext.html:5660,Guid,Guide,5660,doc/master/classRooFit_1_1Detail_1_1CompileContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CompileContext.html,1,['Guid'],['Guide']
Usability,"sCurrentOverlapping() constDefinition TGeoManager.h:401; TGeoManager::MakeTorusTGeoVolume * MakeTorus(const char *name, TGeoMedium *medium, Double_t r, Double_t rmin, Double_t rmax, Double_t phi1=0, Double_t dphi=360)Make in one step a volume pointing to a torus shape with given medium.Definition TGeoManager.cxx:3195; TGeoManager::GetHMatrixTGeoHMatrix * GetHMatrix()Return stored current matrix (global matrix of the next touched node).Definition TGeoManager.cxx:2139; TGeoManager::fParallelWorldTGeoParallelWorld * fParallelWorldDefinition TGeoManager.h:148; TGeoManager::RegisterMatrixvoid RegisterMatrix(const TGeoMatrix *matrix)Register a matrix to the list of matrices.Definition TGeoManager.cxx:1115; TGeoManager::GetTrackTVirtualGeoTrack * GetTrack(Int_t index)Definition TGeoManager.h:373; TGeoManager::GetMaxDaughtersstatic Int_t GetMaxDaughters()Return maximum number of daughters of a volume used in the geometry.Definition TGeoManager.cxx:2107; TGeoManager::ClearThreadsMapstatic void ClearThreadsMap()Clear the current map of threads.Definition TGeoManager.cxx:984; TGeoManager::AddVolumeInt_t AddVolume(TGeoVolume *volume)Add a volume to the list. Returns index of the volume in list.Definition TGeoManager.cxx:743; TGeoManager::fPainterTVirtualGeoPainter * fPainterflag that nodes are the selected objects in pad rather than volumesDefinition TGeoManager.h:91; TGeoManager::SetVolumeAttributevoid SetVolumeAttribute(const char *name, const char *att, Int_t val)Set volume attributes in G3 style.Definition TGeoManager.cxx:2308; TGeoManager::GetPdgNameconst char * GetPdgName(Int_t pdg) constGet name for given pdg code;.Definition TGeoManager.cxx:1966; TGeoManager::CheckGeometryFullvoid CheckGeometryFull(Int_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"")Geometry checking.Definition TGeoManager.cxx:3811; TGeoManager::IsFolderBool_t IsFolder() const overrideReturns kTRUE in case object contains browsable objects (like containers or lis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:61709,Clear,ClearThreadsMapstatic,61709,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,3,['Clear'],"['Clear', 'ClearThreadsMap', 'ClearThreadsMapstatic']"
Usability,"sData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:6355,clear,clearValueDirty,6355,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['clear'],['clearValueDirty']
Usability,"sDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:2905,clear,clearEvalError,2905,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['clear'],['clearEvalError']
Usability,"sDef_StreamerNVirtual_b);  ; virtual Int_t TimedWait (ULong_t secs, ULong_t nanoSecs=0)=0;  ; virtual Int_t Wait ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTConditionImp.html:1543,Clear,Clear,1543,doc/master/classTConditionImp.html,https://root.cern,https://root.cern/doc/master/classTConditionImp.html,1,['Clear'],['Clear']
Usability,"sFunc (const RooArgSet *) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *) const override;  Return expected number of events to be used in calculation of extended likelihood. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *, const char *rangeName=nullptr) const override;  Forward determination of analytical integration capabilities to input p.d.f. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:2031,simpl,simple,2031,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['simpl'],['simple']
Usability,"sFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGaussModel.html:3342,clear,clearValueDirty,3342,root/html528/RooGaussModel.html,https://root.cern,https://root.cern/root/html528/RooGaussModel.html,3,['clear'],['clearValueDirty']
Usability,"sFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGaussModel.html:3342,clear,clearValueDirty,3342,root/html530/RooGaussModel.html,https://root.cern,https://root.cern/root/html530/RooGaussModel.html,3,['clear'],['clearValueDirty']
Usability,"sID::AssignID ; (; TObject * ; obj). static . static function returning the ID assigned to obj If the object is not yet referenced, its kIsReferenced bit is set and its fUniqueID set to the current number of referenced objects so far. ; Definition at line 155 of file TProcessID.cxx. ◆ CheckInit(). void TProcessID::CheckInit ; (; ). Initialize fObjects. ; Definition at line 192 of file TProcessID.cxx. ◆ Class(). static TClass * TProcessID::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProcessID::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProcessID::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 118 of file TProcessID.h. ◆ Cleanup(). void TProcessID::Cleanup ; (; ). static . static function (called by TROOT destructor) to delete all TProcessIDs ; Definition at line 204 of file TProcessID.cxx. ◆ Clear(). void TProcessID::Clear ; (; Option_t * ; option = """"). overridevirtual . delete the TObjArray pointing to referenced objects this function is called by TFile::Close(""R"") ; Reimplemented from TNamed.; Definition at line 218 of file TProcessID.cxx. ◆ DeclFileName(). static const char * TProcessID::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 118 of file TProcessID.h. ◆ DecrementCount(). Int_t TProcessID::DecrementCount ; (; ). The reference fCount is used to delete the TProcessID in the TFile destructor when fCount = 0. ; Definition at line 238 of file TProcessID.cxx. ◆ GetCount(). Int_t TProcessID::GetCount ; (; ); const. inline . Definition at line 98 of file TProcessID.h. ◆ GetNProcessIDs(). UInt_t TProcessID::GetNProcessIDs ; (; ). static . Return the (static) number of process IDs. ; Definition at line 256 of file TProcessID.cxx. ◆ GetObjectCount(). UInt_t TProcessID::GetObjectCount ; (; ). static . Return the current referenced object count",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProcessID.html:17339,Clear,Clear,17339,doc/master/classTProcessID.html,https://root.cern,https://root.cern/doc/master/classTProcessID.html,1,['Clear'],['Clear']
Usability,"sKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  ► tree;  basic.C Read data from an ascii file and create a root file with an histogram and an ntuple ;  basic2.C Create can ntuple reading data from an ascii file ;  bill.C Benchmark comparing row-wise and colum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:153820,simpl,simple,153820,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['simpl'],['simple']
Usability,"sOfROOT.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ; Plot the downloads of different ROOT versions reading a remote sqlite3 file with RSqliteDS. Then a TH1F histogram is created and filled using a lambda expression which receives the recorded values in the ""version"" column of the sqlite3 database. The histogram shows the usage of the ROOT development version.; ; void df030_SQliteVersionsOfROOT() {; ; auto rdf =; ROOT::RDF::FromSqlite(""http://root.cern/files/root_download_stats.sqlite"", ""SELECT Version FROM accesslog;"");; ; TH1F hVersionOfRoot(""hVersionOfRoot"", ""Development Versions of ROOT"", 8, 0, -1);; ; auto fillVersionHisto = [&hVersionOfRoot] (const std::string &version) {; TString copyVersion = version;; TString shortVersion(copyVersion(0,4));; hVersionOfRoot.Fill(shortVersion, 1);; };; ; rdf.Foreach( fillVersionHisto, { ""Version"" } );; ; auto VersionOfRootHistogram = new TCanvas();; ; gStyle->SetOptStat(0);; hVersionOfRoot.GetXaxis()->LabelsOption(""a"");; hVersionOfRoot.LabelsDeflate(""X"");; hVersionOfRoot.DrawClone("""");; }; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; ROOT::RDF::FromSqliteRDataFrame FromSqlite(std::string_view fileName, std::string_view query)Factory method to create a SQlite RDataFrame.Definition RSqliteDS.cxx:538; . DateAugust 2018 ; AuthorAlexandra-Maria Dobrescu ; Definition in file df030_SQliteVersionsOfROOT.C. tutorialsdataframedf030_SQliteVersionsOfROOT.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df030__SQliteVersionsOfROOT_8C.html:2093,Guid,Guide,2093,doc/master/df030__SQliteVersionsOfROOT_8C.html,https://root.cern,https://root.cern/doc/master/df030__SQliteVersionsOfROOT_8C.html,1,['Guid'],['Guide']
Usability,"sRange(thisRangeName)) {; 2064 coutE(Plotting) << ""Range '"" << rangeNameToken << ""' not defined for variable '""; 2065 << frame->getPlotVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2066 continue;; 2067 }; 2068 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2069 }; 2070 adjustNorm = pc.getInt(""rangeWNAdjustNorm"") ;; 2071 hasCustomRange = true ;; 2072 ; 2073 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range '"" << pc.getString(""rangeName"", """", false) << ""'"" ;; 2074 if (!pc.hasProcessed(""NormRange"")) {; 2075 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2076 } else {; 2077 ccoutI(Plotting) << endl ;; 2078 }; 2079 ; 2080 nameSuffix.append(""_Range["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2081 }; 2082 // Specification of a normalization range override those in a regular range; 2083 if (pc.hasProcessed(""NormRange"")) {; 2084 rangeLim.clear();; 2085 for (const auto& rangeNameToken : ROOT::Split(pc.getString(""normRangeName"", """", false), "","")) {; 2086 const char* thisRangeName = rangeNameToken.empty() ? nullptr : rangeNameToken.c_str();; 2087 if (thisRangeName && !frame->getPlotVar()->hasRange(thisRangeName)) {; 2088 coutE(Plotting) << ""Range '"" << rangeNameToken << ""' not defined for variable '""; 2089 << frame->getPlotVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2090 continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:102500,clear,clear,102500,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['clear'],['clear']
Usability,"sReal*>fNullNLLs!; vector<const RooArgSet*>fNullSnapshots; const RooArgSet*RooStats::ToyMCSampler::fObservables; const RooArgSet*RooStats::ToyMCSampler::fParametersForTestStat; RooAbsPdf*RooStats::ToyMCSampler::fPdfmodel (can be alt or null); RooAbsPdf*RooStats::ToyMCSampler::fPriorNuisanceprior pdf for nuisance parameters; RooStats::ProofConfig*RooStats::ToyMCSampler::fProofConfig!; const RooDataSet*RooStats::ToyMCSampler::fProtoDatain dev; boolfReuseNLL; stringRooStats::ToyMCSampler::fSamplingDistNamename of the model; Double_tRooStats::ToyMCSampler::fSize; vector<RooStats::TestStatistic*>RooStats::ToyMCSampler::fTestStatistics; Double_tRooStats::ToyMCSampler::fToysInTails; RooStats::toysStrategiesfToysStrategy; Bool_tRooStats::ToyMCSampler::fUseMultiGenUse PrepareMultiGen?; static Bool_tRooStats::ToyMCSampler::fgAlwaysUseMultiGenUse PrepareMultiGen always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~ToyMCImportanceSampler(). void ClearCache(void). RooDataSet* GetSamplingDistributionsSingleWorker(RooArgSet& paramPoint). RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight) const. RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight, vector<double>& impNLLs, double& nullNLL) const. RooAbsData* GenerateToyData(vector<double>& weights) const. RooAbsData* GenerateToyData(vector<double>& weights, vector<double>& nullNLLs, vector<double>& impNLLs) const; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. int CreateImpDensitiesForOnePOIAdaptively(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, double nStdDevOverlap = 0.5, double poiValueForBackground = 0.); these might not necessarily be the same thing. int CreateNImpDensitiesForOnePOI(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, int n, double poiValueForBackground = 0.); n is the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ToyMCImportanceSampler.html:8729,Clear,ClearCache,8729,root/html602/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__ToyMCImportanceSampler.html,2,['Clear'],['ClearCache']
Usability,"sReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; virtual RooAbsGenContext*binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:6864,clear,clearEvalErrorLog,6864,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"sString();; 1033 std::string type = P->getType().getAsString();; 1034 if (type.at(type.length()-1) == '*') {; 1035 type.at(type.length()-2) = '*';; 1036 type.erase(type.length()-1);; 1037 }; 1038 prototype += type;; 1039 }; 1040 ; 1041 prototype = ""("" + prototype + "")"";; 1042 return true;; 1043 }; 1044 else {; 1045 ShowWarning(""can't convert Decl to FunctionDecl"","""");; 1046 return false;; 1047 }; 1048}; 1049 ; 1050////////////////////////////////////////////////////////////////////////////////; 1051 ; 1052void RScanner::Scan(const clang::ASTContext &C); 1053{; 1054 fSourceManager = &C.getSourceManager();; 1055 ; 1056// if (fVerboseLevel >= 3) fSelectionRules.PrintSelectionRules();; 1057 ; 1058 if (fVerboseLevel > 0 && fSelectionRules.GetHasFileNameRule()) {; 1059 std::cout<<""File name detected""<<std::endl;; 1060 }; 1061 ; 1062 if (fScanType == EScanType::kTwoPasses); 1063 TraverseDecl(C.getTranslationUnitDecl());; 1064 ; 1065 fFirstPass=false;; 1066 fselectedRecordDecls.clear();; 1067 fSelectedEnums.clear();; 1068 fSelectedTypedefs.clear();; 1069 fSelectedVariables.clear();; 1070 fSelectedFunctions.clear();; 1071 TraverseDecl(C.getTranslationUnitDecl());; 1072 ; 1073 // The RecursiveASTVisitor uses range-based for; we must not modify the AST; 1074 // during iteration / visitation. Instead, buffer the lookups that could; 1075 // potentially create new template specializations, and handle them here:; 1076 AddDelayedAnnotatedRecordDecls();; 1077}; 1078 ; 1079 ; 1080////////////////////////////////////////////////////////////////////////////////; 1081/// Set the callback to the RecordDecl and return the previous one.; 1082 ; 1083RScanner::DeclCallback RScanner::SetRecordDeclCallback(RScanner::DeclCallback callback); 1084{; 1085 DeclCallback old = fRecordDeclCallback;; 1086 fRecordDeclCallback = callback;; 1087 return old;; 1088}; IntToStrstd::string IntToStr(int num)Definition Scanner.cxx:161; APIntToLonglong APIntToLong(const llvm::APInt &num)Definition Scanner.cxx:147",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx_source.html:36752,clear,clear,36752,doc/master/Scanner_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx_source.html,1,['clear'],['clear']
Usability,"sStudy () override;  Destructor. ;  ; virtual bool attach (RooWorkspace &);  ; virtual RooAbsStudy * clone (const char *newname="""") const =0;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; RooLinkedList * detailedData ();  ; virtual void dump ();  ; virtual bool execute ();  ; virtual bool finalize ();  ; virtual bool initialize ();  ; TClass * IsA () const override;  ; void releaseDetailData ();  ; void storeDetailedOutput (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; RooDataSet * summaryData ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsStudy.html:1604,Clear,Clear,1604,doc/master/classRooAbsStudy.html,https://root.cern,https://root.cern/doc/master/classRooAbsStudy.html,1,['Clear'],['Clear']
Usability,"sTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 50 of file TGShutter.h. ◆ operator=(). TGShutterItem & TGShutterItem::operator= ; (; const TGShutterItem & ; ). privatedelete . ◆ SavePrimitive(). void TGShutterItem::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a shutter item widget as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 385 of file TGShutter.cxx. ◆ Selected(). virtual void TGShutterItem::Selected ; (; ). inlinevirtual . Definition at line 46 of file TGShutter.h. ◆ Streamer(). void TGShutterItem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGShutterItem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 50 of file TGShutter.h. Friends And Related Symbol Documentation. ◆ TGShutter. friend class TGShutter. friend . Definition at line 27 of file TGShutter.h. Member Data Documentation. ◆ fButton. TGButton* TGShutterItem::fButton. protected . shutter item button ; Definition at line 30 of file TGShutter.h. ◆ fCanvas. TGCanvas* TGShutterItem::fCanvas. protected . canvas of shutter item ; Definition at line 31 of file TGShutter.h. ◆ fContainer. TGFrame* TGShutterItem::fContainer. protected . container in canvas containing shutter items ; Definition at line 32 of file TGShutter.h. ◆ fL1. TGLayoutHints* TGShutterItem::fL1. protected . Definition at line 33 of file TGShutter.h. ◆ fL2. TGLayoutHints * TGShutterItem::fL2. protected . positioning hints ; Definition at line 33 of file TGShutter.h. Libraries for TGShutterItem:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGShutter.h; gui/gui/src/TGShutter.cxx. TGShutterItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGShutterItem.html:36214,Guid,Guide,36214,doc/master/classTGShutterItem.html,https://root.cern,https://root.cern/doc/master/classTGShutterItem.html,1,['Guid'],['Guide']
Usability,"sTClass describing current object ; Reimplemented from TH1.; Definition at line 61 of file TH1K.h. ◆ Reset(). void TH1K::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset. ; Reimplemented from TH1.; Definition at line 153 of file TH1K.cxx. ◆ RetrieveBinContent(). Double_t TH1K::RetrieveBinContent ; (; Int_t ; bin); const. inlineoverrideprotectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 36 of file TH1K.h. ◆ SavePrimitive(). void TH1K::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out Note the following restrictions in the code generated: . variable bin size not implemented; Objects in list of functions not saved (fits); Contours not saved . Reimplemented from TH1.; Definition at line 168 of file TH1K.cxx. ◆ SetKOrd(). void TH1K::SetKOrd ; (; Int_t ; k). inline . Definition at line 59 of file TH1K.h. ◆ Sort(). void TH1K::Sort ; (; ). private . Sort. ; Definition at line 231 of file TH1K.cxx. ◆ Streamer(). void TH1K::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TH1. ◆ StreamerNVirtual(). void TH1K::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TH1K.h. Member Data Documentation. ◆ fKCur. Int_t TH1K::fKCur. protected . Definition at line 34 of file TH1K.h. ◆ fKOrd. Int_t TH1K::fKOrd. protected . Definition at line 33 of file TH1K.h. ◆ fNIn. Int_t TH1K::fNIn. protected . Definition at line 32 of file TH1K.h. ◆ fReady. Int_t TH1K::fReady. protected . Definition at line 31 of file TH1K.h. Libraries for TH1K:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TH1K.h; hist/hist/src/TH1K.cxx. TH1K. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1K.html:57725,Guid,Guide,57725,doc/master/classTH1K.html,https://root.cern,https://root.cern/doc/master/classTH1K.html,1,['Guid'],['Guide']
Usability,"sTClass describing this class . ◆ Class_Name(). static const char * RooPullVar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooPullVar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file RooPullVar.h. ◆ clone(). TObject * RooPullVar::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 31 of file RooPullVar.h. ◆ DeclFileName(). static const char * RooPullVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file RooPullVar.h. ◆ evaluate(). double RooPullVar::evaluate ; (; ); const. overrideprotectedvirtual . Calculate pull. ; Use asymmetric error if defined in measurement, otherwise use symmetric error. If measurement has no error return zero. ; Implements RooAbsReal.; Definition at line 72 of file RooPullVar.cxx. ◆ IsA(). TClass * RooPullVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 41 of file RooPullVar.h. ◆ Streamer(). void RooPullVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooPullVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file RooPullVar.h. Member Data Documentation. ◆ _meas. RooTemplateProxy<RooRealVar> RooPullVar::_meas. protected . Definition at line 36 of file RooPullVar.h. ◆ _true. RooRealProxy RooPullVar::_true. protected . Definition at line 37 of file RooPullVar.h. Libraries for RooPullVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooPullVar.h; roofit/roofitcore/src/RooPullVar.cxx. RooPullVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPullVar.html:62817,Guid,Guide,62817,doc/master/classRooPullVar.html,https://root.cern,https://root.cern/doc/master/classRooPullVar.html,1,['Guid'],['Guide']
Usability,"sTClass describing this class . ◆ Class_Name(). static const char * TGCocoa::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGCocoa::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 476 of file TGCocoa.h. ◆ ClearArea(). void TGCocoa::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX.; Definition at line 2292 of file TGCocoa.mm. ◆ ClearAreaAux(). void TGCocoa::ClearAreaAux ; (; Window_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). Definition at line 2252 of file TGCocoa.mm. ◆ ClearWindow() [1/2]. void TGCocoa::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reimplemented from TVirtualX.; Definition at line 681 of file TGCocoa.mm. ◆ ClearWindow() [2/2]. void TGCocoa::ClearWindow ; (; Window_t ; id). overridevirtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented from TVirtualX.; Definition at line 2317 of file TGCocoa.mm. ◆ CloseDisplay(). void TGCocoa::CloseDisplay ; (; ). overridevirtual . Closes connection to display server and destroys all windows. ; Reimplemented from TVirtualX.; Definition at line 524 of file TGCocoa.mm. ◆ ClosePixmap(). void TGCocoa::ClosePixmap ; (; ). overridevirtual . Deletes current pixmap. ; Reimplemented from TVirtualX.; Definition at line 2413 of file TGCocoa.mm. ◆ CloseWindow(). void TGCocoa::CloseWindow ; (; ). overridevirtual . Deletes current window. ; Reimplemented from TVirtualX.; Definition at line 840 of file TGCocoa.mm. ◆ Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:57893,Clear,ClearWindow,57893,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['Clear'],['ClearWindow']
Usability,"sText(ULong_t pos, const char* text); virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGTextLine(); TGTextLine(TGTextLine* line); TGTextLine(const char* string). protected:. TGTextLine&operator=(const TGTextLine&); TGTextLine(const TGTextLine&). Data Members; protected:. ULong_tfLengthlength of line; TGTextLine*fNextnext line; TGTextLine*fPrevprevious line; char*fStringline of text. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGTextLine(); Create empty line of text (default ctor). TGTextLine(TGTextLine* line); Initialize line of text with other line of text (not copy ctor). TGTextLine(const char* string); Initialize line of text with a const char*. TGTextLine(const TGTextLine& ); copy constructor. TGTextLine& operator=(const TGTextLine& ); assignment operator. ~TGTextLine(); Delete a line of text. void Clear(); Clear a line of text. void DelText(ULong_t pos, ULong_t length); Delete length chars from line starting at position pos. void InsText(ULong_t pos, const char* text); Insert text in line starting at position pos. char * GetText(ULong_t pos, ULong_t length); Get length characters from line starting at pos. Returns 0; in case pos and length are out of range. The returned string; must be freed by the user. char * GetWord(ULong_t pos); Get word at position. Returned string must be deleted. void DelChar(ULong_t pos); Delete a character from the line. void InsChar(ULong_t pos, char character); Insert a character at the specified position. char GetChar(ULong_t pos); Get a character at the specified position from the line.; Returns -1 if pos is out of range. ULong_t GetLineLength(); { return fLength; }. char * GetText(ULong_t pos, ULong_t length). » Author: Fons Rademakers 26/04/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextLine.html:1841,Clear,Clear,1841,root/html602/TGTextLine.html,https://root.cern,https://root.cern/root/html602/TGTextLine.html,4,['Clear'],['Clear']
Usability,"sText::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 35 of file TPavesText.h. ◆ Draw(). void TPavesText::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this pavestext with its current attributes. ; Reimplemented from TPave.; Definition at line 80 of file TPavesText.cxx. ◆ GetNpaves(). virtual Int_t TPavesText::GetNpaves ; (; ). inlinevirtual . Definition at line 30 of file TPavesText.h. ◆ IsA(). TClass * TPavesText::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TPave.; Definition at line 35 of file TPavesText.h. ◆ Paint(). void TPavesText::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this pavestext with its current attributes. ; Reimplemented from TPave.; Definition at line 88 of file TPavesText.cxx. ◆ SavePrimitive(). void TPavesText::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TPave.; Definition at line 120 of file TPavesText.cxx. ◆ SetNpaves(). virtual void TPavesText::SetNpaves ; (; Int_t ; npaves = 5). inlinevirtual . Definition at line 33 of file TPavesText.h. ◆ Streamer(). void TPavesText::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TPave. ; Reimplemented from TPave. ◆ StreamerNVirtual(). void TPavesText::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 35 of file TPavesText.h. Member Data Documentation. ◆ fNpaves. Int_t TPavesText::fNpaves. protected . Number of stacked paves. ; Definition at line 21 of file TPavesText.h. Libraries for TPavesText:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TPavesText.h; graf2d/graf/src/TPavesText.cxx. TPavesText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPavesText.html:28840,Guid,Guide,28840,doc/master/classTPavesText.html,https://root.cern,https://root.cern/doc/master/classTPavesText.html,1,['Guid'],['Guide']
Usability,"sY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:17945,Simpl,Simple,17945,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"s[ x=x mean=m sigma=s ] = 1; RooGaussian::gx[ x=x mean=m sigma=1 ] = 1; RooProdPdf::gxycond[ gx * gy|x ] = 1; RooProdPdf::gxz[ gx * gz ] = 1; RooGaussian::gy[ x=y mean=x sigma=1 ] = 1; RooGaussian::gz[ x=z mean=0 sigma=1 ] = 1; RooLandau::lc[ x=x mean=0 sigma=1 ] = 0.178854; RooLandau::ls[ x=x mean=0 sigma=1 ] = 0.178854; RooFFTConvPdf::lxg[ g(x) (*) lc(x) ] = 375639; RooSimultaneous::smodel[ indexCat=c A=gs B=ls ] = 1; RooAddPdf::summodel[ f * gx + [%] * ch ] = 0.9/1; ; functions; --------; RooLagrangianMorphFunc::morph[ physics=(phys_SM_NPsq0_morph,phys_cHq3_NPsq1_morph,phys_cHq3_NPsq2_morph) operators=(cHq3,SM) observables=(pTV) binWidths=(binWidth_pTV) flags=(nNP0,nNP1,nNP2,nNP3,nNP4) binWidth_pTV * SM_NPsq0_morph + binWidth_pTV * cHq3_NPsq1_morph + binWidth_pTV * cHq3_NPsq2_morph ] = 35.9835; RooHistFunc::phys_SM_NPsq0_morph[ depList=(pTV) ] = 65.1309; RooHistFunc::phys_cHq3_NPsq1_morph[ depList=(pTV) ] = 544.966; RooHistFunc::phys_cHq3_NPsq2_morph[ depList=(pTV) ] = 1528.22; RooFormulaVar::poly[ actualVars=(x) formula=""x^4+5*x^3+2*x^2+x+1"" ] = 1; RooPolyFunc::te[ vars=(x) te_t0=(te_x^0,te_c0) te_t1=(te_x^1,te_c1) te_t2=(te_x^2,te_c2) ] = 1; RooProduct::uv[ u * v ] = 100; RooAddition::uv2[ u + v ] = 20; ; embedded datasets (in pdfs and functions); -----------------------------------------; RooDataHist::dh_SM_NPsq0_morph(pTV); RooDataHist::dh_cHq3_NPsq1_morph(pTV); RooDataHist::dh_cHq3_NPsq2_morph(pTV); ; embedded class code; -------------------; RooCFAuto000Pdf; ; embedded precalculated expensive components; -------------------------------------------; uid = 0 key=lxg_g_CONV_lc_CACHEHIST_Obs[x]_BufFrac0.1_BufStrat0 value=RooDataHist::lxg_g_CONV_lc_CACHEHIST_Obs[x]_BufFrac0.1_BufStrat0 parameters=( mg=0 ); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf512_wsfactory_oper.py. tutorialsroofitrf512_wsfactory_oper.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf512__wsfactory__oper_8py.html:6516,Guid,Guide,6516,doc/master/rf512__wsfactory__oper_8py.html,https://root.cern,https://root.cern/doc/master/rf512__wsfactory__oper_8py.html,1,['Guid'],['Guide']
Usability,s[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ; 703 fDataErrorHigh.clear();; 704 fDataErrorHighPtr = nullptr;; 705 fDataErrorLow.clear();; 706 fDataErrorLowPtr = nullptr;; 707 }; 708 else if ( fErrorType == kAsymError ); 709 {; 710 fDataErrorHigh.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 711 fDataErrorHighPtr = fDataErrorHigh.empty() ? nullptr : &fDataErrorHigh.front();; 712 ; 713 fDataErrorLow.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 714 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 715 ; 716 fDataError.clear();; 717 fDataErrorPtr = nullptr;; 718 }; 719 else; 720 {; 721 assert(false);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<fDim; i++ ); 730 {; 731 fBinEdge[i].reserve(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 732 }; 733 ; 734 if ( fpTmpBinEdgeVector ); 735 {; 736 delete[] fpTmpBinEdgeVector;; 737 fpTmpBinEdgeVector = nullptr;; 738 }; 739 ; 740 fpTmpBinEdgeVector = new double[ fDim ];; 741 }; 742 ; 743 void BinData::UnWrap( ); 744 {; 745 assert( fWrapped );; 746 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 747 kAsymError == fErrorType || kNoError == fErrorType );; 748 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 749 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 750 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 751 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 752 ; 753 assert( fData.empty() );; 754 assert( fDataPtr );; 755 ; 756 unsigned ve,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:21974,clear,clear,21974,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"s_Version(). static constexpr Version_t RooChangeTracker::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 49 of file RooChangeTracker.h. ◆ clone(). TObject * RooChangeTracker::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 30 of file RooChangeTracker.h. ◆ DeclFileName(). static const char * RooChangeTracker::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 49 of file RooChangeTracker.h. ◆ evaluate(). double RooChangeTracker::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 47 of file RooChangeTracker.h. ◆ hasChanged(). bool RooChangeTracker::hasChanged ; (; bool ; clearState). Returns true if state has changed since last call with clearState=true. ; If clearState is true, changeState flag will be cleared. ; Definition at line 104 of file RooChangeTracker.cxx. ◆ IsA(). TClass * RooChangeTracker::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 49 of file RooChangeTracker.h. ◆ parameters(). RooArgSet RooChangeTracker::parameters ; (; ); const. Definition at line 188 of file RooChangeTracker.cxx. ◆ Streamer(). void RooChangeTracker::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooChangeTracker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file RooChangeTracker.h. Member Data Documentation. ◆ _catRef. std::vector<Int_t> RooChangeTracker::_catRef. protected . Reference values for categories. ; Definition at line 42 of file RooChangeTracker.h. ◆ _catSet. RooListProxy RooChangeTracker::_catSet. protected . List of categories to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChangeTracker.html:62818,clear,clearState,62818,doc/master/classRooChangeTracker.html,https://root.cern,https://root.cern/doc/master/classRooChangeTracker.html,2,['clear'],"['clearState', 'cleared']"
Usability,s_Version(). static constexpr Version_t RooUnblindCPAsymVar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 47 of file RooUnblindCPAsymVar.h. ◆ clone(). TObject * RooUnblindCPAsymVar::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 36 of file RooUnblindCPAsymVar.h. ◆ DeclFileName(). static const char * RooUnblindCPAsymVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file RooUnblindCPAsymVar.h. ◆ evaluate(). double RooUnblindCPAsymVar::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 85 of file RooUnblindCPAsymVar.cxx. ◆ IsA(). TClass * RooUnblindCPAsymVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsHiddenReal.; Definition at line 47 of file RooUnblindCPAsymVar.h. ◆ Streamer(). void RooUnblindCPAsymVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsHiddenReal. ◆ StreamerNVirtual(). void RooUnblindCPAsymVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file RooUnblindCPAsymVar.h. Member Data Documentation. ◆ _asym. RooRealProxy RooUnblindCPAsymVar::_asym. protected . Definition at line 44 of file RooUnblindCPAsymVar.h. ◆ _blindEngine. RooBlindTools RooUnblindCPAsymVar::_blindEngine. protected . Definition at line 45 of file RooUnblindCPAsymVar.h. Libraries for RooUnblindCPAsymVar:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooUnblindCPAsymVar.h; roofit/roofit/src/RooUnblindCPAsymVar.cxx. RooUnblindCPAsymVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:65783,Guid,Guide,65783,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,1,['Guid'],['Guide']
Usability,"s_Version(). static constexpr Version_t TVirtualX::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 334 of file TVirtualX.h. ◆ ClearArea(). void TVirtualX::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). virtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1603 of file TVirtualX.cxx. ◆ ClearWindow() [1/2]. void TVirtualX::ClearWindow ; (; ). virtual . Clears the entire area of the current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 177 of file TVirtualX.cxx. ◆ ClearWindow() [2/2]. void TVirtualX::ClearWindow ; (; Window_t ; id). virtual . Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 1872 of file TVirtualX.cxx. ◆ CloseDisplay(). void TVirtualX::CloseDisplay ; (; ). virtual . Closes connection to display server and destroys all windows. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1207 of file TVirtualX.cxx. ◆ ClosePixmap(). void TVirtualX::ClosePixmap ; (; ). virtual . Deletes current pixmap. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 191 of file TVirtualX.cxx. ◆ CloseWindow(). void TVirtualX::CloseWindow ; (; ). virtual . Deletes current window. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 184 of file TVirtualX.cxx. ◆ ConvertPrimarySelection(). void TVirtualX::ConvertPrimarySelection ; (; Window_t ; id, . Atom_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:55482,Clear,ClearWindow,55482,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Clear'],['ClearWindow']
Usability,"sa_MAXLENDefinition rsadef.h:86; rsa_INTunsigned short rsa_INTDefinition rsadef.h:37; rsa_MAXBIT#define rsa_MAXBITDefinition rsadef.h:71; rsa_STRLEN#define rsa_STRLENDefinition rsadef.h:87; rsa_genprimstatic TRSA_fun g_rsa_init & rsa_genprimDefinition rsafun.cxx:68; g_clear_sizstatic int g_clear_sizDefinition rsalib.cxx:41; rsa_genrsaint rsa_genrsa(rsa_NUMBER p1, rsa_NUMBER p2, rsa_NUMBER *n, rsa_NUMBER *e, rsa_NUMBER *d)Definition rsalib.cxx:82; rsa_num_fgetint rsa_num_fget(rsa_NUMBER *n, FILE *f)Definition rsalib.cxx:450; rsa_num_sputint rsa_num_sput(rsa_NUMBER *n, char *s, int l)Definition rsalib.cxx:276; rsa_decodeint rsa_decode(char *bufin, int lin, rsa_NUMBER n, rsa_NUMBER e)Definition rsalib.cxx:177; kMAXTint kMAXTDefinition rsalib.cxx:46; rsa_cmpint rsa_cmp(rsa_NUMBER *c1, rsa_NUMBER *c2)Definition rsalib.cxx:476; rsa_num_fputint rsa_num_fput(rsa_NUMBER *n, FILE *f)Definition rsalib.cxx:350; rsa_assignvoid rsa_assign(rsa_NUMBER *d, rsa_NUMBER *s)Definition rsalib.cxx:487; ginitstatic int ginitDefinition rsalib.cxx:256; gLogint gLogDefinition rsalib.cxx:45; num_initvoid num_init()Definition rsalib.cxx:258; gHEXstatic const char * gHEXDefinition rsalib.cxx:250; ghexstatic const char * ghexDefinition rsalib.cxx:251; rsa_encode_sizeint rsa_encode_size(rsa_NUMBER n)Definition rsalib.cxx:132; gbitsstatic rsa_NUMBER gbits[9]Definition rsalib.cxx:253; rsa_num_sgetint rsa_num_sget(rsa_NUMBER *n, char *s)Definition rsalib.cxx:374; rsa_encodeint rsa_encode(char *bufin, int lin, rsa_NUMBER n, rsa_NUMBER e)Definition rsalib.cxx:139; gint16static rsa_NUMBER gint16[16]Definition rsalib.cxx:254; g_enc_sizstatic int g_enc_sizDefinition rsalib.cxx:42; rsalib.h; rsa_NUMBERDefinition rsadef.h:104; rsa_NUMBER::n_lenint n_lenDefinition rsadef.h:105; rsa_NUMBER::n_partrsa_INT n_part[(300 *8/(16+1))]Definition rsadef.h:106; lTLine lDefinition textangle.C:4. netauthsrcrsalib.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rsalib_8cxx_source.html:16267,Guid,Guide,16267,doc/master/rsalib_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rsalib_8cxx_source.html,1,['Guid'],['Guide']
Usability,"sage of class TEveText - 2D & 3D text in GL ;  track.CDemonstrates usage of TEveTrackPRopagator with different magnetic field configurations ;  triangleset.CDemonstrates usage of class TEveTriangleSet ;  view3ds.CLoading and display of basic 3DS models ;  window_manager.CDemonstrates usage of EVE window-manager ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  fitLinear2.C Fit a 5d hyperplane by n points, using the linear fitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:104397,Simpl,Simple,104397,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,4,['Simpl'],['Simple']
Usability,"same name and structure) using a TChain:; TChain* chain = new TChain(""MyTree"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_1.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_2.root"");; chain->AddFile(""http://root.cern.ch/root/files/tutorials/mockupx_3.root"");; chain->Process(""MySelector.C+""); // if you have put your selector from above into MySelector.C. The last line will run the selector on the whole chain. O - but that takes ages! We need to:; Enable Proof Lite; There are two parts to using Proof lite: you need to create an instance and you need to tell the chain to use that instance:; // Create a Proof-lite instance:; TProof::Open("""");; // tell the chain that we want to use PROOF; chain->SetProof();; // And this will now use all your cores!; chain->Process(""MySelector.C+"");. Spoiler: here is the solution!; . ‹ 9. Fitting By Coding; up; TutorialSelector.C ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/10-go-parallel.html:4405,Guid,Guides,4405,d/10-go-parallel.html,https://root.cern,https://root.cern/d/10-go-parallel.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"schain, Int_t& err, Int_t offset = 0); virtual Bool_tTFormula::AnalyzeFunction(TString& chaine, Int_t& err, Int_t offset = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTF1::Browse(TBrowser* b); static voidTF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t* x, Double_t* w, Double_t eps = 3.0e-11); virtual Double_tTF1::CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 0.000001); virtual Double_tTF2::CentralMoment2(Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon = 0.000001); virtual Double_tCentralMoment3(Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t nz, Double_t az, Double_t bz, Double_t epsilon = 0.000001); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tTFormula::Compile(const char* expression = """"); virtual voidCopy(TObject& f3) const; virtual Double_tTF2::Covariance2XY(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon = 0.000001); virtual Double_tCovariance3XY(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon = 0.000001); virtual Double_tCovariance3XZ(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon = 0.000001); virtual Double_tCovariance3YZ(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t az, Double_t bz, Double_t epsilon = 0.000001); virtual TH1*CreateHistogram(); virtual char*TFormula::DefinedString(Int_t code); virtual Double_tTFormula::DefinedValue(Int_t code); virtual Int_tTFormula::DefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tTF1::Derivative(Double_t x, Double_t* params = 0, Double_t epsilon = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF3.html:2254,Clear,Clear,2254,root/html528/TF3.html,https://root.cern,https://root.cern/root/html528/TF3.html,4,['Clear'],['Clear']
Usability,"scourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome First Steps With ROOT. The ROOT framework provides a number of classes, grouped into several class cathegories. To start using ROOT, you may find useful to browse the following documents:. Processing data with ROOT (to learn about the interactive and batch use of ROOT); Analyzing data with ROOT (about histograms and trees; mathematical and statistical tools); Showing results with ROOT (explaining pads, 2D and 3D graphics, and the GUI editor); Simulation in ROOT (about the virtual Monte Carlo and the geometry packages); ROOT I/O (explaining how to use ROOT files and trees, and how to access data from d/b or other nodes). . Processing data with ROOT ›. Navigate through this book; Processing data with ROOT; Showing results with ROOT; Simulation in ROOT; ROOT I/O. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/first-steps-root-1.html:2075,learn,learn,2075,d/first-steps-root-1.html,https://root.cern,https://root.cern/d/first-steps-root-1.html,2,['learn'],['learn']
Usability,"scription; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool. class RooSimWSTool: public TNamed, public RooPrintable. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool.html:1087,simpl,simple,1087,root/html534/RooSimWSTool.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool.html,3,['simpl'],['simple']
Usability,"se ""global pointers"".. ; Definition at line 1160 of file MethodANNBase.cxx. ◆ DeclareOptions(). void TMVA::MethodANNBase::DeclareOptions ; (; ). virtual . define the options (their key words) that can be set in the option string here the options valid for ALL MVA methods are declared. ; know options:. NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function used at the neuron . Implements TMVA::MethodBase.; Reimplemented in TMVA::MethodMLP.; Definition at line 125 of file MethodANNBase.cxx. ◆ DeclFileName(). static const char * TMVA::MethodANNBase::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file MethodANNBase.h. ◆ DeleteNetwork(). void TMVA::MethodANNBase::DeleteNetwork ; (; ). private . delete/clear network ; Definition at line 241 of file MethodANNBase.cxx. ◆ DeleteNetworkLayer(). void TMVA::MethodANNBase::DeleteNetworkLayer ; (; TObjArray *& ; layer). private . delete a network layer ; Definition at line 272 of file MethodANNBase.cxx. ◆ ForceNetworkCalculations(). void TMVA::MethodANNBase::ForceNetworkCalculations ; (; ). protected . calculate input values to each neuron ; Definition at line 487 of file MethodANNBase.cxx. ◆ ForceNetworkInputs(). void TMVA::MethodANNBase::ForceNetworkInputs ; (; const Event * ; ev, . Int_t ; ignoreIndex = -1 . ). protected . force the input values of the input neurons force the value for each input neuron ; Definition at line 469 of file MethodANNBase.cxx. ◆ ForceWeights(). void TMVA::MethodANNBase::ForceWeights ; (; std::vector< Double_t > * ; weights). private . force the synapse weights ; Definition at line 453 of file MethodANNBase.cxx. ◆ GetInputNeuron(). TNeuron * TMVA::MethodANNBase::GetInputNeuron ; (; Int_t ; index). inlineprotected . Definition at line 158 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:36544,clear,clear,36544,doc/master/classTMVA_1_1MethodANNBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html,1,['clear'],['clear']
Usability,"se * PrepareUncorrEmat(const TMatrixDSparse* m1, const TMatrixDSparse* m2); propagate uncorrelated systematic errors to a covariance matrix; m0,m1 : coefficients (matrices) for propagating the errors. the error matrix is calculated by standard error propagation, where the; derivative of the result vector X wrt the matrix A is given by. dX_k / dA_ij = M0_kj * Z0_i - M1_ki * Z1_j. where:; the matrices M0 and M1 are arguments to this function; the vectors Z0, Z1 : GetDXDAZ(). The matrix A is calculated from a matrix B as. A_ij = B_ij / sum_k B_kj. where k runs over additional indices of B, not present in A.; (underflow and overflow bins, used for efficiency corrections). define: Norm_j = sum_k B_kj (data member fSumOverY). the derivative of A wrt this input matrix B is given by:. dA_ij / dB_kj = ( delta_ik - A_ij ) * 1/Norm_j. The covariance matrix Vxx is:. Vxx_mn = sum_ijlk [ (dX_m / dA_ij) * (dA_ij / dB_kj) * DB_kj; * (dX_n / dA_lj) * (dA_lj / dB_kj) ]. where DB_kj is the error on B_kj squared; Simplify the sum over k:. sum_k [ (dA_ij / dB_kj) * DB_kj * (dA_lj / dB_kj) ]; = sum_k [ ( delta_ik - A_ij ) * 1/Norm_j * DB_kj *; * ( delta_lk - A_lj ) * 1/Norm_j ]; = sum_k [ ( delta_ik*delta_lk - delta_ik*A_lj - delta_lk*A_ij; + A_ij * A_lj ) * DB_kj / Norm_j^2 ]. introduce normalized errors: Rsq_kj = DB_kj / Norm_j^2; after summing over k:; delta_ik*delta_lk*Rsq_kj -> delta_il*Rsq_ij; delta_ik*A_lj*Rsq_kj -> A_lj*Rsq_ij; delta_lk*A_ij*Rsq_kj -> A_ij*Rsq_lj; A_ij*A_lj*Rsq_kj -> A_ij*A_lj*sum_k(Rsq_kj). introduce sum of normalized errors squared: SRsq_j = sum_k(Rsq_kj). Note: Rsq_ij is stored as fDAinRelSq (excludes extra indices of B); and SRsq_j is stored as fDAinColRelSq (sum includes all indices of B). Vxx_nm = sum_ijl [ (dX_m / dA_ij) * (dX_n / dA_lj); (delta_il*Rsq_ij - A_lj*Rsq_ij - A_ij*Rsq_lj + A_ij*A_lj *SRsq_j) ]. Vxx_nm = sum_j [ F_mj * F_nj * SRsq_j; - sum_j [ G_mj * F_nj ]; - sum_j [ F_mj * G_nj ]; + sum_ij [ (dX_m / dA_ij) * (dX_n / dA_lj) * Rsq_ij ]. where:; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:22317,Simpl,Simplify,22317,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['Simpl'],['Simplify']
Usability,"se *>::iterator trfIt = fDefaultTrfs.begin();; 309 for (; trfIt != fDefaultTrfs.end(); ++trfIt); 310 delete (*trfIt);; 311 ; 312 this->DeleteAllMethods();; 313 ; 314 // problem with call of REGISTER_METHOD macro ...; 315 // ClassifierFactory::DestroyInstance();; 316 // Types::DestroyInstance();; 317 // Tools::DestroyInstance();; 318 // Config::DestroyInstance();; 319}; 320 ; 321////////////////////////////////////////////////////////////////////////////////; 322/// Delete methods.; 323 ; 324void TMVA::Factory::DeleteAllMethods(void); 325{; 326 std::map<TString, MVector *>::iterator itrMap;; 327 ; 328 for (itrMap = fMethodsMap.begin(); itrMap != fMethodsMap.end(); ++itrMap) {; 329 MVector *methods = itrMap->second;; 330 // delete methods; 331 MVector::iterator itrMethod = methods->begin();; 332 for (; itrMethod != methods->end(); ++itrMethod) {; 333 Log() << kDEBUG << ""Delete method: "" << (*itrMethod)->GetName() << Endl;; 334 delete (*itrMethod);; 335 }; 336 methods->clear();; 337 delete methods;; 338 }; 339}; 340 ; 341////////////////////////////////////////////////////////////////////////////////; 342 ; 343void TMVA::Factory::SetVerbose(Bool_t v); 344{; 345 fVerbose = v;; 346}; 347 ; 348////////////////////////////////////////////////////////////////////////////////; 349/// Book a classifier or regression method.; 350 ; 351TMVA::MethodBase *; 352TMVA::Factory::BookMethod(TMVA::DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption); 353{; 354 if (fModelPersistence); 355 gSystem->MakeDirectory(loader->GetName()); // creating directory for DataLoader output; 356 ; 357 TString datasetname = loader->GetName();; 358 ; 359 if (fAnalysisType == Types::kNoAnalysisType) {; 360 if (loader->GetDataSetInfo().GetNClasses() == 2 && loader->GetDataSetInfo().GetClassInfo(""Signal"") != NULL &&; 361 loader->GetDataSetInfo().GetClassInfo(""Background"") != NULL) {; 362 fAnalysisType = Types::kClassification; // default is classification; 363 } else if (loader-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:13336,clear,clear,13336,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['clear'],['clear']
Usability,"se of error (like server not initialized).; Examples:; ""Apple-WM"" - does server run on MacOS X;; ""XINERAMA"" - does server support Xinerama.; See also the output of xdpyinfo. void PutImage(Int_t offset, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t* image, Drawable_t id). void MapGCValues(GCValues_t& gval, ULong_t& xmask, XGCValues& xgval, Bool_t tox = kTRUE); Private methods used for GUI. void MapSetWindowAttributes(SetWindowAttributes_t* attr, ULong_t& xmask, XSetWindowAttributes& xattr). void MapColorStruct(ColorStruct_t* color, XColor& xcolor). void MapPictureAttributes(PictureAttributes_t& attr, XpmAttributes& xpmattr, Bool_t toxpm = kTRUE). void MapEvent(Event_t& ev, XEvent& xev, Bool_t tox = kTRUE). void MapEventMask(UInt_t& emask, UInt_t& xemask, Bool_t tox = kTRUE). void MapKeySym(UInt_t& keysym, UInt_t& xkeysym, Bool_t tox = kTRUE). Bool_t AllocColor(unsigned long cmap, XColor* color); needed by TGX11TTF. void ClearWindow(). void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2). Handle_t GetNativeEvent() const; { return (Handle_t) fXEvent; }. Float_t GetTextMagnitude(); { return fTextMagnitude; }. Bool_t HasTTFonts() const; { return fHasTTFonts; }. void MoveWindow(Int_t wid, Int_t x, Int_t y). Int_t OpenDisplay(Display* display). void QueryPointer(Int_t& ix, Int_t& iy). void ResizeWindow(Int_t wid). void SetCursor(Int_t win, ECursor cursor). void SetTextMagnitude(Float_t mgn = 1); { fTextMagnitude = mgn;}. void GetWindowAttributes(Window_t id, WindowAttributes_t& attr); Methods used for GUI. void MapWindow(Window_t id). void MapSubwindows(Window_t id). void MapRaised(Window_t id). void UnmapWindow(Window_t id). void DestroyWindow(Window_t id). void DestroySubwindows(Window_t id). void RaiseWindow(Window_t id). void LowerWindow(Window_t id). void MoveResizeWindow(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h). void IconifyWindow(Window_t id). void ReparentWindow(Window_t id, Window_t pid, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:39483,Clear,ClearWindow,39483,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,3,['Clear'],['ClearWindow']
Usability,"se of error (like server not initialized).; Examples:; ""Apple-WM"" - does server run on MacOS X;; ""XINERAMA"" - does server support Xinerama.; See also the output of xdpyinfo. void PutImage(Int_t offset, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t* image, Drawable_t id). void MapGCValues(GCValues_t& gval, ULong_t& xmask, XGCValues& xgval, Bool_t tox = kTRUE); Private methods used for GUI. void MapSetWindowAttributes(SetWindowAttributes_t* attr, ULong_t& xmask, XSetWindowAttributes& xattr). void MapColorStruct(ColorStruct_t* color, XColor& xcolor). void MapPictureAttributes(PictureAttributes_t& attr, XpmAttributes& xpmattr, Bool_t toxpm = kTRUE). void MapEvent(Event_t& ev, XEvent& xev, Bool_t tox = kTRUE). void MapEventMask(UInt_t& emask, UInt_t& xemask, Bool_t tox = kTRUE). void MapKeySym(UInt_t& keysym, UInt_t& xkeysym, Bool_t tox = kTRUE). Bool_t AllocColor(unsigned long cmap, XColor* color); needed by TGX11TTF. void ClearWindow(). void DrawLine(Int_t x1, Int_t y1, Int_t x2, Int_t y2). void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode). Handle_t GetNativeEvent() const; { return (Handle_t) fXEvent; }. void GetTextExtent(UInt_t& w, UInt_t& h, char* mess). Float_t GetTextMagnitude(); { return fTextMagnitude; }. Bool_t HasTTFonts() const; { return fHasTTFonts; }. void MoveWindow(Int_t wid, Int_t x, Int_t y). Int_t OpenDisplay(Display* display). void QueryPointer(Int_t& ix, Int_t& iy). void ResizeWindow(Int_t wid). void SetCursor(Int_t win, ECursor cursor). void SetTextMagnitude(Float_t mgn = 1); { fTextMagnitude = mgn;}. void GetWindowAttributes(Window_t id, WindowAttributes_t& attr); Methods used for GUI. void MapWindow(Window_t id). void MapSubwindows(Window_t id). void MapRaised(Window_t id). void UnmapWindow(Window_t id). void DestroyWindow(Window_t id). void DestroySubwindows(Window_t id). void RaiseWindow(Window_t id). void LowerWindow(Window_t id",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGX11.html:40915,Clear,ClearWindow,40915,root/html534/TGX11.html,https://root.cern,https://root.cern/root/html534/TGX11.html,1,['Clear'],['ClearWindow']
Usability,"se of success. Bool_t cd1(const char* path); Change current directory to ""this"" directory . Using path one can; change the current directory to ""path"". The absolute path syntax is:; file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory; in the file. Relative syntax is relative to ""this"" directory. E.g:; ../aa. Returns kFALSE in case path does not exist. Bool_t Cd(const char* path); Change current directory to ""path"". The absolute path syntax is:; file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory; in the file. Relative syntax is relative to the current directory; gDirectory, e.g.: ../aa. Returns kTRUE in case of success. Bool_t Cd1(const char* path); Change current directory to ""path"". The path syntax is:; file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory; in the file. Returns kFALSE in case path does not exist. void Clear(Option_t* option = """"); Delete all objects from a Directory list-*-; *-* =======================================. void Close(Option_t* option = """"); -- Delete all objects from memory and directory structure itself. void DeleteAll(Option_t* option = """"); -- Delete all objects from memory. void Delete(const char* namecycle = """"); Delete Objects or/and keys in a directory; *-* =========================================; namecycle has the format name;cycle; namecycle = """" same as namecycle =""T*""; name = * means all; cycle = * means all cycles (memory and keys); cycle = """" or cycle = 9999 ==> apply to a memory object; When name=* use T* to delete subdirectories also. To delete one directory, you must specify the directory cycle,; eg. file.Delete(""dir1;1"");. examples:; foo : delete object named foo in memory; foo* : delete all objects with a name starting with foo; foo;1 : delete cycle 1 of foo on file; foo;* : delete all cycles of foo on file and also from memory; *;2 : delete all objects on file having the cycle 2; *;* : delete all objects ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDirectory.html:13226,Clear,Clear,13226,root/html528/TDirectory.html,https://root.cern,https://root.cern/root/html528/TDirectory.html,6,['Clear'],['Clear']
Usability,"se the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:14517,simpl,simple,14517,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['simpl'],['simple']
Usability,"se); x2[m] = h2.GetBinContent(k + 1, l + 1) + ROOT.gRandom.Gaus(0, pixelNoise); ; sgn.Fill(); bkg.Fill(); ; sgn.Write(); bkg.Write(); ; print(""Signal and background tree with images data written to the file %s"", f.GetName()); sgn.Print(); bkg.Print(); f.Close(); ; hasGPU = ""tmva-gpu"" in ROOT.gROOT.GetConfigFeatures(); hasCPU = ""tmva-cpu"" in ROOT.gROOT.GetConfigFeatures(); ; nevt = 1000 # use a larger value to get better results; ; if (not hasCPU and not hasGPU) :; ROOT.Warning(""TMVA_CNN_Classificaton"",""ROOT is not supporting tmva-cpu and tmva-gpu skip using TMVA-DNN and TMVA-CNN""); useTMVACNN = False; useTMVADNN = False; ; if not ""tmva-pymva"" in ROOT.gROOT.GetConfigFeatures():; useKerasCNN = False; usePyTorchCNN = False; else:; TMVA.PyMethodBase.PyInitialize(); ; if not useTMVACNN:; ROOT.Warning(; ""TMVA_CNN_Classificaton"",; ""TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for CNN"",; ); ; writeOutputFile = True; ; num_threads = 4 # use max 4 threads; max_epochs = 10 # maximum number of epochs used for training; ; ; # do enable MT running; if ""imt"" in ROOT.gROOT.GetConfigFeatures():; ROOT.EnableImplicitMT(num_threads); ROOT.gSystem.Setenv(""OMP_NUM_THREADS"", ""1"") # switch OFF MT in OpenBLAS; print(""Running with nthreads = {}"".format(ROOT.GetThreadPoolSize())); else:; print(""Running in serial mode since ROOT does not support MT""); ; ; ; ; outputFile = None; if writeOutputFile:; outputFile = TFile.Open(""TMVA_CNN_ClassificationOutput.root"", ""RECREATE""); ; ; ## Create TMVA Factory; ; # Create the Factory class. Later you can choose the methods; # whose performance you'd like to investigate.; ; # The factory is the major TMVA object you have to interact with. Here is the list of parameters you need to pass; ; # - The first argument is the base of the name of all the output; # weight files in the directory weight/ that will be created with the; # method parameters; ; # - The second argument is the output file for the training results; ; #",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:4488,Learn,Learning,4488,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['Learn'],['Learning']
Usability,"se, . TVectorD * ; be, . TObjArray * ; l, . Int_t ; nmc = 50000, . bool ; stat = false, . TRandom * ; generator = nullptr . ). static . Definition at line 348 of file TLimit.cxx. ◆ ComputeLimit() [5/5]. TConfidenceLevel * TLimit::ComputeLimit ; (; TLimitDataSource * ; data, . Int_t ; nmc = 50000, . bool ; stat = false, . TRandom * ; generator = nullptr . ). static . Definition at line 102 of file TLimit.cxx. ◆ DeclFileName(). static const char * TLimit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 52 of file TLimit.h. ◆ Fluctuate(). bool TLimit::Fluctuate ; (; TLimitDataSource * ; input, . TLimitDataSource * ; output, . bool ; init, . TRandom * ; generator, . bool ; stat = false . ). staticprotected . Definition at line 227 of file TLimit.cxx. ◆ IsA(). virtual TClass * TLimit::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 52 of file TLimit.h. ◆ LogLikelihood(). Double_t TLimit::LogLikelihood ; (; Double_t ; s, . Double_t ; b, . Double_t ; b2, . Double_t ; d . ). staticprotected . Definition at line 406 of file TLimit.cxx. ◆ Streamer(). virtual void TLimit::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TLimit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 52 of file TLimit.h. Member Data Documentation. ◆ fgSystNames. TOrdCollection * TLimit::fgSystNames = new TOrdCollection(). staticprivate . Collection of systematics names. ; Definition at line 51 of file TLimit.h. ◆ fgTable. TArrayD * TLimit::fgTable = new TArrayD(0). staticprivate . A log table... just to speed up calculation. ; Definition at line 50 of file TLimit.h. Libraries for TLimit:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TLimit.h; hist/hist/src/TLimit.cxx. TLimit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimit.html:10004,Guid,Guide,10004,doc/master/classTLimit.html,https://root.cern,https://root.cern/doc/master/classTLimit.html,1,['Guid'],['Guide']
Usability,"se. The user takes ownership of the fit result.; Template Parameters. CmdArgs_tTemplate types for optional command arguments. Can either be an arbitrary number of RooCmdArg or a single RooLinkedList. NoteThis front-end function should not be re-implemented in derived PDF types. If you mean to customize the likelihood fitting routine, you need to override the virtual RooAbsPdf::fitToImpl() method.; The following named arguments are supported:. Type of CmdArg Options to control construction of -log(L) . All command arguments that can also be passed to the NLL creation method. See alsoRooAbsPdf::createNLL(). Options to control flow of fit procedure . Minimizer(""<type>"", ""<algo>"") Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface, but others can be specified (through RooMinimizer interface). . Type Algorithm . Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve) . Minuit2 migrad, simplex, minimize, scan . GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent . GSLSimAn - . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Optimize(bool flag) Activate constant term optimization of test statistic during minimization (on by default) . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, off by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 to 2, default is 1) . MaxCalls(int n) Change maximum number of likelihood function calls from MINUIT (if n <= 0, the default of 500 * #parameters is used) . EvalErrorWall(bool flag=true) When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter to force it out of that region. This can, h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:105655,simpl,simplex,105655,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['simpl'],['simplex']
Usability,"se::SubRender_foo render_foo); voidSwapBuffers() const. private:. TGLViewer(const TGLViewer&); voidInitSecondaryObjects(); TGLViewer&operator=(const TGLViewer&). Data Members; public:. enum ECameraType { kCameraPerspXOZ; kCameraPerspYOZ; kCameraPerspXOY; kCameraOrthoXOY; kCameraOrthoXOZ; kCameraOrthoZOY; kCameraOrthoXnOY; kCameraOrthoXnOZ; kCameraOrthoZnOY; };; enum ESecSelType { kOnRequest; kOnKeyMod1; };; enum EPushAction { kPushStd; kPushCamCenter; kPushAnnotate; };; enum EDragAction { kDragNone; kDragCameraRotate; kDragCameraTruck; kDragCameraDolly; kDragOverlay; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum TGLLockable::ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. TGLAutoRotator*fAutoRotator!; Bool_tfAxesDepthTest! remove guides hidden-lines; Int_tfAxesType! axes type; TGLCamera*TGLViewerBase::fCameraCamera for rendering.; TGLCameraOverlay*fCameraOverlay! markup size of viewport in scene units; Bool_tTGLViewerBase::fChangedChange requiring redraw is pending.; TGLClip*TGLViewerBase::fClipViewer clipping-plane.; TGLClipSet*fClipSet!; TContextMenu*fContextMenu!; TGLCamera*fCurrentCamera!; TGLOverlayElement*fCurrentOvlElm! current overlay element; TGLSelectRecordfCurrentSelRec! select record in use as selected; TGLColorSetfDarkColorSet! color-set with dark background; Bool_tfDebugMode! debug mode (forced rebuild + draw scene/frustum/interest boxes); TGLViewer::EDragActionfDragAction; Bool_tfDrawCameraCenter! reference marker on?; TGEventHandler*fEventHandler! event handler; Float_tfFader! fade the view (0 - no fade/default, 1 - full fade/no rendering done); TGLContextIdentity*fGLCtxId!for embedded gl viewer; Int_tfGLDevice!for embedded gl viewer; TGLWidget*fGLWidget; TGedEditor*fGedEditor! GED editor; Bool_tfIgnoreSizesOnUpdate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLViewer.html:18593,guid,guides,18593,root/html528/TGLViewer.html,https://root.cern,https://root.cern/root/html528/TGLViewer.html,4,['guid'],['guides']
Usability,"se::fAvailableColumns. protected . The columns are connected either to a sink or to a source (not to both); they are owned by the field. ; Contains all columns of all representations in order of representation and column index. ; Definition at line 235 of file RFieldBase.hxx. ◆ fColumnRepresentatives. std::vector<std::reference_wrapper<const ColumnRepresentation_t> > ROOT::Experimental::RFieldBase::fColumnRepresentatives. protected . Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ; Otherwise (if empty) GetColumnRepresentatives() returns a vector with a single element, the default representation. ; Definition at line 250 of file RFieldBase.hxx. ◆ fDescription. std::string ROOT::Experimental::RFieldBase::fDescription. private . Free text set by the user. ; Definition at line 181 of file RFieldBase.hxx. ◆ fIsSimple. bool ROOT::Experimental::RFieldBase::fIsSimple. private . A field qualifies as simple if it is both mappable and has no post-read callback. ; Definition at line 175 of file RFieldBase.hxx. ◆ fName. std::string ROOT::Experimental::RFieldBase::fName. private . The field name relative to its parent field. ; Definition at line 167 of file RFieldBase.hxx. ◆ fNRepetitions. std::size_t ROOT::Experimental::RFieldBase::fNRepetitions. private . For fixed sized arrays, the array length. ; Definition at line 173 of file RFieldBase.hxx. ◆ fOnDiskId. DescriptorId_t ROOT::Experimental::RFieldBase::fOnDiskId = kInvalidDescriptorId. private . When the columns are connected to a page source or page sink, the field represents a field id in the corresponding RNTuple descriptor. ; This on-disk ID is set in RPageSink::Create() for writing and by RFieldDescriptor::CreateField() when recreating a field / model from the stored descriptor. ; Definition at line 179 of file RFieldBase.hxx. ◆ fOnDiskTypeChecksum. std::uint32_t ROOT::Experimental::RFieldBase::fOnDiskTypeChecksum = 0. protected . TClass checksum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:54505,simpl,simple,54505,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['simpl'],['simple']
Usability,"se; 9470///; 9471/// Returns:; 9472/// - 0 learning phase stopped or not active; 9473/// - -1 on error; 9474 ; 9475Int_t TTree::StopCacheLearningPhase(); 9476{; 9477 if (!GetTree()) {; 9478 if (LoadTree(0)<0) {; 9479 Error(""StopCacheLearningPhase"",""Could not load a tree"");; 9480 return -1;; 9481 }; 9482 }; 9483 if (GetTree()) {; 9484 if (GetTree() != this) {; 9485 return GetTree()->StopCacheLearningPhase();; 9486 }; 9487 } else {; 9488 Error(""StopCacheLearningPhase"", ""No tree is available. Could not stop cache learning phase"");; 9489 return -1;; 9490 }; 9491 ; 9492 TFile *f = GetCurrentFile();; 9493 if (!f) {; 9494 Error(""StopCacheLearningPhase"", ""No file is available. Could not stop cache learning phase"");; 9495 return -1;; 9496 }; 9497 TTreeCache *tc = GetReadCache(f,true);; 9498 if (!tc) {; 9499 Error(""StopCacheLearningPhase"", ""No cache is available. Could not stop learning phase"");; 9500 return -1;; 9501 }; 9502 tc->StopLearningPhase();; 9503 return 0;; 9504}; 9505 ; 9506////////////////////////////////////////////////////////////////////////////////; 9507/// Set the fTree member for all branches and sub branches.; 9508 ; 9509static void TBranch__SetTree(TTree *tree, TObjArray &branches); 9510{; 9511 Int_t nb = branches.GetEntriesFast();; 9512 for (Int_t i = 0; i < nb; ++i) {; 9513 TBranch* br = (TBranch*) branches.UncheckedAt(i);; 9514 br->SetTree(tree);; 9515 ; 9516 Int_t writeBasket = br->GetWriteBasket();; 9517 for (Int_t j = writeBasket; j >= 0; --j) {; 9518 TBasket *bk = (TBasket*)br->GetListOfBaskets()->UncheckedAt(j);; 9519 if (bk) {; 9520 tree->IncrementTotalBuffers(bk->GetBufferSize());; 9521 }; 9522 }; 9523 ; 9524 TBranch__SetTree(tree,*br->GetListOfBranches());; 9525 }; 9526}; 9527 ; 9528////////////////////////////////////////////////////////////////////////////////; 9529/// Set the fTree member for all friend elements.; 9530 ; 9531void TFriendElement__SetTree(TTree *tree, TList *frlist); 9532{; 9533 if (frlist) {; 9534 TObjLink *lnk = frlist->First",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:365392,learn,learning,365392,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['learn'],['learning']
Usability,"seCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfNameobject identifier; TStringfTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNamed(const TNamed& named); TNamed copy ctor. TNamed& operator=(const TNamed& rhs); TNamed assignment operator. void Clear(Option_t* option = """"); Set name and title to empty strings (""""). TObject * Clone(const char* newname = """") const; Make a clone of an object using the Streamer facility.; If newname is specified, this will be the name of the new object. Int_t Compare(const TObject* obj) const; Compare two TNamed objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp). void Copy(TObject& named) const; Copy this to obj. void FillBuffer(char*& buffer); Encode TNamed into output buffer. void ls(Option_t* option = """") const; List TNamed name and title. void Print(Option_t* option = """") const; Print TNamed name and title. void SetName(const char* name); Change (i.e. set) the name of the TNamed.; WARNING: if the object is a member of a THashTable or THashList container; the container must be Rehash()'ed after SetName(). For example the list; of objects in the current directory is a THashList. void SetNameTitle(const char* name, const char* title); Change (i.e. set) all the TNamed parameters (name and ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNamed.html:5770,Clear,Clear,5770,root/html528/TNamed.html,https://root.cern,https://root.cern/root/html528/TNamed.html,4,['Clear'],['Clear']
Usability,"seProgressDialog(); Close progress dialog. void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset progress dialog. void StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total); Send startup message. void DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total); Send dataset preparation status. void SendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Send or notify data set status. void QueryResultReady(const char* ref); Notify availability of a query result. void ValidateDSet(TDSet* dset); Validate a TDSet. void AddInputData(TObject* obj, Bool_t push = kFALSE); Add data objects that might be needed during the processing of; the selector (see Process()). This object can be very large, so they; are distributed in an optimized way using a dedicated file.; If push is TRUE the input data are sent over even if no apparent change; occured to the list. void ClearInputData(TObject* obj = 0); Remove obj form the input data list; if obj is null (default), clear the; input data info. void ClearInputData(const char* name); Remove obj 'name' form the input data list;. void SetInputDataFile(const char* datafile); Set the file to be used to optimally distribute the input data objects.; If the file exists the object in the file are added to those in the; fInputData list. If the file path is null, a default file will be created; at the moment of sending the processing request with the content of; the fInputData list. See also SendInputDataFile. void SendInputDataFile(); Send the input data objects to the master; the objects are taken from the; dedicated list and / or the specified file.; If the fInputData is empty the specified file is sent over.; If there is no specified file, a file named ""inputdata.root"" is created locally; with the content of fInputData and sent over to the master.; If both fInputData and the specified file are not empty, a copy of the file; is made locally and augmented with the conte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:71509,Clear,ClearInputData,71509,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,12,"['Clear', 'clear']","['ClearInputData', 'clear']"
Usability,"seRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<std::pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodMLP.html:20600,learn,learning,20600,root/html530/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodMLP.html,15,"['clear', 'learn']","['clear', 'learning']"
Usability,"secOffset = 0) const; static time_tMktimeFromUTC(tm_t* tmstruct); doubleoperator double() const; TTimeStamp&operator=(const TTimeStamp&); voidPrint(Option_t* option = """") const; voidSet(); voidSet(UInt_t tloc, Bool_t isUTC, Int_t secOffset, Bool_t dosDate); voidSet(Int_t date, Int_t time, Int_t nsec, Bool_t isUTC, Int_t secOffset); voidSet(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec, Int_t nsec, Bool_t isUTC, Int_t secOffset); voidSetNanoSec(Int_t nsec); voidSetSec(Int_t sec); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. voidNormalizeNanoSec(). Data Members; private:. Int_tfNanoSecnanoseconds; Int_tfSecseconds. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTimeStamp(); Default ctor. Create a TTimeStamp and set it to the current time; (as best possible). The nanosecond part is faked so that subsequenct; calls simply add 1 to ensure that sequential calls are distinct; (and sortable). TTimeStamp(UInt_t year, UInt_t month, UInt_t day, UInt_t hour, UInt_t min, UInt_t sec, UInt_t nsec = 0, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified year, month,; day, time, hour, minute, second and nanosec.; If !isUTC then it is assumed to be the standard local time zone. If local time is PST then one can use; TTimeStamp(year,month,day,hour,min,sec,nsec,kFALSE,0);; or; Int_t secOffset = 8*60*60;; TTimeStamp(year,month,day,hour,min,sec,nsec,kTRUE,8*60*60);. TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified date, time, nanosec.; If !isUTC then it is assumed to be the standard local time zone. TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); Create a TTimeStamp and set it to tloc which must be a time_t value; returned by time(). This value is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:3905,simpl,simply,3905,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,1,['simpl'],['simply']
Usability,"sed ;  ; void SetShortestInterval ();  set the Bayesian calculator to compute the shortest interval (default is central interval) to switch off SetLeftSideTailFraction to the right value ;  ; void SetTestSize (double size) override;  set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval) ;  ; double Size () const override;  Get the size of the test (eg. rate of Type I error) ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::IntervalCalculator; virtual ~IntervalCalculator ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:7631,Clear,Clear,7631,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['Clear'],['Clear']
Usability,"sed by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specified slave. void SetupFeedback(); Setup reporting of feedback objects. void StopFeedback(); Stop reporting of feedback objects. Bool_t HandleTimer(TTimer* timer); Send feedback objects to client. TDSetElement * GetNextPacket(TSlave* slave, TMessage* r); Get next packet for specified slave. Bool_t IsClient() const; Is the player running on the client?. Long64_t DrawSelect(TDSet* set, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Draw (support for TChain::Draw()).; Returns -1 in case of error or number of selected events in case of success. void SetInitTime(); Set init time. TVirtualPacketizer * GetPacketizer() const; { return 0; }. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProof * GetProof() const; { return fProof; }. TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerRemote.html:18926,feedback,feedback,18926,root/html528/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html528/TProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"sed for spline fit. ; Definition at line 90 of file OptimizeConfigParameters.h. ◆ fMvaBkgFineBin. TH1D* TMVA::OptimizeConfigParameters::fMvaBkgFineBin. private . MVA distribution for bakgr. events. ; Definition at line 93 of file OptimizeConfigParameters.h. ◆ fMvaSig. TH1D* TMVA::OptimizeConfigParameters::fMvaSig. private . MVA distribution for signal events, used for spline fit. ; Definition at line 89 of file OptimizeConfigParameters.h. ◆ fMvaSigFineBin. TH1D* TMVA::OptimizeConfigParameters::fMvaSigFineBin. private . MVA distribution for signal events. ; Definition at line 92 of file OptimizeConfigParameters.h. ◆ fNotDoneYet. Bool_t TMVA::OptimizeConfigParameters::fNotDoneYet. private . flat to indicate of Method Transformations have been obtained yet or not (normally done in MethodBase::TrainMethod) ; Definition at line 95 of file OptimizeConfigParameters.h. ◆ fOptimizationFitType. TString TMVA::OptimizeConfigParameters::fOptimizationFitType. private . which type of optimisation procedure to be used ; Definition at line 88 of file OptimizeConfigParameters.h. ◆ fTunedParameters. std::map<TString,Double_t> TMVA::OptimizeConfigParameters::fTunedParameters. private . parameters included in the tuning ; Definition at line 85 of file OptimizeConfigParameters.h. ◆ fTuneParameters. std::map<TString,TMVA::Interval*> TMVA::OptimizeConfigParameters::fTuneParameters. private . parameters included in the tuning ; Definition at line 84 of file OptimizeConfigParameters.h. ◆ TestOptimizeConfigParameters. friend TMVA::OptimizeConfigParameters::TestOptimizeConfigParameters. Definition at line 52 of file OptimizeConfigParameters.h. Libraries for TMVA::OptimizeConfigParameters:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/OptimizeConfigParameters.h; tmva/tmva/src/OptimizeConfigParameters.cxx. TMVAOptimizeConfigParameters. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:13231,Guid,Guide,13231,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Guid'],['Guide']
Usability,"sed for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedSelect(const TGWindow* p, Int_t id); Create pattern select button. ~TGedSelect(); Destructor of pattern select button. Bool_t HandleButton(Event_t* event); Handle mouse button events in pattern select button. void Enable(); Set widget state flag (kTRUE=enabled, kFALSE=disabled). void Disable(); Clear widget state flag. void DoRedraw(); Draw separator and arrow. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw small triangle. TGedSelect(const TGWindow* p, Int_t id). void SetPopup(TGedPopup* p); { fPopup = p; }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGedSelect.html:24299,Clear,Clear,24299,root/html604/TGedSelect.html,https://root.cern,https://root.cern/root/html604/TGedSelect.html,1,['Clear'],['Clear']
Usability,"sed for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedSelect(const TGWindow* p, Int_t id); Create pattern select button. ~TGedSelect(); Destructor of pattern select button. Bool_t HandleButton(Event_t* event); Handle mouse button events in pattern select button. void Enable(); Set widget state flag (kTRUE=enabled, kFALSE=disabled). void Disable(); Clear widget state flag. void DoRedraw(); Draw separator and arrow. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw small triangle. TGedSelect(const TGWindow* p, Int_t id). void SetPopup(TGedPopup* p); { fPopup = p; }. » Author: Marek Biskup, Ilka Antcheva 24/07/03 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGedSelect.html:24299,Clear,Clear,24299,root/html602/TGedSelect.html,https://root.cern,https://root.cern/root/html602/TGedSelect.html,1,['Clear'],['Clear']
Usability,"sed in radians.Definition TMath.h:624; TMath::Log2Double_t Log2(Double_t x)Returns the binary (base-2) logarithm of x.Definition TMath.cxx:107; TMath::BesselK1Double_t BesselK1(Double_t x)Modified Bessel function I_1(x)Definition TMath.cxx:1529; TMath::MedianDouble_t Median(Long64_t n, const T *a, const Double_t *w=nullptr, Long64_t *work=nullptr)Same as RMS.Definition TMath.h:1272; TMath::BubbleHighvoid BubbleHigh(Int_t Narr, Double_t *arr1, Int_t *arr2)Bubble sort variant to obtain the order of an array's elements into an index in order to do more usef...Definition TMath.cxx:1314; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::BesselI1Double_t BesselI1(Double_t x)Modified Bessel function K_0(x)Definition TMath.cxx:1494; TMath::ErfDouble_t Erf(Double_t x)Computation of the error function erf(x).Definition TMath.cxx:190; TMath::PermuteBool_t Permute(Int_t n, Int_t *a)Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinc...Definition TMath.cxx:2557; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::PoissonIDouble_t PoissonI(Double_t x, Double_t par)Computes the Discrete Poisson distribution function for (x,par).Definition TMath.cxx:615; TMath::CauchyDistDouble_t CauchyDist(Double_t x, Double_t t=0, Double_t s=1)Computes the density of Cauchy distribution at point x by default, standard Cauchy distribution is us...Definition TMath.cxx:2175; TMath::ATanDouble_t ATan(Double_t)Returns the principal value of the arc tangent of x, expressed in radians.Definition TMath.h:640; TMath::StruveL1Double_t StruveL1(Double_t x)Modified Struve functions of order 0.Definition TMath.cxx:1970; TMath::Gnconstexpr Double_t Gn()Standard accelerati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:59543,Simpl,Simple,59543,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,1,['Simpl'],['Simple']
Usability,"sed to our generateEvent() implementation, but otherwise its value is arbitrary. The default implementation of this method returns zero. Subclasses will usually implement this method using the matchArgs() methods to advertise the algorithms they provide. ; Reimplemented from RooAbsPdf.; Definition at line 81 of file RooLandau.cxx. ◆ IsA(). TClass * RooLandau::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 56 of file RooLandau.h. ◆ Streamer(). void RooLandau::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooLandau::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file RooLandau.h. ◆ translate(). void RooLandau::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 66 of file RooLandau.cxx. Member Data Documentation. ◆ mean. RooRealProxy RooLandau::mean. protected . Definition at line 47 of file RooLandau.h. ◆ sigma. RooRealProxy RooLandau::sigma. protected . Definition at line 48 of file RooLandau.h. ◆ x. RooRealProxy RooLandau::x. protected . Definition at line 46 of file RooLandau.h. Libraries for RooLandau:. [legend]; The documentation for this class was generated from the following ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLandau.html:79168,simpl,simple,79168,doc/master/classRooLandau.html,https://root.cern,https://root.cern/doc/master/classRooLandau.html,1,['simpl'],['simple']
Usability,"see TGView. ; Definition at line 22 of file TGTextView.h. Public Member Functions;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, const char *string, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent, UInt_t w, UInt_t h, TGText *text, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  TGTextView (const TGWindow *parent=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create a text view widget. ;  ;  ~TGTextView () override;  Cleanup text view widget. ;  ; virtual void AddLine (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddLineFast (const char *string);  Add a line of text to the view widget. ;  ; virtual void AddText (TGText *text);  Add text to the view widget. ;  ; virtual void AdjustWidth ();  Adjust widget width to longest line. ;  ; void Clear (Option_t *="""") override;  Clear text view widget. ;  ; virtual void Clicked (const char *word);  ; virtual Bool_t Copy ();  Copy selected text to clipboard. ;  ; virtual void DataChanged ();  ; virtual void DataDropped (const char *fname);  ; virtual void DoubleClicked (const char *word);  ; TGText * GetText () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in text editor. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; Bool_t HandleDNDDrop (TDNDData *data) override;  Handle Drop event. ;  ; Atom_t HandleDNDEnter (Atom_t *typelist) override;  Handle Drag Enter event. ;  ; Bool_t HandleDNDLeave () override;  Handle Drag Leave event. ;  ; Atom_t HandleDNDPosition (Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot) override;  Handle Drag position event. ;  ; Bool_t HandleDoubleClick (Event_t *event) override;  handle double click ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle mouse motion event in the text ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextView.html:1682,Clear,Clear,1682,doc/master/classTGTextView.html,https://root.cern,https://root.cern/doc/master/classTGTextView.html,2,['Clear'],['Clear']
Usability,"sel);  ; virtual void SetSelOption (const char *opt);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunCPU.html:3670,Clear,Clear,3670,doc/master/classTProofBenchRunCPU.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunCPU.html,2,['Clear'],['Clear']
Usability,"selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the next request comes. Are there cases for which the usage of TTreeCache is detrimental for performance?; Yes, some corner cases. For example, when reading only a small fraction of all entries such that not all branch buffers are read. General Description; This class acts as a file cache, registering automatically the baskets from the branches being processed via direct manipulation of TTrees or with tools such as TTree::Draw, TTree::Process, TSelector, TTreeReader and RDataFrame when in the learning phase. The learning phase is by default 100 entries. It can be changed via TTreeCache::SetLearnEntries.; The usage of a TTreeCache can considerably improve the runtime performance at the price of a modest investment in memory, in particular when the TTree is accessed remotely, e.g. via a high latency network.; For each TTree being processed a TTreeCache object is created. This object is automatically deleted when the Tree is deleted or when the file is deleted. The user can change the size of the cache with the TTree::SetCacheSize method (by default the size is 30 Megabytes). This feature can be controlled with the environment variable ROOT_TTREECACHE_SIZE or the TTreeCache.Size option. The entry range for which the cache is active can also be set with the SetEntryRange method. Changes of behavior when using TChain and TEventList; The usage of TChain or TEventList have influence on the behaviour of the cache:. Special case of a TChain Once the training is done on the first Tree, the list of branches in the cache i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:2516,learn,learning,2516,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"selecting the greater of the two values:; 372 /// *id.EntryRange().second* which is the upper event entry range of the processed sample; 373 /// and the current value of the event entries in the *fSampleNameToEventEntries* map.; 374 /// In the single threaded case, the two numbers are the same as the entry range corresponds; 375 /// to the number of events in an individual file (each sample is simply a single file).; 376 /// In the multithreaded case, the idea is to accumulate the higher event entry value until; 377 /// the total number of events in a given file is reached.; 378 void registerNewSample(unsigned int /*slot*/, const ROOT::RDF::RSampleInfo &id); 379 {; 380 std::lock_guard<std::mutex> lock(fSampleNameToEventEntriesMutex);; 381 fSampleNameToEventEntries[id.AsString()] =; 382 std::max(id.EntryRange().second, fSampleNameToEventEntries[id.AsString()]);; 383 }; 384 ; 385 /// Thread-safe callback for RDataFrame.; 386 /// It will record elapsed times and event statistics, and print a progress bar every n seconds (set by the; 387 /// fPrintInterval). \param slot Ignored. \param value Ignored.; 388 template <typename T>; 389 void operator()(unsigned int /*slot*/, T &value); 390 {; 391 operator()(value);; 392 }; 393 // clang-format off; 394 /// Thread-safe callback for RDataFrame.; 395 /// It will record elapsed times and event statistics, and print a progress bar every n seconds (set by the fPrintInterval).; 396 /// \param value Ignored.; 397 // clang-format on; 398 template <typename T>; 399 void operator()(T & /*value*/); 400 {; 401 using namespace std::chrono;; 402 // ***************************************************; 403 // Warning: Here, everything needs to be thread safe:; 404 // ***************************************************; 405 fProcessedEvents += fIncrement;; 406 ; 407 // We only print every n seconds.; 408 if (duration_cast<seconds>(system_clock::now() - fLastPrintTime) < fPrintInterval) {; 409 return;; 410 }; 411 ; 412 // ***********************",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:18465,progress bar,progress bar,18465,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['progress bar'],['progress bar']
Usability,"self a Bayesian. Function Members (Methods); public:. virtual~TRolke(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateInterval(Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; boolGetBounding() const; Double_tGetCL() const; boolGetCriticalNumber(Int_t& ncrit, Int_t maxtry = -1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; boolGetLimits(Double_t& low, Double_t& high); boolGetLimitsML(Double_t& low, Double_t& high, Int_t& out_x); boolGetLimitsQuantile(Double_t& low, Double_t& high, Int_t& out_x, Double_t integral = 0.5); Double_tGetLowerLimit(); virtual const char*TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRolke.html:5798,Clear,Clear,5798,root/html602/TRolke.html,https://root.cern,https://root.cern/root/html602/TRolke.html,2,['Clear'],['Clear']
Usability,"self. Otherwise, there will be a separate TBasket data record for each additional basket used on the branch, each containing a TBasket object containing user data.; By default, the additional TBasket data records are stored in the same file as that of the corresponding TTree data record. However, the user may specify a separate file for a given branch. If the data for that branch fits into one basket, this option has no effect. Otherwise, the additional TBasket records are written into the specified file, rather than the file containing the TTree data record itself. In this case, a TBranch data record for the specified branch is also written to the specified file, containing the TBranch object for the specified branch.; Streamer information for TTree related classes shows the streamer information for the TTree, TBranch, TLeaf, and some related classes, together with some additional commentary. For writing to a ROOTIO file, the streamers for these three classes act exactly as those of default generated streamers, except that, if the user has specified a separate file for a branch, the TBranch streamer also writes the TBranch object as a keyed data record to the specified file.; There is no streamer information for the TBasket class. The custom written TBasket streamer internally handles the packing of data into fixed size TBasket objects. Related pages. Format of a class object in DATA; Free segment in middle of file; Format of KeysList record; Format of the DATA for a TClonesArray object; Format of the root (first) directory record; Format of TProcessID record; Format of the DATA for a TRefArray object; Format of data records; Format of FreeSegments record; File header format; Format of StreamerInfo record; Format of a TDirectory record; Format of the DATA for a TObject object; Format of the DATA for a TRef object; Streamer information for TTree related classes . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootio.html:17152,Guid,Guide,17152,doc/master/rootio.html,https://root.cern,https://root.cern/doc/master/rootio.html,1,['Guid'],['Guide']
Usability,"sentive of the problem at hand, in particular along the borders; of the region of interest. This is because the algorithm presented; here, is a interpolation, rahter then a extrapolation; [5]. Also, the independent variables need to be linear; independent, since the procedure will perform poorly if they are not; [5]. One can find an linear transformation from ones; original variables to a set of linear independent variables; , using a Principal Components Analysis; (see TPrincipal), and; then use the transformed variable as input to this class [5]; [6]. H. Wind also outlines a method for parameterising a multidimensional; dependence over a multidimensional set of variables. An example; of the method from [5], is a follows (please refer to; [5] for a full discussion):. Define ; are the 5 dependent; quantities that define a track. Compute, for different values of ; , the tracks; through the magnetic field, and determine the corresponding; ; . Use the simulated observations to determine, with a simple; approximation, the values of ; . We call these values; ; . Determine from ; a set of at least five relevant; coordinates ; , using contrains, or; alternative:. Perform a Principal Component Analysis (using; TPrincipal), and use; to get a linear transformation; ; , so that; ; are constrained and linear independent. Perform a Principal Component Analysis on; ; , to get linear; indenpendent (among themselves, but not independent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; . To process data, using this parameterisation, do. Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis. Determine ; as before. Detetmine ; as before. Use the result of the fit to determind ; . Transform back to ; from ; , using; the result from the Principal Component Analysis. Testing the parameterization. The class also provides functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:10707,simpl,simple,10707,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['simpl'],['simple']
Usability,"ser * ; b). overridevirtual . Browse the list of tasks. ; It is recommended to add the top level task to the list of ROOT browsables by: gROOT->GetListOfBrowsables()->Add(myTopLevelTask). Reimplemented from TObject.; Definition at line 211 of file TTask.cxx. ◆ Class(). static TClass * TTask::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTask::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTask::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 76 of file TTask.h. ◆ CleanTasks(). void TTask::CleanTasks ; (; ). virtual . Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ; Definition at line 222 of file TTask.cxx. ◆ Clear(). void TTask::Clear ; (; Option_t * ; option = """"). overridevirtual . Recursively call the Clear function of this task and its subtasks. ; The Clear function must be implemented for each derived class to clear all data structures created by a previous execution of a task. This function is automatically called by the CleanTasks function. ; Reimplemented from TNamed.; Definition at line 240 of file TTask.cxx. ◆ Continue(). void TTask::Continue ; (; ). virtual . Resume execution at the current break point. ; Definition at line 247 of file TTask.cxx. ◆ DeclFileName(). static const char * TTask::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 76 of file TTask.h. ◆ Exec(). void TTask::Exec ; (; Option_t * ; option). virtual . Dummy Execute. ; This function must be redefined in the derived classes. ; Definition at line 267 of file TTask.cxx. ◆ ExecuteTask(). void TTask::ExecuteTask ; (; Option_t * ; option = ""0""). virtual . Execute main task and its subtasks. ; When calling this function, the Exec function of the corresponding c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:17937,Clear,Clear,17937,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,1,['Clear'],['Clear']
Usability,"ser input; TQRootDialog prompt for the arguments of an object's member function; TQRootGuiFactory Qt ROOT Gui factory; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQtApplication Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes ; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont ; TQtRootGuiFactory Factory for Qt-based ROOT GUI components; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TRFIOFile A ROOT file that reads/writes via a rfiod server; TRFIOSystem Directory handler for RFIO; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twistor; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:112981,Simpl,Simple,112981,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['Simpl'],['Simple']
Usability,"ser press radio button. ; Definition at line 889 of file TStructViewerGUI.cxx. ◆ SetLinksVisibility(). void TStructViewerGUI::SetLinksVisibility ; (; Bool_t ; val). Sets links visibility to ""visible"". ; Definition at line 767 of file TStructViewerGUI.cxx. ◆ SetNodePtr(). void TStructViewerGUI::SetNodePtr ; (; TStructNode * ; val). Sets top node pointer and updates view. ; Definition at line 758 of file TStructViewerGUI.cxx. ◆ SetPointerButtonSlot(). void TStructViewerGUI::SetPointerButtonSlot ; (; ). Sets pointer given in fPointerTestEntry to the main pointer. ; Definition at line 779 of file TStructViewerGUI.cxx. ◆ ShowLinksToggled(). void TStructViewerGUI::ShowLinksToggled ; (; Bool_t ; on). Changes links visibility and refresh view. ; Definition at line 788 of file TStructViewerGUI.cxx. ◆ UnCheckMaxObjects(). void TStructViewerGUI::UnCheckMaxObjects ; (; ). private . Shows hidden nodes. ; Definition at line 798 of file TStructViewerGUI.cxx. ◆ UndoButtonSlot(). void TStructViewerGUI::UndoButtonSlot ; (; ). UndoButton Slot. Activated when user press Undo button. Restore last top node pointer. ; Definition at line 873 of file TStructViewerGUI.cxx. ◆ Update(). void TStructViewerGUI::Update ; (; Bool_t ; resetCamera = false). Updates view. Clear all the nodes, call draw function and update scene. Doesn't reset camera. ; Definition at line 814 of file TStructViewerGUI.cxx. ◆ UpdateButtonSlot(). void TStructViewerGUI::UpdateButtonSlot ; (; ). Update button slot. Updates scene. ; Definition at line 840 of file TStructViewerGUI.cxx. ◆ UpdateLabels(). void TStructViewerGUI::UpdateLabels ; (; TStructNode * ; node). private . Refresh information in labels when user put mouse over object. ; Definition at line 848 of file TStructViewerGUI.cxx. Member Data Documentation. ◆ fAllMembersCountLabel. TGLabel* TStructViewerGUI::fAllMembersCountLabel. private . Definition at line 64 of file TStructViewerGUI.h. ◆ fAutoRefesh. TGCheckButton* TStructViewerGUI::fAutoRefesh. private . Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:45691,Undo,UndoButtonSlot,45691,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Undo'],['UndoButtonSlot']
Usability,"ser-supplied arguments) into the usage. printUsage() has no protection against malicious UTF-8 sequences. Parameters. prnThe output method to use. See the examples above. ; usagethe Descriptor[] array whose help texts will be formatted. ; widththe maximum number of characters per output line. Note that this number is in actual characters, not bytes. printUsage() supports UTF-8 in help and will count multi-byte UTF-8 sequences properly. Asian wide characters are counted as 2 characters. ; last_column_min_percent(0-100) The minimum percentage of width that should be available for the last column (which typically contains the textual explanation of an option). If less space is available, the last column will be printed on its own line, indented according to last_column_own_line_max_percent. ; last_column_own_line_max_percent(0-100) If the last column is printed on its own line due to less than last_column_min_percent of the width being available, then only last_column_own_line_max_percent of the extra line(s) will be used for the last column's text. This ensures an indentation. See example below. // width=20, last_column_min_percent=50 (i.e. last col. min. width=10); --3456789 1234567890; 1234567890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=75; --3456789; 123456789012345; 67890; ; // width=20, last_column_min_percent=75 (i.e. last col. min. width=15); // last_column_own_line_max_percent=33 (i.e. max. 5); --3456789; 12345; 67890; 12345; 67890. Definition at line 2798 of file OptionParser.h. ◆ printUsage() [5/5]. template<typename Syscall > . void ROOT::option::printUsage ; (; Syscall * ; prn, . int ; fd, . const Descriptor ; usage[], . int ; width = 80, . int ; last_column_min_percent = 50, . int ; last_column_own_line_max_percent = 75 . ). Definition at line 2822 of file OptionParser.h. ROOToption. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1option.html:13923,Guid,Guide,13923,doc/master/namespaceROOT_1_1option.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1option.html,1,['Guid'],['Guide']
Usability,"ser> password <passwd> machine <machine fqdn> login <user> password-hash <passwd>; and in addition ~/.rootnetrc also supports:; secure <machine fqdn> login <user> password <passwd>; <machine fqdn> may be a domain name or contain the wild card '*'.; for the secure protocols. All lines must start in the first column. ; Definition at line 908 of file TAuthenticate.cxx. ◆ CheckProofAuth(). Bool_t TAuthenticate::CheckProofAuth ; (; Int_t ; cSec, . TString & ; det . ). static . Check if the authentication method can be attempted for the client. ; Definition at line 3541 of file TAuthenticate.cxx. ◆ Class(). static TClass * TAuthenticate::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TAuthenticate::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TAuthenticate::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TAuthenticate.h. ◆ ClearAuth(). Int_t TAuthenticate::ClearAuth ; (; TString & ; user, . TString & ; passwd, . Bool_t & ; pwdhash . ). private . UsrPwd client authentication code. ; Returns 0 in case authentication failed 1 in case of success ; Definition at line 1509 of file TAuthenticate.cxx. ◆ DeclFileName(). static const char * TAuthenticate::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TAuthenticate.h. ◆ DecodeRSAPublic(). Int_t TAuthenticate::DecodeRSAPublic ; (; const char * ; rsapubexport, . R__rsa_NUMBER & ; n, . R__rsa_NUMBER & ; d, . char ** ; rsassl = nullptr . ). static . Store RSA public keys from export string rsaPubExport. ; Definition at line 2936 of file TAuthenticate.cxx. ◆ FileExpand(). void TAuthenticate::FileExpand ; (; const char * ; fexp, . FILE * ; ftmp . ). staticprivate . Expands include directives found in fexp files The expanded, temporary file, is pointed to by 'ftmp' and should be already open. ; To ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:24791,Clear,ClearAuth,24791,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['Clear'],['ClearAuth']
Usability,"serParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::SimplexMinimizer&operator=(const ROOT::Minuit2::SimplexMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(); ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(const ROOT::Minuit2::SimplexMinimizer&). Data Members; private:. ROOT::Minuit2::SimplexBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimplexMinimizer(); {}. ~SimplexMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__SimplexMinimizer.html:4184,Simpl,SimplexMinimizer,4184,root/html602/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__SimplexMinimizer.html,9,['Simpl'],"['SimplexBuilderfBuilder', 'SimplexMinimizer', 'SimplexMinimizerSimplexMinimizer', 'SimplexSeedGeneratorfSeedGenerator']"
Usability,"serParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(); ROOT::Minuit2::ModularFunctionMinimizerROOT::Minuit2::ModularFunctionMinimizer::ModularFunctionMinimizer(const ROOT::Minuit2::ModularFunctionMinimizer&); ROOT::Minuit2::SimplexMinimizer&operator=(const ROOT::Minuit2::SimplexMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const; ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(); ROOT::Minuit2::SimplexMinimizerSimplexMinimizer(const ROOT::Minuit2::SimplexMinimizer&). Data Members; private:. ROOT::Minuit2::SimplexBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimplexMinimizer(); {}. ~SimplexMinimizer(); {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__SimplexMinimizer.html:4184,Simpl,SimplexMinimizer,4184,root/html604/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__SimplexMinimizer.html,9,['Simpl'],"['SimplexBuilderfBuilder', 'SimplexMinimizer', 'SimplexMinimizerSimplexMinimizer', 'SimplexSeedGeneratorfSeedGenerator']"
Usability,"serWidget.; Definition at line 161 of file RBrowser.cxx. ◆ GetKind(). std::string ROOT::RBrowserInfoWidget::GetKind ; (; ); const. inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 155 of file RBrowser.cxx. ◆ GetTitle(). std::string ROOT::RBrowserInfoWidget::GetTitle ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 156 of file RBrowser.cxx. ◆ GetUrl(). std::string ROOT::RBrowserInfoWidget::GetUrl ; (; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 157 of file RBrowser.cxx. ◆ Refresh(). void ROOT::RBrowserInfoWidget::Refresh ; (; ). inline . Definition at line 163 of file RBrowser.cxx. ◆ RefreshFromLogs(). void ROOT::RBrowserInfoWidget::RefreshFromLogs ; (; const std::string & ; promt, . const std::vector< std::string > & ; logs . ). inline . Definition at line 191 of file RBrowser.cxx. ◆ ResetConn(). void ROOT::RBrowserInfoWidget::ResetConn ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 153 of file RBrowser.cxx. ◆ SendWidgetContent(). std::string ROOT::RBrowserInfoWidget::SendWidgetContent ; (; ). inlineoverridevirtual . Reimplemented from ROOT::RBrowserWidget.; Definition at line 218 of file RBrowser.cxx. ◆ Show(). void ROOT::RBrowserInfoWidget::Show ; (; const std::string & ; ). inlineoverridevirtual . Implements ROOT::RBrowserWidget.; Definition at line 159 of file RBrowser.cxx. Member Data Documentation. ◆ fContent. std::string ROOT::RBrowserInfoWidget::fContent. Definition at line 142 of file RBrowser.cxx. ◆ fFirstSend. bool ROOT::RBrowserInfoWidget::fFirstSend {false}. ! if editor content was send at least once ; Definition at line 143 of file RBrowser.cxx. ◆ fTitle. std::string ROOT::RBrowserInfoWidget::fTitle. Definition at line 141 of file RBrowser.cxx. gui/browserv7/src/RBrowser.cxx. ROOTRBrowserInfoWidget. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html:4351,Guid,Guide,4351,doc/v632/classROOT_1_1RBrowserInfoWidget.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RBrowserInfoWidget.html,1,['Guid'],['Guide']
Usability,"serWidgetProvider(). RBrowserWidgetProvider::RBrowserWidgetProvider ; (; const std::string & ; kind). explicit . Constructor. ; Definition at line 37 of file RBrowserWidget.cxx. ◆ ~RBrowserWidgetProvider(). RBrowserWidgetProvider::~RBrowserWidgetProvider ; (; ). virtual . Destructor. ; Definition at line 45 of file RBrowserWidget.cxx. Member Function Documentation. ◆ Create(). virtual std::shared_ptr< RBrowserWidget > ROOT::RBrowserWidgetProvider::Create ; (; const std::string & ; ). protectedpure virtual . Implemented in RBrowserGeomProvider, RBrowserRCanvasProvider, RBrowserTCanvasProvider, and RBrowserTreeProvider. ◆ CreateFor(). virtual std::shared_ptr< RBrowserWidget > ROOT::RBrowserWidgetProvider::CreateFor ; (; const std::string & ; , . std::shared_ptr< Browsable::RElement > & ;  . ). inlineprotectedvirtual . Reimplemented in RBrowserTCanvasProvider, and RBrowserRCanvasProvider.; Definition at line 78 of file RBrowserWidget.hxx. ◆ CreateWidget(). std::shared_ptr< RBrowserWidget > RBrowserWidgetProvider::CreateWidget ; (; const std::string & ; kind, . const std::string & ; name . ). static . Create specified widget. ; Definition at line 67 of file RBrowserWidget.cxx. ◆ CreateWidgetFor(). std::shared_ptr< RBrowserWidget > RBrowserWidgetProvider::CreateWidgetFor ; (; const std::string & ; kind, . const std::string & ; name, . std::shared_ptr< Browsable::RElement > & ; element . ). static . Create specified widget for existing object. ; Definition at line 91 of file RBrowserWidget.cxx. ◆ GetMap(). RBrowserWidgetProvider::ProvidersMap_t & RBrowserWidgetProvider::GetMap ; (; ). staticprotected . Returns static map of existing providers. ; Definition at line 58 of file RBrowserWidget.cxx. The documentation for this class was generated from the following files:; gui/browserv7/src/RBrowserWidget.hxx; gui/browserv7/src/RBrowserWidget.cxx. ROOTRBrowserWidgetProvider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RBrowserWidgetProvider.html:3850,Guid,Guide,3850,doc/master/classROOT_1_1RBrowserWidgetProvider.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RBrowserWidgetProvider.html,1,['Guid'],['Guide']
Usability,"sert projected children of a given element when they are added after the projection has been already performed on the parent. This is called from TEveElement::ProjectChild().; Returns the projected replica of el. Can be 0, if el and none of its children are projectable. ; Definition at line 311 of file TEveProjectionManager.cxx. ◆ UpdateDependentElsAndScenes(). void TEveProjectionManager::UpdateDependentElsAndScenes ; (; TEveElement * ; root). protectedvirtual . Update dependent elements' bounding box and mark scenes containing element root or its children as requiring a repaint. ; Definition at line 203 of file TEveProjectionManager.cxx. ◆ UpdateName(). void TEveProjectionManager::UpdateName ; (; ). virtual . Updates name to have consistent information with projection. ; Definition at line 88 of file TEveProjectionManager.cxx. Member Data Documentation. ◆ fCenter. TEveVector TEveProjectionManager::fCenter. protected . Definition at line 31 of file TEveProjectionManager.h. ◆ fCurrentDepth. Float_t TEveProjectionManager::fCurrentDepth. protected . Definition at line 32 of file TEveProjectionManager.h. ◆ fDependentEls. List_t TEveProjectionManager::fDependentEls. protected . Definition at line 34 of file TEveProjectionManager.h. ◆ fImportEmpty. Bool_t TEveProjectionManager::fImportEmpty. protected . Definition at line 36 of file TEveProjectionManager.h. ◆ fProjection. TEveProjection* TEveProjectionManager::fProjection. protected . Definition at line 30 of file TEveProjectionManager.h. ◆ fProjections. TEveProjection* TEveProjectionManager::fProjections[TEveProjection::kPT_End]. protected . Definition at line 28 of file TEveProjectionManager.h. Libraries for TEveProjectionManager:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveProjectionManager.h; graf3d/eve/src/TEveProjectionManager.cxx. TEveProjectionManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionManager.html:46153,Guid,Guide,46153,doc/master/classTEveProjectionManager.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionManager.html,1,['Guid'],['Guide']
Usability,ses . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation ROOT User Guides and Manuals. ROOT Guides. Title; Quick Link; All Links. Reference Guide; head / 6.08; all releases. User's Guide; 6 Series (html); all formats and series. ROOT Primer - Notebook Version (beta); html pdf GitHub / SWAN; *. ROOT Primer; 6 Series (html); all formats and series. ROOT Primer 5; 5 Series (pdf). Topical Manuals. Title; Quick Link; All Links. RooFit; Manual (pdf) / Quick Start Guide (pdf); other formats. HTTP Server; 6 Series (html); all versions. JSROOT; 6 Series (html); all versions. CERNLib; (pdf); -. Minuit; (pdf); -. Minuit2; 6 Series (html); all formats and series. TSpectrum; 6 Series (html); all formats and series. TMVA; 6 Series (pdf); other links. PROOF; Drupal Book; other resources. VMC; Drupal Book; -. In a Nutshell. Title; Link. Input and Output; Drupal. Trees in 5 steps; Drupal. Interpreter; Drupal Book. Cling; Drupal Book. Math Libraries; Drupal Book. 2D-graphics; Drupal Book. 3D-graphics; Drupal Book. RooFit in 20 Minutes; Drupal. The ROOT GUI Classes; Drupal. Introduction to Cint; Drupal. Sitemap. DownloadDownload ROOT; All Relea,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-user-guides-and-manuals.html:1962,Guid,Guide,1962,d/root-user-guides-and-manuals.html,https://root.cern,https://root.cern/d/root-user-guides-and-manuals.html,1,['Guid'],['Guide']
Usability,"ses an; elegant replacement of three-dimensional histograms : the inter-relation of three; measured quantities X, Y and Z can always be visualized by a three-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Z is an unknown (but single-valued); approximate function of X,Y this function is displayed by a profile2D histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for cell I, J. 2; H(I,J) = sum Z E(I,J) = sum Z; l(I,J) = sum l L(I,J) = sum l; h(I,J) = H(I,J)/L(I,J) s(I,J) = sqrt(E(I,J)/L(I,J)- h(I,J)**2); e(I,J) = s(I,J)/sqrt(L(I,J)). In the special case where s(I,J) is zero (eg, case of 1 entry only in one cell); e(I,J) is computed from the average of the s(I,J) for all cells.; This simple/crude approximation was suggested in order to keep the cell; during a fit operation. Example of a profile2D histogram; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof2d = new TProfile2D(""hprof2d"",""Profile of pz versus px and py"",40,-4,4,40,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; hprof2d->Fill(px,py,pz,1);; }; hprof2d->Draw();; }. Function Members (Methods); public:. TProfile2D(); TProfile2D(const TProfile2D& profile); TProfile2D(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Option_t* option = """"); TProfile2D(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup, Option_t* option = """"); TProfile2D(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins, Option_t* option = """"); TProfile2D(const char* name, const char* title, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:1378,simpl,simple,1378,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,3,['simpl'],['simple']
Usability,"ses; Features of the GUI classes in a nutshell:. Originally based on the Xclass’95 widget library; A rich and complete set of widgets; Win’95 look and feel; All machine dependent graphics calls abstracted via the TVirtualX “abstract” class; Completely scriptable via the C++ interpreter (fast prototyping); Supports signal/slot event handling as pioneered by Trolltech’s Qt; Full class documentation is generated automatically (as for all ROOT classes); Code generation for variety of GUI’s. 25.2 Widgets and Frames; The ROOT GUI classes provide of set of components that allow an easy way to develop cross-platform GUI applications with a Windows look and feel.; The main widgets are:. Simple widgets: labels, icons, push buttons, either with text or pixmaps, check buttons, radio buttons, menu bars and popup menus, scroll bars, list boxes, combo boxes, group frames, text entry widgets, tab widgets, progress bars, sliders, tool tips; Complex widgets: shutter, toolbar, status bar, list view, list tree; Common dialogs: File Open/Save, File Properties, Font Selection, Color Selection, About; The widgets are shown in frames:; frame, composite frame, main frame, transient frame, group frame; Arranged by layout managers:; horizontal layout, vertical layout, row layout, list layout, tile layout, matrix layout. Using a combination of layout hints:. left, right, center x, center y, top, bottom, expand x, expand y, fixed offsets. Event handling by signals/slots and messaging (as opposed to callbacks):. in response to actions widgets send messages and emit signals; associated frames process these messages or the slot methods connected to the signals are executed. 25.3 TVirtualX; The GUI classes interface to the platform dependent low level graphics system via the semi-abstract graphics base class TVirtualX. Currently concrete implementations exist for X11 and Win32 (MacOS X is fully supported via Apple’s X11 implementation). Thanks to this single graphics interface, porting the ROOT GUI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1128270,Simpl,Simple,1128270,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Simpl', 'progress bar']","['Simple', 'progress bars']"
Usability,"set (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:19460,Clear,Clear,19460,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,8,['Clear'],['Clear']
Usability,"set = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:7447,clear,clearEvalErrorLog,7447,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,3,['clear'],['clearEvalErrorLog']
Usability,"set = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*RooResolutionModel::convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGaussModel.html:3501,clear,clearValueAndShapeDirty,3501,root/html534/RooGaussModel.html,https://root.cern,https://root.cern/root/html534/RooGaussModel.html,9,['clear'],['clearValueAndShapeDirty']
Usability,"set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html:1963,Clear,Clear,1963,doc/master/classTHtml_1_1TModuleDefinition.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html,2,['Clear'],['Clear']
Usability,"set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsAnaConvPdf.html:4179,clear,clearEvalError,4179,root/html532/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsAnaConvPdf.html,1,['clear'],['clearEvalError']
Usability,"set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:3279,clear,clearEvalError,3279,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['clear'],['clearEvalError']
Usability,"set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:2880,clear,clearEvalError,2880,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,3,['clear'],['clearEvalError']
Usability,"set, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedbackOption(). void TProof::SetDrawFeedbackOption ; (; TDrawFeedback * ; f, . Option_t * ; opt . ). Set draw feedback option. ; Definition at line 10102 of file TProof.cxx. ◆ SetDSet(). void TProof::SetDSet ; (; TDSet * ; dset). inlineprotected . Definition at line 737 of file TProof.h. ◆ SetFeedback(). void TProof::SetFeedback ; (; TString & ; opt, . TString & ; optfb, . Int_t ; action . ). protected . Extract from opt in optfb information about wanted feedback settings. ; Feedback are removed from the input string opt. If action == 0, set up feedback accordingly, if action == 1 clean related feedback settings (using info in optfb, if available, or reparsing opt).; Feedback requirements are in the form <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>; The special name 'stats' triggers feedback about events and packets. The separator from the next option is either a ' ' or a ';'. Called interanally by TProof::Process. ; Definition at line 5232 of file TProof.cxx. ◆ SetInputDataFile(). void TProof::SetInputDataFile ; (; const char * ; datafile). Set the file to be used to optimally distribute the input data objects. ; If the file exists the object in the file are added to those in the fInputData list. If the file path is null, a default file will be created at the moment of sending the processing request with the content of the fInputData list. See also SendInputDataFile. ; Definition at line 9585 of file TProof.cxx. ◆ SetLogLevel(). void TProof::SetLogLevel ; (; Int_t ; level, . UInt_t ; mask = TProofDebug::kAll . ). Set server logging level. ; Definition at line 7079 of file TProof.cxx. ◆ SetManager(). void TProof:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:142937,Feedback,Feedback,142937,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Feedback'],['Feedback']
Usability,set. ; Reimplemented from RooAbsMCStudyModule.; Definition at line 149 of file RooDLLSignificanceMCSModule.cxx. ◆ Streamer(). void RooDLLSignificanceMCSModule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsMCStudyModule. ◆ StreamerNVirtual(). void RooDLLSignificanceMCSModule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file RooDLLSignificanceMCSModule.h. Member Data Documentation. ◆ _data. std::unique_ptr<RooDataSet> RooDLLSignificanceMCSModule::_data. private . Summary dataset to store results. ; Definition at line 41 of file RooDLLSignificanceMCSModule.h. ◆ _dll0h. std::unique_ptr<RooRealVar> RooDLLSignificanceMCSModule::_dll0h. private . Container variable for delta NLL. ; Definition at line 43 of file RooDLLSignificanceMCSModule.h. ◆ _nll0h. std::unique_ptr<RooRealVar> RooDLLSignificanceMCSModule::_nll0h. private . Container variable for NLL result on null hypothesis. ; Definition at line 42 of file RooDLLSignificanceMCSModule.h. ◆ _nullValue. double RooDLLSignificanceMCSModule::_nullValue. private . Numeric value of Nsignal parameter representing the null hypothesis. ; Definition at line 45 of file RooDLLSignificanceMCSModule.h. ◆ _parName. std::string RooDLLSignificanceMCSModule::_parName. private . Name of Nsignal parameter. ; Definition at line 40 of file RooDLLSignificanceMCSModule.h. ◆ _sig0h. std::unique_ptr<RooRealVar> RooDLLSignificanceMCSModule::_sig0h. private . Container variable for NLL result with signal. ; Definition at line 44 of file RooDLLSignificanceMCSModule.h. Libraries for RooDLLSignificanceMCSModule:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h; roofit/roofitcore/src/RooDLLSignificanceMCSModule.cxx. RooDLLSignificanceMCSModule. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:51 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html:21323,Guid,Guide,21323,doc/master/classRooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/doc/master/classRooDLLSignificanceMCSModule.html,1,['Guid'],['Guide']
Usability,set::GetIndex ; (; ); const. overridevirtual . Get the index of this offset. ; Reimplemented from TGeoNode.; Definition at line 873 of file TGeoNode.cxx. ◆ GetMatrix(). TGeoMatrix * TGeoNodeOffset::GetMatrix ; (; ); const. inlineoverridevirtual . Implements TGeoNode.; Definition at line 204 of file TGeoNode.h. ◆ GetOffset(). Double_t TGeoNodeOffset::GetOffset ; (; ); const. inline . Definition at line 201 of file TGeoNode.h. ◆ IsA(). TClass * TGeoNodeOffset::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoNode.; Definition at line 212 of file TGeoNode.h. ◆ MakeCopyNode(). TGeoNode * TGeoNodeOffset::MakeCopyNode ; (; ); const. overridevirtual . Make a copy of this node. ; Reimplemented from TGeoNode.; Definition at line 881 of file TGeoNode.cxx. ◆ operator=(). TGeoNodeOffset & TGeoNodeOffset::operator= ; (; const TGeoNodeOffset & ; ). privatedelete . ◆ SetFinder(). void TGeoNodeOffset::SetFinder ; (; TGeoPatternFinder * ; finder). inline . Definition at line 210 of file TGeoNode.h. ◆ Streamer(). void TGeoNodeOffset::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoNode. ◆ StreamerNVirtual(). void TGeoNodeOffset::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 212 of file TGeoNode.h. Member Data Documentation. ◆ fFinder. TGeoPatternFinder* TGeoNodeOffset::fFinder = nullptr. private . Definition at line 188 of file TGeoNode.h. ◆ fIndex. Int_t TGeoNodeOffset::fIndex = 0. private . Definition at line 187 of file TGeoNode.h. ◆ fOffset. Double_t TGeoNodeOffset::fOffset = 0. private . Definition at line 186 of file TGeoNode.h. Libraries for TGeoNodeOffset:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoNode.h; geom/geom/src/TGeoNode.cxx. TGeoNodeOffset. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeOffset.html:23361,Guid,Guide,23361,doc/master/classTGeoNodeOffset.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeOffset.html,1,['Guid'],['Guide']
Usability,"set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFFTConvPdf.html:7173,clear,clearEvalErrorLog,7173,root/html526/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html526/RooFFTConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdArg::none(), const RooCmdArg arg8 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo2DKeysPdf.html:2646,clear,clearValueDirty,2646,root/html526/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html526/Roo2DKeysPdf.html,1,['clear'],['clearValueDirty']
Usability,"set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), const RooCmdArg arg7 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealSumPdf.html:3259,clear,clearValueDirty,3259,root/html528/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html528/RooRealSumPdf.html,1,['clear'],['clearValueDirty']
Usability,"set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:3931,clear,clearValueDirty,3931,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,3,['clear'],['clearValueDirty']
Usability,"set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:4377,clear,clearValueDirty,4377,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['clear'],['clearValueDirty']
Usability,"sgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EEventType { kUnDefined; kPacket; kStart; kStop; kFile; kFileOpen; kFileRead; kRate; kNumEventType; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualPerfStats *& CurrentPerfStats(); Return the current ROOT perf stats if any. const char * EventType(TVirtualPerfStats::EEventType type); Return the name of the event type. virtual ~TVirtualPerfStats(); {}. void SimpleEvent(TVirtualPerfStats::EEventType type). void PacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead). void FileOpenEvent(TFile* file, const char* filename, Double_t start). void FileReadEvent(TFile* file, Int_t len, Double_t start). void UnzipEvent(TObject* tree, Long64_t pos, Double_t start, Int_t complen, Int_t objlen). void RateEvent(Double_t proctime, Double_t deltatime, Long64_t eventsprocessed, Long64_t bytesRead). Long64_t GetBytesRead() const. void SetNumEvents(Long64_t num). Long64_t GetNumEvents() const. » Author: Kristjan Gulbrandsen 11/05/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPerfStats.html:6720,Simpl,SimpleEvent,6720,root/html534/TVirtualPerfStats.html,https://root.cern,https://root.cern/root/html534/TVirtualPerfStats.html,1,['Simpl'],['SimpleEvent']
Usability,"sh screen. ; Definition at line 842 of file TGTextEditor.cxx. ◆ AddLine(). void TGTextEditor::AddLine ; (; const char * ; string). inline . Definition at line 83 of file TGTextEditor.h. ◆ AddLineFast(). void TGTextEditor::AddLineFast ; (; const char * ; string). inline . Definition at line 84 of file TGTextEditor.h. ◆ AddText(). void TGTextEditor::AddText ; (; TGText * ; text). inline . Definition at line 82 of file TGTextEditor.h. ◆ Build(). void TGTextEditor::Build ; (; ). protectedvirtual . Build TGTextEditor widget. ; Definition at line 321 of file TGTextEditor.cxx. ◆ Class(). static TClass * TGTextEditor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGTextEditor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGTextEditor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file TGTextEditor.h. ◆ ClearText(). void TGTextEditor::ClearText ; (; ). Clear text edit widget. ; Definition at line 727 of file TGTextEditor.cxx. ◆ CloseWindow(). void TGTextEditor::CloseWindow ; (; ). overridevirtual . Close TGTextEditor window. ; Reimplemented from TGMainFrame.; Definition at line 638 of file TGTextEditor.cxx. ◆ CompileMacro(). void TGTextEditor::CompileMacro ; (; ). Save the edited text in a temporary macro, then compile it. ; Definition at line 767 of file TGTextEditor.cxx. ◆ DataChanged(). void TGTextEditor::DataChanged ; (; ). Slot setting the fTextChanged flag to true when the text has been modified in fTextEdit. ; Definition at line 489 of file TGTextEditor.cxx. ◆ DataDropped(). void TGTextEditor::DataDropped ; (; char * ; fname). Update file information when receiving the signal DataDropped from TGTextEdit widget. ; Definition at line 475 of file TGTextEditor.cxx. ◆ DeclFileName(). static const char * TGTextEditor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditor.html:44162,Clear,ClearText,44162,doc/master/classTGTextEditor.html,https://root.cern,https://root.cern/doc/master/classTGTextEditor.html,1,['Clear'],['ClearText']
Usability,"shTable object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehashlevel is the value at which a rehash will be triggered. I.e. when; the average size of the linked lists at a slot becomes longer than; rehashlevel then the hashtable will be resized and refilled to reduce; the collision rate to about 1. The higher the collision rate, i.e. the; longer the linked lists, the longer lookup will take. If rehashlevel=0; the table will NOT automatically be rehashed. Use Rehash() for manual; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* obj) const; Returns the number of collisions for an object (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all objects from the table AND delete all heap based objects. TObject * FindObject(const char* name) const; Find object using its name. Uses the hash value returned by the; TString::Hash() after converting name to a TString. TObject * FindObject(const TObject* obj) const; Find object using its hash value (returned by its Hash() member). TList * GetListForObject(const char* name) const; Return the TList corresponding to object's name based hash value.; One can iter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashTable.html:9347,Clear,Clear,9347,root/html528/THashTable.html,https://root.cern,https://root.cern/root/html528/THashTable.html,3,['Clear'],['Clear']
Usability,"shed; : ; Factory : Train method: DNN_CPU for Classification; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.089214 0.20183 [ -1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : Start of deep neural network training on CPU using MT, nthreads = 1; : ; TFHandler_DNN_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : myvar1: 0.089214 0.20183 [ -1.0000 1.0000 ]; : myvar2: -0.090751 0.29609 [ -1.0000 1.0000 ]; : var3: 0.059878 0.21436 [ -1.0000 1.0000 ]; : var4: 0.11587 0.24261 [ -1.0000 1.0000 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 4 ) Batch size = 100 Loss function = C; Layer 0 DENSE Layer: ( Input = 4 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 2 DENSE Layer: ( Input = 128 , Width = 128 ) Output = ( 1 , 100 , 128 ) Activation Function = Tanh Dropout prob. = 0.5; Layer 3 DENSE Layer: ( Input = 128 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity Dropout prob. = 0.5; : Using 1600 events for training and 400 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.01 regularization 0 minimum error = 0.699892; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:46310,Learn,Learning,46310,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['Learn'],['Learning']
Usability,"shold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOpti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooThresholdCategory.html:1955,clear,clearShapeDirty,1955,root/html602/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html602/RooThresholdCategory.html,2,['clear'],['clearShapeDirty']
Usability,short Version_tDefinition RtypesCore.h:65; gDebugInt_t gDebugDefinition TROOT.cxx:597; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Ssiz_tint Ssiz_tDefinition RtypesCore.h:67; kBitsPerByteconstexpr ULong_t kBitsPerByteDefinition RtypesCore.h:116; Char_tchar Char_tDefinition RtypesCore.h:37; Marker_tshort Marker_tDefinition RtypesCore.h:83; kMinIntconstexpr Int_t kMinIntDefinition RtypesCore.h:106; Real_tfloat Real_tDefinition RtypesCore.h:68; Seek_tint Seek_tDefinition RtypesCore.h:53; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Long_tlong Long_tDefinition RtypesCore.h:54; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; kMaxShortconstexpr Int_t kMaxShortDefinition RtypesCore.h:101; ULongptr_tunsigned long ULongptr_tDefinition RtypesCore.h:76; Width_tshort Width_tDefinition RtypesCore.h:84; Float_tfloat Float_tDefinition RtypesCore.h:57; Font_tshort Font_tDefinition RtypesCore.h:81; Axis_tdouble Axis_tDefinition RtypesCore.h:78; Short_tshort Short_tDefinition RtypesCore.h:39; kMaxUIntconstexpr UInt_t kMaxUIntDefinition RtypesCore.h:104; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; SCoord_tshort SCoord_tDefinition RtypesCore.h:86; LongDouble_tlong double LongDouble_tDefinition RtypesCore.h:61; Stat_tdouble Stat_tDefinition RtypesCore.h:79; kMinLong64constexpr Long64_t kMinLong64Definition RtypesCore.h:114; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kMinCharconstexpr Int_t kMinCharDefinition RtypesCore.h:98; kMinShortconstexpr Int_t kMinShortDefinition RtypesCore.h:102; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; TRootIOCtorDefinition TRootIOCtor.h:33. corefoundationincRtypesCore.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RtypesCore_8h_source.html:8477,Guid,Guide,8477,doc/master/RtypesCore_8h_source.html,https://root.cern,https://root.cern/doc/master/RtypesCore_8h_source.html,1,['Guid'],['Guide']
Usability,"should be preferred for performance-critical applications.; 998 ; 999Python applications cannot easily specify template parameters or pass C++ callables to RDataFrame.; 1000See [Efficient analysis in Python](#python) for possible ways to speed up hot paths in this case.; 1001 ; 1002Just-in-time compilation happens once, right before starting an event loop. To reduce the runtime cost of this step, make sure to book all operations *for all RDataFrame computation graphs*; 1003before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 1004 ; 1005Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 1006 ; 1007### Memory usage; 1008 ; 1009There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 1010 ; 1011Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:57715,simpl,simplifies,57715,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simplifies']
Usability,"should not propagate ; Definition at line 133 of file GuiTypes.h. ◆ fHeight. Int_t WindowAttributes_t::fHeight. width and height of window ; Definition at line 116 of file GuiTypes.h. ◆ fMapInstalled. Bool_t WindowAttributes_t::fMapInstalled. boolean, is color map currently installed ; Definition at line 129 of file GuiTypes.h. ◆ fMapState. Int_t WindowAttributes_t::fMapState. kIsUnmapped, kIsUnviewable, kIsViewable ; Definition at line 130 of file GuiTypes.h. ◆ fOverrideRedirect. Bool_t WindowAttributes_t::fOverrideRedirect. boolean value for override-redirect ; Definition at line 134 of file GuiTypes.h. ◆ fRoot. Window_t WindowAttributes_t::fRoot. root of screen containing window ; Definition at line 120 of file GuiTypes.h. ◆ fSaveUnder. Bool_t WindowAttributes_t::fSaveUnder. boolean, should bits under be saved? ; Definition at line 127 of file GuiTypes.h. ◆ fScreen. void* WindowAttributes_t::fScreen. back pointer to correct screen ; Definition at line 135 of file GuiTypes.h. ◆ fVisual. void* WindowAttributes_t::fVisual. the associated visual structure ; Definition at line 119 of file GuiTypes.h. ◆ fWidth. Int_t WindowAttributes_t::fWidth. Definition at line 116 of file GuiTypes.h. ◆ fWinGravity. Int_t WindowAttributes_t::fWinGravity. one of the window gravity values ; Definition at line 123 of file GuiTypes.h. ◆ fX. Int_t WindowAttributes_t::fX. Definition at line 115 of file GuiTypes.h. ◆ fY. Int_t WindowAttributes_t::fY. location of window ; Definition at line 115 of file GuiTypes.h. ◆ fYourEventMask. Long_t WindowAttributes_t::fYourEventMask. my event mask ; Definition at line 132 of file GuiTypes.h. Collaboration diagram for WindowAttributes_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/gui/inc/GuiTypes.h. WindowAttributes_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structWindowAttributes__t.html:4797,Guid,Guide,4797,doc/master/structWindowAttributes__t.html,https://root.cern,https://root.cern/doc/master/structWindowAttributes__t.html,1,['Guid'],['Guide']
Usability,"sian PDF"", y, meany, sigmay); ; # Construct uncorrelated product pdf; # -------------------------------------------------------------------; ; # Multiply gaussx and gaussy into a two-dimensional pdf gaussxy; gaussxy = ROOT.RooProdPdf(""gaussxy"", ""gaussx*gaussy"", [gaussx, gaussy]); ; # Sample pdf, plot projection on x and y; # ---------------------------------------------------------------------------; ; # Generate 10000 events in x and y from gaussxy; data = gaussxy.generate({x, y}, 10000); ; # Plot x distribution of data and projection of gaussxy x = Int(dy); # gaussxy(x,y); xframe = x.frame(Title=""X projection of gauss(x)*gauss(y)""); data.plotOn(xframe); gaussxy.plotOn(xframe); ; # Plot x distribution of data and projection of gaussxy y = Int(dx); # gaussxy(x,y); yframe = y.frame(Title=""Y projection of gauss(x)*gauss(y)""); data.plotOn(yframe); gaussxy.plotOn(yframe); ; # Make canvas and draw ROOT.RooPlots; c = ROOT.TCanvas(""rf304_uncorrprod"", ""rf304_uncorrprod"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.4); xframe.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); yframe.GetYaxis().SetTitleOffset(1.4); yframe.Draw(); ; c.SaveAs(""rf304_uncorrprod.png""); [#0] WARNING:InputArguments -- The parameter 'sigmax' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigmay' with range [-inf, inf] of the RooGaussian 'gaussy' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsReal::plotOn(gaussxy) plot on x integrates over variables (y); [#1] INFO:Plotting -- RooAbsReal::plotOn(gaussxy) plot on y integrates over variables (x); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf304_uncorrprod.py. tutorialsroofitrf304_uncorrprod.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf304__uncorrprod_8py.html:2916,Guid,Guide,2916,doc/master/rf304__uncorrprod_8py.html,https://root.cern,https://root.cern/doc/master/rf304__uncorrprod_8py.html,1,['Guid'],['Guide']
Usability,"sible(). Bool_t TGX11TTF::IsVisible ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 430 of file TGX11TTF.cxx. ◆ RenderString(). void TGX11TTF::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 458 of file TGX11TTF.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11TTF::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font exist (kCheck) mode=1 : search the font and load it if it exists (kLoad) font : font name; Set text font to specified name. This function returns 0 if the specified font is found, 1 if not. ; Reimplemented from TGX11.; Definition at line 567 of file TGX11TTF.cxx. ◆ SetTextFont() [2/2]. void TGX11TTF::SetTextFont ; (; Font_t ; fontnumber). overridevirtual . Set specified font. ; Reimplemented from TGX11.; Definition at line 547 of file TGX11TTF.cxx. ◆ SetTextSize(). void TGX11TTF::SetTextSize ; (; Float_t ; textsize). overridevirtual . Set current text size. ; Reimplemented from TGX11.; Definition at line 579 of file TGX11TTF.cxx. ◆ Streamer(). void TGX11TTF::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGX11. ◆ StreamerNVirtual(). void TGX11TTF::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file TGX11TTF.h. Member Data Documentation. ◆ fAlign. FT_Vector TGX11TTF::fAlign. private . alignment vector ; Definition at line 33 of file TGX11TTF.h. Libraries for TGX11TTF:. [legend]; The documentation for this class was generated from the following files:; graf2d/x11ttf/inc/TGX11TTF.h; graf2d/x11ttf/src/TGX11TTF.cxx. TGX11TTF. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11TTF.html:56264,Guid,Guide,56264,doc/master/classTGX11TTF.html,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html,1,['Guid'],['Guide']
Usability,"sible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const THnSparse* h, Double_t c = 1.); voidAddBinContent(const Int_t* x, Double_t v = 1.); voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); voidCalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THnSparse*CreateSparse(const char* name, const char* title, const TH1* h1, Int_t ChunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidDivide(const THnSparse* h); voidDivide(const THnSparse* h1, const THnSparse* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparse.html:5445,Clear,Clear,5445,root/html532/THnSparse.html,https://root.cern,https://root.cern/root/html532/THnSparse.html,1,['Clear'],['Clear']
Usability,"sic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ; file  df103_NanoAODHiggsAnalysis.C;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis.py;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ; file  df103_NanoAODHiggsAnalysis_python.h;  Header file with functions needed to execute the Python version of the NanoAOD Higgs tutorial. ;  ; file  df104_HiggsToTwoPhotons.py;   The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ;  ; file  df105_WBosonAnalysis.py;   The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.C;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df106_HiggsToFourLeptons.py;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  df107_SingleTopAnalysis.py;   A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ;  ; file  distrdf001_spark_connection.py;   Configure a Spark connection and fill two histograms distributedly. ;  ; file  distrdf002_dask_connection.py;   Configure a Dask connection and fill two histograms distributedly. ;  ; file  distrdf003_live_visualization.py;   Configure a Dask connection and visualize the filling of a 1D and 2D histograms distributedly. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__dataframe.html:8002,Guid,Guide,8002,doc/master/group__tutorial__dataframe.html,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html,1,['Guid'],['Guide']
Usability,"side 3; buffer.fPols[24] = 7 ; buffer.fPols[25] = 4 ;; ; buffer.SetSectionsValid(TBuffer3D::kRaw);; }; ; return buffer;; }; ; class MyGeom : public TObject, public TAtt3D; {; public:; MyGeom();; ~MyGeom() override;; ; void Draw(Option_t *option) override;; void Paint(Option_t *option) override;; ; private:; std::vector<Shape *> fShapes;; ; ClassDefOverride(MyGeom,0);; };; ; ClassImp(MyGeom);; ; MyGeom::MyGeom(); {; // Create our simple geometry - couple of boxes; // and a square base pyramid; Shape * aShape;; aShape = new Box(kRed, 0.0, 0.0, 0.0, 20.0, 20.0, 20.0);; fShapes.push_back(aShape);; aShape = new Box(kBlue, 50.0, 100.0, 200.0, 5.0, 10.0, 15.0);; fShapes.push_back(aShape);; aShape = new SBPyramid(kGreen, 20.0, 25.0, 45.0, 30.0, 30.0, 90.0);; fShapes.push_back(aShape);; }; ; MyGeom::~MyGeom(); {; // Clear out fShapes; }; ; void MyGeom::Draw(Option_t *option); {; TObject::Draw(option);; ; // Ask pad to create 3D viewer of type 'option'; gPad->GetViewer3D(option);; }; ; void MyGeom::Paint(Option_t * /*option*/); {; TVirtualViewer3D * viewer = gPad->GetViewer3D();; ; // If MyGeom derives from TAtt3D then pad will recognise; // that the object it is asking to paint is 3D, and open/close; // the scene for us. If not Open/Close are required; //viewer->BeginScene();; ; // We are working in the master frame - so we don't bother; // to ask the viewer if it prefers local. Viewer's must; // always support master frame as minimum. c.f. with; // viewer3DLocal.C; std::vector<Shape *>::const_iterator ShapeIt = fShapes.begin();; Shape * shape;; while (ShapeIt != fShapes.end()) {; shape = *ShapeIt;; ; UInt_t reqSections = TBuffer3D::kCore|TBuffer3D::kBoundingBox|TBuffer3D::kShapeSpecific;; TBuffer3D & buffer = shape->GetBuffer3D(reqSections);; reqSections = viewer->AddObject(buffer);; ; if (reqSections != TBuffer3D::kNone) {; shape->GetBuffer3D(reqSections);; viewer->AddObject(buffer);; }; ShapeIt++;; }; // Not required as we are TAtt3D subclass; //viewer->EndScene();; }; ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DMaster_8C.html:10443,Clear,Clear,10443,doc/master/viewer3DMaster_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DMaster_8C.html,1,['Clear'],['Clear']
Usability,"sification:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ResultsClassification(). TMVA::ResultsClassification::ResultsClassification ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 51 of file ResultsClassification.cxx. ◆ ~ResultsClassification(). TMVA::ResultsClassification::~ResultsClassification ; (; ). destructor ; Definition at line 61 of file ResultsClassification.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::ResultsClassification::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::ResultsClassification::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::ResultsClassification::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 90 of file ResultsClassification.h. ◆ Clear() [1/2]. void TMVA::ResultsClassification::Clear ; (; Option_t * ; ). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 64 of file ResultsClassification.h. ◆ Clear() [2/2]. virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 119 of file TObject.h. ◆ DeclFileName(). static const char * TMVA::ResultsClassification::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 90 of file ResultsClassification.h. ◆ GetAnalysisType(). Types::EAnalysisType TMVA::ResultsClassification::GetAnalysisType ; (; ). inlineoverridevirtual . Reimplemented from TMVA::Results.; Definition at line 80 of file ResultsClassification.h. ◆ GetSize(). Long64_t TMVA::ResultsClassification::GetSize ; (; ); const. inline . Definition at line 71 of file ResultsClassification.h. ◆ GetValueVector(). std::vector< Float_t > * TMVA::ResultsClassification::GetValueVector ; (; ). inli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html:12916,Clear,Clear,12916,doc/master/classTMVA_1_1ResultsClassification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html,1,['Clear'],['Clear']
Usability,"sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text2 = [; ""With gamma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A."",; ]; ; for text in pt_text2:; pt.AddText(text); ; pt.DrawClone(); ; can.cd(3); frame = x.frame(Title=""Barlow Beeston light for (Sig+Bkg)""); sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b"", VisualizeError=result2); # Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame); model2.plotOn(frame, LineColor=""b""); p_ph_sig2_set = {p_ph_sig2}; p_ph_bkg2_set = {p_ph_bkg2}; model2.plotOn(frame, Components=p_ph_sig2_set, LineColor=""kAzure""); model2.plotOn(frame, Components=p_ph_bkg2_set, LineColor=""r""); model2.paramOn(frame, Parameters={Asig2, Abkg2}); ; sigData.plotOn(frame, MarkerColor=""b""); frame.Draw(); ; pt.Clear(); pt_text3 = [; ""When signal and background"",; ""template share one gamma para-"",; ""meter per bin, they adapt less."",; ""The errors of the A parameters"",; ""also shrink slightly."",; ]; for text in pt_text3:; pt.AddText(text); pt.DrawClone(); ; ; print(""Asig [normal ] = {} +/- {}"".format(Asig0.getVal(), Asig0.getError())); print(""Asig [BB ] = {} +/- {}"".format(Asig1.getVal(), Asig1.getError())); print(""Asig [BBlight] = {} +/- {}"".format(Asig2.getVal(), Asig2.getError())); ; can.SaveAs(""rf709_BarlowBeeston.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char dep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:6820,Clear,Clear,6820,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['Clear'],['Clear']
Usability,"sigmoid ; Implements TMVA::TActivation.; Definition at line 44 of file TActivationSigmoid.cxx. ◆ EvalDerivative(). Double_t TMVA::TActivationSigmoid::EvalDerivative ; (; Double_t ; arg). virtual . evaluate the derivative of the sigmoid ; Implements TMVA::TActivation.; Definition at line 52 of file TActivationSigmoid.cxx. ◆ GetExpression(). TString TMVA::TActivationSigmoid::GetExpression ; (; ). virtual . get expressions for the sigmoid and its derivatives ; Implements TMVA::TActivation.; Definition at line 61 of file TActivationSigmoid.cxx. ◆ GetMax(). Double_t TMVA::TActivationSigmoid::GetMax ; (; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 57 of file TActivationSigmoid.h. ◆ GetMin(). Double_t TMVA::TActivationSigmoid::GetMin ; (; ). inlinevirtual . Implements TMVA::TActivation.; Definition at line 54 of file TActivationSigmoid.h. ◆ IsA(). virtual TClass * TMVA::TActivationSigmoid::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::TActivation.; Definition at line 67 of file TActivationSigmoid.h. ◆ MakeFunction(). void TMVA::TActivationSigmoid::MakeFunction ; (; std::ostream & ; fout, . const TString & ; fncName . ). virtual . writes the sigmoid activation function source code ; Implements TMVA::TActivation.; Definition at line 70 of file TActivationSigmoid.cxx. ◆ Streamer(). virtual void TMVA::TActivationSigmoid::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::TActivation. ◆ StreamerNVirtual(). void TMVA::TActivationSigmoid::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file TActivationSigmoid.h. Libraries for TMVA::TActivationSigmoid:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/TActivationSigmoid.h; tmva/tmva/src/TActivationSigmoid.cxx. TMVATActivationSigmoid. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationSigmoid.html:4771,Guid,Guide,4771,doc/master/classTMVA_1_1TActivationSigmoid.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationSigmoid.html,1,['Guid'],['Guide']
Usability,"sigmoids can approximate any continuous function.; 2- Trained with output=1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X.; 5.12.3 Learning Methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrate, divided by two, of the error on each individual output neuron. In all methods implemented in this library, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, one can express this derivative as the product of the local partial derivative by the weighted sum of the outputs derivatives (for a neuron) or as the product of the input value with the local partial derivative of the output neuron (for a synapse). This computation is called “back-propagation of the errors”. Six learning methods are implemented.; 5.12.3.1 Stochastic Minimization; This is the most trivial learning method. The Robbins-Monro stochastic approximation is applied to multilayer perceptrons. The weights are updated after each example according to the formula:; \[; w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t); \]; with:; \[; \Delta w_{ij}(t) = - \eta \left(; \frac{\partial e_p}{\partial w_{ij}} + \delta \right) +; \epsilon \Delta w_{ij}(t-1); \]; The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.2 Steepest Descent With Fixed Step Size (Batch Learning); It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; 5.12.3.3 Steepest Descent Algorithm; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower Tau = higher precision = slower search. A value Tau=3 seems reasonable.; 5.12.3.4 Conjugate Gradients With the Polak-Ribie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:232651,learn,learning,232651,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learning']
Usability,"signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp*TCanvas::GetCanvasImp() const; TVirtualPadPainter*TCanvas::GetCanvasPainter(); virtual voidTCanvas::GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInspectCanvas.html:6400,Feedback,FeedbackMode,6400,root/html602/TInspectCanvas.html,https://root.cern,https://root.cern/root/html602/TInspectCanvas.html,2,['Feedback'],['FeedbackMode']
Usability,"signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp*TCanvas::GetCanvasImp() const; TVirtualPadPainter*TCanvas::GetCanvasPainter(); virtual voidTCanvas::GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UInt_t& wh); TObject*TCanvas::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDialogCanvas.html:6765,Feedback,FeedbackMode,6765,root/html602/TDialogCanvas.html,https://root.cern,https://root.cern/root/html602/TDialogCanvas.html,2,['Feedback'],['FeedbackMode']
Usability,"signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTProofPlayer::Feedback(TList* objs)SIGNAL ; voidTProofPlayer::FeedBackCanvas(const char* name, Bool_t create); virtual Long64_tTProofPlayer::Finalize(TQueryResult* qr); virtual Long64_tTProofPlayer::Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTProofPlayer::GetCacheSize(); virtual TQueryResult*TProofPlayer::GetCurrentQuery() const; virtual Int_tTProofPlayer::GetDrawArgs(const char* var, const char* sel, Option_t* opt, TString& selector, TString& objname); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTProofPlayer::GetEventsProcessed() const; virtual TVirtualProofPlayer::EExitStatusTProofPlayer::GetExitStatus() const; virtual const char*TObject::GetIconName() const; virtual TList*TProofPlayer::GetInputList() const; virtual Int_tTProofPlayer::GetLearnEntries(); TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerLocal.html:5147,FeedBack,FeedBackCanvas,5147,root/html528/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html528/TProofPlayerLocal.html,8,['FeedBack'],['FeedBackCanvas']
Usability,"signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoEltuEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoEltuEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoName(); Slot for name. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoA(); Slot for A. void DoB(); Slot for B. void DoDz(); Slot for Z. TGeoEltuEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoEltuEditor.html:22121,undo,undoing,22121,root/html604/TGeoEltuEditor.html,https://root.cern,https://root.cern/root/html604/TGeoEltuEditor.html,1,['undo'],['undoing']
Usability,"signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoEltuEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for para editor. ~TGeoEltuEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoName(); Slot for name. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoA(); Slot for A. void DoB(); Slot for B. void DoDz(); Slot for Z. TGeoEltuEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoEltuEditor.html:22121,undo,undoing,22121,root/html602/TGeoEltuEditor.html,https://root.cern,https://root.cern/root/html602/TGeoEltuEditor.html,1,['undo'],['undoing']
