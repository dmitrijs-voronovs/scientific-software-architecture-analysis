quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Performance,"ce self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in |PSIfour|. An illustrative CASSCF example is as follows::. molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }; ; set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2964,optimiz,optimized,2964,doc/sphinxman/source/mcscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst,1,['optimiz'],['optimized']
Performance,"ces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures ou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:3981,perform,performance,3981,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"cf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). Multi-Fragment Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _DimerSection:. In previous versions of optking, the metric for connecting atoms was increased until all atoms; were connected. This is the current behavior for |optking__frag_mode| `single`.; Setting |optking__frag_mode| to `multi` will now add a special; set of intermolecular coordinates between fragments - internally referred to as DimerFrag; coordinates (see `here <DimerIntro_>` for the brief description). ; For each pair of molecular fragments, a set of up to 3 reference points; are chosen on each fragment. Each reference point will be either an atom or a linear combination; of positions of atoms within that fragment. Stretches, bends, and dihedral angles between the two ; fragments will be created using these reference points. See ; :ref:`Dimer coordinate table <",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:9398,optimiz,optimize,9398,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"ck <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:28361,perform,perform,28361,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['perform'],['perform']
Performance,"clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6172,load,loading,6172,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,2,"['cache', 'load']","['cache', 'loading']"
Performance,"clude:: autodir_options_c/ccenergy__cachelevel.rst; .. include:: autodir_options_c/ccenergy__cachetype.rst; .. include:: autodir_options_c/ccenergy__num_amps_print.rst; .. include:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst; .. include:: autodir_options_c/cceom__e_convergence.rst; .. include:: autodir_options_c/cceom__singles_print.rst; .. include:: autodir_options_c/cceom__schmidt_add_residual_tolerance.rst; .. include:: autodir_options_c/cceom__eom_guess.rst. Linear Response (CCLR) Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Linear response computations are invoked like ``properties('ccsd')``; or ``properties('cc2')``, along with a li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9664,cache,cacheing,9664,doc/sphinxman/source/cc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst,1,['cache'],['cacheing']
Performance,"co A. Evangelista. The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; |PSIfour| implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :math:`H_{\rm X2C}`:. .. math:: H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}. that is a sum of a kinetic energy (:math:`T_{\rm X2C}`) and potential energy; (:math:`V_{\rm X2C}`) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114]_.; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass--Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos' ANO basis sets. .. note:: See also :ref:`sec:DKH` for another relativistic Hamiltonian. .. _`sec:ScalarRelativistic`:. A First Example; ^^^^^^^^^^^^^^^. The following is a simple input that will perform a Hartree--Fock calculation; using the X2C Hamiltonian. ::. molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result::. @RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy::. @RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options; ^^^^^^^^^^^^^^^^^^. The X2C module in |PSIfour| supports different combinations of basis set.; By default, if the input file specifies only |mints__basis|, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst:2298,perform,perform,2298,doc/sphinxman/source/relativistic.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst,1,['perform'],['perform']
Performance,"cro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. An example is::. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # FRAC jobs will be be run in C1 sy",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29470,optimiz,optimized,29470,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['optimiz'],['optimized']
Performance,"ctions.; Solving the iterative local MP2 equations in the LMO/PAO basis requires large PAO; domains to achieve reasonable accuracy. Instead, the virtual space is transformed; into the much more compact pair natural orbital representation. The (approximate); PNOs diagonalize the virtual-virtual block of the (approximate) MP2 density matrix:. .. math::; :label: PNOs. D_{ij}^{ab} = \frac{1}{1 + \delta_{ij}}[\tilde{t}_{ij}^{\dagger}t_{ij} + \tilde{t}_{ij}t_{ij}^{\dagger}]^{ab}. which is constructed from semicanonical amplitudes:. .. math::; :label: Amplitudes. t_{ij}^{ab} &= - \frac{(iajb)}{\epsilon_{a} + \epsilon_{b} - \epsilon_{i} - \epsilon_{j}}, \\; \tilde{t}_{ij}^{ab} &= 2t_{ij}^{ab} - t_{ij}^{ba}. PNOs with small occupation numbers are discarded, and the local MP2 equations are; solved in the LMO/PNO basis. Recommendations; ---------------. Some practical notes on running the code:. * DLPNO-MP2 is not a drop-in replacement for DF-MP2. Instead, it should be used for; large calculations that cannot reasonably be performed with DF-MP2. The crossover; point between DF-MP2 and DLPNO-MP2 depends on details of both the calculation and; the hardware, but can be as low as 2,000 basis functions. * The accuracy of DLPNO-MP2 (relative to DF-MP2) can be controlled with the; |dlpno__pno_convergence| keyword according to recommendation by Liakos et al.; [Liakos:2015:1525]_. For non-covalent interactions ``TIGHT`` is highly recommended. ; ; * The greater the spatial sparsity of a molecular system, the smaller the pair; domains and consequently the faster the calculation. DLPNO-MP2 is much faster; for linear alkanes than for globular proteins, all else constant. * Similar to molecular sparsity, the sparsity of the orbital basis affects runtime.; Diffuse functions increase the size of the pair domains and therefore lead to ; longer calculations. * All aspects of DLPNO-MP2 run in core; no disk is required. As a result, the; code exhibits very good intra-node parallelism, and benefit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:8205,perform,performed,8205,doc/sphinxman/source/dlpnomp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst,1,['perform'],['performed']
Performance,"cule_name}` in; :samp:`molecule {optional_molecule_name} \\{...\\}`. * The molecular geometry can be got and set and manipulated as a; :py:class:`~psi4.core.Matrix` object. Below shows how to access; coordinates in an input file in Python. ::. molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). * Molecules can be initiated from XYZ files and fragmented for SAPT computations. ::. # >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:22746,load,load,22746,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['load'],['load']
Performance,"d (response) version of the; exchange-induction corrections are also calculated, exactly for ; :math:`E_{exch-ind,resp}^{(20)}` and by scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:46348,optimiz,optimized,46348,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['optimiz'],['optimized']
Performance,"d G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. So",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20430,optimiz,optimized,20430,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimized']
Performance,"d Keywords Controlling MP2 NO Approximations; .. comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. comment .. include:: autodir_options_c/sapt__nat_orbs_t2.rst. .. index:: SAPT; charge-transfer. .. _`sec:saptct`:. Charge-Transfer in SAPT; ^^^^^^^^^^^^^^^^^^^^^^^. It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy ; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201]_. Charge-transfer energies can be obtained from the following calls to the; energy function. ::. energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0. A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results::. SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with ; SAPT0/aug-cc-pVDZ. . .. index:: ; pair: SAPT; output. Monomer-Centered Basis Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (*i.e.*, each ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:30640,perform,perform,30640,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['perform']
Performance,"d by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the u",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1438,optimiz,optimizations,1438,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimizations']
Performance,"d cite the; following publications: [Patkowski:2018:164110]_. .. _`sec:saptinf`:. Higher-Order Exchange Terms without Single-Exchange Approximation; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Recently, several SAPT higher-order exchange terms have been derived without; the :math:`S^{2}` approximation: :math:`E_{exch-ind}^{(20)}` [Schaffer:2012:1235]_, ; :math:`E_{exch-disp}^{(20)}` [Schaffer:2013:2570]_, and :math:`E_{exch-ind}^{(30)}` ; [Waldrop:2021:024103]_. The second-order terms can be computed with the following; settings::. set SAPT_DFT_FUNCTIONAL HF; set DO_IND_EXCH_SINF true # calculate Exch-Ind20 (S^inf) ; set SAPT_DFT_MP2_DISP_ALG fisapt ; set DO_DISP_EXCH_SINF true # calculate Exch-Disp20 (S^inf); energy('sapt(dft)'); ; and the third-order exchange-induction term is computed as follows::. set DO_IND30_EXCH_SINF true # calculate Exch-Ind30 (S^inf) ; energy('sapt2+3'); ; These calculations are performed with the atomic orbital and ; density-fitting scheme described in the Supplementary Material to; [Smith:2020:184108]_ for the second-order terms and in [Waldrop:2021:024103]_; for the third-order exchange induction. The coupled (response) version of the; exchange-induction corrections are also calculated, exactly for ; :math:`E_{exch-ind,resp}^{(20)}` and by scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on emp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:45151,perform,performed,45151,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performed']
Performance,"d. It is simple to loop over pairs within each block using C++11 syntax, as; demonstrated in the code snippet above. Only shell pairs with significant; overlap are included in the shell block information, making this an efficient; way to loop over non-negligible terms. Permutational symmetry; ...................... The pairs within each block are optimized for efficiency. First, they are; screened during the integral object's creation to ensure that only terms with; appreciable overlap are stored. Second, only P,Q combinations that are; permutationally unique are stored, ordered with the higher angular momentum; first. Therefore care must be taken to ensure that the missing permutations; are correctly accounted for when processing the integrals within the loop. See; the DirectJK code in libfock for an example of using this scheme for a Fock; matrix build. Using bra-ket symmetry; ...................... In cases where there is no batching performed, bra-ket symmetry can be; trivially enforced by ensuring that one of the block indices is greater than or; equal to the other. When batching is used, the situation is trickier; some ket; batches may contain a mixture of integrals that are bra-ket unique and those; that are not. To handle this we must do a coarse check at the top of the loop; to see if *any* integrals in the batch are needed, which is implemented by; asking the integral engine where to start looping in the ket via the call to; ``eri->first_RS_shell_block(PQpair_idx)``. This is followed by a more fine; grained check within the loops to filter individual integrals in the case where; bra and ket have the same angular momentum and there's a possibility of a; handful of integrals coming from the ket that are redundant. Note that the bra; is not batched in any of our engines currently: only the ket is. For this; reason, density fitting integrals should be written as (A0|PQ) rather than; (PQ|A0) where possible, because we want the ket to contain more functions than;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:9436,perform,performed,9436,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['perform'],['performed']
Performance,"dent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:8390,optimiz,optimize,8390,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"dimer.set_basisset(""DF_BASIS_ELST"", aux_basis); ; psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses ``set df_ints_io save`` to keep file 97,; which contains the three-index integrals for density fitting. ``set df_ints_io load``; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use ``psi4.IO.set_default_namespace`` to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; ``psi4.IO.change_file_namespace`` so that integrals can be read from it.; For more information on stability analysis, see the :ref:`stability <sec:scfstability_doc>`; documentation. .. index:: SAPT; SAPT0. SAPT0; ^^^^^. Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ'). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT ; truncations, using different basis sets, is reported in ; [Parker:2014:094106]_. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically ; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code ; should cite the following publications: [Hohenstein:2010:184111]_ and ; [Hohenstein:2011:174107]_. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106]_ shou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:20119,perform,performance,20119,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performance']
Performance,"dividual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch n",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8984,tune,tune,8984,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['tune'],['tune']
Performance,"driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =====. Python provides many control structures, any of which can be used within |PSIfour|; input files. For example, to loop over three basis sets, the following code can; be used:. .. code-block:: none. basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of ``basis_sets`` is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that ``basis_set`` is a; Python variable, not a string, by prefixing it with a dollar sign. . The geometry specification supports delayed initializatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11990,optimiz,optimize,11990,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['optimiz'],['optimize']
Performance,"driver.optimize`.; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the `GeomeTRIC github; <https://github.com/leeping/geomeTRIC>`_ ; for more information on keywords and JSON specification of constraints. * Optimize the water molecule using GeomeTRIC::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). * Optimize the water molecule using GeomeTRIC, with one of the two OH bonds constrained to 2.0 au; and the HOH angle constrained to 104.5 degrees::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = { ; 'coordsys' : 'tric',; 'constraints' : { ; 'set' : [{'type' : 'distance',; 'indices' : [0, 1], ; 'value' : 2.0 },; {'type' : 'angle',; 'indices' : [1, 0, 2], ; 'value' : 104.5 }]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). * Optimize the benzene/water dimer using GeomeTRIC, with the 6 carbon atoms of benzene frozen in ; place::. molecule h2o {; C 0.833 1.221 -0.504; H 1.482 2.086 -0.518; C 1.379 -0.055 -0.486; H 2.453 -0.184 -0.483; C 0.546 -1.167 -0.474; H 0.971 -2.162 -0.466; C -0.833 -1.001 -0.475; H -1.482 -1.867 -0.468; C -1.379 0.275 -0.490; H -2.453 0.404 -0.491; C -0.546 1.386 -0.506; H -0.971 2.381 -0.524; --; O 0.000 0.147 3.265; H 0.000 -0.505 2.581; H 0.000 0.965 2.790; no_com; no_reorient; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = { ; 'coordsys' : 'tric',; 'constraints' : { ; 'freeze' : [{'type' : 'xyz',; 'indices' : [0, 2, 4, 6, 8, 10]}]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). Output; ^^^^^^. The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (``~``). This produces a table like the one below that shows; for each iter",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:27851,optimiz,optimize,27851,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"ds. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in |PSIfour|. An illustrative CASSCF example is as follows::. molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }; ; set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF; types. .. _`table:mcscf_spaces`:. .. table:: Orbital spaces for MCSCF computations. +----------------------------+----------------------------+; | RASSCF | CASSCF |; +============================+============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| |; +----------------------------+----------------------------+; | |globals__restricted_uocc| | |globals__restricted_uocc| |; +----------------------------+----------------------------+; | |globals__ras4| | |globals__active| |; +----------------------------+ +; | |globals__ras3| | |; +----------------------------+ +; | |globals__ras2| | |; +----------------------------+ +; | |globals__ras1| | |; +----------------------------+----------------------------+; | |globals__restricted_docc| | |globals__restricted_docc| |; +----------------------------+---------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:3885,optimiz,optimized,3885,doc/sphinxman/source/mcscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst,1,['optimiz'],['optimized']
Performance,"e exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies; -------------------------------. The general philosophy in |PSIfour| is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (:source:`psi4/src/psi4/libfock`) accomplishes. A number of integral; technologies -- such as integral-direct, disk-based and density fitting -- are; supported in libFock, making them generally available to all elements of the; code that use the generalized Fock matrix strategy. .. _`sec:prog_tour-exposing`:. Exposing C++ code to Python; ---------------------------. The recent push to move sections of the code that are not a bottleneck into the; Python layer requires that the C++ code is callable from Python and that its; results are accessible. The result accessibility is addressed by populating; the appropriate variables in the Wavefunction object. To make the code; callable from Python, we rely on the excellent `PyBind11 <https://pybind11.readthedocs.io/en/stable/>`_ library; to create the bindings. Existing code to export various |PSIfour| classes can; be found in :source:`psi4/src` in the files whose name begins with `export_`.; The code to export functions that run entire calculations is usually found in; :source:`psi4/src/core.cc`.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst:3680,bottleneck,bottleneck,3680,doc/sphinxman/source/prog_tour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst,1,['bottleneck'],['bottleneck']
Performance,"e points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:19",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4090,optimiz,optimize,4090,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"e source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two va",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2794,perform,perform,2794,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['perform'],['perform']
Performance,"e' : 2.0 },; {'type' : 'angle',; 'indices' : [1, 0, 2], ; 'value' : 104.5 }]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). * Optimize the benzene/water dimer using GeomeTRIC, with the 6 carbon atoms of benzene frozen in ; place::. molecule h2o {; C 0.833 1.221 -0.504; H 1.482 2.086 -0.518; C 1.379 -0.055 -0.486; H 2.453 -0.184 -0.483; C 0.546 -1.167 -0.474; H 0.971 -2.162 -0.466; C -0.833 -1.001 -0.475; H -1.482 -1.867 -0.468; C -1.379 0.275 -0.490; H -2.453 0.404 -0.491; C -0.546 1.386 -0.506; H -0.971 2.381 -0.524; --; O 0.000 0.147 3.265; H 0.000 -0.505 2.581; H 0.000 0.965 2.790; no_com; no_reorient; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = { ; 'coordsys' : 'tric',; 'constraints' : { ; 'freeze' : [{'type' : 'xyz',; 'indices' : [0, 2, 4, 6, 8, 10]}]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). Output; ^^^^^^. The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (``~``). This produces a table like the one below that shows; for each iteration the value for each of the five quantities and whether the criterion; is active and fulfilled (``*``), active and unfulfilled ( ), or inactive (``o``). ::. --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:28734,optimiz,optimization,28734,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimization']
Performance,"e-points. ::. molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }; ; set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields::. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for :py:func:`~psi4.driver.cbs`, the; basis set needs to be specified through |mints__basis|, not; |cfour__cfour_basis|. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming). Finally, any number and combination of jobs can be run from a single; |PSIfour| input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:20680,optimiz,optimize,20680,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimize']
Performance,"e; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the froz",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:6290,optimiz,optimize,6290,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"e=ccenergy for conv rhf/uhf gradients for ccsd(t) by ccenergy until scaling reworked'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=ccenergy for conv rhf/uhf gradients for ccsd(t) by ccenergy until scaling reworked'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc gradients by ccenergy'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:153886,optimiz,optimization,153886,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['optimiz'],['optimization']
Performance,"e_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23219,optimiz,optimization,23219,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['optimiz'],['optimization']
Performance,"ease into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulne",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27663,load,loaded,27663,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['load'],['loaded']
Performance,"eatured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:2200,bottleneck,bottlenecks,2200,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,3,"['bottleneck', 'optimiz']","['bottlenecks', 'optimized']"
Performance,"ed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =====. Python provides many control structures, any of which can be used within |PSIfour|; input files. For example, to loop over three basis sets, the following code can; be used:. .. code-block:: none. basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11584,optimiz,optimize,11584,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['optimiz'],['optimize']
Performance,"ed local scope, or in the context of ""What will the; specified module use?"". .. note:: ""Global"" in the sense of the discussion has *nothing*; to do with the globals section at the top of :source:`psi4/src/read_options.cc`. That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. .. comment Those options could be distributed out to; all the modules below and the globals section dissolved with no change; to psi's operation.; :source:`src/bin/psi4/read_options.cc`. That section is just a. There are two primary purposes for interacting with options in the python driver. - **Preserving User Options** (Enforcing definition [a] of has_changed). The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don't actually do this. ::. from psi4 import core. g_user_scftype = core.get_global_option('SCF_TYPE'); l_user_scftype_scf = core.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = core.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = core.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = core.get_global_option('WFN'); l_user_wfn = core.get_local_option('MP2', 'WFN'); bg_user_wfn = core.has_global_option_changed('WFN'); bl_user_wfn = core.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # core.scf() and core.mp2() are run. core.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; core.revoke_global_option_changed('SCF_TYPE'); core.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; core.revoke_local_opt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:10579,perform,performed,10579,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['perform'],['performed']
Performance,"em. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20053,optimiz,optimization,20053,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,3,['optimiz'],"['optimization', 'optimized']"
Performance,"emains ``(L + 1)(L + 2)/2``, and the ordering remains the same; as above. Note that the individual functions are not normalized for; angular momentum as in most codes: the self-overlap of a |PSIfour| Cartesian D; or higher function with more than one nonzero Cartesian exponent (e.g., lx; = 1, ly = 1, lz = 0) will be less than one. If Spherical Harmonics are; used, 2L + 1 real combinations of the spherical harmonics are built from; the ``(L+1)(L+2)/2`` Cartesian Gaussians, according to H. Schlegel and M.; Frish, IJQC, 54, 83-87, 1995. Unlike Cartesian functions these functions; are all strictly normalized. Note that in |PSIfour|, the real combinations of; spherical harmonic functions (see the paragraph below Eq. 15 in the; Schlegel paper) are ordered as: 0, 1+, 1-, 2+, 2-, .... * ``USO`` (Unique Symmetry-Adapted Orbitals): Spatial symmetry-adapted; combinations of SOs, blocked according to irrep. The total number of USOs; is the same as the number of SOs, but the number of USOs within each irrep; is usually much smaller, which can lead to significant performance; improvements. Note that this basis is sometimes unfortunately referred to; as the SO basis, so it's a bit context specific. * ``OSO`` (Orthogonal Symmetry-Adapted Orbitals): USOs orthogonalized by; Symmetric or Canonical Orthogonalization. The number of OSOs may be; slightly smaller than the total number of USOs, due to removal of linear; dependencies via Canonical Orthogonalization. The OSOs are rarely; encountered, as usually we go straight from USOs to MOs. * ``MO`` (Molecular Orbitals): The combination of OSOs that diagonalizes; the Fock Matrix, so each basis function is a Hartree-Fock (or Kohn-Sham); molecular orbital. The number of OSOs and MOs is always the same. MOs are; orthonormal. * ``LO`` (Localized Orbitals): Localized occupied orbitals, a different; combination of the occupied molecular orbitals which enhances spatial; locality. LOs do not diagonalize the occ-occ block of the Fock Matrix, but; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:11846,perform,performance,11846,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['perform'],['performance']
Performance,en the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47382,optimiz,optimized,47382,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['optimiz'],['optimized']
Performance,"ep_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5478,optimiz,optimization,5478,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,3,['optimiz'],['optimization']
Performance,"er, unless you're assured of having only one job running on a node at; a time (and all nodes on the filesystem with |psirc| have similar memory; capacities), it is advised to set memory in the input file on a; per-calculation basis. That same command can be used for PsiAPI mode::. psi4.set_memory(int(5e8)). .. tabs::. .. code-tab:: bash PSIthon. set_memory(2000000000). .. code-tab:: py PsiAPI. psi4.set_memory(int(5e8)). .. note:: For parallel jobs, the ``memory`` keyword represents the total memory; available to the job, *not* the memory per thread. Molecule and Geometry Specification; ===================================. .. toctree::; :maxdepth: 2. psithonmol. .. comment To add EFP fragments to a molecule, see :ref:`sec:usingEFPFragments`. To add EFP fragments to a molecule, see :ref:`sec:usingEFPFragments`. .. index::; triple: setting; keywords; general; .. _`sec:jobControl`:. Job Control Keywords; ====================. |PSIfour| comprises a number of C++ modules that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file which control its function.; These keywords are detailed in Appendix :ref:`apdx:options_c_module`.; The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified::. # all equivalent. set globals basis cc-pVDZ. set basis cc-pVDZ. set globals basis = cc-pVDZ. set basis = cc-pVDZ. set globals{; basis cc-pVDZ; }; ; set {; basis cc-pVDZ; }; ; set {; basis = cc-pVDZ; }. Note the lack of quotes around ``cc-pVDZ``, even though it is a string. The; Psithon preprocessor automatically wraps any string values in ``set`` commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords::. set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:5805,perform,perform,5805,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['perform']
Performance,"er. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leaving the caller to determine the other; values. The Libint2 engine instead provides all integrals, so the caller; simply needs to loop over all of the buffers provided in the appropriate order. Changes to External Potential Engines; ..................................... Benchmarking showed that early versions of the old code spent a non-negligible; amount of time performing the Cartesian to spherical harmonic transformation of; the integrals, which is needed for most modern basis sets. To improve; performance, we instead backtransformed the density to the Cartesian; representation (denoted ""CartAO"") and computed / contracted all integrals in; this Cartesian basis, eliminating the need to transform to spherical harmonics; as the integrals are computed. This bottleneck no longer exists, so these; extra transformation steps have been removed as part of the switch to Libint2,; and the affected codes (PCM and CPPE interfaces) now compute the potential and; field integrals in the representation required by the basis set. Also, note that the way external point charges are specified has changed.; Previously, a set of N external point charges would be specified by passing a; matrix with dimensions N rows and 4 columns -- corresponding to charge, x, y, z; -- to the ``set_charge_field()`` member of the potential integral class. The; same information is now passed using the more verbose; ``std::vector<std::pair<double, std::array<double, 3>>>`` type instead, to be; consistent with Libint2's convention. New Operators Available; ....................... Libint2 provides a range of integrals that were previously no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:16666,perform,performance,16666,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['perform'],['performance']
Performance,"eral Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_tour`:. ==========================================================; General layout of the core: where new C++ code should live; ==========================================================. New integral operators; ----------------------. Most of the heavy lifting in |PSIfour| is handled by libmints, which can be; found in the :source:`psi4/src/psi4/libmints` directory. New types of one- and; two-electron integral operators should be added here. The Wavefunction class; :source:`psi4/src/psi4/libmints/wavefunction.h` is also found here and is a key; part of the infrastructure. Every energy calculation is performed by a class; that derives from Wavefunction and is accessible as a return value in the; Python layer. The Wavefunction class contains all pertinent calculation; results, such as one-particle densities, molecular orbitals and gradients. Completely new methods; ----------------------. A new method that is not a modification of existing code belongs in its own; folder in :source:`psi4/src/psi4`; see other folders in that exist in that; location for examples of setting up CMake, and make sure that the new folder is; added to :source:`psi4/src/psi4/CMakeLists.txt`. There are also a number of; variables that can be exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to exter",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst:1683,perform,performed,1683,doc/sphinxman/source/prog_tour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst,1,['perform'],['performed']
Performance,"ermined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known *a priori*,; they may be clamped throughout the procedure by using the |globals__docc| and; |globals__socc| options. For instance, all good quantum chemists know that; :math:`C_{2v}` water is; actually,::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). .. _`sec:scfbrokensymm`:. Broken Symmetry; ~~~~~~~~~~~~~~~. For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the |scf__guess_mix|; keyword to true::. set reference uhf; set guess_mix true; energy('scf'). .. _`sec:scflindep`:. Orthogonalization; ~~~~~~~~~~~~~~~~~. One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital; basis (known as the AO basis). The Molecular Orbital basis (MO basis); is then built as a particular unitary transformation of the OSO; basis. In |PSIfour|, the determination of the OSO basis is; accomplished via either symmetric, canonical, or partial Cholesky; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square root of; the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and; thereby MOs) as AO functions. However, this may lead to numerical; problems if the overla",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:12770,perform,perform,12770,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['perform']
Performance,"es |scf__df_basis_scf| manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set |scf__df_basis_scf| to an auxiliary; basis set defined for all atoms in the system, or set |scf__df_scf_guess|; to false, which disables this acceleration entirely. .. _`sec:scfddfj`:. Integral-Direct Density-Fitted Coulomb Construction; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The Resolution of the Identity (RI) can be used to decompose the normally 4-center ERI tensor into a combination of 3-center and 2-center components.; By reducing the dimensionality of the ERI tensor, application of the RI (often referred to as density-fitting, or DF) can be used to greatly speed up; SCF calculations. The reduction in ERI tensor rank also makes DF an appealing option for conventional SCF calculations, where the ERIs are stored ; in core or on disk. However, even when using DF, I/O becomes a significant bottleneck for systems of a sufficient size when performing conventional SCF; calculations. In principle, though, DF approaches can be utilized in an integral-direct context, gaining the benefits of DF methods without suffering the; I/O bottlenecks that conventional DF methods will eventually run into. One such approach, outlined by Weigend in [Weigend:2002:4285]_,; is available for use in Psi4 for the separate construction of the Coulomb contribution to the Fock matrix. This implementation can be used alongside ; Psi4's separate Exchange construction algorithms for composite Fock matrix construction by using the keyword DFDIRJ as the Coulomb construction ; algorithm when specifying |globals__scf_type| to use a composite algorithm combination (``DFDIRJ+K_alg`` in general, ; or ``DFDIRJ`` for DFT with non-hybrid functionals). . DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI ; screening (set |globals__screening| to ``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:37305,bottleneck,bottleneck,37305,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,2,"['bottleneck', 'perform']","['bottleneck', 'performing']"
Performance,"ese cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~psi4.driver.driver_nbody.nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation not yet translated into; :py:func:`~psi4.driver.properties` computation command. * Frequencies. Energy methods available through P4C4 interface. .. include:: cfour_table_energy.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:29451,optimiz,optimizations,29451,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimizations']
Performance,"essing. To demonstrate, we can embellish the previous example of; H\ :sub:`2` and H atom::. molecule h2 {; H; H 1 0.9; }; ; set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'); ; molecule h {; H; }; ; set basis cc-pvdz; set reference uhf; h_energy = energy('scf'); ; D_e = psi_hartree2kcalmol * (2*h_energy - h2_energy); print ""De=%f"" % D_e. The :py:func:`~psi4.driver.energy` function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation. Generally, there are multiple quantities of interest. Appendix; :ref:`apdx:psivariables_module` lists PSI variables variables set by each; module, and :ref:`apdx:psivariables_alpha` defines them. These can be; accessed through the :py:func:`~psi4.core.get_variable` function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available::. e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.en",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:9911,perform,performing,9911,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['performing']
Performance,"et DO_DISP_EXCH_SINF true # calculate Exch-Disp20 (S^inf); energy('sapt(dft)'); ; and the third-order exchange-induction term is computed as follows::. set DO_IND30_EXCH_SINF true # calculate Exch-Ind30 (S^inf) ; energy('sapt2+3'); ; These calculations are performed with the atomic orbital and ; density-fitting scheme described in the Supplementary Material to; [Smith:2020:184108]_ for the second-order terms and in [Waldrop:2021:024103]_; for the third-order exchange induction. The coupled (response) version of the; exchange-induction corrections are also calculated, exactly for ; :math:`E_{exch-ind,resp}^{(20)}` and by scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:45942,bottleneck,bottleneck,45942,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['bottleneck'],['bottleneck']
Performance,"ethods [Parrish:2013:174102]_, the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102]_. ; To request CCD dispersion treatment in a SAPT computation, simply append; ``(ccd)`` to the name of the method, as in the following examples ::. 	energy('sapt2+(ccd)'); 	energy('sapt2+(3)(ccd)'); 	energy('sapt2+3(ccd)'). The :math:`\delta_{MP2}` corrections can also be computed automatically; by appending ``dmp2`` to the name of the method, with or without CCD dispersion ::. 	energy('sapt2+dmp2'); 	energy('sapt2+(3)dmp2'); 	energy('sapt2+3dmp2'); 	energy('sapt2+(ccd)dmp2'); 	energy('sapt2+(3)(ccd)dmp2'); 	energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold :math:`3o^2v^2+v^2N_{aux}` arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory. Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords. ; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__basis.rst; .. include:: autodir_options_c/sapt__df_basis_sapt.rst; .. include:: autodir_options_c/globals__freeze_core.rst; .. include:: autodir_options_c/sapt__print.rst. Advanced Keywords for Higher-order SAPT; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ccd_disp.rst; .. include:: autodir_options_c/sapt__do_mbpt_disp.rst; .. include:: autodir_options_c/sapt__do_third_order.rst; .. include:: autodir_options_c/sapt__ints_tolerance.rst; .. include:: autodir_options_c/sapt__sapt_mem_check.rst; .. include:: autodir_options_c/globals__debug.rst. MP2 Natural Orbitals; ^^^^^^^",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:27810,perform,performed,27810,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performed']
Performance,"ets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word ``spherical`` or ``cartesian`` to indicate; whether the basis set will run in (5D/7F) or (6D/10F). ::. cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:8603,perform,performing,8603,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['perform'],['performing']
Performance,"example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 *",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10307,optimiz,optimization,10307,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimization']
Performance,"execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38042,optimiz,optimization,38042,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimization']
Performance,"features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:6128,perform,perform,6128,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['perform'],['perform']
Performance,"ffective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The :ref:`Appendices <sec:appendices>` include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under :source:`samples`.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:3709,optimiz,optimization,3709,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimization']
Performance,"fied Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. A",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29332,tune,tuned,29332,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['tune'],['tuned']
Performance,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1282,optimiz,optimize,1282,doc/sphinxman/source/opt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst,8,"['optimiz', 'perform']","['optimization', 'optimizations', 'optimize', 'perform']"
Performance,"format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marke",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9557,optimiz,optimize,9557,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimize']
Performance,"from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The CPPE library **cannot** exploit molecular point group symmetry. .. .. warning:: Analytic gradients and Hessians **are not** available with PE. Finite differences will be used; .. regardless of the ``dertype`` passed to the ``optimize`` function.; .. See :srcsample:`pcmsolver/opt-fd` for a sample input. .. The PCM model and molecular cavity are specified in a ``pcm`` section that has; .. to be explicitly typed in by the user. This additional section follows a syntax; .. that is slightly different from that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. se",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:4166,optimiz,optimize,4166,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['optimiz'],['optimize']
Performance,"fying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, |PSIfour| knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let's; consider CCSD(T)), and it needs to know what's monomer A and what's monomer; B. This last issue of specifying the monomers separately was already dealt; with in the previous SAPT example, where we saw that two dashes in the; ``molecule`` block can be used to separate monomers. So, we're going to do counterpoise-corrected CCSD(T) energies for Ne\ :sub:`2` at; a series of different interatomic distances. And let's print out a table; of the interatomic distances we've considered, and the CP-corrected CCSD(T); interaction energies (in |kcalpermol|) at each geometry. Doing all this; in a single input is surprisingly easy in |PSIfour|. Here's the input; (available as :srcsample:`tu6-cp-ne2`). .. literalinclude:: @SFNX_INCLUDE@samples/tu6-cp-ne2/input.dat. First, you c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:18433,perform,perform,18433,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['perform'],['perform']
Performance,"g |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:4119,perform,performed,4119,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['perform'],['performed']
Performance,"g; them. For each SCF computation, we use ``psi4.IO.set_default_namespace`` to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; ``psi4.IO.change_file_namespace`` so that integrals can be read from it.; For more information on stability analysis, see the :ref:`stability <sec:scfstability_doc>`; documentation. .. index:: SAPT; SAPT0. SAPT0; ^^^^^. Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ'). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT ; truncations, using different basis sets, is reported in ; [Parker:2014:094106]_. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically ; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code ; should cite the following publications: [Hohenstein:2010:184111]_ and ; [Hohenstein:2011:174107]_. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106]_ should be additionally cited. Basic SAPT0 Keywords; ~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__sapt_level.rst; .. include:: autodir_options_c/sapt__basis.rst; .. include:: autodir_options_c/sapt__df_basis_sapt.rst; .. include:: autodir_options_c/sapt__df_basis_elst.rst; .. include:: autodir_options_c/sapt__freeze_core.rst; .. include:: autodir_options_c/sapt__d_convergence.rst; .. include:: autodir_option",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:20639,perform,performance,20639,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performance']
Performance,"geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q} \\; \hat{E}_{pq}^{-} &= \hat{E}_{pq} \ - \ \hat{E}_{qp} \\; {\bf K} &= Skew({\bf \kappa}) . The effect of the orbital rotations on the MO coefficients can be written as. .. math::; {\bf C({\bf \kappa})} = {\bf C^{(0)}} \ e^{{\bf K}}. where :math:`{\bf C^{(0)}}` is the initial MO coefficient matrix and :math:`{\bf C({\b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:6029,optimiz,optimized,6029,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['optimiz'],['optimized']
Performance,"gorithm doesn't need any; significant disk storage,; the integral-direct algorithm for the MP2-R12 energy; stores the transformed integrals to disk, hence very large; computations will require a lot of disk space. In general; the storage requirement is :math:`16 o^2N^2` bytes, where :math:`o`; is the number of occupied orbitals, and :math:`N` is the size of the basis. * If there is not enough memory to perform the computation in one pass,; the program will do multiple passes through the entire set of integrals,; hence your computation will run that many times longer.; In such case, find the machine with the most memory and processors available. * On SMP machines, set the {\tt NUM\_THREADS} to the number of; processors available for the job, or, if all processors are allocated for; your job, set {\tt NUM\_THREADS} to {\em twice} the number of processors; you have. Modern operating systems schedulers are usually very efficient; at handling multithreaded programs, so the overhead of thread context; switching is not significant, but using more threads may lead to better; load balancing, and lower execution times. For example, on a 32-processor; IBM eServer p690 we found that the optimal number of threads was 128.; For the optimal performance, do a few runs with different number of threads; and see which number works best.; Avoid excessively large; number of threads, as this descreases the net amount of memory available to; the computation and thus may increase the number of passes. . * Set the {\tt MEMORY} keyword to the 90% of the available physical; memory, at most. There is a small amount of overhead associated with the; integral-direct algorithms that is not accounted for by the internal memory; handling routines. * The implementation of the integral-direct MP2-R12 (and MP2) method; in |PSIfour| can run efficiently on SMP, or shared-memory, machines,; by utilizing multiple processors via multithreaded approach.; However, it cannot utilize distributed memory machines,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst:7281,load,load,7281,doc/sphinxman/source/attic/mp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst,1,['load'],['load']
Performance,"h :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:3183,perform,performed,3183,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['perform'],['performed']
Performance,"h C built in by the embedding. A standard F-SAPT0 computation; is then performed between A and B, yielding the I-SAPT interaction energy. Any; F-SAPT considerations are also possible when I-SAPT is performed |w--w| F and I are; completely direct-product-separable considerations. . Cube File Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Setting |fisapt__fisapt_do_plot| ``true`` above generates a set of ``.cube`` files; containing the densities and ESPs of the various subsystems in the I-SAPT; embedding procedure. These can be used to gain a detailed understanding of the; intermolecular partition and the polarization between non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subs",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:15387,load,load,15387,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['load'],['load']
Performance,"h Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:plugins`:. Creating New Plugins; ====================. Modular Approach to Development; -------------------------------. It is slightly cumbersome to the development cycle to recompile |PSIfour|; every time a change is made to the C++ code.; It's also daunting to new developers if they're required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with Psi3 due to the independent; nature of the modules. To overcome these problems, |PSIfour| now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi's vast library. The plugins can be loaded at; run-time from any location. .. _`sec:newplugins`:. Creating a New Plugin; ---------------------. |PSIfour| can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing ``myplugin`` with the name of your great code.; If the name you provide is not valid, |PSIfour| will complain. >>> psi4 --plugin-name myplugin. |PSIfour| will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is ``cd`` into the directory, use |PSIfour| to generate; a Makefile, and type make. Then execute ``psi4`` in the directory on the; default input file. .. code-block:: bash. >>> cd myplugin; >>> `psi4 --plugin-compile`; >>> make; >>> psi4. |PSIfour| comes with a few templates that provide an excellent starting; point. These include code that demonstrates AO, MO, and SO integrals. Use; one of the following commands that meets",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:1852,load,loaded,1852,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['load'],['loaded']
Performance,"h cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mean-square of displacement (|optking__rms_disp_g_convergence|), ; all in internal coordinates and atomic units. Usually, these options will not ; be set directly. Primary control for geometry convergence lies with the keyword ; |optking__g_convergence| which sets the aforementioned in accordance ; with Table :ref:`Geometry Convergence <table:optkingconv>`. |; |. .. _`table:optkingconv`:. .. table:: Summary of sets of geometry optimization criteria available in |PSIfour|. +-----------------------------+----------------------------+----------------------------+----------------------------+------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:20452,optimiz,optimization,20452,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimization']
Performance,"h conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50624,load,loaders,50624,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['load'],['loaders']
Performance,"h-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and pyth",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12856,cache,cache,12856,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['cache'],['cache']
Performance,"h:`(\lambda_3)` correction,; the |dct__three_particle| option needs to be set to PERTURBATIVE. .. _`sec:dctmininput`:. Minimal Input; ~~~~~~~~~~~~~. Minimal input for the DCT single-point computation looks like this::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; energy('dct'). The ``energy('dct')`` call to :py:func:`~psi4.driver.energy` executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17208,optimiz,optimization,17208,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"hat; this is a different convergence criterion than for the \PSIdetci\; program itself. These can be differentiated, if changed by the user,; by placing the {\tt CONVERGENCE} keywords within separate sections of; input, such as {\tt detcas: ( convergence = x )}. ENERGY\_CONVERGENCE = integer; Convergence desired on the total MCSCF energy. The default is 7.; \item[RESTRICTED\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are optimized in the MCSCF.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. RESTRICTED\_UOCC = (integer array); Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are optimized in the MCSCF.; The default is the zero vector. FROZEN\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_DOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_DOCC} and {\tt FROZEN\_DOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. FROZEN\_UOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are literally frozen and are not optimized in the MCSCF",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:5664,optimiz,optimized,5664,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['optimiz'],['optimized']
Performance,"he MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in |PSIfour| for all single; reference types available in the SCF module.; MP2 defaults in |PSIfour| to the density-fitted code. The support for MP2 by the DFMP2 module in |Psifour| is detailed in; Table :ref:`DFMP2 Capabilities <table:dfmp2_stdsuite>`. Even without; ``set qc_module dfmp2``, methods will default to this module, but; alternate implementations and use of |globals__mp2_type| for performing; a MP2 with conventional integrals can be seen at :ref:`other modules; <table:managedmethods>`. .. include:: autodoc_capabilities_dfmp2.rst. An example utilization of the code is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; ; energy('mp2'). The ``energy('mp2')`` call to :py:func:`~psi4.driver.energy` executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted :math:`(Q|ov)` integrals and then builds the; full :math:`(ov|ov)` tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:3177,perform,performing,3177,doc/sphinxman/source/dfmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst,1,['perform'],['performing']
Performance,"he active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:9665,perform,perform,9665,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,2,"['optimiz', 'perform']","['optimizations', 'perform']"
Performance,"he |MollerPlesset| perturbation theory and the; Retaining the Excitation degree perturbation theory([Fink:2006:RE]_, [Behnle:2019:REMP]_).; The mixing ratio is determined by the parameter :math':`A`:. .. math::; \widehat{H}^{(0)}_\text{REMP} = (1-A)\widehat{H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:11023,optimiz,optimized,11023,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['optimiz'],['optimized']
Performance,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8776,optimiz,optimization,8776,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['optimiz'],['optimization']
Performance,"hift|, and it is turned off when the DIIS error is; smaller than |scf__level_shift_cutoff|. Reasonable values for; the shift and convergence threshold are 5.0 and 1e-2,; respectively.; SOSCF [Off by Default]; See :ref:`sec:soscf`. .. _`sec:scferi`:. ERI Algorithms; ~~~~~~~~~~~~~~. The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; |PSIfour| for these terms. The algorithm is selected by the |globals__scf_type|; keyword. Most consist of a single algorithm applied to; the construction of both the Coulomb and Exchange parts; of the Fock Matrix:. PK [:ref:`Default <table:conv_scf>`]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if |scf__ints_tolerance|; is set to 1.0E-8 or so.; DF [:ref:`Default <table:conv_scf>`]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, *not* the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the |scf__df_basis_scf| keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:28533,bottleneck,bottleneck,28533,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['bottleneck'],['bottleneck']
Performance,"his is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations faster and is helpful in some; circumstances where unphysical mixing of inactive and active; occupied orbitals might occur. Presently, it is not possible; to mix the use of restricted and frozen orbitals in |PSIfour|. The division of the molecular orbitals into various subspaces such as RAS; spaces, or frozen vs active orbitals, etc, needs to be clear not only to; the detci program, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus,; orbital subspace keywords such as |detci__ras1|, |detci__ras2|, |detci__ras3|, |detci__ras4|,; |globals__frozen_docc|, |globals__frozen_uocc|, |detci__active|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At present, only energies ({\tt none}) are supported; future; releases will implement gradients ({\tt first}). CONVERGENCE = integer; Convergence desired on the orbital gradient. Convergence is achieved when; the RMS of the error in the orbital gradient is less than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion than for the \PSIdetci\; program itself. These can be differentiated, if changed by the user,; by placing t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:3769,perform,perform,3769,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['perform'],['perform']
Performance,"hods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q}",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:5489,optimiz,optimized,5489,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,4,['optimiz'],['optimized']
Performance,"hould have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergence for RASSCF can be difficult in our; current implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc|",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:1695,perform,performs,1695,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,2,"['optimiz', 'perform']","['optimization', 'performs']"
Performance,"hout even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+--",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1553,optimiz,optimize,1553,doc/sphinxman/source/intercalls.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst,1,['optimiz'],['optimize']
Performance,"http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:5332,optimiz,optimizer,5332,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['optimiz'],['optimizer']
Performance,"https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:10305,optimiz,optimized,10305,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimized']
Performance,"https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:3845,perform,perform,3845,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['perform'],['perform']
Performance,"hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500186j>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **10**, 4389 (2014).; (doi: `10.1021/ct500634s <https://doi.org/10.1021/ct500634s>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). * ""Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,""; U. Bozkaya, *J. Chem. Theory Comput.* **12**, 1179 (2016).; (doi: `10.1021/acs.jctc.5b01128 <https://doi.org/10.1021/acs.jctc.5b01128>`_). Density-Fitted and Cholesky-Decompos",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:23016,optimiz,optimized,23016,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimized']
Performance,"i4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1100,optimiz,optimize,1100,doc/sphinxman/source/opt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst,3,['optimiz'],"['optimization', 'optimize']"
Performance,"if(TARGET PCMSolver::pcm); list(APPEND sources; psipcm.cc; ); psi4_add_module(lib psipcm sources); target_link_libraries(psipcm; PUBLIC; PCMSolver::pcm; mints; Libint2::cxx; ); # Because psipcm.cc includes potentialint.h, which includes libint2's engine.h; # we have to make sure we reduce the optimization level to match libmints; # See note at psi4/src/psi4/libmints/CMakeLists.txt; set_property(TARGET psipcm PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libpsipcm/CMakeLists.txt:294,optimiz,optimization,294,psi4/src/psi4/libpsipcm/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libpsipcm/CMakeLists.txt,1,['optimiz'],['optimization']
Performance,"ified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:9610,optimiz,optimization,9610,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['optimiz'],['optimization']
Performance,"iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fittin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12832,tune,tuned-LRC,12832,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['tune'],['tuned-LRC']
Performance,"ike the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies dire",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:3089,optimiz,optimize,3089,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['optimiz'],['optimize']
Performance,"illed. To help with flat ; potential surfaces, alternate convergence achieved when 100\ :math:`\times`\ *rms force* is less ; than **RMS Force** criterion.; .. [#fg] Compensates for difficulties in converging geometry optmizations of supermolecular complexes ; tightly, where large *rms disp* and *max disp* may result from flat potential surfaces even when; *max force* and/or *rms force* are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by |optking__g_convergence|.; Note that this revokes the special convergence arrangements detailed in notes [#fe]_ and [#ff]_ ; and instead requires all active criteria to be fulfilled to ; achieve convergence. To avoid this revokation, turn on keyword |optking__flexible_g_convergence|. .. index::; pair: geometry optimization; output. Interface to GeomeTRIC; ^^^^^^^^^^^^^^^^^^^^^^. The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108]_ may be used in place of; Psi4's native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions. Use of the GeomeTRIC optimizer is specified with the ``engine`` argument to; :py:func:`~psi4.driver.optimize`. The optimization will respect the keywords |optking__g_convergence|; and |optking__geom_maxiter|. Any other GeomeTRIC-specific options (including constraints); may be specified with the ``optimizer_keywords`` argument to :py:func:`~psi4.driver.optimize`.; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the `GeomeTRIC github; <https://github.com/leeping/geomeTRIC>`_ ; for more information on keywords and JSON specification of constraints. * Optimize the water molecule using GeomeTRIC::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:26265,optimiz,optimizer,26265,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,2,['optimiz'],['optimizer']
Performance,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-dft ""psi;addon;brianqc;smoketests;opt;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft/CMakeLists.txt:61,optimiz,optimization-dft,61,tests/brianqc/geometry-optimization-dft/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft/CMakeLists.txt,1,['optimiz'],['optimization-dft']
Performance,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-dft-lrc ""psi;addon;brianqc;quicktests;opt;dft;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt:61,optimiz,optimization-dft-lrc,61,tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-dft-lrc/CMakeLists.txt,1,['optimiz'],['optimization-dft-lrc']
Performance,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf ""psi;addon;brianqc;smoketests;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf/CMakeLists.txt:61,optimiz,optimization-hf,61,tests/brianqc/geometry-optimization-hf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf/CMakeLists.txt,1,['optimiz'],['optimization-hf']
Performance,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf-rohf ""psi;addon;brianqc;quicktests;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt:61,optimiz,optimization-hf-rohf,61,tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-rohf/CMakeLists.txt,1,['optimiz'],['optimization-hf-rohf']
Performance,"include(TestingMacros). add_regression_test(brianqc-geometry-optimization-hf-uhf ""psi;addon;brianqc;quicktests;opt;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt:61,optimiz,optimization-hf-uhf,61,tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/brianqc/geometry-optimization-hf-uhf/CMakeLists.txt,1,['optimiz'],['optimization-hf-uhf']
Performance,"ing any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} module to read; in the basis set information. A \PSI\ input for this code should look some; thing like the following:. \includeinput{sample-codes/integrals/input.dat}; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst:4490,perform,perform,4490,doc/sphinxman/source/attic/progtutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst,1,['perform'],['perform']
Performance,"ing files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly mak",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:1242,perform,performed,1242,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['performed']
Performance,"ing of all :math:`S^{2}` approximated terms; was turned off by default. Finally, in 2014 Parker et al. [Parker:2014:094106]_ empirically discovered that ; SAPT0 energies for van der Waals dimers with close contacts benefit from a slightly modified ; recipe that involves an empirically adjusted exponent :math:`\alpha = 3.0`. ; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]_). .. math:: E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)} ; + \delta_{HF}^{(2)}; :label: sSAPT0. where :math:`\delta_{HF}^{(2)}` is computed *without* any scaling. Please note that ; sSAPT0 is thus not the same as requesting ``exch_scale_alpha 3.0``, and that the; scaling is automatically performed by requesting ``energy('ssapt0')``. A First Example; ^^^^^^^^^^^^^^^. The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods,; not all of them). ::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis aug-cc-pvdz; 	; 	energy('sapt0'); 	energy('sapt2'); 	energy('sapt2+'); 	energy('sapt2+(3)'); 	energy('sapt2+3'). The SAPT module uses the standard |PSIfour| partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the ``no_reorient`` and ``symmetry; c1`` molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:13852,perform,perform,13852,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['perform']
Performance,"inimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_conv",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2673,optimiz,optimizer,2673,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimizer']
Performance,"ion (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.; For example, if the primary basis is aug-cc-pVDZ, the default; |fnocc__df_basis_cc| will be aug-cc-pVDZ-RI. Alternatively, the user can request that the DF-CCSD(T) procedure use a; set of vectors defined by the Cholesky decomposition of the ERI tensor as; the auxiliary basis. This feature is enabled by specifying |globals__cc_type| ``CD``.; CD methods can be enabled in the SCF; procedure as well, by specifying the |globals__scf_type| as ``CD``. The; accuracy of the decomposition can be controlled through the keyword; |fnocc__cholesky_tolerance|. .. comment This feature is enabled by specifying |fnocc__df_basis_cc| as ""CHOLESKY"". . The following input file sets up a DF-CCSD(T); computation using CD integrals ::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }; ; set {; scf_type cd; cc_type cd; basis aug-cc-pvdz; freeze_core true; }; energy('ccsd(t)'). The resulting CCSD(T) correlation energy will be equivalent to that; obt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:14667,optimiz,optimized,14667,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['optimiz'],['optimized']
Performance,"ional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; CCname ROOT m -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION. The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9398,perform,performs,9398,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['perform'],['performs']
Performance,"ist beginning at |ccenergy__r_convergence|). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. .. [#f7] For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; |scf__e_convergence| and |scf__d_convergence| for SCF of HF or DFT, 11; for |scf__e_convergence| and |scf__d_convergence| for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. .. _`sec:scfrec`:. Recommendations; ~~~~~~~~~~~~~~~. The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. * For |scf__guess|, the ``SAD`` guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; * For wall time, ``DF`` may be a factor of ten or more faster than the exact; integral technologies available in |PSIfour|.; Use ``DF`` unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; ``DIRECT``.; * Don't mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; * Buy a developer a beer!. The ""best-practice"" input file for HF is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:60809,perform,performing,60809,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,2,"['optimiz', 'perform']","['optimized', 'performing']"
Performance,"itals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_DOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_DOCC} and {\tt FROZEN\_DOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. FROZEN\_UOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_UOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_UOCC} and {\tt FROZEN\_UOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The default is the zero vector. NCASITER = integer]\mbox{}\\; Maximum number of iterations to optimize the orbitals. This option; should be specified in the DEFAULT section of input, because; it needs to be visible to the control program PSI. Defaults to 20. AVERAGE\_STATES = (integer array)]\mbox{}\\; This gives a list of what states to average for the orbital ; optimization. States are numbered starting from 1. PRINT = integer]\mbox{}\\; This option determines the verbosity of the output. A value of 1 or; 2 specifies minimal printing, a value of 3 specifies verbose printing.; Values of 4 or 5 are used for debugging. Do not use level 5 unless; the test case is very small (e.g. STO H\ :sub:`2`\ O CISD). Examples; --------. Example of a CASSCF single-point calculation for H\ :sub:`2`\ O using; a valence active space 3a\ :sub:`1` 1b\ :sub:`1` 2b\ :sub:`2`. ::. % 6-31G** H2O Test CASSCF Energy Point; ; psi: (; label = ""6-31G** CASSCF H2O""; jobtype = sp; wfn = casscf; reference = rhf; restricted_docc = (1 0 0 0); active = (3 0 1 2); basis = ""6-31G**""; zmat = (; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:6991,optimiz,optimize,6991,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['optimiz'],['optimize']
Performance,"itionally, the; LINK implementation scales well with system size ; while simultaneously providing a formally-exact computation of the ; Exchange term. See :ref:`sec:scflink` for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword ""DF""; be selected in all cases so that the correct implementation can be selected by; |PSIfours| internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation. Additionally, expert users ; can manually switch between the in-memory and on-disk options *within* MEM_DF or DISK_DF using ; the |scf__scf_subtype| option. Using ``SCF_SUBTYPE = AUTO``, where |PSIfour| ; automatically selects the in-memory or on-disk option for MEM_DF/DISK_DF based on memory and molecule, is the default ; and recommended option. However, the in-memory or on-disk algorithms for MEM_DF and DISK_DF can be forced by using; ``SCF_SUBTYPE = INCORE`` or ``SCF_SUBTYPE = OUT_OF_CORE``, respectively.; Note that an excepti",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:33606,perform,performance,33606,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performance']
Performance,"itions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |op",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4187,optimiz,optimize,4187,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"k-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]_. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728]_. The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include ; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure. The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC's MCSCF module regardless of what; orbital type is chosen, ``twocon``, ``rhf``, or ``rohf``. An example of the; MCSCF input is given below. PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (*e.g.*, triplets), but in general",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst:4280,perform,perform,4280,doc/sphinxman/source/psimrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst,2,"['optimiz', 'perform']","['optimization', 'perform']"
Performance,"l <sec:tutorial>` section,; the :py:func:`~psi4.driver.driver_nbody.nbody` wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example, ::. energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules. |PSIfour| also provides the :py:func:`~psi4.driver.cbs` wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,::. # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree--Fock energy in the; largest basis (cc-pVTZ). :py:func:`~psi4.driver.cbs` can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used. Another very useful and powerful feature of |PSIfour| is the ability; to compute results on entire databases of molecules at a time,; as provided by the :py:func:`~psi4.driver.wrapper_database.database` wrapper. For example,::. database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (``cp=1``) on all members of Hobza's S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others. These wrapper functions are discussed separately in; :ref:`sec:psithonFunc`. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the ``set {...}`` block or with any other ``set`` command. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:16730,perform,perform,16730,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['perform']
Performance,"l-direct SCF algorithms, including no disk I/O, ; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with system size ; while simultaneously providing a formally-exact computation of the ; Exchange term. See :ref:`sec:scflink` for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword ""DF""; be selected in all cases so that the correct implementation can be selected by; |PSIfours| internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation. Additionally, expert users ; can manually switch between the in-memory and on-disk options *within* MEM_DF or DISK_DF using ; the |scf__scf_subtype| option. Using ``SCF_SUBTYPE = AUTO``, where |PSIfour| ; automatically selects the in-memory or on-disk option for MEM_DF/DISK_DF based on memory and molecule, is the default ; and recommended option. However, the in-memory or on-disk algorithms for MEM_DF and DISK_DF can be forced by ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:33448,optimiz,optimized,33448,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"ld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; res",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:1806,perform,perform,1806,doc/sphinxman/source/freq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst,1,['perform'],['perform']
Performance,"le :source:`samples/example_psi4rc_file`). . All the commands mentioned in section :ref:`sec:Scratch` can be used in this file. To set up the scratch path::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:9160,load,loaded,9160,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['load'],['loaded']
Performance,"les.; For convenience, the physical constants used within the |PSIfour| code (which; are obtained from `NIST CODATA 2014; <https://physics.nist.gov/cuu/Constants/archive2014.html>`_; are also automatically loaded as Psithon; variables (before |psirc| is loaded, so that the user's |psirc| values can; override the builtins (in the input file, not in the C++ code). The physical constants used within |PSIfour|, which are automatically; made available within all |PSIfour| input files are in :ref:`table:physconst`. .. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/constants/physconst.py; .. :lines: 28-. In Psithon input files, prepend physical constants with ``psi_`` to; prevent clashes with user-defined variables (*e.g.*, ``psi_h``). In; PsiAPI mode, access as, *e.g.*, ``psi4.constants.h``. .. index:: memory; .. _`sec:memory`:. Memory Specification; ====================. By default, |PSIfour| assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the ``memory`` keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to |PSIfour|::. # all equivalent. memory 2 GB; ; memory 2000 MB; ; memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). |PSIfour| recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB). By default, |PSIfour| performs a ""sanity check"" when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to |PSIfour|::. # setting available memory to 2 MB; set_memory_bytes(2000000). Please note that this memory setting only governs the maximal memory; usage of the major data structures, and actual to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:3486,perform,perform,3486,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['perform']
Performance,"list(APPEND sources; AO_contribute.cc; dct.cc; dct_compute.cc; dct_compute_RHF.cc; dct_compute_UHF.cc; dct_density_RHF.cc; dct_density_UHF.cc; dct_df_operations.cc; dct_df_tensor.cc; dct_energy_RHF.cc; dct_energy_UHF.cc; dct_gradient.cc; dct_gradient_RHF.cc; dct_gradient_UHF.cc; dct_integrals_RHF.cc; dct_integrals_UHF.cc; dct_intermediates_RHF.cc; dct_intermediates_UHF.cc; dct_lambda_RHF.cc; dct_lambda_UHF.cc; dct_memory.cc; dct_mp2_RHF.cc; dct_mp2_UHF.cc; dct_oo_RHF.cc; dct_oo_UHF.cc; dct_qc.cc; dct_relaxed_density_UHF.cc; dct_scf_RHF.cc; dct_scf_UHF.cc; dct_sort_mo_tpdm.cc; dct_tau_RHF.cc; dct_tau_UHF.cc; dct_triples.cc; dct_validate.cc; half_transform.cc; main.cc; ). # See https://github.com/psi4/psi4/issues/923; if (CMAKE_CXX_COMPILER_ID MATCHES ""Intel""); if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.0.3 AND; (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 18.0 OR; CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 18.0)); message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dct_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dct_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); endif (). psi4_add_module(bin dct sources). target_link_libraries(dct PUBLIC diis); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dct/CMakeLists.txt:1019,optimiz,optimization,1019,psi4/src/psi4/dct/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dct/CMakeLists.txt,1,['optimiz'],['optimization']
Performance,list(APPEND sources; a_spinad.cc; b_spinad.cc; c_sort.cc; cache.cc; cctransort.cc; d_sort.cc; d_spinad.cc; denom.cc; e_sort.cc; e_spinad.cc; f_sort.cc; fock.cc; memcheck.cc; pitzer2qt.cc; scf_check.cc; sort_tei_rhf.cc; sort_tei_uhf.cc; ). psi4_add_module(bin cctransort sources). if(TARGET PCMSolver::pcm); target_link_libraries(cctransort; PUBLIC; PCMSolver::pcm; ); endif(); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cctransort/CMakeLists.txt:58,cache,cache,58,psi4/src/psi4/cctransort/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cctransort/CMakeLists.txt,1,['cache'],['cache']
Performance,"ll* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:39527,perform,performed,39527,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['perform'],['performed']
Performance,"lude:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst; .. include:: autodir_options_c/cceom__e_convergence.rst; .. include:: autodir_options_c/cceom__singles_print.rst; .. include:: autodir_options_c/cceom__schmidt_add_residual_tolerance.rst; .. include:: autodir_options_c/cceom__eom_guess.rst. Linear Response (CCLR) Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Linear response computations are invoked like ``properties('ccsd')``; or ``properties('cc2')``, along with a list of requested properties.; A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:ccresponse`. The most important keywor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9888,bottleneck,bottlenecks,9888,doc/sphinxman/source/cc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst,1,['bottleneck'],['bottlenecks']
Performance,"lude:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition State",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4596,optimiz,optimize,4596,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"luster Theory,""; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; *J. Chem. Phys.* **132**, 074107 (2010).; (doi: `10.1063/1.3305335 <https://doi.org/10.1063/1.3305335>`_). Mk-MRCCSDT(-n). * ""Triple Excitations in State-Specific Multireference Coupled; Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,"" F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, *J. Chem. Phys.* **128**, 124104; (2008).; (doi: `10.1063/1.2834927 <https://doi.org/10.1063/1.2834927>`_). Mk-MRPT2. * ""A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,""; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; *Phys. Chem. Chem. Phys.* **11**, 4728-4741 (2009).; (doi: `10.1039/b822910d <https://doi.org/10.1039/b822910d>`_). Symmetry-Adapted Perturbation Theory (SAPT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. |PSIfour| features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. * ""Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:14985,perform,perform,14985,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['perform'],['perform']
Performance,"m. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay's DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}` are the basis functions, which, in |PSIfour| are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix :math:`C_{\mu i}` contains the MO coefficients, which are the; constrained variational parameters in Hartree--Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. .. math:: | \Psi_0 \rang",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:4846,perform,performed,4846,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performed']
Performance,"ma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9332,optimiz,optimization,9332,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimization']
Performance,"machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases where tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:5390,perform,performs,5390,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['perform'],['performs']
Performance,"mands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9082,optimiz,optimizations,9082,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,3,['optimiz'],['optimizations']
Performance,"matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7407,optimiz,optimized,7407,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['optimiz'],['optimized']
Performance,"mitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------------------------------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10081,optimiz,optimizations,10081,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimizations']
Performance,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4957,optimiz,optimization,4957,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,2,['optimiz'],"['optimization', 'optimize']"
Performance,"mmunication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,""; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; *J. Chem. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:19952,optimiz,optimized,19952,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimized']
Performance,"mon/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22332,optimiz,optimizations,22332,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['optimiz'],['optimizations']
Performance,"n preprocessor; wraps strings in quotes by default, we have to tell it that ``basis_set`` is a; Python variable, not a string, by prefixing it with a dollar sign. . The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water::. molecule h2o{; O; H 1 R; H 1 R 2 A; }; ; Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2); ; set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of ``Rvals`` and ``Avals`` are both completely standard Python syntax.; Having named our molecule ``h2o`` we can then set the values of ``R`` and ``A`` within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the ``set`` keyword. Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See :srcsample:`scf4` for analogous Z-matrix; and Cartiesian scans. .. _`sec:resultsTables`:. Tables of Results; =================. The Psithon function ``psi4.driver.p4util.Table`` has been removed,; as the Python ecosystem provides many more flexible alternatives. An; example tabulating a potential energy surface scan for water with Pandas; is shown below::. molecule h2o {; O; H 1 R; H 1 R 2 A; }; ; Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2); ; rows = []; table = []; ; set basis cc-pvdz; ; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]); ; import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:13848,perform,performed,13848,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['performed']
Performance,"n should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see :srcsample:`scf7` and :srcsample:`dfmp2-grad5`. .. _`sec:scfdefault`:. Convergence and Algorithm Defaults; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. _`table:conv_scf`:. .. table:: SCF algorithm and convergence criteria defaults by calculation type [#f1]_. +--------------------+--------------------+----------------------+----------------------+---------------------+; | *Ab Initio* Method | Calculation Type | |scf__e_convergence| | |scf__d_convergence| | |globals__scf_type| |; +====================+====================+======================+======================+=====================+; | SCF of HF or DFT | energy | 6 | 6 | DF |; + +--------------------+----------------------+----------------------+ +; | | optimization | 8 | 8 | |; + +--------------------+----------------------+----------------------+ +; | | frequency [#f7]_ | 8 | 8 | |; +--------------------+--------------------+----------------------+----------------------+---------------------+; | SCF of post-HF | energy | 8 | 8 | PK [#f3]_ |; + +--------------------+----------------------+----------------------+ +; | | optimization | 10 | 10 | |; + +--------------------+----------------------+----------------------+ +; | | frequency [#f7]_ | 10 | 10 | |; + +--------------------+----------------------+----------------------+ +; | | CC property [#f2]_ | 10 | 10 | |; +--------------------+--------------------+----------------------+----------------------+---------------------+. .. _`table:conv_corl`:. .. table:: Post-SCF convergence criteria defaults by calculation type [#f4]_. +--------------------+--------------------+----------------------+-------------------------+; | *Ab Initio* Method | Calculation Type | E_CONVERGENCE [#f5]_ | R_CONVERGENCE [#f6]_ |; +====================+====================+======================+=========================+; | post-HF of post-HF |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:57147,optimiz,optimization,57147,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,2,['optimiz'],['optimization']
Performance,"n,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46435,optimiz,optimized,46435,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['optimiz'],['optimized']
Performance,"n/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the followi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6527,load,loading,6527,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,2,"['cache', 'load']","['cache', 'loading']"
Performance,"n; to the true Mk-MRCC procedure. The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC's MCSCF module regardless of what; orbital type is chosen, ``twocon``, ``rhf``, or ``rohf``. An example of the; MCSCF input is given below. PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (*e.g.*, triplets), but in general, not all the required matrix elements have; been coded for high-spin cases, meaning that results will correspond to an; approximate Mk-MRCC computation for high-spin cases. A Simple Example; ________________ . The |psimrcc__corr_wfn| allows you to select one of three methods; Mk-MRPT2 [``PT2``], Mk-MRCCSD [``CCSD``], or Mk-MRCCSD(T) [``CCSD_T``].; The |psimrcc__corr_multp| option allows you to select the Slater; determinants with a particular :math:`M_s` value. The |psimrcc__wfn_sym|; keyword is neccesary if you do not want to compute the energy of the; totally-symmetric state. The |psimrcc__follow_root| option may be used; to follow different roots of the effective Hamiltonian. A value of 1; instructs PSIMRCC to follow the solution with the lowest energy given; a certain set of determinants. ::. molecule o2 {; 0 3; O; O 1 2.265122720724; units au; }; set {; basis cc-pvtz; }; set mcscf {; reference rohf; docc [3,0,0,0,0,2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst:5197,perform,performing,5197,doc/sphinxman/source/psimrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst,1,['perform'],['performing']
Performance,"nal; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_lev",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5880,optimiz,optimize,5880,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['optimiz'],['optimize']
Performance,"nce.rst; .. include:: /autodir_options_c/dfocc__r_convergence.rst; .. include:: /autodir_options_c/dfocc__rms_mograd_convergence.rst; .. include:: /autodir_options_c/dfocc__max_mograd_convergence.rst; .. include:: /autodir_options_c/dfocc__mo_maxiter.rst; .. include:: /autodir_options_c/dfocc__orb_opt.rst. Advanced DFOCC Keywords; ~~~~~~~~~~~~~~~~~~~~~~~. .. include:: /autodir_options_c/dfocc__opt_method.rst; .. include:: /autodir_options_c/dfocc__hess_type.rst; .. include:: /autodir_options_c/dfocc__mo_diis_num_vecs.rst; .. include:: /autodir_options_c/dfocc__orth_type.rst; .. include:: /autodir_options_c/dfocc__do_diis.rst; .. include:: /autodir_options_c/dfocc__do_level_shift.rst. .. _`sec:occ_nonoo`:. Conventional (Non-OO) Coupled-Cluster and |MollerPlesset| Perturbation Theories; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The various non-orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC non-OO; Methods <table:occ_nonoo_calls>` and detailed in Table :ref:`OCC; non-OO Capabilities <table:occ_stdsuite_nonoo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. Starting in v1.4, MP2.5 and MP3 default to the density-fit algorithm. Set |globals__mp_type| to ``CONV`` to get previous behavior. Publications resulting from the use of the non-OO CC codes should cite the following publications:. * **MP2** [Bozkaya:2011:omp2]_, [Bozkaya:2013:omp2grad]_, and [Bozkaya:2014:dfomp2grad]_. * **MP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, [Bozkaya:2013:omp3grad]_, [Bozkaya:2016:dfomp3]_, and [Bozkaya:2018:dfo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:18805,optimiz,optimized,18805,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['optimiz'],['optimized']
Performance,"nly necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:2182,optimiz,optimize,2182,doc/sphinxman/source/notes_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst,1,['optimiz'],['optimize']
Performance,"ntegrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI) (including a variety of multireference CI's and full; CI); coupled-cluster (CC) including CC with variationaly optimized; orbitals; second-order M{\o}ller-Plesset perturbation theory (MPPT); including explicitly correlated second-order M{\o}ller-Plesset energy; (MP2-R12); and complete-active-space self-consistent field (CASSCF); theory. By January 2008, all of the C code in \PSIthree\ was ; converted to C++ to enable a path toward more object-oriented design; and a single-excecutable framework that will facilitate code reuse and ; ease efforts at parallelization. At this same time, all of the legacy I/O; routines from {\tt PSI2} were removed, greatly streamlining the; \library{libciomr.a} library.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst:2114,optimiz,optimized,2114,doc/sphinxman/source/attic/history.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst,1,['optimiz'],['optimized']
Performance,"ntegrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11952,optimiz,optimized,11952,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['optimiz'],['optimized']
Performance,"o indicate the compound row or column; indices. The compound indices may be computed based on a knowledge of; the permutational symmetry (or antisymmetry) of the index pairs; if; the given integrals are antisymmetric with respect to permutation of i; and j, for example, we may compute (i,j) from the individual indices; keeping i>j. Since we may partition the indices into any grouping; we desire, we may select any grouping of the indices to use as row and; column indices. For example, since i; × j; × a; = b. we could also construct a different supermatrix for these same; integrals, using (i,j,a) as the compound row index and b as the column; index. These same concepts apply to any multi-index quantity. III. Library Initialization . Before the library may be used, it must first be initialized; via the dpd_init() function. This function; requires the following information (see dpd.h for proper syntax):; int dpd_init(int dpd_num, int nirreps, long int memory, int cachetype, ; int *cachefiles, int **cachelist, struct dpd_file4_cache_entry *priority, ; int num_subspaces, int *orbspi, int *orbsym, ...);. dpd_num - An integer identifier for the current DPD; setup. Only two active DPD's are currently allowed, so this value; can be either 0 or 1.; nirreps - The number of irreducible representations in; the point group.; memory - The amount of available memory in bytes.; cachetype - The type of file cacheing desired (see below). If this; is 0, then a priority-based cache is used; if it's 1 then a; ""least-recently-used"" method is applied.; cachefiles - See below.; cachelist - See below.; priority - See below.; num_subspaces - The number of orbital subspaces to be; used. If the programmer uses only occupied and virtual spaces,; for example, this would be set to 2.; For each value of num_subspaces, the following; two arrays must also be provided:; orbspi - An irrep population array,; i.e., the number of orbitals per irrep in the current; subspace.; orbsym - An orbital symmetry ar",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:3967,cache,cachetype,3967,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,3,['cache'],"['cachefiles', 'cachelist', 'cachetype']"
Performance,"o infinitely separated nuclei and; electrons, not ""formation"" values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi4.driver.qcdb.vib.thermo`; as is shown in :srcsample:`freq-isotope2`. A few summary psivars are set: ""ZPVE"", ""THERMAL ENERGY CORRECTION"",; ""ENTHALPY CORRECTION"", ""GIBBS FREE ENERGY CORRECTION"", ""ZERO K; ENTHALPHY"", ""THERMAL ENERGY"", ""ENTHALPY"", ""GIBBS FREE ENERGY"".; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the ``thermo`` function. See :source:`tests/pytests/test_vibanalysis.py`; (near the end) for an example. .. index::; pair: vibrational analysis; output. Output; ^^^^^^. The full list of keywords for thermo is provided in Appendix :ref:`apdx:thermo`. Information on the Psithon function that driv",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst:2768,perform,performed,2768,doc/sphinxman/source/thermo.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst,1,['perform'],['performed']
Performance,"o run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the ``# Load C++ plugin`` section). .. comment as modeled in :source:`tests/plugin_libcim/__init__.py`). .. literalinclude:: @SFNX_INCLUDE@psi4/share/psi4/plugin/__init__.py.template. * **doc.rst** |w---w| Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, *etc.*. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the ``.. comment``; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the |PSIfour|; documentation, along with any docstrings to Python functions, and the C++; keywords block in the ``myplugin.cc`` file. See :ref:`sec:documentation`; for building documentation. .. and :ref:`Available Plugins <sec:availablePlugins>`; .. for this file's final destination. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded. To create a purely Python plugin, create a new plugin directory, then; remove the ``Makefile`` and ``myplugin.cc`` files and; erase the shared object loading portion of ``__init__.py``. Create as many .py; files as necessary (registering each one in ``__init__.py``), use; ``input.dat`` as a model for loading the plugin, no recompile ever; necessary. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:11081,load,loaded,11081,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,3,['load'],"['loaded', 'loading']"
Performance,"obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2402,optimiz,optimization,2402,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['optimiz'],['optimization']
Performance,"oiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11024,perform,performed,11024,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['perform'],['performed']
Performance,"olecular; geometry. Therefore, *it's important to obtain the vibrational frequencies ; at the OPTIMIZED GEOMETRY*. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the *bottom* of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there's a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over. So, it's easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; :srcsample:`tu4-h2o-freq`):. .. literalinclude:: @SFNX_INCLUDE@samples/tu4-h2o-freq/input.dat. The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm\ :sup:`-1`; may exist)::. Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm\ :sup:`-1` ; is::. Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency us",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:9559,optimiz,optimization,9559,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['optimiz'],['optimization']
Performance,"ompatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) <table:energy_dft>`, :ref:`Energy (MRCC) <table:energy_mrcc>`, :ref:`Energy (CFOUR) <table:energy_cfour>` fully list energy target methods; * :ref:`Gradient <table:grad_gen>`, :ref:`Gradient (CFOUR) <table:grad_cfour>` fully list gradient target methods; * :ref:`Frequency <table:freq_gen>` fully lists Hessian target methods. .. _`table",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:29274,optimiz,optimization,29274,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"on Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **10**, 4389 (2014).; (doi: `10.1021/ct500634s <https://doi.org/10.1021/ct500634s>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). * ""Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,""; U. Bozkaya, *J. Chem. Theory Comput.* **12**, 1179 (2016).; (doi: `10.1021/acs.jctc.5b01128 <https://doi.org/10.1021/acs.jctc.5b01128>`_). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). * ""Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,""; U. Bozkaya, *Phys. Chem. Chem. Phys.* **18**, 11362 (2016).; (doi: `10.1039/c6cp00164e <https://doi.org/10.1039/c6cp00164e>`_). Algebraic-Diagrammatic Construction methods (ADC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General ADC theory. * ""Intermediate state representation approach to physical properties of; electronically excited molecules,""; J. Schirmer, and A. B. Trofimov, *J. Chem. Phys.* **120**,; 11449-11464 (2004).; (doi: `10.1063/1.1752875 <https://doi.org/10.1063/1.1752875>`_). Implementation inside `adcc <https://adc-connect.org>`_,; the ADC backend used for most ADC methods available in |PSIfour|. * ""adcc: A versatile toolkit for rapid development of; algebraic-diagrammatic construction methods,""; M. F. Herbst, M. Scheurer, T. Fransson, D. R. Rehn, and A. Dreuw.; *WIREs Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:24105,optimiz,optimized,24105,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimized']
Performance,"on. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OR",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46644,optimiz,optimized,46644,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['optimiz'],['optimized']
Performance,"on. Basic Keywords for SAPT(DFT) ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__sapt_dft_grac_shift_a.rst; .. include:: autodir_options_c/sapt__sapt_dft_grac_shift_b.rst; .. include:: autodir_options_c/sapt__sapt_dft_do_dhf.rst; .. include:: autodir_options_c/sapt__sapt_dft_exch_disp_scale_scheme.rst. Advanced Keywords for SAPT(DFT); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__sapt_dft_functional.rst; .. include:: autodir_options_c/sapt__sapt_dft_do_hybrid.rst; .. include:: autodir_options_c/sapt__sapt_dft_exch_disp_fixed_scale.rst; .. include:: autodir_options_c/sapt__sapt_dft_mp2_disp_alg.rst; .. include:: autodir_options_c/sapt__sapt_quiet.rst. .. index:: SAPT; higher-order. Higher-Order SAPT; ^^^^^^^^^^^^^^^^^. For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems ; only. Publications resulting from the use of the higher-order SAPT code ; should cite the following: ; [Hohenstein:2010:014101]_. For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]_).; As shown in [Parker:2014:094106]_, whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102]_, the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102]_. ; To request CCD dispersion treatment in a SAPT computation, simply append; ``(ccd)`` to the na",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:26042,perform,perform,26042,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['perform']
Performance,"onally, high-order coupling between induction and dispersion can be ; extracted from the supermolecular MP2 interaction energy:. .. math:: \delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)}). .. math:: \delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}). where :math:`E_{int}^{MP2, corr}` is the correlation part of the supermolecular MP2 ; interaction energy. :math:`\delta_{MP2}^{(2)}` and :math:`\delta_{MP2}^{(3)}` also improve the ; description of electrostatically dominated complexes. :math:`\delta_{MP2}^{(2)}`; can be applied to SAPT2+ or SAPT2+(3) energies whereas :math:`\delta_{MP2}^{(3)}` ; should be applied to SAPT2+3 energies. A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs]_,; and a systematic study of the accuracy of these truncations (with and ; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106]_. The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in |PSIfour|, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy ; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency. . The latest addition to the SAPT code is the SAPT0 method for open-shell ; monomers [Gonthier:2016:134106]_. This code is available for both exact and density fitted integrals, ; except for the dispersion terms which implementation relies on a density fitting; factorization. Both ``UHF`` and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:9693,perform,performance,9693,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performance']
Performance,"onment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26755,load,loaded,26755,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['load'],['loaded']
Performance,"oper orbitals which are used to start the; calculation, see [Lehtola:2019:1593]_.; GWH; A generalized Wolfsberg-Helmholtz modification of the core; Hamiltonian matrix. Usually less accurate than the core guess: the; latter is exact for one-electron systems, GWH is not; see; [Lehtola:2019:1593]_).; HUCKEL; An extended H\ |u_dots|\ ckel guess based on on-the-fly atomic UHF; calculations alike SAD, see [Lehtola:2019:1593]_.; MODHUCKEL; Like HUCKEL, an extended H\ |u_dots|\ ckel guess based on; on-the-fly atomic UHF calculations alike SAD, see; [Lehtola:2019:1593]_. This variant employs an updated rule for the; generalized Wolfsberg-Helmholz formula from [Ammeter:1978:3686]_.; READ; Read the previous orbitals from a ``wfn`` file, casting from; one basis to another if needed. Useful for starting anion; computations from neutral orbitals, or after small geometry; changes. At present, casting from a different molecular point; group is not supported. This becomes the default for the second; and later iterations of geometry optimizations.; SAP; Superposition of Atomic Potentials. This is essentially a; modification of the core Hamiltonian, which includes screening; effects by using a radially screened effective atomic charge. The; screening effects have been calculated at the complete basis set; limit with finite-element calculations, see [Lehtola:2019:25945]_; and [Lehtola:2020:012516]_. The guess and its implementation have; been described in [Lehtola:2019:1593]_. The guess is evaluated on a; DFT quadrature grid, so the guess energy depends slightly on the; used DFT quadrature. The current implementation is based on; exchange-only local density calculations that are but nanohartree; away from the complete basis set limit [Lehtola:2020:012516]_.; SAPGAU; Superposition of Atomic Potentials, but using error function based; fits to the atomic radial potentials as discussed in; [Lehtola:2020:144105]_. The main difference to the SAP guess; discussed above [Lehtola:2019:25945]_ is",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:20477,optimiz,optimizations,20477,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['optimiz'],['optimizations']
Performance,"or keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular momentum with :samp:`L={l}` syntax is newly (August 2020); implemented, and this is preferred for ``L=7`` and above to; avoid ambiguity. ::. L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... .. index:: basis set; multiple within molecule; .. _`sec:psithonBasissets`:. Mixing Basis Sets; =================. While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis ""block"" can be used. We use a snippet from the :srcsample:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:4794,perform,performs,4794,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['perform'],['performs']
Performance,"or the addition of the basis name in; brackets. ::. [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about usin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12151,perform,performs,12151,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['perform'],['performs']
Performance,"orbs_t2.rst. .. index:: SAPT; charge-transfer. .. _`sec:saptct`:. Charge-Transfer in SAPT; ^^^^^^^^^^^^^^^^^^^^^^^. It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy ; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201]_. Charge-transfer energies can be obtained from the following calls to the; energy function. ::. energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0. A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results::. SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with ; SAPT0/aug-cc-pVDZ. . .. index:: ; pair: SAPT; output. Monomer-Centered Basis Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (*i.e.*, each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (*i.e.*, each monomer utilizes only its; own basis set). It is also possible to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:30841,perform,performs,30841,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performs']
Performance,"ords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4402,optimiz,optimize,4402,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"ormance. .. _`sec:scfcosx`:. COSX Exchange; ~~~~~~~~~~~~~. The semi-numerical COSX algorithm described in [Neese:2009:98]_ evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral ; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in :ref:`sec:dft`.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; By default, the SCF algorithm is first converged on a smaller grid, followed by a; number of SCF iterations up to a maximum value (controlled by the |scf__cosx_maxiter_final| keyword); on a larger grid. By default, |scf__cosx_maxiter_final| is set to 1, a single; SCF iteration, which results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. Setting |scf__cosx_maxiter_final| to 0 disables the; larger grid entirely. Setting |scf__cosx_maxiter_final| to -1 allows; for the SCF to fully converge on the larger grid, useful for the study of wavefunction; properties such as gradients. The size of the initial grid is controlled by the keywords; |scf__cosx_radial_points_initial| and |scf__cosx_spherical_points_initial|.; The final grid is controlled by |scf__cosx_radial_points_final| and; |scf__cosx_spherical_points_final|. Currently, the default grids are very crude,; allowing for high performance at the cost of accuracy. If high-accuracy calculations; are desired with COSX, the grid sizes should be increased. Screening thresholds over integrals, densities, and basis extents are set; with the |scf__cosx_ints_tolerance|, |scf__cosx_density_tolerance|, and; |scf__cosx_basis_tolerance| keywords, respectively. |scf__",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:39548,perform,performing,39548,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performing']
Performance,"ory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10.1063/1.4739423 <https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:9713,optimiz,optimized,9713,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimized']
Performance,"ote': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'cor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:6849,optimiz,optimization,6849,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['optimiz'],['optimization']
Performance,"ote:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22592,optimiz,optimization,22592,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['optimiz'],['optimization']
Performance,"ould; be used, *viz.*::. set {; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening ``[`` is; on the same line as the name of the keyword. Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the ``set`` keyword. Omitting the module; name, or using the name ``global`` or ``globals`` will result in the keyword being; applied to all modules. For example, in the following input ::. molecule{; o; h 1 roh; h 1 roh 2 ahoh; ; roh = 0.957; ahoh = 104.5; }; ; set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have a print; level of 1 and the ccenergy code, which performs coupled cluster computations,; will use a print level of 3. In this example a full CCSD computation is; performed by running the SCF code first, then the coupled cluster modules;; the :py:func:`~psi4.driver.energy` Python helper function ensures that this is performed correctly.; Note that the Python interpreter executes commands in the order they appear in; the input file, so if the last four commands in the above example were to read ::. set basis cc-pVDZ; energy('ccsd'); set ccenergy print 3; set scf print 1. the commands that set the print level would be ineffective, as they would be; processed after the CCSD computation completes. In PsiAPI mode, one can use the command :py:func:`~psi4.driver.set_options`; like below for general and module-specific options. Note that these values; should be of correct type, strings for strings, floats for floats like; convergences. The function `~psi4.core.clean_options` that reinitializes; all options may also be useful to separate calculations in a PsiAPI; session. ::. psi4.set_options({; 'scf_type': 'pk',; 'e_convergence': 1.e-5,; 'soscf': True,; 'optking__geom_maxiter': 50; }). Basis Sets; ==========. .. toctree::; :maxdepth: 2. basissets. .. _`sec:psiVariables`:. PSI Variables; ==",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:7824,perform,performed,7824,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['performed']
Performance,"our| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +---------------------+--------------+-------------------------------------------------------------+; | 2 | CC(n-1)[n] | |; +---------------------+--------------+-------------------------------------------------------------+; | 3 | CC(n-1)(n) | (CC(n-1)[n] energy is also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 4 | CC(n-1)(n)_L | (CC(n-1)[n] and CC(n-1)(n) energies are also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 5 | CC(n)-1a | |; +-----",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:4257,optimiz,optimize,4257,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['optimiz'],['optimize']
Performance,"ove, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation. ::. molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }; ; set {; reference uhf; scf_type df; basis aug-cc-pVDZ; }; ; energy('sapt0'); ; . |scf__reference| needs to be ``UHF`` or ``ROHF`` for the open-shell computation to proceed. Advanced example; ^^^^^^^^^^^^^^^^. Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of ; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only ::. molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }; ; dimer = psi4.get_active_molecule() ; ; set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }; ; dimer = psi4.get_active_molecule(); ; set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load; ; monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True); ; monomerB = dimer.extract_subset",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:17692,perform,performing,17692,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performing']
Performance,"ple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2431,optimiz,optimized,2431,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['optimiz'],['optimized']
Performance,"port the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mean-square of displacement (|optking__rms_disp_g_convergence|), ; all in internal coordinates and atomic units. Usually, these options will not ; be set directly. Primary control for geometry convergence lies with the keyword ; |optking__g_convergence| which sets the aforementioned in accordance ; with Table :ref:`Geometry Convergence <table:optkingconv>`. |; |. .. _`table:optkingconv`:. .. table:: Summary of sets of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:20256,optimiz,optimization,20256,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimization']
Performance,"ported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3249,optimiz,optimize,3249,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,2,['optimiz'],['optimize']
Performance,"pymol`` scripts to help with this process. These can be; obtained by running::. >>> copy_pymol.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``Elst.pymol``), which in turn load in the molecule and order-1 analysis; (contained in the ``.pdb`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /Total.png; :align: center; :scale: 30%; :alt: Total Order-1 F-SAPT0. Difference F-SAPT Analysis; ^^^^^^^^^^^^^^^^^^^^^^^^^^. For those interested in taking the differences between two F-SAPT partitions; (*e.g.*, to see how a substituent modulates a noncovalent interaction), we have; the ``fsapt-diff.py`` script to help with this. This is invoked as::. >>> fsapt-diff.py source-fsapt-dir1 source-fsapt-dir2 target-diff-fsapt-dir. Where the use has already performed ``fsapt.py`` analysis using the same; functional group names in ``source-fsapt-dir-1`` and ``source-fsapt-dir-2``. The; difference F-SAPT partition entries are computed as :math:`E^{\Delta} = E^{1} -; E^{2}`, and the geometries for order-1 ``.pdb`` visualization files are taken; from system 1. I-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. caution:: As of April 2018, you can't specify molecule fragments; with an unphysical multiplicity like the singlet OH fragments in; the molecule below, especially as (again in the example below) the; overall molecule needs to be a singlet, which |PSIfour| doesn't at; present let be set independently. For situations like this, use the; temporary input pattern in :srcsample:`isapt1` . Below, we show an example of using I-SAPT0/jun-cc-pVDZ to analyze the; interaction between the two phenol groups in a 2,4-pentanediol molecule.; This example is; explicitly included in :srcsample:`isapt1`. A video; lecture explaining ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:11436,perform,performed,11436,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['perform'],['performed']
Performance,"q:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't ha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2909,perform,performance,2909,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['perform'],['performance']
Performance,"quations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10328,perform,performed,10328,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['perform'],['performed']
Performance,"r BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:4628,optimiz,optimizations,4628,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['optimiz'],['optimizations']
Performance,"r, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}` are the basis functions, which, in |PSIfour| are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix :math:`C_{\mu i}` contains the MO coefficients, which are the; constrained variational parameters in Hartree--Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. .. math:: | \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |. This form for the Hartree--Fock wavefunction is actually entirely equivalent to; treating the electron correlation a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:5261,optimiz,optimized,5261,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['optimiz'],['optimized']
Performance,"r. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions. Use of the GeomeTRIC optimizer is specified with the ``engine`` argument to; :py:func:`~psi4.driver.optimize`. The optimization will respect the keywords |optking__g_convergence|; and |optking__geom_maxiter|. Any other GeomeTRIC-specific options (including constraints); may be specified with the ``optimizer_keywords`` argument to :py:func:`~psi4.driver.optimize`.; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the `GeomeTRIC github; <https://github.com/leeping/geomeTRIC>`_ ; for more information on keywords and JSON specification of constraints. * Optimize the water molecule using GeomeTRIC::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). * Optimize the water molecule using GeomeTRIC, with one of the two OH bonds constrained to 2.0 au; and the HOH angle constrained to 104.5 degrees::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = { ; 'coordsys' : 'tric',; 'constraints' : { ; 'set' : [{'type' : 'distance',; 'indices' : [0, 1], ; 'value' : 2.0 },; {'type' : 'angle',; 'indices' : [1, 0, 2], ; 'value' : 104.5 }]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). * Optimize the benzene/water dimer using GeomeTRIC, with the 6 carbon atoms of benzene frozen in ; place::. molecule h2o {; C 0.833 1.221 -0.504; H 1.482 2.086 -0.518; C 1.379 -0.055 -0.486; H 2.453 -0.184 -0.483; C 0.546 -1.167 -0.474; H 0.971 -2.162 -0.466; C -0.833 -1.001 -0.475; H -1.482 -1.867 -0.468; C -1.379 0.275 -0.490; H -2.453 0.404 -0.491; C -0.546 1.386 -0.506; H -0.971 2.381 -0.524; --; O 0.000 0.147 3.265; H 0.000 -0.505 2.5",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:27356,optimiz,optimize,27356,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12435,tune,tuned-LRC,12435,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['tune'],['tuned-LRC']
Performance,"rd a particular |PSIfour| (and probably pybind11) library to; link against (the ``CMAKE_PREFIX_PATH`` part) *and* telling it to; do an in-source build (the ``.`` part). Then just run ``make`` in; your plugin directory. After any change to the plugin C++ code,; ``make`` must be run in the plugin directory to recompile the; ``myplugin.so`` executable, but recompiling the main |PSIfour| code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__init__.py`` file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in :envvar:`PYTHONPATH`,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating :envvar:`PSIPATH`. Then,; the plugin can be loaded as ``import myplugin`` and executed as; ``energy('myplugin')``. Any other Python functions are also available from; the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:9115,load,loaded,9115,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['load'],['loaded']
Performance,"recision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:5291,perform,performance,5291,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['perform'],['performance']
Performance,"ree--Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis; ========================================================. The above examples were simple single-point energy computations; (as specified by the :py:func:`~psi4.driver.energy` function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; :py:func:`~psi4.driver.energy` with :py:func:`~psi4.driver.optimize` or :py:func:`~psi4.driver.frequency`, respectively. Here's an example of optimizing the H\ :sub:`2`\ O molecule using Hartree--Fock with; a cc-pVDZ basis set (located in; :srcsample:`tu3-h2o-opt`). .. literalinclude:: @SFNX_INCLUDE@samples/tu3-h2o-opt/input.dat. This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like ``Optimization is complete!``. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ``~``), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not). ::. --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -76.026632734857 -76.026632734857 0.01523505 0.01245744 0.02742199 0.02277500 ~; 2 -76.027022668419 -0.000389933562 0.00178749 0.00142923 0.01007985 0.00594840 ~; 3 -76.027032729361 -0.000010060942 0.00014016 0.00008485 0",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:7366,optimiz,optimizer,7366,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['optimiz'],['optimizer']
Performance,"rence': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:142157,optimiz,optimization,142157,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['optimiz'],['optimization']
Performance,"representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\la",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7168,optimiz,optimization,7168,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['optimiz'],['optimization']
Performance,"rface scan for water with Pandas; is shown below::. molecule h2o {; O; H 1 R; H 1 R 2 A; }; ; Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2); ; rows = []; table = []; ; set basis cc-pvdz; ; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]); ; import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 -76.217439 -76.221605; # (1.0, 100) -76.021264 -76.224987 -76.228727; # (1.0, 102) -76.021460 -76.224946 -76.228668; # (1.1, 100) -75.990195 -76.201891 -76.205087; # (1.1, 102) -75.990085 -76.201498 -76.204676. .. _`sec:wrappers`:. Python Wrappers; ===============. The Python foundations of the |PSIfour| driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the |PSIfour| suite. . As seen in the neon dimer example from the :ref:`tutorial <sec:tutorial>` section,; the :py:func:`~psi4.driver.driver_nbody.nbody` wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example, ::. energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules. |PSIfour| also provides the :py:func:`~psi4.driver.cbs` wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,::. # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:15175,perform,performed,15175,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['performed']
Performance,"rhf}. DERTYPE = string; At present, only energies ({\tt none}) are supported; future; releases will implement gradients ({\tt first}). CONVERGENCE = integer; Convergence desired on the orbital gradient. Convergence is achieved when; the RMS of the error in the orbital gradient is less than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion than for the \PSIdetci\; program itself. These can be differentiated, if changed by the user,; by placing the {\tt CONVERGENCE} keywords within separate sections of; input, such as {\tt detcas: ( convergence = x )}. ENERGY\_CONVERGENCE = integer; Convergence desired on the total MCSCF energy. The default is 7.; \item[RESTRICTED\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are optimized in the MCSCF.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. RESTRICTED\_UOCC = (integer array); Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are optimized in the MCSCF.; The default is the zero vector. FROZEN\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_DOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_DOCC} and {\tt FROZEN\_DOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The Cotton ordering of the irred",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:5294,optimiz,optimized,5294,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['optimiz'],['optimized']
Performance,"riterion.; .. [#fg] Compensates for difficulties in converging geometry optmizations of supermolecular complexes ; tightly, where large *rms disp* and *max disp* may result from flat potential surfaces even when; *max force* and/or *rms force* are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by |optking__g_convergence|.; Note that this revokes the special convergence arrangements detailed in notes [#fe]_ and [#ff]_ ; and instead requires all active criteria to be fulfilled to ; achieve convergence. To avoid this revokation, turn on keyword |optking__flexible_g_convergence|. .. index::; pair: geometry optimization; output. Interface to GeomeTRIC; ^^^^^^^^^^^^^^^^^^^^^^. The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108]_ may be used in place of; Psi4's native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions. Use of the GeomeTRIC optimizer is specified with the ``engine`` argument to; :py:func:`~psi4.driver.optimize`. The optimization will respect the keywords |optking__g_convergence|; and |optking__geom_maxiter|. Any other GeomeTRIC-specific options (including constraints); may be specified with the ``optimizer_keywords`` argument to :py:func:`~psi4.driver.optimize`.; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the `GeomeTRIC github; <https://github.com/leeping/geomeTRIC>`_ ; for more information on keywords and JSON specification of constraints. * Optimize the water molecule using GeomeTRIC::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). * Optimize the water molecule using GeomeTRIC, with one of th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:26473,optimiz,optimizing,26473,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimizing']
Performance,"rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv rohf gradients for ccsd(t) by ccenergy'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=ccenergy for conv rhf/uhf gradients for ccsd(t) by ccenergy until scaling reworked'}; {'module': 'psi4-ccenergy', 'driver': 'gradien",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:152019,optimiz,optimization,152019,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['optimiz'],['optimization']
Performance,"roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using::. set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the ``molecule`` section was dropped for brevity. **Selecting the excitation manifold.**; To select between the possible excitation manifolds,; use the |adc__kind| keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value ``'singlet'``.; To compute triplet states, select ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:8357,perform,performed,8357,doc/sphinxman/source/adc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst,1,['perform'],['performed']
Performance,"rozen_uocc| +----------------------------+ +; | or |globals__frozen_docc| | |globals__ras3| | |; + are included in CI) +----------------------------+ +; | | |globals__ras2| | |; + +----------------------------+ +; | | |globals__ras1| | |globals__active| |; +----------------------------+----------------------------+-------------------------------+; | |globals__frozen_docc| | |globals__frozen_docc| | |globals__frozen_docc| |; +----------------------------+----------------------------+-------------------------------+. .. [#f1] |globals__frozen_uocc| is not required and will be inferred if ; |globals__active| is provided. However, if it is easier to specify; |globals__frozen_uocc|, then this may be provided and |globals__active| can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous :ref:`table <table:mcscf_spaces>` for MCSCF is also available). ; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of ``active`` orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via ``energy('fci')``; with appropriate values selected for |globals__frozen_docc| and; |globals__active|. For CI computations, there is no difference between; |globals__frozen_docc| and |globals__restricted_docc|, or between; |globals__frozen_uocc| and |globals__restricted_uocc|. There are; differences between these keywords for :ref:`sec:mcscf`. .. index:: CI; basic-keywords. Basic DETCI Keywords; ~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/detci__reference.rst; .. include:: autodir_options_c/detci__r_convergence.rst; .. include:: autodir_options_c/detci__ex_level.rst; .. include:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodir_options_c/globals__restricted_docc.rst; .. include:: autodir_options_c/globals__restricted_uocc.rst; .. include:: autodir_options_c/globals__frozen_uocc.rst; .. include:: ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:8532,perform,performed,8532,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,2,"['optimiz', 'perform']","['optimization', 'performed']"
Performance,"rrently, the default grids are very crude,; allowing for high performance at the cost of accuracy. If high-accuracy calculations; are desired with COSX, the grid sizes should be increased. Screening thresholds over integrals, densities, and basis extents are set; with the |scf__cosx_ints_tolerance|, |scf__cosx_density_tolerance|, and; |scf__cosx_basis_tolerance| keywords, respectively. |scf__cosx_ints_tolerance|; is the most consequential of the three thresholds in both cost and accuracy.; This keyword determines screening of negligible one-electron integrals.; |scf__cosx_density_tolerance| controls the threshold for significant; shell pairs in the density matrix. Lastly, |scf__cosx_basis_tolerance| is; a cutoff for the value of basis functions at grid points. This keyword is; used to determine the radial extent of the each basis shell, and it is the; COSX analogue to |scf__dft_basis_tolerance|. The |scf__incfock| keyword (defaults to ``false``) increases performance; by constructing the Fock matrix from differences in the density matrix, which; are more amenable to screening. This option is disabled by default because of; potential SCF convergence issues, particularly when using diffuse basis functions.; The |scf__cosx_overlap_fitting| keyword (defaults to ``true``) reduces numerical; integration errors using the method described in [Izsak:2011:144105]_ and is; always recommended. .. _`sec:scflink`:. Linear Exchange; ~~~~~~~~~~~~~~~. Large SCF calculations can benefit from specialized screening procedures that further reduce the scaling of the ERI contribution to the Fock matrix.; LinK, the linear-scaling exchange method described in [Ochsenfeld:1998:1663]_, is available in Psi4 in conjunction with composite algorithms that build J (|globals__scf_type| set to ``J_alg+LINK``).; LinK achieves linear-scaling by exploiting shell pair sparsity in the density matrix and overlap sparsity between shell pairs. Specifically, LinK exploits the fact that the Exchange term; requ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:41116,perform,performance,41116,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performance']
Performance,"rsion] <https://github.com/psi4/psi4/blob/master/external/upstream/erd/CMakeLists.txt#L2>`_. .. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`ecpint <cmake:ecpint>` |w---w| :ref:`[what is ecpint?] <sec:ecpint>` :source:`[ecpint min version] <external/upstream/ecpint/CMakeLists.txt/#L2>`. * :ref:`dkh <cmake:dkh>` |w---w| :ref:`[what is dkh?] <sec:dkh>` :source:`[dkh min version] <external/upstream/dkh/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://gi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12169,load,loaded,12169,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['load'],['loaded']
Performance,"rt optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5699,optimiz,optimize,5699,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"s (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mea",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19803,perform,performed,19803,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['perform'],['performed']
Performance,"s and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26445,optimiz,optimizer,26445,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['optimiz'],['optimizer']
Performance,"s of the ``cfour {...}`` block are; blindly appended to any input interpreted from |PSIfour| format, mixing; of |PSIfour| and Cfour input formats likely *will* give rise to multiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:37816,optimiz,optimization,37816,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimization']
Performance,"s printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31714,perform,performed,31714,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['perform'],['performed']
Performance,"s that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19556,optimiz,optimization,19556,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimization']
Performance,"s-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:4529,perform,performed,4529,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['perform'],['performed']
Performance,"s_c/sapt__aio_df_ints.rst; .. include:: autodir_options_c/sapt__coupled_induction.rst; .. include:: autodir_options_c/sapt__exch_scale_alpha.rst; .. include:: autodir_options_c/sapt__ints_tolerance.rst; .. include:: autodir_options_c/sapt__denominator_delta.rst; .. include:: autodir_options_c/sapt__denominator_algorithm.rst; .. include:: autodir_options_c/globals__debug.rst. Specific open-shell SAPT0 keywords; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__sapt_mem_safety.rst; .. include:: autodir_options_c/sapt__coupled_induction.rst. .. index:: SAPT; SAPT(DFT). .. _`sec:saptdft`:. SAPT(DFT); ^^^^^^^^^. In general, SAPT(DFT) should provide more accurate interaction energy ; components, and overall interaction energies, than SAPT0. The drawback ; is SAPT(DFT) method is more computationally demanding than SAPT0, ; SAPT(DFT) can still be applied to medium-sized or large systems. The ; SAPT(DFT) module was employed successfully in computations of systems ; with up to 2000 basis functions, and the code should be scalable to ; 3000 basis functions. Like higher-order SAPT, SAPT(DFT) requires ; sufficient memory to hold :math:`2ovN_aux` doubles. SAPT(DFT) requires a few special treatments to obtain accurate; result. The DFT functionals used in SAPT(DFT) need to be asymptotically; corrected with Gradient Regulated Asymptotic Correction scheme (GRAC),; in order to recover the correct long-range asymptotic behavior; (approaching :math:`-1/r` as :math:`r` approaches infinity). The program; requires manual input of GRAC shift parameter for each monomer through; keywords |sapt__sapt_dft_grac_shift_a| and |sapt__sapt_dft_grac_shift_b|,; which should be equal to the difference of the actual ionization; potential and the corresponding Kohn-Sham HOMO energy. The dispersion; term needs to be computed with orbital response for good accuracy,; and it is recommended to enable |sapt__sapt_dft_do_hybrid| (set to; ``True`` by default). The coupled exchange-dispers",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:22951,scalab,scalable,22951,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['scalab'],['scalable']
Performance,"s_scf| to an auxiliary; basis set defined for all atoms in the system, or set |scf__df_scf_guess|; to false, which disables this acceleration entirely. .. _`sec:scfddfj`:. Integral-Direct Density-Fitted Coulomb Construction; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The Resolution of the Identity (RI) can be used to decompose the normally 4-center ERI tensor into a combination of 3-center and 2-center components.; By reducing the dimensionality of the ERI tensor, application of the RI (often referred to as density-fitting, or DF) can be used to greatly speed up; SCF calculations. The reduction in ERI tensor rank also makes DF an appealing option for conventional SCF calculations, where the ERIs are stored ; in core or on disk. However, even when using DF, I/O becomes a significant bottleneck for systems of a sufficient size when performing conventional SCF; calculations. In principle, though, DF approaches can be utilized in an integral-direct context, gaining the benefits of DF methods without suffering the; I/O bottlenecks that conventional DF methods will eventually run into. One such approach, outlined by Weigend in [Weigend:2002:4285]_,; is available for use in Psi4 for the separate construction of the Coulomb contribution to the Fock matrix. This implementation can be used alongside ; Psi4's separate Exchange construction algorithms for composite Fock matrix construction by using the keyword DFDIRJ as the Coulomb construction ; algorithm when specifying |globals__scf_type| to use a composite algorithm combination (``DFDIRJ+K_alg`` in general, ; or ``DFDIRJ`` for DFT with non-hybrid functionals). . DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI ; screening (set |globals__screening| to ``DENSITY``) and incremental Fock matrix construction (set |scf__incfock| to ``TRUE``). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:37542,bottleneck,bottlenecks,37542,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['bottleneck'],['bottlenecks']
Performance,"s_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime toggle of whether to use BrianQC. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:5528,perform,performed,5528,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['perform'],['performed']
Performance,"se features are available to Cfour by; using the |mints__basis| keyword instead of |cfour__cfour_basis|; (accompanied, of course, by specifying the molecule |PSIfour|-style).; Internally, |PSIfour| processes the basis set as usual, then translates; the basis set format and writes out a ``GENBAS`` file with an entry for; each atom. The P4C4 interface sets keyword |cfour__cfour_basis|\ =SPECIAL; and |cfour__cfour_spherical| as appropriate, then writes the basis section; necessary for SPECIAL below the ``*CFOUR(...)`` block. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; generic ``'cfour'``, the computational method is specified as the first; argument to the :py:func:`~psi4.driver.optimize` call. In the computational; command below, the string argument ``'c4-ccsd(t)'`` directs that a CCSD(T); computation be run using Cfour (as opposed to ``'ccsd(t)'`` which would; call |PSIfour| CC code). Specifying computational method in this manner; sets |cfour__cfour_calc_level| from the argument and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize(",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:13868,optimiz,optimize,13868,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimize']
Performance,"set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doubles | E/G |; +-------------------------+---------------------------------------------------------------+-------+. .. include:: autodoc_capabilities_occ_oo.rst. .. _`table:occ_scsoo_calls`:. .. table:: Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | scs-omp3 | Spin-Component Scaled Orbital-Optimized MP3 | RHF/UHF/ROHF/RKS/UKS | --- |; +-------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12638,optimiz,optimized,12638,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,4,['optimiz'],['optimized']
Performance,"shared among modules rather than (or in addition to) being used internally; by the module). We're sticking with |globals__scf_type| and; |globals__mp2_type| defaulting to ``DF``, while most everything higher defaults; to ``CONV``. (Exceptions are MP2.5 and MP3 that default to ``DF``.); In :source:`psi4/driver/procrouting/proc_table.py`, a managed method calls a; ""select"" function rather than a ""run"" function. ::. procedures = {; 'energy': {; 'scf' : run_scf,; 'mp3' : select_mp3,; 'dct' : run_dct,. Then in :source:`psi4/driver/procrouting/proc.py`, the select function runs through; reference, type, and possibly freeze_core to specify the proc; function to call for any able, non-default module (*e.g.*, ``mtd_type ==; 'DETCI'`` ) or able, default module (*e.g.*, ``mtd_typd == ['', 'FNOCC']`` ).; Don't worry about 'else' statements as anything that falls through will be; caught and a readable error generated. ::. def select_mp3(name, **kwargs):; """"""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_typ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst:7555,perform,performance,7555,doc/sphinxman/source/proc_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst,1,['perform'],['performance']
Performance,"si4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:141715,optimiz,optimization,141715,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['optimiz'],['optimization']
Performance,"sical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4737,optimiz,optimization,4737,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,2,['optimiz'],"['optimization', 'optimized']"
Performance,"silon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9307,perform,performed,9307,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['perform'],['performed']
Performance,"sing (i,j,a) as the compound row index and b as the column; index. These same concepts apply to any multi-index quantity. III. Library Initialization . Before the library may be used, it must first be initialized; via the dpd_init() function. This function; requires the following information (see dpd.h for proper syntax):; int dpd_init(int dpd_num, int nirreps, long int memory, int cachetype, ; int *cachefiles, int **cachelist, struct dpd_file4_cache_entry *priority, ; int num_subspaces, int *orbspi, int *orbsym, ...);. dpd_num - An integer identifier for the current DPD; setup. Only two active DPD's are currently allowed, so this value; can be either 0 or 1.; nirreps - The number of irreducible representations in; the point group.; memory - The amount of available memory in bytes.; cachetype - The type of file cacheing desired (see below). If this; is 0, then a priority-based cache is used; if it's 1 then a; ""least-recently-used"" method is applied.; cachefiles - See below.; cachelist - See below.; priority - See below.; num_subspaces - The number of orbital subspaces to be; used. If the programmer uses only occupied and virtual spaces,; for example, this would be set to 2.; For each value of num_subspaces, the following; two arrays must also be provided:; orbspi - An irrep population array,; i.e., the number of orbitals per irrep in the current; subspace.; orbsym - An orbital symmetry array,; i.e., the irrep value for each orbital in the current; subspace. For four-index quantities, the dpd_init() function; pre-computes a number of orbital lookup arrays about all pairwise; combinations of the given orbital subspaces, including information; regarding possible permutational symmetry or antisymmetry among the; orbitals. libdpd then assigns a particular ""pair number"" to; each possible combination of indices from the orbital subspace data; provided to dpd_init(). For example, given only occupied and; virtual orbital subspaces (as would be the case for RHF and ROHF; refe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:4572,cache,cachelist,4572,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,1,['cache'],['cachelist']
Performance,"single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =====. Python provides many control structures, any of which can be used within |PSIfour|; input files. For example, to loop over three basis sets, the following code can; be used:. .. code-block:: none. basis_sets = [""",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11521,optimiz,optimize,11521,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['optimiz'],['optimize']
Performance,"specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Sch",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4276,optimiz,optimize,4276,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~psi4.driver.driver_nbody.nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27963,optimiz,optimize,27963,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimize']
Performance,"st be below; the user-specified |scf__e_convergence| and |scf__d_convergence|, respectively.; The maximum number of iterations is specified by the |scf__maxiter| option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets. For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. This is the default for single atoms.; SAD [:term:`Default <GUESS (SCF)>`]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (*e.g.*, in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems. This is the default for; systems of more than one atom.; SADNO; Natural orbitals from Superposition of Atomic Densities. Similar; to the above, but it forms natural orbitals from the SAD density; matrix to get proper orbitals which are used to start the; calculation, see [Lehtola:2019:1593]_.; GWH; A generalized Wolfsberg-Helmholtz modification of the core; Hamiltonian matrix. Usually less accurate than the core guess: the; latter is exact for one-electron systems, GWH is not; see; [Lehtola:2019:1593]_).; HUCKEL; An extended H\ |u_dots|\ ckel guess based on on-the-fly atomic UHF; calculations alike SAD, see [Lehtola:2019:1593]_.; MODHUCKEL; Like HUCKEL, an extended H\ |u_dots|\ ckel guess based on; on-the-fly atomic UHF calculations alike SAD, see; [Lehtol",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:19037,perform,performed,19037,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performed']
Performance,"stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of int",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:28878,perform,performs,28878,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['perform'],['performs']
Performance,"stem. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:3737,optimiz,optimization,3737,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimization']
Performance,"t any grouping of the indices to use as row and; column indices. For example, since i; × j; × a; = b. we could also construct a different supermatrix for these same; integrals, using (i,j,a) as the compound row index and b as the column; index. These same concepts apply to any multi-index quantity. III. Library Initialization . Before the library may be used, it must first be initialized; via the dpd_init() function. This function; requires the following information (see dpd.h for proper syntax):; int dpd_init(int dpd_num, int nirreps, long int memory, int cachetype, ; int *cachefiles, int **cachelist, struct dpd_file4_cache_entry *priority, ; int num_subspaces, int *orbspi, int *orbsym, ...);. dpd_num - An integer identifier for the current DPD; setup. Only two active DPD's are currently allowed, so this value; can be either 0 or 1.; nirreps - The number of irreducible representations in; the point group.; memory - The amount of available memory in bytes.; cachetype - The type of file cacheing desired (see below). If this; is 0, then a priority-based cache is used; if it's 1 then a; ""least-recently-used"" method is applied.; cachefiles - See below.; cachelist - See below.; priority - See below.; num_subspaces - The number of orbital subspaces to be; used. If the programmer uses only occupied and virtual spaces,; for example, this would be set to 2.; For each value of num_subspaces, the following; two arrays must also be provided:; orbspi - An irrep population array,; i.e., the number of orbitals per irrep in the current; subspace.; orbsym - An orbital symmetry array,; i.e., the irrep value for each orbital in the current; subspace. For four-index quantities, the dpd_init() function; pre-computes a number of orbital lookup arrays about all pairwise; combinations of the given orbital subspaces, including information; regarding possible permutational symmetry or antisymmetry among the; orbitals. libdpd then assigns a particular ""pair number"" to; each possible combinati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:4376,cache,cachetype,4376,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,2,['cache'],"['cacheing', 'cachetype']"
Performance,"t to both center A and B. The old code only provided the double; derivative with respect to center A, leaving the caller to determine the other; values. The Libint2 engine instead provides all integrals, so the caller; simply needs to loop over all of the buffers provided in the appropriate order. Changes to External Potential Engines; ..................................... Benchmarking showed that early versions of the old code spent a non-negligible; amount of time performing the Cartesian to spherical harmonic transformation of; the integrals, which is needed for most modern basis sets. To improve; performance, we instead backtransformed the density to the Cartesian; representation (denoted ""CartAO"") and computed / contracted all integrals in; this Cartesian basis, eliminating the need to transform to spherical harmonics; as the integrals are computed. This bottleneck no longer exists, so these; extra transformation steps have been removed as part of the switch to Libint2,; and the affected codes (PCM and CPPE interfaces) now compute the potential and; field integrals in the representation required by the basis set. Also, note that the way external point charges are specified has changed.; Previously, a set of N external point charges would be specified by passing a; matrix with dimensions N rows and 4 columns -- corresponding to charge, x, y, z; -- to the ``set_charge_field()`` member of the potential integral class. The; same information is now passed using the more verbose; ``std::vector<std::pair<double, std::array<double, 3>>>`` type instead, to be; consistent with Libint2's convention. New Operators Available; ....................... Libint2 provides a range of integrals that were previously not available in; |PSIfour|, such as the Erfc attenuated nuclear potential integrals needed for; Ewald methods. If new integrals are added to Libint2 but are not yet; interfaced to |PSIfour|, please open an issue on the |PSIfour| GitHub page to; alert the developers, who ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:16930,bottleneck,bottleneck,16930,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['bottleneck'],['bottleneck']
Performance,"t``, in this; case one could also just type ``psi4``). If it works, it should print; the final energy as ::. @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, ``set reference uhf``, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree--Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree--Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis; ========================================================. The above examples were simple single-point energy computations; (as specified by the :py:func:`~psi4.driver.energy` function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; :py:func:`~psi4.driver.energy` with :py:func:`~psi4.driver.optimize` or :py:func:`~psi4.driver.frequency`, respectively. Here's an example of optimizing the H\ :sub:`2`\ O molecule using Hartree--Fock with; a cc-pVDZ basis set (located in; :srcsample:`tu3-h2o-opt`). .. literalinclude:: @SFNX_INCLUDE@samples/tu3-h2o-opt/input.dat. This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like ``Optimization is complete!``. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ``~``), the energy decreases with each step,; and the maximum force on each atom also decreases with each step (in; principle these numbers could increase in some iterations, but here they do; not). ::. --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX F",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:6976,optimiz,optimize,6976,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['optimiz'],['optimize']
Performance,"table:DimerFrag>` for how reference points are created.; For a set of three dimers A, B, and C, sets of coordinates are created between each pair:; AB, AC, and BC. Each `DimerFrag` may use different reference points. ; Creation of the intermolecular coordinates can be controlled through |optking__frag_ref_atoms| ; and |optking__interfrag_coords|. |optking__frag_ref_atoms| specifies which atoms ; (or linear combination of atoms) to use for the reference points and |optking__interfrag_coords|,; which encompasses |optking__frag_ref_atoms|, allows for constraints and labels to be added to the; intermolecular coordinates. .. note:: Manual specification of the interfragment coordinates is supported for power users,; and provides complete control of fragments' relative orientations.; Setting |optking__interfrag_mode| to `multi` should suffice in almost all cases.; :ref:`Dimer coordinate table <table:DimerFrag>`. provides the name and ordering; convention for the coordinates. * Basic multi-fragment optimization. Use automatically generated reference points. .. code-block:: none. memory 4GB ; molecule mol {; 0 1 ; O -0.5026452583 -0.9681078610 -0.4772692868; H -2.3292990446 -1.1611084524 -0.4772692868; H -0.8887241813 0.8340933116 -0.4772692868; -- ; 0 1 ; C 0.8853463281 -5.2235996493 0.5504918473; C 1.8139169342 -2.1992967152 3.8040686146; C 2.8624456357 -4.1143863257 0.5409035710; C -0.6240195463 -4.8153482424 2.1904642137; C -0.1646305764 -3.3031992532 3.8141619690; C 3.3271056135 -2.6064153737 2.1669340785; H 0.5244823836 -6.4459192939 -0.7478283184; H 4.0823309159 -4.4449979205 -0.7680411190; H -2.2074914566 -5.7109913627 2.2110247636; H -1.3768100495 -2.9846751653 5.1327625515; H 4.9209603634 -1.7288723155 2.1638694922; H 2.1923374156 -0.9964630692 5.1155773223; nocom; units au; }; ; set {; basis 6-31+G ; frag_mode MULTI; }; ; optimize(""mp2""). .. Warning:: The molecule input for psi4 has no effect upon optking, expect to provide Cartesian; coordinates. Specifying indepe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:11408,optimiz,optimization,11408,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimization']
Performance,target_sources(cc; PRIVATE; #${CMAKE_CURRENT_SOURCE_DIR}/read_guess.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabefDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabejDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WamefSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WbmfeDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmaijDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnefDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnieSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnijDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WnmjeDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/amp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/c_clean.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_sigma.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_HC1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_HC1ET1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cceom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_sum.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dgeev_eom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagSS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/follow_root.cc; ${CMAKE_CURRENT_SOURCE_DIR}/form_diagonal.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_eom_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_norms.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local_guess.cc; ${CMAKE_CURRENT_SOURCE_DIR}/norm.cc; ${CMAKE_CURRENT_SOURCE_DIR}/norm_HC1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/overlap.cc; ${CMAKE_CURRENT_SOURCE_DIR}/precondition.cc; ${CMAKE_CURRENT_SOURCE_DIR}/restart.cc; ${CMAKE_CURRENT_SOURCE_DIR}/restart_with_root.cc; ${CMAKE_CURRENT_SOURCE_DIR}/rzero.cc; ${CMAKE_CURRENT_SOURCE_DIR}/schmidt_add.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaCC3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaCC3_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaDD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaDS.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaSD.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sigmaSS,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cceom/CMakeLists.txt:654,cache,cache,654,psi4/src/psi4/cc/cceom/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cceom/CMakeLists.txt,1,['cache'],['cache']
Performance,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/AO_contribute.cc; ${CMAKE_CURRENT_SOURCE_DIR}/BT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/BT2_AO.cc; ${CMAKE_CURRENT_SOURCE_DIR}/CT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/DT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FT2_cc2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fae.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FaetT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fme.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fmi.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FmitT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmnijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ZT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/amp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/analyze.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabeiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WmbijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d2diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagnostic.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR},MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt:855,cache,cache,855,psi4/src/psi4/cc/ccenergy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt,1,['cache'],['cache']
Performance,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/BL2_AO.cc; ${CMAKE_CURRENT_SOURCE_DIR}/DL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FaeL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/FmiL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/G.cc; ${CMAKE_CURRENT_SOURCE_DIR}/GL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1FL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lamp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lmag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lnorm.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabeiL1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WefabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WejabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmbL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmnL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/c_clean.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Gai.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3x.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cclambda.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_ortho.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_sum.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ortho_Rs.cc; ${CMAKE_CURRENT_SOURCE_DIR}/overlap.cc; ${CMAKE_CURRENT_SOURCE_DIR}/projections.cc; ${CMAKE_CURRENT_SOURC,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cclambda/CMakeLists.txt:899,cache,cache,899,psi4/src/psi4/cc/cclambda/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cclambda/CMakeLists.txt,1,['cache'],['cache']
Performance,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/ET_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_ABB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_BBB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_ABB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ET_UHF_BBB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/EaT_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_UHF_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_UHF_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_UHF_ABC.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_BBA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/T3_grad_UHF_BBB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/count_ijk.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/test_abc_loops.cc; ${CMAKE_CURRENT_SOURCE_DIR}/transpose_integrals.cc; ${CMAKE_CURRENT_SOURCE_DIR}/triples.cc; ); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cctriples/CMakeLists.txt:828,cache,cache,828,psi4/src/psi4/cc/cctriples/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cctriples/CMakeLists.txt,1,['cache'],['cache']
Performance,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/F.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Fai.cc; ${CMAKE_CURRENT_SOURCE_DIR}/HET1_Wabef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_AAAA_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_ABAB_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_BABA_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_BBBB_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabei_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wabij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Zmbej.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_HET1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cchbar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/norm_HET1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/purge.cc; ${CMAKE_CURRENT_SOURCE_DIR}/reference.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tau.cc; ${CMAKE_CURRENT_SOURCE_DIR}/taut.cc; ); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cchbar/CMakeLists.txt:670,cache,cache,670,psi4/src/psi4/cc/cchbar/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cchbar/CMakeLists.txt,1,['cache'],['cache']
Performance,target_sources(cc; PRIVATE; ${CMAKE_CURRENT_SOURCE_DIR}/HXY.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LCX.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LHX1Y1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LHX1Y2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/LHX2Y2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/X1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/X2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/amp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/analyze.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_LHX1Y1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_LHX1Y2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_X1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_X2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_sort_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccresponse.cc; ${CMAKE_CURRENT_SOURCE_DIR}/compute_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/lambda_residuals.cc; ${CMAKE_CURRENT_SOURCE_DIR}/linresp.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/optrot.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pertbar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/polar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/preppert.cc; ${CMAKE_CURRENT_SOURCE_DIR}/print_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pseudopolar.cc; ${CMAKE_CURRENT_SOURCE_DIR}/roa.cc; ${CMAKE_CURRENT_SOURCE_DIR}/save_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/scatter.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_lamps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_pert.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update_X.cc; ); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccresponse/CMakeLists.txt:397,cache,cache,397,psi4/src/psi4/cc/ccresponse/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccresponse/CMakeLists.txt,1,['cache'],['cache']
Performance,"teration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; inte",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:9695,optimiz,optimizations,9695,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['optimiz'],['optimizations']
Performance,"teration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11389,perform,perform,11389,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['perform'],['perform']
Performance,"tes in an input file in Python. ::. molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). * Molecules can be initiated from XYZ files and fragmented for SAPT computations. ::. # >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.08339310458383; # N 0.00000000000000 0.00000000000000 -5.33865984413460. sapt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:22945,load,load,22945,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['load'],['load']
Performance,"the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:1388,perform,performed,1388,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['perform'],['performed']
Performance,"the relative separation of the two centers; and not their absolute positions in space. Therefore, the derivative with; respect to center A is the negative of the same derivative with respect to; center B, so one is trivially gleaned from the other. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leaving the caller to determine the other; values. The Libint2 engine instead provides all integrals, so the caller; simply needs to loop over all of the buffers provided in the appropriate order. Changes to External Potential Engines; ..................................... Benchmarking showed that early versions of the old code spent a non-negligible; amount of time performing the Cartesian to spherical harmonic transformation of; the integrals, which is needed for most modern basis sets. To improve; performance, we instead backtransformed the density to the Cartesian; representation (denoted ""CartAO"") and computed / contracted all integrals in; this Cartesian basis, eliminating the need to transform to spherical harmonics; as the integrals are computed. This bottleneck no longer exists, so these; extra transformation steps have been removed as part of the switch to Libint2,; and the affected codes (PCM and CPPE interfaces) now compute the potential and; field integrals in the representation required by the basis set. Also, note that the way external point charges are specified has changed.; Previously, a set of N external point charges would be specified by passing a; matrix with dimensions N rows and 4 columns -- corresponding to charge, x, y, z; -- to the ``set_charge_field()`` member of the potential integral class. The; same information is now passed using",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:16529,perform,performing,16529,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['perform'],['performing']
Performance,the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadrat,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47750,optimiz,optimized,47750,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['optimiz'],['optimized']
Performance,"the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this ""spin-contamination"" problem.; Restricted Open-Shell Hartree--Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree--Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the |scf__reference| keyword, which defaults to ``RHF``.; The charge and multiplicity may either be specified in the molecule definition::. molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object::. h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in |PSIfour| and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the :ref:`symmetry <sec:moleculeKeywords>` flag, as in::. molecule h {; 0 2; H; symmetry c1; }. or by the ``reset_point_group`` Python molecule attribute::. h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known *a priori*,; they may be clamped throughout the procedure by using the |globals__docc| and; |globals__socc| options. For instance, all good quantum chemists know that; :math:`C_{2v}` water is; actually,::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). .. _`sec:scfbrokensymm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:11406,perform,performance,11406,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performance']
Performance,"then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:7039,optimiz,optimize,7039,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword |scf__cholesky_tolerance|.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. |PSIfour| also features the capability to use ""composite"" Fock matrix build; algorithms - arbitrary combinations of specialized algorithms that construct; either the Coulomb or the Exchange matrix separately. In general, since; separate Coulomb and Exchange matrix build algorithms exploit properties specific to; their respective matrix, composite algorithms display lower; scaling factors than their combined Fock build counterparts. However, composite algorithms also; introduce redundant ERI computations into the calculation. Therefore, composite Fock build; algorithms tend to perform better for larger systems, but worse for smaller systems. Arbitrary; composite algorithms can be accessed by setting |globals__scf_type| to ``J_alg+K_alg``,; where *J_alg* and *K_alg* are the names of the separate Coulomb; and Exchange construction algorithms to use, respectively. Alternatively, if one is using; DFT with non-hybrid functionals, a composite Coulomb construction algorithm can be; specified solo by setting |globals__scf_type| to ``J_alg``, without the need to set ; an associated ``K_alg``. Specialized algorithms available to construct the Coulomb term within a composite framework ; are as follows:. DFDIRJ; An integral-direct algorithm constructing the Coulomb term based on [Weigend:2002:4285]_; The DFDIRJ algorithm combines the benefits of integral-direct SCF approaches ; with that of density-fitting. Specifically, DFJ utilizes no I/O and displays ; strong performance with large system size through a combination of ; effective parallelization and utilization of density-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:30699,perform,perform,30699,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['perform']
Performance,"tial surfaces even when; *max force* and/or *rms force* are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by |optking__g_convergence|.; Note that this revokes the special convergence arrangements detailed in notes [#fe]_ and [#ff]_ ; and instead requires all active criteria to be fulfilled to ; achieve convergence. To avoid this revokation, turn on keyword |optking__flexible_g_convergence|. .. index::; pair: geometry optimization; output. Interface to GeomeTRIC; ^^^^^^^^^^^^^^^^^^^^^^. The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108]_ may be used in place of; Psi4's native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions. Use of the GeomeTRIC optimizer is specified with the ``engine`` argument to; :py:func:`~psi4.driver.optimize`. The optimization will respect the keywords |optking__g_convergence|; and |optking__geom_maxiter|. Any other GeomeTRIC-specific options (including constraints); may be specified with the ``optimizer_keywords`` argument to :py:func:`~psi4.driver.optimize`.; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the `GeomeTRIC github; <https://github.com/leeping/geomeTRIC>`_ ; for more information on keywords and JSON specification of constraints. * Optimize the water molecule using GeomeTRIC::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. optimize('hf/cc-pvdz', engine='geometric'). * Optimize the water molecule using GeomeTRIC, with one of the two OH bonds constrained to 2.0 au; and the HOH angle constrained to 104.5 degrees::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; maxiter 100; g_convergence gau; }. geometric",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:26643,optimiz,optimize,26643,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"tion is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially |detci__ex_level|) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in :source:`samples`. .. _`table:ci_spaces`:. .. table:: Orbital spaces for CI computations. +----------------------------+----------------------------+-------------------------------+; | CI (e.g., CISD, FCI) | RASCI | CASCI |; +============================+============================+===============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| | |globals__frozen_uocc| [#f1]_ |; +----------------------------+----------------------------+-------------------------------+; | (all orbitals not in | |globals__ras4| | |; + |globals__frozen_uocc| +----------------------------+ +; | or |glo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:6586,perform,performed,6586,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['perform'],['performed']
Performance,"tion. Therefore, composite Fock build; algorithms tend to perform better for larger systems, but worse for smaller systems. Arbitrary; composite algorithms can be accessed by setting |globals__scf_type| to ``J_alg+K_alg``,; where *J_alg* and *K_alg* are the names of the separate Coulomb; and Exchange construction algorithms to use, respectively. Alternatively, if one is using; DFT with non-hybrid functionals, a composite Coulomb construction algorithm can be; specified solo by setting |globals__scf_type| to ``J_alg``, without the need to set ; an associated ``K_alg``. Specialized algorithms available to construct the Coulomb term within a composite framework ; are as follows:. DFDIRJ; An integral-direct algorithm constructing the Coulomb term based on [Weigend:2002:4285]_; The DFDIRJ algorithm combines the benefits of integral-direct SCF approaches ; with that of density-fitting. Specifically, DFJ utilizes no I/O and displays ; strong performance with large system size through a combination of ; effective parallelization and utilization of density-fitting to minimize ; ERI computational cost. See the :ref:`sec:scfddfj` section for more information. Specialized algorithms available to construct the Exchange term within a composite framework; are as follows:. COSX; An algorithm based on the semi-numerical ""chain of spheres exchange"" (COSX); approach described in [Neese:2009:98]_. The coulomb term is computed with a; direct density-fitting algorithm. The COSX algorithm uses no I/O, scales; well with system size, and requires minimal memory, making it ideal for; large systems and multi-core CPUs. See :ref:`sec:scfcosx` for more information.; LINK; An implementation of the linear-scaling ""Linear Exchange"" (LinK); algorithm described in [Ochsenfeld:1998:1663]_. The LINK algorithm provides ; many of the benefits of integral-direct SCF algorithms, including no disk I/O, ; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:31590,perform,performance,31590,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performance']
Performance,"tion; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant u",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:8753,perform,perform,8753,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['perform'],['perform']
Performance,"tiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38003,optimiz,optimizer,38003,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimizer']
Performance,"todoc_capabilities_scf.rst; ${CCBD}/source/api/psi4.core.set_variable.rst; ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; ${CCBD}/source/autodoc_basissets_byfamily.rst; ${CCBD}/source/autodoc_available_efpfrag.rst; COMMENT ""Preparing Sphinx HTML documentation build""); add_dependencies(sphinxman psi4-core). install(; DIRECTORY ${CCBD}/html; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DOCDIR}; OPTIONAL). add_custom_target(linkcheck; DEPENDS sphinxman; COMMENT ""Preparing Sphinx linkcheck documentation build""). add_custom_command(; TARGET linkcheck POST_BUILD; COMMAND ${SPHINX_EXECUTABLE}; -b linkcheck # builder; -d ${CCBD}/_doctrees # cache w/ pickled reST; -c ${CCBD}/source # whereabouts of conf.py; ${CCBD}/source # build from; ${CCBD}/latex # build to; COMMENT ""Building linkcheck documentation ...""). # * full, proper build with LaTeX; if (LATEX_COMPILER AND PDFLATEX_COMPILER); add_custom_target(sphinxpdf; DEPENDS sphinxman; COMMENT ""Preparing Sphinx HTML and PDF documentation build""). # * full, proper build with latex builder; add_custom_command(; TARGET sphinxpdf POST_BUILD; COMMAND ${SPHINX_EXECUTABLE}; -b latex # builder; -d ${CCBD}/_doctrees # cache w/ pickled reST; -c ${CCBD}/source # whereabouts of conf.py; ${CCBD}/source # build from; ${CCBD}/latex # build to; COMMENT ""Building latex documentation ...""); add_custom_command(; TARGET sphinxpdf POST_BUILD; COMMAND ${PDFLATEX_COMPILER}; -interaction=nonstopmode; ""Psi4.tex"" > /dev/null 2>&1; WORKING_DIRECTORY ${CCBD}/latex; COMMENT ""Building remarkably ugly PDF documentation from LaTeX ... (ignore the make exit error)""); endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:22937,cache,cache,22937,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['cache'],['cache']
Performance,"torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mean-square of displacement (|optking__rms_disp_g_convergence|), ; all in internal coordinates and atomic units. Usually, these options will not ; be set directly. Primary control for geometry convergence lies with the keyword ; |optking__g_convergence| which sets the aforementioned in accordance ; with Table :ref:`Geometry Convergence <table:optkingconv>`. |; |. .. _`table:optkingconv`:. .. table:: Summary of sets of geometry optimization criteria available in |PSIfour|. +-----------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:20298,optimiz,optimization,20298,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimization']
Performance,"tplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent |PSIfour|; (the ``-C psi4PluginCache`` part) which in turn can be overridden; by passing ``-Doption=value`` commands to ``cmake`` *and* pointing; toward a particular |PSIfour| (and probably pybind11) library to; link against (the ``CMAKE_PREFIX_PATH`` part) *and* telling it to; do an in-source build (the ``.`` part). Then just run ``make`` in; your plugin directory. After any change to the plugin C++ code,; ``make`` must be run in the plugin directory to recompile the; ``myplugin.so`` executable, but recompiling the main |PSIfour| code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__init__.py`` file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in :envvar:`PYTHONPATH`,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating :envvar:`PSIPATH`. Then,;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:7928,load,loading,7928,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['load'],['loading']
Performance,"tten to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and fi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:4337,optimiz,optimization,4337,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['optimiz'],['optimization']
Performance,"tutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT module is available `here; .. <https://www.youtube.com/playlist?list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Specific videos in the series include:; ..; .. - `F-SAPT#1; .. <https://www.youtube.com/watch?v=J22J0wh4mVo&index=1&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of F-SAPT to analyze the; .. distribution of the intermolecular interaction energy components between the; .. various hydroxyl and phenyl moieties of the phenol dimer.; .. - `F-SAPT#2; .. <https://www.youtube.com/watch?v=fqlzXsayec0&index=2&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the order-1 F-SAPT analysis with PyMol and perform a; .. ""difference F-SAPT"" analysis; .. - `I-SAPT#1; .. <https://www.youtube.com/watch?v=fD6mu_tTG_c&index=3&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Describes the use of I-SAPT to analyze the interaction between the two phenol; .. groups in a 2,4-pentanediol molecule.; .. - `I-SAPT#2; .. <https://www.youtube.com/watch?v=hDbonAOD5dY&index=4&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Discusses how to plot the density fields and ESPs of the various moieties of; .. the I-SAPT embedding scheme with PyMol; .. - `F/I-SAPT Options; .. <https://www.youtube.com/watch?v=KFkPKSUZVfI&index=5&list=PLg_zUQpVYlA1Tc1X_HgAbqnFcHNydqN7W>`_.; .. Details all of the more-advanced options in the F/I-SAPT code (rarely needed). The scripts discussed below are located in :source:`psi4/share/psi4/fsapt`. F-SAPT: A Representative Example; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Below, we show an example of using F-SAPT0/jun-cc-pVDZ to analyze the; distribution of the inter",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:3633,perform,perform,3633,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['perform'],['perform']
Performance,"uations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example ::. molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results; ^^^^^^^^^^^^^^^^^^^^^^^^^. We will examine the results of a SAPT2+3/aug-cc-pVDZ computation on the; water dimer. This computation can be performed with the following ; input::. molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; }; ; set globals {; basis aug-cc-pvdz; guess sad; scf_type df; }; ; set sapt {; print 1; nat_orbs_t2 true; freeze_core true; }; ; energy('sapt2+3'). To reiterate some of the options mentioned above: the; |sapt__nat_orbs_t2| option will compute MP2 natural orbitals and use; them in the evaluation of the triples correction to dispersion, and the; |sapt__freeze_core| option will freeze the core throughout the SAPT; computation. This SAPT2+3/aug-cc-pVDZ computation produces the following; results::. SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.19846883 [kcal/mol] -34.30239689 [kJ/mol]; Elst10,r -13.37542977 [mE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:33120,perform,performed,33120,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['perform'],['performed']
Performance,"uclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm\ :sup:`-1`; may exist)::. Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm\ :sup:`-1` ; is::. Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825; H 0.000 -0.417 0.538 1.007825. where the table shows the displacements in the X, Y, and Z dimensions for; each atom along the normal mode coordinate. (This information could be used; to animate the vibrational frequency using visualization software.). Because the vibrational frequencies are available, a thermodynamics; analysis is automatically performed at the end of the computation.; You can see this in the next section of the output file. The vibrational; frequencies are sufficient to obtain vibrational contributions to; enthalpy (H), entropy (S), and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. .. _`sec:tutorial_tu5`:. Analysis of Intermolecular Interactions; =======================================. Now let's consider something a little more interesting. |PSIfour|; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]_. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and |PSIfour|; makes these computations easier than ever. For a SAPT computation, the input needs to provide information on two; distinct molecules. This is",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:10772,perform,performed,10772,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['perform'],['performed']
Performance,"un tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTAL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63521,perform,performed,63521,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['perform'],['performed']
Performance,"un_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names; ; # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3; ; # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations ; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners; ; tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file; ; return e_mp25 . One final step is necessary. At the end of the ``aliases.py`` file, add ; the following line. ::. procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command. ::. energy('mp2.5'). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst:3667,optimiz,optimizations,3667,doc/sphinxman/source/quickaddalias.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst,1,['optimiz'],['optimizations']
Performance,"undation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: Orbital-Optimized Methods, OMP2; single: Orbital-Optimized Methods, OMP3; single: Orbital-Optimized Methods, OMP2.5; single: Orbital-Optimized Methods, OLCCD. .. index::; pair: Orbital-Optimized Methods; theory; pair: OMP2; theory; pair: OMP3; theory; pair: OLCCD; theory. .. _`sec:occ_oo`:. OCC: Orbital-Optimized Coupled-Cluster and |MollerPlesset| Perturbation Theories; ================================================================================. .. codeauthor:: Ugur Bozkaya; .. sectionauthor:: Ugur Bozkaya. *Module:* :ref:`Keywords <apdx:occ>`, :ref:`PSI Variables <apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [She",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:1871,optimiz,optimized,1871,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,2,['optimiz'],['optimized']
Performance,"until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:13438,tune,tuned,13438,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['tune'],['tuned']
Performance,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2084,optimiz,optimization,2084,doc/sphinxman/source/nbody.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst,1,['optimiz'],['optimization']
Performance,"vate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 bui",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23293,cache,cached,23293,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['cache'],['cached']
Performance,"ventional SCF calculations, where the ERIs are stored ; in core or on disk. However, even when using DF, I/O becomes a significant bottleneck for systems of a sufficient size when performing conventional SCF; calculations. In principle, though, DF approaches can be utilized in an integral-direct context, gaining the benefits of DF methods without suffering the; I/O bottlenecks that conventional DF methods will eventually run into. One such approach, outlined by Weigend in [Weigend:2002:4285]_,; is available for use in Psi4 for the separate construction of the Coulomb contribution to the Fock matrix. This implementation can be used alongside ; Psi4's separate Exchange construction algorithms for composite Fock matrix construction by using the keyword DFDIRJ as the Coulomb construction ; algorithm when specifying |globals__scf_type| to use a composite algorithm combination (``DFDIRJ+K_alg`` in general, ; or ``DFDIRJ`` for DFT with non-hybrid functionals). . DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI ; screening (set |globals__screening| to ``DENSITY``) and incremental Fock matrix construction (set |scf__incfock| to ``TRUE``). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. .. _`sec:scfcosx`:. COSX Exchange; ~~~~~~~~~~~~~. The semi-numerical COSX algorithm described in [Neese:2009:98]_ evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral ; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in :ref:`sec:dft`.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:38193,perform,performance,38193,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['perform'],['performance']
Performance,"warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the data",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:1675,perform,performed,1675,doc/sphinxman/source/db.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst,1,['perform'],['performed']
Performance,"wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:2905,optimiz,optimization,2905,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['optimiz'],['optimization']
Performance,"wise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5958,optimiz,optimize,5958,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['optimiz'],['optimize']
Performance,"with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12154,optimiz,optimized,12154,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['optimiz'],['optimized']
Performance,"xternal proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:26258,load,loader,26258,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['load'],['loader']
Performance,"y (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2630,perform,perform,2630,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['perform'],['perform']
Performance,"y useful for debugging. For the calculation of vertical excitation energies with PCM non-equilibrium solvation should be included with: ::. pcm = {; Medium {; Nonequilibrium = True; }; }. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The PCMSolver library **cannot** exploit molecular point group symmetry. .. warning:: ROHF with PCM is known **not to work**. See `issue #999 on GitHub <https://github.com/psi4/psi4/issues/999>`_.; For the adventurous, a fix is available in `pull request #953 on GitHub <https://github.com/psi4/psi4/pull/953>`_. .. warning:: Analytic gradients and Hessians **are not** available with PCM. Finite differences will be used; regardless of the ``dertype`` passed to the ``optimize`` function.; See :srcsample:`pcmsolver/opt-fd` for a sample input. The PCM model and molecular cavity are specified in a ``pcm`` section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of |Psifour| and is fully documented; `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PCM would look like the following: ::. molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:5252,optimiz,optimize,5252,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['optimiz'],['optimize']
Performance,"y(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:13436,queue,queueing,13436,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['queue'],['queueing']
Performance,"y. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set |dct__odc_guess| to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; |dct__guess_r_convergence| option. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:18767,perform,performing,18767,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['perform'],['performing']
Performance,"y.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46033,optimiz,optimized,46033,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['optimiz'],['optimized']
Performance,"{; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15529,optimiz,optimization,15529,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimization']
Performance,"| eomea/eomip | _cc | _cc | _cc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | cc3 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | _cc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | _cc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | :py:func:`~psi4.optimize`, first | cc2 | none | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | vcc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd | none | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | vcc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd(t) | none | ecc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eom",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:45365,optimiz,optimize,45365,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['optimiz'],['optimize']
Performance,"|PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:28909,perform,perform,28909,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['perform'],['perform']
Performance,"|PSIfour| has a number of utilities that manage; input and output (I/O) of quantities to and from the hard disk. Most; quantities, such as molecular integrals, are intermediates that are not of; interest to the user and can be deleted after the computation finishes, but; pertinent details of computations are also written to a checkpoint file and; might be useful in subsequent computations. All files are written to the; designated scratch :ref:`numbered by content <apdx:psiFiles>` and labeled; with the process id, then are deleted at the end of the computation,; unless otherwise instructed by the user. A Python callable handle to the |PSIfour| I/O management routines is available,; and is called ``psi4_io``. To instruct the I/O manager to send all files to; another location, say ``/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; nam",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:3916,queue,queue,3916,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['queue'],['queue']
Performance,"}\cos{\theta_b}\cos{\theta_c}+1)}{(r_{AB}r_{BC}r_{AC})^{3}}f_{damp}(\bar{r}_{ABC}); ; where :math:`\theta_a` is the angle at atom A corresponding to the triangle formed by atoms A, B, and C,; and :math:`\bar{r}_{ABC}` is the geometric mean of the corresponding atomic-pair distances.; The dispersion coefficients are defined as. .. math:: C_{9}^{ABC} = \sqrt{C_{6}^{AB}C_{6}^{BC}C_{6}^{AC}}. See the `DFT-D3 documentation <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/man.pdf>`_ ; for more details. For now, the three-body correction can be called by using the :py:func:`~psi4.core.Molecule.run_dftd3`; function with `d3-atmgr` as the passed functional string. ; For example, the three-body ATM dispersion correction for a neon trimer could; be computed with::. molecule ne3 {; Ne 0.0 0.0 0.0; Ne 0.0 0.0 1.0; Ne 0.0 1.0 1.0; }; ne.update_geometry(); energy = m.run_dftd3('d3-atmgr', dertype=0); print(energy). Since v1.7, it is preferred to use ``s-dftd3`` for ATM since the 3-body can be run concurrent; with the 2-body contribution. .. rubric:: Footnotes. .. [#f0] Note that there are functionals with these extensions (*e.g.*, wB97X-D) that, ; not being Grimme corrections, won't follow this table exactly.; ; .. [#f1] [Grimme:2004:1463]_; .. [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; opt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:22390,concurren,concurrent,22390,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['concurren'],['concurrent']
Safety," # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole syst",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1865,redund,redundant,1865,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['redund'],['redundant']
Safety," ; LIBPSIO --- The PSI I/O Library. Programmer's Manual for LIBPSIO: The PSI I/O Library. T. Daniel Crawford ; 22 October 1998 ; Updated: 27 July 2006; crawdad@vt.edu. I. The structure and philosophy of the; library. Many I/O libraries for quantum chemistry packages (including those in; the old PSI2 code) expect the programmer to know the byte-by-byte; layout of the given binary file. Accordingly, the primary read; and write functions in such libraries require as an argument a global; bytewise file pointer to the beginning of the desired data. As a; result, when this pointer is defined to be an unsigned four-byte; integer (common on 32-bit computers), the total size of the direct; access file is limited to 4 GB (232 bytes). Furthermore,; in order to avoid code duplication, this I/O design requires that one; construct specialized libraries of functions (e.g., libfile30; in PSI2) for interaction with particularly complicated files such as a; checkpoint file. Even slight modification of the file layout can; require substantial changes to such libraries. This PSI3 I/O library, libpsio, is intended to overcome these; problems in two ways:. Each file makes use of its own table of contents (TOC); which contains file-global starting and ending addresses for each; data item.; Addresses to data items in the TOC are provided to the standard; read and write functions by the programmer as entry-relative; page/offset pairs, which are translated to file-global; addresses internally. Data items in the TOC are identified by keyword strings (e.g.,; ""Nuclear Repulsion Energy""). If the programmer wishes to; read or write an entire TOC entry, he/she is required to provide only; the TOC keyword and the entry size (in bytes) to obtain the data; the; entry's global starting address is supplied by the TOC. Furthermore,; it is possible to read pieces of TOC entries (say a single buffer of a; large list of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a startin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html:760,avoid,avoid,760,doc/sphinxman/source/attic/libpsio.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html,1,['avoid'],['avoid']
Safety," GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* als",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46338,detect,detection,46338,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detection']
Safety," In Psithon input files, prepend physical constants with ``psi_`` to; prevent clashes with user-defined variables (*e.g.*, ``psi_h``). In; PsiAPI mode, access as, *e.g.*, ``psi4.constants.h``. .. index:: memory; .. _`sec:memory`:. Memory Specification; ====================. By default, |PSIfour| assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the ``memory`` keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to |PSIfour|::. # all equivalent. memory 2 GB; ; memory 2000 MB; ; memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). |PSIfour| recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB). By default, |PSIfour| performs a ""sanity check"" when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to |PSIfour|::. # setting available memory to 2 MB; set_memory_bytes(2000000). Please note that this memory setting only governs the maximal memory; usage of the major data structures, and actual total memory usage; is slightly higher. This is usually a negligible amount, except when; setting tiny memory allowances. One convenient way to override the |PSIfour| default memory is to place a; memory command in the |psirc| file (Sec. :ref:`sec:psirc`). For example,; the following makes the default memory 2 GB. ::. set_memory(2000000000). However, unless you're assured of having only one job running on a node at; a time (and all nodes on the filesystem with |psirc| have similar memory; capacities), it is advised to set memory in the input file on a; per-calculation basis. That same command can b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:4039,sanity check,sanity check,4039,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['sanity check'],['sanity check']
Safety," PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C++ source.; * :makevar:`CMAKE_C_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C source. **Examples**. A. Build with detected compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. C. Build with specific (GNU) compilers *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. D. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". E. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH` and also building Fortran Add-Ons. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:35839,detect,detected,35839,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety," Therefore care must be taken to ensure that the missing permutations; are correctly accounted for when processing the integrals within the loop. See; the DirectJK code in libfock for an example of using this scheme for a Fock; matrix build. Using bra-ket symmetry; ...................... In cases where there is no batching performed, bra-ket symmetry can be; trivially enforced by ensuring that one of the block indices is greater than or; equal to the other. When batching is used, the situation is trickier; some ket; batches may contain a mixture of integrals that are bra-ket unique and those; that are not. To handle this we must do a coarse check at the top of the loop; to see if *any* integrals in the batch are needed, which is implemented by; asking the integral engine where to start looping in the ket via the call to; ``eri->first_RS_shell_block(PQpair_idx)``. This is followed by a more fine; grained check within the loops to filter individual integrals in the case where; bra and ket have the same angular momentum and there's a possibility of a; handful of integrals coming from the ket that are redundant. Note that the bra; is not batched in any of our engines currently: only the ket is. For this; reason, density fitting integrals should be written as (A0|PQ) rather than; (PQ|A0) where possible, because we want the ket to contain more functions than; the bra for efficient blocking. Instantiating integral objects; .............................. With sieving being introduced in the new integral objects, the cost of their; construction has increased. Although significantly cheaper than computing; integrals themselves, construction of integral objects can be non-negligible,; especially if many threads are used. For example, this pattern can be found in; old versions of the code:. .. code-block:: cpp. std::vector<std::shared_ptr<TwoBodyAOInt>> ints;; ints.push_back(std::shared_ptr<TwoBodyAOInt>(factory->eri()));; for (int thread = 1; thread < num_threads; thread++) {;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:10226,redund,redundant,10226,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['redund'],['redundant']
Safety," basis function is a Hartree-Fock (or Kohn-Sham); molecular orbital. The number of OSOs and MOs is always the same. MOs are; orthonormal. * ``LO`` (Localized Orbitals): Localized occupied orbitals, a different; combination of the occupied molecular orbitals which enhances spatial; locality. LOs do not diagonalize the occ-occ block of the Fock Matrix, but; remain orthonormal to each other and the virtual space. .. _`faq:orbdims`:. How to name orbital dimensions; ------------------------------. There are a number of different names used to refer to the basis set size.; These may seem redundant, but they have subtly different meanings, as; detailed below. A calculation can use either pure (5D, 7F, 9G, etc.) basis functions or; Cartesian (6D, 10F, 15G, etc.), as dictated by the input file / basis set; specification. Also, the basis can be represented in terms of atomic; orbitals (AO) or symmetry-adapted orbitals (SO). Further complications; come from the fact that a nearly linearly-dependent basis set will have; functions removed from it to prevent redundancies. With all of these; factors in mind, here are the conventions used internally:. * nao |w---w| The number of atomic orbitals in Cartesian representation.; * nso |w---w| The number of atomic orbitals but in the pure representation if the current basis uses pure functions, number of Cartesian AOs otherwise.; * nbf |w---w| The number of basis functions, which is the same as nso.; * nmo |w---w| The number of basis functions, after projecting out redundancies in the basis. When molecular symmetry is utilized, a small array of sizes per irrep is; usually allocated on the stack, and is named by augmenting the name above; with a pi (per-irrep), e.g. nmopi. Note that the number of irreps is; always the singular nirrep, and that the index variable h is always used; in a for-loop traverse of irreps. .. _`faq:orbspaces`:. How to name orbital spaces (e.g., docc); ---------------------------------------. As with basis sets, a nu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:13483,redund,redundancies,13483,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['redund'],['redundancies']
Safety," default, |Angstrom| units are used; this is changed by adding; a line that reads :samp:`units {spec}`, where :samp:`{spec}` is one; of ``ang``, ``angstrom``, ``a.u.``, ``au``, or ``bohr``. **Orientation**; Certain computations require that the molecule is not reoriented. This ; can be achieved by adding either ``no_reorient`` or ``noreorient``. ; To prevent even recentering of the molecule, add ``no_com`` or ``nocom``. **PubChem**; A line reading :samp:`pubchem:{mol}` fetches the geometry for molecule; :samp:`{mol}` from the PubChem database, where :samp:`{mol}` is either; the IUPAC molecule name or the CID number. See :ref:`sec:pubchem` for; details. **Symmetry**; The symmetry can be specified by a line reading :samp:`symmetry; {symbol}`, where :samp:`{symbol}` is the Sch\ |o_dots|\ nflies symbol; of the (Abelian) point group to use for the computation, one of one of; ``c1``, ``c2``, ``ci``, ``cs``, ``d2``, ``c2h``, ``c2v``, or ``d2h``.; This need not be specified, as the molecular symmetry is automatically; detected by |PSIfour|. See :ref:`sec:symmetry` for details. **Fragments**; A line reading ``--`` is interpreted as the separator between two non-covalently ; bound molecular fragments. See :ref:`sec:fragments` for details. Multiple Molecules; ==================. To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell |PSIfour| which one should be used in a given; calculation. For example, consider the following input file::. molecule h2 {; H; H 1 0.9; }; ; set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). molecule h {; H; }; ; set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H\ :sub:`2`, while the second is for H atom. The last molecule to be; specified is the ""active"" molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:6142,detect,detected,6142,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['detect'],['detected']
Safety," elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:12681,avoid,avoiding,12681,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['avoid'],['avoiding']
Safety," eri->first_RS_shell_block(blockPQ_idx);; for (int blockRS_idx = loop_start; blockRS_idx < blocksRS.size(); ++blockRS_idx) {; const auto& blockRS = blocksRS[blockRS_idx];. if (!eri->shell_block_significant(blockPQ_idx, blockRS_idx)) continue;. eri->compute_shell_blocks(blockPQ_idx, blockRS_idx);; const auto* block_start = buffers[0];. // Loop over all of the P,Q,R,S shells within the blocks. We have P>=Q, R>=S and PQ<=RS.; for (const auto& pairPQ : blockPQ) {; const auto &P = pairPQ.first;; const auto &Q = pairPQ.second;; const auto& Pshell = basisset->shell(P);; const auto& Qshell = basisset->shell(Q);; const auto Pam = Pshell.am();; const auto Qam = Qshell.am();; for (const auto& pairRS : blockRS) {; const auto &R = pairRS.first;; const auto &S = pairRS.second;; const auto& Rshell = basisset->shell(R);; const auto& Sshell = basisset->shell(S);; const auto Ram = Rshell.am();; const auto Sam = Sshell.am();. size_t block_size = Psize * Qsize * Rsize * Ssize;; // When there are chunks of shellpairs in RS, we need to make sure; // we filter out redundant combinations.; if (use_batching && Pam == Ram && Qam == Sam && ((P > R) || (P == R && Q > S))) {; block_start += block_size;; continue;; }; const double* int_ptr = block_start;; // Query P,Q,R,S shells for metadata and loop over that quartet; // as usual, getting the integrals from the int_ptr buffer.; block_start += block_size;; }; }; }; }. Although this looks more complex, it's essentially doing the same thing. There; are a number of differences that we'll highlight now. Sieving; ....... This is one of two breaking changes to the old style syntax. Instead of; constructing a sieve object, the integral object should be queried directly; using the exact same syntax. Requests for whether a shell is significant or a; shell block is significant are both supported. A sieve object is created if; matching basis sets are found in either the bra or the ket. For a density; fitting integral (PQ|0A) where 0 is the null basis set an",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:5138,redund,redundant,5138,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['redund'],['redundant']
Safety," for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:18090,detect,detection,18090,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detection']
Safety," look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64030,detect,detectable,64030,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detectable']
Safety," objects has been changed. Advantages to New Scheme (aka *Why*); ------------------------------------. - Defaults for fitting basis sets set on a per-atom basis (*e.g.*, DF-SCF; on metal-organic with cc-pVDZ uses cc-pVDZ-JKFIT for the organic and; Def2-tzvpp (or something) for the metal) so that the user shouldn't; experience a failed job on account of incomplete fitting basis sets. - All default info for auxiliary basis sets in one place. Programmer when; calling for a new auxiliary BasisSet gives the fitting role if defaults; need to be computed (e.g., JKFIT) and the orbital basis to compute; defaults off of (e.g., get_option(BASIS)). This eliminates all the; ""corresponding_jkfit"" boilerplate in ``proc.py`` and also means defaults; can be assigned for non-uniform orbital basis sets. - Assignment of basis sets to atoms proceeds through ""all"", ""by_symbol""; (e.g., ""Co""), or ""by_label"" (e.g., H1 or Co_mine). There is *no*; assignment to atoms by number (except a bit internally where it's safe); which can be ambiguous when the Molecule has been fragmented as for SAPT. - Users don't need to ""set basis basisname"" after every `molecule {...}`; definition or activation because basis sets are not attached to the; molecule at time option is set but at time BasisSet is built. Similarly,; once can define a `basis basisname {...}` block and use it for multiple; molecules. BasisSet gives the option name where any user intentions as to proper; value may be found (DF_BASIS_SCF), the name by which the new basis can be; recalled (get_str('DF_BASIS_SCF')), the fitting role if defaults need to; be computed (JKFIT), the. *How* for Programmers; ---------------------. To get a BasisSet object into your module, just call `pyconstruct` where; formerly you called `construct`. There are two flavors, one for orbital; basis sets and one for auxiliary basis sets. There's no difference in the; BasisSet objects they return or even the code used to assemble them- the; two flavors are just for sane",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst:2371,safe,safe,2371,doc/sphinxman/source/attic/prog_basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst,1,['safe'],['safe']
Safety," setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:43914,detect,detected,43914,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety," term is computed as follows::. set DO_IND30_EXCH_SINF true # calculate Exch-Ind30 (S^inf) ; energy('sapt2+3'); ; These calculations are performed with the atomic orbital and ; density-fitting scheme described in the Supplementary Material to; [Smith:2020:184108]_ for the second-order terms and in [Waldrop:2021:024103]_; for the third-order exchange induction. The coupled (response) version of the; exchange-induction corrections are also calculated, exactly for ; :math:`E_{exch-ind,resp}^{(20)}` and by scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:45962,avoid,avoid,45962,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['avoid'],['avoid']
Safety," terms are grouped according to the component of the interaction; to which they contribute. The total component energies (*i.e.*,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings ; used in |PSIfour| as a ""chemist's grouping"" as opposed to a more; mathematically based grouping, which would group all exchange terms ; (*i.e.* :math:`E_{exch-ind,resp}^{(20)}`, :math:`E_{exch-disp}^{(20)}`, *etc.*) in; the exchange component. A final note is that both ``Disp22(T)``; and ``Est.Disp22(T)`` results appear if MP2 natural orbitals are ; used to evaluate the triples correction to dispersion. The ``Disp22(T)`` ; result is the triples correction as computed in the truncated NO basis; ; ``Est.Disp22(T)`` is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The ``Est.Disp22(T)``; value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]_ ; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well. As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the |sapt__exch_scale_alpha| keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all ; relevant terms: :: . SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.198468",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:38297,recover,recover,38297,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['recover'],['recover']
Safety," the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_op",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2765,detect,detect,2765,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['detect'],['detect']
Safety," to Kohn-Sham references is under development. As of 1.7, only LDA functionals are currently supported. In case convergence problems are encountered during the Davidson procedure, file a bug report.; If the solver seems to converge on the wrong eigenvalue, try increasing |scf__solver_n_guess|.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; |scf__solver_maxiter|. .. _`sec:scf-ecps`:. Effective core potentials (ECPs); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| supports the use of effective core potentials to describe the; innermost electrons in heavy elements.; ECPs are only available if |PSIfour| is compiled with the :ref:`LibECPInt <cmake:ecpint>` library.; If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, *c.f.* :ref:`sec:basissets-ecps`. All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See :srcsample:`scf-ecp` and :srcsample:`dfmp2-ecp`; for examples of computations with ECP-containing basis sets. .. warning:: Prior to May 2022, v1.6, Psi4 used a built-in ECP code. Analytic derivatives of ECPs were not available. The HF and DFT derivatives were implemented in a semi-numerical scheme, where numerical ECP gradients were added to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic derivatives, but these have so far only been verified for HF and DFT. .. warning:: ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this func",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:52573,detect,detected,52573,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['detect'],['detected']
Safety,"""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18637,detect,detected,18637,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['detect'],['detected']
Safety,"# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1987,detect,detect,1987,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['detect'],['detect']
Safety,"%; % PSI Programmer's Manual; %; % SVN Revision Control Section; % (formerly CVS); %; % TDC, February, 1996; % Modified by TDC, December 2002; % Updated from CVS to SVN, April 2007; %. The subversion control system (SVN) (\htmladdnormallink{{\tt; subversion.tigris.org}}{http://subversion.tigris.org/}) provides a; convenient means by which programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policie",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:696,safe,safety,696,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['safe'],['safety']
Safety,"* DGER: Rank-1 update (not wrapped yet). * BLAS3. * DGEMM: General Matrix-Matrix product; * DTRMM: General Triangular Matrix-General Matrix product; * DTRSM: Triangular Matrix-General Matrix solution via back substitution (just as fast as DTRMM); * DSYMM/DSYMV calls are not appreciably faster than DGEMM calls, and should only be used in expert situations (like using the other half of the matrix for some form of other transformation).; * DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers; ^^^^^^^^^^^^^^^. All standard LAPACK 3.2 double precision routines are provided. LAPACK commands remain in Fortran's ""column-major"" indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using ``lda = n`` in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: you expect to get back a lower triangular matrix L such; that ``L L^T = A``, but this is returned in column-major order, so the actual; recovery of the matrix A with the row-major BLAS wrappers effectively; involves ``L^T L = A``. On of the biggest consequences is in linear equations:; The input/output forcing/solution vector must be explicitly formed in; column-major indexing (each vector is placed in a C++ row, with its; entries along the C++ column). This is visualized in C++ as the transpose; of the forcing/solution vector. All routines are declared in qt.h. Each; routine is prefixed with a ``C_``, followed by the standard Fortran name of; the routine, in capital letters. Input parameters of single primitives; (int, double, unsigned long int, char, ...) are passed by value. Arrays,; including multidimensional arrays, are required to be in contiguous memory; (as provided by block_matrix, for example), and are passed by providing a; pointer to the first double or int element of the data (this is array[0]; if array is ``double**``). All routines return an int INFO w",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:5902,recover,recovery,5902,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['recover'],['recovery']
Safety,", the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19025,redund,redundant,19025,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['redund'],['redundant']
Safety,", there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; fil",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68197,avoid,avoid,68197,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['avoid'],['avoid']
Safety,", well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2842,detect,detect,2842,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detect']
Safety,"- For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build usi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23847,safe,safe,23847,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['safe'],['safe']
Safety,"-- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2364,avoid,avoidable,2364,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['avoid'],['avoidable']
Safety,"--+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron repulsion integral; (ERI) tensor and even to reduce the computational scaling of some terms.; DF/CD-CCSD(T) computations are available in |Psifour|, with or without the; use of FNOs, through the FNOCC module. The implementation and accuracy of; the DF/CD-CCSD(T) method are described in [DePrince:2013:2687]_\. The DF-CCSD(T) procedure uses two auxiliary basis sets. The first set is; that used in the SCF procedure, defined by the |scf__df_basis_scf|; keyword. If this keyword is not specified, an appropriate -JKFIT set is; automatically selected. This auxiliary set defines the ERIs used to; build the Fock matrix used in the DF-CCSD(T) procedure. The second; auxiliary set is used to approximate all other ERIs in the DF-CCSD(T); procedure. The choice of auxiliary basis is controlled by the keyword; |fnocc__df_basis_cc|. By default, |fnocc__df_basis_cc| is the RI set; (optimized for DFMP2) most appropriate for use with the primary basis.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:13732,avoid,avoid,13732,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['avoid'],['avoid']
Safety,"--------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <ht",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:7116,detect,detected,7116,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety,"-----------------------------. Using ``std::make_shared``:. 1. Reduces code verbosity, especially when coupled with ``auto``:. .. code-block:: cpp. // Type information given 3 TIMES!!!; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // So much typing...; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. // Much better!!!!; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. 2. Ensures exception safety and prevents resource leaks. 3. Improves efficiency:. .. code-block:: cpp. // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. *Reference:* Item 21 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. .. _`faq:autodecl`:. Prefer ``auto`` to explicit type declarations; ---------------------------------------------. Using ``auto`` reduces and/or avoids:. 1. Verbosity in variable declarations:. .. code-block:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. 3. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. .. code-block:: cpp. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. *Reference:* Items 2 and 5 in `[Effective Modern C++] <https://",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst:2853,avoid,avoids,2853,doc/sphinxman/source/prog_style_c.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst,1,['avoid'],['avoids']
Safety,". *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2481,detect,detect,2481,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['detect'],['detect']
Safety,".....................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Mini",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31641,redund,redundant,31641,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['redund'],['redundant']
Safety,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3761,detect,detecting,3761,doc/sphinxman/source/ecpint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst,3,['detect'],"['detectable', 'detecting']"
Safety,"2. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27204,safe,safe,27204,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['safe'],['safe']
Safety,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12982,detect,detected,12982,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['detect'],['detected']
Safety,"://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2489,detect,detect,2489,doc/sphinxman/source/gau2grid.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst,1,['detect'],['detect']
Safety,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4750,detect,detecting,4750,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,3,['detect'],"['detectable', 'detecting']"
Safety,"<apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:2614,avoid,avoids,2614,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['avoid'],['avoids']
Safety,"= block_size;; }; }; }; }. Although this looks more complex, it's essentially doing the same thing. There; are a number of differences that we'll highlight now. Sieving; ....... This is one of two breaking changes to the old style syntax. Instead of; constructing a sieve object, the integral object should be queried directly; using the exact same syntax. Requests for whether a shell is significant or a; shell block is significant are both supported. A sieve object is created if; matching basis sets are found in either the bra or the ket. For a density; fitting integral (PQ|0A) where 0 is the null basis set and A is an auxiliary; basis set the (PQ| pair will be used to construct all of the sieving data. Buffer address; .............. The old code copied integrals into a buffer owned by the integral object, whose; address remained constant and could be retrieved by the ``buffer()`` member; function. To avoid unnecessary copies, the new code instead uses the integrals; directly from the underlying integral engine's memory, which may change with; each call to compute integrals. The integral engine provides a; ``std::vector<const double*>`` containing the pointers to the start of each; ""chunk"" of integrals. For first derivatives there are 12 such ""chunks"", which; are ordered Px,Py,Pz,Qx,Qy,Qz,Rx,Ry,Rz,Sx,Sy,Sz, where the Px refers to the x; derivative with respect to the basis functions in shell P. Note that all; integral derivatives are provided by the new integral code, unlike the previous; version where only 9 of 12 were provided and the user was responsible for using; translation invariance relationships to fill in the rest. The addresses for; each chunk are updated in the vector after each call to compute integrals, so; the user should keep a const reference to that object, and query that for the; address of interest. Density Screening; ................. The old code looked only at the integral to determine whether terms can be; avoided *a priori*. However, if the i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:6379,avoid,avoid,6379,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['avoid'],['avoid']
Safety,"ACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-block:: bash. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46892,detect,detection,46892,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detection']
Safety,"ARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25591,detect,detecting,25591,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detecting']
Safety,"CENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ fla",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1837,avoid,avoidable,1837,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['avoid'],['avoidable']
Safety,"Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2166,redund,redundant,2166,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['redund'],['redundant']
Safety,"Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2271,detect,detect,2271,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['detect'],['detect']
Safety,"Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1701,redund,redundant,1701,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['redund'],['redundant']
Safety,"Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whethe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2284,detect,detect,2284,doc/sphinxman/source/ecpint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst,1,['detect'],['detect']
Safety,"NITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindTargetOpenMP.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindMathOpenMP.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). add_custom_target(lapack_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected BLAS/LAPACK""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetLAPACK_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt:3611,detect,detected,3611,external/common/lapack/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt,2,['detect'],['detected']
Safety,"Notes**. * Much of |PSIfours| speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmk",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:49928,avoid,avoid,49928,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['avoid'],['avoid']
Safety,"There are a number of different names used to refer to the basis set size.; These may seem redundant, but they have subtly different meanings, as; detailed below. A calculation can use either pure (5D, 7F, 9G, etc.) basis functions or; Cartesian (6D, 10F, 15G, etc.), as dictated by the input file / basis set; specification. Also, the basis can be represented in terms of atomic; orbitals (AO) or symmetry-adapted orbitals (SO). Further complications; come from the fact that a nearly linearly-dependent basis set will have; functions removed from it to prevent redundancies. With all of these; factors in mind, here are the conventions used internally:. * nao |w---w| The number of atomic orbitals in Cartesian representation.; * nso |w---w| The number of atomic orbitals but in the pure representation if the current basis uses pure functions, number of Cartesian AOs otherwise.; * nbf |w---w| The number of basis functions, which is the same as nso.; * nmo |w---w| The number of basis functions, after projecting out redundancies in the basis. When molecular symmetry is utilized, a small array of sizes per irrep is; usually allocated on the stack, and is named by augmenting the name above; with a pi (per-irrep), e.g. nmopi. Note that the number of irreps is; always the singular nirrep, and that the index variable h is always used; in a for-loop traverse of irreps. .. _`faq:orbspaces`:. How to name orbital spaces (e.g., docc); ---------------------------------------. As with basis sets, a number of names are used to refer to refer to the; quantity of electrons, virtuals, and active sub-quantities of a |PSIfour|; calculation. All of these can be defined per irrep as above. Some common; conventions are:. * nelec |w---w| The number of electrons, rarely used due to specialization of alphas and betas or soccs and doccs.; * nalpha |w---w| The number of alpha electrons.; * nbeta |w---w| The number of beta electrons; * docc |w---w| The number of doubly-occupied orbitals; * socc |w---w| ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:13941,redund,redundancies,13941,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['redund'],['redundancies']
Safety,"UREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This mean",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10140,safe,safer,10140,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['safe'],['safer']
Safety,"X_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:4273,detect,detection,4273,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['detect'],['detection']
Safety,"[LAB 10-19-2016]. * Majority of logos detached from main Psi4 repo into https://github.com/psi4/psi4media . [LAB 9-29-2016]. * See doc/sphinxman/source/psi4doc/themes/psi4doc/theme.conf; for Psi4 colors and customary icon linking. [LAB 2-18-2015]. * Text ""SI"" in ""PSI4"" changed to 82% size of ""P"" & ""4""; 54 pt for banner; files. This should avoid the ""Public School 14"" issue, while not looking; so lopsided as genuine small-caps font. [LAB 11-18-2014]. * Text ""Ab Initio"" changed to ""Open-Source"". [LAB 4-20-2012]. * Text ""PSI4"" is Optima Regular at 66 pt in CMYK = [100, 95, 0, 0]. * Text ""Ab Initio Quantum Chemistry"" is Optima Bold at 16 pt; in CMYK = [0, 0, 0, 100] with 100 (AI units) spacing stretch. * The difference between ""vector"" and other files in this directory is in; the trimming of self-interference at the tips of the psi graphic. This; process turns the psi into a raster object, so the color and 3D effects; are no longer editable. * All transparencies are set such that these can be placed over any color; background. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md:341,avoid,avoid,341,media/README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md,1,['avoid'],['avoid']
Safety,"[Neese:2009:98]_. The coulomb term is computed with a; direct density-fitting algorithm. The COSX algorithm uses no I/O, scales; well with system size, and requires minimal memory, making it ideal for; large systems and multi-core CPUs. See :ref:`sec:scfcosx` for more information.; LINK; An implementation of the linear-scaling ""Linear Exchange"" (LinK); algorithm described in [Ochsenfeld:1998:1663]_. The LINK algorithm provides ; many of the benefits of integral-direct SCF algorithms, including no disk I/O, ; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with system size ; while simultaneously providing a formally-exact computation of the ; Exchange term. See :ref:`sec:scflink` for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword ""DF""; be selected in all cases so that the correct implementation can be selected by; |PSIfours| internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms requi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:32983,detect,detect,32983,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['detect'],['detect']
Safety,"\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+============",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:3139,detect,detect,3139,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['detect'],['detect']
Safety,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12591,detect,detecting,12591,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,3,['detect'],"['detectable', 'detecting']"
Safety,"a activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32734,redund,redundant,32734,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['redund'],['redundant']
Safety,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4631,detect,detecting,4631,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,3,['detect'],"['detectable', 'detecting']"
Safety,"a.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5649,detect,detecting,5649,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['detect'],['detecting']
Safety,"ackage(; # Libint2; # 2.8.1; # CONFIG; # COMPONENTS; # ss; # CXX_ho; # impure_sh; # ""eri_${amchar}_d0"" eri_ggg_d0 eri_gg_d0 onebody_g_d0; # eri_dddd_d1 eri_fff_d1 eri_ff_d1 onebody_f_d1; # onebody_f_d2; # OPTIONAL_COMPONENTS; # eri_dddd_d2 eri_fff_d2 eri_ff_d2; # ). if (TARGET Libint2::cxx); get_target_property(_loc Libint2::int2 LOCATION); # defer until upstream provides full-dress targets get_target_property(Libint2_VERSION Libint2::int2 Libint2_VERSION); # defer until upstream provides full-dress targets get_target_property(Libint2_MAX_AM_ERI Libint2::int2 Libint2_MAX_AM_ERI); get_target_property(Libint2_CONFIGURATION Libint2::int2 Libint2_CONFIGURATION); message(STATUS ""${Cyan}Found Libint2 ${Libint2_MAX_AM_ERI}${ColourReset}: ${_loc} (found version ${Libint2_VERSION})""); # TODO revive this message. For now, can't tell if cmake build missing Hessian ints or libtool build w/o component info.; # if (NOT eri_c4_d2_l2 IN_LIST Libint2_CONFIGURATION); # message(WARNING ""Libint2 detected but missing ERI 2nd derivative integrals (components eri_c4_d2_l2 eri_c3_d2_l3 eri_c2_d2_l3). Psi4 will automatically fall back to finite difference.""); # endif(); add_library(libint2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(VERBOSE ""Suitable Libint2 located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(FATAL_ERROR ""Suitable Libint2 could not be externally located as user insists""); endif(). # stopgap to avert a report that static lib not working on Linux; set(_build_shared_libs ""ON""). # reportedly Debug takes forever to build on Mac; set(_cmake_build_type ""Release""). include(ExternalProject). if(NOT ${BUILD_Libint2_GENERATOR}); if (${MAX_AM_ERI} GREATER 5); set(_url_am_src ""7-7-4-12-7-5"") # passes E&G 7z conv and 6z df, H Qz conv and df. covers all internal basis sets for energy and gradient; elseif (${MAX_AM_ERI} LESS_EQUAL 5); set(_url_am_src ""5-4-3-6-5-4"") # passes full. production Mac, temp pr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:5372,detect,detected,5372,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['detect'],['detected']
Safety,"acml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52776,detect,detection,52776,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['detect'],['detection']
Safety,"aded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``m",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51213,detect,detected,51213,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety,"adthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. pcmsolver from conda without thinking, consult. * To remove a conda installation, ``conda remove pcmsolver``. **Source**. * .. image:: https://img.shields.io/github/tag/PCMSolver/pcmsolver.svg?maxAge=2592000; :target: https://github.com/PCMSolver/pcmsolver. * If using |PSIfour| built from source and you want PCMSolver built from; from source also,; enable it as a feature with :makevar:`ENABLE_PCMSolver`,; and let the build system fetch and build it and activate dependent code. .. index:: PCM; Using PCM. .. _`sec:usingPCM`:. Using the polarizable continuum model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PCM description of the solvent into your calculation; can be achieved in two ways in |PSIfour|, using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Canc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:2734,detect,detect,2734,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['detect'],['detect']
Safety,"ally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22538,detect,detected,22538,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety,"ally only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and that's the Python; through which |PSIfour| is running, rather than the Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Ps",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:53807,detect,detected,53807,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety,"als, which are entirely delocalized across; the molecule. Canonical orbitals are commonly used because of mathematical; convenience. Another possible choice is localized orbitals. Any two orbitals; localized to separate regions of a molecule can be treated as non-interacting; to a good approximation. Thus, when working with localized orbitals, the number; of interacting orbital pairs (and triples, quadruples, etc.) scales linearly; with system size. If carefully implemented, programs that exploit this sparsity; can be made to scale linearly (or else with lower order than their canonical; counterparts) at the cost of of modest, controllable errors. This is the; defining insight of DLPNO-MP2 and all related ""local correlation"" methods. The DLPNO-MP2 code is a linear-scaling alternative to the :ref:`DF-MP2 <sec:dfmp2>`; code, and is intended for use with large systems for which DF-MP2 is intractable.; When running DLPNO-MP2 with default settings, approximately 99.9% of the DF-MP2 ; correlation energy is recovered. The general outline of the method is as follows:. (1) Localize the active occupied MOs (with the Foster-Boys method); (2) Construct projected AOs (PAOs) from the virtual MOs; (3) Calculate three-index integrals in the (sparse) LMO/PAO basis; (4) Perform local density fitting to construct (sparse) exchange integrals; (5) Transform local virtuals from PAOs to pair natural orbitals (PNOs), and truncate; (6) Solve the iterative local MP2 equations in the LMO/PNO basis. An example input file is::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c1; }; ; set basis cc-pvdz; set scf_type df; set freeze_core True; set pno_convergence normal; ; energy('dlpno-mp2'). The main difference between this input and a DF-MP2 input is the ``energy('dlpno-mp2')``; call to :py:func:`~psi4.driver.energy`. The only other addition is the |dlpno__pno_convergence|; keyword, which determines the accuracy of the local approximations underlying ; the DLPNO-MP2 method. Note that ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst:2724,recover,recovered,2724,doc/sphinxman/source/dlpnomp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dlpnomp2.rst,1,['recover'],['recovered']
Safety,"are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on, run this in your; top-level \PSIfour\ source directory:. {\tt svn info | grep URL}. \noindent; This will return the SVN directory from which your working copy was; taken, e.g.,. \noindent; {\tt URL: https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; Some words of advice:; \begin{enumerate}; \item Most SVN commands are reasonably safe, . \item Unlike CVS, you shouldn't use {\tt svn update} to see the status; of your working copy. With SVN you should use {\tt svn status} to; see if you've modified any files or directories. If you want a; direct comparison with the repository, you should use {\tt svn status -u}.; \item Read the SVN manual. Seriously.; \begin{center}; \htmladdnormallink{{\tt; http://svnbook.red-bean.com/}}{http://svnbook.red-bean.com/}; \end{center}; \item If you're about to start some significant development or bug-fixes,; first update your working copy to the latest version on your branch.; In addition, if you do development over a long period of time (say weeks to; months) on a specific module or modules, be sure to run a {\tt svn status -u}; occasionally. In can be {\em very} frustrating to try to check in lots; of changes, only to find out that the \PSIfour\ has changed dramatically; since your last update.; \end{enumerate}. \subsection{Checking in a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:7274,safe,safe,7274,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['safe'],['safe']
Safety,"artesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting w",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:7454,avoid,avoid,7454,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['avoid'],['avoid']
Safety,"ated to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and that's the Python; through which |PSIfour| is running, rather than the Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:53285,detect,detected,53285,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety,"ations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:3146,detect,detect,3146,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,1,['detect'],['detect']
Safety,"befp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PS",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2593,detect,detect,2593,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['detect'],['detect']
Safety,"bind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that m",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8886,avoid,avoidable,8886,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['avoid'],['avoidable']
Safety,"bit_DIR}""); endif (). if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG REQUIRED); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using CheMPS2${ColourReset}: ${_loc} (version ${CheMPS2_VERSION})""); else(); message(STATUS ""Disabled CheMPS2 ${CheMPS2_DIR}""); endif (). if(${ENABLE_dkh}); find_package(dkh 1.2 CONFIG REQUIRED); get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using dkh${ColourReset}: ${_loc} (version ${dkh_VERSION})""); else(); message(STATUS ""Disabled dkh ${dkh_DIR}""); endif(). if(${ENABLE_ecpint}); find_package(ecpint 1.0.7 CONFIG REQUIRED); get_property(_loc TARGET ECPINT::ecpint PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using ecpint${ColourReset}: ${_loc} (version ${ecpint_VERSION})""); else(); message(STATUS ""Disabled ecpint ${ecpint_DIR}""); endif(). if(${ENABLE_libefp}); # neither libefp nor pylibefp actually needed c-side; runtime detection would; # do just as well. included for completeness and so pylibefp_PYMOD can be; # hard-loaded into PYTHONPATH. also incl for finding efp frag files below.; find_package(libefp 1.5.0 CONFIG REQUIRED COMPONENTS shallow); get_property(_loc TARGET libefp::efp PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using libefp${ColourReset}: ${_loc} (version ${libefp_VERSION})""). #find_package(pylibefp 0.6.1 CONFIG REQUIRED); #get_property(_loc TARGET pylibefp::core PROPERTY LOCATION); include(FindPythonModule); find_python_module(pylibefp QUIET REQUIRED); #list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using pylibefp${ColourReset}: ${_loc} (version ${pylibefp_VERSION})""); else(); message(STATUS ""Disabled libefp ${libefp_DIR} ${pylibefp_DIR}""); endif(). if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG REQUIRED); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:3787,detect,detection,3787,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['detect'],['detection']
Safety,"c open-shell SAPT0 keywords; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__sapt_mem_safety.rst; .. include:: autodir_options_c/sapt__coupled_induction.rst. .. index:: SAPT; SAPT(DFT). .. _`sec:saptdft`:. SAPT(DFT); ^^^^^^^^^. In general, SAPT(DFT) should provide more accurate interaction energy ; components, and overall interaction energies, than SAPT0. The drawback ; is SAPT(DFT) method is more computationally demanding than SAPT0, ; SAPT(DFT) can still be applied to medium-sized or large systems. The ; SAPT(DFT) module was employed successfully in computations of systems ; with up to 2000 basis functions, and the code should be scalable to ; 3000 basis functions. Like higher-order SAPT, SAPT(DFT) requires ; sufficient memory to hold :math:`2ovN_aux` doubles. SAPT(DFT) requires a few special treatments to obtain accurate; result. The DFT functionals used in SAPT(DFT) need to be asymptotically; corrected with Gradient Regulated Asymptotic Correction scheme (GRAC),; in order to recover the correct long-range asymptotic behavior; (approaching :math:`-1/r` as :math:`r` approaches infinity). The program; requires manual input of GRAC shift parameter for each monomer through; keywords |sapt__sapt_dft_grac_shift_a| and |sapt__sapt_dft_grac_shift_b|,; which should be equal to the difference of the actual ionization; potential and the corresponding Kohn-Sham HOMO energy. The dispersion; term needs to be computed with orbital response for good accuracy,; and it is recommended to enable |sapt__sapt_dft_do_hybrid| (set to; ``True`` by default). The coupled exchange-dispersion energy is usually; estimated by scaling from the uncoupled value either by a fitted fixed; value (suggested initially by [Hesselmann:2014:094107]_ for a local Hartree--Fock (LHF) formulation and then revised; by [Xie:2022:024801]_ for non-LHF) or; by the ratio of; coupled and uncoupled dispersion energy (suggested by [Podeszwa:2006:400]_ ). ; This can be controlled by keyword |s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:23305,recover,recover,23305,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['recover'],['recover']
Safety,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3971,detect,detecting,3971,doc/sphinxman/source/libxc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst,3,['detect'],"['detectable', 'detecting']"
Safety,"conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52189,detect,detected,52189,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety,"configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7394,detect,detecting,7394,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,2,['detect'],['detecting']
Safety,"ction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.; This is an expert-level feature, though.; In general, let |PSIfour| create the Wavefunction, then treat it as read-only.; The back conversion to a Wavefunction object uses the ``.from_file()`` functionality ::. # read wavefunction from file; wfn_from_file = psi4.core.Wavefunction.from_file('my_wfn'). # make a wavefunction from the dict; wfn_from_dict = psi4.core.Wavefunction.from_file(wfn_dict). .. index:: psirc, psi4rc; .. _`sec:psirc`:. |psirc| File; ============. .. caution:: The |psirc| file is only read for Psithon input, not PsiAPI.; It does nothing that can't be done in other more transparent ways.; It should be avoided.; It is very easy to forget about the |psirc| file you once; created, leading to great confusion over why all your jobs are using; the wrong memory or are suddenly not density-fit. Also be aware that; |psirc| contents count as part of your input file (invoked after; e.g. ``from psi4 import *`` and before your Psithon-->Python parsed; input commands), so these settings take priority over command-line; arguments to the ``psi4`` executable.; Please use the |psirc| file sparingly. If using the environment variable :envvar:`PSI_SCRATCH` is inconvenient,; or if some ``psi4_io`` commands must be present in all input files,; the |psirc| resource file can be used (example :source:`samples/example_psi4rc_file`). . All the commands mentioned in section :ref:`sec:Scratch` can be used in this file. To set up the scratch path::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:7496,avoid,avoided,7496,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['avoid'],['avoided']
Safety,"d as its argument.; IV. Basic Data Structures and Storage Hierarchy. Since one may need to store a given quantity in memory in a manner; different from that which is used on disk (e.g., one may need; to pack or unpack indices), the library distinguishes between on-disk; and in-memory storage of four-index quantities. For example, one; might choose to store <ij|ab> integrals on disk using an; (i,j)x(a,b) matrix with all values of i, j, a, and b (pair numbers 0; and 5 from the previous section). However, these can be automatically; antisymmetrized as they are read into memory and the resulting; <ij||ab> stored in a packed form with i>j and a>b. This; section described the basic storage hierarchy that automates this; process. For a general four-index quantity with dummy indices p, q, r, and s,; the storage of the data (whether on disk or in memory) is defined by; the dpdparams4 structure. Although the programmer should; almost always be able to avoid direct interaction with the; dpdparams4 structure, the library isn't perfectly; object-oriented and so access may be necessary in some cases. The; structure contains the following information:. typedef struct {; int nirreps; /* No. of irreps */; int pqnum; /* Pair number for the row indices */; int rsnum; /* Pair number for the column indices */; int *rowtot; /* Row dimension for each submatrix */; int *coltot; /* Column dimension for each submatrix */; int **rowidx; /* Row index lookup array */; int **colidx; /* Column index lookup array */; int ***roworb; /* Row index -> orbital index lookup array */; int ***colorb; /* Column index -> orbital index lookup array */; int *ppi; /* Number of p indices per irrep */; int *qpi; /* Number of q indices per irrep */; int *rpi; /* Number of r indices per irrep */; int *spi; /* Number of s indices per irrep */; int *poff; /* Orbital offset for p */; int *qoff; /* Orbital offset for q */; int *roff; /* Orbital offset for r */; int *soff; /* Orbital offset for s */; int *psym; /* Orbit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:9901,avoid,avoid,9901,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,1,['avoid'],['avoid']
Safety,"d, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PRE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:4454,detect,detection,4454,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['detect'],['detection']
Safety,"e completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also lin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50245,safe,safe,50245,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,3,['safe'],['safe']
Safety,"e:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |PSIfour| will detect this; automatically and run in the appropriate point group. Basis blocks can also be named, *e.g.*, :samp:`basis; {optional_basis_name} \\{...\\}` and the basis defined by it later; applied to another molecule. ::. # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the ``basis {...}`` block may also be used; for defining basis sets, as detailed in :ref:`sec:basisUserDefined`. .. index:: basis set; auxiliary. Calculations requesting density fitting (on by default for many methods); requ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:5804,detect,detect,5804,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['detect'],['detect']
Safety,"eceived a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: SAPT; pair: SAPT; theory. .. _`sec:sapt`:. SAPT: Symmetry-Adapted Perturbation Theory; ==========================================. .. codeauthor:: Edward G. Hohenstein, Rob M. Parrish, J\ |e_acute|\ r\ |o_circumflex|\ me F. Gonthier, and Daniel. G. A. Smith; .. sectionauthor:: Edward G. Hohenstein and J\ |e_acute|\ r\ |o_circumflex|\ me F. Gonthier. *Module:* :ref:`Keywords <apdx:sapt>`, :ref:`PSI Variables <apdx:sapt_psivar>`, :source:`LIBSAPT_SOLVER <psi4/src/psi4/libsapt_solver>`. .. warning:: In rare cases with systems having a high degree of symmetry, ; |Psifour| gives (very obviously) wrong answers for SAPT computations ; when the specification is in Z-matrix format. Use a Cartesian representation ; to avoid this problem. .. caution:: In early versions (notably |Psifour| alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; |PSIfour| SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly :math:`E_{exch}^{(11)}` and :math:`E_{exch}^{(12)}`. .. caution:: January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. .. caution:: February 7, 2020, a missing term in :math:`E^{(30)}_{ind}` was added, causing; possible discrepancies with prior versions of the code on the order of; 0.01 kcal/mol. See https://github.com/psi4/psi4/issues/1677. .. caution:: August 2021, the number of frozen core orbitals used in t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:1799,avoid,avoid,1799,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['avoid'],['avoid']
Safety,"ent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------------+--------------------------------------------------------------------------------------+---------------------------------+------------------------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13167,redund,redundant,13167,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['redund'],['redundant']
Safety,"ess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6687,detect,detected,6687,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['detect'],['detected']
Safety,"essary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAP",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46516,detect,detection,46516,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detection']
Safety,"eurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2724,detect,detect,2724,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['detect'],['detect']
Safety,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6669,detect,detecting,6669,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,3,['detect'],"['detectable', 'detecting']"
Safety,"formation on any of these options, see the relevant section below. .. _`sec:scfsymm`:. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations of Hartree--Fock; theory, including:. Restricted Hartree--Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree--Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the :math:`\hat S^2` operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this ""spin-contamination"" problem.; Restricted Open-Shell Hartree--Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree--Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the |scf__reference| keyword, which defaults to ``RHF``.; The charge and multiplicity may either be specified in the molecule definition::. molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object::. h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in |PSIfour| and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:10393,avoid,avoid,10393,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['avoid'],['avoid']
Safety,"gtrsim`\ CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword |scf__cholesky_tolerance|.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. |PSIfour| also features the capability to use ""composite"" Fock matrix build; algorithms - arbitrary combinations of specialized algorithms that construct; either the Coulomb or the Exchange matrix separately. In general, since; separate Coulomb and Exchange matrix build algorithms exploit properties specific to; their respective matrix, composite algorithms display lower; scaling factors than their combined Fock build counterparts. However, composite algorithms also; introduce redundant ERI computations into the calculation. Therefore, composite Fock build; algorithms tend to perform better for larger systems, but worse for smaller systems. Arbitrary; composite algorithms can be accessed by setting |globals__scf_type| to ``J_alg+K_alg``,; where *J_alg* and *K_alg* are the names of the separate Coulomb; and Exchange construction algorithms to use, respectively. Alternatively, if one is using; DFT with non-hybrid functionals, a composite Coulomb construction algorithm can be; specified solo by setting |globals__scf_type| to ``J_alg``, without the need to set ; an associated ``K_alg``. Specialized algorithms available to construct the Coulomb term within a composite framework ; are as follows:. DFDIRJ; An integral-direct algorithm constructing the Coulomb term based on [Weigend:2002:4285]_; The DFDIRJ algorithm combines the benefits of integral-direct SCF approaches ; with that of density-fitting. Specifically, DFJ utilizes no I/O and displays ; strong performan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:30598,redund,redundant,30598,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['redund'],['redundant']
Safety,"he details. If you; want to overload on pointer types and/or use pointer types with templates,; use ``nullptr`` to signal the null pointer. The correct overload/template; parameter will then be deduced. Using ``nullptr`` also makes the code more; readable, especially if ``auto`` is used consistently throughout. *Reference:* Item 8 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. .. _`faq:automakeshared`:. Prefer ``std::make_shared`` to direct use of ``new``; ----------------------------------------------------. Using ``std::make_shared``:. 1. Reduces code verbosity, especially when coupled with ``auto``:. .. code-block:: cpp. // Type information given 3 TIMES!!!; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // So much typing...; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. // Much better!!!!; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. 2. Ensures exception safety and prevents resource leaks. 3. Improves efficiency:. .. code-block:: cpp. // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso));. // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso);. *Reference:* Item 21 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. .. _`faq:autodecl`:. Prefer ``auto`` to explicit type declarations; ---------------------------------------------. Using ``auto`` reduces and/or avoids:. 1. Verbosity in variable declarations:. .. code-block:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst:2322,safe,safety,2322,doc/sphinxman/source/prog_style_c.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst,1,['safe'],['safety']
Safety,"he; overlap matrix is no longer numerically stable. In this case the; partial Cholesky decomposition can be used to pick a subset of basis; functions that span a sufficiently complete set, see; [Lehtola:2019:241102]_ and [Lehtola:2020:032504]_. This subset can then; be orthonormalized as usual; the rest of the basis functions are; hidden from the calculation. The Cholesky approach allows reaching; accurate energies even in the presence of significant linear; dependencies [Lehtola:2020:134108]_. In |PSIfour|, symmetric orthogonalization is used by default, unless; the smallest overlap eigenvalue falls below the user-supplied double; option |scf__s_tolerance|, which defaults to 1E-7. If the smallest; eigenvalue is below this cutoff, canonical orthogonalization is; forced, and all eigenvectors corresponding to eigenvalues below the; cutoff are eliminated. If the eigendecomposition is detected to be numerically unstable - the; reciprocal condition number of the overlap matrix to be smaller than; the machine epsilon - the partial Cholesky decomposition is undertaken; until |scf__s_cholesky_tolerance|, which defaults to 1E-8. Use of symmetric, canonical, and partial Cholesky orthogonalization; can be forced by setting the |scf__s_orthogonalization| option to; ``SYMMETRIC``, ``CANONICAL``, or ``PARTIALCHOLESKY``,; respectively. Note that in practice, the MOs and OSOs are built separately within; each irrep from the symmetry-adapted combinations of AOs known as; Unique Symmetry Orbitals (USOs). For canonical orthogonalization,; this implies that the number of MOs and OSOs per irrep may be slightly; smaller than the number of USOs per irrep. A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eige",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:15283,detect,detected,15283,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['detect'],['detected']
Safety,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8251,detect,detectable,8251,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['detect'],['detectable']
Safety,"https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threadi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51358,detect,detection,51358,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detection']
Safety,"ibraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-block:: bash. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. E. Build with Intel MKL from conda (install ``mkl-devel`` package from defaults channel). .. code-b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:47038,detect,detected,47038,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detected']
Safety,"if(${CMAKE_INSIST_FIND_PACKAGE_gdma}); message(FATAL_ERROR ""Suitable gdma could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable gdma could not be located, ${Magenta}Building gdma${ColourReset} instead.""). set(_gdma_dir ""share/cmake/gdma""). ExternalProject_Add(gdma_external; DEPENDS pybind11_external; URL https://github.com/psi4/gdma/archive/v2.3.3.tar.gz # Stone's upstream c2e0b548 plus commits from Andy Simmonett for lib, Holger Kruse for I/O, Lori Burns for CMake & Python; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -Dgdma_INSTALL_CMAKEDIR=${_gdma_dir}; -Dgdma_ENABLE_PYTHON=ON; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -Dpybind11_DIR=${pybind11_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}). set(gdma_DIR ${STAGED_INSTALL_PREFIX}/${_gdma_dir} CACHE PATH ""path to internally built gdmaConfig.cmake"" FORCE); endif(); else(); add_library(gdma_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/gdma/CMakeLists.txt:1611,safe,safety,1611,external/upstream/gdma/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/gdma/CMakeLists.txt,1,['safe'],['safety']
Safety,"if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG QUIET). if(${CheMPS2_FOUND}); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); message(STATUS ""${Cyan}Found CheMPS2${ColourReset}: ${_loc} (found version ${CheMPS2_VERSION})""); add_library(chemps2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(VERBOSE ""Suitable CheMPS2 located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected CheMPS2Config.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(FATAL_ERROR ""Suitable CheMPS2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable CheMPS2 could not be located, ${Magenta}Building CheMPS2${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). ExternalProject_Add(chemps2_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/SebWouters/CheMPS2/archive/d8ac508.tar.gz # v1.8.9 + 1; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DCMAKE_RANLIB=${CMAKE_RANLIB}; -DCMAKE_AR=${CMAKE_AR}; -DCMAKE_NM=${CMAKE_NM}; -DENABLE_TESTS=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt:592,detect,detected,592,external/upstream/chemps2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt,1,['detect'],['detected']
Safety,"if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG). if(TARGET Einsums::einsums); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); message(STATUS ""${Cyan}Found Einsums${ColourReset}: ${_loc} (found version ${Einsums_VERSION})""); add_library(einsums_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected TargetHDF5Config.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(VERBOSE ""Suitable Einsums located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(FATAL_ERROR ""Suitable Einsums could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Einsums could not be located, ${Magenta}Building Einsums${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); else(); set(_a_only ON); endif(). set(_einsums_dir ""share/cmake/Einsums""). ExternalProject_Add(einsums_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/Einsums/Einsums/archive/v0.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DEINSUMS_STATIC_BUILD=${_a_only}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -DEINSUMS_INSTALL_CMAKEDIR=${_einsums_dir}; # -DENABLE_XHOST=${ENABLE_XHOST}; -DEINSUMS_ENABLE_TESTING=OFF; -DEINSUMS_USE_HPTT=ON; # -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS};",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt:468,detect,detected,468,external/upstream/einsums/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt,1,['detect'],['detected']
Safety,"if(${ENABLE_ambit}); find_package(ambit 0.6 CONFIG QUIET). if(${ambit_FOUND}); get_property(_loc TARGET ambit::ambit PROPERTY LOCATION); message(STATUS ""${Cyan}Found ambit${ColourReset}: ${_loc} (found version ${ambit_VERSION})""); add_library(ambit_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(VERBOSE ""Suitable ambit located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected ambitConfig.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(FATAL_ERROR ""Suitable ambit could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ambit could not be located, ${Magenta}Building ambit${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). set(_ambit_dir ""share/cmake/ambit""). ExternalProject_Add(ambit_external; DEPENDS lapack_external; hdf5_external; pybind11_external; URL https://github.com/jturney/ambit/archive/733c529.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; #-DENABLE_VECTORIZATION=${ENABLE_VECTORIZATION}; #-DEXTRA_Fortran_FLAGS=${CMAKE_EXTRA_Fortran_FLAGS}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -Dambit_INSTALL_CMAKEDIR=${_ambit_dir}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPytho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt:570,detect,detected,570,external/upstream/ambit/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt,1,['detect'],['detected']
Safety,"if(${ENABLE_dkh}); find_package(dkh 1.2 CONFIG QUIET). if(${dkh_FOUND}); get_property(_loc TARGET dkh::dkh PROPERTY LOCATION); message(STATUS ""${Cyan}Found dkh${ColourReset}: ${_loc} (found version ${dkh_VERSION})""); add_library(dkh_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_dkh}); message(VERBOSE ""Suitable dkh located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_dkh}); message(FATAL_ERROR ""Suitable dkh could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable dkh could not be located, ${Magenta}Building dkh${ColourReset} instead.""). set(_dkh_dir ""share/cmake/dkh""). ExternalProject_Add(dkh_external; DEPENDS lapack_external; URL https://github.com/psi4/dkh/archive/3ba0128.tar.gz # v1.2 + cmake; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -Ddkh_INSTALL_CMAKEDIR=${_dkh_dir}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(dkh_DIR ${STAGED_INSTALL_PREFIX}/${_dkh_dir} CACHE PATH ""path to internally built dkhConfig.cmake"" FORCE); endif(); else(); add_library(dkh_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/dkh/CMakeLists.txt:1254,safe,safety,1254,external/upstream/dkh/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/dkh/CMakeLists.txt,1,['safe'],['safety']
Safety,"if(${ENABLE_erd}); find_package(erd 3.0.6 CONFIG QUIET). if(${erd_FOUND}); get_property(_loc TARGET erd::erd PROPERTY LOCATION); message(STATUS ""${Cyan}Found erd${ColourReset}: ${_loc} (found version ${erd_VERSION})""); add_library(erd_external INTERFACE) # dummy; else(); if(${CMAKE_INSIST_FIND_PACKAGE_erd}); message(FATAL_ERROR ""Suitable erd could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable erd could not be located, ${Magenta}Building erd${ColourReset} instead.""); ExternalProject_Add(erd_external; URL https://github.com/psi4/erd/archive/v3.0.6/tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_Fortran_FLAGS:STRING=${CMAKE_Fortran_FLAGS}; -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(erd_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/erd CACHE PATH ""path to internally built erdConfig.cmake"" FORCE); endif(); else(); add_library(erd_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/erd/CMakeLists.txt:1031,safe,safety,1031,external/upstream/erd/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/erd/CMakeLists.txt,1,['safe'],['safety']
Safety,"if(${ENABLE_libefp}); #find_package(pylibefp 0.6.1 CONFIG QUIET); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_pylibefp})); include(FindPythonModule); find_python_module(pylibefp QUIET); endif(). if(${pylibefp_FOUND}); message(STATUS ""${Cyan}Found pylibefp${ColourReset}: ${PY_pylibefp} (found version ${pylibefp_VERSION})""); add_library(pylibefp_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; #set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected pylibefpConfig.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(VERBOSE ""Suitable pylibefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(FATAL_ERROR ""Suitable pylibefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable pylibefp could not be located, ${Magenta}Building pylibefp${ColourReset} instead.""). ExternalProject_Add(pylibefp_external; DEPENDS lapack_external; libefp_external; pybind11_external; URL https://github.com/loriab/pylibefp/archive/b3da48f.tar.gz # v0.6.2 + 5; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} # unused, but needs working compiler; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_STANDARD=${psi4_CXX_STANDARD}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; #-DLIBC_INTERJECT=${LIBC_INTERJECT}; -DPYTHON_EXECUTABLE=${Python_EXECUTABLE}; -DPYTHON_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPYTHON_LIBRARY=${Python_LIBRARIES}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -Dlibefp_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt:542,detect,detected,542,external/upstream/pylibefp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt,1,['detect'],['detected']
Safety,"if(${ENABLE_mdi}); find_package(mdi 1.2.3 CONFIG QUIET). if(${mdi_FOUND}); get_property(_loc TARGET mdi::mdi PROPERTY LOCATION); message(STATUS ""${Cyan}Found mdi${ColourReset}: ${_loc} (found version ${mdi_VERSION})""); add_library(mdi_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_mdi}); message(VERBOSE ""Suitable mdi located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_mdi}); message(FATAL_ERROR ""Suitable mdi could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable mdi could not be located, ${Magenta}Building mdi${ColourReset} instead.""); ExternalProject_Add(mdi_external; URL https://github.com/MolSSI-MDI/MDI_Library/archive/v1.2.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant for thread safety; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dlanguage=Python; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DTargetOpenMP_FIND_COMPONENTS:STRING=C;CXX). set(mdi_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/mdi CACHE PATH ""path to internally built mdiConfig.cmake"" FORCE); endif(); else(); add_library(mdi_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/mdi/CMakeLists.txt:1152,safe,safety,1152,external/upstream/mdi/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/mdi/CMakeLists.txt,1,['safe'],['safety']
Safety,"if(ENABLE_ambit OR ENABLE_CheMPS2 OR ENABLE_Einsums); project(TargetHDF5); set(PN ${PROJECT_NAME}). # <<< ""Build"" >>>. find_package(HDF5 QUIET REQUIRED). add_library(hdf5 INTERFACE); set_property(TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES ${HDF5_LIBRARIES}); set_property(TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${HDF5_INCLUDE_DIRS}); set (${PN}_VERSION ${HDF5_VERSION}). get_property(_ill TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES); get_property(_iid TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES); set(${PN}_MESSAGE ""Found HDF5: ${_ill} (found version ${${PN}_VERSION})""); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found HDF5${ColourReset}: ${_ill0};... (found version ${${PN}_VERSION})""). install(TARGETS hdf5; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetHDF5_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); write_basic_package_version_file (${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; VERSION ${${PN}_VERSION}; COMPATIBILITY ExactVersion); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). unset(HDF5_FOUND); unset(HDF5_VERSION); unset(HDF5_LIBRARIES); unset(HDF5_INCLUDE_DIRS). add_custom_target(hdf5_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected HDF5""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetHDF5_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); else(); add_library(hdf5_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/hdf5/CMakeLists.txt:1692,detect,detected,1692,external/common/hdf5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/hdf5/CMakeLists.txt,2,['detect'],['detected']
Safety,"ified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:9789,detect,detect,9789,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,2,['detect'],['detect']
Safety,"ilable for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular momentum with :samp:`L={l}` syntax is newly (August 2020); implemented, and this is preferred for ``L=7`` and above to; avoid ambiguity. ::. L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... .. index:: basis set; multiple within molecule; .. _`sec:psithonBasissets`:. Mixing Basis Sets; =================. While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis ""block"" can be used. We use a snippet from the :srcsample:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:4345,avoid,avoid,4345,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['avoid'],['avoid']
Safety,"ild it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) simint. * Upstream Dependencies |w---w| simint |dr| None. **CMake Variables**. * :makevar:`ENABLE_simint` |w---w| CMake variable toggling whether |PSIfour| builds with simint; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing ``include/simint/simint.h``; * :makevar:`simint_DIR` |w---w| CMake variable to specify where pre-built simint can be found. Set to installation directory containing ``share/cmake/simint/simintConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_simint` |w---w| CMake variable to force internal build of simint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_simint` |w---w| CMake variable to force detecting pre-built simint and not falling back on internal build; * :makevar:`SIMINT_VECTOR` |w---w| CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is ``avx``, *not* detected, so ``sse`` may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_simint=ON. B. Build *without* simint. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. .. code-block:: bash. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst:4463,detect,detecting,4463,doc/sphinxman/source/simint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst,4,['detect'],"['detectable', 'detected', 'detecting']"
Safety,"img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Up",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2448,detect,detect,2448,doc/sphinxman/source/libxc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst,1,['detect'],['detect']
Safety,"kage can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3351,detect,detect,3351,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['detect'],['detect']
Safety,"lready been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7898,detect,detect,7898,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['detect'],['detect']
Safety,"ly provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set |scf__max_attempts|;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of |scf__follow_step_scale| is recommended over increasing |scf__max_attempts|. .. note:: Setting the option |scf__stability_analysis| to ``FOLLOW`` is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with |scf__reference| set to ``UHF``. The main algorithm available in |PSIfour| is the Direct Inversion algorithm. It can *only*; work with |globals__scf_type| ``PK``, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available. The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF :math:`\rightarrow` UHF stability; analysis. The capabilities of both algorithms are summarized below:. .. _`table:stab_methods`:. .. table:: Stability analysis methods available in |PSIfour|. +------------------+------------------+----------------------------------------------+---------------------------+---------------------+; | Algorithm | |scf__reference| | Stability checked | |scf__stability_analysis| | |globals__scf_type| |; +==================+==================+==============================================+=========================",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:48419,avoid,avoided,48419,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['avoid'],['avoided']
Safety,"make -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17610,detect,detecting,17610,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detecting']
Safety,"matrix.; For the RHF case, described in [Haser:1989:104]_. .. math:: CON(PQ|RS) <= \sqrt{(PQ|PQ)(RS|RS)} \cdot DCON(PQ, RS). .. math:: DCON(PQ, RS) = max(4D_{PQ}, 4D_{RS}, D_{PR}, D_{PS}, D_{QR}, D_{QS}). When using density-matrix based integral screening, it is useful to build the J and K matrices; incrementally, also described in [Haser:1989:104]_, using the difference in the density matrix between iterations, rather than the; full density matrix. To turn on this option, set |scf__incfock| to ``true``. We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for |globals__scf_type|; ``DIRECT``. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies |scf__df_basis_scf| manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set |scf__df_basis_scf| to an auxiliary; basis set defined for all atoms in the system, or set |scf__df_scf_guess|; to false, which disables this acceleration entirely. .. _`sec:scfddfj`:. Integral-Direct Density-Fitted Coulomb Construction; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The Resolution of the Identity (RI) can be used to decompose the normally 4-center ERI tensor into a combination of 3-center and 2-center components.; By reducing the dimensionality of the ERI tensor, application of the RI (often referred to as density-fitting, or DF) can be used to greatly speed up; SCF calculations. The reduction in ERI tensor rank also makes DF an appealing option for conventional SCF calculations, where the ERIs are stored ; in core or on disk. However, even when using DF, I/O becomes a significant bottleneck for systems of a sufficient size when performing conventional SCF; calculations. In principle, though, DF approaches can be utilized in an integral-direct context, gaining the benefits of DF methods without suffering the; I/O bottlenecks tha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:36466,avoid,avoid,36466,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['avoid'],['avoid']
Safety,"me. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7030,detect,detected,7030,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['detect'],['detected']
Safety,"n over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC instal",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:5150,detect,detect,5150,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['detect'],['detect']
Safety,"name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed. * For Tikhonow regularization, use ``TIKONOW_OMEGA``, not regularizer. * ``SYM`` for symmetry. * ``OCC`` for occupied/occupation (e.g., ``DOCC``, ``LOCK_OCC``, ``OCC_TOLERANCE``). * ``COND`` for condition and ``CONDITIONER`` for conditioner. * ``LOCAL`` (not localize). * Use ``AO`` and ``MO`` for atomic and molecular orbitals. When 'O' for; orbitals is too obsure or would make for too short a keyword, as in; ""bool NO"" for ""Do use natural orbitals"", use ``ORBS`` for orbitals. So; natural orbitals are ``NAT_ORBS`` and Brueckner orbitals are; ``BRUECKNER_ORBS``. * ``LEVEL`` (not ``LVL``, not ``LEV``). * ``EX`` for excitation. * ``VAL`` for valence. * ``GEOM`` (not geo, not geometry). * ``SYM`` (not symm, not symmetry). * ``FILE`` (unless truly multiple FILES). * ``WRITE``/``READ`` for info transfer across jobs. ``SAVE``/``RESTART``; for same in context of restart. * Damping should interface through option (double) ``DAMPING_PERCENTAGE``,; where a value of 0.0 indicates no damping. * Try to avoid ``COMPUTE`` or ``CALC`` in an option name. If it's a; boolean like ""opdm_compute"" for ""Do compute the one-particle density; matrix"", just use ``OPDM``. * Properties should be governed by a ``PROPERTIES`` array for the root of; interest or by a ``PROPERTIES_ALL`` array for all roots in a multi-root; calc. Since no module conforms to this right now, use ``PROPERTY``; alone and ``PROP`` in multi-part option as ``PROP_ROOT``, ``PROP_ALL``,; ``PROP_SYM`` to conform. * Use ``DF`` (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that's what; EMSL uses. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:12890,avoid,avoid,12890,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['avoid'],['avoid']
Safety,"nant-based codes like DETCI do; not necessarily enforce the correct spin :math:`S`. For example, diagonalizing the; Hamiltonian in a space spanned by determinants with :math:`M_s = 0` can yield ; both singlet and triplet solutions, because triplets (:math:`S = 1`) also have an; :math:`M_s = 0` component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with :math:`M_s = 0`,; the program will assume by default that a singlet (:math:`S = 0`) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation ; (this is controlled by the advanced keyword |detci__ms0|, which defaults to ``TRUE``).; Thus, if a user requests multiple roots (|detci__num_roots| = :math:`n`), the program; will typically return singlets and not triplets. However, if enough roots are sought,; higher-multiplicities may enter in. This can be avoided by ensuring that all the guess; vectors have the correct spin multiplicity, by setting |detci__calc_s_squared| to ``TRUE``).; It is also possible to ask DETCI to compute roots of higher multiplicities. The desired value of spin may be; provided by setting |detci__S| = :math:`S`. Typically, it would be a good idea in this context to also set; |detci__calc_s_squared| to ``TRUE`` to ensure the guess roots have the right spin. However, be advised that; seeking these higher roots may cause convergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrar",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:11457,avoid,avoided,11457,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['avoid'],['avoided']
Safety,"obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2511,avoid,avoid,2511,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['avoid'],['avoid']
Safety,"ogonalization; ~~~~~~~~~~~~~~~~~. One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital; basis (known as the AO basis). The Molecular Orbital basis (MO basis); is then built as a particular unitary transformation of the OSO; basis. In |PSIfour|, the determination of the OSO basis is; accomplished via either symmetric, canonical, or partial Cholesky; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square root of; the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and; thereby MOs) as AO functions. However, this may lead to numerical; problems if the overlap matrix has small eigenvalues, which may occur; for large systems or for systems where diffuse basis sets are used. This problem may be avoided by using canonical orthogonalization, in; which an asymmetric inverse square root of the overlap matrix is; formed, with numerical stability enhanced by the elimination of; eigenvectors corresponding to very small eigenvalues. As a few; combinations of AO basis functions may be discarded, the number of; canonical-orthogonalized OSOs and MOs may be slightly smaller than the; number of AOs. When the basis set is too overcomplete, the eigendecomposition of the; overlap matrix is no longer numerically stable. In this case the; partial Cholesky decomposition can be used to pick a subset of basis; functions that span a sufficiently complete set, see; [Lehtola:2019:241102]_ and [Lehtola:2020:032504]_. This subset can then; be orthonormalized as usual; the rest of the basis functions are; hidden from the calculation. The Cholesky approach allows reaching; accurate energies even in the presence of significant linear; dependencies [Lehtola:2020:134108]_. In |PSIfour|, symmetric orthogonalization is used by default, unless; the smallest overlap eigenvalue falls below the user-supplied double; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:13922,avoid,avoided,13922,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['avoid'],['avoided']
Safety,"om/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:2451,predict,predict,2451,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['predict'],['predict']
Safety,"or source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it's not recommended. All the AM generation settings would need to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum int",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17349,detect,detect,17349,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detect']
Safety,"orthogonalized by; Symmetric or Canonical Orthogonalization. The number of OSOs may be; slightly smaller than the total number of USOs, due to removal of linear; dependencies via Canonical Orthogonalization. The OSOs are rarely; encountered, as usually we go straight from USOs to MOs. * ``MO`` (Molecular Orbitals): The combination of OSOs that diagonalizes; the Fock Matrix, so each basis function is a Hartree-Fock (or Kohn-Sham); molecular orbital. The number of OSOs and MOs is always the same. MOs are; orthonormal. * ``LO`` (Localized Orbitals): Localized occupied orbitals, a different; combination of the occupied molecular orbitals which enhances spatial; locality. LOs do not diagonalize the occ-occ block of the Fock Matrix, but; remain orthonormal to each other and the virtual space. .. _`faq:orbdims`:. How to name orbital dimensions; ------------------------------. There are a number of different names used to refer to the basis set size.; These may seem redundant, but they have subtly different meanings, as; detailed below. A calculation can use either pure (5D, 7F, 9G, etc.) basis functions or; Cartesian (6D, 10F, 15G, etc.), as dictated by the input file / basis set; specification. Also, the basis can be represented in terms of atomic; orbitals (AO) or symmetry-adapted orbitals (SO). Further complications; come from the fact that a nearly linearly-dependent basis set will have; functions removed from it to prevent redundancies. With all of these; factors in mind, here are the conventions used internally:. * nao |w---w| The number of atomic orbitals in Cartesian representation.; * nso |w---w| The number of atomic orbitals but in the pure representation if the current basis uses pure functions, number of Cartesian AOs otherwise.; * nbf |w---w| The number of basis functions, which is the same as nso.; * nmo |w---w| The number of basis functions, after projecting out redundancies in the basis. When molecular symmetry is utilized, a small array of sizes per irrep ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:13011,redund,redundant,13011,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['redund'],['redundant']
Safety,"ot, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:addAddOns`:. Adding Add-Ons; ==============. .. _`faq:addonname`:. How to use an Add-On's name in directory structure, build, and distribution; ---------------------------------------------------------------------------. * Select a name. May be mixed case with numerals and underscores; (*e.g.*, CheMPS2, libefp, PCMSolver, v2rdm_casscf). Shouldn't start with a; numeral. Needn't start with ""lib"", even if a library. * GitHub repository name should be :samp:`{AddOn_name}` or; :samp:`{AddOn_name}.lower()` (hereafter, :samp:`{addon_name}`. For example: CheMPS2, libefp, pcmsolver,; v2rdm_casscf. * CMake project name should be :samp:`{AddOn_name}`. For example:; ``project(libefp)``, ``project(CheMPS2)``, ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda packa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:1876,detect,detect,1876,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['detect'],['detect']
Safety,"own to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51870,detect,detection,51870,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detection']
Safety,"pan a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the density/potential; evaluation) can be varied by setting the |scf__dft_basis_tolerance|, which; defaul",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:25145,avoid,avoid,25145,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['avoid'],['avoid']
Safety,"pies, the new code instead uses the integrals; directly from the underlying integral engine's memory, which may change with; each call to compute integrals. The integral engine provides a; ``std::vector<const double*>`` containing the pointers to the start of each; ""chunk"" of integrals. For first derivatives there are 12 such ""chunks"", which; are ordered Px,Py,Pz,Qx,Qy,Qz,Rx,Ry,Rz,Sx,Sy,Sz, where the Px refers to the x; derivative with respect to the basis functions in shell P. Note that all; integral derivatives are provided by the new integral code, unlike the previous; version where only 9 of 12 were provided and the user was responsible for using; translation invariance relationships to fill in the rest. The addresses for; each chunk are updated in the vector after each call to compute integrals, so; the user should keep a const reference to that object, and query that for the; address of interest. Density Screening; ................. The old code looked only at the integral to determine whether terms can be; avoided *a priori*. However, if the integral is to be contracted with a; density or a density-like quantity, the screening can be performed on the; product, which yields more sparsity. To enable this, simply call the integral; object's ``update_density`` member, passing it a SharedMatrix holding the; current density (remember that it changes during each iteration of the SCF) and; the product will be considered during screening. If only coulomb-like terms; are to be computed, the ``needs_exchange`` argument to the integral object; constructor should be set to false, otherwise it should be true to correcly; account for products of the density and integrals that contribute to; exchange-like terms. Shell blocking; .............. Each underlying integral engine knows whether it will use blocks, and will set up; the metadata automatically. Instead of looping over individual shells, the; user should loop over blocks supplied by the integral object; these blocks wi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:7428,avoid,avoided,7428,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['avoid'],['avoided']
Safety,"pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; :srcsample:`pcmsolver/ccsd-pte`,; :srcsample:`pcmsolver/scf`,; :srcsample:`pcmsolver/opt-fd`,; :srcsample:`pcmsolver/dft`, and; :srcsample:`pcmsolver/dipole`. Keywords for PCMSolver; ~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pcm.rst; .. include:: autodir_options_c/pcm__pcm_scf_type.rst; .. include:: autodir_options_c/pcm__pcm_cc_type.rst. .. _`cmake:pcmsolver`:. How to configure PCMSolver for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) PCMSolver. * Upstream Dependencies |w---w| PCMSolver |dr| Fortran, zlib. **CMake Variables**. * :makevar:`ENABLE_PCMSolver` |w---w| CMake variable toggling whether Psi4 builds with PCMSolver; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing ``include/PCMSolver/pcmsolver.h``; * :makevar:`PCMSolver_DIR` |w---w| CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing ``share/cmake/PCMSolver/PCMSolverConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_PCMSolver` |w---w| CMake variable to force internal build of PCMSolver instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_PCMSolver` |w---w| CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_PCMSolver=ON. B. Build *without* PCMSolver. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:7672,detect,detecting,7672,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,2,['detect'],['detecting']
Safety,"psi4rc`` for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is ``$$(gg|gg)$$``. .. warning:: simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) simint. * Upstream Dependencies |w---w| simint |dr| None. **CMake Variables**. * :m",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst:2927,detect,detect,2927,doc/sphinxman/source/simint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst,1,['detect'],['detect']
Safety,"r number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:9904,avoid,avoid,9904,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['avoid'],['avoid']
Safety,"r the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50038,risk,risk,50038,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['risk'],['risk']
Safety,"ral forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_for",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19700,avoid,avoid,19700,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['avoid'],['avoid']
Safety,"rary that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:4177,detect,detected,4177,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['detect'],['detected']
Safety,"rectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappear.). \item \shellvar{\$PSI4}\file{/src/lib} -- Source code for the; libraries, including \library{libpsio}, \library{libipv1},; \library{libchkpt}, etc. The include files from the library; source are used directly during the compilation of PSI to ; avoid problems associated with incomplete installations. Some; include files are architecture-dependent and go in an include; subdirectory of the compilation (object) directory. \item \shellvar{\$PSI4}\file{/src/bin} -- Source code for the; executable modules.; \end{itemize}. After compilation and installation, the \file{\$prefix} directory; contains the executable codes and other necessary files. {\bf NB:}; The files in this area should never be directly modified; rather, the; working copy should be modified and the \PSIfour\ \file{Makefile}; hierarchy should handle installation of any changes. The structure of; the installation area is:. \begin{itemize}; \item \file{\$prefix/bin} -- The main executable directory. This; directory must be in your path in order for the driver program,; \module{PSI4}, to find the modules. \item \file{\$prefix/lib} -- The \PSIfour\ code libraries. (NB: The; description of \PSIfour\ \file{Makefiles} later in this manual will; explain ho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:17868,avoid,avoid,17868,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['avoid'],['avoid']
Safety,"rho_\beta(\mathbf{r})`.; BASIS_FUNCTIONS; This task is useful to produce cube files of the atomic orbital basis; functions :math:`\chi_\mu(\mathbf{r})`.; ESP; Calculates the total (nuclear + electronic) electrostatic potential; :math:`V(\mathbf{r})`.; DUAL_DESCRIPTOR; Calculates the dual descriptor from frontier orbitals:; :math:`f^2(\mathbf{r})=\rho_{\mathrm{LUMO}}(\mathbf{r})-\rho_{\mathrm{HOMO}}(\mathbf{r})`.; The dual descriptor is a good measure of nucleophilicity and electrophilicity,; containing information essentially equivalent to both Fukui functions combined. ; More details on the dual descriptor itself can be found in [Morell:2005:205]_, ; while the current implementation is described in [Martinez-Araya:2015:451]_. ; This feature is currently only supported for closed shell systems. .. note:: The ``ESP`` task requires the user to specify a density-fitting basis; via the |scf__df_basis_scf| keyword. .. warning:: It is important to specify the |globals__cubeprop_orbitals| option when; dealing with large molecules to avoid running out of disk space.; For example, using the default grid spacing of; 0.2 |Angstrom|, the size of a single cube file for a molecule like water; is of the order of 1.4 MB. For a molecule with 200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords; --------. .. include:: autodir_options_c/globals__cubeprop_tasks.rst; .. include:: autodir_options_c/globals__cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:6213,avoid,avoid,6213,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['avoid'],['avoid']
Safety,"ribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, pr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21600,avoid,avoid,21600,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['avoid'],['avoid']
Safety,"rom other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. Ho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:1211,avoid,avoid,1211,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['avoid'],['avoid']
Safety,"s printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31876,redund,redundant,31876,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['redund'],['redundant']
Safety,"s that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19443,avoid,avoid,19443,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['avoid'],['avoid']
Safety,"s"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_I",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:3884,detect,detection,3884,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,2,['detect'],"['detect', 'detection']"
Safety,"scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise writt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40794,avoid,avoid,40794,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['avoid'],['avoid']
Safety,"seful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highlighting of git's conflict markers. .. code-block:: bash. >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. .. _`faq:libmwcondapy`:. How to handle ""runtime library may be hidden"" when building with Anaconda Python; --------------------------------------------------------------------------------. When building against Ana/Miniconda python (e.g., ``cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python``), the warning below often; appears. It is harmless, proceed. .. code-block:: bash. CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. .. _`faq:psi4scratch`:. How to set up the scratch directory; -----------------------------------. The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the :envvar:`PSI_SCRATCH` environment variable:. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:57877,safe,safe,57877,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['safe'],['safe']
Safety,"sion ${pylibefp_VERSION})""); else(); message(STATUS ""Disabled libefp ${libefp_DIR} ${pylibefp_DIR}""); endif(). if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG REQUIRED); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using Einsums${ColourReset}: ${_loc} (version ${Einsums_VERSION})""); else(); message(STATUS ""Disabled Einsums ${Einsums_DIR}""); endif (). if(${ENABLE_erd}); find_package(erd 3.0.6 CONFIG REQUIRED); get_property(_loc TARGET erd::erd PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using erd${ColourReset}: ${_loc} (version ${erd_VERSION})""); else(); message(STATUS ""Disabled erd ${erd_DIR}""); endif(). find_package(gau2grid 2.0 CONFIG REQUIRED); get_property(_loc TARGET gau2grid::gg PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using gau2grid${ColourReset}: ${_loc} (version ${gau2grid_VERSION})""). if(${ENABLE_gdma}); # neither gdma nor pygdma actually needed c-side; runtime detection would; # do just as well. included for completeness and so gdma_PYMOD can be; # hard-loaded into PYTHONPATH.; find_package(gdma 2.3.3 CONFIG REQUIRED COMPONENTS Python); get_property(_loc TARGET gdma::pygdma PROPERTY LOCATION); message(STATUS ""${Cyan}Found gdma${ColourReset}: ${_loc} (version ${gdma_VERSION})""); else(); message(STATUS ""Disabled gdma ${gdma_DIR}""); endif(). if(${ENABLE_Libint1t}); find_package(Libint 1.2.0 CONFIG REQUIRED COMPONENTS ${MAX_AM_ERI}); get_property(_loc TARGET Libint::int PROPERTY LOCATION); list(APPEND _addons ${_loc}); message(STATUS ""${Cyan}Using Libint ${Libint_MAX_AM_ERI}${ColourReset}: ${_loc} (version ${Libint_VERSION})""); endif(). find_package(; Libint2; 2.7.2; CONFIG; REQUIRED; COMPONENTS; sss; CXX_ho; impure_sh; ""eri_c4_d0_l${MAX_AM_ERI}"" eri_c3_d0_l4 eri_c2_d0_l4 onebody_d0_l4; eri_c4_d1_l2 eri_c3_d1_l3 eri_c2_d1_l3 onebody_d1_l3; onebody_d2_l3; OPTIONAL_COMPONENTS; eri_c4_d2_l2 eri_c3_d2_l3 eri_c2_d2_l3; ); get_pr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:5493,detect,detection,5493,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['detect'],['detection']
Safety,"subspace data; provided to dpd_init(). For example, given only occupied and; virtual orbital subspaces (as would be the case for RHF and ROHF; reference wave functions), libdpd will automatically; construct the following twelve possible index pairings:. Pair #Left; SubspaceRight SubspacePermutational; SymmetryIndex Packing; 0occupiedoccupiedNoneAll p,q; 1occupiedoccupiedSymmetricp>q; 2occupiedoccupiedAntisymmetricp>q; 3occupiedoccupiedSymmetricp>=q; 4occupiedoccupiedAntisymmetricp>=q; 5virtualvirtualNoneAll p,q; 6virtualvirtualSymmetricp>q; 7virtualvirtualAntisymmetricp>q; 8virtualvirtualSymmetricp>=q; 9virtualvirtualAntisymmetricp>=q; 10occupiedvirtualNoneAll p,q; 11virtualoccupiedNoneAll p,q. Given the two-electron integral group <ij||ab> for example, we; may wish to store these integrals in a matrix with the compound row; index (i,j) and compound column index (a,b), as described earlier.; Furthermore, since these integrals have perumtational antiysmmetry; between indices i and j and between indices a and b, we may wish to; store the integrals in a manner which avoids redundancy. To do this,; we must choose from the above table the appropriate pair number for; the row and column compound indices which reflects the desired; permutational antisymmetry and index packing characteristics. For the; current example, we would choose pair #2 for the row index and pair #7; for the column index (so that the i=j and a=b terms, which are zero,; would be omitted from storage). On the other hand, if we wished to; store the ""normal"" Dirac notation integrals <ia|jk>, which; contain three occupied indices and do not have permutational symmetry,; we would choose pair #10 for the row index and pair #0 for the column; index. For UHF references, for example, where one must use four; orbital subspaces (alpha occupied, alpha virtual, beta occupied, and; bet virtual) libdpd will automatically construct the; following 32 possible index pairings:. Pair #Left; SubspaceRight SubspacePermutatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:6515,avoid,avoids,6515,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,2,"['avoid', 'redund']","['avoids', 'redundancy']"
Safety,"t and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15223,safe,safe,15223,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['safe'],['safe']
Safety,"t to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:5001,safe,safe,5001,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['safe'],['safe']
Safety,"tion, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; --------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51418,detect,detection,51418,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['detect'],['detection']
Safety,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3917,detect,detecting,3917,doc/sphinxman/source/gau2grid.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst,3,['detect'],"['detectable', 'detecting']"
Safety,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4490,detect,detecting,4490,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,3,['detect'],"['detected', 'detecting']"
Safety,"w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:5185,detect,detectable,5185,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['detect'],['detectable']
Safety,"x Force** and one of **Max Energy** or **Max Disp** are fulfilled.; .. [#ff] Normal convergence achieved when all four criteria (**Max Force**, **RMS Force**,; **Max Disp**, and **RMS Disp**) are fulfilled. To help with flat ; potential surfaces, alternate convergence achieved when 100\ :math:`\times`\ *rms force* is less ; than **RMS Force** criterion.; .. [#fg] Compensates for difficulties in converging geometry optmizations of supermolecular complexes ; tightly, where large *rms disp* and *max disp* may result from flat potential surfaces even when; *max force* and/or *rms force* are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by |optking__g_convergence|.; Note that this revokes the special convergence arrangements detailed in notes [#fe]_ and [#ff]_ ; and instead requires all active criteria to be fulfilled to ; achieve convergence. To avoid this revokation, turn on keyword |optking__flexible_g_convergence|. .. index::; pair: geometry optimization; output. Interface to GeomeTRIC; ^^^^^^^^^^^^^^^^^^^^^^. The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108]_ may be used in place of; Psi4's native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions. Use of the GeomeTRIC optimizer is specified with the ``engine`` argument to; :py:func:`~psi4.driver.optimize`. The optimization will respect the keywords |optking__g_convergence|; and |optking__geom_maxiter|. Any other GeomeTRIC-specific options (including constraints); may be specified with the ``optimizer_keywords`` argument to :py:func:`~psi4.driver.optimize`.; Constraints may be placed on cartesian coordinates, bonds, angles, and dihedrals, and they can be; used to either freeze a coordinate or set it to a specific value. See the `GeomeTRIC github; <https://gith",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:26080,avoid,avoid,26080,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['avoid'],['avoid']
Safety,"xists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ###############",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:4690,detect,detection,4690,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,3,['detect'],['detection']
Safety,"y roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Depe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2755,detect,detect,2755,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['detect'],['detect']
Safety,"| |; +----------------+-------------+----------------+----------------+----------------+-------------+----------------+----------------+----------------+; | :math:`C_{2h}` | :math:`A_g` | :math:`B_g` | :math:`A_u` | :math:`B_u` | | | | |; +----------------+-------------+----------------+----------------+----------------+-------------+----------------+----------------+----------------+; | :math:`D_{2h}` | :math:`A_g` | :math:`B_{1g}` | :math:`B_{2g}` | :math:`B_{3g}` | :math:`A_u` | :math:`B_{1u}` | :math:`B_{2u}` | :math:`B_{3u}` |; +----------------+-------------+----------------+----------------+----------------+-------------+----------------+----------------+----------------+. For example, water (:math:`C_{2v}` symmetry) has three doubly occupied :math:`A_1`; orbitals, as well as one each of :math:`B_1` and :math:`B_2` symmetry; the; corresponding |globals__docc| array is therefore::. DOCC = [3, 0, 1, 1]. Although |PSIfour| will detect the symmetry automatically, and use the largest; possible Abelian subgroup, the user might want to run in a lower point group.; To do this the molecule keyword :samp:`symmetry {symbol}` can be used ; (see :ref:`sec:moleculeKeywords`). In most cases the standard; Sch\ |o_dots|\ nflies symbol (one of ``c1``, ``c2``, ``ci``, ``cs``, ``d2``,; ``c2h``, ``c2v``, ``d2h`` will suffice for :samp:`{symbol}`.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with :math:`D_{2h}` symmetry in :math:`C_{2v}`, the; :math:`C_2` axis can be chosen as either the :math:`x`, the :math:`y`, or the :math:`z`; these can; be specified by requesting the symmetry as ``c2vx``, ``c2vy``, or ``c2vz``, respectively.; Likewise the ``c2x``, ``c2y``, ``c2z``, ``c2hx``, ``c2hy``, and ``c2hz``; labels are valid. For :math:`C_s` symmetry the labels ``csx``, ``csy``, and; ``csz`` request the :math:`yz`, :math:`xz`, and :math:`xy` ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:15749,detect,detect,15749,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['detect'],['detect']
Safety,"|PSIfour| can be accomplished at a variety of levels,; ranging from global environment variables to direct control of thread count in; the input file, to even directives specific to each model. This hierarchy is; explained below. Note that each deeper level trumps all previous levels. .. rubric:: (1) OpenMP/MKL Environment Variables. .. deprecated:: 1.1; Environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; do not affect threading in |PSIfour|. .. The easiest/least visible way to thread |PSIfour| is to set the standard OpenMP/MKL; .. environment variables :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:11385,detect,detects,11385,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['detect'],['detects']
Security," ; LIBPSIO --- The PSI I/O Library. Programmer's Manual for LIBPSIO: The PSI I/O Library. T. Daniel Crawford ; 22 October 1998 ; Updated: 27 July 2006; crawdad@vt.edu. I. The structure and philosophy of the; library. Many I/O libraries for quantum chemistry packages (including those in; the old PSI2 code) expect the programmer to know the byte-by-byte; layout of the given binary file. Accordingly, the primary read; and write functions in such libraries require as an argument a global; bytewise file pointer to the beginning of the desired data. As a; result, when this pointer is defined to be an unsigned four-byte; integer (common on 32-bit computers), the total size of the direct; access file is limited to 4 GB (232 bytes). Furthermore,; in order to avoid code duplication, this I/O design requires that one; construct specialized libraries of functions (e.g., libfile30; in PSI2) for interaction with particularly complicated files such as a; checkpoint file. Even slight modification of the file layout can; require substantial changes to such libraries. This PSI3 I/O library, libpsio, is intended to overcome these; problems in two ways:. Each file makes use of its own table of contents (TOC); which contains file-global starting and ending addresses for each; data item.; Addresses to data items in the TOC are provided to the standard; read and write functions by the programmer as entry-relative; page/offset pairs, which are translated to file-global; addresses internally. Data items in the TOC are identified by keyword strings (e.g.,; ""Nuclear Repulsion Energy""). If the programmer wishes to; read or write an entire TOC entry, he/she is required to provide only; the TOC keyword and the entry size (in bytes) to obtain the data; the; entry's global starting address is supplied by the TOC. Furthermore,; it is possible to read pieces of TOC entries (say a single buffer of a; large list of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a startin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html:690,access,access,690,doc/sphinxman/source/attic/libpsio.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html,1,['access'],['access']
Security," = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_mat.to_array(). # Or, use the .nph irreped accessor; >>> irreped_mat.nph[0][:] = 1. Where ``.nph`` is the irreped accessor form. If ``.np`` or ``np.array`` are; called on irreped Matrices or Vectors an error will be thrown; however, the; irreped form is always valid for non-irreped matrices. Array to Matrix; ~~~~~~~~~~~~~~~; A general function that converts |PSIfo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:2930,access,access,2930,doc/sphinxman/source/numpy.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst,1,['access'],['access']
Security," [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](ht",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:1882,validat,validated,1882,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,1,['validat'],['validated']
Security," and rotatory strengths [Pedersen1995-du]_, [Lestrange2015-xn]_.; For example, |PSIfour| will compute compute oscillator strengths from; the MO basis electric dipole moment integrals, :math:`\mathbf{\mu}_{u}`, and the right; excitation vectors, :math:`|\mathbf{X}_{n}+\mathbf{Y}_{n}\rangle`:. .. math::; f = \frac{2}{3} \omega_{n} \sum_{u=x,y,z}\sum_{ia}|(\mathbf{X}_{n}+\mathbf{Y}_{n})_{ia}\mu_{ai, u}|^{2}. Psithon keywords; ~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/scf__tdscf_states.rst; .. include:: autodir_options_c/scf__tdscf_triplets.rst; .. include:: autodir_options_c/scf__tdscf_tda.rst; .. include:: autodir_options_c/scf__tdscf_r_convergence.rst; .. include:: autodir_options_c/scf__tdscf_maxiter.rst; .. include:: autodir_options_c/scf__tdscf_guess.rst; .. include:: autodir_options_c/scf__tdscf_print.rst; .. include:: autodir_options_c/scf__tdscf_coeff_cutoff.rst; .. include:: autodir_options_c/scf__tdscf_tdm_print.rst. PsiAPI usage; ~~~~~~~~~~~~. The TDSCF functionality is also accessible from PsiAPI. The example calculation shown above can be carried out as follows:. .. code-block:: python. import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations. psi4.core.set_output_file(""h2o2.out""). h2o2 = psi4.geometry(""""""0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; symmetry c1; """""", name=""H2O2""). psi4.set_options({; 'save_jk': True,; }). e, wfn = psi4.energy(""HF/cc-pvdz"", return_wfn=True, molecule=h2o2); res = tdscf_excitations(wfn, states=10). Plotting one-photon absorption and electronic circular dichroism spectra; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Excitation energies and corresponding spectroscopic observables can be used to; produce spectra for one-photon absorption (OPA) and electronic circular; dichroism (ECD) with phenomenological line broadening. |PSIfour| provides the ``spectrum`` function for this pu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst:10339,access,accessible,10339,doc/sphinxman/source/tdscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst,1,['access'],['accessible']
Security," b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22657,hash,hash,22657,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['hash'],['hash']
Security," describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Rec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:4057,hash,hash,4057,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['hash'],['hash']
Security," e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function. ::. # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). - If specific interoperabilities are known, code them in. For example, if xx shouldn't call db, add the last two lines above to the xx function. If db shouldn't call xx, add the following two lines below to the db function. ::. if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). - Create a multipart test case that runs some intercalls between your function and others (akin to :srcsample:`pywrap_all)`. In trials, permute the order of calls a few times to expose any calls that don't clean up after themselves and need further attention. - When all is validated, add your findings to the great :ref:`table:intercalls` table in the documentation. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:7297,expose,expose,7297,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,2,"['expose', 'validat']","['expose', 'validated']"
Security," psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_mat.to_array(). # Or, use the .nph irreped accessor; >>> irreped_mat.nph[0][:] = 1. Where ``.nph`` is the irreped accessor form. If ``.np`` or ``np.array`` are; called on irreped Matrices or Vectors an error will be thrown; however, the; irreped form is always valid for non-irreped matrices. Array to Matrix; ~~~~~~~~~~~~~~~; A general function that converts |PSIfour| data objects to NumPy arrays. .. autofunction:: psi4.driver.p4util.numpy_helper.array_to_matrix. Matrix to Array; ~~~~~~~~~~~~~~~; A general function that converts NumPy arrays to |PSIfour| data objects. .. autofunction:: psi4.driver.p4util.numpy_helper._to_array. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:3611,access,accessor,3611,doc/sphinxman/source/numpy.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst,2,['access'],['accessor']
Security,"""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with undersc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9637,validat,validation,9637,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['validat'],['validation']
Security,"$basis_set; energy('scf'). The declaration of ``basis_sets`` is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that ``basis_set`` is a; Python variable, not a string, by prefixing it with a dollar sign. . The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water::. molecule h2o{; O; H 1 R; H 1 R 2 A; }; ; Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2); ; set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of ``Rvals`` and ``Avals`` are both completely standard Python syntax.; Having named our molecule ``h2o`` we can then set the values of ``R`` and ``A`` within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the ``set`` keyword. Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See :srcsample:`scf4` for analogous Z-matrix; and Cartiesian scans. .. _`sec:resultsTables`:. Tables of Results; =================. The Psithon function ``psi4.driver.p4util.Table`` has been removed,; as the Python ecosystem provides many more flexible alternatives. An; example tabulating a potential energy surface scan for water with Pandas; is shown below::. molecule h2o {; O; H 1 R; H 1 R 2 A; }; ; Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2); ; rows = []; table = []; ; set basis cc-pvdz; ; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:13560,access,access,13560,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['access'],['access']
Security,"%; % PSI Programmer's Manual; %; % SVN Revision Control Section; % (formerly CVS); %; % TDC, February, 1996; % Modified by TDC, December 2002; % Updated from CVS to SVN, April 2007; %. The subversion control system (SVN) (\htmladdnormallink{{\tt; subversion.tigris.org}}{http://subversion.tigris.org/}) provides a; convenient means by which programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policie",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:854,access,access,854,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['access'],['access']
Security,". * Making a release or prerelease. * update all three fields of metadata.py (see below ex); * commit; * on master, make annotated tag starting with v. note the hash.; * run enough of build to make sure tag formatted properly and ""Defining {} version"" sane. # MUST update metadata.py on same commit at which make tag. git tag -a v1.0 d2243ef; git push origin v1.0; git push [remote] [tagname]. do NOT use the GitHub tagging interface - it creates lightweight tags. :source:`psi4/metadata.py`. __version__ = '1.0'; __version_long = '1.0+d2243ef'; __version_upcoming_annotated_v_tag = '1.1a1'. # Example current and upcoming tag pairs; # * '1.0', '1.1a1'; # * '1.0.4', '1.0.5' on maintenance branch 1.0.x; # * '1.1a1', '1.1b1'; # * '1.1rc2', '1.1'; # * '1.1', '1.2'. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst:161,hash,hash,161,doc/sphinxman/source/prog_version.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst,1,['hash'],['hash']
Security,". To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases where tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:4407,access,access,4407,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['access'],['access']
Security,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:customizing`:. =======================================; Customization: Adding Simple Extensions; =======================================. |PSIfour| has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. * :ref:`sec:basisUserDefined`. .. toctree::; :maxdepth: 2. quickaddalias; quickadddatabase. * https://github.com/dgasmith/psi4numpy. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/customizing.rst:1254,access,accessible,1254,doc/sphinxman/source/customizing.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/customizing.rst,1,['access'],['accessible']
Security,".. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1746,access,accessible,1746,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['access'],['accessible']
Security,".frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2368,access,accessed,2368,doc/sphinxman/source/freq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst,1,['access'],['accessed']
Security,"/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2434,access,access,2434,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['access'],['access']
Security,"/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:3446,hash,hash,3446,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['hash'],['hash']
Security,"000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.08339310458383; # N 0.00000000000000 0.00000000000000 -5.33865984413460. sapt = {'mol1': -0.0105313323529,; 'mol2': -0.00839486625709}. nre = {'mol1': 38.8138764635,; 'mol2': 72.3451968428}. set basis jun-cc-pvdz. for mol in ['mol1', 'mol2']:; filen = mol + '.xyz'; p4mol = Molecule.init_with_xyz(filen) # create molecule from file above; fragmentedmol = auto_fragments(molecule=p4mol) # fragment with BFS algorithm; activate(fragmentedmol) # activate returned molecule (for sapt). e = energy('sapt0') # run SAPT that requires 2 fragments; compare_values(sapt[mol], e, 5, '%s sapt ok' % mol); compare_values(nre[mol], p4mol.nuclear_repulsion_energy(), 4, '%s ok' % mol); clean() # clean scratch between loop calcs. * The essential element, mass and coordinate information of the molecule is accessible ::. molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:24674,access,accessible,24674,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['access'],['accessible']
Security,"2 3 . 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get inter",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:26138,access,accessible,26138,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['access'],['accessible']
Security,"::. psi4_io.set_default_path('/scratch/user'). To set up the scratch path from a variable ``$MYSCRATCH``::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). To set up a specific path for the internal coordinate file and instruct |PSIfour| not to delete it::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). The Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. As a consequence, the commands in the input files supersede; any instructions in the |psirc| file. During; execution, the |psirc| defaults will be loaded in first, but then the commands; in the input file will be executed. . The |psirc| file can also be used to define constants that are accessible; in input files or to place any Python statements that should be executed; with every |PSIfour| instance. .. index:: parallel operation, threading; .. _`sec:threading`:. Threading; =========. Most new modules in |PSIfour| are designed to run efficiently on SMP architectures; via application of several thread models. The de facto standard for |PSIfour|; involves using threaded BLAS/LAPACK (particularly Intel's excellent MKL package); for most tensor-like operations, OpenMP for more general operations, and C++; ``std::thread`` for some special-case operations. Note: Using OpenMP alone is a really; bad idea. The developers make little to no effort to explicitly parallelize; operations which are already easily threaded by MKL or other threaded BLAS. Less; than 20% of the threaded code in |PSIfour| uses OpenMP, the rest is handled by; parallel DGEMM and other library routines. From this point forward, it is; assumed that you have compiled |PSIfour| with OpenMP and MKL (Note that it is; possible to use g++",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:9301,access,accessible,9301,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['access'],['accessible']
Security,":`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18599,firewall,firewall,18599,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['firewall'],['firewall']
Security,"; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information. After running, two matrices of results can be accessed::. dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; |gdma__gdma_multipole_units|, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and the :math:`Q^l_m` components of the multipoles are ordered as; :math:`Q^0_0, Q^1_0, Q^1_{1c}, Q^1_{1s}, Q^2_0, Q^2_{1c}, Q^2_{1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:4709,access,accessed,4709,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['access'],['accessed']
Security,">>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3 . 1 2 3 . 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with `",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:26016,access,accessed,26016,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['access'],['accessed']
Security,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:1955,access,accessible,1955,doc/sphinxman/source/capabilities.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst,1,['access'],['accessible']
Security,"General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1700,access,accessed,1700,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['access'],['accessed']
Security,"OUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: method alias; adding new. .. _`sec:methodAlias`:. Defining a Method Alias; =======================. .. note:: No recompile of the |PSIfour| program is necessary for changes made to; files in ``$PSIDATADIR`` aka :source:`psi4/share/psi4`, including those described below. .. caution:: As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in |PSIfour| are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; :source:`psi4/driver/aliases.py` file is intended for editing by the user for; this purpose. As an example, the MP2.5 method; (which admittedly is already built in to |PSIfour|); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy. ::. def run_mp2_5(name, **kwargs):; ; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); ; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; ; print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); ; return e_mp25. Compare the above to the method that resides ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst:1508,access,accessed,1508,doc/sphinxman/source/quickaddalias.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst,1,['access'],['accessed']
Security,"Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16320,hash,hash,16320,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['hash'],['hash']
Security,"_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52546,access,accessed,52546,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['access'],['accessed']
Security,"_subsets(1)`` pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (``extract_subsets(1,2)`` pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. ``extract_subsets(2,[1,3])``::. mA = eneyne.extract_subsets(1); energy('scf'); ; clean(); ; mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; ``--`` marker, the :py:func:`~psi4.driver.wrapper_autofrag.auto_fragments` function can be applied, as shown in; :srcsample:`pywrap-basis`, to return as active molecule the previous; active molecule, only fragmented. Advanced Python; ===============. A named molecule in an input file is a full-fledged instance of the; powerful C++ :py:class:`~psi4.core.Molecule` class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle :samp:`{option_molecule_name}` in; :samp:`molecule {optional_molecule_name} \\{...\\}`. * The molecular geometry can be got and set and manipulated as a; :py:class:`~psi4.core.Matrix` object. Below shows how to access; coordinates in an input file in Python. ::. molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:21703,access,accessible,21703,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['access'],['accessible']
Security,"able error generated. ::. def select_mp3(name, **kwargs):; """"""Function selecting the algorithm for a MP3 energy call; and directing to specified or best-performance default modules. """"""; reference = psi4.get_option('SCF', 'REFERENCE'); mtd_type = psi4.get_global_option('MP_TYPE'); module = psi4.get_global_option('QC_MODULE'); # Considering only [df]occ/fnocc/detci. func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'UHF':; if mtd_type == 'CONV':; if module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module in ['', 'OCC']:; func = run_dfocc; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference == 'ROHF':; if mtd_type == 'CONV':; if module in ['DETCI']:; func = run_detci. if func is None:; raise ManagedMethodError(['select_mp3', name, 'MP_TYPE', mtd_type, reference, module]). return func(name, **kwargs). Naturally, in the run function, you must either use the type keyword for; type switching or translate it into whatever ``DO_CD``-like keywords your; module uses. At run time with a closed-shell molecule, ::. energy('mp3'). will run OCC, while ::. set qc_module fnocc; energy('mp3'). will run FNOCC mp3. A special case is DETCI that *can* run mp3, but oughtn't to be used for such. So above, ROHF CONV mp3 has no default, but can still access the detci code with ::. set reference rohf; set qc_module detci; energy('mp3'). While the below gives an error ::. set reference rohf; energy('mp3'). Again, whenever a single method name needs to call multiple proc.py run; functions, it should be managed. In :ref:`table:managedmethods` ""Y"" means method available in; module, ""D"" means module is default for that method, """" mean method not; available. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst:8993,access,access,8993,doc/sphinxman/source/proc_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst,1,['access'],['access']
Security,"and :envvar:`MKL_NUM_THREADS`.; ..; .. .. code-block:: tcsh; ..; .. # csh, tcsh: add to shell or ~/.tcshrc file; .. setenv OMP_NUM_THREADS 4; .. setenv MKL_NUM_THREADS 4; ..; .. .. code-block:: bash; ..; .. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; .. export OMP_NUM_THREADS=4; .. export MKL_NUM_THREADS=4; ..; .. Psi4 then detects these value via the API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may speci",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:12014,access,accessed,12014,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['access'],['accessed']
Security,"ble for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =====. Python provides many control structures, any of which can be used within |PSIfour|; input files. For example, to loop over three basis sets, the following code can; be used:. .. code-block:: none. basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of ``basis_sets`` is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that ``basis_set`` is a; Python variable, not a string, by prefixing it with a dollar sign. . The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water::. molecule h2o{; O; H 1 R; H 1 R 2 A; }; ; Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2); ; set basis cc-pvdz; set scf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:12222,access,access,12222,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['access'],['access']
Security,"ch programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:1275,password,password,1275,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,3,"['access', 'password', 'secur']","['access', 'password', 'secure']"
Security,"code.F} ; from a binary module named \module{great\_code}:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/great\_code}; \item {\tt svn remove bad\_code.F}; \item {\tt svn ci -m ``Put comments here.''}; \end{enumerate}. \subsection{Checking out older versions of the code}; It is sometimes necessary to check out older versions of a piece of code.; Assume we wish to check out an old version of \PSIdetci. If this; is the case, the following steps will do this:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/detci}; \item {\tt svn co --revision \{2002-02-17\}}; \end{enumerate}. This will check the main repository and provide you with the code as; it stood exactly on February 17th, 2002. . \subsection{Examining the revision history}; It can be very useful to use cvs to see what recent changes have been; made to the code. Anytime one checks in a new version of a file, SVN; requires the user to provide comments on the changes with the {\tt -m}; flag. These comments go into a log information that may be easily; accessed through SVN. To see what changes have been made recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:16359,access,accessed,16359,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['access'],['accessed']
Security,"ctly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: EFP; molecule specification. .. _`sec:usingEFPFragments`:. Molecule Specification; ~~~~~~~~~~~~~~~~~~~~~~. EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the ``--`` fragment separation scheme; described :ref:`here <sec:fragments>`. Each EFP fragment has its own; fragment section that includes the label ``efp``, the name of the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4518,access,accessible,4518,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['access'],['accessible']
Security,"d as its argument.; IV. Basic Data Structures and Storage Hierarchy. Since one may need to store a given quantity in memory in a manner; different from that which is used on disk (e.g., one may need; to pack or unpack indices), the library distinguishes between on-disk; and in-memory storage of four-index quantities. For example, one; might choose to store <ij|ab> integrals on disk using an; (i,j)x(a,b) matrix with all values of i, j, a, and b (pair numbers 0; and 5 from the previous section). However, these can be automatically; antisymmetrized as they are read into memory and the resulting; <ij||ab> stored in a packed form with i>j and a>b. This; section described the basic storage hierarchy that automates this; process. For a general four-index quantity with dummy indices p, q, r, and s,; the storage of the data (whether on disk or in memory) is defined by; the dpdparams4 structure. Although the programmer should; almost always be able to avoid direct interaction with the; dpdparams4 structure, the library isn't perfectly; object-oriented and so access may be necessary in some cases. The; structure contains the following information:. typedef struct {; int nirreps; /* No. of irreps */; int pqnum; /* Pair number for the row indices */; int rsnum; /* Pair number for the column indices */; int *rowtot; /* Row dimension for each submatrix */; int *coltot; /* Column dimension for each submatrix */; int **rowidx; /* Row index lookup array */; int **colidx; /* Column index lookup array */; int ***roworb; /* Row index -> orbital index lookup array */; int ***colorb; /* Column index -> orbital index lookup array */; int *ppi; /* Number of p indices per irrep */; int *qpi; /* Number of q indices per irrep */; int *rpi; /* Number of r indices per irrep */; int *spi; /* Number of s indices per irrep */; int *poff; /* Orbital offset for p */; int *qoff; /* Orbital offset for q */; int *roff; /* Orbital offset for r */; int *soff; /* Orbital offset for s */; int *psym; /* Orbit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:10010,access,access,10010,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,1,['access'],['access']
Security,"d by the basis set). The mechanism for handling this; was to provide a public facing ``compute_shell(int P, int Q)`` method for the; caller; this then looked up the appropriate ``GaussianShell`` objects that were; passed into the corresponding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that returns a single buffer must be replaced with a call to ``buffer()`` to; get a list of pointers; we recommend that be assigned the type ``const auto; &``. For simple integrals, such as overlap or kinetic, only the buffer; corresponding to the zeroth element of this array contains integrals. Derivative Integrals; .................... The old one electron integral code used translational invariance relations to; minimze the number of integrals to be computed,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:14435,access,accessed,14435,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['access'],['accessed']
Security,"e exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to external formats such as FCHK and MOLDEN. Because the Wavefunction makes; its members available to the Python layer, any other similar export functions; should be written in python. Integral consuming technologies; -------------------------------. The general philosophy in |PSIfour| is to try write two-electron integral; driven tasks in methods like Hartree-Fock, CIS and CPHF in terms of generalized; Fock-like matrices. From here, a single class can be used to construct these; generalized Fock matrices, which is what libFock; (:source:`psi4/src/psi4/libfock`) accomplishes. A number of integral; technologies -- such as integral-direct, disk-based and density fitting -- are; supported in libFock, making them generally available to all elements of the; code that use the generalized Fock matrix strategy. .. _`sec:prog_tour-exposing`:. Exposing C++ code to Python; ---------------------------. The recent push to move sections of the code that are not a bottleneck into the; Python layer requires that the C++ code is callable from Python and that its; results are accessible. The result accessibility is addressed by populating; the appropriate variables in the Wavefunction object. To make the code; callable from Python, we rely on the excellent `PyBind11 <https://pybind11.readthedocs.io/en/stable/>`_ library; to create the bindings. Existing code to export various |PSIfour| classes can; be found in :source:`psi4/src` in the files whose name begins with `export_`.; The code to export functions that run entire calculations is usually found in; :source:`psi4/src/core.cc`.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst:3791,access,accessible,3791,doc/sphinxman/source/prog_tour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst,2,['access'],"['accessibility', 'accessible']"
Security,"e modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the value). .. comment options[""AO_BASIS""].has_changed(); .. comment will return false if the default value is being used, and true if the user specified this keyword in the input. .. warning:: |globals__puream| is an exception in that its value and; ``has_changed()`` value only reflect what the user has explicitly set.; This keyword should not be queried to find out the current; |globals__puream| state for the active basis; use instead,; ``psi4.MintsHelper().basisset().has_puream()``. Reading Options in Module; -------------------------. Handling Options in Driver; --------------------------. This section is about the scopes of options and how best to handle them in; the python driver. There are four groups of commands available.; Options from the c-side Options object are accessible in the Python driver through four sets of commands. - get . - :py:func:`psi4.core.get_global_option()`; - :py:func:`psi4.core.get_local_option()`; - :py:func:`psi4.core.get_option()`. - set . - :py:func:`psi4.core.set_global_option()`; - :py:func:`psi4.core.set_local_option()`. - has_changed . - :py:func:`psi4.core.has_global_option_changed()`; - :py:func:`psi4.core.has_local_option_changed()`; - :py:func:`psi4.core.has_option_changed()`. - revoke_changed . - :py:func:`psi4.core.revoke_global_option_changed()`; - :py:func:`psi4.core.revoke_local_option_changed()`. There's a pattern here. Setting something, either a value (set) or a; negative changed status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of ""What will the; specified module use?"". .. note:: ""Global"" in the sense of th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:8722,access,accessible,8722,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['access'],['accessible']
Security,"e that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1546,access,accessed,1546,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['access'],['accessed']
Security,"er over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | w | normal mode, un-mass-weighted | a0 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+---------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2904,access,accessible,2904,doc/sphinxman/source/freq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst,1,['access'],['accessible']
Security,"er platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/M",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2628,access,accessible,2628,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['access'],['accessible']
Security,"eral Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_tour`:. ==========================================================; General layout of the core: where new C++ code should live; ==========================================================. New integral operators; ----------------------. Most of the heavy lifting in |PSIfour| is handled by libmints, which can be; found in the :source:`psi4/src/psi4/libmints` directory. New types of one- and; two-electron integral operators should be added here. The Wavefunction class; :source:`psi4/src/psi4/libmints/wavefunction.h` is also found here and is a key; part of the infrastructure. Every energy calculation is performed by a class; that derives from Wavefunction and is accessible as a return value in the; Python layer. The Wavefunction class contains all pertinent calculation; results, such as one-particle densities, molecular orbitals and gradients. Completely new methods; ----------------------. A new method that is not a modification of existing code belongs in its own; folder in :source:`psi4/src/psi4`; see other folders in that exist in that; location for examples of setting up CMake, and make sure that the new folder is; added to :source:`psi4/src/psi4/CMakeLists.txt`. There are also a number of; variables that can be exported to be available to the user, as detailed in; :ref:`sec:psiVariables`. To set these variables, the following member of; Wavefunction should be called::. set_variable(""Variable Name"", variable_value);. The new variable should also be documented in; :source:`doc/sphinxman/source/glossary_psivariables.rst`. There are a; number of different helpers to export various quantities from the wavefunction; to exter",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst:1743,access,accessible,1743,doc/sphinxman/source/prog_tour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_tour.rst,1,['access'],['accessible']
Security,"ex 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>>",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:3548,hash,hash,3548,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['hash'],['hash']
Security,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1799,access,access,1799,doc/sphinxman/source/opt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst,1,['access'],['access']
Security,"g; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt(cbs(energy()))) is actually expressed as ``db(...,; db_func=opt, opt_func=cbs)``. The perhaps expec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1847,validat,validated,1847,doc/sphinxman/source/intercalls.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst,1,['validat'],['validated']
Security,"he Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`apdx:testSuite`:. Test Suite and Sample Inputs; ============================. |PSIfour| is distributed with an extensive test suite, which can; be found in :source:`tests`. After building the source code, these; can automatically be run by running ``ctest`` in the compilation; directory. More info on ``ctest`` options can be found; :ref:`here <faq:subsettests>`. Sample input files; can be found in the :source:`samples` subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Sample inputs accessible through :ref:`interfaced executables; <sec:interfacing>` are bulleted below. .. toctree::. autodoc_testsuite_brianqc.rst; autodoc_testsuite_cfour; autodoc_testsuite_chemps2; autodoc_testsuite_cookbook; autodoc_testsuite_dftd3; autodoc_testsuite_dftd4; autodoc_testsuite_dkh; autodoc_testsuite_libefp; autodoc_testsuite_erd; autodoc_testsuite_gcp; autodoc_testsuite_gdma; autodoc_testsuite_gpu_dfcc; autodoc_testsuite_json; autodoc_testsuite_mrcc; autodoc_testsuite_pcmsolver; autodoc_testsuite_psi4numpy; autodoc_testsuite_python; autodoc_testsuite_simint; autodoc_testsuite_snsmp2; autodoc_testsuite_v2rdm_casscf. Sample inputs for |PSIfour| as distributed are below. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_testsuite_corepsi4. .. include:: autodoc_testsuite_corepsi4.rst. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst:1564,access,accessible,1564,doc/sphinxman/source/testsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst,1,['access'],['accessible']
Security,"he dMP2 computations; is now standardized. Specifically, we now rigorously enforce that the number of core orbitals ; frozen in dimer computations is equal to the sum of frozen orbitals of each monomer. Prior to; this, a discrepency between these values was possible when one of the monomers was (exclusively) ; a charged alkali metal. . .. _`sec:saptfitA`:. .. caution:: May 2022 c. v1.6, the default for |sapt__df_basis_elst|; changed from the value of |sapt__df_basis_sapt| (which itself; defaults to the RI of the orbital basis) to the JKFIT of the orbital; basis. This affects SAPT0 and sSAPT0 computed with the :ref:`SAPT; module<sec:sapt>` (the default code for ``energy(""sapt0"")`` that; can also compute higher-order SAPT). Electostatics, exchange,; and induction terms for SAPT0 and sSAPT0 accessed through; ``energy(""sapt0"")`` or ``energy(""ssapt0"")`` change; the dispersion; term does not change. The SAPT0 and sSAPT0 terms accessed as; subsidiary calculations of higher-order SAPT do not change; that is,; the :ref:`SAPT module<sec:sapt>` breaks the consistency of its SAPT0; results. The reasoning and reward behind this change is that the JKFIT; basis better describes the physics (see :ref:`fitting changes <sec:saptfitB>` ) and the; default SAPT0 results from the :ref:`SAPT module<sec:sapt>` are now; consistent with those from the :ref:`FISAPT module<sec:fisapt>` and; the sapt(dft) module. See :srcsample:`sapt-compare` for an example.; To reproduce former behavior, set |sapt__df_basis_elst| to the; orbital basis set's RI auxiliary basis. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: *i.e.*,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the ; Hamilto",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:3724,access,accessed,3724,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['access'],['accessed']
Security,"he original user state with the following. ::. # include if optstash = OptionsState(...) was set up previously; optstash.restore(). Current best practice is to store as much as possible on the wavefunction, not in globals. The; driver should handle interactions with globals. When QCVariables are stored on the wavefunction in; the module, copy to globals with the below::. # Shove variables into global space; for k, v in dfmp2_wfn.variables().items():; core.set_variable(k, v). The function should return the wavefunction, except for rare cases like EFP where no wavefunction available.; For now, ``CURRENT ENERGY`` will be set by; :py:func:`~psi4.driver.energy`, etc. In future, this will be extracted from the wavefunction. ::. # return highest or most prominent wavefunction (like dimer for SAPT); return fnocc_wfn. Managed Methods; ---------------. There are several conditions when a method and derivative combination should be *managed*:. * when functionality overlaps between modules, a pattern is needed to; access each route through the code;. * when functionality doesn't overlap completely, a pattern is needed to apportion defaulting among; the modules, taking into account reference (RHF/UHF/ROHF), calc type (CONV/DF/CD), and possibly; |globals__freeze_core| state (AE/FC). * for higher-level derivatives, when, say, gradient functionality for mtd+ref+type+fcae doesn't; exactly match energy functionality, a pattern is needed to decide analytic vs. finite difference. * when default type is not available for a method (e.g., CCD governed by |globals__cc_type| that; defaults to ``CONV`` but only ``DF`` and ``CD`` CCD is available), an informative error message is needed. Managed methods handle these cases through the addition of a new; keyword |globals__qc_module| and a set of type keywords analogous to; |globals__mp2_type|: |globals__mp_type|,; |globals__ci_type|, |globals__cc_type|, which can have values ``CONV``,; ``DF``, and ``CD``. These are all *global* keywords, as the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst:5508,access,access,5508,doc/sphinxman/source/proc_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst,1,['access'],['access']
Security,"ies are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1234,access,accessed,1234,doc/sphinxman/source/intercalls.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst,1,['access'],['accessed']
Security,"ified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:10412,sanitiz,sanitizer,10412,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,4,['sanitiz'],['sanitizer']
Security,"indepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reaso",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:10946,access,access,10946,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['access'],['access']
Security,"ld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; frequency(); pair: vibrational analysis; function call; pair: hessian; function call; see: freq(); frequency();; see: frequencies(); frequency();. .. _`sec:freq()`:. Harmonic Vibrational Analysis and Visualization of Normal Modes |w---w| :py:func:`~psi4.driver.frequency` and :py:func:`~psi4.driver.hessian`; =============================================================================================================================================. * :ref:`Psi4 Native Hessian Methods <table:freq_gen>`. For further discussion of vibrational and thermochemical analysis,; see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; res",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:1787,access,access,1787,doc/sphinxman/source/freq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst,1,['access'],['access']
Security,"lipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in ``GRD``, the result of which; is printed below and passed on to Optking. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3 . 1 2 3 . 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:25802,access,accessed,25802,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['access'],['accessed']
Security,"may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. Starting in v1.4, MP2.5 and MP3 default to the density-fit algorithm. Set |globals__mp_type| to ``CONV`` to get previous behavior. Publications resulting from the use of the non-OO CC codes should cite the following publications:. * **MP2** [Bozkaya:2011:omp2]_, [Bozkaya:2013:omp2grad]_, and [Bozkaya:2014:dfomp2grad]_. * **MP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, [Bozkaya:2013:omp3grad]_, [Bozkaya:2016:dfomp3]_, and [Bozkaya:2018:dfomp3grad]_. * **MP2.5** [Bozkaya:2011:omp3]_, [Bozkaya:2016:dfomp3]_, and [Bozkaya:2018:dfomp3grad]_. * **REMP** [Behnle:2019:REMP]_, [Behnle:2022:OREMP]_. * **LCCD** [Bozkaya:2013:ocepa]_ and [Bozkaya:2016:dfolccd]_. * **CCD** [Bozkaya:2020:dfoccd]_. * **CCSD** [Bozkaya:2016:dfccsdgrad]_. * **CCSD(T)** [Bozkaya:2017:dfccsdtgrad]_. * **CCSD(AT)** [Bozkaya:2016:dfccsdat]_. .. _`table:occ_nonoo_calls`:. .. table:: Non-OO theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp2 | second-order MP perturbation theory | E/G | n/a |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp2.5 | average of MP2 and MP3 | E/G | |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp3 | third-order MP perturbation theory | E/G | |; +-------------------------+---------------------------------------------------------------+-------+-------+; | remp2 | second-order retaining-the-excitation-degree MP hybrid PT | E | |; +-------------------------+---------------------------------------------------------------+-------+-------+; | lccd | linear coupled cluster doubles ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:20346,access,accessible,20346,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['access'],['accessible']
Security,"n as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5017,access,accessible,5017,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['access'],['accessible']
Security,"napshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ; to a disk drive physically attached to the computer running the computation. ;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21271,access,access,21271,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['access'],['access']
Security,"nctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5995,access,accessible,5995,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['access'],['accessible']
Security,"ng CCSD(T) correlation energy will be equivalent to that; obtained from a conventional computation if |fnocc__cholesky_tolerance| is; sufficiently small (*e.g.* ``1e-9``). .. _`sec:fnogn`:. Gn theory; ~~~~~~~~~. The FNOCC module contains all the components that comprise the Gn family; of composite methods. Currently, only the G2 method is supported; [Curtiss:1991:7221]_\. The G2 procedure may be called through the; :py:func:`~psi4.driver.energy` wrapper: ::. energy('gaussian-2'). Supported methods; ~~~~~~~~~~~~~~~~~. The various methods supported by the FNOCC module in |Psifour| are; summarized in Table :ref:`FNOCC Methods <table:fnocc_methods>`; and detailed (except FNO) in Table :ref:`FNOCC Capabilities; <table:fnocc_stdsuite>`. Note that these methods are implemented; for closed-shell reference only. Without ``set qc_module fnocc``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>`. .. _`table:fnocc_methods`:. .. table:: Theoretical methods accessible through FNOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp3 | third-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp4(sdq) | fourth-order MP perturbation theory, less triples | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp4 | full fourth-order MP perturbation theory | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | cisd | configuration interaction singles and doubles | E | E |; +-------------------------+---------------------------------------------------------------+-------+-------+; | qcisd | quadratic confi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:16618,access,accessible,16618,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['access'],['accessible']
Security,"odules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2600,access,access,2600,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['access'],['access']
Security,"omplex Energy (fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that's it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to |kcalpermol| by multiplying by the; automatically-defined conversion factor ``psi_hartree2kcalmol``. |PSIfour|; provides several built-in physical constants and conversion factors, as; described in section :ref:`sec:physicalConstants`.; Notice the loop over :math:`R` to create; the table looks just like the loop over ``R`` to run the different; computations, and the CP-corrected energies ``ecp[R]`` are accessed the same; way they were stored. The ``print`` line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section). Our table is printed at the very end of the output file, and looks like; this ::. CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies; ; R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264; ; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:23120,access,accessed,23120,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['access'],['accessed']
Security,"on information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms. This is very low-level access to OpenMP functions for; experienced programmers. Users should leave this variable unset or set; to ``False``. .. envvar:: OMP_NUM_THREADS. Number of threads to use by modules with OpenMP threading. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: PATH. Path for interfaced executables. .. note:: While once configuring |PSIfour| through :envvar:`PSIPATH` was preferred; to modifying this environment variable, now `PATH` is preferred for; executables to accommodate QCEngine. To run K\ |a_acute|\ llay's MRCC program ; (see :ref:`MRCC <sec:mrcc>`), the ``dmrcc`` executable must be in :envvar:`PATH`.; Likewise to run Grimme's dftd3 program (see :ref:`dftd3 <sec:dftd3>`), the ; ``dftd3`` executable must be in :envvar:`PATH`. .. envvar:: PSI_SCRATCH. Directory where scratch files are written. Overrides settings in |psirc|.; It is very important to ensure that |PSIfour| is writing its scratch files ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:21171,access,access,21171,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['access'],['access']
Security,"onal external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__init__.py`` file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in :envvar:`PYTHONPATH`,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating :envvar:`PSIPATH`. Then,; the plugin can be loaded as ``import myplugin`` and executed as; ``energy('myplugin')``. Any other Python functions are also available from; the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the ``# Load C++ plugin`` section). .. comment as modeled in :source:`tests/plugin_libcim/__init__.py`). .. literalinclude:: @SFNX_INCLUDE@psi4/share/psi4/plugin/__init__.py.template. * **doc.rst** |w---w| Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, *etc.*. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the ``.. comment``; text and build Sphinx documentation for samples of linking key",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:9615,access,accessed,9615,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['access'],['accessed']
Security,"our|'s one-electron integral; machinery now. Calling ``compute_shell(int P, int Q)``; ....................................... The hand-implemented OS recursion code also took care of the Cartesian->pure; transformation (if required by the basis set). The mechanism for handling this; was to provide a public facing ``compute_shell(int P, int Q)`` method for the; caller; this then looked up the appropriate ``GaussianShell`` objects that were; passed into the corresponding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that returns a single buffer must be replaced with a call to ``buffer()`` to; get a list of pointers; we recommend that be assigned the type ``const auto; &``. For simple integrals, such as overlap or kinetic, only the buffer; correspond",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:14211,access,access,14211,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['access'],['access']
Security,"place) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/construct",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22241,access,accessed,22241,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['access'],['accessed']
Security,"power of Python, |PSIfour| makes the most pertinent results; of each computation available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of; H\ :sub:`2` and H atom::. molecule h2 {; H; H 1 0.9; }; ; set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'); ; molecule h {; H; }; ; set basis cc-pvdz; set reference uhf; h_energy = energy('scf'); ; D_e = psi_hartree2kcalmol * (2*h_energy - h2_energy); print ""De=%f"" % D_e. The :py:func:`~psi4.driver.energy` function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation. Generally, there are multiple quantities of interest. Appendix; :ref:`apdx:psivariables_module` lists PSI variables variables set by each; module, and :ref:`apdx:psivariables_alpha` defines them. These can be; accessed through the :py:func:`~psi4.core.get_variable` function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available::. e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. ..",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:9825,access,accessed,9825,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['access'],['accessed']
Security,"s follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from within the input; file and accessed using the ``dft_functional`` keyword argument in the; energy call::. # DFT Custom Functional. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis sto-3g; dft_spherical_points 302; dft_radial_points 99; reference rks; }. pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. func_call = energy('SCF', dft_functional=pbe0). # as PBE0 is a pre-defined functional, the call above is equivalent to both below:; func_call = energy('SCF', dft_functional=""PBE0""); func_call = energy('PBE0'). Supported keywords include:. - `name`: string, name of the functional. for custom defined functionals used for printing only.; - `xc_functionals`: dict, definition of a complete (X + C) functional based in LibXC name; - `x_functionals`: dict, definition of exchange functionals using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, param",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:33199,access,accessed,33199,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['access'],['accessed']
Security,"s in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations faster and is helpful in some; circumstances where unphysical mixing of inactive and active; occupied orbitals might occur. Presently, it is not possible; to mix the use of restricted and frozen orbitals in |PSIfour|. The division of the molecular orbitals into various subspaces such as RAS; spaces, or frozen vs active orbitals, etc, needs to be clear not only to; the detci program, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus,; orbital subspace keywords such as |detci__ras1|, |detci__ras2|, |detci__ras3|, |detci__ras4|,; |globals__frozen_docc|, |globals__frozen_uocc|, |detci__active|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At present, only energies ({\tt none}) are supported; future; releases will implement gradients ({\tt first}). CONVERGENCE = integer; Convergence desired on the orbital gradient. Convergence is achieved when; the RMS of the error in the orbital gradient is less than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:3727,access,accessed,3727,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['access'],['accessed']
Security,"s with prior versions of the code on the order of; 0.01 kcal/mol. See https://github.com/psi4/psi4/issues/1677. .. caution:: August 2021, the number of frozen core orbitals used in the dMP2 computations; is now standardized. Specifically, we now rigorously enforce that the number of core orbitals ; frozen in dimer computations is equal to the sum of frozen orbitals of each monomer. Prior to; this, a discrepency between these values was possible when one of the monomers was (exclusively) ; a charged alkali metal. . .. _`sec:saptfitA`:. .. caution:: May 2022 c. v1.6, the default for |sapt__df_basis_elst|; changed from the value of |sapt__df_basis_sapt| (which itself; defaults to the RI of the orbital basis) to the JKFIT of the orbital; basis. This affects SAPT0 and sSAPT0 computed with the :ref:`SAPT; module<sec:sapt>` (the default code for ``energy(""sapt0"")`` that; can also compute higher-order SAPT). Electostatics, exchange,; and induction terms for SAPT0 and sSAPT0 accessed through; ``energy(""sapt0"")`` or ``energy(""ssapt0"")`` change; the dispersion; term does not change. The SAPT0 and sSAPT0 terms accessed as; subsidiary calculations of higher-order SAPT do not change; that is,; the :ref:`SAPT module<sec:sapt>` breaks the consistency of its SAPT0; results. The reasoning and reward behind this change is that the JKFIT; basis better describes the physics (see :ref:`fitting changes <sec:saptfitB>` ) and the; default SAPT0 results from the :ref:`SAPT module<sec:sapt>` are now; consistent with those from the :ref:`FISAPT module<sec:fisapt>` and; the sapt(dft) module. See :srcsample:`sapt-compare` for an example.; To reproduce former behavior, set |sapt__df_basis_elst| to the; orbital basis set's RI auxiliary basis. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAP",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:3589,access,accessed,3589,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['access'],['accessed']
Security,"s). For beyond bimolecular; complexes, arrays can be used, e.g. ``extract_subsets(2,[1,3])``::. mA = eneyne.extract_subsets(1); energy('scf'); ; clean(); ; mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; ``--`` marker, the :py:func:`~psi4.driver.wrapper_autofrag.auto_fragments` function can be applied, as shown in; :srcsample:`pywrap-basis`, to return as active molecule the previous; active molecule, only fragmented. Advanced Python; ===============. A named molecule in an input file is a full-fledged instance of the; powerful C++ :py:class:`~psi4.core.Molecule` class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle :samp:`{option_molecule_name}` in; :samp:`molecule {optional_molecule_name} \\{...\\}`. * The molecular geometry can be got and set and manipulated as a; :py:class:`~psi4.core.Matrix` object. Below shows how to access; coordinates in an input file in Python. ::. molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:21944,access,access,21944,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['access'],['access']
Security,"scf__cholesky_tolerance|.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. |PSIfour| also features the capability to use ""composite"" Fock matrix build; algorithms - arbitrary combinations of specialized algorithms that construct; either the Coulomb or the Exchange matrix separately. In general, since; separate Coulomb and Exchange matrix build algorithms exploit properties specific to; their respective matrix, composite algorithms display lower; scaling factors than their combined Fock build counterparts. However, composite algorithms also; introduce redundant ERI computations into the calculation. Therefore, composite Fock build; algorithms tend to perform better for larger systems, but worse for smaller systems. Arbitrary; composite algorithms can be accessed by setting |globals__scf_type| to ``J_alg+K_alg``,; where *J_alg* and *K_alg* are the names of the separate Coulomb; and Exchange construction algorithms to use, respectively. Alternatively, if one is using; DFT with non-hybrid functionals, a composite Coulomb construction algorithm can be; specified solo by setting |globals__scf_type| to ``J_alg``, without the need to set ; an associated ``K_alg``. Specialized algorithms available to construct the Coulomb term within a composite framework ; are as follows:. DFDIRJ; An integral-direct algorithm constructing the Coulomb term based on [Weigend:2002:4285]_; The DFDIRJ algorithm combines the benefits of integral-direct SCF approaches ; with that of density-fitting. Specifically, DFJ utilizes no I/O and displays ; strong performance with large system size through a combination of ; effective parallelization and utilization of density-fitting to minimize ; ERI computational cost. See the :ref:`sec:scfddfj` section for more information. Specialized algorithms available to construct the Exchange term with",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:30804,access,accessed,30804,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['access'],['accessed']
Security,"se branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for public; distribution. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:2614,access,access,2614,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['access'],['access']
Security,"source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:3291,hash,hash,3291,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['hash'],['hash']
Security,"t :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <http",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:3146,access,access,3146,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['access'],['access']
Security,"t gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at ru",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22624,hash,hash,22624,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['hash'],['hash']
Security,"to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than ; with the molecular system. Changing the number of roots sought, the symmetry ; subspace or the symmetry apportionment of roots under which the computation is run, ; or the excited sta",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:2411,access,access,2411,doc/sphinxman/source/notes_c.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst,1,['access'],['access']
Security,"tory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no command line arguments, as it takes as input; by default the file ""input.dat"" and directs output by default to ""output.dat"".; Each set of three commands below is completely equivalent, while the second set,; perhaps, is the most common usage. ::. >>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assume",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:17742,access,accessed,17742,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['access'],['accessed']
Security,"unning the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence issues.**; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. * |adc__max_num_vecs|: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; * |adc__num_guesses|: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12905,access,access,12905,doc/sphinxman/source/adc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst,1,['access'],['access']
Security,"updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Inste",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18804,access,accessible,18804,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['access'],['accessible']
Security,"utodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour on",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2004,access,access,2004,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['access'],['access']
Security,"v1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and; git information about |PSIfour|. Function ``version_formatter()`` can; return version and git information in any desired format string. ::. >>> import psi4; >>> psi4.print_header(). -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1rc2.dev17. Git: Rev {condadoc} c852257 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5771,hash,hash,5771,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['hash'],['hash']
Security,"wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:2930,access,accessed,2930,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['access'],['accessed']
Security,"with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12184,access,accessible,12184,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['access'],['accessible']
Security,"xample, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable ``UGC`` available in all |PSIfour| input files.; For convenience, the physical constants used within the |PSIfour| code (which; are obtained from `NIST CODATA 2014; <https://physics.nist.gov/cuu/Constants/archive2014.html>`_; are also automatically loaded as Psithon; variables (before |psirc| is loaded, so that the user's |psirc| values can; override the builtins (in the input file, not in the C++ code). The physical constants used within |PSIfour|, which are automatically; made available within all |PSIfour| input files are in :ref:`table:physconst`. .. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/constants/physconst.py; .. :lines: 28-. In Psithon input files, prepend physical constants with ``psi_`` to; prevent clashes with user-defined variables (*e.g.*, ``psi_h``). In; PsiAPI mode, access as, *e.g.*, ``psi4.constants.h``. .. index:: memory; .. _`sec:memory`:. Memory Specification; ====================. By default, |PSIfour| assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the ``memory`` keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to |PSIfour|::. # all equivalent. memory 2 GB; ; memory 2000 MB; ; memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). |PSIfour| recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB). By default, |PSIfour| performs a ""sanity check"" when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:3222,access,access,3222,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['access'],['access']
Security,"|; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CM",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11327,access,accessible,11327,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['access'],['accessible']
Testability," ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16839,log,log,16839,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['log']
Testability," (CMAKE_VERSION VERSION_GREATER_EQUAL ""3.24.0""); # Avoid warning about DOWNLOAD_EXTRACT_TIMESTAMP in CMake 3.24:; cmake_policy(SET CMP0135 NEW); endif(); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1259,test,tests,1259,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['test'],['tests']
Testability," -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordina",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18333,test,test,18333,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['test'],['test']
Testability," -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribut",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6252,test,tested,6252,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['tested']
Testability," .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`apdx:testSuite`:. Test Suite and Sample Inputs; ============================. |PSIfour| is distributed with an extensive test suite, which can; be found in :source:`tests`. After building the source code, these; can automatically be run by running ``ctest`` in the compilation; directory. More info on ``ctest`` options can be found; :ref:`here <faq:subsettests>`. Sample input files; can be found in the :source:`samples` subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Sample inputs accessible through :ref:`interfaced executables; <sec:interfacing>` are bulleted below. .. toctree::. autodoc_testsuite_brianqc.rst; autodoc_testsuite_cfour; autodoc_testsuite_chemps2; autodoc_testsuite_cookbook; autodoc_testsuite_dftd3; autodoc_testsuite_dftd4; autodoc_testsuite_dkh; autodoc_testsuite_libefp; autodoc_testsuite_erd; autodoc_testsuite_gcp; autodoc_testsuite_gdma; autodoc_testsuite_gpu_dfcc; autodoc_testsuite_json; autodoc_testsuite_mrcc; autodoc_te",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst:1030,test,testSuite,1030,doc/sphinxman/source/testsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst,1,['test'],['testSuite']
Testability," A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :sourc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2080,test,test,2080,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable ``UGC`` available in all |PSIfour| input files.; For convenience, the physical constants used within the |PSIfour| code (which; are obtained from `NIST CODATA 2014; <https://physics.nist.gov/cuu/Constants/archive2014.html>`_; are also automatically loaded as Psithon; variables (befor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:1622,test,test,1622,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,3,['test'],"['test', 'testSuite']"
Testability," Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1904,test,tested,1904,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability," [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](ht",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:1926,test,test,1926,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,2,['test'],"['test', 'tests']"
Testability," ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:2771,test,tests,2771,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability," ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencie",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:5943,test,testplugin,5943,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability," a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64371,test,tests,64371,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,4,['test'],['tests']
Testability," a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:5949,test,testing,5949,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['test'],['testing']
Testability," a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANC",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7138,test,tested,7138,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tested']
Testability," an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * If you have an option that instructs your module to do something not too; computationally intensive and then quit, append ``_EXIT`` to the option; name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_S",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10594,test,tested,10594,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tested']
Testability," and Gibbs free energy (G). Similarly, the; molecular geometry is used to obtain rotational constants, which are; then used to obtain rotational contributions to H, S, and G. .. _`sec:tutorial_tu5`:. Analysis of Intermolecular Interactions; =======================================. Now let's consider something a little more interesting. |PSIfour|; contains code to analyze the nature of intermolecular interactions; between two molecules, via symmetry-adapted perturbation theory; (SAPT) [Jeziorski:1994:1887]_. This kind of analysis gives a lot; of insight into the nature of intermolecular interactions, and |PSIfour|; makes these computations easier than ever. For a SAPT computation, the input needs to provide information on two; distinct molecules. This is very easy, we just give a Z-matrix or set of; Cartesian coordinates for each molecule, and separate the two with two; dashes, like this::. # Example SAPT computation for ethene*ethine (*i.e.*, ethylene*acetylene),; # test case 16 from the S22 database; ; molecule dimer {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; ; }. Here's the second half of the input, where we specify the computation; options::. set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }; ; energy('sapt0'). Before, we have been setting keywords individually with commands like; ``set basis cc-pVDZ``. Because we have a few more options now, it's; convenient to place them together into the ``set``; block, bounded by ``{...}``. This; will set all of these options as ""global"" options (meaning that they are; visible to all parts of the program). Most common |PSIfour| options can be; set in a globals section like this. If an option needs to be visible; only to o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:11962,test,test,11962,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['test'],['test']
Testability," and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed location",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69035,log,log,69035,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability," are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values functi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8294,test,test,8294,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4920,test,testing,4920,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability," compilers. :ref:`Compiler requirements <faq:approvedcxx>` are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a :ref:`precompiled binary; <sec:conda>` is available. See :ref:`Compiling and Installing; <sec:installFile>` for details.; Python; |PSIfour| 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:28414,test,test,28414,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['test'],['test']
Testability," curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6228,test,test,6228,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability," docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:17073,test,tests,17073,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability," e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called. Whatever is getting called is stored in func within the function. ::. # Establish function to call; if not('xx_func' in kwargs):; if ('func' in kwargs):; kwargs['xx_func'] = kwargs['func']; del kwargs['func']; else:; kwargs['xx_func'] = energy; func = kwargs['xx_func']; if not func:; raise ValidationError('Function \'%s\' does not exist to be called by wrapper counterpoise_correct.' % (func.__name__)); if (func is db):; raise ValidationError('Wrapper xx is unhappy to be calling function \'%s\'.' % (func.__name__)). - If specific interoperabilities are known, code them in. For example, if xx shouldn't call db, add the last two lines above to the xx function. If db shouldn't call xx, add the following two lines below to the db function. ::. if (func is xx):; raise ValidationError('Wrapper database is unhappy to be calling function \'%s\'.' % (func.__name__)). - Create a multipart test case that runs some intercalls between your function and others (akin to :srcsample:`pywrap_all)`. In trials, permute the order of calls a few times to expose any calls that don't clean up after themselves and need further attention. - When all is validated, add your findings to the great :ref:`table:intercalls` table in the documentation. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:7140,test,test,7140,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['test'],['test']
Testability," file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those ove",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13773,test,test,13773,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," fix ""cannot import name 'core' from {top-level-psi4-dir}; ---------------------------------------------------------------. First, what's happening? ``sys.path`` (where modules can be imported from in python) starts with ``''``. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9742,test,tests,9742,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['test'],['tests']
Testability," focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5208,test,test,5208,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20199,log,log,20199,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['log'],['log']
Testability," how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13743,test,test,13743,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosyste",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:5509,test,tests,5509,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability," in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5704,test,tests,5704,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability," in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=F",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16202,test,test,16202,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent |PSIfour|; (the ``-C psi4PluginCache`` part) which in turn ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:7058,test,testplugin,7058,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability," is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test director",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2604,test,test,2604,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,3,['test'],"['test', 'tests']"
Testability," it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13877,test,test,13877,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,3,['test'],"['test', 'tests']"
Testability," job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:5715,test,test,5715,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['test'],['test']
Testability," log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anacond",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7685,test,test,7685,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability," mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69395,log,log,69395,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability," optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_DOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_DOCC} and {\tt FROZEN\_DOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. FROZEN\_UOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_UOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_UOCC} and {\tt FROZEN\_UOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The default is the zero vector. NCASITER = integer]\mbox{}\\; Maximum number of iterations to optimize the orbitals. This option; should be specified in the DEFAULT section of input, because; it needs to be visible to the control program PSI. Defaults to 20. AVERAGE\_STATES = (integer array)]\mbox{}\\; This gives a list of what states to average for the orbital ; optimization. States are numbered starting from 1. PRINT = integer]\mbox{}\\; This option determines the verbosity of the output. A value of 1 or; 2 specifies minimal printing, a value of 3 specifies verbose printing.; Values of 4 or 5 are used for debugging. Do not use level 5 unless; the test case is very small (e.g. STO H\ :sub:`2`\ O CISD). Examples; --------. Example of a CASSCF single-point calculation for H\ :sub:`2`\ O using; a valence active space 3a\ :sub:`1` 1b\ :sub:`1` 2b\ :sub:`2`. ::. % 6-31G** H2O Test CASSCF Energy Point; ; psi: (; label = ""6-31G** CASSCF H2O""; jobtype = sp; wfn = casscf; reference = rhf; restricted_docc = (1 0 0 0); active = (3 0 1 2); basis = ""6-31G**""; zmat = (; o; h 1 1.00; h 1 1.00 2 103.1; ); ). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:7554,test,test,7554,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['test'],['test']
Testability," or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far lon",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17361,test,test,17361,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:15126,test,testing,15126,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['test'],['testing']
Testability," other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; -------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10453,test,test,10453,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability," psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --tes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6670,log,log,6670,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['log'],['log']
Testability," repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Add",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8029,test,test,8029,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability," run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the fo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5580,test,test,5580,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``energy(""fsapt0-d3mbj"")``. See :ref:`FSAPT <sec:fisapt>` documentation for more details on using FSAPT; for functional group analyses.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:46579,test,tested,46579,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,2,['test'],"['tested', 'tests']"
Testability," should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64245,test,test,64245,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability," software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ERD; .. _`sec:erd`:. Interface to ERD by N. Flocke and V. Lotrich; ============================================. .. codeauthor:: Andrew C. Simmonett and Benjamin P. Pritchard; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:dkh>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-erd-5077AB.svg; :target: https://github.com/psi4/erd. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://onlinelibrary.wiley.com/doi/10.1002/jcc.21018/abstract. .. _`sec:erdinstall`:. These are the AcesIII electron repulsion integrals that have; been partially interfaced into libmints. Enabling erd and adding; ``set integral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:1343,test,testSuitedkh,1343,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,1,['test'],['testSuitedkh']
Testability," sometimes necessary to check out older versions of a piece of code.; Assume we wish to check out an old version of \PSIdetci. If this; is the case, the following steps will do this:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/detci}; \item {\tt svn co --revision \{2002-02-17\}}; \end{enumerate}. This will check the main repository and provide you with the code as; it stood exactly on February 17th, 2002. . \subsection{Examining the revision history}; It can be very useful to use cvs to see what recent changes have been; made to the code. Anytime one checks in a new version of a file, SVN; requires the user to provide comments on the changes with the {\tt -m}; flag. These comments go into a log information that may be easily; accessed through SVN. To see what changes have been made recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappea",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:16583,log,log,16583,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['log'],['log']
Testability," soscf-large soscf-ref; soscf-dft stability1 dfep2-1 dfep2-2 sapt-dft1 sapt-dft2 sapt-compare sapt-sf1 dft-custom dft-reference; stability2 stability3 tu1-h2o-energy tu2-ch2-energy tu3-h2o-opt scf-response1 scf-response2 scf-response3; scf-cholesky-basis scf-auto-cholesky; tu4-h2o-freq tu5-sapt tu6-cp-ne2 x2c1 x2c2 x2c3 x2c-perturb-h zaptn-nh2; options1 cubeprop-esp dft-smoke scf-hess1 scf-hess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executabl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6493,test,test,6493,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability," the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5742,test,test,5742,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3775,test,tests,3775,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['tested', 'tests']"
Testability," to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test req",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6340,test,test,6340,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability," two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteri",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4349,test,tests,4349,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability," with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the dir",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9341,test,testing,9341,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability," with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` dir",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:11840,test,test,11840,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with undersc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9764,test,tests,9764,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1810,test,tests,1810,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:58,log,logos-,58,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,4,['log'],"['logo', 'logoColor', 'logos-']"
Testability,"# CMake driving pytest copied from pybind11:; # https://github.com/pybind/pybind11/blob/master/tests/CMakeLists.txt. # Make sure pytest is found or produce a fatal error; if(NOT psi4_PYTEST_FOUND); execute_process(COMMAND ${Python_EXECUTABLE} -c ""import pytest""; OUTPUT_QUIET ERROR_QUIET; RESULT_VARIABLE _exec_python_err); if(_exec_python_err); message(STATUS ""Running some tests requires pytest. Please install it manually (try: ${Python_EXECUTABLE} -m pip install pytest)""); endif(); set(psi4_PYTEST_FOUND TRUE CACHE INTERNAL """"); endif(). # A single command to remake and run the pytest smoke tests; add_custom_target(pytest; COMMAND PYTHONPATH=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}; ${Python_EXECUTABLE} -m pytest -rws -v -m smoke --capture=sys ${CMAKE_CURRENT_SOURCE_DIR}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt:95,test,tests,95,tests/pytests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt,3,['test'],['tests']
Testability,"# In order to get CTest to run tests in separate categories,; # labels are used. All tests must carry the label ""psi"".; #; # The following labels are defined:; #; # smoketests = Does Psi4 work? A few basic operational tests plus; # one from each addon and addin; # quicktests = Best coverage possible in a 20 min envelope (for Travis-CI).; # This subset is chosen to provide one or more tests for each; # major module, but it does not necessarily cover all features; # of every module.; # longtests = The really long (> ~15 min) tests; #; # Common test runs:; #; # ctest -L quick run all quicktests; # ctest -LE long run all but longtests; #; # It is possible to specify more than one label per test. CMake; # expects a ;-separated list, e.g. ""psi;quicktests;scf""; # It is suggested to add at least a second label to specify the method tested.; #; # We use ctest -I [start,end] where start is the test number we start with; # and end is the test number we end with. We will then use math to back out; # the appropriate starts and ends...; #; #; # In order to ensure that this works properly, please add your tests to the; # appropriate variables given below. foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:31,test,tests,31,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,10,['test'],"['test', 'tested', 'tests']"
Testability,"# NOTES on Libint2 build options for Psi4; # ---------------------------------------; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_CARTGAUSS_ORDERING=standard *at generation time*. This is already the default.; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHELL_SET=standard *at generation time*. This is already the default.; # * ~In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHGAUSS_ORDERING=gaussian *at library build time*.; # This is not the default, though it may become runtime selectable in future https://github.com/evaleev/libint/issues/190#issuecomment-691485225 .~ (see [Feb 2023] update); # * In order for any DF to work, need ENABLE_ERI3 and ENABLE_ERI2 >=0; # * In order for gradient and Hessian tests to not segfault, need ENABLE_ERI and ENABLE_ERI3 and ENABLE_ERI2 =2; # * (new c. Jan 2022) In order for Psi4 to at all work with a libint2 build for one-electron ints, need ENABLE_ONEBODY =2; # * The `find_package(Libint2 ... COMPONENTS ...)` commands will check the above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calcu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:788,test,tests,788,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['test'],['tests']
Testability,"# file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7601,test,test,7601,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md:662,test,tests,662,.github/PULL_REQUEST_TEMPLATE.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md,2,['test'],['tests']
Testability,"####################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7650,test,test,7650,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12161,test,test,12161,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability,", depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The auto",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7061,test,test,7061,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['test']
Testability,"----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. Identical basis sets; with the cc-\ *stub*\ XZ-JKFIT label are provided for convenience.; .. [#f4] D\ :math:`\zeta` has :math:`\ell_{max}=2` or d.; T\ :math:`\zeta` has :math:`\ell_{max}=3` or f.; Q\ :math:`\zeta` has :math:`\ell_{max}=4` or g, *etc*.; .. [#f5] *N* in Jensen basis sets corresponds to :math:`N+1\zeta` basis set. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:19401,stub,stub,19401,doc/sphinxman/source/basissets_tables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst,4,['stub'],['stub']
Testability,"---------------------------------------------------------------------------- ~. To get harmonic vibrational frequencies, it's important to keep in mind that; the values of the vibrational frequencies are a function of the molecular; geometry. Therefore, *it's important to obtain the vibrational frequencies ; at the OPTIMIZED GEOMETRY*. We could set up a second input file to perform; the vibrational frequency analysis, being very careful to copy over the; optimized geometry from the *bottom* of the output file for the geometry; optimization. This geometry could be specified in either z-matrix or; Cartesian formats. However, there's a much easier way to do this. If we; specify a vibrational frequency analysis in the same input file as the; optimization, after the optimization function has been called, then the; optimized geometry will automatically be carried over. So, it's easiset to do the optimization and vibrational frequency analysis; together. This can be specified as follows (see test case; :srcsample:`tu4-h2o-freq`):. .. literalinclude:: @SFNX_INCLUDE@samples/tu4-h2o-freq/input.dat. The program will do the same optimization as in our previous example,; but then it will follow it with some computations to obtain the Hessian; (second derivative matrix) of the electronic energy with respect to; nuclear displacements. From this, it can obtain the harmonic vibrational; frequencies, given below (roundoff errors of around 0.1 cm\ :sup:`-1`; may exist)::. Irrep Harmonic Frequency; (cm-1); -----------------------------------------------; A1 1775.6480; A1 4113.3794; B2 4212.1826; -----------------------------------------------. Notice that the symmetry type of the normal modes is specified (A1, A1,; B2). The program also prints out the normal modes in terms of Cartesian; coordinates of each atom. For example, the normal mode at 1776 cm\ :sup:`-1` ; is::. Frequency: 1775.65; Force constant: 0.1193; X Y Z mass; O 0.000 0.000 -0.270 15.994915; H 0.000 0.417 0.538 1.007825;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:9424,test,test,9424,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['test'],['test']
Testability,"---------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the gi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28530,test,test,28530,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability,-----------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:3061,test,testsoutput,3061,doc/sphinxman/source/build_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst,1,['test'],['testsoutput']
Testability,"--------------------------. First, what's happening? ``sys.path`` (where modules can be imported from in python) starts with ``''``. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9824,test,test,9824,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,2,['test'],['test']
Testability,"-----------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13034,test,test,13034,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"-----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:11113,test,test,11113,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4450,test,test,4450,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability,"-0.505 2.581; H 0.000 0.965 2.790; no_com; no_reorient; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = { ; 'coordsys' : 'tric',; 'constraints' : { ; 'freeze' : [{'type' : 'xyz',; 'indices' : [0, 2, 4, 6, 8, 10]}]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). Output; ^^^^^^. The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (``~``). This produces a table like the one below that shows; for each iteration the value for each of the five quantities and whether the criterion; is active and fulfilled (``*``), active and unfulfilled ( ), or inactive (``o``). ::. --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98e-07 * 3.95e-05 * 3.35e-05 o 1.37e-04 * 1.05e-04 o ~. The full list of keywords for optking is provided in Appendix :ref:`apdx:optking`. Information on the Psithon function that drives geometry optimizations is provided; at :py:func:`~psi4.driver.optimize`. Important User Changes from cpp-optking; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * `FIXED_COORD` keywords have been generalized to `RANGED_COORD` e.g. |optking__ranged_distance|. * Detailed optimization is now printed through the python logging system. If more information about; the optimization is needed. Please see `\<output_name\>.log`; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:30262,log,logging,30262,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,2,['log'],"['log', 'logging']"
Testability,"-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fs",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6890,test,tests,6890,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['tests']
Testability,"-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13183,test,testing,13183,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,3,"['assert', 'test']","['assert', 'testing']"
Testability,"-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.)",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63110,log,log,63110,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability,"-plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6846,test,testplugin,6846,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,". # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2023,test,test,2023,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['test'],['test']
Testability,". # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BIN",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:15822,test,tests,15822,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,". # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent |PSIfour|; (the ``-C psi4PluginCache`` part) which in turn can be overridden; by passing ``-Doption=",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:7093,test,testplugin,7093,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,". - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the us",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:5096,test,test,5096,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['test'],['test']
Testability,". .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3');",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12422,test,tested,12422,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['test'],['tested']
Testability,". For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:3317,test,testing,3317,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['testing']
Testability,". To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator fo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13502,test,test,13502,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,3,['test'],"['test', 'tests']"
Testability,".*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking sh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6482,test,test,6482,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:appendices`:. ==========; Appendices; ==========. Keywords; ========. .. toctree::; :maxdepth: 2. autodoc_glossary_options_c; autodoc_options_c_bymodule. Basis Sets; ==========. .. toctree::; :maxdepth: 2. basissets_tables; basissets_byelement; basissets_byfamily. .. _`sec:appendices:qcvars`:. QCVariables (aka PSI Variables); ===============================. .. toctree::; :maxdepth: 2. glossary_psivariables; autodoc_psivariables_bymodule. Miscellaneous; =============. .. toctree::; :maxdepth: 2. testsuite; dft_byfunctional; autodoc_psifiles; autodoc_physconst; bibliography. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/appendices.rst:1530,test,testsuite,1530,doc/sphinxman/source/appendices.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/appendices.rst,1,['test'],['testsuite']
Testability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_full_integration`:. =======================================; Integrating New Features into |PSIfour|; =======================================. Overview of Required Steps; --------------------------. Explain the different steps that are needed to add a few feature to ; |PSIfour| (where to put the code, how to add user options (w/docs), where; to add targets to CMake files, adding test cases, adding a section; to the Users' manual. Several of those steps are already documented ; elsewhere, so just point to them in the appropriate places. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_full_integration.rst:1457,test,test,1457,doc/sphinxman/source/prog_full_integration.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_full_integration.rst,1,['test'],['test']
Testability,"..........................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63850,test,tests,63850,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,6,['test'],"['test', 'tests']"
Testability,".; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`apdx:testSuite`:. Test Suite and Sample Inputs; ============================. |PSIfour| is distributed with an extensive test suite, which can; be found in :source:`tests`. After building the source code, these; can automatically be run by running ``ctest`` in the compilation; directory. More info on ``ctest`` options can be found; :ref:`here <faq:subsettests>`. Sample input files; can be found in the :source:`samples` subdirectory of the top-level Psi; directory. The samples and a brief description are provided below. Sample inputs accessible through :ref:`interfaced executables; <sec:interfacing>` are bulleted below. .. toctree::. autodoc_testsuite_brianqc.rst; autodoc_testsuite_cfour; autodoc_testsuite_chemps2; autodoc_testsuite_cookbook; autodoc_testsuite_dftd3; autodoc_testsuite_dftd4; autodoc_testsuite_dkh; autodoc_testsuite_libefp; autodoc_testsuite_erd; autodoc_testsuite_gcp; autodoc_testsuite_gdma; autodoc_testsuite_gpu_dfcc; autodoc_testsuite_json; autodoc_testsuite_mrcc; autodoc_testsuite_pcmsolver; autodoc_testsuite_psi4numpy; autodoc_testsuite_python; autodoc_testsuite_simint; autodoc_testsuite_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst:1146,test,test,1146,doc/sphinxman/source/testsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/testsuite.rst,2,['test'],"['test', 'tests']"
Testability,".g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path ha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19708,test,test,19708,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['test'],['test']
Testability,".json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:5277,test,tests,5277,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,".md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4355,test,tests,4355,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,".rst; ${CCBD}/source/autodoc_capabilities_ccenergy.rst; ${CCBD}/source/autodoc_capabilities_fnocc.rst; ${CCBD}/source/autodoc_capabilities_dfmp2.rst; ${CCBD}/source/autodoc_capabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; DEPENDS ${CCSD}/document_capabilities.py; ${CCSD}/../../samples/stdsuite_psi4.txt; COMMENT ""Autodoc capabilities""). # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:15494,test,tests,15494,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,".rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-bases; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-bases/autodoc_basissets_byfamily.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_basissets_byfamily.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislist.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistdunning.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistother.py; ${psi4_SOURCE_DIR}/tests/docs-bases/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc auxiliary basis sets""). # Autodoc plugins; # Not at all in working order; #add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E make_directory source/autodir_plugins; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_plugins.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_abbr_options_plugins.rst; # ${CCBD}/source/autodoc_available_plugins.rst; # ${CCBD}/source/autodir_plugins/glossary__aointegrals.rst; # ${CCBD}/source/autodir_plugins/module__aointegrals.rst; # ${CCBD}/source/autodir_plugins/aointegrals__print.rst; # DEPENDS ${CCSD}/document_plugins.py; # ${psi4_SOURCE_DIR}/plugins/*/*.py; # ${psi4_SOURCE_DIR}/plugins/*/doc.rst; # COMMENT ""Autodoc plugins""). # Autodoc efp fragments; if(${ENABLE_libefp}); add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_efpfrag.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_efpfrag.rst; DEPENDS ${CCSD}/document_efpfrag.py; $<IF:$<STREQUAL:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:18449,test,tests,18449,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,".sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. ..",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17793,log,log,17793,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['log'],['log']
Testability,"/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofunction:: psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_fchkfiles. .. autofunction:: psi4.compare_fcidumps. .. autofunction:: psi4.compare_moldenfiles. .. autofunction:: qcdb.compare_vibinfos. Extra QCA Functions; -------------------. .. autofunction:: psi4.compare. .. autofunction:: psi4.compare_recursive. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:17715,test,testing,17715,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16714,test,tests,16714,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8976,test,test,8976,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['test']
Testability,"2. We are still exploring optimizations of the octree algorithm; and the basis cutoffs, but it is likely that significant speed gains may be; realized by relaxing the basis cutoff tolerance, with negligible decrease in; accuracy. Small density values can introduce numerical instabilities with some functionals that; can result in trailing SCF convergence issues or even numerical failures (NaNs).; If the default settings of the LibXC library are insufficient, a custom value can be ; request by setting |scf__dft_density_tolerance|. For notorious cases a value of 1E-10; is sensible. An example of a fully specified grid is as follows::. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; dft_spherical_points 590 # Often needed; dft_radial_points 99 # Often needed; dft_radial_scheme treutler # Rarely needed; dft_nuclear_scheme treutler # Rarely needed; dft_density_tolerance 1.0E-10 # Rarely needed; dft_basis_tolerance 1.0E-11 # Can speed things up, but benchmark the error; dft_pruning_scheme robust # Generally safe and will speed things up; }. energy('b3lyp'). ERI Algorithms; ~~~~~~~~~~~~~~. The ERI algorithms for the Coulomb and hybrid exchange are identical to; :ref:`those for Hartree--Fock <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:27145,benchmark,benchmark,27145,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['benchmark'],['benchmark']
Testability,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12397,test,test,12397,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['test'],['test']
Testability,"4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11871,test,tests,11871,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['test'],['tests']
Testability,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1858,test,tests,1858,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,":`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18627,log,login,18627,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['log'],['login']
Testability,":`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13597,test,tests,13597,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,":installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2032,test,tested,2032,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability,"; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying librari",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1121,test,test,1121,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1220,test,tests,1220,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``select",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28822,test,testers,28822,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['testers']
Testability,"; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:6036,test,tests,6036,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10244,test,tests,10244,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['test'],['tests']
Testability,=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:1386,log,logo,1386,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['log'],['logo']
Testability,"> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18494,log,logging,18494,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['log'],['logging']
Testability,">> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line options and usage information. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18473,log,loglevel,18473,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['log'],['loglevel']
Testability,"AND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16596,test,tests,16596,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"CE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../sta",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8928,test,tests,8928,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5963,test,test,5963,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,2,['test'],['test']
Testability,"CSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_scf.rst"" --mode scf --driver egh; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_scf.rst"" --mode scf --driver egh; OUTPUT ${CCBD}/source/autodoc_capabilities_details.rst; ${CCBD}/source/autodoc_capabilities_summary.rst; ${CCBD}/source/autodoc_capabilities_ccenergy.rst; ${CCBD}/source/autodoc_capabilities_fnocc.rst; ${CCBD}/source/autodoc_capabilities_dfmp2.rst; ${CCBD}/source/autodoc_capabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; DEPENDS ${CCSD}/document_capabilities.py; ${CCSD}/../../samples/stdsuite_psi4.txt; COMMENT ""Autodoc capabilities""). # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTAL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:14833,stub,stubs,14833,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['stub'],['stubs']
Testability,"Candidate Structure for other method-tests. _ref_module = {scftype: {ref: {frz: {mp2type: {} for mp2type in ['conv', 'df', 'cd']} for frz in ['true', 'false']} for ref in ['rhf', 'uhf']} for scftype in ['pk', 'df']}. * The above will work for mp2, mp2.5, mp3, cepa, and the orbital-optimized variants thereof. MP2 has ROHF, but that's special.; * The dct module can also supply non-FC, conventional integral cepa.; * At present, occ has no frozen core energies for orbital optimized methods or frozen core gradients for anything. dfocc does. Jonathon will be changing this in a future; project, as well as adding some frozen virtual. ETA is Spring 2021, because that depends on the Gradient Rewrite.; * dfocc has all DF gradients and CD energies for all options.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/occ_methods.txt:37,test,tests,37,tests/pytests/occ_methods.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/occ_methods.txt,1,['test'],['tests']
Testability,"ENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2037,test,tested,2037,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['test'],['tested']
Testability,"FIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". H. Build on Linux with specific (GCC) compilers from; from conda in **activated** environment; (:envvar:`CONDA_PREFIX` and :envvar:`HOST` are defined upon; activation). .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. .. _`faq:approvedcxx`:. What C and C++ compilers and versions are approved; --------------------------------------------------. On Linux, the following work nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` co",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:38721,test,test,38721,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"INATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11740,test,tests,11740,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['test'],['tests']
Testability,"INATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11905,test,tests,11905,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['test'],['tests']
Testability,"ING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSecti",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2317,test,testing,2317,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['test'],['testing']
Testability,"Ithon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3195,test,test,3195,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"KL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50485,test,testing,50485,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"LES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11511,test,tests,11511,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['test'],['tests']
Testability,"MKL""); set(_VENDOR ""MKL""); else(); set(_VENDOR ""All""); endif(); set_target_properties(; lapack; PROPERTIES; VENDOR ${_VENDOR}; INT_INTERFACE lp64 # Psi4 only works with lp64 afaik; ); set(export_properties ""VENDOR;INT_INTERFACE""); set_property(TARGET lapack APPEND PROPERTY EXPORT_PROPERTIES ""${export_properties}""). # << Detect OpenMP and modify for BLAS/LAPACK >>; if(NOT TARGET tgt::MathOpenMP); list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(MathOpenMP); endif(). #include(CMakePrintHelpers); #cmake_print_properties(TARGETS OpenMP::OpenMP_CXX OpenMP::OpenMP tgt::MathOpenMP lapack; # PROPERTIES INTERFACE_COMPILE_DEFINITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt:2135,test,tested,2135,external/common/lapack/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt,1,['test'],['tested']
Testability,"MakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7358,test,test,7358,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"NSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psitho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11546,test,tests,11546,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['test'],['tests']
Testability,"OMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-bases; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-bases/autodoc_basissets_byfamily.rst ${CCBD",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:17249,test,tests,17249,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"ON ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}; ; DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}; ; mp2 interaction energy of water dimer (S22-2); -0.0115002693348. .. index:: database(); available. .. _`sec:availableDatabases`:. Available Databases; ^^^^^^^^^^^^^^^^^^^. Below are documented for particular databases the availability of the generic; database function options **cp**, **rlxd**, **benchmark**, and the string; options for **subset**. The full reagent member list, which can also be used; in conjunction with **subset**, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_databases. .. include:: autodoc_available_databases.rst. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:6959,benchmark,benchmark,6959,doc/sphinxman/source/db.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst,1,['benchmark'],['benchmark']
Testability,"OPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7771,test,tests,7771,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"PBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |scf__dft_spherical_points| | Order |; +=============================+=======+; | 6 | 3 |; +-----------------------------+-------+; | 14 | 5 |; +-----------------------------+-------+; | 26 | 7 |; +-----------------------------+-------+; | 38 ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20676,test,test,20676,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['test'],['test']
Testability,"PI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3922,test,test,3922,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14957,test,tests,14957,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/sh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55045,test,tests,55045,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"R=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gn",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41303,test,tested,41303,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability,"S, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6243,test,tests,6243,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['tests']
Testability,"S:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). #-DLIBINT2_REQUIRE_CXX_API=ON; #-DLIBINT2_REQUIRE_CXX_API_COMPILED=OFF; #-DLIBINT2_ENABLE_FORTRAN=OFF; #-DLIBINT2_ENABLE_PYTHON=OFF; else(); message(STATUS ""Suitable Libint2 could not be located, ${Magenta}Building Libint2${ColourReset} from generator source instead.""); message(WARNING ""${Yellow}Libint2 generator source build requires Ninja (not Makefile) builder and Boost, Eigen, and GMPXX dependencies. The build will be very long for non-trivial AM, and parallelism won't help for the generation phase. Edit external/upstream/libint2/CMakeLists.txt for AM, derivative, and integral classes settings. This is also building v2.7, not v2.8 Libint2.${ColourReset}""). if (MSVC); message(FATAL_ERROR ""${Red}Libint2 generator source build faulty on Windows.${ColourReset}""); endif(). # NOTE: active AM settings below will pass few tests, as they're set for 1st row triple-zeta ene and double-zeta ene/grad/hess for both conv/df. Please edit for desired use. ExternalProject_Add(libint2_external; URL https://github.com/loriab/libint/archive/new-cmake-2023-take2-b.zip; CMAKE_ARGS -GNinja; -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${_cmake_build_type}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DENABLE_ONEBODY=2; -DENABLE_ERI=2; -DENABLE_ERI3=2; -DENABLE_ERI2=2; -DENABLE_G12=1; -DDISABLE_ONEBODY_PROPERTY_DERIVS=ON; -DMULTIPOLE_MAX_ORDER=4; -DBoost_DIR=${Boost_DIR}; -DBOOST_ROOT=${BOOST_ROOT}; -DEigen3_DIR=${Eigen3_DIR}; -DEigen3_ROOT=${Eigen3_ROOT}; -DMultiprecision_ROOT=${Multiprecision_ROOT}; -DERI3_PURE_SH=OFF; -DERI2_PURE_SH=OFF; -DLIBINT2_SHGAUSS_ORDERING=standard; -DLIBINT2_CARTGAUSS_ORDERING=standard; -DLIBINT2_SHELL_SET=standard; -DBUILD_SHARED_LIBS=${_build_shared_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:8557,test,tests,8557,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['test'],['tests']
Testability,"SD}/document_cfour.py ${CCSD}; OUTPUT ${CCBD}/source/autodir_psivariables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8792,test,tests,8792,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"SIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major changes or if you have a problem adding a new test case.; Remember, if all else fails, read the source code. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:1247,test,test,1247,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,8,['test'],"['test', 'testing', 'tests']"
Testability,"TRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_accents.rst adc.rst adcc.rst appendices.rst basissets.rst; basissets_byelement.rst bibliography.rst cbs.rst cbs_eqn.rst ddx.rst; nbody.rst customizing.rst db.rst detci.rst dfmp2.rst dlpnomp2.rst; diatomic.rst documentation.rst energy.rst external.rst fchk.rst; freq.rst gdma.rst glossary_psivariables.rst index.rst intercalls.rst; interfacing.rst introduction.rst methods.rst notes_c.rst notes_py.rst; oeprop.rst opt.rst optking.rst plugins.rst prog_corelibs.rst prop.rst; psithonfunc.rst psithoninput.rst quickaddalias.rst; basissets_tables.rst quickadddatabase.rst sapt.rst sowreap.rst; testsuite.rst tutorial.rst dft_byfunctional.rst scf.rst mrcc.rst; psimrcc.rst cc.rst dft.rst fnocc.rst optionshandling.rst; basissets_byfamily.rst psipep.rst pep0001.rst dftd3.rst occ.rst; molden.rst cubeprop.rst dct.rst relativistic.rst dkh.rst proc_py.rst; psithonmol.rst cfour.rst mrcc_table_energy.rst cfour_table_energy.rst; cfour_table_grad.rst libefp.rst cppe.rst conda.rst pcmsolver.rst thermo.rst; chemps2.rst fisapt.rst plugin_v2rdm_casscf.rst psi4api.rst; manage_addon.rst numpy.rst build_planning.rst build_faq.rst; build_obtaining.rst libint.rst erd.rst simint.rst gcp.rst; index_tutorials.rst prog_faq.rst manage_index.rst manage_git.rst; prog_style_c.rst prog_blas.rst add_tests.rst plugin_snsmp2.rst dftnl.rst; libxc.rst gau2grid.rst prog_conduct.rst prog_intro.rst prog_newcode.rst; prog_setup.rst prog_welcome.rst prog_ways_to_add.rst; prog_full_integration.rst prog_style_py.rst prog_help.rst; prog_debug_profile.rst manage_release.rst plugin_psi4fockci.rst; brianqc.rst tdscf.rst pro",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:2586,test,testsuite,2586,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['testsuite']
Testability,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major cha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:1015,test,test,1015,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,1,['test'],['test']
Testability,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major chan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:14,test,test,14,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,11,"['stub', 'test']","['stub', 'test', 'testing', 'tests']"
Testability,"With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2715,test,test,2715,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"Y_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-bases; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-bases/autodoc_basissets_byfamily.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_basissets_byfamily.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislist.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistdunning.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistother.py; ${psi4_SOURCE_DIR}/tests/docs-bases/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc auxiliary basis sets""). # Autodoc plugins; # Not at all in working order; #add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E make_directory source/autodir_plugins; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_plugins.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_abbr_options_plugins.rst; # ${CCBD}/source/autodoc_available_plugins.rst; # ${CCBD}/source/autodir_plugins/glossary__aointegrals.rst; # ${CCBD}/source/autodir_plugins/module__aointegrals.rst; # ${CCBD}/source/autodir_plugins/aointegrals__print.rst; # DE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:18142,test,tests,18142,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"[LAB 10-19-2016]. * Majority of logos detached from main Psi4 repo into https://github.com/psi4/psi4media . [LAB 9-29-2016]. * See doc/sphinxman/source/psi4doc/themes/psi4doc/theme.conf; for Psi4 colors and customary icon linking. [LAB 2-18-2015]. * Text ""SI"" in ""PSI4"" changed to 82% size of ""P"" & ""4""; 54 pt for banner; files. This should avoid the ""Public School 14"" issue, while not looking; so lopsided as genuine small-caps font. [LAB 11-18-2014]. * Text ""Ab Initio"" changed to ""Open-Source"". [LAB 4-20-2012]. * Text ""PSI4"" is Optima Regular at 66 pt in CMYK = [100, 95, 0, 0]. * Text ""Ab Initio Quantum Chemistry"" is Optima Bold at 16 pt; in CMYK = [0, 0, 0, 100] with 100 (AI units) spacing stretch. * The difference between ""vector"" and other files in this directory is in; the trimming of self-interference at the tips of the psi graphic. This; process turns the psi into a raster object, so the color and 3D effects; are no longer editable. * All transparencies are set such that these can be placed over any color; background. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md:32,log,logos,32,media/README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md,1,['log'],['logos']
Testability,"_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16245,test,tests,16245,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9326,test,test,9326,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"_init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11583,test,tests,11583,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['test'],['tests']
Testability,"` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6307,test,testing,6307,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['testing']
Testability,"`. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can acciden",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9941,test,tests,9941,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,2,['test'],"['test', 'tests']"
Testability,"`; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62669,test,testing,62669,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3331,test,tests,3331,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"`` part). Then just run ``make`` in; your plugin directory. After any change to the plugin C++ code,; ``make`` must be run in the plugin directory to recompile the; ``myplugin.so`` executable, but recompiling the main |PSIfour| code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__init__.py`` file makes the plugin directory look like a; Python module, the plugin can be treated as such in an input file. The; location of the plugin directory must be included in :envvar:`PYTHONPATH`,; either externally in the calling shell or defined in the input file.; This is usually done by manipulating :envvar:`PSIPATH`. Then,; the plugin can be loaded as ``import myplugin`` and executed as; ``energy('myplugin')``. Any other Python functions are also available from; the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the ``# Load C++ plugin`` section). .. comment as modeled in :source:`tests/plugin_libcim/__init__.py`). .. literalinclude:: @S",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:9272,test,testfunction,9272,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testfunction']
Testability,"``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18393,test,tests,18393,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"`libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6076,test,testplugin,6076,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61984,test,test,61984,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,16,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"abbr_options_plugins.rst; # ${CCBD}/source/autodoc_available_plugins.rst; # ${CCBD}/source/autodir_plugins/glossary__aointegrals.rst; # ${CCBD}/source/autodir_plugins/module__aointegrals.rst; # ${CCBD}/source/autodir_plugins/aointegrals__print.rst; # DEPENDS ${CCSD}/document_plugins.py; # ${psi4_SOURCE_DIR}/plugins/*/*.py; # ${psi4_SOURCE_DIR}/plugins/*/doc.rst; # COMMENT ""Autodoc plugins""). # Autodoc efp fragments; if(${ENABLE_libefp}); add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_efpfrag.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_efpfrag.rst; DEPENDS ${CCSD}/document_efpfrag.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/*efp,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/h2o.efp>; COMMENT ""Autodoc efp fragments""); else(); file(WRITE ${CCBD}/source/autodoc_available_efpfrag.rst """"); endif(). # Format git log for feed; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E make_directory feed; COMMAND ${Python_EXECUTABLE} ${CCSD}/extract_changeset.py ${CCBD}; OUTPUT ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; DEPENDS ${CCSD}/extract_changeset.py; COMMENT ""Format git --log for psicode.org feed""). # Establishing dependencies for docs targets. # * mini github feed for psicode.org; add_custom_target(ghfeed; DEPENDS ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; COMMENT ""Preparing GitHub feed""). # * announcement; if (LATEX_COMPILER AND PDFLATEX_COMPILER); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF)""); else(); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html)""); endif(). # * quick mini-build for docs development; add_custom_target(sphinxmini; DEPENDS ${CCBD}/source/conf.py; COMMENT ""Building Sphinx abridged HTML documentation build""). # * full, proper build; add",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:19752,log,log,19752,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['log'],['log']
Testability,"able as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3799,test,test,3799,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"ables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_details.rst"" --mod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8889,test,tests,8889,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use L",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:1758,test,tests,1758,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['test'],['tests']
Testability,"aces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; --------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7111,test,test,7111,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"ack APPEND PROPERTY EXPORT_PROPERTIES ""${export_properties}""). # << Detect OpenMP and modify for BLAS/LAPACK >>; if(NOT TARGET tgt::MathOpenMP); list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}); set(TargetOpenMP_FIND_COMPONENTS ""CXX""); find_package(MathOpenMP); endif(). #include(CMakePrintHelpers); #cmake_print_properties(TARGETS OpenMP::OpenMP_CXX OpenMP::OpenMP tgt::MathOpenMP lapack; # PROPERTIES INTERFACE_COMPILE_DEFINITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindTargetOpenMP.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindMathOpenMP.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt:2317,test,test,2317,external/common/lapack/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt,2,['test'],"['test', 'tests']"
Testability,add_subdirectory(sp-uhf-mp2); add_subdirectory(sp-rohf-scf); add_subdirectory(sp-rhf-ccsd_t_-ecc); add_subdirectory(opt-rhf-scf); add_subdirectory(psi-rhf-scsmp2); add_subdirectory(pywrap-cbs1); add_subdirectory(puream) ; add_subdirectory(mints5); add_subdirectory(mints5-grad); add_subdirectory(kw-1); add_subdirectory(kw-2); add_subdirectory(kw-3); add_subdirectory(kw-4); add_subdirectory(kw-5); add_subdirectory(kw-6); #add_subdirectory(kw-7) # old keyword logic; #add_subdirectory(kw-8) # old keyword logic; add_subdirectory(psi-ghost-grad); add_subdirectory(scf4); add_subdirectory(mp2-1); add_subdirectory(pywrap-db1); add_subdirectory(pywrap-basis); add_subdirectory(dfmp2-1); add_subdirectory(sp-rhf-scf); add_subdirectory(sp-rhf-mp2); add_subdirectory(sp-rhf-ccsd); add_subdirectory(sp-rhf-ccsd-ao); add_subdirectory(sp-rhf-ccsd_t_); add_subdirectory(sp-rhf-ccsd_t_-ao); add_subdirectory(sp-rhf-ccsd_t_-ao-ecc) ; add_subdirectory(sp-rhf-ccsd_t_-fc); add_subdirectory(sp-rhf-cc3); add_subdirectory(sp-rhf-ccsdt) ; add_subdirectory(sp-uhf-scf); add_subdirectory(sp-uhf-ccsd); add_subdirectory(sp-uhf-ccsd_t_); add_subdirectory(sp-uhf-ccsd_t_-ao); add_subdirectory(sp-uhf-ccsd_t_-ao-ecc); add_subdirectory(sp-uhf-ccsd_t_-ecc); add_subdirectory(sp-uhf-cc3); add_subdirectory(sp-uhf-ccsdt); add_subdirectory(sp-rohf-mp2-sc); add_subdirectory(sp-rohf-mp4-sc); add_subdirectory(sp-rohf-ccsd); add_subdirectory(sp-rohf-ccsd_t_); add_subdirectory(sp-rohf-ccsdt); add_subdirectory(sp-rohf-ccsd-ao); add_subdirectory(sp-rohf-ccsd_t_-ao); add_subdirectory(sp-rohf-ccsd_t_-ao-ecc); add_subdirectory(sp-rohf-ccsd_t_-fc); add_subdirectory(opt-rhf-mp2); add_subdirectory(opt-rhf-ccsd_t_); add_subdirectory(opt-rhf-ccsd_t_-ecc); #add_subdirectory(psi-a24-grad) # old way of testing; add_subdirectory(psi-uhf-scsmp2); add_subdirectory(psi-rohf-scsmp2); add_subdirectory(psi-rhf-mp3); add_subdirectory(psi-uhf-mp3); add_subdirectory(psi-mp4); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/CMakeLists.txt:461,log,logic,461,tests/cfour/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/cfour/CMakeLists.txt,3,"['log', 'test']","['logic', 'testing']"
Testability,"added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modification",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7928,test,test,7928,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6036,test,test,6036,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to che",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1682,test,tests,1682,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6988,test,test,6988,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['test']
Testability,"ally happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; -------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5020,log,log,5020,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['log'],['log']
Testability,"apt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7061,test,testname,7061,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['testname']
Testability,"ar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along; with Psi4; if not, write to the Free Software Foundation, Inc.,; 51 F",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:6403,test,testboard,6403,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['test'],['testboard']
Testability,"ar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must corresp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4051,test,tests,4051,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['test'],['tests']
Testability,"are_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no fur",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9838,test,test,9838,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"arry the label ""psi"".; #; # The following labels are defined:; #; # smoketests = Does Psi4 work? A few basic operational tests plus; # one from each addon and addin; # quicktests = Best coverage possible in a 20 min envelope (for Travis-CI).; # This subset is chosen to provide one or more tests for each; # major module, but it does not necessarily cover all features; # of every module.; # longtests = The really long (> ~15 min) tests; #; # Common test runs:; #; # ctest -L quick run all quicktests; # ctest -LE long run all but longtests; #; # It is possible to specify more than one label per test. CMake; # expects a ;-separated list, e.g. ""psi;quicktests;scf""; # It is suggested to add at least a second label to specify the method tested.; #; # We use ctest -I [start,end] where start is the test number we start with; # and end is the test number we end with. We will then use math to back out; # the appropriate starts and ends...; #; #; # In order to ensure that this works properly, please add your tests to the; # appropriate variables given below. foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract dct-grad1 dct-grad2; dct-grad3 dct-grad4 dct1 dct2 dct3 dct4 dct5 dct6 dct7 dct8 dct9; dct10 dct1",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:1108,test,tests,1108,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['tests']
Testability,"arting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10008,test,testing,10008,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6947,test,testplugin,6947,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,2,['test'],['testplugin']
Testability,"as the; generic form,. .. math::; E_{\mathrm{xc}} = (1-\alpha) \int_{\mathrm{R}^3}; f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12247,test,test,12247,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['test'],['test']
Testability,"asic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to gener",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6890,test,testplugin,6890,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,"at the \file{configure}; script will know to create the Makefile for the new code. These; steps are included in the sequence below. \end{enumerate}. Assume the new code is an executable module and is named; \module{great\_code}. The directory containing the new code must; contain only those files which are to be checked in to the repository!; Then the following steps will check in a new piece of code to the main; repository:. \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt svn add great\_code}; \item {\tt svn ci -m ``Put comments here.''}; \item {\tt cd \$PSI4}; \item Edit \file{configure.ac} and add \file{great\_code} to the list. ; \item {\tt svn ci configure.ac -m ``Put comments here.''}; \item {\tt autoconf} ; \item {\tt cd \$PSI4/src/bin} ; \item Edit \file{Makefile.in} and add \file{great\_code} to the list. ; \item {\tt svn ci Makefile.in -m ``Put comments here.''}; \end{enumerate}; At this point, all of the code has been properly checked in, but you; should also test to make sure that the code can be checked out by; other programmers, and that it will compile correctly. The following; steps will store your personal version of the code, check out the new; code, and test-compile it:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt mv great\_code great\_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:12678,test,test,12678,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['test'],['test']
Testability,"ate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: E",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4120,test,tests,4120,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['test'],['tests']
Testability,"befp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp); add_subdirectory(sapt-ecp); add_subdirectory(scf-ecp); add_subdirectory(scf-ecp2); add_subdirectory(scf-ecp3); message(STATUS ""Adding test cases: Psi4 + ecpint""); endif(). # plugin regime; if(ENABLE_PLUGIN_TESTING); add_subdirectory(plugins); message(STATUS ""Adding test cases: Psi4 plugins""",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9584,test,test,9584,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:3994,test,test,3994,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['test'],['test']
Testability,"c driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_differe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16125,test,tests,16125,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"c psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""A",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16951,test,tests,16951,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"c`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60854,test,test,60854,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"cally 50-100). The radial grids are ""centered"" on the Bragg-Slater; radius of each atom, as described in Becke's 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the |scf__dft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:24865,benchmark,benchmark-level,24865,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['benchmark'],['benchmark-level']
Testability,"can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use LIBINT2_SHGAUSS_ORDERING=standard|gaussian; # *at Libint source generation time*. At Psi4 build time, it's going to be looking for standard (sss), so you'll have to; # edit the CMake to use a gss.; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can no longer be adapted to use a libtool+cmake source.; # * Libraries of different AM are not hot-swappable in a Psi4 build, but they only require a relinking.;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:2572,test,test,2572,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['test'],['test']
Testability,"cense. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2662,test,tested,2662,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['test'],['tested']
Testability,"cf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6955,test,tests,6955,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,3,['test'],"['test', 'tests']"
Testability,"ch programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:1262,log,login-id,1262,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['log'],['login-id']
Testability,"cies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4185,test,test,4185,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"code.F} ; from a binary module named \module{great\_code}:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/great\_code}; \item {\tt svn remove bad\_code.F}; \item {\tt svn ci -m ``Put comments here.''}; \end{enumerate}. \subsection{Checking out older versions of the code}; It is sometimes necessary to check out older versions of a piece of code.; Assume we wish to check out an old version of \PSIdetci. If this; is the case, the following steps will do this:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/detci}; \item {\tt svn co --revision \{2002-02-17\}}; \end{enumerate}. This will check the main repository and provide you with the code as; it stood exactly on February 17th, 2002. . \subsection{Examining the revision history}; It can be very useful to use cvs to see what recent changes have been; made to the code. Anytime one checks in a new version of a file, SVN; requires the user to provide comments on the changes with the {\tt -m}; flag. These comments go into a log information that may be easily; accessed through SVN. To see what changes have been made recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:16323,log,log,16323,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['log'],['log']
Testability,"conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5881,test,tests,5881,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"ctory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8936,test,test,8936,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"d files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61059,test,tests,61059,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"d of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12662,test,tests,12662,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"d variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../test",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6881,test,tests,6881,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"dded to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic derivatives, but these have so far only been verified for HF and DFT. .. warning:: ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the `forum <http://forum.psicode.org>`_. .. _`sec:scfqmmm`:. External potentials and QM/MM; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In addition to the implementation of :ref:`EFP <sec:libefp>` for accurate QM/MM; computations, |PSIfour| can perform more rudimentary QM/MM procedures via the; |scf__extern| keyword. The following snippet, extracted from the; :srcsample:`extern1` test case, demonstrates its use for a TIP3P external potential::. import numpy as np; external_potentials = [; [-0.834, np.array([1.649232019048,0.0,-2.356023604706]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-3.799961446760]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-0.912085762652]) / psi_bohr2angstroms]]. gradient('scf', external_potentials=external_potentials). The ``external_potentials`` array has three rows for three separate; particles, and it is passed to the SCF code on the last line. The; rows are composed of the atomic charge, x coordinate, y coordinate,; and z coordinate in that order. The atomic charge and coordinates are; specified in atomic units, [e] and [a0]. Add as many particle rows as; needed to describe the full MM region. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, setting an; external potential like the above looked like ::. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.3560",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:53993,test,test,53993,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['test'],['test']
Testability,"de is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings are absorbed as-is, so; please use reST math formatting (essentially ``$latex math$`` :math:`\Rightarrow`; ``:math:`latex math```).; Starting around |PSIfour| 1.1, MathJax is used for in-browser LaTeX; rendering in place of offline PNG generation of math images. Check the; online re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7656,test,test,7656,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['test']
Testability,"dif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Fou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8312,test,test,8312,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"e in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, comput",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16635,test,testing,16635,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"e name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14653,test,tests,14653,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"e values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10190,test,tests,10190,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"e, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symli",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:2999,test,tests,2999,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"e-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21493,sandbox,sandbox,21493,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['sandbox'],['sandbox']
Testability,"ease into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulne",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27628,sandbox,sandbox,27628,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['sandbox'],['sandbox']
Testability,"easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16784,test,testing,16784,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"ed by cp(), database(), and optimize(). - Upon checking in a new python file, edit the file ``psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:4885,test,test,4885,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['test'],['test']
Testability,"ed number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64608,test,test,64608,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,3,['test'],"['test', 'tests']"
Testability,"ed tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15107,test,tests,15107,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"ee Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; database(); see: db(); database(); single: database(). .. _`sec:db()`:. Database |w---w| :py:func:`~psi4.driver.wrapper_database.database`; ==================================================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. .. autofunction:: psi4.driver.wrapper_database.database(name, db_name [, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset]). .. index:: ; pair: database(); output. Output; ^^^^^^. At the beginning of a database job is printed a listing of the individual system ; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers. ::. RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst:1479,benchmark,benchmark,1479,doc/sphinxman/source/db.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/db.rst,1,['benchmark'],['benchmark']
Testability,"eeded from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, regi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12056,test,tests,12056,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"el""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {pref",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63370,test,test,63370,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"en copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10764,test,test,10764,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"en sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be des",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8125,test,test,8125,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both wil",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3092,test,test,3092,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"eneral Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:proc_py`:. Adding Methods to Driver; ========================. ``proc.py``; -----------. Methods that are computable by only one module should be added to the ``procedures`` dictionary in; :source:`psi4/driver/procrouting/proc_table.py`; that associates method names with functions; to run them located in :source:`psi4/driver/procrouting/proc.py`. The function should start with a declaration, as below. ``methodname`` is; never seen by users, so it's good to be specific to method or module.; The function must always take as arguments ``(name, **kwargs)``. ::. # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of ``name`` several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; :py:func:`~psi4.driver.energy()`, etc. in driver.py and need not be repeated here. ::. # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; :py:class:`~psi4.driver.p4util.OptionsState` object is set up. See; :ref:`sec:handlingOptions_py` for details. *All* options set by the; function need to be included here, and *only* options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) are given without module. ::. # include if any options set; optstash = OptionsState(; # these and other basis options should have no associated module; ['BASIS'],; ['",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst:1778,test,test,1778,doc/sphinxman/source/proc_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst,1,['test'],['test']
Testability,"ense as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:progfaq`:. ===============; Programmers FAQ; ===============. C++ Style in |PSIfour|; ----------------------. #. :ref:`faq:nullptr`; #. :ref:`faq:automakeshared`; #. :ref:`faq:autodecl`; #. :ref:`faq:editorcodestyle`; #. :ref:`faq:githookscodestyle`; #. :ref:`faq:manualcodestyle`. Modules in |PSIfour|; --------------------. #. :ref:`faq:readoptions`; #. :ref:`faq:blaswrappers`; #. :ref:`faq:blasmatrix`; #. :ref:`faq:labas`; #. :ref:`faq:orbdims`; #. :ref:`faq:orbspaces`. Interfacing with |PSIfour|; --------------------------. #. :ref:`faq:addonname`; #. :ref:`faq:addoncmake`. Versioning |PSIfour|; --------------------. #. :ref:`faq:versionbump`; #. :ref:`faq:remotetag`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:psi4version`. Releasing |PSIfour|; -------------------. #. :ref:`faq:annualprocedure`; #. :ref:`faq:prereleaseprocedure`; #. :ref:`faq:releaseprocedure`; #. :ref:`faq:postreleaseprocedure`. Workflow; --------. #. :ref:`faq:localaddon`; #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`; #. :ref:`faq:gdblldb`; #. :ref:`faq:grepascii`; #. :ref:`faq:ignoringadvice`. Miscellaneous; -------------. #. :ref:`faq:add_tests`; #. :ref:`faq:add_psithon_tests`; #. :ref:`faq:add_psiapi_tests`; #. :ref:`How to set up PSIthon tests to run through pytest <faq:psithon_through_pytest>`; #. :ref:`faq:findmissingoutputref`; #. :ref:`faq:githubcodereview`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst:2304,test,tests,2304,doc/sphinxman/source/prog_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst,1,['test'],['tests']
Testability,"env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --quiet --writefile ""${CCSD}/source/preview_capabilities_scf.rst"" --mode scf --driver egh; OUTPUT ${CCBD}/source/autodoc_capabilities_details.rst; ${CCBD}/source/autodoc_capabilities_summary.rst; ${CCBD}/source/autodoc_capabilities_ccenergy.rst; ${CCBD}/source/autodoc_capabilities_fnocc.rst; ${CCBD}/source/autodoc_capabilities_dfmp2.rst; ${CCBD}/source/autodoc_capabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; DEPENDS ${CCSD}/document_capabilities.py; ${CCSD}/../../samples/stdsuite_psi4.txt; COMMENT ""Autodoc capabilities""). # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:15031,stub,stubs,15031,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['stub'],['stubs']
Testability,"ept* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the an",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3622,test,test,3622,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"er: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4631,test,testing,4631,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['testing']
Testability,"erent ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14530,test,test,14530,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['test']
Testability,"ergy tu3-h2o-opt scf-response1 scf-response2 scf-response3; scf-cholesky-basis scf-auto-cholesky; tu4-h2o-freq tu5-sapt tu6-cp-ne2 x2c1 x2c2 x2c3 x2c-perturb-h zaptn-nh2; options1 cubeprop-esp dft-smoke scf-hess1 scf-hess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6555,test,test,6555,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"erms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1338,test,test,1338,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ess2 scf-hess3 scf-hess4 scf-hess5 scf-freq1 dft-jk scf-coverage; dft-custom-dhdf dft-custom-hybrid dft-custom-mgga dft-custom-gga; pywrap-bfs pywrap-align pywrap-align-chiral mints12 cc-module; tdscf-1 tdscf-2 tdscf-3 tdscf-4 tdscf-5 tdscf-6 tdscf-7; dft-pruning freq-masses sapt9 sapt10 sapt11 scf-uhf-grad-nobeta; linK-1 linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:6791,test,tests,6791,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,3,['test'],['tests']
Testability,"est Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parall",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7009,test,test-specific,7009,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test-specific']
Testability,"f you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; ---",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68845,log,logging,68845,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['logging']
Testability,"fied Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4 and 2.0. Larger systems,; particularly conjugated systems, will typically have an optimized :math:`\omega`; between 0.1 and 0.5. Fractional Particle Curves; ~~~~~~~~~~~~~~~~~~~~~~~~~~. The behavior of the electronic energy and HOMO energy across fractional numbers; of electrons is extremely useful for elucidating the MSIE behavior of various; functional technologies. |PSIfour| features an efficient fractional-particle DFT; code, written into the UKS spin specialization. Due to a combination of DIIS and; reuse of integrals/guess orbitals across a range of fractional occupations, this; code is able to perform fractional occupation curves for systems with up to 60; atoms, across a wide range of the particle number :math:`N`. Two python macros exist for this code. The first is :py:func:`~psi4.driver.frac.frac_traverse`, which is; used to investigate the fractional occupation behavior within one electron above; and below the neutral. A",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:29316,test,test,29316,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['test'],['test']
Testability,"file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy =",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7430,test,test,7430,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as sh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7035,test,tested,7035,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tested']
Testability,"ft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ; error of 0.02 kcal/mol for the same benchmark. Both also reduce the grid order by 1 for H ; and He atoms and avoid any pruning of heavy atoms (Z >= 36) Other schemes mentioned in ; the keyword documentation (e.g. P_SLATER) are experimental and should be considered expert-only. Once the molecular quadrature grid is built, the points are partitioned into; blocks of points which are spatially close to each other. We use an octree; algorithm for this procedure, which produces a good balance between spatial; compactness of each block (which helps achieve linear scaling due to the; exponential decay of the basis functions), and retaining a large number of; points in each block (which helps keep the FLOP rate up by allowing for a; reasonably large amount of BLAS3/BLAS2 work to form the densities and potentials; in each block). For each block, a united set of significant basis functions is; determined by the cutoff radius of each shell of basis functions. The size of; this cutoff radius (and thereby the accuracy of the de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:25072,benchmark,benchmark,25072,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['benchmark'],['benchmark']
Testability,"g all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that cont",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60392,test,tests,60392,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"g strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10370,test,tests,10370,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"g up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``py",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14290,log,logic,14290,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['log'],['logic']
Testability,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2179,test,test,2179,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,1,['test'],['test']
Testability,"he label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't wor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12263,test,tests,12263,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,3,['test'],"['test-name', 'tests']"
Testability,"her factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PAS",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64186,test,test,64186,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],"['test', 'tests']"
Testability,"hift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (log",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29430,test,tested,29430,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tested']
Testability,"hinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4393,test,test,4393,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability,"hould be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast wit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12967,test,test,12967,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"i4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1354,test,testSuitecfour,1354,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['testSuitecfour']
Testability,"i`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12537,test,test,12537,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"id full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69154,log,log,69154,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability,"idered, and the CP-corrected CCSD(T); interaction energies (in |kcalpermol|) at each geometry. Doing all this; in a single input is surprisingly easy in |PSIfour|. Here's the input; (available as :srcsample:`tu6-cp-ne2`). .. literalinclude:: @SFNX_INCLUDE@samples/tu6-cp-ne2/input.dat. First, you can see the ``molecule`` block has a couple dashes to; separate the monomers from each other. Also note we've used a Z-matrix to; specify the geometry, and we've used a variable (``R``) as the; interatomic distance. We have *not* specified the value of ``R`` in; the ``molecule`` block like we normally would. That's because we're; going to vary it during the scan across the potential energy surface.; Below the ``molecule`` block, you can see the ``Rvals`` array; specified. This is a Python array holding the interatomic distances we; want to consider. In Python, arrays are surrounded by square brackets, and; elements are separated by commas. The next lines, ``set basis aug-cc-pVDZ`` and ``set freeze_core True``,; are familiar from previous test cases. Next comes a slightly; unusual-looking line, ``ecp = {}``. This is Python's way of initializing; a ""dictionary"". We're going to use this dictionary to store the; counterpoise-corrected energies as they become available. A dictionary is; like an array, but we can index it using strings or floating-point numbers; instead of integers if we want. Here, we will index it using; floating-point numbers, namely, the ``R`` values. This winds up being; slightly more elegant than a regular array in later parts of the input; file. The next section, beginning with ``for R in Rvals:``, loops over the; interatomic distances, ``R``, in our array ``Rvals``. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, ``dimer.R = R``,; sets the Z-matrix variable ``R`` of the molecule called ``dimer``; to the ``R`` value extracted from the ``Rvals`` array. The next line,; ``ecp[",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:20080,test,test,20080,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['test'],['test']
Testability,"idual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger fail",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15032,test,tests,15032,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"ies.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 20",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2280,test,test,2280,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5681,test,tests,5681,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"ifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work in the Python layer is a good idea, as it allows the many; Python tools for farming out *embarrassingly parallel* workloads to be used,; while the C++ layer can be used to implement the energy function to be; differentiated. In SCF, we have a number of sources of external embedding potentials that could; enter the calculation. Allowing Python to handle only the details of driving; the SCF iterations, such as external potentials and convergence acceleration; methods, but deferring to C++ to do the heavy lifting for building and; diagonalizing the Fock matrix also takes advantage of the two languages'; strengths and improves maintainability of the code.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:6887,log,logic,6887,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['log'],['logic']
Testability,"il that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14604,test,test,14604,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7461,test,tests,7461,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"include(TestingMacros). add_regression_test(mints-benchmark ""psi;mints;cart""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints-benchmark/CMakeLists.txt:50,benchmark,benchmark,50,tests/mints-benchmark/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/mints-benchmark/CMakeLists.txt,1,['benchmark'],['benchmark']
Testability,"indows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:6258,test,testsuite,6258,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['test'],['testsuite']
Testability,"ipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7696,sandbox,sandbox,7696,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['sandbox'],['sandbox']
Testability,"irectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_sub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8426,test,test,8426,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"irectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp); add_subdirectory(sapt-ecp); add_subdirectory(scf-ecp); add_subdirectory(scf-ecp2); add_subdirectory(scf-ecp3); message(STATUS ""Adding test cases: Psi4 + ecpint""); endif(). # plugin regime; if(ENABLE_PLUGIN_TESTING); add_subdirectory(plugins); message(STATUS ""Adding test cases: Psi4 plugins""); endif(). # pytest regime; add_subdirectory(pytests); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9726,test,test,9726,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,6,['test'],['test']
Testability,"is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; progra",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19735,test,tests,19735,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['test'],['tests']
Testability,"it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speakin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1550,test,test,1550,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebook",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9418,test,testing,9418,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"ive to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi4.driver.qcdb.vib.thermo`; as is shown in :srcsample:`freq-isotope2`. A few summary psivars are set: ""ZPVE"", ""THERMAL ENERGY CORRECTION"",; ""ENTHALPY CORRECTION"", ""GIBBS FREE ENERGY CORRECTION"", ""ZERO K; ENTHALPHY"", ""THERMAL ENERGY"", ""ENTHALPY"", ""GIBBS FREE ENERGY"".; But additionally, every valid combination of {S, Cv, Cp, ZPE, E, H, G}; with {elec, trans, rot, vib, corr, tot} (e.g., vibrational entropy,; S_vib, and enthalpy correction, H_corr) is returned by dictionary; from the ``thermo`` function. See :source:`tests/pytests/test_vibanalysis.py`; (near the end) for an example. .. index::; pair: vibrational analysis; output. Output; ^^^^^^. The full list of keywords for thermo is provided in Appendix :ref:`apdx:thermo`. Information on the Psithon function that drives frequency analyses is provided; at :py:func:`~psi4.driver.frequency`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst:3529,test,tests,3529,doc/sphinxman/source/thermo.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst,1,['test'],['tests']
Testability,"ives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:5064,log,logo,5064,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['log'],['logo']
Testability,"ix Makefiles"">,${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc,${psi4_SOURCE_DIR}/psi4/src/psi4/fnocc/ccsd.cc>; COMMENT ""Autodoc PSI variables c-side""). # Autodoc Cfour PSI variables; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E make_directory source/autodir_psivariables; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_cfour.py ${CCSD}; OUTPUT ${CCBD}/source/autodir_psivariables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --wri",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8455,test,test,8455,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['test']
Testability,"ke --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). F",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60891,test,testname,60891,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,4,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"l <sec:tutorial>` section,; the :py:func:`~psi4.driver.driver_nbody.nbody` wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example, ::. energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules. |PSIfour| also provides the :py:func:`~psi4.driver.cbs` wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,::. # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree--Fock energy in the; largest basis (cc-pVTZ). :py:func:`~psi4.driver.cbs` can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used. Another very useful and powerful feature of |PSIfour| is the ability; to compute results on entire databases of molecules at a time,; as provided by the :py:func:`~psi4.driver.wrapper_database.database` wrapper. For example,::. database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (``cp=1``) on all members of Hobza's S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others. These wrapper functions are discussed separately in; :ref:`sec:psithonFunc`. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the ``set {...}`` block or with any other ``set`` command. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:16706,benchmark,benchmark,16706,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,2,['benchmark'],['benchmark']
Testability,"l be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DFTNL; .. _`sec:dftnl`:. DFT-NL; ======. .. codeauthor:: Daniel G. A. Smith and Holger Kruse; .. sectionauthor:: Holger Kruse. Non-local (NL), density based correlation energy from the VV10 kernel can be added; to arbitrary functionals. .. math:: E_{DFT-NL}=E_{DFT}+E_{NL}. For pre-defined functionals (see Functional overview in :ref:`this Table <table:dft_all>` ) it is sufficient to add `-NL` to; the functional name::. energy('b3lyp-nl'). Modification of the parameters `b` and `C` is done setting |scf__dft_vv10_b| and |scf__dft_vv10_c|. The `C` is usually left unchanged and the originally proposed; value of `C=0.0093` is used. Adding |scf__dft_vv10_b| to any functional activates the calculation of the VV10 kernel. A BLYP-NL calculation can be set as follows::. set DFT_VV10_B 4.0; energy('blyp'). The default `C` parameter will be used. Similar to |scf__dft_dispersion_parameters| the tuple |scf__nl_dispersion_parameters| can used::. set NL_DISPERSION_PARAMTERS [4.0]; energy('blyp'). which is equivalent to the example above. Further examples can be found in the respective :source:`regression test <tests/dft-vv10/input.dat>`. post-SCF time savings; ~~~~~~~~~~~~~~~~~~~~~. Substantial time-savings for energy calculations are available by evaluating the VV10 kernel only at the converged electron density, i.e. in a post-SCF fashion.; The deviations from the fully self-consistent treatment are usually minimal. To activate this set |scf__dft_vv10_postscf| to `true`.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst:2178,test,test,2178,doc/sphinxman/source/dftnl.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftnl.rst,2,['test'],"['test', 'tests']"
Testability,"lagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10672,test,test,10672,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"lecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""gr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9535,test,test,9535,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"les *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Pytho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12217,test,tests,12217,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test-name', 'tests']"
Testability,"list(APPEND sources; exceptions; fcidump; fchk; inpsight; numpy_helper; optproc; p4regex; procutil; python_helpers; solvers; testing; text; util; writer; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/p4util); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt:125,test,testing,125,psi4/driver/p4util/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt,1,['test'],['testing']
Testability,"list(APPEND sources; local.cc; x2cint.cc; orbitalspace.cc; maketab.cc; oeprop.cc; writer.cc; transform.cc; sieve.cc; multipolesymmetry.cc; shellrotation.cc; deriv.cc; integralparameters.cc; twobody.cc; vector.cc; sobasis.cc; cartesianiter.cc; basisset.cc; wavefunction.cc; irrep.cc; fjt.cc; chartab.cc; corrtab.cc; symop.cc; benchmark.cc; get_writer_file_prefix.cc; petitelist.cc; solidharmonics.cc; multipoles.cc; sointegral.cc; extern.cc; factory.cc; psimath.cc; dimension.cc; molecule.cc; intvector.cc; mintshelper.cc; numinthelper.cc; coordentry.cc; matrix.cc; gshell.cc; integraliter.cc; pointgrp.cc; rep.cc; cdsalclist.cc; erd_eri.cc; angularmomentum.cc; orthog.cc; ). # l2intf is a listing of all the files that include libint2's boys.h include (which is included in L2's engine.h). they must; # all be built with the same C++ standard, which is currently chosen as C++14 due to; # problems building with C++17 using Intel compilers on Linux.; # These problems were seen at least through version 2021.4 but were relieved by 2021.8; # Any files including the engine.h should be added here instead of the sources list above.; add_library(l2intf OBJECT ; dipole.cc; electricfield.cc; electrostatic.cc; eribase.cc; eri.cc; integral.cc; kinetic.cc; mcmurchiedavidson.cc # includes <libint2/boys.h>; multipolepotential.cc # includes <libint2/boys.h>; nabla.cc; onebody.cc; overlap.cc; potential.cc; potentialint.cc; quadrupole.cc; rel_potential.cc; tracelessquadrupole.cc; 3coverlap.cc; ); set_property(TARGET l2intf PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); set_property(TARGET l2intf PROPERTY POSITION_INDEPENDENT_CODE ON); # below are what l2intf files would ordinarily have gotten from psi4_add_module.; # * first brings OpenMP headers; # * second brings l2. Linux needs only headers, but Windows needs headers and linking, so slight overkill here; target_link_libraries(l2intf; PRIVATE; tgt::lapack; Libint2::cxx; ). psi4_add_module(lib mints sources); target_link_libraries(mints P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libmints/CMakeLists.txt:325,benchmark,benchmark,325,psi4/src/psi4/libmints/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libmints/CMakeLists.txt,1,['benchmark'],['benchmark']
Testability,"long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16221,log,log,16221,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['log']
Testability,"long with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10254,test,test,10254,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"m {\tt svn ci -m ``Put comments here.''}; \end{enumerate}. \subsection{Checking out older versions of the code}; It is sometimes necessary to check out older versions of a piece of code.; Assume we wish to check out an old version of \PSIdetci. If this; is the case, the following steps will do this:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/detci}; \item {\tt svn co --revision \{2002-02-17\}}; \end{enumerate}. This will check the main repository and provide you with the code as; it stood exactly on February 17th, 2002. . \subsection{Examining the revision history}; It can be very useful to use cvs to see what recent changes have been; made to the code. Anytime one checks in a new version of a file, SVN; requires the user to provide comments on the changes with the {\tt -m}; flag. These comments go into a log information that may be easily; accessed through SVN. To see what changes have been made recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:16540,log,log,16540,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['log'],['log']
Testability,"mand tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18443,test,test,18443,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2060,test,test,2060,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,1,['test'],['test']
Testability,"ment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18636,log,log,18636,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['log']
Testability,"message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIB",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7524,test,test,7524,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"mitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------------------------------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10023,test,tests,10023,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['tests']
Testability,"mmits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:14344,log,log,14344,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['log']
Testability,"module{great\_code}. The directory containing the new code must; contain only those files which are to be checked in to the repository!; Then the following steps will check in a new piece of code to the main; repository:. \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt svn add great\_code}; \item {\tt svn ci -m ``Put comments here.''}; \item {\tt cd \$PSI4}; \item Edit \file{configure.ac} and add \file{great\_code} to the list. ; \item {\tt svn ci configure.ac -m ``Put comments here.''}; \item {\tt autoconf} ; \item {\tt cd \$PSI4/src/bin} ; \item Edit \file{Makefile.in} and add \file{great\_code} to the list. ; \item {\tt svn ci Makefile.in -m ``Put comments here.''}; \end{enumerate}; At this point, all of the code has been properly checked in, but you; should also test to make sure that the code can be checked out by; other programmers, and that it will compile correctly. The following; steps will store your personal version of the code, check out the new; code, and test-compile it:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt mv great\_code great\_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:12884,test,test-compile,12884,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['test'],['test-compile']
Testability,"n energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6303,test,tests,6303,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"n environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17371,test,test,17371,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"n every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pyte",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14431,test,tests,14431,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"n/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the followi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:6480,test,testplugin,6480,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['testplugin']
Testability,"n; * Scraper looks for ``Process::environment.globals``, ``set_array_variable``, ``variables_``, etc. lines and comments in the C++ code; * C-side, the module for the variable is determined by the directory where it's found.; * Scraper looks for ``set_variable`` together with ``# P::e MODULE`` lines and comments in the Python code; * Py-side, the module for the variable is specified by ``MODULE`` in the comment; * When a variable is set by code in either language, e.g., ``variables_[varname.str()]`` rather than plain string, ``variables_[""FCI TOTAL ENERGY""]``, add a plain string line as a single-line comment, so the scraper can find it.; * Add new places to scrape for variables to :source:`doc/sphinxman/document_psivariables.pl`; * For now, we're scraping both global and Wfn variables; * All of these show up in referenceable appendices like ``apdx:detci_psivar``; * Plugins: ``doc.rst`` text, \*.py modules, and C++ keywords in ``psi4/tests/plugin_*`` plugin directories (disabled at the moment); * PSI Files: scratch file names and numbers in :source:`psi4/include/psi4/psifiles.h`. Some documentation is even extracted from |PSIfour| objects at runtime. * psi4: docstrings for the C++ submodule ``psi4.core`` and the Python submodule ``psi4.driver`` that comprise |PSIfour|. C++ docstrings from ""core"" and ""export"" files in :source:`psi4/src/`, and Py docstrings from :source:`psi4/driver/`.; * DFT: functional availability and characteristics as encoded in :source:`psi4/driver/procrouting/dft`; * BasisFamily: fitting basis sets for each orbital basis as encoded in :source:`psi4/driver/qcdb/basislistdunning.py` and :source:`psi4/driver/qcdb/basislistother.py`. Building all the documentation takes ~10 minutes. There is now good; dependency structure built into the :source:`doc/sphinxman/CMakeLists.txt`; , so very long builds should be infrequent (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:5002,test,tests,5002,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['tests']
Testability,"nabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). if(ENABLE_gdma OR ENABLE_dkh OR ENABLE_erd OR ENABLE_PCMSolver); if(psi4_SKIP_ENABLE_Fortran); message(STATUS ""NOT Enabling Fortran""); else(); enable_language(Fortran); set(Fortran_ENABLED ON) # communicate required languages with psi4-core; message(STATUS ""Enabling Fortran""); endif(); endif(). if(ENABLE_erd); message(FATAL_ERROR ""The Psi4/ERD interface is broken, probably since spring 2017. It's toast (comment this line to try), but disabling for now.""); message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, known failures will be caught and halted, but perhaps other types not tested and identified will give *wrong* answers. Consider this your warning.""); endif(). ############################ Options: Build How? #############################; include(psi4OptionsTools); option_with_print(BUILD_SHARED_LIBS ""Build internally built Psi4 add-on libraries as shared, not static"" OFF); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); include(xhost) # defines: option(ENABLE_XHOST ""Enable processor-specific optimization"" ON); # below are uncommon to adjust; option_with_print(ENABLE_OPENMP ""Enables OpenMP parallelization"" ON); option_with_print(ENABLE_AUTO_BLAS ""Enables CMake to auto-detect BLAS"" ON); option_with_print(ENABLE_AUTO_LAPACK ""Enables CMake to auto-detect LAPACK"" ON); option_with_print(ENABLE_PLUGIN_TESTING ""Test the plugin templates build and run"" OFF); option_with_print(ENABLE_CYTHONIZE ""Compile each python file rather than plaintext (requires cython) !experimental!"" OFF); option_with_f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:9151,test,tested,9151,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['test'],['tested']
Testability,"name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63181,test,test,63181,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"nce set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6760,test,test-labels,6760,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test-labels']
Testability,"nch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10205,test,tested,10205,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tested']
Testability,"ng commands that meets your needs::. >>> psi4 --plugin-name myplugin --plugin-template aointegrals; >>> psi4 --plugin-name myplugin --plugin-template mointegrals; >>> psi4 --plugin-name myplugin --plugin-template sointegrals; >>> psi4 --plugin-name myplugin --plugin-template wavefunction; >>> psi4 --plugin-name myplugin --plugin-template scf; >>> psi4 --plugin-name myplugin --plugin-template dfmp2. .. >>> psi4 --plugin-name myplugin --plugin-template ambit. .. Several stable sample plugin directories are available to consult in the; .. :source:`plugins` directory. Other plugin directories can be used as models; .. but are in active development. For documentation on plugin modules, see; .. :ref:`Available Plugins <sec:availablePlugins>`.; .. ; .. * :source:`plugins/aointegrals/aointegrals.cc` ; .. An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; .. ; .. * :source:`plugins/backtrans/backtrans.cc` ; .. A test of the one- and two-particle density matrix backtransformation code.; .. ; .. * :source:`plugins/mointegrals/mointegrals.cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environmen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:3804,test,test,3804,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['test']
Testability,"ng test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8662,test,test,8662,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"ngle command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4831,assert,asserted,4831,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['assert'],"['assert', 'asserted']"
Testability,"nted lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7518,test,test,7518,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"nvvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33571,test,test,33571,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4211,test,tests,4211,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['tests']
Testability,"o read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4957,test,tests,4957,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"oking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60472,test,test,60472,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"olo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10116,test,testing,10116,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],"['testing', 'tests']"
Testability,"omput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10.1063/1.4739423 <https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8759,benchmark,benchmark,8759,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['benchmark'],['benchmark']
Testability,"on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64145,test,tests,64145,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"ongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10919,test,tests,10919,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"onment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26720,sandbox,sandbox,26720,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['sandbox'],['sandbox']
Testability,"or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:5835,test,testplugin,5835,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,2,['test'],['testplugin']
Testability,"or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; ---------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68867,log,logging,68867,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['logging']
Testability,"oreach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7230,test,test,7230,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"ory source/autodir_psivariables; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_cfour.py ${CCSD}; OUTPUT ${CCBD}/source/autodir_psivariables/module__cfour.rst; DEPENDS ${CCSD}/document_cfour.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/cfour.py; ${CCBD}/source/autodoc_psivariables_bymodule.rst; COMMENT ""Autodoc Cfour PSI variables""). # Autodoc databases; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_databases.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_databases.rst; DEPENDS ${CCSD}/document_databases.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/*.py,${psi4_SOURCE_DIR}/psi4/share/psi4/databases/S22.py>; COMMENT ""Autodoc databases""). # Autodoc test cases; add_custom_command(; COMMAND ${PERL_EXECUTABLE} ${CCSD}/document_tests.pl ${CCSD}; OUTPUT ${CCBD}/source/autodoc_testsuite_corepsi4.rst; ${CCBD}/source/autodoc_testsuite_dftd3.rst; DEPENDS ${CCSD}/document_tests.pl; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/input.dat,${psi4_SOURCE_DIR}/tests/ghosts/input.dat>; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${psi4_SOURCE_DIR}/tests/*/*/input.dat,${psi4_SOURCE_DIR}/tests/dftd3/energy/input.dat>; COMMENT ""Autodoc test cases""). # Autodoc capabilities; # * tables are generated in pairs: one to build directory for Sphinx to use and one for the repo for devs to track; # * PYTHONPATH bit is because this is the only document_* script that uses a fn from Psi4; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabilities.py --stdsuite ${CCSD}/../../samples/stdsuite_psi4.txt --sphinx --quiet --writefile ""source/autodoc_capabilities_details.rst"" --mode details; COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${CCBD}/../../stage/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}:$PYTHONPATH ${Python_EXECUTABLE} ${CCSD}/document_capabili",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:8755,test,tests,8755,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"pabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; DEPENDS ${CCSD}/document_capabilities.py; ${CCSD}/../../samples/stdsuite_psi4.txt; COMMENT ""Autodoc capabilities""). # Autodoc stubs; add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_stubs.py ${CCSD}; OUTPUT ${CCBD}/source/api/psi4.core.set_variable.rst; DEPENDS ${CCSD}/document_stubs.py; COMMENT ""Autodoc stubs""). # # Autodoc driver; # add_custom_command(; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_driver.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_driver.rst; # DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/*.py; # ${CCSD}/document_driver.py; # COMMENT ""Autodoc driver""). # # Autodoc psi4 module; # add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINAR",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:15615,test,tests,15615,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"ples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61841,test,tests,61841,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"ppropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60768,test,tests,60768,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python/driver.py``. For a behind-the-scenes function or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). Th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:4911,test,test,4911,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['test'],['test']
Testability,psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:1246,log,logo,1246,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,2,['log'],"['logo', 'logoColor']"
Testability,"psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunct",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16831,test,tests,16831,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14930,test,test,14930,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"put.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofunction:: psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_fchkfiles. .. autofunction:: psi4.compare_fcidumps. .. autofunction:: psi4.compare_moldenfiles. .. autofunction:: qcdb.compare_vibinfos. Extra QCA Functions; -------------------. .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:17086,test,testing,17086,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['testing']
Testability,"pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15158,test,test,15158,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"q:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structur",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5559,test,test,5559,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['test']
Testability,"r a sample input. The PCM model and molecular cavity are specified in a ``pcm`` section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of |Psifour| and is fully documented; `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PCM would look like the following: ::. molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; :srcsample:`pcmsolver/ccsd-pte`,; :srcsample:`pcmsolver/scf`,; :srcsample:`pcmsolver/opt-fd`,; :srcsample:`pcmsolver/dft`, and; :srcsample:`pcmsolver/dipole`. Keywords for PCMSolver; ~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pcm.rst; .. include:: autodir_options_c/pcm__pcm_scf_type.rst; .. include:: autodir_options_c/pcm__pcm_cc_type.rst. .. _`cmake:pcmsolver`:. How to configure PCMSolver for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) PCMSolver. * Upstream Dependencies |w---w| PCMSolver |dr| Fortran, zlib. **CMake Variables**. * :makevar:`ENABLE_PCMSolver` |w---w| CMake variable toggling whether Psi4 builds with PCMSolver; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:6256,test,tests,6256,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['test'],['tests']
Testability,"r developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function::",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16156,test,tests,16156,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"r of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) al",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5819,test,tests,5819,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"r the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50053,test,testing,50053,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],"['testing', 'tests']"
Testability,r1 dft-grad-lr2 dft-grad-lr3 dft-grad-disk; dfomp2p5-grad2 dfrasscf-sp dfscf-bz2 dft-b2plyp dft-grac dft-ghost dft-grad-meta; dft-freq dft-freq-analytic1 dft-freq-analytic2 dft-grad1 dft-grad2 dft-psivar dft-b3lyp dft1 dft-vv10; dft1-alt dft2 dft3 dft-omega dft-dens-cut dlpnomp2-1 dlpnomp2-2 dlpnomp2-3; docs-bases docs-dft explicit-am-basis extern1 extern2 extern3 extern4; fsapt1 fsapt2 fsapt-terms fsapt-allterms fsapt-ext fsapt-ext-abc fsapt-ext-abc2; fsapt-ext-abc-au isapt1 isapt2 isapt-siao1 fisapt-siao1 isapt-charged; fci-dipole fci-h2o fci-h2o-2 fci-h2o-fzcv fci-tdm fci-tdm-2; fci-coverage; fcidump; fd-freq-energy fd-freq-energy-large fd-freq-gradient; fd-freq-gradient-large fd-gradient freq-isotope1 freq-isotope2 fnocc1 fnocc2; fnocc3 fnocc4 fnocc5 fnocc6 fnocc7 frac frac-ip-fitting frac-sym frac-traverse ghosts gibbs; lccd-grad1 lccd-grad2 matrix1 matrix2; mbis-1 mbis-2 mbis-3 mbis-4 mbis-5 mbis-6 mcscf1 mcscf2 mcscf3; mints1 mints2 mints3 mints4 mints5 mints6 mints8 mints-benchmark mints-helper; mints9 mints10 mints15 molden1 molden2 mom mom-h2o-3 mom-h2o-4; mp2-1 mp2-def2 mp2-grad1 mp2-grad2 mp2-h mp2p5-grad1 mp2p5-grad2 mp3-grad1 mp3-grad2; mp2-property mpn-bh nbody-he-cluster nbody-intermediates nbody-nocp-gradient; nbo nbody-cp-gradient nbody-vmfc-gradient nbody-vmfc-hessian nbody-hessian nbody-convergence; nbody-freq nbody-multi-level nbody-multi-level-2 numpy-array-interface; olccd-freq1 olccd-grad1 olccd-grad2 olccd1 olccd2 olccd3; omp2-1 omp2-2 omp2-3 omp2-4 omp2-5 omp2-grad1 omp2-grad2; omp2p5-1 omp2p5-2 omp2p5-grad1 omp2p5-grad2 omp3-1 omp3-2; omp3-3 omp3-4 omp3-5 omp3-grad1 omp3-grad2 opt-lindep-change; opt1 opt1-fd opt2 opt2-fd opt3 opt4 opt5 opt6 opt7 opt8 opt9; opt11 opt12 opt13 opt14 opt15 opt16 opt-irc-1 opt-irc-2 opt-irc-3; opt-freeze-coords opt-full-hess-every; oremp-grad1 oremp-grad2; phi-ao; props1 props2 props3 props4 psimrcc-ccsd_t-1 psimrcc-ccsd_t-2; psimrcc-ccsd_t-3 psimrcc-ccsd_t-4 psimrcc-fd-freq1; psimrcc-fd-freq2 psimrcc-pt2 psimr,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:3685,benchmark,benchmark,3685,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['benchmark'],['benchmark']
Testability,"rals__print.rst; # DEPENDS ${CCSD}/document_plugins.py; # ${psi4_SOURCE_DIR}/plugins/*/*.py; # ${psi4_SOURCE_DIR}/plugins/*/doc.rst; # COMMENT ""Autodoc plugins""). # Autodoc efp fragments; if(${ENABLE_libefp}); add_custom_command(; COMMAND ${Python_EXECUTABLE} ${CCSD}/document_efpfrag.py ${CCSD}; OUTPUT ${CCBD}/source/autodoc_available_efpfrag.rst; DEPENDS ${CCSD}/document_efpfrag.py; $<IF:$<STREQUAL:${CMAKE_GENERATOR},""Unix Makefiles"">,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/*efp,${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag/h2o.efp>; COMMENT ""Autodoc efp fragments""); else(); file(WRITE ${CCBD}/source/autodoc_available_efpfrag.rst """"); endif(). # Format git log for feed; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E make_directory feed; COMMAND ${Python_EXECUTABLE} ${CCSD}/extract_changeset.py ${CCBD}; OUTPUT ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; DEPENDS ${CCSD}/extract_changeset.py; COMMENT ""Format git --log for psicode.org feed""). # Establishing dependencies for docs targets. # * mini github feed for psicode.org; add_custom_target(ghfeed; DEPENDS ${CCBD}/feed/history_trac_changeset.txt; ${CCBD}/feed/latest_trac_changeset.txt; COMMENT ""Preparing GitHub feed""). # * announcement; if (LATEX_COMPILER AND PDFLATEX_COMPILER); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF)""); else(); message(STATUS ""Documentation targets ${_jupy}available: sphinxman (html), sphinxmini (quick html)""); endif(). # * quick mini-build for docs development; add_custom_target(sphinxmini; DEPENDS ${CCBD}/source/conf.py; COMMENT ""Building Sphinx abridged HTML documentation build""). # * full, proper build; add_custom_target(sphinxman; DEPENDS ${CCBD}/source/autodoc_psi4bases.rst; ${CCBD}/source/autodoc_psifiles.rst; ${CCBD}/source/autodoc_physconst.rst; ${CCBD}/source/autodoc_abbr_options_c.rst; ${CCBD}/source/autodoc_glossary_options_c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:20051,log,log,20051,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['log'],['log']
Testability,"rates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12779,test,test,12779,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"re easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so tha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13066,test,test,13066,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"red/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55154,test,tests,55154,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from lit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3370,test,test,3370,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"rianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2595,test,tested,2595,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['test'],['tested']
Testability,"ribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, pr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21685,test,test,21685,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"rnal/upstream/libint2/CMakeLists.txt` (requires Ninja)."" OFF); option_with_default(psi4_SHGAUSS_ORDERING ""Ordering for shells of solid harmonic Gaussians: standard -- standard ordering (-l, -l+1 ... l) -or- gaussian -- the Gaussian ordering (0, 1, -1, 2, -2, ... l, -l). Changing this is experimental, expert only, and not a future plan. Internal calculations should be correct and fchk files should be correct, but other exports like Molden and QCSchema.Wavefunction won't be."" gaussian); include(custom_int_orderings). ######################## Process & Validate Options ##########################; include(GNUInstallDirs); include(autocmake_safeguards); include(custom_color_messages). if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ""/usr/local/psi4"" CACHE PATH ""Install path"" FORCE); endif(); message(STATUS ""Psi4 install: ${CMAKE_INSTALL_PREFIX}""). # Python use in psi4 (not incl. external/); # * interpreter: run the versioner in psi4-core. run tests and build docs in psi4; # * headers: Python.h for pybind11 to build against in psi4-core; # * library: not at all. set(Python_ADDITIONAL_VERSIONS 3.12 3.11 3.10 3.9 3.8) # adjust with CMake minimum FindPythonInterp; find_package(Python 3.8 COMPONENTS Interpreter Development NumPy REQUIRED); message(STATUS ""${Cyan}Found Python ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}${ColourReset}: ${Python_EXECUTABLE} (found version ${Python_VERSION})""). set(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage); message(STATUS ""Psi4 staging: ${STAGED_INSTALL_PREFIX}""); message(STATUS ""CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}""); add_subdirectory(external/common); add_subdirectory(external/upstream). # external projects manage their own OpenMP and c++YY flags, so only add to CXX_FLAGS for psi4-core; include(custom_cxxstandard); include(custom_static_library). ################################ Main Project ################################; include(ExternalProject); ExternalProject_Add(psi4-core; DEPENDS lapack_external; hdf5_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:13932,test,tests,13932,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['test'],['tests']
Testability,"rom that of |Psifour| and is fully documented; .. `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PE would look like the following: ::. molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:5446,test,tests,5446,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['test'],['tests']
Testability,"r} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24869,test,tested,24869,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability,"s additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFI",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14054,test,tests,14054,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],['tests']
Testability,"s free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:1341,test,testSuitedkh,1341,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['test'],['testSuitedkh']
Testability,"s new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30332,log,logic,30332,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['logic']
Testability,"s, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4546,test,tests,4546,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"s.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |PSIfour| in text, in order of decreasing goodness:. * as ``Psi4`` in Optima regular font with ""si"" in custom (82%) small caps; according to :source:`media/README.md`. * html: ``<span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>``. * as ``Psi4`` with ""si"" in generated small caps. * html: ``<span style=""font-variant: small-caps;"">Psi4</span>``. * as ``Psi4`` with ""si"" in lowercase. * as ``psi4`` in code. * **NOT** ``PSI4`` or ``PSI``. .. _`faq:psi4logos`:. How to get a Psi4 logo file; ---------------------------. All image files are stored in https://github.com/psi4/psi4media. .. _`faq:localaddon`:. How to use a local Add-On repository in the Psi4 build; ------------------------------------------------------. For each Add-On, |PSIfour| pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the |PSIfour| build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you're the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset. Find the ``CMakeLists.txt`` governing the target Add-On in; :source:`external` and make changes analogous to the below::. #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:66255,log,logo,66255,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['logo']
Testability,"second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test con",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12154,test,tests,12154,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test-name', 'tests']"
Testability,"see Sec. :ref:`sec:thermo`. :py:func:`~psi4.driver.frequency` is the only command most users will ever; need to access directly to perform frequency calculations. Behind; the scenes, :py:func:`~psi4.driver.frequency` is a light wrapper over; :py:func:`~psi4.driver.hessian` that computes the Hessian then adds a; thermochemical analysis. .. autofunction:: psi4.frequency(name [, molecule, return_wfn, func, mode, dertype, irrep]); :noindex:. .. autofunction:: psi4.hessian(name [, molecule, return_wfn, func, dertype, irrep]); :noindex:. It's handy to collect the wavefunction after a frequency; calculation through ``e, wfn = psi4.frequency(...,; return_wfn=True)`` as the frequencies can be accessed through; :py:func:`psi4.core.Wavefunction.frequencies()`, the Hessian through; :py:func:`psi4.core.Wavefunction.hessian()`, and much other computation; info through ``psi4.core.Wavefunction.frequency_analysis``; (note no parentheses). Examples of using this data; structure can be found :srcsample:`fd-freq-gradient` and; :source:`tests/pytests/test_vibanalysis.py`. Formatted printing of vibrational; results is available through :py:func:`psi4.driver.qcdb.vib.print_vibs`. .. _`table:frequency_analysis`:. .. table:: Results accessible through ``psi4.core.Wavefunction.frequency_analysis``. +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | ndarray(ndof) complex (real/imag) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | q | normal mode, normalized mass-weighted | a0 u^1/2 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+--------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:2708,test,tests,2708,doc/sphinxman/source/freq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst,1,['test'],['tests']
Testability,"ses: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:8547,test,test,8547,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"ses: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_program(DFTD4_EXECUTABLE; NAMES dftd4; DOC ""Path to Grimme's dftd4 executable""). if(DFTD4_EXECUTABLE); add_subdirectory(dftd4); message(STATUS ""${Cyan}Found DFTD4${ColourReset}: ${DFTD4_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD4""); endif(). # <<< DKH >>>. if(ENABLE_dkh); add_subdirectory(dkh); message(STATUS ""Adding test cases: Psi4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< Bria",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9051,test,test,9051,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:writepsi4`; #. :ref:`faq:psi4logos`. .. #. :ref:`faq:getversion`; .. #. :ref:`faq:binarypackage`; .. #. :ref:`faq:getting-and-using-the-psi4dependencies-package`; .. #. :ref:`faq:erroreriam`. ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:3731,log,logging,3731,doc/sphinxman/source/build_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst,1,['log'],['logging']
Testability,"si4 + dkh""); endif(). # <<< LIBEFP >>>. if(ENABLE_libefp); add_subdirectory(libefp); message(STATUS ""Adding test cases: Psi4 + libefp""); endif(). # <<< ERD >>>. if(ENABLE_erd); add_subdirectory(erd); message(STATUS ""Adding test cases: Psi4 + erd""); endif(). # <<< gCP >>>. find_program(gCP_EXECUTABLE; NAMES mctc-gcp gcp; DOC ""Path to Grimme's gCP executable""). if(gCP_EXECUTABLE); add_subdirectory(gcp); message(STATUS ""${Cyan}Found gCP${ColourReset}: ${gCP_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + gCP""); endif(). # <<< GDMA >>>. if(ENABLE_gdma); add_subdirectory(gdma); message(STATUS ""Adding test cases: Psi4 + gdma""); endif(). # <<< MRCC >>>. find_program(MRCC_EXECUTABLE; NAMES dmrcc; DOC ""Path to Kallay's mrcc executable""). if(MRCC_EXECUTABLE); add_subdirectory(mrcc); message(STATUS ""${Cyan}Found MRCC${ColourReset}: ${MRCC_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + MRCC""); endif(). # <<< PCMSOLVER >>>. if(ENABLE_PCMSolver); add_subdirectory(pcmsolver); message(STATUS ""Adding test cases: Psi4 + PCMSolver""); endif(). # <<< SIMINT >>>. if(ENABLE_simint); add_subdirectory(simint); message(STATUS ""Adding test cases: Psi4 + simint""); endif(). # <<< V2RDM_CASSCF >>>. if(ENABLE_v2rdm_casscf); add_subdirectory(v2rdm_casscf); message(STATUS ""Adding test cases: Psi4 + v2rdm_casscf""); endif(). # <<< GPU_DFCC >>>. if(ENABLE_gpu_dfcc); add_subdirectory(gpu_dfcc); message(STATUS ""Adding test cases: Psi4 + gpu_dfcc""); endif(). # <<< SNSMP2 >>>. if(ENABLE_snsmp2); add_subdirectory(snsmp2); message(STATUS ""Adding test cases: Psi4 + snsmp2""); endif(). # <<< BrianQC >>>; if(ENABLE_BrianQC); add_subdirectory(brianqc); message(STATUS ""Adding test cases: Psi4 + BrianQC""); endif(). # <<< ECPINT >>>; if(ENABLE_ecpint); add_subdirectory(aediis-2); add_subdirectory(basis-ecp); add_subdirectory(dfmp2-ecp); add_subdirectory(sapt-ecp); add_subdirectory(scf-ecp); add_subdirectory(scf-ecp2); add_subdirectory(scf-ecp3); message(STATUS ""Adding test cases: Psi4 + ecpint""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:9457,test,test,9457,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['test'],['test']
Testability,"si4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6090,assert,assert,6090,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['assert'],['assert']
Testability,"si4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4923,log,log,4923,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,3,"['log', 'test']","['log', 'test']"
Testability,"si4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8636,test,tests,8636,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence setting",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4412,test,tests,4412,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,['test'],"['test', 'tests']"
Testability,"sponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gCP; .. _`sec:gcp`:. Interface to gCP by S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:1250,test,testSuitegcp,1250,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['test'],['testSuitegcp']
Testability,"ssible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:8403,test,tests,8403,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['tests']
Testability,"st -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectab",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63008,test,tests,63008,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"stalls; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/la",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17134,log,log,17134,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['log'],['log']
Testability,"sts matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If pack",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63273,test,testing,63273,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63580,test,test,63580,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['test'],['test']
Testability,"t (unless you're touching; :source:`psi4/src/read_options.cc` or the driver. Note that not all dependencies are; encoded (PSI variables, for instance, depend on every .cc file in the; source tree), so for a definitive doc build, remove (in the object; directory) ``doc/sphinxman`` and start from scratch. Even ~10 minutes of build time can be annoying when developing; documentation and testing ``rst`` files. In that situation, use the target; below which builds only the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characte",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:6941,test,test,6941,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['test'],['test']
Testability,"t -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15328,test,tests,15328,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:1415,test,testSuitemrcc,1415,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['test'],['testSuitemrcc']
Testability,"t case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7889,test,tests,7889,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"t either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install fr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17448,test,tested,17448,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['tested']
Testability,"t opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15465,test,test,15465,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"t results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * T",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13375,test,tests,13375,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"t']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27559,test,tested,27559,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['test'],['tested']
Testability,"t-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bash",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5637,log,log,5637,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,3,"['log', 'test']","['log', 'test']"
Testability,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69436,log,log,69436,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,7,['log'],"['log', 'logging', 'loglevel']"
Testability,"te; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28625,test,test,28625,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['test']
Testability,"te; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61105,test,tests,61105,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"test -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62780,test,tests,62780,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61240,test,test,61240,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,13,['test'],"['test', 'testlabel', 'testname', 'tests']"
Testability,"the input file, *e.g.* ``myplugin.testfunction()``, note the namespace; protection. * **pymodule.py** |w---w| Python component of the plugin.; By encoding the sequence of |PSIfour| module; calls needed to run the plugin in the ``run_myplugin()`` function in this; file, the plugin is hooked into the main |PSIfour| driver function; :py:func:`~psi4.driver.energy` and so can be accessed through; ``energy('myplugin')`` in an input file. Any other Python functions can; also be placed in this file. * **__init__.py** |w---w| Init script for the plugin (in the sense that; the whole plugin directory is a Python module). This file generally won't; need editing unless additional Python files are added to the plugin; directory (add additional lines to the ``# Load Python modules`` section); or the plugin depends on .so codes in other plugin directories (add; additional plugin_load lines relative to the current plugin directory to; the ``# Load C++ plugin`` section). .. comment as modeled in :source:`tests/plugin_libcim/__init__.py`). .. literalinclude:: @SFNX_INCLUDE@psi4/share/psi4/plugin/__init__.py.template. * **doc.rst** |w---w| Documentation file. Place in this file any notes,; equations, warnings to users, todo lists, *etc.*. Plain text is fine,; though reStructuredText is the ultimate goal. Remove the ``.. comment``; text and build Sphinx documentation for samples of linking keywords,; sections, and math. This file is absorbed into the |PSIfour|; documentation, along with any docstrings to Python functions, and the C++; keywords block in the ``myplugin.cc`` file. See :ref:`sec:documentation`; for building documentation. .. and :ref:`Available Plugins <sec:availablePlugins>`; .. for this file's final destination. Please note that pure virtual functions in a plugin may cause undefined symbols errors when; the plugin is loaded. To create a purely Python plugin, create a new plugin directory, then; remove the ``Makefile`` and ``myplugin.cc`` files and; erase the shared object ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:10240,test,tests,10240,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['test'],['tests']
Testability,"these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * If you have an option that instructs your module to do something not too; computationally intensive and then quit, append ``_EXIT`` to the option; name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10806,test,tested,10806,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tested']
Testability,"thin ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68914,log,log,68914,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability,"tinue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a sub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5051,test,test,5051,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"tion related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See :srcsample:`scf-ecp` and :srcsample:`dfmp2-ecp`; for examples of computations with ECP-containing basis sets. .. warning:: Prior to May 2022, v1.6, Psi4 used a built-in ECP code. Analytic derivatives of ECPs were not available. The HF and DFT derivatives were implemented in a semi-numerical scheme, where numerical ECP gradients were added to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic derivatives, but these have so far only been verified for HF and DFT. .. warning:: ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the `forum <http://forum.psicode.org>`_. .. _`sec:scfqmmm`:. External potentials and QM/MM; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In addition to the implementation of :ref:`EFP <sec:libefp>` for accurate QM/MM; computations, |PSIfour| can perform more rudimentary QM/MM procedures via the; |scf__extern| keyword. The following snippet, extracted from the; :srcsample:`extern1` test case, demonstrates its use for a TIP3P external potential::. import numpy as np; external_potentials = [; [-0.834, np.array([1.649232019048,0.0,-2.356023604706]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-3.799961446760]) / psi_bohr2angstroms],; [ 0.417, np.array([0.544757019107,0.0,-0.912085762652]) / psi_bohr2angstroms]]. gradient('scf', external_potentials=external_potentials). The ``external_potentials`` array has three rows for three separate; particles, and it is",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:53471,test,tested,53471,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['test'],['tested']
Testability,"tion. .. option:: -i <filename>, --input <filename>. Input file name. Default: input.dat. .. option:: --inplace. Runs |PSIfour| with compiled code from <objdir> but driver code from source,; so no need to ``make`` between Python edits. Expert mode. .. option:: -k, --skip-preprocessor. Skips input preprocessing. Expert mode. .. option:: -l <name>, --psidatadir <name>. Overrides the value of; :envvar:`PSIDATADIR` and specifies the path to the Psi data; library (ends in ``share/psi4``). Expert mode. .. option:: --loglevel <int>. Sets logging level: WARN=30, INFO=20, DEBUG=10. .. option:: -m, --messy. Leave temporary files after the run is completed. .. option:: --memory <memory>. The amount of memory to use. Can be specified with units (e.g., '10MB') otherwise bytes is assumed. .. option:: --module. The location of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a templa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:18951,test,testing,18951,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['test'],['testing']
Testability,"tml#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the correspon",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:5793,log,logo,5793,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,2,['log'],"['logo', 'logoColor']"
Testability,"tom_command(; # COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-psimod; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16362,test,tests,16362,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"treet, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec:opt()` ; - finite difference of energies of :ref:`sec:freq()`; - finite difference of gradients of :ref:`sec:freq()`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Local options (*e.g.*, ``set scf e_convergence 9``) will not get transmitted to the child jobs. - Array options (*e.g.*, ``set states_per_irrep [2, 1]``) will not get transmitted to the child jobs. - Function intercalls (*e.g.*, db(opt())) are not tested with sow/reap procedures. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst:2908,test,tested,2908,doc/sphinxman/source/sowreap.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst,1,['test'],['tested']
Testability,"trices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5835,test,tests,5835,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['tests']
Testability,"ts/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13158,test,test,13158,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ts/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/procrouting/dft/superfunctionals.py; ${psi4_SOURCE_DIR}/tests/docs-dft/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc functionals""). # Autodoc auxiliary basis sets; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-bases; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-bases/autodoc_basissets_byfamily.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_basissets_byfamily.rst; DEPENDS ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislist.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistdunning.py; ${psi4_SOURCE_DIR}/psi4/driver/qcdb/basislistother.py; ${psi4_SOURCE_DIR}/tests/docs-bases/input.dat; ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; COMMENT ""Autodoc auxiliary basis sets""). # Autodoc plugins; # Not at all in working order; #add_custom_command(; # COMMAND ${CMAKE_COMMAND} -E make_directory source/autodir_plugins; # COMMAND ${Python_EXECUTABLE} ${CCSD}/document_plugins.py ${CCSD}; # OUTPUT ${CCBD}/source/autodoc_abbr_options_plugins",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:17835,test,tests,17835,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"ts/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. aut",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15953,test,test,15953,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,2,"['assert', 'test']","['assert', 'test']"
Testability,"ultiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#########################",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22692,test,test,22692,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['test'],['test']
Testability,"units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output. The grid may be generated in the input file using standard Python loops. By; capturing the wavefunction used to evaluate the one-electron properties, the; values at each grid point may be captured as Python arrays in the input file::. E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the *Vvals* array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the *Exvals*,; *Eyvals* and *Ezvals* arrays contain the *x*, *y* and *z* components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the :srcsample:`props4` test case. .. index:: ISA; MBIS. .. _`sec:oeprop_mbis`:. Minimal Basis Iterative Stockholder; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in |PSIfour| will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles. ; Additionally, all expectation values of radial moments of n-th order (:math:`<r^n>`) ; are computed up to fourth order. Higher moments can be computed by specifying |globals__max_radial_moment|.; The volume ratios are computed as the ratio between the volume of the atomic density; (:math:`<r^3>`) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference. The allowed number of iterations and convergence criteria for the stockholder ; algorithm is c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:9489,test,test,9489,doc/sphinxman/source/oeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst,1,['test'],['test']
Testability,"updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Inste",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18745,log,logged,18745,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['log'],['logged']
Testability,"ur/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63739,test,tests,63739,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"urce files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working T",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5748,test,tests,5748,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['test'],['tests']
Testability,"ut.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6165,test,tests,6165,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['test'],['tests']
Testability,"var:`CONDA_PREFIX` and :envvar:`HOST` are defined upon; activation). .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. .. _`faq:approvedcxx`:. What C and C++ compilers and versions are approved; --------------------------------------------------. On Linux, the following work nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:38975,test,tested,38975,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tested']
Testability,"xcluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62637,test,testsoutput,62637,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testsoutput']
Testability,"y ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68984,log,log,68984,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['log'],['log']
Testability,"y dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5776,test,tests,5776,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['tests']
Testability,"y-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://suppo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10043,test,testing,10043,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testing']
Testability,"y/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13440,test,test,13440,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['test'],['test']
Testability,"ying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between ev",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12432,log,log,12432,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['log'],['log']
Testability,"ython bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATT",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11037,test,tests,11037,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['test'],['tests']
Testability,zure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.c,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:1099,log,logo,1099,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['log'],['logo']
Testability,"} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_psimod.rst ${CCBD}/source; # COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-psimod/autodoc_man_psi4.txt ${CCBD}/source; # OUTPUT ${CCBD}/source/autodoc_psimod.rst; # ${CCBD}/source/autodoc_man_psi4.txt; # DEPENDS ${psi4_SOURCE_DIR}/psi4/src/*/*/*.cc; # ${psi4_SOURCE_DIR}/tests/docs-psimod/input.dat; # ${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/psi4; # COMMENT ""Autodoc psi4 module""). # Autodoc functionals; add_custom_command(; COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_BINARY_DIR} ctest -R docs-dft; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_energy.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_opt.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_all.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_gga.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_meta.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_lrc.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_hybrid.rst ${CCBD}/source; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_dhybrid.rst ${CCBD}/source; #COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_scsdhybrid.rst ${CCBD}/source # commented until populated again to appease Sphinx; COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_BINARY_DIR}/tests/docs-dft/autodoc_dft_disp.rst ${CCBD}/source; OUTPUT ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rs",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:16479,test,tests,16479,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['test'],['tests']
Testability,"}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5639,test,testsoutput,5639,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['test'],['testsoutput']
Usability," # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:plugins`:. Creating New Plugins; ====================. Modular Approach to Development; -------------------------------. It is slightly cumbersome to the development cycle to recompile |PSIfour|; every time a change is made to the C++ code.; It's also daunting to new developers if they're required to; learn the structure of the source tree, executable initialization code,; and makefile systems in the existing code in order to add new features,; which was never a problem with Psi3 due to the independent; nature of the modules. To overcome these problems, |PSIfour| now has a; useful plugin feature. This allows codes to be developed as standalone; entities, which are compiled independently of the Psi source, but can; still link against Psi's vast library. The plugins can be loaded at; run-time from any location. .. _`sec:newplugins`:. Creating a New Plugin; ---------------------. |PSIfour| can create basic plugins for you and automatically tailor them; to your compilation environment. To create a basic plugin, run the; following while replacing ``myplugin`` with the name of your great code.; If the name you provide is not valid, |PSIfour| will complain. >>> psi4 --plugin-name myplugin. |PSIfour| will create a new directory with the name you specify for the; plugin. In this example, a directory named myplugin will be created.; All you need to do is ``cd`` into the dir",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:1373,learn,learn,1373,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['learn'],['learn']
Usability," :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11298,simpl,simple,11298,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simple']
Usability," Psi4 had a different set of keywords controlling instability analysis, and those were included in the CPHF module rather than the SCF module.; .. warning:: Extending Davidson instability analysis to Kohn-Sham references is under development. As of 1.7, only LDA functionals are currently supported. In case convergence problems are encountered during the Davidson procedure, file a bug report.; If the solver seems to converge on the wrong eigenvalue, try increasing |scf__solver_n_guess|.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; |scf__solver_maxiter|. .. _`sec:scf-ecps`:. Effective core potentials (ECPs); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| supports the use of effective core potentials to describe the; innermost electrons in heavy elements.; ECPs are only available if |PSIfour| is compiled with the :ref:`LibECPInt <cmake:ecpint>` library.; If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, *c.f.* :ref:`sec:basissets-ecps`. All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See :srcsample:`scf-ecp` and :srcsample:`dfmp2-ecp`; for examples of computations with ECP-containing basis sets. .. warning:: Prior to May 2022, v1.6, Psi4 used a built-in ECP code. Analytic derivatives of ECPs were not available. The HF and DFT derivatives were implemented in a semi-numerical scheme, where numerical ECP gradients were added to analytic SCF gradients. For post-SCF methods, the entire gradient computation needed to be run as finite difference of energies. .. warning:: As of May 2022, v1.6, Psi4 uses the LibECPInt library, and analytic derivatives and Hessians of ECPs are available. Analytic derivatives of molecular systems including ECPs should be available whenever the method has analytic ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:52385,simpl,simply,52385,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['simpl'],['simply']
Usability," [1, 0]. which is the same occupation as the :math:`^2A_1` state. In this case, the; :math:`^2A_1` state is lower in energy, and is not problematic. The distorted; geometries for the :math:`^2B_2` state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it's easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. .. index:: molecule; multiple fragments; .. _`sec:fragments`:. Non-Covalently Bonded Molecule Fragments; ========================================. |PSIfour| has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. |PSIfour| provides a very simple mechanism; for doing so: simply define the complex's geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block::. molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. This specifies that there are two neutral, spin-singlet fragments. It is; possible to further specify that the overall complex is neutral and spin-singlet; by inserting another :samp:`{charge} {multiplicity}` line, separated from the first; molecule block by a `--` line. If any information is missing, |PSIfour| will set the; unprovided charges and multiplicities to be consistent with those that are given.; For exa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:18846,simpl,simple,18846,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,2,['simpl'],"['simple', 'simply']"
Usability," ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10421,guid,guidelines,10421,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['guid'],['guidelines']
Usability," are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values functi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8265,simpl,simple,8265,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['simpl'],['simple']
Usability," as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that returns a single buffer must be replaced with a call to ``buffer()`` to; get a list of pointers; we recommend that be assigned the type ``const auto; &``. For simple integrals, such as overlap or kinetic, only the buffer; corresponding to the zeroth element of this array contains integrals. Derivative Integrals; .................... The old one electron integral code used translational invariance relations to; minimze the number of integrals to be computed, leaving the caller with some; bookkeeping to do to compute all terms. For example, consider an overlap; integral: its value depends only on the relative separation of the two centers; and not their absolute positions in space. Therefore, the derivative with; respect to center A is the negative of the same derivative with respect to; center B, so one is trivially gleaned from the other. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leav",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:15100,simpl,simple,15100,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability," be; recalled (get_str('DF_BASIS_SCF')), the fitting role if defaults need to; be computed (JKFIT), the. *How* for Programmers; ---------------------. To get a BasisSet object into your module, just call `pyconstruct` where; formerly you called `construct`. There are two flavors, one for orbital; basis sets and one for auxiliary basis sets. There's no difference in the; BasisSet objects they return or even the code used to assemble them- the; two flavors are just for sane argument naming and to establish different; signatures for Boost binding. Orbital Basis; *************. Give the function a Molecule object for which to build basis, a label for; the basis (generally, BASIS), and a hint for finding the basis. This last; argument gets used to find a python function by that name camoflaged; (that's what ``basis {...}`` blocks in the input file get translated into); or failing that a string to find a gbs file defining the basis. ::. // simple; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(molecule, ; ""BASIS"", ""CC-PVDZ"");. // self-contained; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(Process::environment.molecule(),; ""BASIS"", Process::environment.options.get_str(""BASIS""));. Auxiliary Basis; ***************. Give the function a Molecule object for which to build basis, a label for; the basis, a hint for finding the basis, a fitting role to apply if; defaults need to be generated, and a hint for finding the orbital basis to; build defaults against. ::. // simple; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(molecule,; ""DF_BASIS_SCF"", """", ; ""JKFIT"", ""CC-PVDZ"");. // self-contained and force Spherical; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(Process::environment.molecule(),; ""DF_BASIS_SCF"", Process::environment.options.get_str(""DF_BASIS_SCF""), ; ""JKFIT"", Process:environment.options.get_str(""BASIS""), 1);. Adding Basis Option to Code; ***************************. - Registe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst:3842,simpl,simple,3842,doc/sphinxman/source/attic/prog_basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst,1,['simpl'],['simple']
Usability," energy::. @RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options; ^^^^^^^^^^^^^^^^^^. The X2C module in |PSIfour| supports different combinations of basis set.; By default, if the input file specifies only |mints__basis|, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use |globals__basis_relativistic| to specify a different; basis set to solve the modified Dirac equation. ::. set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding ""-decon"" to the ; name of the primary basis you want to use for the calculation as detailed in ; :ref:`Decontracted Basis Sets <sec:basisDecontracted>`. Publications resulting from the use ; of X2C should cite the following publication: [Verma:2015]_. Theory; ^^^^^^. X2C is based on exact decoupling of ; positive-energy ( :math:`h^{FW}_{\rm ++}`; ) and negative-energy (:math:`h^{FW}_{\rm --}` ); blocks of the Dirac Hamiltonian (:math:`h^{D}`). . .. math:: ; U^\dagger h^{\rm D} U = ; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}. The transformation ( :math:`U` ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984]_ treatment. ; In the X2C treatment, the positive-energy block of the Hamiltonian ( :math:`h^{FW}_{\rm ++}` ); is given by the sum; of a transformed kinetic (:math:`T_{\rm X2C}`) and potential energy ( :math:`V_{\rm X2C}` ) contribution.; Relativistic kinetic energy (",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst:3718,simpl,simply,3718,doc/sphinxman/source/relativistic.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst,1,['simpl'],['simply']
Usability," file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:10559,learn,learning,10559,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['learn'],['learning']
Usability," for State-specific; Multireference Coupled Cluster Methods,""; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; *Phys. Chem. Chem. Phys.* **11**, 4728-4741 (2009).; (doi: `10.1039/b822910d <https://doi.org/10.1039/b822910d>`_). Symmetry-Adapted Perturbation Theory (SAPT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. |PSIfour| features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. * ""Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT. DF-SAPT0. * ""Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,"" E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, *J.; Chem. Phys.* **135**, 174017 (2011).; (doi: `10.1063/1.3656681 <https://doi.org/10.1063/1.3656681>`_). * ""Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Applicatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:15527,guid,guidance,15527,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['guid'],['guidance']
Usability," from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to determine; the type of stencil and which displacements are needed is not going to be rate; limiting for any reasonable quantum mechanical energy function. Therefore,; doing that work in the Python layer is a good idea, as it allows the many; Python tools for farming out *embarrassingly parallel* workloads to be used,; while the C++ layer can be used to implement the energy function to be; differentiated. In SCF, we have a number of sources of external embe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:6243,simpl,simple,6243,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simple']
Usability," in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5810,simpl,simply,5810,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simply']
Usability," input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to |PSIfour|,; the auxiliary basis will fall back on `def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762`.; Note that if |mints__basis| is known to be larger than quad-zeta,; |PSIfour| *will not* attempt to fall back on the def2 fitting bases. The same basis ""block"" syntax can be; used to specify basis sets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all ele",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:8153,simpl,simply,8153,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['simpl'],['simply']
Usability," one electron integral code used translational invariance relations to; minimze the number of integrals to be computed, leaving the caller with some; bookkeeping to do to compute all terms. For example, consider an overlap; integral: its value depends only on the relative separation of the two centers; and not their absolute positions in space. Therefore, the derivative with; respect to center A is the negative of the same derivative with respect to; center B, so one is trivially gleaned from the other. Extending this to second; derivatives, the same principle leads to the fact that double derivatives with; respect to center A are equal to double derivatives with respect to center B,; which are also equal to the negative of the mixed double derivatives with; respect to both center A and B. The old code only provided the double; derivative with respect to center A, leaving the caller to determine the other; values. The Libint2 engine instead provides all integrals, so the caller; simply needs to loop over all of the buffers provided in the appropriate order. Changes to External Potential Engines; ..................................... Benchmarking showed that early versions of the old code spent a non-negligible; amount of time performing the Cartesian to spherical harmonic transformation of; the integrals, which is needed for most modern basis sets. To improve; performance, we instead backtransformed the density to the Cartesian; representation (denoted ""CartAO"") and computed / contracted all integrals in; this Cartesian basis, eliminating the need to transform to spherical harmonics; as the integrals are computed. This bottleneck no longer exists, so these; extra transformation steps have been removed as part of the switch to Libint2,; and the affected codes (PCM and CPPE interfaces) now compute the potential and; field integrals in the representation required by the basis set. Also, note that the way external point charges are specified has changed.; Previously, a ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:16277,simpl,simply,16277,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability," one excitation is placed on each monomer), contributing an attraction of; -1.21 |kcalpermol|. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose y",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:16995,simpl,simplifies,16995,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simplifies']
Usability," partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; salvage them, so please contact the developers with the circumstances; for guidance. Order-1 Visualization with PyMol; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``fsapt.py`` script above also generates a number of order-1 ``.pdb`` files; that can be used to get a quick qualitative picture of the F-SAPT partition. The; preferred way to do this is to use PyMol to make plots of the molecular geometry; with the atoms colored according to their order-1 F-SAPT contributions. We have; a set of template ``.pymol`` scripts to help with this process. These can be; obtained by running::. >>> copy_pymol.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``Elst.pymol``), which in turn load in the molecule and order-1 analysis; (contained in the ``.pdb`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to pe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:10006,guid,guidance,10006,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['guid'],['guidance']
Usability," psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20715,clear,clear,20715,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['clear'],['clear']
Usability," scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``energy(""fsapt0-d3mbj"")``. See :ref:`FSAPT <sec:fisapt>` documentation for more details on using FSAPT; for functional group analyses.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:46682,simpl,simple,46682,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,2,['simpl'],"['simple', 'simply']"
Usability," terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mp2`:. Second-order |MollerPlesset| Theory: MP2 and MP2-R12 methods; ============================================================. Second-order |MollerPlesset| theory is one of the most basic; wavefunction approaches which includes electron correlation; directly.; Due to its simplicity, the MP2 method is often the best; level one can afford for a larger molecular system.; At the other end of the spectrum, the MP2-R12 method; of Kutzelnigg, Klopper, and co-workers is a promising; approach to computing MP2 energies in the complete; basis set limit for smaller systems. |PSIfour| is; one of the very few publicly available programs to; feature a robust implementation of the MP2-R12 method. |PSIfour| is capable of computing closed-shell; MP2 and MP2-R12/A energies using integral-direct techniques and a; multithreaded algorithm, which lends itself perfectly for execution ; on symmetric multiprocessor (SMP) machines. |PSIfour| is also; capable of computing RHF, UHF, and ROHF (using semicanonical orbitals); MP2 energies and one-particle density matrices, and RHF MP2 analytic ; gradients. Occupied and virtual orbitals can be frozen during the ; energy calculation, but not for the calculation of the ; one-particle density matrix or the analytic gradient. .. table:: Summary of MP2 and MP2-R12 capabilities in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst:1346,simpl,simplicity,1346,doc/sphinxman/source/attic/mp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst,1,['simpl'],['simplicity']
Usability," the jun-cc-pVDZ basis (this is the; usual aug-cc-pVDZ basis, but without diffuse functions on hydrogen and; without diffuse :math:`d` functions on heavy atoms) [Papajak:2011:10]_. So,; we'll use that as our standard basis set. The SAPT code is designed to; use density fitting techniques, because they introduce minimal errors; while providing much faster computations [Hohenstein:2010:184111]_ ; [Hohenstein:2010:014101]_. Since we're using density fitting for the SAPT,; we might as well also use it for the Hartree--Fock computations that are; performed as part of the SAPT. We can specify that with ; ``scf_type DF``. Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, |PSIfour| is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that |PSIfour| correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree--Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure. To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with ``freeze_core True``. The SAPT; procedure is invoked with the simple call, ``energy('sapt0')``. This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887]_, and this is discussed in more detail; in the SAPT section later in this manual. For now, we'll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:14313,simpl,simple,14313,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability," theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also sup",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3033,simpl,simply,3033,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['simpl'],['simply']
Usability," two neutral, spin-singlet fragments. It is; possible to further specify that the overall complex is neutral and spin-singlet; by inserting another :samp:`{charge} {multiplicity}` line, separated from the first; molecule block by a `--` line. If any information is missing, |PSIfour| will set the; unprovided charges and multiplicities to be consistent with those that are given.; For example, the overall charge must be simply the sum of all fragment charges.; |PSIfour| further assumes that any unpaired electrons are coupled to yield the highest; possible :math:`M_s` value. Psi will also favor neutral, spin-singlet fragments.; For anything complicated, we strongly suggest explicitly providing the charge; and multiplicity of each fragment as well as the total molecular charge and multiplicity. For details and examples, see https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/chgmult.py#L105-L136 . Having defined a molecule containing fragments like ``eneyne`` above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (``extract_subsets(1)`` pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (``extract_subsets(1,2)`` pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. ``extract_subsets(2,[1,3])``::. mA = eneyne.extract_subsets(1); energy('scf'); ; clean(); ; mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; ``--`` marker, the :py:func:`~psi4.driver.wrapper_autofrag.auto_fragments` function can be applied, as shown in; :srcsample:`pywrap-basis`, to return as active molecule the previous; active molecule, only fragmented. Advanced Python; ===============. A named molecule in an input file is a full-fledged ins",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:20549,simpl,simple,20549,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['simpl'],['simple']
Usability,"# How to contribute. We welcome contributions from external contributors, and this document; describes how to merge code changes into Psi4. As of February 2016, the; procedure for contributing code is exactly the same for the core development; team and for external contributors. **Working on your first Pull Request?** You can learn how from; this *free* series [How to Contribute to an Open Source Project on; GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github). ## Getting Started. * Make sure you have a [GitHub account](https://github.com/signup/free).; * [Fork](https://help.github.com/articles/fork-a-repo/) the; [psi4/psi4](https://github.com/psi4/psi4) repository on GitHub.; * On your local machine,; [clone](https://help.github.com/articles/cloning-a-repository/) your fork of; the Psi4 repository.; * More detailed instructions for interacting with your Psi4 fork can be found; [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:328,learn,learn,328,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,1,['learn'],['learn']
Usability,"# Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6016,guid,guide,6016,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"(fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that's it! The only remaining part of the example input is a little table; of the different R values and the CP-corrected CCSD(T) energies, converted from; atomic units (Hartree) to |kcalpermol| by multiplying by the; automatically-defined conversion factor ``psi_hartree2kcalmol``. |PSIfour|; provides several built-in physical constants and conversion factors, as; described in section :ref:`sec:physicalConstants`.; Notice the loop over :math:`R` to create; the table looks just like the loop over ``R`` to run the different; computations, and the CP-corrected energies ``ecp[R]`` are accessed the same; way they were stored. The ``print`` line at the end just specifies some; formatting for the printed table (first element is a floating point number 3; spaces wide with one digit after the decimal, and the second element is a; floating point number 10 spaces wide with 6 digits after the decimal); the; format strings are the same as in the C programming language. For tables more; complicated than the simple one used here, Psithon has built-in support for; tables (see the next section). Our table is printed at the very end of the output file, and looks like; this ::. CP-corrected CCSD(T)/aug-cc-pVDZ interaction energies; ; R (Ang) E_int (kcal/mol); -----------------------------------------------------; 2.5 0.757718; 3.0 0.015687; 4.0 -0.016264; ; The following section goes over Psithon in much more detail, but; hopefully this example already makes it clear that many complex tasks; can be done very easily in |PSIfour|. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:23541,simpl,simple,23541,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,") + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\alpha} (\vec r_1). .. math:: \gamma_{\alpha\beta} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \cdot \nabla; \rho_{\beta} (\vec r_1). where,. .. math:: \nabla \rho_{\sigma} (\vec r_1) = 2 D_{\mu\nu}^{\sigma} \phi_{\mu}; (\vec r_1) \nabla \phi_{\nu} (\vec r_1). GGA functionals are essentially the same cost as LSDA functionals and are often; considerably more accurate. Another local variant which has gained some popularity (though perhaps not as; much as GGA functi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4802,simpl,simplest,4802,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simplest']
Usability,"),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); ; \omega \right) \ \mathrm{d} ^3 r_1. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} \alpha \iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{1}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. .. math::; -\frac{1}{2} \sum_{i,j}; \delta_{\sigma_{i} \sigma_{j}} (1-\alpha)\iint_{\mathrm{R}^6} \phi_{i}^1 \phi_{j}^1; \frac{\mathrm{erf}(\omega r_{12})}{r_{12}} \phi_{i}^2 \phi_{j}^2 \ \mathrm{d}^3 r_1 \ \mathrm{d}^3 r_2. For LRC functionals, the choice of range-separation parameter :math:`\omega` has; been the subject of considerable activity since the inception of LRC; functionals. Some authors advocate a static range-separation parameter; determined by optimization over a test set of chemical systems. However, a more; physically-motivated and often more accurate approach is the idea of ""gap; fitting"" or ""optimal tuning"" or simply ""tuning."" The most popular tuned-LRC; approach is IP-fitting, in which the :math:`\omega` is varied until the; Koopman's IP (the opposite of the HOMO energy) matches the true IP (the; difference between :math:`N-1`\ -electron and :math:`N`\ -electron total; energies), within the LRC functional ansatz. This guarantees the asymptotics of; the exchange potential,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{tuned-LRC}} (r) = -; \frac{1}{r} + I_{\mathrm{IP}} +; \epsilon_{\mathrm{HOMO}}. Note that LRC functionals with default :math:`\omega` only capture the; :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; as",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:12401,simpl,simply,12401,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simply']
Usability,", which; are ordered Px,Py,Pz,Qx,Qy,Qz,Rx,Ry,Rz,Sx,Sy,Sz, where the Px refers to the x; derivative with respect to the basis functions in shell P. Note that all; integral derivatives are provided by the new integral code, unlike the previous; version where only 9 of 12 were provided and the user was responsible for using; translation invariance relationships to fill in the rest. The addresses for; each chunk are updated in the vector after each call to compute integrals, so; the user should keep a const reference to that object, and query that for the; address of interest. Density Screening; ................. The old code looked only at the integral to determine whether terms can be; avoided *a priori*. However, if the integral is to be contracted with a; density or a density-like quantity, the screening can be performed on the; product, which yields more sparsity. To enable this, simply call the integral; object's ``update_density`` member, passing it a SharedMatrix holding the; current density (remember that it changes during each iteration of the SCF) and; the product will be considered during screening. If only coulomb-like terms; are to be computed, the ``needs_exchange`` argument to the integral object; constructor should be set to false, otherwise it should be true to correcly; account for products of the density and integrals that contribute to; exchange-like terms. Shell blocking; .............. Each underlying integral engine knows whether it will use blocks, and will set up; the metadata automatically. Instead of looping over individual shells, the; user should loop over blocks supplied by the integral object; these blocks will; be just a single shell quartet combination for the case where blocking is not; used. It is simple to loop over pairs within each block using C++11 syntax, as; demonstrated in the code snippet above. Only shell pairs with significant; overlap are included in the shell block information, making this an efficient; way to loop over non",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:7629,simpl,simply,7629,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability,"-----------+-------+------------------------------------+; | ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+--------------------------------------------+; | CVS-ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only sup",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:6428,simpl,simply,6428,doc/sphinxman/source/adc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst,1,['simpl'],['simply']
Usability,"----------------------+----------------------------------------------+; | cepa(3) | :math:`-\epsilon_{ij}+\sum_k(\epsilon_{ik}+\epsilon_{jk})` | :math:`-\epsilon_{ii}+2\sum_k \epsilon_{ik}` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | acpf | :math:`\frac{2}{N} E_c` | :math:`\frac{2}{N} E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+; | aqcc | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` | :math:`[1-\frac{(N-3)(N-2)}{N(N-1)}]E_c` |; +-------------------------+------------------------------------------------------------+----------------------------------------------+. .. comment | dci | :math:`E_c` | NA |; .. comment +-------------------------+------------------------------------------------------------+----------------------------------------------+. The pair correlation energy, :math:`\epsilon_{ij}`, is simply a partial; sum of the correlation energy. In a spin-free formalism, the pair energy; is given by. .. math::; :label: pair_energy. \epsilon_{ij} = \sum_{ab} v_{ij}^{ab} (2 t_{ij}^{ab} - t_{ij}^{ba}). Methods whose shifts (:math:`\Delta_{ij}` and :math:`\Delta_i`) do not; explicitly depend on orbitals :math:`i` or :math:`j` (CISD, CEPA(0), ACPF,; and AQCC) have solutions that render the energy stationary with respect; variations in the amplitudes. This convenient property allows density; matrices and 1-electron properties to be evaluated without any additional; effort. Note, however, that 1-electron properties are currently; unavailable when coupling these stationary CEPA-like methods with frozen; natural orbitals. Density-fitted coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Density fitting (DF) [or the resolution of the identity (RI)] and Cholesky; decomposition (CD) techniques are popular in quantum chemistry to avoid; the computation and storage of the 4-index electron r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:12796,simpl,simply,12796,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['simpl'],['simply']
Usability,"-c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will hav",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3289,simpl,simply,3289,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['simpl'],['simply']
Usability,". # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1871,user-friendly,user-friendly,1871,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['user-friendly'],['user-friendly']
Usability,". math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12291,simpl,simple-,12291,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simple-']
Usability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_welcome`:. ===========================; Welcome to New Programmers; ===========================. The |PSIfour| community; -----------------------. |PSIfour| is an open-source project and welcomes contributions from; developers around the world. etc. We have annual meetings, we welcome; feedback, slack channel, etc. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_welcome.rst:1362,feedback,feedback,1362,doc/sphinxman/source/prog_welcome.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_welcome.rst,1,['feedback'],['feedback']
Usability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:style_python`:. Python Style; ============. .. _`faq:ignoringadvice`:. How to Ignore the Bots; ----------------------. Formatting and analysis bots are great because it takes more effort; to defy them than to accept their criticism. Nevertheless, for code; clarity, they can be honestly wrong, so we need a way to specifically; clear their findings. * Py Formatting (yapf) ``# yapf: disable`` (single line or block) ``# yapf: enable`` (resume). * C++ Formatting (clang-format) ``// clang-format off`` (single line or block) ``// clang-format on`` (resume). * Py Dynamic Analysis (coverage.py) ``# pragma: no cover``. * C++ Dynamic Analysis (gcov) https://stackoverflow.com/a/30078276 untested. * Py Static Analysis (lgtm) ``# lgtm[py/not-named-self]`` (click on the ""?"" to get the ""Query ID""). * C++ Static Analysis (lgtm) ``// lgtm[cpp/wrong-type-format-argument]`` (click on the ""?"" to get the ""Query ID""). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_py.rst:1398,clear,clear,1398,doc/sphinxman/source/prog_style_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_py.rst,3,"['clear', 'resume']","['clear', 'resume']"
Usability,".; However, spin contamination is usually less of a problem with UKS than with; UHF, as the spin contamination of the noninteracting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method; which can break the positive definiteness of the spin polarization. KS-DFT with; the true functional is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:16675,simpl,simplest,16675,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simplest']
Usability,".py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; ..",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2458,guid,guide,2458,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guide']
Usability,"/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd4-python`` | ``import dftd4`` | nyi | preferred | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::dftd4`` | ``bin/dftd4`` | | | | https://github.com/dftd4/dftd4 | |; +--------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3366,simpl,simple-,3366,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simple-']
Usability,"/scratch/user``, add the following command to your input; file: ::. psi4_io.set_default_path('/scratch/user'). For batch jobs running through a queue, it might be more convenient to use an; environmental variable (in this case ``$MYSCRATCH``) to set the scratch directory;; the following code will do that::. import os; scratch_dir = os.environ.get('MYSCRATCH'); if scratch_dir:; psi4_io.set_default_path(scratch_dir + '/'). Individual files can be sent to specific locations. For example, file 12; contains information about the internal coordiantes of a geometry optimization.; The user may want to retain this in the working directory; (*i.e.*, where |PSIfour| was launched from) to analyze the optimization. This is; accomplished by the commands below::. psi4_io.set_specific_path(12, './'); psi4_io.set_specific_retention(12, True). # equivalent to above; psi4_io.set_specific_path(PSIF_INTCO, './'); psi4_io.set_specific_retention(PSIF_INTCO, True). A guide to the contents of individual scratch files may be found at :ref:`apdx:psiFiles`.; To circumvent difficulties with running multiple jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's docum",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:4730,guid,guide,4730,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['guid'],['guide']
Usability,"1 -0.362 -1.860 -2.040 -4.364; PH All -2.062 2.936 -0.140 -0.435 -3.074 -2.774; All OH -11.167 6.965 -0.730 -1.739 -1.923 -8.594; All PH 2.072 2.903 0.229 -0.556 -3.191 1.456; All All -9.095 9.867 -0.501 -2.295 -5.114 -7.138. Note that the assignment of linking sigma bond contributions is a small point of; ambiguity in F-SAPT. The ``fsapt.dat`` file presents the ""links-by-charge""; assignment at the top and the ""links by 50-50"" assignment at the bottom. We; generally prefer the latter, but both generally give qualitatively identical; energetic partitions. Users should check the files ``fragA.dat`` and ``fragB.dat`` to ensure that; there is not too much charge delocalization from one fragment to another. This; is presented in the ""Orbital Check"" section in these files |w--w| a value larger than; 0.1 docc is an indication that the picture of localizable functional groups may; be breaking down. We also *strongly discourage* the cutting of double,; triple, or aromatic bonding motifs when partitioning the molecule into fragments; |w--w| cuts across only simple sigma bonds are encouraged. .. caution:: November 2022, previous to QCEngine v0.26.0 and Psi4; v1.7.0, there was a scaling inconsistency in the pairwise analysis; such that :psivar:`2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS`; was doubled when generated from dftd3 compared to the output from other; programs (s-dftd3 and dftd4). This shows up in the QCVariable and in the; ``Empirical_Disp.dat`` file written during ``energy(""fisapt0-d3"")`` (all; -D3 variants). Fortunately, the ``fsapt.py`` script compensated; for dftd3 (by far the most used program for this task). Users of the; pairwise analysis should take care to use the new QCEngine; AND ``fsapt.py`` script distributed with NEW Psi4. ``fisapt0-d4`` run; with previous Psi4/fsapt.py will be wrong. ``fisapt0-d3`` run with previous; Psi4/fsapt.py but new QCEngine will be wrong. If you've got legacy; calculations, it is extremely easy to check or reanalyze them to; s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:8995,simpl,simple,8995,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['simpl'],['simple']
Usability,"2's convention. New Operators Available; ....................... Libint2 provides a range of integrals that were previously not available in; |PSIfour|, such as the Erfc attenuated nuclear potential integrals needed for; Ewald methods. If new integrals are added to Libint2 but are not yet; interfaced to |PSIfour|, please open an issue on the |PSIfour| GitHub page to; alert the developers, who will be able to add the appropriate code.; Available integrals classes and parameters currently documented at ; `Libint2 C++11 Interface Wiki <https://github.com/evaleev/libint/wiki/using-modern-CPlusPlus-API#create-an-integral-engine>`_. Shell Pairs; ........... To ensure consistency between one- and two-electron terms when screening, and; for efficiency reasons, shell pair lists should be used to iterate over pairs; of Gaussian shells. These lists contain integer pair numbers, corresponding to; the pairs of shells that have sufficient overlap to survive the screening; process. Iterating over these lists is simple:. .. code-block:: cpp. const auto& shell_pairs = Vint->shellpairs();; size_t n_pairs = shell_pairs.size();; for (size_t p = 0; p < n_pairs; ++p) {; auto P = shell_pairs[p].first;; auto Q = shell_pairs[p].second;; // do something with shells P and Q; }. Note that list considers all P,Q pairs if the two basis sets differ, but only; P>=Q if the basis sets are the same; the caller should account for this; restricted summation in the latter case. One Electron Integral Algorithm Overview; ........................................ The following table summarizes which implementation is used; for each type of one electron integral in |PSIfour|. .. _`table:oei_impl_summary`:. .. table:: Algorithms used for One Electron Integrals. +----------------------------+----------------------------+-----------------+--------------------------------------------------------------------+; | Integral | Class | Implementation | Comment |; +============================+==========================",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:18675,simpl,simple,18675,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"2110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergence for RASSCF can be difficult in our; current implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:1914,simpl,simple,1914,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['simpl'],['simple']
Usability,"3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant work) for water a; B3LYP, a B3LYP-D2, a B3LYP-D3 (zero-damping), and a B3LYP-D4 (Becke-Johnson damping) energy. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('b3lyp'); energy('b3lyp-d'); energy('b3lyp-d3'); energy('b3lyp-d4'). Consult the table :ref:`-D Functionals <table:dft_disp>` to see for each; functional what corrections are available and what default parameters; define them. The dispersion correction is available after a calculation in; the PSI variable :psivar:`DISPERSION CORRECTION ENERGY`.; By default, the output from the ``dftd3``; program is suppressed; to see it in the output file, set print > 2.; No text output is available from the ``dftd4`` or ``s-dftd3`` programs. .. _`table:dashd`:. .. table:: Variants of dispersion corrections. +-------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:13046,simpl,simple,13046,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simple']
Usability,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12704,simpl,simply,12704,doc/sphinxman/source/basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst,1,['simpl'],['simply']
Usability,"; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to configure a Psi4 build on Cray; -------------------------------------. Cray systems strongly prefer to build static libraries, but |PSIfour|; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:42883,guid,guides,42883,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guides']
Usability,"====+===========================+==================================================================================+==========+; | D3 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd3`` | ``bin/dftd3`` | preferred | works | ``engine=""dftd3""`` | https://github.com/loriab/dftd3 | classic |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``conda-forge::dftd3-python`` | ``import dftd3`` | nyi | preferred | ``engine=""s-dftd3""`` | https://github.com/dftd3/simple-dftd3 | s-dftd3 |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | (dep) ``conda-forge::simple-dftd3`` | ``bin/simple-dftd3`` | | | | https://github.com/dftd3/simple-dftd3 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | D4 | | | | | | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+; | ``psi4::dftd4`` | ``bin/dftd4``, ``import dftd4`` | preferred | works | ``engine=""dftd4""`` | https://github.com/dftd4/dftd4 | |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+-------------------------------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:3022,simpl,simple-,3022,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,3,['simpl'],['simple-']
Usability,"======================================; Ways to Add Code: Psi4NumPy, Plugins, Full Integration ; ======================================================. Easier and more rapid development; ---------------------------------. Fully-featured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https:/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:2098,simpl,simplified,2098,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simplified']
Usability,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:1846,simpl,simply,1846,doc/sphinxman/source/fchk.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst,1,['simpl'],['simply']
Usability,"DATA_FILE``, with a default of ""data.dat"" and any possible value.; - A string called ``AO_BASIS`` with a default of ""NONE"", and possible values of ""NONE"", ""DISK"", or ""DIRECT"". The purpose of the ""if"" statement in the above read_options function is; the following. Suppose in an input file the user sets an option through; the construct ``set mymodule print 1`` or through a ``set mymodule {...}``; block. The first thing to happen is a call to read_options with name set; to ""MYMODULE"". (Note that all user input is converted to upper case unless a; ``add_str_i`` which should be used sparingly for files.) This; call to read_options should tell the Options object only about those; options expected by the module called ""mymodule""; this prevents overlap of; options between different modules. Notice also that there's a special comment immediately before the; declaration of each keyword. You must provide these comments for any; options you add as they will be automatically inserted into the user; manual Providing a clear description will also help you to remember what; the keywords do and how they're used. The comments must live between the; special comment delimiters. For options that most users shouldn't need,; add an expert flag to the comment. This will place these options in a; separate section of the user manual. .. code-block:: cpp. /*- comment -*/; options.add_ ...; /*- comment !expert -*/; options.add_ ... As is apparent from the examples above, comments can span multiple lines; (see ``PRINT``), can refer to other options (through hyperlinks; see; ``SAVE_INFO``), can refer to sections of the manual (through hyperlinks;; see ``DOCC``), and can contain LaTeX notation (see ``AO_BASIS``). (To get; the LaTeX subscript command, use ""@@"" instead of ""_"".). See :ref:`faq:readoptions`; for guidelines on naming options. What is *has_changed* ?; -----------------------. There are times when we need to know whether an option was provided by the; user or if the defaults are being us",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:4480,clear,clear,4480,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['clear'],['clear']
Usability,"GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, an",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1830,guid,guide,1830,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guide']
Usability,"General Notes About the Code. 1. While the primary purpose of the code is transformations between the AO and MO bases, ; some codes (mrcc, detci, and especially cc) request that tasks involving frozen core; orbitals be either done by libtrans or converted into effective quantities free of frozen; core orbitals - that way, they don't need to worry about frozen core orbitals at all, and; the calculation retains all the simplicity of one where core electrons simply don't exist.; In particular, libtrans:integraltransform_sort_so_tei.cc has the following responsibilities:; * Computing all energy contributions involving frozen core orbitals only and putting that; result into frozen_core_energy_. Used to sanity-check the HF energy.; * Constructing the ""frozen-core operator"", which is the core hamiltonian for non-frozen orbitals; plus the Couloumb and exchange contributions terms arising from the electric field of; the frozen core orbitals. Think of it as halfway between the core Hamiltonian and the Fock operator.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libtrans/README.txt:421,simpl,simplicity,421,psi4/src/psi4/libtrans/README.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libtrans/README.txt,2,['simpl'],"['simplicity', 'simply']"
Usability,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1618,guid,guides,1618,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guides']
Usability,"H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:11235,simpl,simply,11235,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['simpl'],['simply']
Usability,"PI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4014,simpl,simple,4014,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['simpl'],['simple']
Usability,"PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. * Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won't allow them. If you're determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an exa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst:2177,simpl,simply,2177,doc/sphinxman/source/quickadddatabase.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst,1,['simpl'],['simply']
Usability,"SE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: harmonic vibrational analysis, vibrational analysis, thermochemical analysis. .. _`sec:thermo`:. Vibrational and Thermochemical Analysis; =======================================. .. codeauthor:: Rollin A. King and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:thermo>`, :ref:`PSI Variables <apdx:thermo_psivar>`, :source:`THERMO <psi4/driver/qcdb/vib.py>`. .. caution:: It is important to know that |PSIfour|, like any other; quantum chemistry program, does *not* compute the usual enthalpies,; entropies, or Gibbs free energies *of formation* provided by most; reference books. Instead, quantum chemistry programs compute ""absolute""; thermodynamic properties relative to infinitely separated nuclei and; electrons, not ""formation"" values relative to elements in their standard; states. If you are computing thermodynamic differences, like a reaction; enthalpy computed as the enthalpy of the products minus the enthalpy; of the reactants, then these ""absolute"" enthalpies are perfectly valid; and usable. However, they cannot be mixed and matched with enthalpies of; formation from reference books, since the zero of energy is not the same.; Additionally, the ""thermal energies"" reported in kcal/mol are the ; finite-temperature *corrections* to the electronic total energy, and ; not the overall thermal energies themselves. If in doubt, use the; reported Total Energies in Hartree/particle. Keywords; ^^^^^^^^. .. include:: autodir_options_c/thermo__t.rst; .. include:: autodir_options_c/thermo__p.rst; .. include:: autodir_options_c/thermo__rotational_symmetry_number.rst. .. _`sec:thermoExamples`:. Examples; ^^^^^^^^. A thermochemical analysis is performed after any full (not just specific; symmetry subgroups). If the wavefunction is retained, it may be reused; at a different temperature, pressure, rotational symmetry number, or; isotopic substitution through the function :py:func:`psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst:2113,usab,usable,2113,doc/sphinxman/source/thermo.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/thermo.rst,1,['usab'],['usable']
Usability,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1443,guid,guides,1443,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guides']
Usability,"\end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The member functions to be bound; are then specified by a chained sequence of {\tt def} calls (note the periods),; terminated by a semicolon. Then, if the user had defined a molecule called; ``water'', they could print its geometry simply with the command {\tt; water.print\_to\_output()}. Direct interaction with the Psi module from Python requires function calls that; look like {\tt psi4.call\_some\_function()}. This is not very friendly to; your average user, so a preprocessor checks for known Psi syntax and turns it; into valid Python, before handing it off for excecution. This preprocessor is; purely Python, and lives in {\tt \$PSI4/lib/python/input.py}. For example, the; following text \begin{verbatim}; set scf {; SCF_TYPE DIRECT; BASIS cc-pVDZ; RI_BASIS_SCF cc-pVDZ-HF; guess core; }; \end{verbatim}; is converted to the following text; \begin{verbatim}; psi4.set_default_options_for_module(""SCF""); psi4.set_option(""SCF_TYPE"", ""DIRECT""); psi4.set_option(""BASIS"", ""cc-pVDZ""); psi4.set_option(""RI_BASIS_SCF"", ""cc-pVDZ-HF""); psi4.set_option(""GUESS"", ""core""); \end{verbatim}; which can be handled by Python. There are a number of other utilities, which are entirely Python, located in; {\tt \$P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst:2230,simpl,simply,2230,doc/sphinxman/source/attic/progpycppconnect.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst,1,['simpl'],['simply']
Usability,"_INCLUDE@samples/tu2-ch2-energy/input.dat. This sample input can be found in ; :srcsample:`tu2-ch2-energy` and as; before it can be run through the command ``psi4 input.dat output.dat``; (actually, because ``psi4`` by default looks for an input file named; ``input.dat`` and writes by default to a file called ``output.dat``, in this; case one could also just type ``psi4``). If it works, it should print; the final energy as ::. @UHF Final Energy: -38.92533462456894. Notice we added a new keyword, ``set reference uhf``, to the input. For; open-shell molecules, we have a choice of unrestricted orbitals; (unrestricted Hartree--Fock, or UHF), or restricted orbitals (restricted; open-shell Hartree--Fock, or ROHF). Usually, UHF is a little easier to; converge (although it may be more susceptible to spin contamination than; ROHF). Geometry Optimization and Vibrational Frequency Analysis; ========================================================. The above examples were simple single-point energy computations; (as specified by the :py:func:`~psi4.driver.energy` function). Of course there are other; kinds of computations to perform, such as geometry optimizations and; vibrational frequency computations. These can be specified by replacing; :py:func:`~psi4.driver.energy` with :py:func:`~psi4.driver.optimize` or :py:func:`~psi4.driver.frequency`, respectively. Here's an example of optimizing the H\ :sub:`2`\ O molecule using Hartree--Fock with; a cc-pVDZ basis set (located in; :srcsample:`tu3-h2o-opt`). .. literalinclude:: @SFNX_INCLUDE@samples/tu3-h2o-opt/input.dat. This should perform a series of gradient computations. The gradient points; which way is downhill in energy, and the optimizer then modifies the; geometry to follow the gradient. After a few cycles, the geometry should; converge with a message like ``Optimization is complete!``. As indicated; in the following table (printed by the optimizer at the end of the; computation and grep-able with ``~``), the energy decreases",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:6643,simpl,simple,6643,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33657,clear,clear,33657,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['clear'],['clear']
Usability,"able('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency()",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11055,simpl,simply,11055,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simply']
Usability,"ails about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the work; that caters to their individual strengths. A number of concrete examples of this workflow exist in the code already. For; finite difference computations of energy derivatives, the logic to de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:5974,clear,clear,5974,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['clear'],['clear']
Usability,"als. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; |globals__print| option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. .. index::; pair: SCF; theory. .. _`sec:scftheory`:. Theory; ~~~~~~. The objective of Hartree--Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) :math:`\{\psi_i\}`,. .. math:: \psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1). Here, :math:`\{\phi_{\mu}\}` are the basis functions, which, in |PSIfour| are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix :math:`C_{\mu i}` contains the MO coefficients, which are the; constrained variational parameters in Hartree--Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. .. math:: | \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |. This form for the Hartree--Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; :math:`\mathbb{R}^6` instead of a more complicated effect in; :math:`\mathbb{R}^N`\ . Considering the electronic Hamiltonian,. .. math:: \hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},. the Hartree--Fock energy is, by Slater's rules,. .. math:: E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:5717,simpl,simplest,5717,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['simpl'],['simplest']
Usability,"and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52989,guid,guidance,52989,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['guid'],['guidance']
Usability,"approximation and scaling; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the :math:`S^{2}`; approximation, that can be interpreted as the exchange of a single electron ; pair between monomers. The :math:`S^{2}` approximation is usually pretty good, but may ; break down for short intermolecular distance, particularly in high-order; terms. To compensate for these deviations, in 2014 Parker et al. [Parker:2014:094106]_ ; recommended to scale all :math:`S^{2}` approximated exchange terms by the ratio:. .. math:: p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}. and recommended using the ratio with exponent :math:`\alpha = 1`. To obtain SAPT energies with this scaling,; simply set the keyword ``exch_scale_alpha true``. Alternatively, another value for :math:`\alpha`; can be specified by setting |sapt__exch_scale_alpha| to a value. For example, ::. set exch_scale_alpha 1.0. will set :math:`\alpha = 1.0` and scale exchange energies with :math:`p_{EX}(1.0)`. However, as pointed out by Schaffer and Jansen [Schaffer:2013:2570]_; in the context of DFT-based SAPT, the ratios :math:`E_{exch}^{(1)}(S^{2})/E_{exch}^{(1)}`,; :math:`E_{\rm exch-ind}^{(2)}(S^2)/E_{\rm exch-ind}^{(2)}`, and ; :math:`E_{\rm exch-disp}^{(2)}(S^2)/E_{\rm exch-disp}^{(2)}` are not very similar to; each other. Hence, in 2016 universal scaling of all :math:`S^{2}` approximated terms; was turned off by default. Finally, in 2014 Parker et al. [Parker:2014:094106]_ empirically discovered that ; SAPT0 energies for van der Waals dimers with close contacts benefit from a slightly modified ; recipe that involves an empirically adjusted exponent :math:`\alpha = 3.0`. ; To distinguish it from its u",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:12231,simpl,simply,12231,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simply']
Usability,"been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2322,guid,guide,2322,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"binding must be known to Python; this is all done in the ; {\tt \$PSI4/src/bin/psi4/python.cc} file. For example, we have an SCF module, with; the C++ signature; {\tt PsiReturnType cscf::cscf(Options \&options);}; To allow Python to use this, we first define a little wrapper function; \begin{verbatim}; double py_psi_scf(); {; if (scf::scf(Process::environment.options) == Success); return Process::environment.globals[""CURRENT ENERGY""];; else; return 0.0;; }; \end{verbatim}; This does a couple of things to automate things a) it passes the default; options object into SCF automatically, so that the user doesn't have to, and b); checks the return value, and will return the energy, which is posted to the; globals map, back to Python. Note that this is C++ code, within \PSIfour\ so; it is aware of all global objects, such as PSIO, Chkpt and Options. Now we; have this simple function call, we can tell Python about it:; \begin{verbatim}; def(""scf"", py_psi_scf);; \end{verbatim}; This binds the keyword ``scf'' to the newly created wrapper function, allowing; the user to type ``scf()'' in their Python input file to fire up the SCF; module. Similarly, the user might want to be able to call {\tt Molecule}'s; member functions directly from Python. This can also be done easily:. \begin{verbatim}; class_<Molecule, shared_ptr<Molecule> >(""Molecule"").; def(""print_to_output"", &Molecule::print).; def(""nuclear_repulsion_energy"", &Molecule::nuclear_repulsion_energy);; \end{verbatim}. This first defines the keyword {\tt Molecule} to refer to the C++ {\tt; Molecule}; the {\tt shared\_ptr<Molecule>} keyword tells Python to store it as; a shared pointer, which ensures that the object will not be deleted until both; C++ and Python have no more references to it. The member functions to be bound; are then specified by a chained sequence of {\tt def} calls (note the periods),; terminated by a semicolon. Then, if the user had defined a molecule called; ``water'', they could print its geometry simp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst:1107,simpl,simple,1107,doc/sphinxman/source/attic/progpycppconnect.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progpycppconnect.rst,1,['simpl'],['simple']
Usability,"brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP; ----------------. * Someone creates a file ``doc/sphinxman/source/pepXXXX.rst`` modeled; on :source:`doc/sphinxman/source/pep0000model.rst` and adds; it to ``STATICDOC`` in :source:`doc/sphinxman/CMakeLists.txt`. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice. * Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down. * Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history). * Once there's agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include; -------------------------. * **Best practices or re-vamped best practices** . Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. * **Request/present viewpoint on organization**. Draw attention to organization needed in code outside one's area of; expertise. Request interface for some structure (*e.g.*, gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. * **Fair Warning: Proposal to change things up**. Announce plans to re-organize code structure or how something is; handled. List goals (may be conflictin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst:3188,simpl,simple,3188,doc/sphinxman/source/pep0001.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst,1,['simpl'],['simple']
Usability,"btain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}. where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. .. math:: . \bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}. .. math:: . f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}. Energy functional :math:`E_{DCT}` has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of :math:`\boldsymbol{\gamma_1}` (:math:`\boldsymbol{\kappa}`) and the density cumulant; (:math:`\boldsymbol{\lambda_2}`). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of :math:`\boldsymbol{\gamma_1}` is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; :math:`\boldsymbol{\gamma_2}`. In order to obtain the DCT energy, two conditions must be satisfied:. 1) The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods). 2) The energy must be stationary with respect to the variation of the density; cumulant :math:`\boldsymbol{\lambda_2}`, constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present momen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:4604,simpl,simplified,4604,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['simpl'],['simplified']
Usability,"b|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb^\alpha)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}; - \frac{1}{2}\frac{[(ia^\beta|jb^\beta)-(ib^\beta|ja^\beta)](ia^\beta|jb^\beta)}; {\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. Note that the UHF-MP2 equations use three classes of integrals, while the; RHF-MP2 equations use only one class. Because of this, a UHF-MP2 or; ROHF-MBPT(2) energy should take roughly three times as long as an RHF-MP2; energy. Recommendations; ---------------. All-in-all, DFMP2 should be a simple module to use, with few keywords (fully; documented in the Appendix :ref:`apdx:dfmp2`). Some basic recommendations are included below:. * DFMP2 should be run with the :math:`ov`-type RI or MP2FIT auxiliary; basis sets, *not* the -JKFIT basis sets. The automatic basis selector; should work fine for most all bases (exceptions are less common elements; at higher than quadruple-zeta). Generally, it is always better to specify; only the orbital basis set and let the auxiliary bases be chosen; automatically. If you want to specify manually, use the; |dfmp2__df_basis_mp2| keyword. * DFMP2 likes memory. At a minimum, :math:`2Q^2` doubles are required,; where :math:`Q` is the size of the auxiliary basis set. However, there is; one disk transpose of the :math:`(Q|ov)` tensor in the RHF-MP2 algorithm; [two for UHF-MP2 and ROHF-MBPT(2)], so more memory will reduce seek times.; If you notice DFMP2 using more memory than allowed, it is possible that; the threaded three-index ERI computers are using too much overhead memory.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:8710,simpl,simple,8710,doc/sphinxman/source/dfmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst,1,['simpl'],['simple']
Usability,"ceived a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->compute_shell(P, Q, R, S);; // results are in buffer, do something with them..; }; }; }; }; }. An integral factory is used, which can then produce integral object for various; operator types and derivative levels. A sieve is also constructed; thi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:1743,simpl,simple,1743,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"ck <sec:scferi>`. However, for LRC functionals, the long-range; exchange contributions to the Kohn--Sham matrix have only been implemented in the; DF and DIRECT algorithms. The use of DF is highly recommended for KS-DFT, as the; errors incurred by the density fitting approximation (in a proper -JKFIT; auxiliary basis) are orders of magnitude smaller than the accuracy of any known; functional. Key representative methods supported by the SCF module in |Psifour| are; detailed in Table :ref:`SCF Capabilities <table:scf_stdsuite>`. Note; from :ref:`table:conv_scf` that these SCF-level methods default to; density-fitted reference; use |globals__scf_type| to select an alternate; algorithm. SCF-level methods have no alternate implementations. .. include:: autodoc_capabilities_scf.rst. IP Fitting; ~~~~~~~~~~. In collaboration with the Bredas group, we have developed an automatic procedure; for IP fitting of LRC functionals, based on a modified Regula-Falsi method. To; perform IP fitting, one simply calls the :py:func:`~psi4.driver.frac.ip_fitting` Python macro, after; setting up a standard LRC UKS computation. A representative example is::. memory 512 MB. molecule h2o {; 0 1 # must be neutral; O; H 1 1.0; H 1 1.0 2 104.5; # IP fitting runs in C1 symmetry; }. set {; reference uks # UKS, as we need to do neutral/cation; basis cc-pvdz; scf_type df; }. # Optional arguments are minimum omega, maximum omega, molecule object; omega = ip_fitting('wb97', 0.4, 2.0, molecule=h2o). This performs IP fitting on water for wB97/cc-pVDZ with density fitting. A; number of neutral and cation single-point computations are run at various values; of :math:`\omega`, though the later iterations are much faster due to reuse of; the DF tensors, and starting from the neutral/cation orbitals of the previous; :math:`\omega`. The procedure can also be assisted by providing a tighter guess; for the bounds of :math:`\omega`. This small test case has a tuned; :math:`\omega` of 1.700, hence the bounds of 0.4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:28385,simpl,simply,28385,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simply']
Usability,"co A. Evangelista. The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; |PSIfour| implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :math:`H_{\rm X2C}`:. .. math:: H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}. that is a sum of a kinetic energy (:math:`T_{\rm X2C}`) and potential energy; (:math:`V_{\rm X2C}`) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114]_.; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass--Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos' ANO basis sets. .. note:: See also :ref:`sec:DKH` for another relativistic Hamiltonian. .. _`sec:ScalarRelativistic`:. A First Example; ^^^^^^^^^^^^^^^. The following is a simple input that will perform a Hartree--Fock calculation; using the X2C Hamiltonian. ::. molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result::. @RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy::. @RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options; ^^^^^^^^^^^^^^^^^^. The X2C module in |PSIfour| supports different combinations of basis set.; By default, if the input file specifies only |mints__basis|, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst:2275,simpl,simple,2275,doc/sphinxman/source/relativistic.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst,1,['simpl'],['simple']
Usability,"cule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first. ::. molecule h2 {; H; H 1 0.9; }; ; molecule h {; H; }; ; activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. :ref:`sec:jobControl` provides more details about the job control; and calculation keywords used in the above examples. .. index:: ; single: Ghost Atoms; single: molecule; ghost; .. _`sec:ghosts`:. Ghost Atoms; ===========. While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in :ref:`sec:fragments`,; manual specification of ghost atoms is sometimes required. Either ::. molecule he2 {; He; Gh(He) 1 2.0; }. or ::. molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, *i.e.*, possessing; basis functions but no electrons or nuclear charge. See :srcsample:`dfmp2-1`; and :srcsample:`ghosts` for a demonstration of both mechanisms for specifying; ghost atoms. .. index:: ; single: Isotopes; single: molecule; isotope; .. _`sec:isotope`:. Isotopic Substitution; =====================. .. caution:: Use of isotopic substitution in |PSIfour| is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule. The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this *will* change the; molecule's point group symmetry. ::. molecule dto {; units au; O 0.00000000 0.00000000 0.0",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:7985,simpl,simplified,7985,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['simpl'],['simplified']
Usability,"e Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst:1432,simpl,simply,1432,doc/sphinxman/source/sowreap.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst,1,['simpl'],['simply']
Usability,"e minimal errors; while providing much faster computations [Hohenstein:2010:184111]_ ; [Hohenstein:2010:014101]_. Since we're using density fitting for the SAPT,; we might as well also use it for the Hartree--Fock computations that are; performed as part of the SAPT. We can specify that with ; ``scf_type DF``. Density fitting procedures require the use of auxiliary basis sets that; pair with the primary basis set. Fortunately, |PSIfour| is usually smart; enough to figure out what auxiliary basis sets are needed for a given; computation. In this case, jun-cc-pVDZ is a standard enough basis set; (just a simple truncation of the very popular aug-cc-pVDZ basis set); that |PSIfour| correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree--Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure. To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with ``freeze_core True``. The SAPT; procedure is invoked with the simple call, ``energy('sapt0')``. This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887]_, and this is discussed in more detail; in the SAPT section later in this manual. For now, we'll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 |kcalpermol|; (``Elst10,r`` where the 1 indicates the first-order; perturbation theory result with r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:14708,simpl,simple,14708,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"e |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; `",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7943,guid,guidelines,7943,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['guid'],['guidelines']
Usability,"e;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->compute_shell(P, Q, R, S);; // results are in buffer, do something with them..; }; }; }; }; }. An integral factory is used, which can then produce integral object for various; operator types and derivative levels. A sieve is also constructed; this allows; a quick determination of whether an integral shell quartet will be significant; in magnitude or not, potentially saving a lot of work. This simple scheme is; clean and easy to understand, and is still supported in the latest version of; |PSIfour| with only a small change to the sieve syntax and handling of buffer; addresses, noted below. The new syntax; --------------. The newer integral engines being interfaced to |PSIfour| may or may not require; a group of similar integrals to be computed together in a block using; vectorized instructions. To accomodate this possibility, a new syntax has been; introduced in Libmints:. .. code-block:: cpp. auto blocksPQ = ints[0]->get_blocks12();; auto blocksRS = ints[0]->get_blocks34();. auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; bool needs_exchange = true;; auto eri = factory->eri(deriv_level, use_shell_pairs, needs_exchange);; const auto &buffers = eri->buffers();. eri->update_density(D);; bool use_batching = eri->maximum_block_size() > 1;. // loop over all the blocks of (P>=Q|; for (size_t blockPQ_idx = 0; blockPQ_idx < blocksPQ.size(); blockPQ_idx++) {; const auto& blockPQ = blocksPQ[blockPQ_idx];; // loop ove",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:2941,simpl,simple,2941,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"eatured electronic structure programs are large and complex. However,; the |PSIfour| ecosystem provides a path for easier and more rapid development; of new features. The earliest versions of |PSIfour| were written by merging; individual executables that performed specific tasks into a unified C++; executable. By linking this C++ executable against the Python interpreter, the; individual modules could be called in any sequence, enabling a very diverse; range of tasks to be accomplished within a given input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:2437,simpl,simpler,2437,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simpler']
Usability,"eening can be performed on the; product, which yields more sparsity. To enable this, simply call the integral; object's ``update_density`` member, passing it a SharedMatrix holding the; current density (remember that it changes during each iteration of the SCF) and; the product will be considered during screening. If only coulomb-like terms; are to be computed, the ``needs_exchange`` argument to the integral object; constructor should be set to false, otherwise it should be true to correcly; account for products of the density and integrals that contribute to; exchange-like terms. Shell blocking; .............. Each underlying integral engine knows whether it will use blocks, and will set up; the metadata automatically. Instead of looping over individual shells, the; user should loop over blocks supplied by the integral object; these blocks will; be just a single shell quartet combination for the case where blocking is not; used. It is simple to loop over pairs within each block using C++11 syntax, as; demonstrated in the code snippet above. Only shell pairs with significant; overlap are included in the shell block information, making this an efficient; way to loop over non-negligible terms. Permutational symmetry; ...................... The pairs within each block are optimized for efficiency. First, they are; screened during the integral object's creation to ensure that only terms with; appreciable overlap are stored. Second, only P,Q combinations that are; permutationally unique are stored, ordered with the higher angular momentum; first. Therefore care must be taken to ensure that the missing permutations; are correctly accounted for when processing the integrals within the loop. See; the DirectJK code in libfock for an example of using this scheme for a Fock; matrix build. Using bra-ket symmetry; ...................... In cases where there is no batching performed, bra-ket symmetry can be; trivially enforced by ensuring that one of the block indices is greater ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:8494,simpl,simple,8494,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simple']
Usability,"eps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.39",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5131,simpl,simple,5131,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['simpl'],['simple']
Usability,"ere tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present in NumPy to do the heavy lifting and the code is easy to; implement entirely in the Python layer. In the case where the matrix operation; is non-standard and requires some specialized code to handle disk-based; storage, the decision to write in Python is less clear cut. It is certainly; possible to write these out-of-core routines using Numpy primitives, but there; are a number of tools in |PSIfour| already to perform tasks like these that are; required, *e.g.*, for cluster. In this case, a good design would be to write a; simple piece of code in the C++ layer that performs the matrix operation on a; given input, using the I/O routines available in |PSIfour| and the parallelism; afforded by OpenMP, and to make that code available to the front end as; described in :ref:`sec:prog_tour-exposing`. The Python layer could then be; responsible for obtaining the input data and calling this C++ code to do the; manipulations, allowing each language layer to handle the subset of the wo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:5677,simpl,simply,5677,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simply']
Usability,"esent as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use LIBINT2_SHGAUSS_ORDERING=standard|gaussian; # *at Libint source generation time*. At Psi4 build time, it's going to be looking for standard (sss), so you'll have to; # edit the CMake to use a gss.; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can no longer be adapted to use a libtool+cmake source.; # * Libraries of different AM are not hot-swappable in a Psi4 build, but they only require a relinking.; # [Jan 2024]; # * As of v1.9, Psi4 can use an upstream v2.8 Libint2. This is a libtool+cmake build, so `find_package(Libint2 ... COMPONENTS ...)` has no components to check. find_package(; Libint2; 2.7.2; CONFIG; COMPONENTS; sss; CXX_ho; impure_sh; ""eri_c4_d0_l${MAX_AM_ERI}"" eri_c3_d0_l4 eri_c2_d0_l4 onebody_d0_l4; eri_c4_d1_l2 eri_c3_d1_l3 eri_c2_d1_l3 onebody_d1_l3; onebody_d2_l3; OPTIONAL_COMPONE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:2932,guid,guide,2932,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['guid'],['guide']
Usability,"euterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this *will* change the; molecule's point group symmetry. ::. molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by |PSIfour| can be found at; :source:`psi4/include/psi4/masses.h`. See :srcsample:`freq-isotope2` for about; the only use to which isotopologues can presently be put in |PSIfour|. .. index:: ; single: PubChem; single: molecule; PubChem; .. _`sec:pubchem`:. `PubChem <http://pubchem.ncbi.nlm.nih.gov/>`_ Database; ======================================================. Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, |PSIfour| can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem]_ database. For example, to run a computation on benzene, we can use the following molecule specification::. molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; |PSIfour| to search PubChem for a starting structure. The search is actually; performed for compounds whose name *contains* ""benzene"", so multiple; entries will be returned. If the name provided (""benzene"" in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are printed to the output file, prompting the user to provide a more; specific name. For example, if we know that we want to run a computation on a; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:9739,intuit,intuitive,9739,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['intuit'],['intuitive']
Usability,"ffectively mean, ""Has option been changed by the; user?"". The way to do this is to isolate and nullify any changes to; options made by the code, the difference between [a] and [c]. C-side,; there is no concern since options are essentially read-only; within the modules. Py-side is another matter since the driver's role is to take terse; instructions from the user and translate those into instructions to the; C++ modules, usually through manipulation of options. .. comment * Reading options C-side; .. comment ; .. comment This usually takes place within each module during options parsing,; .. comment see section [] for details. No option is modified, so this process has; .. comment no entanglement with the definition of has_changed.; .. comment ; .. comment * Setting options C-side; .. comment ; .. comment This is very rarely done (what's going on in optking?). This; .. comment document was written as background to the only case of note: PUREAM.; .. comment This option has a clearly defined default, but it can't be set in; .. comment read_options because its default depends on other options. This is a; .. comment situation common to many options (and most all array options) and is; .. comment generally handled within the module code and so is never available to; .. comment the user. Analogously, PUREAM is handled in libmints but it is never; .. comment reset. In order to preserve effective definition [a], the strategy for each; python driver function is to query for the value of any option the; function may want to change and for the current has_changed status; (presumably reflecting whether the user has changed the value, as long as; no preceding code has corrupted that definition). The python function; then makes its changes to the option and runs any c-side modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the va",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:6931,clear,clearly,6931,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['clear'],['clearly']
Usability,"fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:. .. math::; :label: QCISD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + T_1T_2)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4989,simpl,simplified,4989,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['simpl'],['simplified']
Usability,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2881,guid,guide,2881,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,3,"['guid', 'learn']","['guide', 'learn']"
Usability,"hat there's a special comment immediately before the; declaration of each keyword. You must provide these comments for any; options you add as they will be automatically inserted into the user; manual Providing a clear description will also help you to remember what; the keywords do and how they're used. The comments must live between the; special comment delimiters. For options that most users shouldn't need,; add an expert flag to the comment. This will place these options in a; separate section of the user manual. .. code-block:: cpp. /*- comment -*/; options.add_ ...; /*- comment !expert -*/; options.add_ ... As is apparent from the examples above, comments can span multiple lines; (see ``PRINT``), can refer to other options (through hyperlinks; see; ``SAVE_INFO``), can refer to sections of the manual (through hyperlinks;; see ``DOCC``), and can contain LaTeX notation (see ``AO_BASIS``). (To get; the LaTeX subscript command, use ""@@"" instead of ""_"".). See :ref:`faq:readoptions`; for guidelines on naming options. What is *has_changed* ?; -----------------------. There are times when we need to know whether an option was provided by the; user or if the defaults are being used. For this reason, the Options; object stores a boolean *has_changed* value, in addition to the option; value itself. A clarification of definition:. - [a] has_changed DOESN'T answer ""Has option been changed by the user?""; - [b] has_changed DOESN'T answer ""Is option now different from the default?""; - [c] has_changed DOES answer ""Has option value been touched at all, by user or code?"". The above items notwithstanding, psi4 code should be written so that; *has_changed* DOES effectively mean, ""Has option been changed by the; user?"". The way to do this is to isolate and nullify any changes to; options made by the code, the difference between [a] and [c]. C-side,; there is no concern since options are essentially read-only; within the modules. Py-side is another matter since the driver's role is t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:5269,guid,guidelines,5269,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['guid'],['guidelines']
Usability,"he ``psi4.`` namespace, then submit it to the ``python`` interpreter.; Both modes are equally powerful. This tutorial covers the Psithon; mode. .. note:: Some |PSIfour| functions and keywords have aliases. For example,; ``frequency()``, ``frequencies()``, and ``freq()`` all work to ; obtain vibrational frequencies. Basic Input File Structure; ==========================. |PSIfour| reads input from a text file, which can be prepared in any standard; text editor. The default input file name is ``input.dat`` and the; default output file name is ``output.dat``. So that you can give your; files meaningful names, these defaults can be changed by specifying; the input file name and output file name on the the command line.; The syntax is:. >>> psi4 input-name output-name. If you give an input name but no output name, then the output name will; be the same as the input name (replacing any "".in"" or "".dat"" extension by "".out""). Sample Input Files; ==================. Below, we will provide a few simple input files as examples. A large ; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the :source:`samples` directory. Running a Basic Hartree--Fock Calculation; =========================================. In our first example, we will consider a Hartree--Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix. .. literalinclude:: @SFNX_INCLUDE@samples/tu1-h2o-energy/input.dat. .. note:: The memory and basis set specifications are placed *before* the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:2676,simpl,simple,2676,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"he function a Molecule object for which to build basis, a label for; the basis (generally, BASIS), and a hint for finding the basis. This last; argument gets used to find a python function by that name camoflaged; (that's what ``basis {...}`` blocks in the input file get translated into); or failing that a string to find a gbs file defining the basis. ::. // simple; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(molecule, ; ""BASIS"", ""CC-PVDZ"");. // self-contained; boost::shared_ptr<BasisSet> primary = BasisSet::pyconstruct_orbital(Process::environment.molecule(),; ""BASIS"", Process::environment.options.get_str(""BASIS""));. Auxiliary Basis; ***************. Give the function a Molecule object for which to build basis, a label for; the basis, a hint for finding the basis, a fitting role to apply if; defaults need to be generated, and a hint for finding the orbital basis to; build defaults against. ::. // simple; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(molecule,; ""DF_BASIS_SCF"", """", ; ""JKFIT"", ""CC-PVDZ"");. // self-contained and force Spherical; boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct_auxiliary(Process::environment.molecule(),; ""DF_BASIS_SCF"", Process::environment.options.get_str(""DF_BASIS_SCF""), ; ""JKFIT"", Process:environment.options.get_str(""BASIS""), 1);. Adding Basis Option to Code; ***************************. - Register new basis keyword with :source:`src/bin/psi4/read_options.cc`; (of course). The default should be the empty string. ::. options.add_str(""DF_BASIS_ELST"", """");. - Register new basis keyword with the input parser; :source:`share/python/inputparser.py`. In the main function; `process_input`, add it to the regex below. This ensures that users can; define ``basis_keyword basis_name {...}`` blocks where the contents of; the block get associated with basis_name and assigned to your; basis_keyword. ::. basis_block = re.compile(r'^(\s*?)(basis|df_basis_scf|df_basis_mp2|df_basis_cc|df_bas",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst:4416,simpl,simple,4416,doc/sphinxman/source/attic/prog_basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst,1,['simpl'],['simple']
Usability,"hinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3530,simpl,simplest,3530,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['simpl'],['simplest']
Usability,"hon``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8090,simpl,simply,8090,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['simpl'],['simply']
Usability,"i.e. keep; i>j), we might call dpd_buf4_init() in the following; manner:. dpd_buf4_init(Buffer, PSIFILE, 0, 2, 5, 0, 5, 1, ""<ij|ab> integrals"");. These argument indicate that while the integrals are stored as; (pqnum,rsnum) = (0, 5) on disk, they will be stored in memory as (2,; 5), with the row indices packed. In addition, the data will be; antisymmetrized as it is read into memory. Note, however, that the; libdpd routines do not make sure that your intialization; request makes sense (apart from some pre-processor defined debugging; in a few high-level functions), and it is quite possible to; erroneously pack indices for non-(anti)symmetric quantities. When the program is finished with a given buffer, the int dpd_buf4_close(dpdbuf4 *Buf); function is called to deallocate the associated memory. V. Contraction Evaluation. The library provides a number of high-level functions for evaluating a; variety of products among two- and four-index buffers. This section; outlines these functions and provides simple examples of their use.; int dpd_contract444(dpdbuf4 *X,; dpdbuf4 *Y, dpdbuf4 *Z, int target_X, int target_Y, double; alpha, double beta):; This function contracts two four-index buffers, X and; Y, into a target four-index buffer, Z, using the; general formula, alpha * X(pq,mn) * Y(mn,rs) = beta *; Z(pq,rs). The current version of this function requires that the; target (external) indices must both be contained in the bra (row) or; ket (column) of X and Y. The value of; target_X indicates that the target indices of X are; contained in its bra (0) or its ket (1); target_Y is defined; similarly. For example, we may use dpd_contract444() to evaluate the; following contraction found in the T2 amplitude equations; from coupled cluster theory:. tijab = tijcd <ab||cd>. (A summation over the repeated indices c and d is implied.) Assuming; that the <ab|cd> integrals exist on disk in a (pqnum,rsnum) =; (5,5) format and the right-hand-side T amplitudes exist on disk in a; (2,7) ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:16686,simpl,simple,16686,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,1,['simpl'],['simple']
Usability,"ial format of the; comments on lines 27 and 30. These are still valid \module{C++} comments, but; the extra hyphens inside are essential in this context. Whenever adding any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} mod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst:3911,simpl,simple,3911,doc/sphinxman/source/attic/progtutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst,1,['simpl'],['simple']
Usability,"if(${ENABLE_CheMPS2}); find_package(CheMPS2 1.8.7 CONFIG QUIET). if(${CheMPS2_FOUND}); get_property(_loc TARGET CheMPS2::chemps2 PROPERTY LOCATION); message(STATUS ""${Cyan}Found CheMPS2${ColourReset}: ${_loc} (found version ${CheMPS2_VERSION})""); add_library(chemps2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(VERBOSE ""Suitable CheMPS2 located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected CheMPS2Config.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_CheMPS2}); message(FATAL_ERROR ""Suitable CheMPS2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable CheMPS2 could not be located, ${Magenta}Building CheMPS2${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). ExternalProject_Add(chemps2_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/SebWouters/CheMPS2/archive/d8ac508.tar.gz # v1.8.9 + 1; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DCMAKE_RANLIB=${CMAKE_RANLIB}; -DCMAKE_AR=${CMAKE_AR}; -DCMAKE_NM=${CMAKE_NM}; -DENABLE_TESTS=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt:459,clear,clears,459,external/upstream/chemps2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/chemps2/CMakeLists.txt,1,['clear'],['clears']
Usability,"if(${ENABLE_Einsums}); find_package(Einsums 0.3 CONFIG). if(TARGET Einsums::einsums); get_property(_loc TARGET Einsums::einsums PROPERTY LOCATION); message(STATUS ""${Cyan}Found Einsums${ColourReset}: ${_loc} (found version ${Einsums_VERSION})""); add_library(einsums_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected TargetHDF5Config.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(VERBOSE ""Suitable Einsums located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Einsums}); message(FATAL_ERROR ""Suitable Einsums could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Einsums could not be located, ${Magenta}Building Einsums${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); else(); set(_a_only ON); endif(). set(_einsums_dir ""share/cmake/Einsums""). ExternalProject_Add(einsums_external; DEPENDS lapack_external; hdf5_external; URL https://github.com/Einsums/Einsums/archive/v0.3.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DEINSUMS_STATIC_BUILD=${_a_only}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -DEINSUMS_INSTALL_CMAKEDIR=${_einsums_dir}; # -DENABLE_XHOST=${ENABLE_XHOST}; -DEINSUMS_ENABLE_TESTING=OFF; -DEINSUMS_USE_HPTT=ON; # -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS};",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt:335,clear,clears,335,external/upstream/einsums/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/einsums/CMakeLists.txt,1,['clear'],['clears']
Usability,"if(${ENABLE_ambit}); find_package(ambit 0.6 CONFIG QUIET). if(${ambit_FOUND}); get_property(_loc TARGET ambit::ambit PROPERTY LOCATION); message(STATUS ""${Cyan}Found ambit${ColourReset}: ${_loc} (found version ${ambit_VERSION})""); add_library(ambit_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(VERBOSE ""Suitable ambit located externally as user insists""); endif(). # reset below necessary as find_package clears it. better solution sought; set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected ambitConfig.cmake"" FORCE); else(); if(${CMAKE_INSIST_FIND_PACKAGE_ambit}); message(FATAL_ERROR ""Suitable ambit could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ambit could not be located, ${Magenta}Building ambit${ColourReset} instead.""). if(${BUILD_SHARED_LIBS}); set(_a_only OFF); set(_so_only ON); else(); set(_a_only ON); set(_so_only OFF); endif(). set(_ambit_dir ""share/cmake/ambit""). ExternalProject_Add(ambit_external; DEPENDS lapack_external; hdf5_external; pybind11_external; URL https://github.com/jturney/ambit/archive/733c529.tar.gz; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DSTATIC_ONLY=${_a_only}; -DSHARED_ONLY=${_so_only}; -DENABLE_OPENMP=${ENABLE_OPENMP} # relevant; #-DENABLE_VECTORIZATION=${ENABLE_VECTORIZATION}; #-DEXTRA_Fortran_FLAGS=${CMAKE_EXTRA_Fortran_FLAGS}; -DEXTRA_C_FLAGS=${CMAKE_C_FLAGS}; -DEXTRA_CXX_FLAGS=${CMAKE_CXX_FLAGS}; -Dambit_INSTALL_CMAKEDIR=${_ambit_dir}; -DPython_EXECUTABLE=${Python_EXECUTABLE}; -DPython_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPytho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt:437,clear,clears,437,external/upstream/ambit/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ambit/CMakeLists.txt,1,['clear'],['clears']
Usability,"if(${ENABLE_libefp}); #find_package(pylibefp 0.6.1 CONFIG QUIET); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_pylibefp})); include(FindPythonModule); find_python_module(pylibefp QUIET); endif(). if(${pylibefp_FOUND}); message(STATUS ""${Cyan}Found pylibefp${ColourReset}: ${PY_pylibefp} (found version ${pylibefp_VERSION})""); add_library(pylibefp_external INTERFACE) # dummy. # reset below necessary as find_package clears it. better solution sought; #set(TargetHDF5_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/TargetHDF5 CACHE PATH ""path to externally detected pylibefpConfig.cmake"" FORCE). if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(VERBOSE ""Suitable pylibefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_pylibefp}); message(FATAL_ERROR ""Suitable pylibefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable pylibefp could not be located, ${Magenta}Building pylibefp${ColourReset} instead.""). ExternalProject_Add(pylibefp_external; DEPENDS lapack_external; libefp_external; pybind11_external; URL https://github.com/loriab/pylibefp/archive/b3da48f.tar.gz # v0.6.2 + 5; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} # unused, but needs working compiler; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CXX_STANDARD=${psi4_CXX_STANDARD}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; #-DLIBC_INTERJECT=${LIBC_INTERJECT}; -DPYTHON_EXECUTABLE=${Python_EXECUTABLE}; -DPYTHON_INCLUDE_DIR=${Python_INCLUDE_DIRS}; -DPYTHON_LIBRARY=${Python_LIBRARIES}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -Dlibefp_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt:408,clear,clears,408,external/upstream/pylibefp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/pylibefp/CMakeLists.txt,1,['clear'],['clears']
Usability,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1405,guid,guides,1405,doc/sphinxman/source/build_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst,1,['guid'],['guides']
Usability,"iguration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:2327,simpl,simplest,2327,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simplest']
Usability,"inary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4243,simpl,simple-,4243,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['simpl'],['simple-']
Usability,"ing any; options for any module, you must comment them as shown - this will ensure that; the keywords are automatically inserted into the \PSIfour\ users' manual. The; \module{main} function does a little setting up of the \PSI\ input and output; environments, before calling the module code we're developing (on line 53) and; shutting down the \PSIfour\ I/O systems. The module we're developing is in the following source file. \includesource{sample-codes/integrals/integrals.cc}{C++}. Given the extensive documentation within the code, we'll not describe this file; line-by-line; however, some points warrant elaboration. Notice that the entire; module is encapsulated in the \module{psi::integrals} namespace (lines 6 and; 92). This simple example has only one function body, which lives in a single; source file - if more functions and/or source files were added, these too would; have to live in the \module{psi::integrals} namespace. On lines 29 and 31 of; \file{main.cc} we told the parser which keywords to expect, and provided; default values in case the user omited them from the input. This makes; retrieving these options very clean and simple ({\it c.f.} lines 11 and 12 of; \file{integrals.cc}). Each \PSIfour\ module will have to initialize its own; local \module{PSIO} and \module{Chkpt} objects to perform I/O and to retrieve; information from previously run modules. Notice that these objects are created; within smart pointers (see section XXX for more information) so that they are; automatically deleted when they go out of scope, thus reducing the burden on; the programmer. Likewise, the basis sets, matrices and integral objects are; allocated using smart pointers. The code described above can be built by simply typing ``make'' on the command; line. To run this code, you must first run the \module{input} module to read; in the basis set information. A \PSI\ input for this code should look some; thing like the following:. \includeinput{sample-codes/integrals/input.dat}; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst:4324,simpl,simple,4324,doc/sphinxman/source/attic/progtutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst,2,['simpl'],"['simple', 'simply']"
Usability,"ing of all :math:`S^{2}` approximated terms; was turned off by default. Finally, in 2014 Parker et al. [Parker:2014:094106]_ empirically discovered that ; SAPT0 energies for van der Waals dimers with close contacts benefit from a slightly modified ; recipe that involves an empirically adjusted exponent :math:`\alpha = 3.0`. ; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]_). .. math:: E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)} ; + \delta_{HF}^{(2)}; :label: sSAPT0. where :math:`\delta_{HF}^{(2)}` is computed *without* any scaling. Please note that ; sSAPT0 is thus not the same as requesting ``exch_scale_alpha 3.0``, and that the; scaling is automatically performed by requesting ``energy('ssapt0')``. A First Example; ^^^^^^^^^^^^^^^. The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods,; not all of them). ::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis aug-cc-pvdz; 	; 	energy('sapt0'); 	energy('sapt2'); 	energy('sapt2+'); 	energy('sapt2+(3)'); 	energy('sapt2+3'). The SAPT module uses the standard |PSIfour| partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the ``no_reorient`` and ``symmetry; c1`` molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:13818,simpl,simplest,13818,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simplest']
Usability,"is dkh?] <sec:dkh>` :source:`[dkh min version] <external/upstream/dkh/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://github.com/edeprince3/gpu_dfcc/commits/master. * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12464,simpl,simple-,12464,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['simpl'],['simple-']
Usability,"is will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:17310,simpl,simplify,17310,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simplify']
Usability,"ist beginning at |ccenergy__r_convergence|). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. .. [#f7] For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; |scf__e_convergence| and |scf__d_convergence| for SCF of HF or DFT, 11; for |scf__e_convergence| and |scf__d_convergence| for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. .. _`sec:scfrec`:. Recommendations; ~~~~~~~~~~~~~~~. The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. * For |scf__guess|, the ``SAD`` guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; * For wall time, ``DF`` may be a factor of ten or more faster than the exact; integral technologies available in |PSIfour|.; Use ``DF`` unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; ``DIRECT``.; * Don't mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; * Buy a developer a beer!. The ""best-practice"" input file for HF is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:60728,simpl,simple,60728,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['simpl'],['simple']
Usability,"itialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:17648,guid,guidance,17648,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['guid'],['guidance']
Usability,"k:: cpp. std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!. 2. Problems with uninitialized variables. auto works like template type; deduction, hence the right-hand side of the declaration needs to have an; initializer:. .. code-block:: cpp. int x1; // fine, but uninitialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized. 3. Problems with unintended type casts and type mismatches that are hard; to impossible to catch:. .. code-block:: cpp. std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type. *Reference:* Items 2 and 5 in `[Effective Modern C++] <https://isbnsearch.org/isbn/9781491903995>`_. Mark virtual functions in derived classes with override; -------------------------------------------------------. The ``override`` keyword introduced in C++11 is used to mark a function in a; derived class and guarantee that it is overloading a function *with the same; signature* in the base class. This behavior is `checked at compile time; <https://en.cppreference.com/w/cpp/language/override>`_. .. _`faq:printmem`:. Prefer `GiB` for memory printing; --------------------------------. As memory sizes get larger, we should work in giga (requires decimal printing to not round to zero) rather than mega units.; As it's what we're computing anyways, we should work in 1024-based (mebi, gibi, etc. https://en.wikipedia.org/wiki/Gibibyte) rather than 1000-based units.; As it's a unit, put it in brackets.; Note that users can supply MiB, GB, bytes, or whatever; this guideline is for output printing. ::. outfile->Printf("" DFHelper Memory: AOs need %.3f [GiB]; user supplied %.3f [GiB]. "",; (required * 8 / (1024 * 1024 * 1024.0)),. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst:4748,guid,guideline,4748,doc/sphinxman/source/prog_style_c.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_style_c.rst,1,['guid'],['guideline']
Usability,"l result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation. Generally, there are multiple quantities of interest. Appendix; :ref:`apdx:psivariables_module` lists PSI variables variables set by each; module, and :ref:`apdx:psivariables_alpha` defines them. These can be; accessed through the :py:func:`~psi4.core.get_variable` function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available::. e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command :py:func:`~psi4.core.print_variables`. Note that PSI variables; are cleared at the start of each :py:func:`~psi4.driver.energy`, etc. in an input; file by :py:func:`~psi4.core.clean_variables()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:10374,clear,cleared,10374,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['clear'],['cleared']
Usability,"l; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule. The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this *will* change the; molecule's point group symmetry. ::. molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by |PSIfour| can be found at; :source:`psi4/include/psi4/masses.h`. See :srcsample:`freq-isotope2` for about; the only use to which isotopologues can presently be put in |PSIfour|. .. index:: ; single: PubChem; single: molecule; PubChem; .. _`sec:pubchem`:. `PubChem <http://pubchem.ncbi.nlm.nih.gov/>`_ Database; ======================================================. Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, |PSIfour| can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem]_ database. For example, to run a computation on benzene, we can use the following molecule specification::. molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; |PSIfour| to search PubChem for a starting structure. The search is actually; performed for compounds whose name *contains* ""benzene"", so multiple; entries will be returned. If the name provided (""benzene"" in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:9635,intuit,intuitive,9635,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['intuit'],['intuitive']
Usability,"lated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5059,simpl,simple,5059,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simple']
Usability,"luations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems ; only. Publications resulting from the use of the higher-order SAPT code ; should cite the following: ; [Hohenstein:2010:014101]_. For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]_).; As shown in [Parker:2014:094106]_, whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102]_, the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102]_. ; To request CCD dispersion treatment in a SAPT computation, simply append; ``(ccd)`` to the name of the method, as in the following examples ::. 	energy('sapt2+(ccd)'); 	energy('sapt2+(3)(ccd)'); 	energy('sapt2+3(ccd)'). The :math:`\delta_{MP2}` corrections can also be computed automatically; by appending ``dmp2`` to the name of the method, with or without CCD dispersion ::. 	energy('sapt2+dmp2'); 	energy('sapt2+(3)dmp2'); 	energy('sapt2+3dmp2'); 	energy('sapt2+(ccd)dmp2'); 	energy('sapt2+(3)(ccd)dmp2'); 	energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold :math:`3o^2v^2+v^2N_{aux}` arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory. Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords. ; The following keywords are relevant for higher-or",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:27057,simpl,simply,27057,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simply']
Usability,"lues and, optionally eigenvectors of a symmetric matrix. Eigenvectors take up to 10x longer than eigenvalues.; * DGEEV: Eigenvalues and, optionally eigenvectors of a general matrix. Up to 10x slower than DSYEV.; * DGESV: General solver (uses LU decomposition).; * DGESVD: General singular value decomposition.; * DGETRF: LU decomposition.; * DPOTRF: Cholesky decomposition (much more stable/faster); * DGETRS: Solver, given LU decomposition by DGETRF; * DPOTRS: Solver, given Cholesky decomposition by DPOTRF; * DGETRI: Inverse, given LU decomposition by DGETRF (Warning: it's faster and more stable just to solve with DGETRS); * DPOTRI: Inverse, given Cholesky decomposition by DPOTRF (Warning: it's faster and more stable just to solve with DPOTRS). .. _`faq:blasmatrix`:. How to use low-level BLAS/LAPACK with ``psi4.core.Matrix``; ----------------------------------------------------------. Jet's awesome new Matrix object has a lot of simple BLAS/LAPACK built in,; but you can just as easily use the ``double***`` array underneath if you are; careful (the outer index is the submatrix for each irrep). Here's an; example:. .. code-block:: cpp. // BLAS/LAPACK; #include ""psi4/libqt/qt.h""; // Matrix; #include ""psi4/libmints/matrix.h""; ; using namespace psi;; ...; int n = 100;; ; // Allocate A Matrix (new C1 convenience constructor);; shared_ptr<Matrix> A(new Matrix(""Still A, but way cooler"", n,n));; // Get the pointer to the 0 irrep (C1 for now, it errors if you ask for too high of an index); double** A_pointer = A->get_pointer(0);; ; // Call the LAPACK DPOTRF to get the Cholesky factor; // Note this works in column-major order; // The result fills like:; // * * * *; // * * *; // * *; // *; // instead of the expected:; // *; // * *; // * * *; // * * * *; //; int info = C_DPOTRF('L', n, A_pointer[0], n);; ; // Wow that's a lot easier; A->print();; ; // Don't free, it's shared_ptr!. .. _`faq:labas`:. How to name orbital bases (e.g., AO & SO); -----------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:8736,simpl,simple,8736,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['simpl'],['simple']
Usability,"ly the written docs (not autodocs) in; ``psi4/doc/sphinxman/source`` quickly, though with a lot of warnings for; unresolved links::. >>> make sphinxmini. reStructuredText; ^^^^^^^^^^^^^^^^. Sphinx files are written in reStructuredText (\*.rst). In the html; documentation, source code is available from the sidebar. Here are a; few resources on Sphinx formatting. * `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_; * `links example <https://github.com/sphinx-doc/sphinx/issues/5208#issuecomment-736259355>`_; * `rendered test document <http://docutils.sourceforge.net/test/functional/expected/standalone_rst_html4css1.html>`_; *vs.* `source test document <http://svn.python.org/projects/external/docutils-0.5/docs/user/rst/demo.txt>`_; * `Sphinx Docs <https://www.sphinx-doc.org/en/master/contents.html>`_. .. * `Another reStructuredText <http://people.ee.ethz.ch/~creller/web/tricks/reST.html>`_; .. * `LaTeX that Sphinx can handle <ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf>`_. Math in the Codebase; ^^^^^^^^^^^^^^^^^^^^. It is often useful to have mathematical expressions in docstrings or; comments in the code that are auto-documented into the manual. Such; locations include the ``#! comment`` comments at the top of test case; input files, the ``/*- comment -*/`` comments in; :source:`psi4/src/read_options.cc`, and the ``r"""""" comment """"""``; docstrings in python modules. (That ``r""""""`` makes the string read; literally, so your LaTeX symbols aren't confused with escape characters.); For the two former, math has traditionally; been written in LaTeX (with the special substitution ``@@`` for; subscripting underscore). The autodoc script has been trained to convert; inline LaTeX math to reST math, provided the expression within dollar; signs is offset from other text. That is, expressions of the form; :regexp:`^ $latex math$[., ]$` (pseudo-regex) are good, while ``H$_2$O`` and LaTeX tables; are not translated correctly. Python docstrings a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:7399,guid,guide,7399,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['guid'],['guide']
Usability,"lysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, |PSIfour| knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to do the counterpoise correction on (here, let's; consider CCSD(T)), and it needs to know what's monomer A and what's monomer; B. This last",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:17600,simpl,simple,17600,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"nction is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; section of the installation instructions), you can run this computation by typing. >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree--Fock energy in a section like this::. Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about :math:`1.0 \times 10^{-6}`, so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. :ref:`sec:installFile`). This very simple input is sufficient to run the requested information.; Notice that we didn't tell the program some otherwise useful information; like the charge on the molecule (0, it's neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree--Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords. Let's consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let's run a computation; on methylene (CH\ :sub:`2`\ ), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity :math:`2S+1 = 3`).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, |PSIfour|; can get the charge and multiplicity as the first two integers i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:4345,simpl,simple,4345,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['simpl'],['simple']
Usability,"nding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1205,simpl,simplify,1205,doc/sphinxman/source/optionshandling.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst,1,['simpl'],['simplify']
Usability,"ng almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient linear; algebra, Fourier transforms, and general tensor manipulations, a massive number; of methods can be easily implemented very easily using that library. To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases wh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:3623,simpl,simply,3623,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simply']
Usability,"nsfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with ; SAPT0/aug-cc-pVDZ. . .. index:: ; pair: SAPT; output. Monomer-Centered Basis Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (*i.e.*, each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (*i.e.*, each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; ``sapt_basis='monomer'`` to the energy function, such as ::. energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example ::. molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results; ^^^^^^^^^^^^^^^^^^^^^^^^^. W",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:31981,simpl,simply,31981,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simply']
Usability,"nt | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | mrcc | mrc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | mrcc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35168,simpl,simple,35168,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['simpl'],['simple']
Usability,"on 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1485,simpl,simple,1485,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['simpl'],['simple']
Usability,"onda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2086,guid,guide,2086,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"onding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that returns a single buffer must be replaced with a call to ``buffer()`` to; get a list of pointers; we recommend that be assigned the type ``const auto; &``. For simple integrals, such as overlap or kinetic, only the buffer; corresponding to the zeroth element of this array contains integrals. Derivative Integrals; .................... The old one electron integral code used translational invariance relations to; minimze the number of integrals to be computed, leaving the caller with some; bookkeeping to do to compute all terms. For example, consider an overlap; integral: its value depends only on the relative separation of the two centers; and not their absolute positions in space. Therefore",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:14611,simpl,simply,14611,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability,"ongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10939,simpl,simple,10939,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['simpl'],['simple']
Usability,"ookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23223,clear,clear,23223,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['clear'],['clear']
Usability,"or QM <sec:moleculeKeywords>`, the center of mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if ``units au`` is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:7918,simpl,simply,7918,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['simpl'],['simply']
Usability,"oundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help). For open-shell systems, the |detci__ms0| keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. .. index:: ; pair: CI; arbitrary-order perturbation theory. .. _`sec:arbpt`:. Arbitrary Order Perturbation Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The DETCI module is capable of computing energies for arbitrary; order |MollerPlesset| perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-or",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:12949,simpl,simplest,12949,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['simpl'],['simplest']
Usability,"parate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and multiple ``*CFOUR(...)``; blocks, and it *will not* run. Therefore, if mixing sandwich and; standard or pure-\ |PSIfour| computations in an input file, place all; the sandwich jobs at the beginning before declaring |PSIfour|; molecules. If necessary, clear the cfour block with ``cfour {}`` before; commencing standard P4C4 jobs. .. _`sec:cfourOutput`:. Output; ~~~~~~. The output of :program:`xcfour` invoked from a |PSIfour| input file is; written to the |PSIfour| output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in :psivar:`CFOUR ERROR CODE`. .. rubric:: Energies & Scalars. After execution of :program:`xcfour` has completed, the output string is; extensively parsed and appropriate results are stored in :ref:`PSI; Variables <apdx:cfour_psivar>`. All gleaned variables are printed in the; Cfour output section of the |PSIfour| output file, as shown below. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.3384539525",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:21917,clear,clear,21917,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['clear'],['clear']
Usability,"persion terms. In SAPT, the ; Hamiltonian of the dimer is partitioned into contributions from each ; monomer and the interaction. .. math:: H=F_A+W_A+F_B+W_B+V. Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, :math:`F`, the fluctuation potential of each monomer, :math:`W`, and the; interaction potential, :math:`V`. The monomer Fock operators, :math:`F_A+F_B`, are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of :math:`V`, :math:`W_A`, and :math:`W_B`. ; Through first-order in :math:`V`, electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in :math:`V`. For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887]_. Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of |PSIfour|. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. :eq:`SAPT0`. .. math:: E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}; :label: SAPT0. In this notation, :math:`E^{(vw)}` defines the order in :math:`V` and in :math:`W_A+W_B`; the; subscript, :math:`resp`, indicates that orbital relaxation effects are included. .. math:: E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}; :label: SAPT2. .. math:: E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}; :label: SAPT2p. .. math:: E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}; :label: SAPT2pparen3. .. math:: E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}; :label: SAPT2p3. For SAPT(DFT), the SAPT ex",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:5725,simpl,simplest,5725,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['simpl'],['simplest']
Usability,"re thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block::. molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. This specifies that there are two neutral, spin-singlet fragments. It is; possible to further specify that the overall complex is neutral and spin-singlet; by inserting another :samp:`{charge} {multiplicity}` line, separated from the first; molecule block by a `--` line. If any information is missing, |PSIfour| will set the; unprovided charges and multiplicities to be consistent with those that are given.; For example, the overall charge must be simply the sum of all fragment charges.; |PSIfour| further assumes that any unpaired electrons are coupled to yield the highest; possible :math:`M_s` value. Psi will also favor neutral, spin-singlet fragments.; For anything complicated, we strongly suggest explicitly providing the charge; and multiplicity of each fragment as well as the total molecular charge and multiplicity. For details and examples, see https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/chgmult.py#L105-L136 . Having defined a molecule containing fragments like ``eneyne`` above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (``extract_subsets(1)`` pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (``extract_subsets(1,2)`` pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:19966,simpl,simply,19966,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['simpl'],['simply']
Usability,"rent implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations faster and is helpful in some; circumstances where unphysical mixing of inactive and active; occupied orbitals might occur. Presently, it is not possible; to mix the use of restricted and frozen orbitals in |PSIfour|. The division of the molecular orbitals into various subspaces such as RAS; spaces, or frozen vs active orbitals, etc, needs to be clear not only to; the detci program, but also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus,; orbital subspace keywords such as |detci__ras1|, |detci__ras2|, |detci__ras3|, |detci__ras4|,; |globals__frozen_docc|, |globals__frozen_uocc|, |detci__active|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At presen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:3322,clear,clear,3322,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['clear'],['clear']
Usability,"rm{LRC}} (r) = -; \frac{1}{r},. hybrid functionals only capture part of the :math:`-1/r` dependence,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Hybrid}} (r) = -; \frac{\alpha}{r},. and local functionals decay exponentially, resulting in completely incorrect; asymptotics,. .. math:: \lim_{r\rightarrow\infty} v_{\mathrm{x}}^{\mathrm{Local}} (r) = 0. IP-tuned LRC functionals effectively pin the chemical potential at :math:`N`; electrons to the correct value determined by the ionization potential. This; often cleans up the MSIE problem for a surprisingly large number of high-lying; occupied orbitals, as determined by fractional particle curves. Other gap; fitting techniques involving the electron affinity or band gap are sometimes; also used. IP-fitting is found to be particularly critical for the qualitative; determination of excited state ordering in many low band-gap systems. For dispersion-bound complexes, a very simple additive empirical dispersion; potential, based on a damped Lennard-Jones potential can often produce; remarkably accurate results with KS-DFT. This approach was championed by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:14012,simpl,simple,14012,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simple']
Usability,"rrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2382,simpl,simple,2382,doc/sphinxman/source/mcscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst,1,['simpl'],['simple']
Usability,"rticle density matrices (:math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`):. .. math:: . E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}. Here we used Einstein convention for the summation over the repeated indices.; :math:`h_p^q` and :math:`g_{pq}^{rs}` are the standard one- and two-electron integrals, and; :math:`\gamma_p^q` and :math:`\gamma_{pq}^{rs}` are the elements of :math:`\boldsymbol{\gamma_1}` and :math:`\boldsymbol{\gamma_2}`,; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements :math:`\gamma_p^q` and; :math:`\gamma_{pq}^{rs}` cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, *i.e.*; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces :math:`\boldsymbol{\gamma_2}` in favor of its two-particle density cumulant:. .. math:: . \lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r. The one-particle density matrix is separated into its idempotent part; :math:`\boldsymbol{\kappa}` and a correction :math:`\boldsymbol{\tau}`:. .. math:: . \gamma_p^q = \kappa_p^q + \tau_p^q. The idempotent part of :math:`\boldsymbol{\gamma_1}` corresponds to a mean-field Hartree--Fock-like density,; while the non-idempotent correction :math:`\boldsymbol{\tau}`; depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. .. math:: . E_{DCT} = \frac{1}{2} \left( h_p^q",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:2623,simpl,simple,2623,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['simpl'],['simple']
Usability,"rview of the one electron integrals; is shown in table :ref:`table:oei_impl_summary`, together with the implementation they use.; The tips below serve as a guide to what changed,; why it changed, and how to interface with |PSIfour|'s one-electron integral; machinery now. Calling ``compute_shell(int P, int Q)``; ....................................... The hand-implemented OS recursion code also took care of the Cartesian->pure; transformation (if required by the basis set). The mechanism for handling this; was to provide a public facing ``compute_shell(int P, int Q)`` method for the; caller; this then looked up the appropriate ``GaussianShell`` objects that were; passed into the corresponding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations should look the; same as before the introduction of Libint2, however access to the integrals has; changed, as described below. Accessing integrals; ................... Before the Libint2 transition, one electron integrals were computed in a flat; array, internally called `buffer_`, which was accessed through the integral; object's ``buffer()`` method. For integrals with multiple operators, e.g.,; dipole operators that have three distinct components, the buffer was simply; elongated by the appropriate amount and the caller was responsible for striding; through each resulting batch correctly. The Libint2 engines instead return a; list of pointers into each operator's batch of integrals, the ordering of which; are detailed on the Libint2 wiki. For this reason, the call to ``buffer()``; that retur",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:13914,simpl,simply,13914,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['simpl'],['simply']
Usability,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:7243,simpl,simplification,7243,doc/sphinxman/source/dfmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst,1,['simpl'],['simplification']
Usability,"s()`.; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a :py:func:`~psi4.core.print_variables` command, the; last will include :psivar:`SCF TOTAL ENERGY` but not; :psivar:`FCI TOTAL ENERGY`.; The entire dictionary of PSI variables can be obtained through; :py:func:`~psi4.core.get_variables`. .. _`sec:returnvals`:. Return Values; =============. Most of the usual user computation functions (*i.e.*,; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, and; :py:func:`~psi4.driver.frequency`) return simply the current total energy.; Consult the descriptions of other functions in :ref:`sec:psithonFunc` for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions. ::. # E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; ``return_wfn=True`` keyword argument additionally returns; :py:class:`~psi4.core.Wavefunction`. ::. # power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). .. _`sec:loops`:. Loops; =====. Python provides many control structures, any of which can be used within |PSIfour|; input files. For example, to loop over three basis sets, the following code can; be used:. .. code-blo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:11484,simpl,simple,11484,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simple']
Usability,"s, defined by:. typedef struct {; ULI page;; ULI offset;; } psio_address;. The PSIO_ZERO defined as a global variable provides a; convenient input for the 0/0 page/offset.; III. Manipulating the table of contents. In addition, to the basic open/close/read/write functions; described above, the programmer also has a limited ability to directly; manipulate or examine the data in the TOC itself.; int psio_tocprint(ULI unit, FILE; *outfile): Prints the TOC of unit in a; readable form to outfile, including entry keywords and; starting/ending addresses.; int psio_toclen(ULI unit, FILE; *outfile): Returns the number of entries in the TOC; of unit.; int psio_tocdel(ULI unit, char; *key): Deletes the TOC entry corresponding to; key. NB: Do not use this function if you are not a PSI3; expert. This function only deletes the entry's reference from the TOC; itself and does not remove the corresponding data from the file.; Hence, it is possible to introduce data ""holes"" into the file.; IV. Some simple examples. The following code illustrates the basic use of the library, as well; as when/how the psio_init() and psio_done() functions; should be called in relation to initialization of libipv1. #include <stdio.h>; #include <libipv1/ip_lib.h>; #include <libpsio/psio.h>; #include <libciomr/libciomr.h>. std::string OutFileRMR;. int main(); {; int i, M, N;; double enuc, *some_data;; psio_address next; /* Special page/offset structure */. psi_start(&infile,&outfile,ψ_file_prefix,argc-1,argv+1,0);; ip_cwk_add(progid);. /* Initialize the I/O system */; psio_init(); psio_ipv1_config();. /* Open the file and write an energy */; psio_open(31, PSIO_OPEN_NEW);; enuc = 12.3456789; ; psio_write_entry(31, ""Nuclear Repulsion Energy"", (char *) &enuc,; sizeof(double));; psio_close(31,1);. /* Read M rows of an MxN matrix from a file */; some_data = init_matrix(M,N);. psio_open(91, PSIO_OPEN_OLD);; next = PSIO_ZERO;/* Note use of the special variable */; for(i=0; i < M; i++); psio_read(91, ""Some Coeffic",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html:8139,simpl,simple,8139,doc/sphinxman/source/attic/libpsio.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html,1,['simpl'],['simple']
Usability,"set Perturbation Theory: Application to; Alanine Tetrapeptide Conformational Analysis""; Most of our equations come from here.; Wang : doi:10.1063/1.5100175; J. Chem. Phys. 151, 044118 (2019); ""Analytic gradients for the single-reference; driven similarity renormalization group; second-order perturbation theory""; This theory gives gradients for a family of methods that add; another parameter to MP2, so these formulas apply to MP2 as well.; Table II of this paper will be crucial in explaining a trick that; does not appear in DiStasio. (See Sec. 3 here.); Aikens : doi:10.1007/s00214-003-0453-3; Theor. Chem. Acc. 110, 233-253 (2003); ""A derivation of the frozen-orbital unrestricted open-shell; and restricted closed-shell second-order perturbation theory; analytic gradient expressions""; This is the conventional-integral paper that DiStasio worked from to; get their DF gradients. This sometimes clarifies obscure points in; DiStasio, but they are not clear about one crucial point:; If one block of a quantity is not given, but its adjoint is, is the first; block zero, or the adjoint of the first block?; 2. Conventions; OPDM = One-particle density matrix; EWDM = Energy-weighted density matrix; All intermediates used in other functions are defined by comments starting DEFINITION.; When a previous intermediate is updated, it is defined by comments starting UPDATE.; 3. The Trick; The RHF gradient code does NOT use the formulas of the DiStasio or Aikens papers.; I can't find where the formulas come from, but they're very close to the DiStasio and; Aikens formulas, but there are consistent deviations from the formulas that are; accounted for by the addition of a ""magic"" term later on. In the comments, I refer to; this as the ""subtle trick."" Grep for that if you want to see where it appears.; 4. Cholesky Decomposition; Several times, the code needs to contract a two-index MO quantity by the four-index electron; repulsion integrals and end with a two-index AO quantity. If the two-in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt:1252,clear,clear,1252,psi4/src/psi4/dfmp2/README.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt,1,['clear'],['clear']
Usability,"some kinetic energy term via the implicit one-body; Kohn--Sham orbitals. KS-DFT borrows much of the machinery of Hartree--Fock, as is; evident by looking at the energy expression,. .. math::. E_{\mathrm{KS}}; &= \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta] \\; &= D_{\mu\nu}^{\mathrm{T}}\left(T_{\mu\nu} +; V_{\mu\nu}\right) + \frac{1}{2} D_{\mu\nu}^{\mathrm{T}}; D_{\lambda\sigma}^{\mathrm{T}} (\mu\nu|\lambda\sigma) + E_{\mathrm{xc}} [\rho_\alpha, \rho_\beta]. Here, :math:`T` is the noninteracting quasiparticle kinetic energy operator,; :math:`V` is the nucleus-electron attraction potential, :math:`D^{\mathrm{T}}`; is the total electron density matrix, and :math:`E_{\mathrm{xc}} [\rho_\alpha,; \rho_\beta]` is the (potentially nonlocal) exchange, correlation, and residual; kinetic energy functional. The residual kinetic energy term is usually quite; small, and is often ignored, hence :math:`E_{\mathrm{xc}}` is often referred to; as simply the exchange-correlation functional (exchange *and* correlation, not; just exchange-type correlation). In practice, the first few generations of KS-DFT functionals were chosen to be; local, meaning that the form of the exchange correlation energy is an integral; over all of space of a function depending only on local information in the; density, such as the density value or derivatives. The simplest variants are; Local Spin-Density Approximations (LSDA), which depend only on the spin density; :math:`\rho_\alpha` or :math:`\rho_\beta`\ ,. .. math:: \rho_\sigma (\vec r_1) = D_{\mu\nu}^{\sigma} \phi_{\mu} (\vec r_1); \phi_\nu (\vec r_1). The most popular variants are Generalized Gradient Approximation (GGA); functionals which use the norm of the density gradient; :math:`\gamma_{\alpha\alpha}`, :math:`\gamma_{\alpha\beta}` or; :math:`\gamma_{\beta\beta}` to build an inhomogeneity; parameter. .. math:: \gamma_{\alpha\alpha} (\vec r_1) = \nabla \rho_{\alpha} (\vec r_1) \c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:4401,simpl,simply,4401,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simply']
Usability,"t :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3542,simpl,simply,3542,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['simpl'],['simply']
Usability,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1393,guid,guides,1393,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['guid'],['guides']
Usability,"t of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and Manipulation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. New DFT functionals can be created from scratch from with",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32155,guid,guidelines,32155,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['guid'],['guidelines']
Usability,"ten Obara-Saika code. There are a; number of reasons motivating this switch. For methods requiring; potentials and fields evaluated at many external sites, such as PCM and; polarizable embedding, the efficiency of the one electron integrals can be rate; limiting. We also started to introduce integral screening, and it is important; to balance the screening used for one- and two-electron terms carefully, so this; is a good opportunity to re-evaluate the code. Finally, given the complexity; of the OS recursion code, the switch to an external library leaves a more; compact codebase to maintain. The one electron integrals which are not provided by Libint2; are now handled by a new implementation of the McMurchie-Davidson (M-D) algorithm,; leading to removal of the OS code in version 1.6. An overview of the one electron integrals; is shown in table :ref:`table:oei_impl_summary`, together with the implementation they use.; The tips below serve as a guide to what changed,; why it changed, and how to interface with |PSIfour|'s one-electron integral; machinery now. Calling ``compute_shell(int P, int Q)``; ....................................... The hand-implemented OS recursion code also took care of the Cartesian->pure; transformation (if required by the basis set). The mechanism for handling this; was to provide a public facing ``compute_shell(int P, int Q)`` method for the; caller; this then looked up the appropriate ``GaussianShell`` objects that were; passed into the corresponding (private) ``compute_pair(GaussianShell &s1,; GaussianShell &s2)`` function that computed the integrals and transformed them; to the spherical harmonic basis, if needed. The switch to Libint2 integrals; preserves this mechanism, but the ``compute_shell(int P, int Q)`` simply looks; up the appropriate Libint2-compatible shells and hands them off to the; re-written, private ``compute_pair()`` routines, which call Libint2 directly.; Therefore, any calls to shell-pair level integral computations sho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:13101,guid,guide,13101,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['guid'],['guide']
Usability,"th/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21383,guid,guide,21383,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['guid'],['guide']
Usability,"the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:psithonInput`:. ==================================; Psithon: Structuring an Input File; ==================================. To allow arbitrarily complex computations to be performed, |PSIfour| was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; |PSIfour| is distributed with an extensive test suite, described in section; :ref:`apdx:testSuite`; the input files for these test cases can be found in the; samples subdirectory of the top-level |PSIfour| source directory and should; serve as useful examples. .. index:: physical constants; .. _`sec:physicalConstants`:. Physical Constants; ==================. For convenience, the Python interpreter will execute the contents of the; |psirc| file in the current user's home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the |psirc| file ::. UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:1337,simpl,simpler,1337,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['simpl'],['simpler']
Usability,"the problem of Many-Electron Self-Interaction; Error (MSIE), which presents as spurious low-lying charge transfer states in; excited-state calculations, eventual metallic breakdown in extended insulators,; poor thermochemistry, and complete lack of a derivative discontinuity in the; chemical potential as integer particle numbers are crossed. On the correlation; side, this is primarily observed in the inability of KS-DFT to treat dispersion; interactions. Generalized Kohn--Sham (GKS) functionals incorporate long-range information into; the functional through orbital-dependent contributions, and are designed to; combat the failures of local KS-DFT, particularly the MSIE on the exchange side.; Note that these functionals are often referred to as ""implicit"" density; functionals, as the orbitals are themselves functionals of the Kohn--Sham; potential. The simplest form of an exchange-side GKS is the global hybrid ansatz, in which; some fraction of the exact Hartree--Fock exchange of the noninteracting; quasiparticles is added to the functional, with the local part of the exchange; functional decreased by the corresponding amount. Note that the term; ""exact-exchange"" refers to the Hartree--Fock being the exact exchange energy of; the noninteracting quasiparticles, not the true electrons. Therefore, adding; 100% exact exchange is not physically reasonable, and will often lead to; extremely poor results. The fraction of exact-exchange, denoted :math:`\alpha`,; is often determined by adiabatic or heuristic arguments and is typically around; 25%. The addition of exact exchange borrows another piece from an existing; Hartree--Fock code, with the caveat that Hartree--Fock exchange is often much more; costly to obtain than the Coulomb matrix. The global hybrid ansatz has become; exceedingly popular, with functionals such as the ubiquitous B3LYP often; producing absurdly accurate results. A more advanced GKS functional technology which has developed enormous; popularity in recent",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:9550,simpl,simplest,9550,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['simpl'],['simplest']
Usability,"ties of various coupled-pair; methods, see [Wennmohs:2008:217]_\. What follows is a very basic description of the practical differences in; the equations that define each of the coupled-pair methods implemented in; |Psifour|. We begin with the CISD wave function. .. math::; :label: CIwfn. | \Psi \rangle = | \Psi_0 \rangle + \sum_i^{occ} \sum_a^{vir} t_i^a | \Psi_i^a\rangle + \frac{1}{4}\sum_{ij}^{occ} \sum_{ab}^{vir} t_{ij}^{ab} | \Psi_{ij}^{ab}\rangle,. where we have chosen the intermediate normalization, :math:`\langle \Psi_0; | \Psi \rangle = 1`. The CISD correlation energy is given by. .. math::; :label: CIenergy; ; E_c = \langle \Psi_0 | \hat{H} - E_0 | \Psi \rangle,. and the amplitudes can be determined by the solution to the coupled set of; equations:. .. math::; :label: CIeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - E_c | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - E_c | \Psi \rangle. The CISD method is not size-extensive, but this problem can be overcome by; making very simple modifications to the amplitude equations. We replace; the correlation energy, :math:`E_c`, with generalized shifts for the; doubles and singles equations, :math:`\Delta_{ij}` and :math:`\Delta_i`:. .. math::; :label: CEPAeqns; ; 0 &= \langle \Psi_{ij}^{ab} | \hat{H} - E_0 - \Delta_{ij} | \Psi \rangle, \\; 0 &= \langle \Psi_{i}^{a} | \hat{H} - E_0 - \Delta_i | \Psi \rangle. These shifts approximate the effects of triple and quadruple excitations.; The values for :math:`\Delta_{ij}` and :math:`\Delta_i` used in several; coupled-pair methods are given in Table :ref:`CEPA Shifts; <table:cepa_shifts>`. Note that these shifts are defined in a spin-free; formalism for closed-shell references only. .. _`table:cepa_shifts`:. +-------------------------+------------------------------------------------------------+----------------------------------------------+; | method | :math:`\Delta_{ij}` | :math:`\Delta_i` |; +=========================+==============================",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:10233,simpl,simple,10233,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['simpl'],['simple']
Usability,"tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both comm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:14694,pause,pause,14694,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['pause'],['pause']
Usability,"tpsi4/bin:$PATH; .. export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32; ..; ..; .. Nuclear Repulsion Energy..........................................PASSED; .. SAPT0 Eelst.......................................................PASSED; .. SAPT0 Eexch.......................................................PASSED; .. SAPT0 Eind........................................................PASSED; .. SAPT0 Edisp.......................................................PASSED; .. SAPT0 Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:25507,undo,undo,25507,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['undo'],['undo']
Usability,"tran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://github.com/edeprince3/gpu_dfcc/commits/master. * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12603,simpl,simple-,12603,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['simpl'],['simple-']
Usability,"uess is the superposition of atomic; densities (SAD), discussed in. * ""Principles for a direct SCF approach to LCAO-MO ab-initio; calculations"", J. Alml\ |o_dots|\ f, K. Faegri, and K. Korsell,; *J. Comput. Chem.* **3**, 385 (1982).; (doi: `10.1002/jcc.540030314 <https://doi.org/10.1002/jcc.540030314>`_). * ""Starting SCF calculations by superposition of atomic; densities"", J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, *J. Comput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8342,simpl,simple,8342,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['simpl'],['simple']
Usability,"uld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; NumPy. .. _`sec:numpy`:. Interface to NumPy; ==================. .. codeauthor:: Daniel G. A. Smith; .. sectionauthor:: Daniel G. A. Smith. *Module:* :source:`psi4/driver/p4util/numpy_helper.py`. Basics; ~~~~~~. Converting between the |PSIfour| Data classes and a NumPy array is easy through; various helper functions as detailed in this section. A quick overview NumPy; functionality can be found `here; <https://numpy.org/doc/stable/user/quickstart.html>`_. In addition,; numerous example of hybrid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:1762,simpl,simple,1762,doc/sphinxman/source/numpy.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst,1,['simpl'],['simple']
Usability,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2491,undo,undoc-members,2491,doc/sphinxman/source/nbody.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst,1,['undo'],['undoc-members']
Usability,"var>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table belo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2380,simpl,simply,2380,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['simpl'],['simply']
Usability,"ven input. Although Python-driven; model allowed for great flexibility from a user's perspective, programming was; still relatively difficult because it required modifications to be made in C++; code. Since those early days, the code has undergone some important structural; changes that have greatly simplified the development workflow. These changes; were motivated by the realization that only a few bottlenecks exist in a typical; calculation; by focusing on optimized C++ implementations of these bottlenecks; and making these C++ functions available in Python, most of the code to implement; the overall calculation can be written in simpler Python code. Python is far; better suited to management tasks such as directory navigation and retrieval,; making it a natural choice for overall calculation layout than C++. With the; emergence of `NumPy <https://numpy.org/>`_ as a standard tool for executing almost any; mathematical technique efficiently in Python, the transitioning of code from; C++ to Python has facilitated a much simpler work flow for prototyping and; developing methods: this is detailed in the next section. .. _`sec:prog_psi4numpy`:. Rapid initial development using Psi4NumPy; -----------------------------------------. The `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ project [Smith:2018:3504]_ is the recommended; mechanism for developing and prototyping new methods in Psi4. Because; `NumPy <https://numpy.org/>`_ provides such a rich set of features for efficient linear; algebra, Fourier transforms, and general tensor manipulations, a massive number; of methods can be easily implemented very easily using that library. To; facilitate this workflow, |PSIfour| exports key quantities such as integrals,; densities and molecular orbitals in NumPy format. From this point, the; programmer can simply call the appropriate |PSIfour| functions to compute the; desired input quantities, retrieve them in NumPy format, and then write the; remaining code using standard Pyt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:2833,simpl,simpler,2833,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['simpl'],['simpler']
Usability,"|PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5108,simpl,simplest,5108,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,2,['simpl'],"['simplest', 'simply']"
