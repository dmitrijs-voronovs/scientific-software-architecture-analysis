quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"d of curve with given name with respect; to histogram with given name. If nFitParam is non-zero, it is used to reduce the; number of degrees of freedom for a chi^2 for a curve that was fitted to the; data with that number of floating parameters. RooHist* residHist(const char* histname = 0, const char* pdfname = 0, bool normalize = false, bool useAverage = kFALSE) const; Return a RooHist containing the residuals of histogram 'histname' with respect; to curve 'curvename'. If normalize is true the residuals are divided by the error; on the histogram, effectively returning a pull histogram. Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const; Return the number of events that is associated with the range [xlo,xhi]; This method is only fully functional for ranges not equal to the full; range if the object that inserted the normalization data provided; a link to an external object that can calculate the event count in; in sub ranges. An error will be printed if this function is used; on sub-ranges while that information is not available. void SetName(const char* name); Set the name of the RooPlot to 'name'. void SetNameTitle(const char* name, const char* title); Set the name and title of the RooPlot to 'name' and 'title'. void SetTitle(const char* name); Set the title of the RooPlot to 'title'. Int_t defaultPrintContents(Option_t* opt) const; Define default print options, for a given print style. TAxis* GetXaxis() const; { return _hist->GetXaxis() ; }. TAxis* GetYaxis() const; { return _hist->GetYaxis() ; }. Int_t GetNbinsX() const; { return _hist->GetNbinsX() ; }. Int_t GetNdivisions(Option_t* axis = ""X"") const; { return _hist->GetNdivisions(axis) ; }. Double_t GetMinimum(Double_t minval = -FLT_MAX) const; { return _hist->GetMinimum(minval) ; }. Double_t GetMaximum(Double_t maxval = FLT_MAX) const; { return _hist->GetMaximum(maxval) ; }. void SetAxisColor(Color_t color = 1, Option_t* axis = ""X""); { _hist->SetAxisColor(color,axis) ; }. void SetAxisRange(Double_t xmi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPlot.html:22475,error,error,22475,root/html534/RooPlot.html,https://root.cern,https://root.cern/root/html534/RooPlot.html,2,"['avail', 'error']","['available', 'error']"
Availability,"d of model w.r.t. data; std::unique_ptr<RooAbsReal> nll{model.createNLL(*data)};; ; // I n t e r a c t i v e m i n i m i z a t i o n , e r r o r a n a l y s i s; // -------------------------------------------------------------------------------; ; // Create MINUIT interface object; RooMinimizer m(*nll);; ; // Activate verbose logging of MINUIT parameter space stepping; m.setVerbose(true);; ; // Call MIGRAD to minimize the likelihood; m.migrad();; ; // Print values of all parameters, that reflect values (and error estimates); // that are back propagated from MINUIT; std::unique_ptr<RooArgSet>{model.getParameters(x)}->Print(""s"");; ; // Disable verbose logging; m.setVerbose(false);; ; // Run HESSE to calculate errors from d2L/dp2; m.hesse();; ; // Print value (and error) of sigma_g2 parameter, that reflects; // value and error back propagated from MINUIT; sigma_g2.Print();; ; // Run MINOS on sigma_g2 parameter only; m.minos(sigma_g2);; ; // Print value (and error) of sigma_g2 parameter, that reflects; // value and error back propagated from MINUIT; sigma_g2.Print();; ; // S a v i n g r e s u l t s , c o n t o u r p l o t s; // ---------------------------------------------------------; ; // Save a snapshot of the fit result. This object contains the initial; // fit parameters, the final fit parameters, the complete correlation; // matrix, the EDM, the minimized FCN , the last MINUIT status code and; // the number of times the RooFit function object has indicated evaluation; // problems (e.g. zero probabilities during likelihood evaluation); std::unique_ptr<RooFitResult> fitResult{m.save()};; ; // Make contour plot of mx vs sx at 1,2,3 sigma; RooPlot *frame = m.contour(frac, sigma_g2, 1, 2, 3);; frame->SetTitle(""Minuit contour plot"");; ; // Print the fit result snapshot; fitResult->Print(""v"");; ; // C h a n g e p a r a m e t e r v a l u e s , f l o a t i n g; // -----------------------------------------------------------------; ; // At any moment you can manually change ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf601__intminuit_8C.html:2268,error,error,2268,doc/master/rf601__intminuit_8C.html,https://root.cern,https://root.cern/doc/master/rf601__intminuit_8C.html,2,['error'],['error']
Availability,"d of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Last changed: root/mathcore:$Id$ » Last generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BrentRootFinder.html:3529,error,error,3529,root/html534/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BrentRootFinder.html,1,['error'],['error']
Availability,"d of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Last changed: root/mathcore:$Id: BrentRootFinder",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BrentRootFinder.html:3527,error,error,3527,root/html528/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BrentRootFinder.html,3,['error'],['error']
Availability,"d on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2009-12-14 18:22 » Last generated: 2009-12-14 18:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/MATH_Index.html:4214,avail,available,4214,root/html526/MATH_Index.html,https://root.cern,https://root.cern/root/html526/MATH_Index.html,1,['avail'],['available']
Availability,"d require a different name for each tree; 40*/; 41 ; 42#include ""TTreeProxyGenerator.h""; 43 ; 44#include ""TFriendProxyDescriptor.h""; 45#include ""TBranchProxyDescriptor.h""; 46#include ""TBranchProxyClassDescriptor.h""; 47 ; 48#include ""TList.h""; 49#include ""Varargs.h""; 50#include <cstdio>; 51 ; 52class TTree;; 53class TBranch;; 54class TStreamerElement;; 55 ; 56#include ""TClass.h""; 57#include ""TClassEdit.h""; 58#include ""TClonesArray.h""; 59#include ""TError.h""; 60#include ""TROOT.h""; 61#include ""TObjString.h""; 62 ; 63#include ""TTreeFormula.h""; 64#include ""TFormLeafInfo.h""; 65 ; 66#include ""TBranchElement.h""; 67#include ""TChain.h""; 68#include ""TFile.h""; 69#include ""TFriendElement.h""; 70#include ""TLeaf.h""; 71#include ""TLeafC.h""; 72#include ""TTree.h""; 73#include ""TVirtualStreamerInfo.h""; 74#include ""TStreamerElement.h""; 75#include ""TSystem.h""; 76#include ""TLeafObject.h""; 77#include ""TVirtualCollectionProxy.h""; 78 ; 79void Debug(Int_t level, const char *va_(fmt), ...); 80{; 81 // Use this function in case an error occurred.; 82 ; 83 if (gDebug>=level) {; 84 va_list ap;; 85 va_start(ap,va_(fmt));; 86 ErrorHandler(kInfo,""TTreeProxyGenerator"",va_(fmt), ap);; 87 va_end(ap);; 88 }; 89}; 90 ; 91namespace {; 92 ; 93 bool AreDifferent(const TString& from, const TString& to); 94 {; 95 FILE *left = fopen(from.Data(),""r"");; 96 FILE *right = fopen(to.Data(),""r"");; 97 ; 98 char leftbuffer[256];; 99 char rightbuffer[256];; 100 ; 101 char *lvalue,*rvalue;; 102 ; 103 bool areEqual = true;; 104 ; 105 do {; 106 lvalue = fgets(leftbuffer, sizeof(leftbuffer), left);; 107 rvalue = fgets(rightbuffer, sizeof(rightbuffer), right);; 108 ; 109 if (lvalue&&rvalue) {; 110 if (strstr(lvalue,""by ROOT version"")) {; 111 // skip the comment line with the time and date; 112 } else {; 113 areEqual = areEqual && (0 == strncmp(lvalue,rvalue,sizeof(leftbuffer)));; 114 }; 115 }; 116 if (lvalue&&!rvalue) areEqual = false;; 117 if (rvalue&&!lvalue) areEqual = false;; 118 ; 119 } while(areEqual && lvalue && rvalue);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html:2722,error,error,2722,doc/master/TTreeProxyGenerator_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html,1,['error'],['error']
Availability,"d set; 1269/// to be equal to the errors of the profile.; 1270/// Option ""E"" is defined as the default one in the header file.; 1271/// - if option """" is specified the histogram errors are simply the sqrt of its content; 1272/// - if option ""B"" is specified, the content of bin of the returned histogram; 1273/// will be equal to the GetBinEntries(bin) of the profile,; 1274/// - if option ""C=E"" the bin contents of the projection are set to the; 1275/// bin errors of the profile; 1276/// - if option ""W"" is specified the bin content of the projected histogram is set to the; 1277/// product of the bin content of the profile and the entries.; 1278/// With this option the returned histogram will be equivalent to the one obtained by; 1279/// filling directly a TH2D using the 3-rd value as a weight.; 1280/// This option makes sense only for profile filled with all weights =1.; 1281/// When the profile is weighted (filled with weights different than 1) the; 1282/// bin error of the projected histogram (obtained using this option ""W"") cannot be; 1283/// correctly computed from the information stored in the profile. In that case the; 1284/// obtained histogram contains as bin error square the weighted sum of the square of the; 1285/// profiled observable (TProfile2D::fSumw2[bin] ); 1286 ; 1287TH2D *TProfile2D::ProjectionXY(const char *name, Option_t *option) const; 1288{; 1289 ; 1290 TString opt = option;; 1291 opt.ToLower();; 1292 ; 1293 // Create the projection histogram; 1294 // name of projected histogram is by default name of original histogram + _pxy; 1295 TString pname(name);; 1296 if (pname.IsNull() || pname == ""_pxy""); 1297 pname = TString(GetName() ) + TString(""_pxy"");; 1298 ; 1299 ; 1300 Int_t nx = fXaxis.GetNbins();; 1301 Int_t ny = fYaxis.GetNbins();; 1302 const TArrayD *xbins = fXaxis.GetXbins();; 1303 const TArrayD *ybins = fYaxis.GetXbins();; 1304 TH2D * h1 = nullptr;; 1305 if (xbins->fN == 0 && ybins->fN == 0) {; 1306 h1 = new TH2D(pname,GetTitle(),nx,fXaxis.Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:45471,error,error,45471,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['error']
Availability,"d should be always used when the bin content represents counts (i.e. errors are sqrt(N) ).; 4039/// The likelihood method has the advantage of treating correctly bins with low statistics. In case of high; 4040/// statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit; 4041/// give the same result.; 4042///; 4043/// The likelihood method, although a bit slower, it is therefore the recommended method,; 4044/// when the histogram represent counts (Poisson statistics), where the chi-square methods may; 4045/// give incorrect results, especially in case of low statistics.; 4046/// In case of a weighted histogram, it is possible to perform also a likelihood fit by using the; 4047/// option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it; 4048/// has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called).; 4049/// The bin error for a weighted histogram is the square root of the sum of the weight square.; 4050///; 4051/// \anchor HFitRes; 4052/// ### Fit Result; 4053///; 4054/// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; 4055/// By default the TFitResultPtr contains only the status of the fit which is return by an; 4056/// automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; 4057///; 4058/// ~~~ {.cpp}; 4059/// Int_t fitStatus = h->Fit(myFunc);; 4060/// ~~~; 4061///; 4062/// If the option ""S"" is instead used, TFitResultPtr behaves as a smart; 4063/// pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix,; 4064/// as shown in this example code:; 4065///; 4066/// ~~~ {.cpp}; 4067/// TFitResultPtr r = h->Fit(myFunc,""S"");; 4068/// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; 4069/// Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; 40",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:165326,error,error,165326,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"d signal handler for specified signal. ; Definition at line 3821 of file TUnixSystem.cxx. ◆ UnixResetSignals(). void TUnixSystem::UnixResetSignals ; (; ). staticprotected . Restore old signal handlers. ; Definition at line 3836 of file TUnixSystem.cxx. ◆ UnixSelect(). int TUnixSystem::UnixSelect ; (; Int_t ; nfds, . TFdSet * ; readready, . TFdSet * ; writeready, . Long_t ; timeout . ). staticprotected . Wait for events on the file descriptors specified in the readready and writeready masks or for timeout (in milliseconds) to occur. ; Returns the number of ready descriptors, or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR the errno has been reset and the method can be called again. ; Definition at line 3901 of file TUnixSystem.cxx. ◆ UnixSend(). int TUnixSystem::UnixSend ; (; int ; sock, . const void * ; buffer, . int ; length, . int ; flag . ). staticprotected . Send exactly length bytes from buffer. ; Returns -1 in case of error, otherwise number of sent bytes. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Definition at line 4558 of file TUnixSystem.cxx. ◆ UnixSetitimer(). int TUnixSystem::UnixSetitimer ; (; Long_t ; ms). staticprotected . Set interval timer to time-out in ms milliseconds. ; Definition at line 3875 of file TUnixSystem.cxx. ◆ UnixSigAlarmInterruptsSyscalls(). void TUnixSystem::UnixSigAlarmInterruptsSyscalls ; (; Bool_t ; set). staticprotected . When the argument is true the SIGALRM signal handler is set so that interrupted syscalls will not be restarted by the kernel. ; This is typically used in case one wants to put a timeout on an I/O operation. By default interrupted syscalls will always be restarted (for all signals). This can be controlled for each a-synchronous TTimer via the method TTimer::SetInterruptSyscalls(). ; Definition at line 3777 of file TUnixSystem.cxx. ◆ UnixSignal(). void TUnixSystem::UnixSignal ; (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:75427,error,error,75427,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['error'],['error']
Availability,"d size of window ""id"". w - the width; h - the height. void SetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); Gives the window manager minimum and maximum size hints of the window; ""id"". Also specify via ""winc"" and ""hinc"" the resize increments. wmin, hmin - specify the minimum window size; wmax, hmax - specify the maximum window size; winc, hinc - define an arithmetic progression of sizes into which; the window to be resized (minimum to maximum). void SetWMState(Window_t id, EInitialState state); Sets the initial state of the window ""id"": either kNormalState; or kIconicState. void SetWMTransientHint(Window_t id, Window_t main_id); Tells window manager that the window ""id"" is a transient window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return lenght of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:51864,mask,mask,51864,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,3,['mask'],['mask']
Availability,"d size of window ""id"". w - the width; h - the height. void SetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); Gives the window manager minimum and maximum size hints of the window; ""id"". Also specify via ""winc"" and ""hinc"" the resize increments. wmin, hmin - specify the minimum window size; wmax, hmax - specify the maximum window size; winc, hinc - define an arithmetic progression of sizes into which; the window to be resized (minimum to maximum). void SetWMState(Window_t id, EInitialState state); Sets the initial state of the window ""id"": either kNormalState; or kIconicState. void SetWMTransientHint(Window_t id, Window_t main_id); Tells window manager that the window ""id"" is a transient window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return length of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:54905,mask,mask,54905,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,3,['mask'],['mask']
Availability,"d storage is used. The RooAbsData remains owner of the tree. GetClonedTree() can be used to get a tree even if the internal storage does not use one. ; Definition at line 2417 of file RooAbsData.cxx. ◆ uniqueId(). RooFit::UniqueId< RooAbsData > const & RooAbsData::uniqueId ; (; ); const. inline . Returns a unique ID that is different for every instantiated RooAbsData object. ; This ID can be used whether two RooAbsData are the same object, which is safer than memory address comparisons that might result in false positives when memory is reused. ; Definition at line 308 of file RooAbsData.h. ◆ weight(). virtual double RooAbsData::weight ; (; ); const. pure virtual . Implemented in RooDataHist, and RooDataSet. ◆ weightError() [1/2]. virtual void RooAbsData::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; = Poisson . ); const. inlinevirtual . Return the asymmetric errors on the current weight. ; See also weightError(ErrorType) const for symmetric error. Parameters. [out]loLow error. ; [out]hiHigh error. . Reimplemented in RooDataHist, and RooDataSet.; Definition at line 122 of file RooAbsData.h. ◆ weightError() [2/2]. virtual double RooAbsData::weightError ; (; ErrorType ; = Poisson); const. inlinevirtual . Return the symmetric error on the current weight. ; See also weightError(double&,double&,ErrorType) const for asymmetric errors. ; Reimplemented in RooDataHist, and RooDataSet.; Definition at line 112 of file RooAbsData.h. ◆ weightSquared(). virtual double RooAbsData::weightSquared ; (; ); const. pure virtual . Implemented in RooDataHist, and RooDataSet. Friends And Related Symbol Documentation. ◆ RooAbsOptTestStatistic. friend class RooAbsOptTestStatistic. friend . Definition at line 332 of file RooAbsData.h. ◆ RooFit::TestStatistics::ConstantTermsOptimizer. friend struct RooFit::TestStatistics::ConstantTermsOptimizer. friend . Definition at line 333 of file RooAbsData.h. ◆ RooFit::TestStatistics::RooAbsL. friend class RooFit::TestStatistics::RooAbsL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:77084,error,error,77084,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['error'],['error']
Availability,"d store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:67705,mask,mask,67705,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['mask'],['mask']
Availability,"d the confidence intervals as bin errors; hint->SetStats(false);; hint->SetFillColor(2);; hint->Draw(""e3 same"");; ; //### 3. A 2d graph; //Create and fill the graph; int ngr2 = 100;; double z, rnd, e=0.3;; TGraph2D *gr2 = new TGraph2D(ngr2);; gr2->SetName(""Graph2DNoError"");; TF2 *f2 = new TF2(""f2"",; ""1000*(([0]*sin(x)/x)*([1]*sin(y)/y))+250"",-6,6,-6,6);; f2->SetParameters(1,1);; for (i=0; i<ngr2; i++){; f2->GetRandom2(x,y);; // Generate a random number in [-e,e]; rnd = 2*gRandom->Rndm()*e-e;; z = f2->Eval(x,y)*(1+rnd);; gr2->SetPoint(i,x,y,z);; }; //Create a graph with errors to store the intervals; TGraph2DErrors *grint2 = new TGraph2DErrors(ngr2);; for (i=0; i<ngr2; i++); grint2->SetPoint(i, gr2->GetX()[i], gr2->GetY()[i], 0);; ; //Fit the graph; f2->SetParameters(0.5,1.5);; gr2->Fit(f2, ""Q"");; /*Compute the confidence intervals*/; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(grint2);; //Now the ""grint2"" graph contains function values as z-coordinates; //and confidence intervals as their errors; //draw; myc->cd(3);; f2->SetNpx(30);; f2->SetNpy(30);; f2->SetFillColor(kBlue);; f2->Draw(""surf4"");; grint2->SetNpx(20);; grint2->SetNpy(20);; grint2->SetMarkerStyle(24);; grint2->SetMarkerSize(0.7);; grint2->SetMarkerColor(kRed);; grint2->SetLineColor(kRed);; grint2->Draw(""E0 same"");; grint2->SetTitle(""Fitted 2d function with .95 error bars"");; ; myc->cd();; ; }; ; ; ; ; f#define f(i)Definition RSha256.hxx:104; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; TF2.h; TGraph2DErrors.h; TGraphErrors.h; TH1.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TVirtualFitter.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ConfidenceIntervals_8C.html:3315,error,errors,3315,doc/master/ConfidenceIntervals_8C.html,https://root.cern,https://root.cern/doc/master/ConfidenceIntervals_8C.html,1,['error'],['errors']
Availability,"d the return value ...Definition GeneticMinimizer.cxx:368; ROOT::Math::GeneticMinimizer::SetRandomSeedvoid SetRandomSeed(int seed)Definition GeneticMinimizer.h:94; ROOT::Math::GeneticMinimizer::NFreeunsigned int NFree() const overridenumber of free variables (real dimension of the problem) this is <= Function().NDim() which is the to...Definition GeneticMinimizer.cxx:355; ROOT::Math::GeneticMinimizer::SetLimitedVariablebool SetLimitedVariable(unsigned int, const std::string &, double, double, double, double) overrideset a new upper/lower limited variable (override if minimizer supports them ) otherwise as default se...Definition GeneticMinimizer.cxx:146; ROOT::Math::GeneticMinimizer::SetOptionsvirtual void SetOptions(const ROOT::Math::MinimizerOptions &opt)Definition GeneticMinimizer.cxx:217; ROOT::Math::GeneticMinimizer::MinValuedouble MinValue() const overridereturn minimum function valueDefinition GeneticMinimizer.cxx:331; ROOT::Math::GeneticMinimizer::Errorsconst double * Errors() const overridereturn errors at the minimumDefinition GeneticMinimizer.cxx:366; ROOT::Math::GeneticMinimizer::NCallsunsigned int NCalls() const overridenumber of function calls to reach the minimumDefinition GeneticMinimizer.cxx:340; ROOT::Math::GeneticMinimizer::Minimizebool Minimize() overridemethod to perform the minimizationDefinition GeneticMinimizer.cxx:252; ROOT::Math::GeneticMinimizer::GetGeneticOptionsvoid GetGeneticOptions(ROOT::Math::MinimizerOptions &opt) constDefinition GeneticMinimizer.cxx:191; ROOT::Math::GeneticMinimizer::ProvidesErrorbool ProvidesError() const overrideminimizer provides error and error matrixDefinition GeneticMinimizer.cxx:365; ROOT::Math::GeneticMinimizer::SetVariablebool SetVariable(unsigned int ivar, const std::string &name, double val, double step) overrideset a new free variableDefinition GeneticMinimizer.cxx:153; ROOT::Math::GeneticMinimizer::fResultstd::vector< double > fResultDefinition GeneticMinimizer.h:109; ROOT::Math::GeneticMinimizer::fFitne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneticMinimizer_8h_source.html:5391,error,errors,5391,doc/master/GeneticMinimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html,1,['error'],['errors']
Availability,"d their statistical interpretation, assuming they are accurate.; 6.5.1 Statistical interpretation; For discussuion of basic concepts, such as the meaning of the elements of the error matrix, parabolic versus \(\mbox{MINOS}\) errors, the appropriate value for \(\mbox{up}\) (see [howto:errordef]), and setting of exact confidence levels, see (in order of increasing complexity and completeness):. “Interpretation of the Errors on Parameters”, see Part 3 of this write-up.; “Determining the Statistical Significance of Experimental Results”@bib-MIN81.; “Statistical Methods in Experimental Physics”@bib-EADIE. 6.5.2 The reliability of M error estimates; M always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a \(\mbox{MIGRAD}\) or \(\mbox{HESSE}\) step, the errors are usually quite accurate, unless there has been a problem. If no mitigating adjective is given in the printout of the errors, then at least M believes the errors are accurate, although there is always a small chance that M has been fooled. Some visible signs that M may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of \(\mbox{EDM}\) too big. For a “normal” minimization, after \(\mbox{MIGRAD}\), the value of \(\mbox{EDM}\) is usually more than three orders of magnitude smaller than \(\mbox{up}\), unless a looser tolerance has been specified.; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99).; This indicates both an exceptionally difficult problem, and one which has been badly parametrized so that individual errors are not very meaningful because they are so highly correlat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:74097,error,errors,74097,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['error'],['errors']
Availability,"d then use Initialize later one if the size is not known ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *dataZ, const double *val, const double *ex, const double *ey, const double *ez, const double *eval);  constructor from external data for 3D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *dataY, const double *val, const double *ex, const double *ey, const double *eval);  constructor from external data for 2D with errors on coordinate and value ;  ;  BinData (unsigned int n, const double *dataX, const double *val, const double *ex, const double *eval);  constructors using external data ;  ;  ~BinData () override;  destructor ;  ; void Add (const double *x, double val);  add multi-dim coordinate data with only value ;  ; void Add (const double *x, double val, const double *ex, double elval, double ehval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, const double *ex, double eval);  add multi-dim coordinate data with both error in coordinates and value ;  ; void Add (const double *x, double val, double eval);  add multi-dim coordinate data with only error in value ;  ; void Add (double x, double y);  add one dim data with only coordinate and values ;  ; void Add (double x, double y, double ex, double ey);  add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ;  ; void Add (double x, double y, double ex, double eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:3378,error,error,3378,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,9,['error'],"['error', 'errors']"
Availability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLMultiRootFinder.html:7235,toler,tolerance,7235,root/html602/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLMultiRootFinder.html,2,['toler'],['tolerance']
Availability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html:6987,toler,tolerance,6987,root/html534/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLMultiRootFinder.html,2,['toler'],['tolerance']
Availability,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7235,toler,tolerance,7235,root/html604/ROOT__Math__GSLMultiRootFinder.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html,2,['toler'],['tolerance']
Availability,"d to list'; TGCheckButton*fAllWeights1switch on/off option 'all weights=1'; Pixel_tTGFrame::fBackgroundframe background color; TGCheckButton*fBestErrorsswitch on/off option 'improve errors'; TList*TGMainFrame::fBindListlist with key bindings; Int_tTGFrame::fBorderWidthframe border width; TStringTGMainFrame::fClassNameWM class name; TGClient*TGObject::fClientConnection to display server; TGTextButton*fCloseButtonclose the fit panel; TGRadioButton*fConvset convolution mode; TF1Convolution*fConvFunc! TF1Convolution object; Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; TGComboBox*fDataSetcontains list of data set to be fitted; Int_tfDimobject dimension; TGTextButton*fDrawAdvancedopens a dialog for advanced draw options; TGCheckButton*fDrawSameswitch on/off fit function drawing; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TGCheckButton*fEmptyBinsWghts1switch on/off option 'include empry bins'; TGCheckButton*fEnableRobustswitch on/off robust option; TGTextEntry*fEnteredFunccontains user function file name; TGNumberEntryField*fErrorScalecontains error scale set for minimization; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGTextButton*fFitButtonperforms fitting; TObject*fFitObjectselected object to fit; TGComboBox*fFuncListcontains function list; vector<TFitEditor::FuncParamData_t>fFuncParsfunction parameters (value + limits); TGCompositeFrame*fGeneralgeneral tab; UInt_tTGFrame::fHeightframe height; TStringTGMainFrame::fIconNameicon name; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; TGCheckButton*fImproveResultsswitch on/off option 'improve fit results'; TGCheckButton*fIntegralswitch on/off option 'integral'; TGNumberEntryField*fIterationscontains maximum number of iterations; TGLayoutHints*fLayoutAddlayout hints of fAdd radio button; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFitEditor.html:26065,robust,robust,26065,root/html604/TFitEditor.html,https://root.cern,https://root.cern/root/html604/TFitEditor.html,1,['robust'],['robust']
Availability,"d updates are available on; http://www.desy.de/~sschmitt. A short summary of the algorithm is given in the following:. the ""best"" x matching the measurement y within errors; is determined by minimizing the function; L1+L2+L3. where; L1 = (y-Ax)# Vyy^-1 (y-Ax); L2 = tau^2 (L(x-x0))# L(x-x0); L3 = lambda sum_i(y_i -(Ax)_i). [the notation # means that the matrix is transposed ]. The term L1 is familiar from a least-square minimisation; The term L2 defines the regularisation (smootheness condition on x),; where the parameter tau^2 gives the strength of teh regularisation; The term L3 is an optional area constraint with Lagrangian parameter; lambda, ensuring that that the normalisation of x is consistent with the; normalisation of y. The method can be applied to a very large number of problems,; where the measured distribution y is a linear superposition; of several Monte Carlo shapes. Input from measurement:. y: vector of measured quantities (dimension ny); Vyy: covariance matrix for y (dimension ny x ny); in many cases V is diagonal and calculated from the errors of y. From simulation:. A: migration matrix (dimension ny x nx). Result. x: unknown underlying distribution (dimension nx); The error matrix of x, V_xx, is also determined. Regularisation. tau: parameter, defining the regularisation strength; L: matrix of regularisation conditions (dimension nl x nx); depends on the structure of the input data; x0: bias distribution, from simulation. Preservation of the area. lambda: lagrangian multiplier; y_i: one component of the vector y; (Ax)_i: one component of the vector Ax. Determination of the unfolding result x:. (a) not constrained: minimisation is performed as a function of x; for fixed lambda=0; or; (b) constrained: stationary point is found as a function of x and lambda. The constraint can be useful to reduce biases on the result x; in cases where the vector y follows non-Gaussian probability densities; (example: Poisson statistics at counting experiments in parti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:1733,error,errors,1733,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['error'],['errors']
Availability,"d using RooRealVar::setBins(N). For good results, N should be large (>=1000). Additional interpolation between the bins may improve the result if coarse binnings are chosen. These can be activated in the constructor or by calling setInterpolationOrder(). For N >> 1000, interpolation will not substantially improve the accuracy.; Additionial information on caching can be displayed by monitoring the message stream with topic ""Caching"" at the INFO level, i.e. by calling RooMsgService::instance().addStream(RooMsgService::INFO,Topic(""Caching"")) to see these message on stdout.; Multi-dimensional convolutions are not supported at the moment. Installing an external version of FFTW on Linux and compiling ROOT to use it; You have two options:; Recommended: ROOT can automatically install FFTW for itself, see builtin_fftw3 at https://root.cern/building-root; Install FFTW and let ROOT discover it. fftw3 is on by default (see https://root.cern/building-root). 1) Go to www.fftw.org and download the latest stable version (a .tar.gz file); If you have root access to your machine and want to make a system installation of FFTW; 2) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory and type './configure' followed by 'make install'. This will install fftw in /usr/local/bin,lib etc...; 3) Start from a source installation of ROOT. ROOT should discover it. See https://root.cern/building-root; If you do not have root access and want to make a private installation of FFTW; 2) Make a private install area for FFTW, e.g. /home/myself/fftw; 3) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory and type './configure –prefix=/home/myself/fftw' followed by 'make install'. Substitute /home/myself/fftw with a directory of your choice. This procedure will install FFTW in the location designated by you; 4) Start from a source installation of ROOT. Look up and set the proper paths for ROOT to discover FFTW. See https://root.cern/building-root ; Definition at line 25 of file RooFFTCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:4085,down,download,4085,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['down'],['download']
Availability,"d vertical distance to the minimum (EDM) is"");; 3597 Printf("" less than 0.001*[tolerance]*UP (see [SET ERRordef])."");; 3598 goto L99;; 3599 }; 3600//______________________________________________________________________________; 3601//; 3602// Command MINIMIZE; 3603//; 3604 if( !strncmp(comd.Data(),""MINI"",4) ) {; 3605 Printf("" ***>MINImize [maxcalls] [tolerance]"");; 3606 Printf("" Causes minimization of the function by the method of Migrad,"");; 3607 Printf("" as does the MIGrad command, but switches to the SIMplex method"");; 3608 Printf("" if Migrad fails to converge. Arguments are as for MIGrad."");; 3609 Printf("" Note that command requires four characters to be unambiguous."");; 3610 goto L99;; 3611 }; 3612//______________________________________________________________________________; 3613//; 3614// Command MINOS; 3615//; 3616 if( !strncmp(comd.Data(),""MIN0"",4) ) {; 3617 Printf("" ***>MINOs [maxcalls] [parno] [parno] ..."");; 3618 Printf("" Causes a Minos error analysis to be performed on the parameters"");; 3619 Printf("" whose numbers [parno] are specified. If none are specified,"");; 3620 Printf("" Minos errors are calculated for all variable parameters."");; 3621 Printf("" Minos errors may be expensive to calculate, but are very"");; 3622 Printf("" reliable since they take account of non-linearities in the"");; 3623 Printf("" problem as well as parameter correlations, and are in general"");; 3624 Printf("" asymmetric."");; 3625 Printf("" The optional argument [maxcalls] specifies the (approximate)"");; 3626 Printf("" maximum number of function calls per parameter requested,"");; 3627 Printf("" after which the calculation will stop for that parameter."");; 3628 goto L99;; 3629 }; 3630//______________________________________________________________________________; 3631//; 3632// Command MNCONTOUR; 3633//; 3634 if( !strncmp(comd.Data(),""MNC"",3) ) {; 3635 Printf("" ***>MNContour <par1> <par2> [npts]"");; 3636 Printf("" Calculates one function contour of FCN with respect to"");; 3637 Printf("" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:116836,error,error,116836,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"d when pointer is over entry. void KeyPressed(TGListTreeItem* entry, UInt_t keysym, UInt_t mask); Signal emitted when keyboard key pressed. entry - selected item; keysym - defined in ""KeySymbols.h""; mask - modifier key mask, defined in ""GuiTypes.h"". const Mask_t kKeyShiftMask = BIT(0);; const Mask_t kKeyLockMask = BIT(1);; const Mask_t kKeyControlMask = BIT(2);; const Mask_t kKeyMod1Mask = BIT(3); // typically the Alt key; const Mask_t kButton1Mask = BIT(8);; const Mask_t kButton2Mask = BIT(9);; const Mask_t kButton3Mask = BIT(10);; const Mask_t kButton4Mask = BIT(11);; const Mask_t kButton5Mask = BIT(12);; const Mask_t kAnyModifier = BIT(15);. void ReturnPressed(TGListTreeItem* entry); Emit ReturnPressed() signal. void Checked(TObject* obj, Bool_t check); Emit Checked() signal. void Clicked(TGListTreeItem* entry, Int_t btn); Emit Clicked() signal. void Clicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Emit Clicked() signal. void Clicked(TGListTreeItem* entry, Int_t btn, UInt_t mask, Int_t x, Int_t y); Emit Clicked() signal. void DoubleClicked(TGListTreeItem* entry, Int_t btn); Emit DoubleClicked() signal. void DoubleClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Emit DoubleClicked() signal. void Home(Bool_t select = kFALSE); Move content to the top. void End(Bool_t select = kFALSE); Move content to the bottom. void PageUp(Bool_t select = kFALSE); Move content one page up. void PageDown(Bool_t select = kFALSE); Move content one page down. void LineUp(Bool_t select = kFALSE); Move content one item-size up. void LineDown(Bool_t select = kFALSE); Move content one item-size down. void AdjustPosition(TGListTreeItem* item); Move content to position of item. If item is 0, move to position; of currently selected item. void Search(Bool_t close = kTRUE); Invokes search dialog. Looks for item with the entered name. void DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); Redraw list tree. void Draw(Handle_t id, Int_t yevent, Int_t hevent); Draw list tree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListTree.html:33308,mask,mask,33308,root/html528/TGListTree.html,https://root.cern,https://root.cern/root/html528/TGListTree.html,6,['mask'],['mask']
Availability,"d with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:4441,avail,available,4441,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,6,['avail'],['available']
Availability,"d with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:4441,avail,available,4441,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['avail'],['available']
Availability,"d with weights; 1820///; 1821/// This function is automatically called when the histogram is created; 1822/// if the static function TH1::SetDefaultSumw2 has been called before.; 1823/// If flag is false the structure is deleted; 1824 ; 1825void TProfile::Sumw2(Bool_t flag); 1826{; 1827 TProfileHelper::Sumw2(this, flag);; 1828}; a#define a(i)Definition RSha256.hxx:99; s1#define s1(x)Definition RSha256.hxx:91; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Version_tshort Version_tDefinition RtypesCore.h:65; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBuffer.h; TClass.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; TF1.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; namechar name[80]Definition TGX11.cxx:110; THLimitsFinder.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; TMath.h; TObjString.h; TProfileHelper.h; TProfile.h; EErrorTypeEErrorTypeDefinition TProfile.h:28; kERRORSPREAD@ kERRORSPREADDefinition TProfile.h:28; kERRORSPREADG@ kERRORSPREADGDefinition TProfile.h:28; kERRORSPREADI@ kERRORSPREADIDefinition TProfile.h:28; gDebugInt_t gDebugDefinition TROOT.cxx:597; TArrayDArray of doubles (64 bits per element).Definition TArrayD.h:27; TArrayD::fArrayDouble_t * fArrayDefinition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:67429,error,error,67429,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['error']
Availability,"d! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerSuperMaster.html:18948,error,error,18948,root/html534/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html534/TProofPlayerSuperMaster.html,3,['error'],['error']
Availability,"d! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. Bool_tfReturnFeedback; TArrayIfSlaveActW; TArrayL64fSlaveBytesRead; TArrayFfSlaveEffS; TArrayFfSlaveEvtRti; TArrayFfSlaveInitTime; TArrayFfSlaveMBRti; TArrayFfSlaveProcTime; TArrayL64fSlaveProgress; TArrayIfSlaveTotS; TArrayL64fSlaveTotals; TListfSlaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF. Runs on super master.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void Progress(TSlave* sl, Long64_t total, Long64_t processed); Report progress. void Progress(TSlave* sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress. void Progress(TSlave* sl, TProofProgressInfo* pi); Progress signal. Bool_t HandleTimer(TTimer* timer); Send progress and feedback to client. void SetupFeedback(); Setup reporting of feedback objects and progress messages. void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* sl, Long64_t total, Long64_t processed); { Progress(total, processed); }. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). TProofPlayerSuperMaster(TProof* proof = 0); { }. virtual ~TProofPlayerSuperMaster(); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerSuperMaster.html:16747,error,error,16747,root/html528/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html528/TProofPlayerSuperMaster.html,1,['error'],['error']
Availability,"d(* VoidFuncPtr_t)()Definition Rtypes.h:79; TApplication.h; TBrowser.h; TClassEdit.h; TClassGenerator.h; TClassTable.h; gClassTableR__EXTERN TClassTable * gClassTableDefinition TClassTable.h:97; TClass.h; CreateInterpreterTInterpreter * CreateInterpreter(void *interpLibHandle, const char *argv[])Definition TCling.cxx:608; TColor.h; TDataType.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; DefaultErrorHandlervoid DefaultErrorHandler(Int_t level, Bool_t abort_bool, const char *location, const char *msg)The default error handler function.Definition TErrorDefaultHandler.cxx:102; TErrorDefaultHandler.hxx; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; SetErrorHandlerErrorHandlerFunc_t SetErrorHandler(ErrorHandlerFunc_t newhandler)Set an errorhandler function. Returns the old handler.Definition TError.cxx:90; TFolder.h; TFunctionTemplate.h; TFunction.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; cursorOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t cursorDefinition TGWin32VirtualXProxy.cxx:160; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:123778,error,errorhandler,123778,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['error'],['errorhandler']
Availability,"d(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TVirtualGeoTrack*TVirtualGeoTrack::FindTrackWithId(Int_t id) const; TVirtualGeoTrack*TVirtualGeoTrack::GetDaughter(Int_t index) const; virtual Int_tTVirtualGeoTrack::GetDaughterId(Int_t index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const Double_t*TVirtualGeoTrack::GetFirstPoint() const; virtual const char*TObject::GetIconName() const; Int_tTVirtualGeoTrack::GetId() const; const Double_t*TVirtualGeoTrack::GetLastPoint() const; Int_tTVirtualGeoTrack::GetLastPoint(Double_t& x, Double_t& y, Double_t& z, Double_t& t) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTrack.html:2121,error,error,2121,root/html528/TGeoTrack.html,https://root.cern,https://root.cern/root/html528/TGeoTrack.html,6,['error'],['error']
Availability,"d(Option_t* option = """"); virtual voidBrowse(TBrowser* b); virtual TMD5*Checksum(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Long_tExec(const char* params = 0, Int_t* error = 0)MENU ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TObjString*GetLineWith(const char* text) const; TList*GetListOfLines() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMacro.html:2595,error,error,2595,root/html528/TMacro.html,https://root.cern,https://root.cern/root/html528/TMacro.html,6,['error'],['error']
Availability,"d(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TEventIter*Create(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetCacheSize(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLearnEntries(); virtual const char*TObject::GetName() const; virtual Long64_tGetNextEvent(); virtual Int_tGetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList** evl = 0); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TList*GetPackets(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEventIter.html:1677,error,error,1677,root/html534/TEventIter.html,https://root.cern,https://root.cern/root/html534/TEventIter.html,3,['error'],['error']
Availability,"d(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TEventIter*Create(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetCacheSize(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLearnEntries(); virtual const char*TObject::GetName() const; virtual Long64_tGetNextEvent(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEventIter.html:1677,error,error,1677,root/html528/TEventIter.html,https://root.cern,https://root.cern/root/html528/TEventIter.html,3,['error'],['error']
Availability,"d(const TMethod& org); TMethod(MethodInfo_t* info = 0, TClass* cl = 0); virtual~TMethod(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataMember*FindDataMember(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetClass() const; virtual const char*GetCommentString(); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TList*GetListOfMethodArgs(); virtual const char*TFunction::GetMangledName() const; virtual const char*TNamed::GetName() const; Int_tTFunction::GetNargs() const; Int_tTFunction::GetNargsOpt() const; virtual char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMethod.html:1585,error,error,1585,root/html532/TMethod.html,https://root.cern,https://root.cern/root/html532/TMethod.html,1,['error'],['error']
Availability,"d(const TMethod& org); TMethod(MethodInfo_t* info = 0, TClass* cl = 0); virtual~TMethod(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataMember*FindDataMember(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetClass() const; virtual const char*GetCommentString(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TList*GetListOfMethodArgs(); virtual const char*TFunction::GetMangledName() const; virtual const char*TNamed::GetName() const; Int_tTFunction::GetNargs() const; Int_tTFunction::GetNargsOpt() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethod.html:1585,error,error,1585,root/html528/TMethod.html,https://root.cern,https://root.cern/root/html528/TMethod.html,2,['error'],['error']
Availability,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const RooAbsCategory&arg() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newName = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; Bool_thasRange(const char* rangeName) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCategoryProxy.html:2281,error,error,2281,root/html526/RooCategoryProxy.html,https://root.cern,https://root.cern/root/html526/RooCategoryProxy.html,7,['error'],['error']
Availability,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelector.html:4115,error,error,4115,root/html534/TSelector.html,https://root.cern,https://root.cern/root/html534/TSelector.html,3,['error'],['error']
Availability,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelector.html:4143,error,error,4143,root/html528/TSelector.html,https://root.cern,https://root.cern/root/html528/TSelector.html,3,['error'],['error']
Availability,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSelVerifyDataSet.html:1610,error,error,1610,root/html534/TSelVerifyDataSet.html,https://root.cern,https://root.cern/root/html534/TSelVerifyDataSet.html,3,['error'],['error']
Availability,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDraw.html:1649,error,error,1649,root/html534/TProofDraw.html,https://root.cern,https://root.cern/root/html534/TProofDraw.html,3,['error'],['error']
Availability,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDraw.html:1649,error,error,1649,root/html528/TProofDraw.html,https://root.cern,https://root.cern/root/html528/TProofDraw.html,3,['error'],['error']
Availability,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TVirtualPerfStats*&CurrentPerfStats(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; static const char*EventType(TVirtualPerfStats::EEventType type); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFileEvent(const char* slave, const char* slavename, const char* nodename, const char* filename, Bool_t isStart); virtual voidFileOpenEvent(TFile* file, const char* filename, Double_t start); virtual voidFileReadEvent(TFile* file, Int_t len, Double_t start); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetBytesRead() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual Long64_tGetNumEvents() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPerfStats.html:1640,error,error,1640,root/html534/TVirtualPerfStats.html,https://root.cern,https://root.cern/root/html534/TVirtualPerfStats.html,3,['error'],['error']
Availability,"d(const char* method) const; voidaddArg(const RooCmdArg& arg); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newName = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tgetDouble(Int_t idx) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tgetInt(Int_t idx) const; virtual const char*TNamed::GetName() const; const TObject*getObject(Int_t idx) const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const RooArgSet*getSet(Int_t idx) const; const char*getString(Int_t idx) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCmdArg.html:2059,error,error,2059,root/html526/RooCmdArg.html,https://root.cern,https://root.cern/root/html526/RooCmdArg.html,7,['error'],['error']
Availability,"d) const; virtual voidAction(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBarButton.html:1702,error,error,1702,root/html526/TControlBarButton.html,https://root.cern,https://root.cern/root/html526/TControlBarButton.html,7,['error'],['error']
Availability,"d) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tApplyMaxQueries(Int_t mxq); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tCleanupQueriesDir(); Int_tCleanupSession(const char* sessiontag); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; Int_tDrawQueries() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Bool_tFinalizeQuery(TProofQueryResult* pq, TProof* proof, TVirtualProofPlayer* player); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Float_tGetCpuTime(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Float_tGetRealTime(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQueryResultManager.html:1631,error,error,1631,root/html528/TQueryResultManager.html,https://root.cern,https://root.cern/root/html528/TQueryResultManager.html,6,['error'],['error']
Availability,"d) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanExtend() const; voidCenterLabels(Bool_t center = kTRUE)TOGGLE GETTER ; voidCenterTitle(Bool_t center = kTRUE)TOGGLE GETTER ; const char*ChooseTimeFormat(Double_t axislength = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& axis) const; virtual voidDelete(Option_t* = """"); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*DrawClone(Option_t* = """") const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindBin(Double_t x); virtual Int_tFindBin(Double_t x) const; virtual Int_tFindBin(const char* label); virtual Int_tFindFixBin(Double_t x) const; virtual Int_tFindFixBin(const char* label) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Color_tTAttAxis::GetAxisColor() const; virtual Double_tGetBinCenter(Int_t bin) const; virtual Double_tGetBinCenterLog(Int_t bin) const; const char*GetBinLabel(Int_t bin) const; virtual Double_tGetBinLowEdge(Int_t bin) const; virtual Double_tGetBinUpEdge(Int_t bin) const; virtual Double_tGetBinWidth(Int_t bin) const; virtual voidGetCenter(Double_t* center) const; Bool_tGetCenterLabels(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAxis.html:1726,error,error,1726,root/html602/TAxis.html,https://root.cern,https://root.cern/root/html602/TAxis.html,2,['error'],['error']
Availability,"d) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExec(const char* command = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExec.html:4317,error,error,4317,root/html528/TExec.html,https://root.cern,https://root.cern/root/html528/TExec.html,6,['error'],['error']
Availability,"d) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisplay(Int_t from = 0, Int_t to = -1); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMacro*GetMacro() const; static Long64_tGetMaxTransferSize(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetRole(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGrep(const char* txt, TString& res, Int_t from = 0); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLogElem.html:1544,error,error,1544,root/html528/TProofLogElem.html,https://root.cern,https://root.cern/root/html528/TProofLogElem.html,6,['error'],['error']
Availability,"d) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static Event_t*CreateEvent(TRecGuiEvent* ge); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TTimeTRecEvent::GetTime() const; virtual const char*TObject::GetTitle() const; virtual TRecEvent::ERecEventTypeGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classnam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecGuiEvent.html:3803,error,error,3803,root/html528/TRecGuiEvent.html,https://root.cern,https://root.cern/root/html528/TRecGuiEvent.html,6,['error'],['error']
Availability,"d) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreateGVEdge(Agraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Agedge_t*GetGVEdge(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; TGraphNode*GetNode1(); TGraphNode*GetNode2(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphEdge.html:1610,error,error,1610,root/html528/TGraphEdge.html,https://root.cern,https://root.cern/root/html528/TGraphEdge.html,3,['error'],['error']
Availability,"d) const; voidAddAssocObj(TObject* assocobj); virtual voidAddFriend(TDSetElement* friendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFriends(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*GetAssocObj(Long64_t i, Bool_t isentry = kFALSE); const char*GetDataSet() const; const char*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries(Bool_t istree = kTRUE, Bool_t openfile = kTRUE); TObject*GetEntryList() const; TFileInfo*GetFileInfo(const char* type = ""TTree""); const char*GetFileName() const; Long64_tGetFirst() const; virtual const char*TObject::GetIconName() const; TList*GetListOfAssocObjs() const; virtual TList*GetListOfFriends() const; Float_tGetMaxProcTime() const; const char*GetMsd() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDSetElement.html:2456,error,error,2456,root/html534/TDSetElement.html,https://root.cern,https://root.cern/root/html534/TDSetElement.html,3,['error'],['error']
Availability,"d) const; voidAddAssocObj(TObject* assocobj); virtual voidAddFriend(TDSetElement* friendElement, const char* alias); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteFriends(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*GetAssocObj(Long64_t i, Bool_t isentry = kFALSE); const char*GetDataSet() const; const char*GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries(Bool_t istree = kTRUE, Bool_t openfile = kTRUE); TObject*GetEntryList() const; TFileInfo*GetFileInfo(const char* type = ""TTree""); const char*GetFileName() const; Long64_tGetFirst() const; virtual const char*TObject::GetIconName() const; TList*GetListOfAssocObjs() const; virtual TList*GetListOfFriends() const; const char*GetMsd() const; virtual const char*TNamed::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSetElement.html:2456,error,error,2456,root/html528/TDSetElement.html,https://root.cern,https://root.cern/root/html528/TDSetElement.html,3,['error'],['error']
Availability,"d). void InitTUnfold(void); reset all data members. void DeleteMatrix(TMatrixD** m). void DeleteMatrix(TMatrixDSparse** m). void ClearResults(void); delete old results (if any); this function is virtual, so derived classes may implement their own; method to flag results as non-valid. TUnfold(const TUnfold& ); set all matrix pointers to zero. Double_t DoUnfold(Double_t tau); main unfolding algorithm. Declared virtual, because other algorithms; could be implemented. Purpose: unfold y -> x; Data members required:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fVyy: covariance matrix for y; fL: regularisation conditions; fTauSquared: regularisation strength; fConstraint: whether the constraint is applied; Data members modified:; fVyyInv: inverse of input data covariance matrix; fNdf: number of dgerres of freedom; fEinv: inverse of the matrix needed for unfolding calculations; fE: the matrix needed for unfolding calculations; fX: unfolded data points; fDXDY: derivative of x wrt y (for error propagation); fVxx: error matrix (covariance matrix) on x; fAx: estimate of distribution y from unfolded data; fChi2A: contribution to chi**2 from y-Ax; fChi2L: contribution to chi**2 from L*(x-x0); fDXDtauSquared: derivative of x wrt tau; fDXDAM[0,1]: matrix parts of derivative x wrt A; fDXDAZ[0,1]: vector parts of derivative x wrt A; fRhoMax: maximum global correlation coefficient; fRhoAvg: average global correlation coefficient; return code:; fRhoMax if(fRhoMax>=1.0) then the unfolding has failed!. TMatrixDSparse * MultiplyMSparseMSparse(const TMatrixDSparse* a, const TMatrixDSparse* b) const; calculate the product of two sparse matrices; a,b: pointers to sparse matrices, where a->GetNcols()==b->GetNrows(); this is a replacement for the call; new TMatrixDSparse(*a,TMatrixDSparse::kMult,*b);. TMatrixDSparse * MultiplyMSparseM(const TMatrixDSparse* a, const TMatrixD* b) const; multiply a Sparse matrix with a non-sparse matrix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:20183,error,error,20183,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,6,['error'],['error']
Availability,"d, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:14301,error,error,14301,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,10,['error'],['error']
Availability,"d, RNTuple projects the members of these collections and its collection counter to the input branch names. For instance, the following input leafs: Int_t njets; float jet_pt[njets]; float jet_eta[njets]; int; will be converted to the following RNTuple schema: _collection0 (untyped collection); |- float jet_pt; |- float jet_eta; std::size_t (RNTupleCardinality) njets (projected from _collection0 without subfields); ROOT::RVec<float> jet_pt (projected from _collection0.jet_pt); ROOT::RVec<float> jet_eta (projected from _collection0.jet_eta); ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; ROOT::RNTupleCardinalityHelper types to present an offset column as array of collection sizes.Definition RNTupleUtil.hxx:32; These projections are meta-data only operations and don't involve duplicating the data. Current limitations of the importer:; No support for trees containing TClonesArray collections; Due to RNTuple currently storing data fully split, ""don't split"" markers are ignored; Some types are not available in RNTuple. Please refer to the RNTuple specification for an overview of all types currently supported. . Definition at line 103 of file RNTupleImporter.hxx. Classes; struct  RCStringTransformation;  Transform a NULL terminated C string branch into an std::string field. More...;  ; struct  RImportBranch;  ; struct  RImportField;  ; struct  RImportGuard;  When the schema is set up and the import started, it needs to be reset before the next Import() call can start. More...;  ; struct  RImportLeafCountCollection;  Leaf count arrays require special treatment. More...;  ; struct  RImportTransformation;  Base class to perform data transformations from TTree branches to RNTuple fields if necessary. More...;  ; class  RProgressCallback;  Used to report every ~100 MB (compressed), and at the end about the status of the import. More...;  . Public Types; using FieldModifier_t = std::function< void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html:3341,avail,available,3341,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter.html,1,['avail'],['available']
Availability,"d, UInt_t w, UInt_t h) overrideRegister a window created by Qt as a ROOT window (like InitWindow()).Definition TGX11.cxx:1378; TGX11::fCharacterUpYFloat_t fCharacterUpYCharacter Up vector along Y.Definition TGX11.h:137; TGX11::fHasTTFontsBool_t fHasTTFontsTrue when TrueType fonts are used.Definition TGX11.h:146; TGX11::SelectWindowvoid SelectWindow(Int_t wid) overrideSelect window to which subsequent output is directed.Definition TGX11.cxx:1958; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjStringCollectable string class.Definition TObjString.h:28; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPointDefinition TPoint.h:31; TStorage::Allocstatic void * Alloc(size_t size)Allocate a block of memory, that later can be resized using TStorage::ReAlloc().Definition TStorage.cxx:152; TStorage::Deallocstatic void Dealloc(void *ptr)De-allocate block of memory, that was allocated via TStorage::Alloc().Definition TStorage.cxx:170; TStorage::ReAllocstatic void * ReAlloc(void *vp, size_t size, size_t oldsize)Reallocate (i.e.Definition TStorage.cxx:183; TStringBasic string class.Definition TString.h:139; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TStyle::GetLineStyleStringconst char * GetLineStyleString(Int_t i=1) constReturn line style string (used by PostScript).Definition TStyle.cxx:1166; TVirtualXSemi-Abstract base class defining a generic interface to the underlying, low level,...Definition TVirtualX.h:46; TVirtualX::EDrawModeEDraw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:158788,error,error,158788,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['error'],['error']
Availability,"d, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * ProjectionY(const char* name = ""_py"", Int_t firstxbin = 0, Int_t lastxbin = -1, Int_t firstzbin = 0, Int_t lastzbin = -1, Option_t* option = """") const; Project a 3-D histogram into a 1-D histogram along Y*-*-; *-* ====================================================. The projection is always of the type TH1D.; The projection is made from the cells along the Y axis; ranging from ixmin to ixmax and izmin to izmax included.; By default, underflow and overflow are included.; By Setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow will be excluded. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad,; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * ProjectionZ(const char* name = ""_pz"", Int_t firstxbin = 0, Int_t lastxbin = -1, Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; Project a 3-D histogram into a 1-D histogram along Z*-*-; *-* ====================================================. The projection is always of the type TH1D.; The projection is made from the cells along the Z axis; ranging from ixmin to ixmax and iymin to iymax included.; By default, bins 1 to nx and 1 to ny are included; By setting ixmin=1 and/or ixmax=NbinsX the underflow and/or overflow in X will be excluded; By setting iymin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH3.html:42146,error,errors,42146,root/html534/TH3.html,https://root.cern,https://root.cern/root/html534/TH3.html,1,['error'],['errors']
Availability,"d-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TMVA::MethodPDEFoam::EKernelfKernelKernel for GetMvaValue(); TMVA::PDEFoamKernelBase*fKernelEstimatorKernel estimator; TStringfKernelStrKernel for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of selecting th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDEFoam.html:17911,error,error,17911,root/html530/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDEFoam.html,3,['error'],['error']
Availability,"d-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfCompresscompress foam output file; Bool_tfCutNminKeep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default); TStringfDTLogicuse DT algorithm to split cells; TMVA::EDTSeparationfDTSeparationenum which specifies the separation to use for the DT logic; Float_tfDiscrErrCutcut on discrimant error; Int_tfEvPerBinMaximum events (equiv.) per bin in buid-up (1000); Bool_tfFillFoamWithOrigWeightsfill the foam with boost weights; vector<TMVA::PDEFoam*>fFoamgrown PDEFoams; Float_tfFracFraction used for calc of Xmin, Xmax; TMVA::MethodPDEFoam::EKernelfKernelKernel for GetMvaValue(); TMVA::PDEFoamKernelBase*fKernelEstimatorKernel estimator; TStringfKernelStrKernel for GetMvaValue() (option string); UInt_tfMaxDepthmaximum depth of cell tree; Bool_tfMultiTargetRegressiondo regression on multible targets; UInt_tfNminminimal number of events in cell necessary to split cell""; Bool_tfPeekMaxBACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split; Bool_tfSigBgSeparatedSeparate Sig and Bg, or not; TMVA::ETargetSelectionfTargetSelectionmethod of selecting the target (only mulit target regr.); TStringfTargetSelectionStrmethod of select",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDEFoam.html:19185,error,error,19185,root/html602/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDEFoam.html,2,['error'],['error']
Availability,"d. ; Reimplemented in TProofLite.; Definition at line 10991 of file TProof.cxx. ◆ RemoveDynamicPath(). Int_t TProof::RemoveDynamicPath ; (; const char * ; libpath, . Bool_t ; onClient = kFALSE . ). Remove 'libpath' from the lib path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8933 of file TProof.cxx. ◆ RemoveFeedback(). void TProof::RemoveFeedback ; (; const char * ; name). Remove object from feedback list. ; Definition at line 10000 of file TProof.cxx. ◆ RemoveIncludePath(). Int_t TProof::RemoveIncludePath ; (; const char * ; incpath, . Bool_t ; onClient = kFALSE . ). Remove 'incpath' from the inc path search. ; Multiple paths can be specified at once separating them with a comma or a blank. Return 0 on success, -1 otherwise ; Definition at line 8967 of file TProof.cxx. ◆ RemoveWorkers(). Int_t TProof::RemoveWorkers ; (; TList * ; workerList). protected . Used for shuting down the workres after a query is finished. ; Sends each of the workers from the workerList, a kPROOF_STOP message. If the workerList == 0, shutdown all the workers. ; Definition at line 1597 of file TProof.cxx. ◆ RequestStagingDataSet(). Bool_t TProof::RequestStagingDataSet ; (; const char * ; dataset). virtual . Allows users to request staging of a particular dataset. ; Requests are saved in a special dataset repository and must be honored by the endpoint. ; Reimplemented in TProofLite.; Definition at line 11020 of file TProof.cxx. ◆ Reset(). void TProof::Reset ; (; const char * ; url, . Bool_t ; hard = kFALSE . ). static . Wrapper around TProofMgr::Reset(...). ; Definition at line 11736 of file TProof.cxx. ◆ ResetEnvVars(). void TProof::ResetEnvVars ; (; ). static . Clear the list of environment variables passed to proofserv on the master and slaves. ; Definition at line 11796 of file TProof.cxx. ◆ ResetMergePrg(). void TProof::ResetMergePrg ; (; ). private . Reset the merge progress notificator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:133217,down,down,133217,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['down'],['down']
Availability,"d. Accepts standard printf formatting arguments.; 978 ; 979void TObject::Warning(const char *location, const char *va_(fmt), ...) const; 980{; 981 va_list ap;; 982 va_start(ap, va_(fmt));; 983 DoError(kWarning, location, va_(fmt), ap);; 984 va_end(ap);; 985 if (TROOT::Initialized()); 986 gROOT->Message(1001, this);; 987}; 988 ; 989////////////////////////////////////////////////////////////////////////////////; 990/// Issue error message. Use ""location"" to specify the method where the; 991/// error occurred. Accepts standard printf formatting arguments.; 992 ; 993void TObject::Error(const char *location, const char *va_(fmt), ...) const; 994{; 995 va_list ap;; 996 va_start(ap, va_(fmt));; 997 DoError(kError, location, va_(fmt), ap);; 998 va_end(ap);; 999 if (TROOT::Initialized()); 1000 gROOT->Message(1002, this);; 1001}; 1002 ; 1003////////////////////////////////////////////////////////////////////////////////; 1004/// Issue system error message. Use ""location"" to specify the method where; 1005/// the system error occurred. Accepts standard printf formatting arguments.; 1006 ; 1007void TObject::SysError(const char *location, const char *va_(fmt), ...) const; 1008{; 1009 va_list ap;; 1010 va_start(ap, va_(fmt));; 1011 DoError(kSysError, location, va_(fmt), ap);; 1012 va_end(ap);; 1013 if (TROOT::Initialized()); 1014 gROOT->Message(1003, this);; 1015}; 1016 ; 1017////////////////////////////////////////////////////////////////////////////////; 1018/// Issue fatal error message. Use ""location"" to specify the method where the; 1019/// fatal error occurred. Accepts standard printf formatting arguments.; 1020 ; 1021void TObject::Fatal(const char *location, const char *va_(fmt), ...) const; 1022{; 1023 va_list ap;; 1024 va_start(ap, va_(fmt));; 1025 DoError(kFatal, location, va_(fmt), ap);; 1026 va_end(ap);; 1027 if (TROOT::Initialized()); 1028 gROOT->Message(1004, this);; 1029}; 1030 ; 1031////////////////////////////////////////////////////////////////////////////////; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:37154,error,error,37154,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['error'],['error']
Availability,"d. SupNormSet(const RooArgSet&) -- Observables over which should be normalized _in_addition_ to the; integration observables; ScanNumCdf() -- Apply scanning technique if cdf integral involves numeric integration [ default ]; ScanAllCdf() -- Always apply scanning technique; ScanNoCdf() -- Never apply scanning technique; ScanParameters(Int_t nbins, -- Parameters for scanning technique of making CDF: number; Int_t intOrder) of sampled bins and order of interpolation applied on numeric cdf. RooAbsReal* createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder). RooArgSet* getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; This helper function finds and collects all constraints terms of all coponent p.d.f.s; and returns a RooArgSet with all those terms. void clearEvalError(); Clear the evaluation error flag. Bool_t evalError(); Return the evaluation error flag. void raiseEvalError(); Raise the evaluation error flag. RooNumGenConfig* defaultGeneratorConfig(); Returns the default numeric MC generator configuration for all RooAbsReals. RooNumGenConfig* specialGeneratorConfig() const; Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned. RooNumGenConfig* specialGeneratorConfig(Bool_t createOnTheFly); Returns the specialized integrator configuration for _this_ RooAbsReal.; If this object has no specialized configuration, a null pointer is returned,; unless createOnTheFly is kTRUE in which case a clone of the default integrator; configuration is created, installed as specialized configuration, and returned. const RooNumGenConfig* getGeneratorConfig() const; Return the numeric MC generator configuration used for this object. If; a specialized configuration was associated with this object, that configuration; is returned, otherwise the default configuration for all RooAbsReals is re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:77506,error,error,77506,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,6,['error'],['error']
Availability,"d. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\""""); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:10867,error,error,10867,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,1,['error'],['error']
Availability,"d. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofMgr.html:10984,error,error,10984,root/html530/TXProofMgr.html,https://root.cern,https://root.cern/root/html530/TXProofMgr.html,2,['error'],['error']
Availability,"d. The current prototype is limited and users have no freedom to enter file/user function names in this field.; ""Set Parameters"" button opens a dialog for parameters settings.; ""Fit Settings"" provides user interface elements related to the fitter. Currently there are two method choices: Chi-square and Binned Likelihood.; ""Linear Fit"" check button sets the use of Linear fitter is it is selected. Otherwise the option 'F' is applied if polN is selected. ""Robust"" number entry sets the robust value when fitting graphs. ""No Chi-square"" check button sets ON/OFF option 'C' - do not calculate Chi-square (for Linear fitter).; Fit options: ""Integral"" check button switch ON/OFF option 'I' - use integral of function instead of value in bin center. ""Best Errors"" sets ON/OFF option 'E' - better errors estimation using Minos technique. ""All weights = 1"" sets ON/OFF option 'W' - all weights set to 1, excluding empty bins and ignoring error bars. ""Empty bins, weights=1"" sets ON/OFF option 'WW' - all weights equal to 1, including empty bins, error bars ignored. ""Use range"" sets ON/OFF option 'R' - fit only data within the specified function range with the slider. ""Improve fit results"" sets ON/OFF option 'M' - after minimum is found, search for a new one. ""Add to list"" sets On/Off option '+'- add function to the list without deleting the previous.; Draw options: ""SAME"" sets On/Off function drawing on the same pad. ""No drawing"" sets On/Off option '0'- do not draw function graphics. ""Do not store/draw"" sets On/Off option 'N'- do not store the function, do not draw it.; Sliders settings are used if option 'R' - use range is active. Users can change min/max values by pressing the left mouse button near to the left/right slider edges. It is possible o change both values simultaneously by pressing the left mouse button near to its center and moving it to a new desire position.; ""Minimization"" Tab; ""Library"" group allows you to use Minuit, Minuit2 or Fumili minimization packages for your fit.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitEditor.html:2616,error,error,2616,doc/master/classTFitEditor.html,https://root.cern,https://root.cern/doc/master/classTFitEditor.html,1,['error'],['error']
Availability,"d.; a1.setVal(10.0); a2.setVal(-1.0); ; # Perform a fit:; fitWithoutRecovery = pdf.fitTo(; data,; Save=True,; RecoverFromUndefinedRegions=0.0, # This is how RooFit behaved prior to ROOT 6.24; PrintEvalErrors=-1, # We are expecting a lot of evaluation errors. -1 switches off printing.; PrintLevel=-1,; ); ; pdf.plotOn(frame, LineColor=""r"", Name=""noRecovery""); ; ; # RooFit since ROOT 6.24; # --------------------------------; # The minimiser gets information about the ""badness"" of the violation of the function definition. It uses this; # to find its way out of the disallowed parameter regions.; print(""\n\n\n-------------- Starting second fit ---------------\n\n""); ; # Reset the parameters such that the PDF is again undefined.; a1.setVal(10.0); a2.setVal(-1.0); ; # Fit again, but pass recovery information to the minimiser:; fitWithRecovery = pdf.fitTo(; data,; Save=True,; RecoverFromUndefinedRegions=1.0, # The magnitude of the recovery information can be chosen here.; # Higher values mean more aggressive recovery.; PrintEvalErrors=-1, # We are still expecting a few evaluation errors.; PrintLevel=0,; ); ; pdf.plotOn(frame, LineColor=""b"", Name=""recovery""); ; ; # Collect results and plot.; # --------------------------------; # We print the two fit results, and plot the fitted curves.; # The curve of the fit without recovery cannot be plotted, because the PDF is undefined if a2 < 0.; fitWithoutRecovery.Print(); print(; ""Without recovery, the fitter encountered {}"".format(fitWithoutRecovery.numInvalidNLL()); + "" invalid function values. The parameters are unchanged.\n""; ); ; fitWithRecovery.Print(); print(; ""With recovery, the fitter encountered {}"".format(fitWithoutRecovery.numInvalidNLL()); + "" invalid function values, but the parameters are fitted.\n""; ); ; legend = ROOT.TLegend(0.5, 0.7, 0.9, 0.9); legend.SetBorderSize(0); legend.SetFillStyle(0); legend.AddEntry(""data"", ""Data"", ""P""); legend.AddEntry(""noRecovery"", ""Without recovery (cannot be plotted)"", ""L""); legend.AddEnt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:3297,recover,recovery,3297,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['recover'],['recovery']
Availability,"d.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad,; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * ProjectionZ(const char* name = ""_pz"", Int_t ixmin = 0, Int_t ixmax = -1, Int_t iymin = 0, Int_t iymax = -1, Option_t* option = """") const; Project a 3-D histogram into a 1-D histogram along Z. The projection is always of the type TH1D.; The projection is made from the cells along the Z axis; ranging from ixmin to ixmax and iymin to iymax included.; By default, bins 1 to nx and 1 to ny are included; By default, underflow and overflow are included in both the X and Y axis.; By Setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded; By setting iymin=1 and/or iymax=NbinsY the underflow and/or overflow in Y will be excluded. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the target axes will be; kept, but only bins inside the selected range will be filled. NOTE that if a TH1D named ""name"" exists in the current directory or pad,; the histogram is reset and filled again with the projected contents of the TH3. implemented using Project3D. TH1D * DoProject1D(const char* name, const char* title, int imin1, int imax1, int imin2, int imax2, const TAxis* projAxis, const TAxis* axis1, const TAxis* axis2, Option_t* option) const; internal methdod performing the projection to 1D histogram; called from TH3::Project3D. TH1D * DoProject1D(const char* name, const char* title, const TAxis* projAxis, bool computeErrors, bool originalRange, bool useUF, bool useOF) const; internal methdod performing the projection to 1D histogram; called from other TH3::DoProject1D. TH2D * DoProject2D(const char* name, const char* title, const TAxis* p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH3.html:45213,error,errors,45213,root/html602/TH3.html,https://root.cern,https://root.cern/root/html602/TH3.html,2,['error'],['errors']
Availability,"d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; ... (remaining 14 messages suppressed); ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=-3.35967 cHl3=-9.58704 cHq3=-6.27461; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.154263 cHl3=2.95902 cHq3=-2.78828; RooAbsPd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:14118,error,error,14118,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['error'],['error']
Availability,"d:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TXMLDocument*fTXMLDocxmlDoc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDOMParser(); TDOMParser constructor. ~TDOMParser(); TDOMParser destructor, it calls ReleaseUnderlying(). void ReleaseUnderlying(); Release any existing document. Int_t ParseFile(const char* filename); Parse the XML file where filename is the XML file name.; It will create a TXMLDocument if the file is parsed without; any error. It returns parse code error in case of parse error,; see TXMLParser. Int_t ParseBuffer(const char* buffer, Int_t len); It parses a buffer, much like ParseFile(). Int_t ParseContext(); Creates a XML document for the parser.; It returns 0 on success, and; -1 if no XML document was created,; -5 if the document is not well formated,; -6 if document is not valid. TXMLDocument * GetXMLDocument() const; Returns the TXMLDocument. TDOMParser(const TDOMParser& ). TDOMParser& operator=(const TDOMParser& ). » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id: TDOMParser.h 23637 2008-05-02 11:12:04Z rdm $ » Last generated: 2009-12-07 15:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDOMParser.html:10716,error,error,10716,root/html526/TDOMParser.html,https://root.cern,https://root.cern/root/html526/TDOMParser.html,3,['error'],['error']
Availability,"d:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TXMLDocument*fTXMLDocxmlDoc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDOMParser(); TDOMParser constructor. ~TDOMParser(); TDOMParser destructor, it calls ReleaseUnderlying(). void ReleaseUnderlying(); Release any existing document. Int_t ParseFile(const char* filename); Parse the XML file where filename is the XML file name.; It will create a TXMLDocument if the file is parsed without; any error. It returns parse code error in case of parse error,; see TXMLParser. Int_t ParseBuffer(const char* buffer, Int_t len); It parses a buffer, much like ParseFile(). Int_t ParseContext(); Creates a XML document for the parser.; It returns 0 on success, and; -1 if no XML document was created,; -5 if the document is not well formated,; -6 if document is not valid. TXMLDocument * GetXMLDocument() const; Returns the TXMLDocument. TDOMParser(const TDOMParser& ). TDOMParser& operator=(const TDOMParser& ). » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id: TDOMParser.h 23637 2008-05-02 11:12:04Z rdm $ » Last generated: 2010-09-23 20:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDOMParser.html:10702,error,error,10702,root/html528/TDOMParser.html,https://root.cern,https://root.cern/root/html528/TDOMParser.html,3,['error'],['error']
Availability,"d:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TXMLDocument*fTXMLDocxmlDoc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDOMParser(); TDOMParser constructor. ~TDOMParser(); TDOMParser destructor, it calls ReleaseUnderlying(). void ReleaseUnderlying(); Release any existing document. Int_t ParseFile(const char* filename); Parse the XML file where filename is the XML file name.; It will create a TXMLDocument if the file is parsed without; any error. It returns parse code error in case of parse error,; see TXMLParser. Int_t ParseBuffer(const char* buffer, Int_t len); It parses a buffer, much like ParseFile(). Int_t ParseContext(); Creates a XML document for the parser.; It returns 0 on success, and; -1 if no XML document was created,; -5 if the document is not well formated,; -6 if document is not valid. TXMLDocument * GetXMLDocument() const; Returns the TXMLDocument. TDOMParser(const TDOMParser& ). TDOMParser& operator=(const TDOMParser& ). » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id: TDOMParser.h 23637 2008-05-02 11:12:04Z rdm $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDOMParser.html:10771,error,error,10771,root/html530/TDOMParser.html,https://root.cern,https://root.cern/root/html530/TDOMParser.html,3,['error'],['error']
Availability,"d:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TXMLDocument*fTXMLDocxmlDoc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDOMParser(); TDOMParser constructor. ~TDOMParser(); TDOMParser destructor, it calls ReleaseUnderlying(). void ReleaseUnderlying(); Release any existing document. Int_t ParseFile(const char* filename); Parse the XML file where filename is the XML file name.; It will create a TXMLDocument if the file is parsed without; any error. It returns parse code error in case of parse error,; see TXMLParser. Int_t ParseBuffer(const char* buffer, Int_t len); It parses a buffer, much like ParseFile(). Int_t ParseContext(); Creates a XML document for the parser.; It returns 0 on success, and; -1 if no XML document was created,; -5 if the document is not well formated,; -6 if document is not valid. TXMLDocument * GetXMLDocument() const; Returns the TXMLDocument. TDOMParser(const TDOMParser& ). TDOMParser& operator=(const TDOMParser& ). » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id: TDOMParser.h 23637 2008-05-02 11:12:04Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDOMParser.html:10771,error,error,10771,root/html532/TDOMParser.html,https://root.cern,https://root.cern/root/html532/TDOMParser.html,3,['error'],['error']
Availability,"d:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 1e-12); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of Gaus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html:3531,error,error,3531,root/html534/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html,1,['error'],['error']
Availability,"d::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); Bool_tdrawAfter(const char* after, const char* target); Bool_tdrawBefore(const char* before, const char* target); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; RooPlot*emptyClone(const char* name); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*findObject(const char* name, const TClass* clas = 0) const; TAttFill*getAttFill(const char* name = 0) const; TAttLine*getAttLine(const char* name = 0) const; TAttMarker*getAttMarker(const char* name = 0) const; TAttText*getAttText(const char* name = 0) const; virtual Stat_tGetBinContent(Int_t) const; virtual Stat_tGetBinContent(Int_t, Int_t) const; virtual Stat_tGetBinContent(Int_t, Int_t, Int_t) const; RooCurve*getCurve(const char* name = 0) const; virtual Option_t*TObject::GetDrawOption() const; TStringgetDrawOptions(const char* name) const; static Long_tTObject::GetDtorOnly(); Double_tgetFitRangeBinW() const; Double_tgetFitRangeNEvt() const; Double_tgetFitRan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPlot.html:3677,error,error,3677,root/html526/RooPlot.html,https://root.cern,https://root.cern/root/html526/RooPlot.html,7,['error'],['error']
Availability,"d::ERegMode regmode); set regulatisation on a 1-dimensional curve; start: first bin; step: distance between neighbouring bins; nbin: total number of bins; regmode: regularisation mode; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fL. Int_t RegularizeBins2D(int start_bin, int step1, int nbin1, int step2, int nbin2, TUnfold::ERegMode regmode); set regularisation on a 2-dimensional grid of bins; start: first bin; step1: distance between bins in 1st direction; nbin1: number of bins in 1st direction; step2: distance between bins in 2nd direction; nbin2: number of bins in 2nd direction; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fL. Double_t DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.); Do unfolding of an input histogram; tau_reg: regularisation parameter; input: input distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fL; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0., Double_t oneOverZeroError = 0., const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; hist_vyy: if non-zero, defines the data covariance matrix; otherwise it is calculated from the data errors; hist_vyy_inv: if non-zero and if hist_vyy is set, defines the inverse of the data covariance matrix; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfold.html:25302,error,errors,25302,root/html602/TUnfold.html,https://root.cern,https://root.cern/root/html602/TUnfold.html,2,['error'],['errors']
Availability,"d::endl;; 725 static Int_t frameNumber = 1000;; 726 frameNumber++;; 727 ; 728 auto fXName = SaveArray(out, ""fx"", frameNumber, fX);; 729 auto fYName = SaveArray(out, ""fy"", frameNumber, fY);; 730 auto fEXName = SaveArray(out, ""fex"", frameNumber, fEX);; 731 auto fEYName = SaveArray(out, ""fey"", frameNumber, fEY);; 732 ; 733 if (gROOT->ClassSaved(TGraphErrors::Class())); 734 out << "" "";; 735 else; 736 out << "" TGraphErrors *"";; 737 out << ""gre = new TGraphErrors("" << fNpoints << "",""; 738 << fXName << "","" << fYName << "",""; 739 << fEXName << "","" << fEYName << "");""; 740 << std::endl;; 741 ; 742 SaveHistogramAndFunctions(out, ""gre"", frameNumber, option);; 743}; 744 ; 745////////////////////////////////////////////////////////////////////////////////; 746/// Multiply the values and errors of a TGraphErrors by a constant c1.; 747///; 748/// If option contains ""x"" the x values and errors are scaled; 749/// If option contains ""y"" the y values and errors are scaled; 750/// If option contains ""xy"" both x and y values and errors are scaled; 751 ; 752void TGraphErrors::Scale(Double_t c1, Option_t *option); 753{; 754 TGraph::Scale(c1, option);; 755 TString opt = option; opt.ToLower();; 756 if (opt.Contains(""x"") && GetEX()) {; 757 for (Int_t i=0; i<GetN(); i++); 758 GetEX()[i] *= c1;; 759 }; 760 if (opt.Contains(""y"") && GetEY()) {; 761 for (Int_t i=0; i<GetN(); i++); 762 GetEY()[i] *= c1;; 763 }; 764}; 765 ; 766////////////////////////////////////////////////////////////////////////////////; 767/// Set `ex` and `ey` values for point pointed by the mouse.; 768 ; 769void TGraphErrors::SetPointError(Double_t ex, Double_t ey); 770{; 771 if (!gPad) {; 772 Error(""SetPointError"", ""Cannot be used without gPad, requires last mouse position"");; 773 return;; 774 }; 775 ; 776 Int_t px = gPad->GetEventX();; 777 Int_t py = gPad->GetEventY();; 778 ; 779 //localize point to be deleted; 780 Int_t ipoint = -2;; 781 Int_t i;; 782 // start with a small window (in case the mouse is very close to one point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:24049,error,errors,24049,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,3,['error'],['errors']
Availability,"d::fTitleobject title; Bool_tfUseOverlapsActivated if user defined overlapping candidates; TGeoVolume*fVolumehelper volume. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParallelWorld(const char* name, TGeoManager* mgr); Default constructor. ~TGeoParallelWorld(); Destructor. void AddNode(TGeoPhysicalNode* pnode); Add a node normally to this world. Overlapping nodes not allowed. void AddOverlap(TGeoVolume* vol); To use this optimization, the user should declare the full list of volumes; which may overlap with any of the physical nodes of the parallel world. Better; be done before misalignment. Bool_t CloseGeometry(); The main geometry must be closed. void RefreshPhysicalNodes(); Refresh the node pointers and re-voxelize. To be called mandatory in case; re-alignment happened. TGeoPhysicalNode * FindNode(Double_t[3] point); Finds physical node containing the point. TGeoPhysicalNode * FindNextBoundary(Double_t[3] point, Double_t[3] dir, Double_t& step, Double_t stepmax = 1.0E+30); Same functionality as TGeoNavigator::FindNextDaughterBoundary for the; parallel world. Double_t Safety(Double_t[3] point, Double_t safmax = 1.0E+30); Compute safety for the parallel world. void CheckOverlaps(Double_t ovlp = 0.001); Check overlaps within a tolerance value. void Draw(Option_t* option); Draw the parallel world. TGeoParallelWorld(const TGeoParallelWorld& ). TGeoParallelWorld& operator=(const TGeoParallelWorld& ). TGeoParallelWorld(); constructors. {}. TGeoManager * GetGeometry() const; Getters. {return fGeoManager;}. Bool_t IsClosed() const; {return fIsClosed;}. TGeoVolume * GetVolume() const; {return fVolume;}. » Author: Andrei Gheata 30/06/14 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 30 15:02:28 2015 » Last generated: 2015-06-30 15:02; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoParallelWorld.html:8371,toler,tolerance,8371,root/html602/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html602/TGeoParallelWorld.html,1,['toler'],['tolerance']
Availability,"d::left << GetParameterName(i) << ""\t"";; 493 for (unsigned int j = 0; j < npar; ++j) {; 494 if (!IsParameterFixed(j) ) {; 495 os.precision(kPrec); os.width(kWidth); os << std::right << std::setw(matw) << Correlation(i,j);; 496 }; 497 }; 498 os << std::endl;; 499 }; 500 }; 501 // restore alignment and precision; 502 os.setf(prevFmt, std::ios::adjustfield);; 503 os.precision(prevPrec);; 504}; 505 ; 506void FitResult::GetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double * x, double * ci, double cl, bool norm ) const {; 507 // stride1 stride in coordinate stride2 stride in dimension space; 508 // i.e. i-th point in k-dimension is x[ stride1 * i + stride2 * k]; 509 // compute the confidence interval of the fit on the given data points; 510 // the dimension of the data points must match the dimension of the fit function; 511 // confidence intervals are returned in array ci; 512 ; 513 if (!fFitFunc) {; 514 // check if model function exists; 515 MATH_ERROR_MSG(""FitResult::GetConfidenceIntervals"",""Cannot compute Confidence Intervals without fit model function"");; 516 return;; 517 }; 518 assert(fFitFunc);; 519 ; 520 // use student quantile in case of normalized errors; 521 double corrFactor = 1;; 522 if (fChi2 <= 0 || fNdf == 0) norm = false;; 523 if (norm); 524 corrFactor = TMath::StudentQuantile(0.5 + cl/2, fNdf) * std::sqrt( fChi2/fNdf );; 525 else; 526 // correction to apply to the errors given a CL different than 1 sigma (cl=0.683); 527 corrFactor = ROOT::Math::normal_quantile(0.5 + cl/2, 1);; 528 ; 529 ; 530 ; 531 unsigned int ndim = fFitFunc->NDim();; 532 unsigned int npar = fFitFunc->NPar();; 533 ; 534 std::vector<double> xpoint(ndim);; 535 std::vector<double> grad(npar);; 536 std::vector<double> vsum(npar);; 537 ; 538 // loop on the points; 539 for (unsigned int ipoint = 0; ipoint < n; ++ipoint) {; 540 ; 541 for (unsigned int kdim = 0; kdim < ndim; ++kdim) {; 542 unsigned int i = ipoint * stride1 + kdim * stride2;; 543 assert",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8cxx_source.html:18705,error,errors,18705,doc/master/FitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8cxx_source.html,1,['error'],['errors']
Availability,"d::move(innerIntegral));; 640 }; 641 ; 642 // Remove already integrated observables from to-do list; 643 iset.remove(innerSet) ;; 644 ; 645 // Send info message on recursion if needed; 646 if (integrand == this && !iset.empty()) {; 647 coutI(Integration) << GetName() << "" : multidimensional integration over observables with parameterized ranges in terms of other integrated observables detected, using recursive integration strategy to construct final integral"" << std::endl ;; 648 }; 649 ; 650 // Prepare for recursion, next integral should integrate last integrand; 651 integrand = integral.get();; 652 ; 653 ; 654 // Only need normalization set in innermost integration; 655 nset = nullptr;; 656 }; 657 ; 658 if (error) {; 659 coutE(Integration) << GetName() << "" : ERROR while defining recursive integral over observables with parameterized integration ranges, please check that integration rangs specify uniquely defined integral "" << std::endl;; 660 return nullptr;; 661 }; 662 ; 663 ; 664 // After-burner: apply interpolating cache on (numeric) integral if requested by user; 665 const char* cacheParamsStr = getStringAttribute(""CACHEPARAMINT"") ;; 666 if (cacheParamsStr && strlen(cacheParamsStr)) {; 667 ; 668 std::unique_ptr<RooArgSet> intParams{integral->getVariables()};; 669 ; 670 RooArgSet cacheParams = RooHelpers::selectFromArgSet(*intParams, cacheParamsStr);; 671 ; 672 if (!cacheParams.empty()) {; 673 cxcoutD(Caching) << ""RooAbsReal::createIntObj("" << GetName() << "") INFO: constructing "" << cacheParams.size(); 674 << ""-dim value cache for integral over "" << iset2 << "" as a function of "" << cacheParams << "" in range "" << (rangeName?rangeName:""<none>"") << std::endl ;; 675 std::string name = Form(""%s_CACHE_[%s]"",integral->GetName(),cacheParams.contentsString().c_str()) ;; 676 auto cachedIntegral = std::make_unique<RooCachedReal>(name.c_str(),name.c_str(),*integral,cacheParams);; 677 cachedIntegral->setInterpolationOrder(2) ;; 678 cachedIntegral->addOwnedComponents(std::mov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:25067,error,error,25067,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['error']
Availability,"d::sqrt(V(i,i)) ;; 2548 for (std::size_t j=i ; j<paramList.size() ; j++) {; 2549 C(i,j) = V(i,j) / std::sqrt(V(i,i)*V(j,j));; 2550 C(j,i) = C(i,j) ;; 2551 }; 2552 }; 2553 ; 2554 // Make std::vector of variations; 2555 TVectorD F(plusVar.size()) ;; 2556 for (std::size_t j=0 ; j<plusVar.size() ; j++) {; 2557 F[j] = (plusVar[j]-minusVar[j]) * 0.5;; 2558 }; 2559 ; 2560 // Calculate error in linear approximation from variations and correlation coefficient; 2561 double sum = F*(C*F) ;; 2562 ; 2563 return sqrt(sum) ;; 2564}; 2565 ; 2566 ; 2567 ; 2568////////////////////////////////////////////////////////////////////////////////; 2569/// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; 2570/// \param[in] frame RooPlot to plot on; 2571/// \param[in] fr The RooFitResult, where errors can be extracted; 2572/// \param[in] Z The desired significance (width) of the error band; 2573/// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; 2574/// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; 2575/// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; 2576/// \return The RooPlot the band was plotted on (for chaining of plotting commands).; 2577///; 2578/// The linearized error is calculated as follows:; 2579/// \f[; 2580/// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; 2581/// \f]; 2582///; 2583/// where; 2584/// \f[; 2585/// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; 2586/// \f]; 2587/// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; 2588/// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); 2589///; 2590/// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:112599,error,errors,112599,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,4,['error'],"['error', 'errors']"
Availability,"d::string &req="""")Find description object for requested shape If not exists - will be created.Definition RGeomData.cxx:767; ROOT::RGeomDescription::fDescstd::vector< RGeomNode > fDesc! converted description, send to clientDefinition RGeomData.hxx:243; ROOT::RGeomDescription::PackMatrixvoid PackMatrix(std::vector< float > &arr, TGeoMatrix *matr)Pack matrix into vector, which can be send to client Following sizes can be used for vector: 0 - Iden...Definition RGeomData.cxx:341; ROOT::RGeomDescription::ProduceDrawingForbool ProduceDrawingFor(int nodeid, std::string &json, bool check_volume=false)Produce shape rendering data for given stack All nodes, which are referencing same shape will be tran...Definition RGeomData.cxx:1757; ROOT::RGeomDescription::MakeNodeInfostd::unique_ptr< RGeomNodeInfo > MakeNodeInfo(const std::vector< int > &stack)Change visibility for specified element Returns true if changes was performed.Definition RGeomData.cxx:1899; ROOT::RGeomDescription::HasDrawDatabool HasDrawData() constCheck if there is draw data available.Definition RGeomData.cxx:1331; ROOT::RGeomDescription::MakeIdsByStackstd::vector< int > MakeIdsByStack(const std::vector< int > &stack)Produce list of node ids for given stack If found nodes preselected - use their ids.Definition RGeomData.cxx:1683; ROOT::RGeomDescription::MarkVisibleint MarkVisible(bool on_screen=false)Set visibility flag for each nodes.Definition RGeomData.cxx:594; ROOT::RGeomDescription::SetVisLevelvoid SetVisLevel(int lvl=3)Set maximal visible level.Definition RGeomData.hxx:327; ROOT::RGeomDescription::IssueSignalvoid IssueSignal(const void *handler, const std::string &kind)Issue signal, which distributed on all handlers - excluding source handler.Definition RGeomData.cxx:293; ROOT::RGeomDescription::GetUsedNSegmentsint GetUsedNSegments(int min=20)Returns really used number of cylindrical segments.Definition RGeomData.cxx:922; ROOT::RGeomDescription::IsPrincipalEndNodebool IsPrincipalEndNode(int nodeid)return tru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:75203,avail,available,75203,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,4,['avail'],['available']
Availability,"d::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 double fLearningRate;; 853 double fMomentum;; 854 int fRepetitions;; 855 MinimizerType fMinimizerType;; 856 ; 857 size_t m_convergenceCount;; 858 size_t m_maxConvergenceCount;; 859 double m_minError;; 860 ; 861 ; 862 protected:; 863 bool m_useMultithreading;; 864 ; 865 std::shared_ptr<Monitoring> fMonitoring;; 866 };; 867 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:31932,error,error,31932,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['error'],['error']
Availability,"d::string(""Normalization"")==cmd->GetName()) {; 2610 if (((RooCmdArg*)cmd)->getInt(1)!=0) {; 2611 } else {; 2612 plotArgList.Add(cmd) ;; 2613 }; 2614 } else {; 2615 plotArgList.Add(cmd) ;; 2616 }; 2617 }; 2618 ; 2619 // Function to plot a single curve, creating a copy of the plotArgList to; 2620 // pass as plot command arguments. The ""FillColor"" command is removed because; 2621 // it has no effect on plotting single curves and would cause a warning.; 2622 auto plotFunc = [&](RooAbsReal const& absReal) {; 2623 RooLinkedList tmp(plotArgList) ;; 2624 RooCmdConfig::stripCmdList(tmp, ""FillColor"");; 2625 absReal.plotOn(frame, tmp);; 2626 };; 2627 ; 2628 // Generate central value curve; 2629 plotFunc(*this);; 2630 RooCurve* cenCurve = frame->getCurve() ;; 2631 if(!cenCurve){; 2632 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":plotOnWithErrorBand: no curve for central value available"" << std::endl;; 2633 return frame;; 2634 }; 2635 frame->remove(nullptr,false) ;; 2636 ; 2637 RooCurve* band(nullptr) ;; 2638 if (!linMethod) {; 2639 ; 2640 // *** Interval method ***; 2641 //; 2642 // Make N variations of parameters samples from V and visualize N% central interval where N% is defined from Z; 2643 ; 2644 // Clone self for internal use; 2645 RooAbsReal* cloneFunc = static_cast<RooAbsReal*>(cloneTree()) ;; 2646 RooArgSet cloneParams;; 2647 cloneFunc->getObservables(&fr.floatParsFinal(), cloneParams) ;; 2648 RooArgSet errorParams{cloneParams};; 2649 if(params) {; 2650 // clear and fill errorParams only with parameters that both in params and cloneParams; 2651 cloneParams.selectCommon(*params, errorParams);; 2652 }; 2653 ; 2654 // Generate 100 random parameter points distributed according to fit result covariance matrix; 2655 RooAbsPdf* paramPdf = fr.createHessePdf(errorParams) ;; 2656 Int_t n = Int_t(100./TMath::Erfc(Z/sqrt(2.))) ;; 2657 if (n<100) n=100 ;; 2658 ; 2659 coutI(Plotting) << ""RooAbsReal::plotOn("" << GetName() << "") INFO: visualizing "" << Z << ""-sigma uncertai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:116146,avail,available,116146,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['avail'],['available']
Availability,"d::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. s - Run Hesse first to estimate initial step size; m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile timer; r - Save fit result; 0 - Run Migrad with strategy 0. Int_t migrad(); Execute MIGRAD. Changes in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:8936,error,error,8936,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,2,['error'],['error']
Availability,"d::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setOffsetting(Bool_t flag); Enable internal likelihood offsetting for enhanced numeric precision. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. s - Run Hesse first to estimate initial step size; m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:9043,error,error,9043,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,2,['error'],['error']
Availability,"d::unique_ptr<RooDataSet> data{argus.generate(m, 1000)};; ; // P l o t m o d e l a n d d a t a; // --------------------------------------; ; RooPlot *frame1 = m.frame(Bins(40), Title(""Argus model and data""));; data->plotOn(frame1);; argus.plotOn(frame1);; ; // F i t m o d e l t o d a t a; // ---------------------------------; ; // The ARGUS background shape has a sharp kinematic cutoff at m=m0; // and is prone to evaluation errors if the cutoff parameter m0; // is floated: when the pdf cutoff value is lower than that in data; // events with m>m0 will have zero probability; ; // Perform unbinned ML fit. Print detailed error messages for up to; // 10 events per likelihood evaluation. The default error handling strategy; // is to return a very high value of the likelihood to MINUIT if errors occur,; // which will force MINUIT to retreat from the problematic area; ; argus.fitTo(*data, PrintEvalErrors(10));; ; // Perform another fit. In this configuration only the number of errors per; // likelihood evaluation is shown, if it is greater than zero. The; // EvalErrorWall(false) arguments disables the default error handling strategy; // and will cause the actual (problematic) value of the likelihood to be passed; // to MINUIT.; //; // NB: Use of this option is NOT recommended as default strategy as broken -log(L) values; // can often be lower than 'good' ones because offending events are removed.; // This may effectively create a false minimum in problem areas. This is clearly; // illustrated in the second plot; ; m0.setError(0.1);; argus.fitTo(*data, PrintEvalErrors(0), EvalErrorWall(false));; ; // P l o t l i k e l i h o o d a s f u n c t i o n o f m 0; // ------------------------------------------------------------------; ; // Construct likelihood function of model and data; std::unique_ptr<RooAbsReal> nll{argus.createNLL(*data)};; ; // Plot likelihood in m0 in range that includes problematic values; // In this configuration no messages are printed for likelihood evaluat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:1881,error,errors,1881,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['error'],['errors']
Availability,"d::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.1); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Sat Mar 14 16:44:05 2015 » Last generated: 2015-03-14 16:44; This page has been a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__OptimizeConfigParameters.html:4108,reliab,reliably,4108,root/html534/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html534/TMVA__OptimizeConfigParameters.html,1,['reliab'],['reliably']
Availability,"d::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.1); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Mon Jul 4 15:34:26 2011 » Last generated: 2011-07-04 15:34; This page has been aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__OptimizeConfigParameters.html:3952,reliab,reliably,3952,root/html530/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html530/TMVA__OptimizeConfigParameters.html,1,['reliab'],['reliably']
Availability,"d::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.1); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase *const method, map<TString,TMVA::Interval> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Thu Nov 3 20:19:51 2011 » Last generated: 2011-11-03 20:19; This page has been aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__OptimizeConfigParameters.html:3952,reliab,reliably,3952,root/html532/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html532/TMVA__OptimizeConfigParameters.html,1,['reliab'],['reliably']
Availability,"d::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Tue Jun 2 16:17:38 2015 » Last generated: 2015-06-02 16:17; This p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html:4275,reliab,reliably,4275,root/html604/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html604/TMVA__OptimizeConfigParameters.html,1,['reliab'],['reliably']
Availability,"d::vector< int > GetScanIndices(int val, vector<int> base); helper function to scan through the all the combinations in the; parameter space. void optimizeScan(); do the actual optimization using a simple scan method,; i.e. calcualte the FOM for; different tuning paraemters and remember which one is; gave the best FOM. void optimizeFit(); ranges (intervals) in which the fit varies the parameters. Double_t EstimatorFunction(vector<Double_t>& ); return the estimator (from current FOM) for the fitting interface. Double_t GetFOM(); Return the Figure of Merit (FOM) used in the parameter; optimization process. void GetMVADists(); fill the private histograms with the mva distributinos for sig/bkg. Double_t GetSeparation(); return the searation between the signal and background; MVA ouput distribution. Double_t GetROCIntegral(); calculate the area (integral) under the ROC curve as a; overall quality measure of the classification. makeing pdfs out of the MVA-ouput distributions doesn't work; reliably for cases where the MVA-ouput isn't a smooth distribution.; this happens ""frequently"" in BDTs for example when the number of; trees is small resulting in only some discrete possible MVA ouput values.; (I still leave the code here, but use this with care!!! The default; however is to use the distributions!!!. Double_t GetSigEffAtBkgEff(Double_t bkgEff = 0.10000000000000001); calculate the signal efficiency for a given background efficiency. Double_t GetBkgEffAtSigEff(Double_t sigEff = 0.5); calculate the background efficiency for a given signal efficiency. Double_t GetBkgRejAtSigEff(Double_t sigEff = 0.5); calculate the background rejection for a given signal efficiency. OptimizeConfigParameters(TMVA::MethodBase*const method, map<TString,TMVA::Interval*> tuneParameters, TString fomType = ""Separation"", TString optimizationType = ""GA""); default constructor. MethodBase* GetMethod(); {return fMethod;}. » Last changed: Tue Jun 30 15:16:57 2015 » Last generated: 2015-06-30 15:16; This ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__OptimizeConfigParameters.html:4267,reliab,reliably,4267,root/html602/TMVA__OptimizeConfigParameters.html,https://root.cern,https://root.cern/root/html602/TMVA__OptimizeConfigParameters.html,1,['reliab'],['reliably']
Availability,"d; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. TString & GetLastErrorString(); Return the thread local storage for the custom last error message. const TString & GetLastErrorString() const; Return the thread local storage for the custom last error message. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(const char* server); Get Internet Protocol (IP) address of host. TInetAddress GetPeerName(int sock); Get Internet Protocol (IP) address of remote host and port #. TInetAddress GetSockName(int sock); Get Internet Protocol (IP) address of host and port #. int GetServiceByName(const char* service)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSystem.html:34799,error,error,34799,root/html534/TSystem.html,https://root.cern,https://root.cern/root/html534/TSystem.html,1,['error'],['error']
Availability,"d; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSlave.html:10742,error,error,10742,root/html602/TSlave.html,https://root.cern,https://root.cern/root/html602/TSlave.html,2,['error'],['error']
Availability,"d; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveJetCone*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveJetConeEditor.html:17264,mask,mask,17264,root/html528/TEveJetConeEditor.html,https://root.cern,https://root.cern/root/html528/TEveJetConeEditor.html,4,['mask'],['mask']
Availability,"dAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; static voidEmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tGrowBy(Int_t delta) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCollection.html:2531,error,error,2531,root/html528/TCollection.html,https://root.cern,https://root.cern/root/html528/TCollection.html,3,['error'],['error']
Availability,"dArg& arg4, const RooCmdArg& arg5,; 4107 const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8); 4108{; 4109 RooLinkedList l ;; 4110 l.Add((TObject*)&arg1) ; l.Add((TObject*)&arg2) ;; 4111 l.Add((TObject*)&arg3) ; l.Add((TObject*)&arg4) ;; 4112 l.Add((TObject*)&arg5) ; l.Add((TObject*)&arg6) ;; 4113 l.Add((TObject*)&arg7) ; l.Add((TObject*)&arg8) ;; 4114 return chi2FitTo(data,l) ;; 4115}; 4116 ; 4117 ; 4118 ; 4119////////////////////////////////////////////////////////////////////////////////; 4120/// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; 4121///; 4122/// List of possible commands in the `cmdList`:; 4123///; 4124/// <table>; 4125/// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; 4126/// <tr><td>; 4127/// <tr><td> `DataError()` <td> Choose between:; 4128/// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; 4129/// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; 4130/// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; 4131/// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; 4132/// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; 4133/// (e.g., the difference between the mean and the 16 % quantile).; 4134/// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; 4135/// (e.g., the difference between the 84 % quantile and the mean).; 4136/// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; 4137/// <tr><td>; 4138/// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; 4139/// <tr><td>; 4140/// NumCPU() <td> Activate parallel processing feature; 4141/// <tr><td>;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:180438,error,error,180438,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['error']
Availability,"dArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:78866,error,error,78866,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,2,['error'],"['error', 'errors']"
Availability,"dArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:77993,error,error,77993,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,4,['error'],"['error', 'errors']"
Availability,"dArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. void setParameterizeIntegral(const RooArgSet& paramVars). Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. Bool_t getForceNumInt() const; { return _forceNumInt ; }. RooAbsReal*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:81296,error,error,81296,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,6,['error'],"['error', 'errors']"
Availability,"dArgs(const char* argName1, const char* argName2 = 0, const char* argName3 = 0, const char* argName4 = 0, const char* argName5 = 0, const char* argName6 = 0, const char* argName7 = 0, const char* argName8 = 0); Bool_tdefineSet(const char* name, const char* argName, Int_t setNum, const RooArgSet* set = 0); Bool_tdefineString(const char* name, const char* argName, Int_t stringNum, const char* defValue = """", Bool_t appendMode = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; RooLinkedListfilterCmdList(RooLinkedList& cmdInList, const char* cmdNameList, Bool_t removeFromInList = kTRUE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tgetDouble(const char* name, Double_t defaultValue = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tgetInt(const char* name, Int_t defaultValue = 0); virtual const char*TObject::GetName() const; TObject*getObject(const char* name, TObject* obj = 0); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const RooLinkedList&getObjectList(const char* name); static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooArgSet*getSet(const char* name, RooArgSet* set = 0); con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCmdConfig.html:4383,error,error,4383,root/html526/RooCmdConfig.html,https://root.cern,https://root.cern/root/html526/RooCmdConfig.html,7,['error'],['error']
Availability,"dAtAndExpandvirtual void AddAtAndExpand(TObject *obj, Int_t idx)Add object at position idx.Definition TObjArray.cxx:235; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObject::IsEqualvirtual Bool_t IsEqual(const TObject *obj) constDefault equal comparison (objects are equal if they have the same address in memory).Definition TObject.cxx:570; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TSeqCollection::IndexOfvirtual Int_t IndexOf(const TObject *obj) constReturn index of object in collection.Definition TSeqCollection.cxx:30; TStringBasic string class.Definition TString.h:139; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; bool; double; int; TGeant4Unit::fine_structure_conststatic constexpr double fine_structure_constDefinition TGeant4PhysicalConstants.h:90; TGeant4Unit::cm2sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html:67734,error,error,67734,doc/master/TGeoMaterial_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMaterial_8cxx_source.html,1,['error'],['error']
Availability,"dBeginEvent(); virtual voidBeginPrimary(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConstructGeometry(); virtual voidConstructOpGeometry(); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFinishEvent(); virtual voidFinishPrimary(); virtual voidFinishRun(); virtual voidGeneratePrimaries(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMCVerbose.html:1765,error,error,1765,root/html528/TMCVerbose.html,https://root.cern,https://root.cern/root/html528/TMCVerbose.html,6,['error'],['error']
Availability,"dBox[0]);; 532 fCheckedNode = daughter;; 533 if (fGeoManager->IsNodeSelectable()); 534 gPad->SetSelected(fCheckedNode);; 535 else; 536 gPad->SetSelected(vol);; 537 fCheckedBox[3] = box->GetDX();; 538 fCheckedBox[4] = box->GetDY();; 539 fCheckedBox[5] = box->GetDZ();; 540 fGeoManager->PopPath();; 541 return 0;; 542 }; 543 }; 544 // Check if we have to skip the branch; 545 if (last || !daughter->IsVisDaughters()); 546 next.Skip();; 547 }; 548 }; 549 return dist;; 550}; 551 ; 552////////////////////////////////////////////////////////////////////////////////; 553/// Set default angles for the current view.; 554 ; 555void TGeoPainter::DefaultAngles(); 556{; 557 if (gPad) {; 558 Int_t irep;; 559 TView *view = gPad->GetView();; 560 if (!view); 561 return;; 562 view->SetView(-206, 126, 75, irep);; 563 ModifiedPad();; 564 }; 565}; 566 ; 567////////////////////////////////////////////////////////////////////////////////; 568/// Set default volume colors according to tracking media; 569 ; 570void TGeoPainter::DefaultColors(); 571{; 572 TIter next(fGeoManager->GetListOfVolumes());; 573 TGeoVolume *vol;; 574 while ((vol = (TGeoVolume *)next())); 575 vol->SetLineColor(vol->GetMaterial()->GetDefaultColor());; 576 ModifiedPad();; 577}; 578 ; 579////////////////////////////////////////////////////////////////////////////////; 580/// Count number of visible nodes down to a given level.; 581 ; 582Int_t TGeoPainter::CountNodes(TGeoVolume *volume, Int_t rlevel) const; 583{; 584 TGeoVolume *vol = volume;; 585 Int_t count = 0;; 586 Bool_t vis = vol->IsVisible();; 587 // Do I need to look for the top volume ?; 588 if ((fTopVisible && vis) || !vol->GetNdaughters() || !vol->IsVisDaughters() || vol->IsVisOnly()); 589 count++;; 590 // Is this the only volume?; 591 if (volume->IsVisOnly()); 592 return count;; 593 ; 594 // Do we need to check a branch only?; 595 if (volume->IsVisBranch()) {; 596 fGeoManager->PushPath();; 597 fGeoManager->cd(fVisBranch.Data());; 598 count = fGeoManager->GetLevel(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:19272,down,down,19272,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['down'],['down']
Availability,"dBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TVirtualPerfStats*&TVirtualPerfStats::CurrentPerfStats(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; static const char*TVirtualPerfStats::EventType(TVirtualPerfStats::EEventType type); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFileEvent(const char*, const char*, const char*, const char*, Bool_t); virtual voidFileOpenEvent(TFile*, const char*, Double_t); virtual voidFileReadEvent(TFile* file, Int_t len, Double_t start); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFinish(); virtual Long64_tGetBytesRead() const; virtual Long64_tGetBytesReadExtra() const; virtual Double_tGetCpuTime() const; virtual Double_tGetDiskTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraphErrors*GetGraphIO(); TGraphErrors*GetGraphTime(); const char*GetHostInfo() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual Int_tGetNleaves() const; virtual Long64_tGetNumEvents() const; virtual char*TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreePerfStats.html:3867,error,error,3867,root/html534/TTreePerfStats.html,https://root.cern,https://root.cern/root/html534/TTreePerfStats.html,3,['error'],['error']
Availability,"dBuffer(). void TKeyXML::ReadBuffer ; (; char *& ; buffer). inlinefinalvirtual . Decode input buffer. ; In some situation will add key to gDirectory. ; Reimplemented from TKey.; Definition at line 54 of file TKeyXML.h. ◆ ReadFile(). Bool_t TKeyXML::ReadFile ; (; ). inlinefinalvirtual . Read the key structure from the file. ; Reimplemented from TKey.; Definition at line 55 of file TKeyXML.h. ◆ ReadObj(). TObject * TKeyXML::ReadObj ; (; ). finalvirtual . read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ; Reimplemented from TKey.; Definition at line 259 of file TKeyXML.cxx. ◆ ReadObjectAny(). void * TKeyXML::ReadObjectAny ; (; const TClass * ; expectedClass). finalvirtual . read object of any type ; Reimplemented from TKey.; Definition at line 312 of file TKeyXML.cxx. ◆ ReadObjWithBuffer(). TObject * TKeyXML::ReadObjWithBuffer ; (; char * ; bufferRead). finalvirtual . read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ; Reimplemented from TKey.; Definition at line 286 of file TKeyXML.cxx. ◆ SetBuffer(). void TKeyXML::SetBuffer ; (; ). inlinefinalvirtual . Reimplemented from TKey.; Definition at line 56 of file TKeyXML.h. ◆ SetSubir(). void TKeyXML::SetSubir ; (; ). inline . Definition at line 64 of file TKeyXML.h. ◆ StoreKeyAttributes(). void TKeyXML::StoreKeyAttributes ; (; ). protected . Stores keys attributes in key node. ; Definition at line 142 of file TKeyXML.cxx. ◆ StoreObject(). void TKeyXML::StoreObject ; (; const void * ; obj, . const TClass * ; cl, . Bool_t ; check_tobj = kFALSE . ). protected . convert object to xml structure and keep this structure in key ; Definition at line 166 of file TKeyXML.cxx. ◆ Streamer(). void TKeyXML::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TKey. ◆ StreamerNVirtual(). void TKeyXML::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyXML.html:23280,error,error,23280,doc/master/classTKeyXML.html,https://root.cern,https://root.cern/doc/master/classTKeyXML.html,1,['error'],['error']
Availability,"dCalls = 0, Double_t fProcTime = 0, Double_t fCPUTime = 0); ~TProofProgressStatus(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Double_tGetCPUTime() const; Double_tGetCurrentRate() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntries() const; virtual const char*TObject::GetIconName() const; Double_tGetLastUpdate() const; Double_tGetLearnTime() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetProcTime() const; Double_tGetRate() const; Long64_tGetReadCalls() const; virtual const char*TObject::GetTitle() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressStatus.html:1557,error,error,1557,root/html528/TProofProgressStatus.html,https://root.cern,https://root.cern/root/html528/TProofProgressStatus.html,4,['error'],['error']
Availability,"dClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidForceWriteInfoClones(TClonesArray* a); virtual Int_tGetBufferDisplacement() const; Int_tGetBufferVersion() const; static TClass*GetClass(const type_info& typeinfo); static TClass*GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*GetInfo(); virtual TProcessID*GetLastProcessID(TRefTable* reftable) const; virtual Int_tGetMapCount() const; virtual voidGetMappedObject(UInt_t tag, void*& ptr, TClass*& ClassPtr) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBuffer.html:2086,error,error,2086,root/html526/TBuffer.html,https://root.cern,https://root.cern/root/html526/TBuffer.html,1,['error'],['error']
Availability,"dClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidForceWriteInfoClones(TClonesArray* a); virtual Int_tGetBufferDisplacement() const; Int_tGetBufferVersion() const; static TClass*GetClass(const type_info& typeinfo); static TClass*GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*GetInfo(); virtual TProcessID*GetLastProcessID(TRefTable* reftable) const; virtual Int_tGetMapCount() const; virtual voidGetMappedObject(UInt_t tag, void*& ptr, TClass*& ClassPtr) const; virtual const char*TObject::GetName() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBuffer.html:2086,error,error,2086,root/html528/TBuffer.html,https://root.cern,https://root.cern/root/html528/TBuffer.html,1,['error'],['error']
Availability,"dClassEnd(const TClass*); virtual voidClassMember(const char*, const char* = 0, Int_t = -1, Int_t = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TVirtualStreamerInfo* info, Bool_t force); virtual voidForceWriteInfoClones(TClonesArray* a); virtual Int_tGetBufferDisplacement() const; Int_tGetBufferVersion() const; static TClass*GetClass(const type_info& typeinfo); static TClass*GetClass(const char* className); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TVirtualStreamerInfo*GetInfo(); virtual TProcessID*GetLastProcessID(TRefTable* reftable) const; virtual Int_tGetMapCount() const; virtual voidGetMappedObject(UInt_t tag, void*& ptr, TClass*& ClassPtr) const; virtual const char*TObject::GetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBuffer.html:2121,error,error,2121,root/html530/TBuffer.html,https://root.cern,https://root.cern/root/html530/TBuffer.html,5,['error'],['error']
Availability,"dClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Int_tCollisions(const char* keyname) const; Int_tCollisions(TObject* key) const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); voidDeleteAll(); Bool_tDeleteEntry(TObject* key); voidDeleteKeys(); voidDeleteValues(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* keyname) const; virtual TObject*FindObject(const TObject* key) const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; const THashTable*GetTable() const; virtual const char*TObject::GetTit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMap.html:2287,error,error,2287,root/html528/TMap.html,https://root.cern,https://root.cern/root/html528/TMap.html,1,['error'],['error']
Availability,"dCollection::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 84 of file TOrdCollection.h. ◆ Delete(). void TOrdCollection::Delete ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the collection AND delete all heap based objects. ; Implements TCollection.; Definition at line 199 of file TOrdCollection.cxx. ◆ First(). TObject * TOrdCollection::First ; (; ); const. overridevirtual . Return the first object in the collection. ; Returns 0 when collection is empty. ; Implements TSeqCollection.; Definition at line 216 of file TOrdCollection.cxx. ◆ GetObjectRef(). TObject ** TOrdCollection::GetObjectRef ; (; const TObject * ; obj); const. overridevirtual . return address of pointer obj ; Implements TCollection.; Definition at line 224 of file TOrdCollection.cxx. ◆ IllegalIndex(). Bool_t TOrdCollection::IllegalIndex ; (; const char * ; method, . Int_t ; idx . ); const. private . Return true when index out of bounds and print error. ; Definition at line 242 of file TOrdCollection.cxx. ◆ IndexOf(). Int_t TOrdCollection::IndexOf ; (; const TObject * ; obj); const. overridevirtual . Return index of object in collection. ; Returns -1 when object not found. Uses member IsEqual() to find object. ; Reimplemented from TSeqCollection.; Definition at line 255 of file TOrdCollection.cxx. ◆ Init(). void TOrdCollection::Init ; (; Int_t ; capacity). private . Initialize ordered collection. ; Definition at line 267 of file TOrdCollection.cxx. ◆ IsA(). TClass * TOrdCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TCollection.; Definition at line 84 of file TOrdCollection.h. ◆ Last(). TObject * TOrdCollection::Last ; (; ); const. overridevirtual . Return the last object in the collection. ; Returns 0 when collection is empty. ; Implements TSeqCollection.; Definition at line 234 of file TOrdCollection.cxx. ◆ LogIndex(). Int_t TOrdCollecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOrdCollection.html:23235,error,error,23235,doc/master/classTOrdCollection.html,https://root.cern,https://root.cern/doc/master/classTOrdCollection.html,1,['error'],['error']
Availability,"dDeclArgsToKeepCollection_t &fwdDeclsArgToSkip, const char **classesHeaders, Bool_t lateRegistration=false, Bool_t hasCxxModule=false) final;  Inject the module named ""modulename"" into cling; load all headers. ;  ; bool RegisterPrebuiltModulePath (const std::string &FullPath, const std::string &ModuleMapName=""module.modulemap"") const final;  ; void RegisterTClassUpdate (TClass *oldcl, DictFuncPtr_t dict) final;  Register classes that already existed prior to their dictionary loading and that already had a ClassInfo (and thus would not be refresh via UpdateClassInfo. ;  ; void RegisterTemporary (const cling::Value &value);  Register value as a temporary, extending its lifetime to that of the interpreter. ;  ; void RegisterTemporary (const TInterpreterValue &value);  ; Int_t ReloadAllSharedLibraryMaps () final;  Reload the library map entries coming from all the loaded shared libraries, after first unloading the current ones. ;  ; void ReportDiagnosticsToErrorHandler (bool enable=true) final;  Report diagnostics to the ROOT error handler (see TError.h). ;  ; Int_t RescanLibraryMap () final;  Scan again along the dynamic path for library maps. ;  ; void Reset () final;  Pressing Ctrl+C should forward here. ;  ; void ResetAll () final;  Reset the Cling state to its initial state. ;  ; void ResetGlobals () final;  Reset in Cling the list of global variables to the state saved by the last call to TCling::SaveGlobalsContext(). ;  ; void ResetGlobalVar (void *obj) final;  Reset the Cling 'user' global objects/variables state to the state saved by the last call to TCling::SaveGlobalsContext(). ;  ; void RewindDictionary () final;  Rewind Cling dictionary to the point where it was before executing the current macro. ;  ; void * RewindInterpreterMutex ();  Reset the interpreter lock to the state it had before interpreter-related calls happened. ;  ; void SaveContext () final;  Save the current Cling state. ;  ; void SaveGlobalsContext () final;  Save the current Cling state of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:28951,error,error,28951,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['error'],['error']
Availability,"dEntries = fEntries;; 5298 Int_t bin,binx,biny,binz;; 5299 for (bin=0; bin < hold->fNcells; ++bin) {; 5300 hold->GetBinXYZ(bin,binx,biny,binz);; 5301 Int_t ibin = GetBin(binx,biny,binz);; 5302 Double_t cu = hold->RetrieveBinContent(bin);; 5303 AddBinContent(ibin,cu);; 5304 if (errors) {; 5305 fSumw2.fArray[ibin] += hold->fSumw2.fArray[bin];; 5306 }; 5307 }; 5308 fEntries = oldEntries;; 5309 delete hold;; 5310}; 5311 ; 5312////////////////////////////////////////////////////////////////////////////////; 5313/// Double the number of bins for axis.; 5314/// Refill histogram.; 5315/// This function is called by TAxis::FindBin(const char *label); 5316 ; 5317void TH1::LabelsInflate(Option_t *ax); 5318{; 5319 Int_t iaxis = AxisChoice(ax);; 5320 TAxis *axis = nullptr;; 5321 if (iaxis == 1) axis = GetXaxis();; 5322 if (iaxis == 2) axis = GetYaxis();; 5323 if (iaxis == 3) axis = GetZaxis();; 5324 if (!axis) return;; 5325 ; 5326 TH1 *hold = (TH1*)IsA()->New();; 5327 hold->SetDirectory(nullptr);; 5328 Copy(*hold);; 5329 hold->ResetBit(kMustCleanup);; 5330 ; 5331 Bool_t timedisp = axis->GetTimeDisplay();; 5332 Int_t nbins = axis->GetNbins();; 5333 Double_t xmin = axis->GetXmin();; 5334 Double_t xmax = axis->GetXmax();; 5335 xmax = xmin + 2*(xmax-xmin);; 5336 axis->SetRange(0,0);; 5337 // double the bins and recompute ncells; 5338 axis->Set(2*nbins,xmin,xmax);; 5339 SetBinsLength(-1);; 5340 Int_t errors = fSumw2.fN;; 5341 if (errors) fSumw2.Set(fNcells);; 5342 axis->SetTimeDisplay(timedisp);; 5343 ; 5344 Reset(""ICE""); // reset content and error; 5345 ; 5346 //now loop on all bins and refill; 5347 Double_t oldEntries = fEntries;; 5348 Int_t bin,ibin,binx,biny,binz;; 5349 for (ibin =0; ibin < hold->fNcells; ibin++) {; 5350 // get the binx,y,z values . The x-y-z (axis) bin values will stay the same between new-old after the expanding; 5351 hold->GetBinXYZ(ibin,binx,biny,binz);; 5352 bin = GetBin(binx,biny,binz);; 5353 ; 5354 // underflow and overflow will be cleaned up because their",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:214614,error,errors,214614,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"dExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. private:. void*fDirpdirectory handler. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSystem. ←; TWebSystem. Function documentation; TWebSystem(); Create helper class that allows directory access via httpd.; The name must start with '-' to bypass the TSystem singleton check. Int_t MakeDirectory(const char* name); Make a directory via httpd. Not supported. void * OpenDirectory(const char* name); Open a directory via httpd. Returns an opaque pointer to a dir; structure. Returns 0 in case of error. void FreeDirectory(void* dirp); Free directory via httpd. const char * GetDirEntry(void* dirp); Get directory entry via httpd. Returns 0 in case no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. Int_t Unlink(const char* path); Unlink, i.e. remove, a file or directory. Returns 0 when successful,; -1 in case of failure. Not supported for httpd. void * GetDirPtr() const; { return fDirp; }. TWebSystem(). virtual ~TWebSystem(); { }. » Author: Fons Rademakers 17/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TWebSystem.html:20858,failure,failure,20858,root/html602/TWebSystem.html,https://root.cern,https://root.cern/root/html602/TWebSystem.html,1,['failure'],['failure']
Availability,"dFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit ; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc,fWeight,fIsExtended); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:4017,error,errors,4017,root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['error'],['errors']
Availability,"dGeometry;  CTH3Adapter;  CTIsoMesh;  CTMeshBuilder;  CTSlice;  CTSourceAdapterSelector;  CTSourceAdapterSelector< TF3 >;  CTSourceAdapterSelector< TH3C >;  CTSourceAdapterSelector< TH3D >;  CTSourceAdapterSelector< TH3F >;  CTSourceAdapterSelector< TH3I >;  CTSourceAdapterSelector< TH3S >;  CTSourceAdapterSelector< TKDEFGT >;  CTSplitterSelector;  CTSplitterSelector< TF3, V >;  CTSplitterSelector< TH3C, V >;  CTSplitterSelector< TH3D, V >;  CTSplitterSelector< TH3F, V >;  CTSplitterSelector< TH3I, V >;  CTSplitterSelector< TH3S, V >;  CTSplitterSelector< TKDEFGT, V >;  ►NPad;  CBoundingRect;  CFillAttribSet;  CGLLimits;  CLineAttribSet;  CMarkerPainter;  CMeshPatch_t;  COffScreenDevice;  CPolygonStippleSet;  CTesselator;  CPlotTranslation;  CTGuardBase;  CTOneArgGuard;  CTTwoArgsGuard;  ►NRooHelpers;  CHijackMessageStreamHijacks all messages with given level and topic (and optionally object name) while alive ;  CMakeVerboseSwitches the message service to verbose while the instance alive ;  ►NRooStats@(#)root/roostats:$Id$ Author: George Lewis, Kyle Cranmer ;  ►NHistFactory;  CAsimovTODO Here, we are missing some documentation ;  CChannelThis class encapsulates all information for the statistical interpretation of one experiment ;  CConfigParserTODO Add documentation ;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CHistoFactorConfiguration for an unconstrained, coherent shape variation of affected samples ;  CHistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:4796,alive,alive,4796,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['alive'],['alive']
Availability,"dGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tSendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Int_tSendObject(const TObject* obj); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TApplicationRemote.html:8141,error,error,8141,root/html530/TApplicationRemote.html,https://root.cern,https://root.cern/root/html530/TApplicationRemote.html,3,['error'],['error']
Availability,"dGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tRegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidReset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidResolveKeywords(TString& fname, const char* path = 0); voidRestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:10118,error,error,10118,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,1,['error'],['error']
Availability,"dGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidReset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidResolveKeywords(TString& fname, const char* path = 0); voidRestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidSendLogFile(Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:9861,error,error,9861,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,2,['error'],['error']
Availability,"dInfo_Property(MethodInfo_t* minfo) const; virtual const char*MethodInfo_Title(MethodInfo_t* minfo) const; virtual TypeInfo_t*MethodInfo_Type(MethodInfo_t* minfo) const; virtual const char*MethodInfo_TypeName(MethodInfo_t* minfo) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Long_tProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidResetGlobalVar(void* obj); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void (*)()) const; virtual voidSetAllocunlockfunc(void (*)()) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual intSetClassAutoloading(int) const; virtual voidSetClassInfo(TClass* cl, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCint.html:13846,error,error,13846,root/html530/TCint.html,https://root.cern,https://root.cern/root/html530/TCint.html,2,['error'],['error']
Availability,"dInfo_Title(MethodInfo_t* minfo) const; virtual TypeInfo_t*MethodInfo_Type(MethodInfo_t* minfo) const; virtual const char*MethodInfo_TypeName(MethodInfo_t* minfo) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Long_tProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void (*)()) const; virtual voidSetAllocunlockfunc(void (*)()) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual intSetClassAutoloading(int) const; virtual voidSetClassInfo(TClass* cl, Bool_t reload = kFALSE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void* p) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:13855,error,error,13855,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,2,['error'],['error']
Availability,"dInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target, int mode = 0, double xtarget = 0); if mode = 0; find closest point to target in Y, the object closest to the target which is 3 sigma from the target; and has smaller error; if mode = 1; find 2 closest point to target in X and between these two take the one closer to the target; if mode = 2 as in mode = 1 but return the lower point not the closest one; if mode = 3 as in mode = 1 but return the upper point not the closest one. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target, bool lower = true, double xmin = 1, double xmax = 0); Return an error estimate on the upper(lower) limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(); need to have compute first lower limit. Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each point. double GetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; Get the expected lower limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:13997,error,error,13997,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,3,['error'],['error']
Availability,"dList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a histogram and this function. The following named arguments are supported. Options to control construction of the chi^2. Extended() -- Use expected number of events of an extended p.d.f as normalization; DataError() -- Choose between Expected error [RooAbsData::Expected] , or Observed error (e.g. Sum-of-weights [RooAbsData:SumW2] or Poisson interval [RooAbsData::Poisson] ); Default is AUTO : Expected error for unweighted data, Sum-of-weights for weighted data; NumCPU() -- Activate parallel processing feature; Range() -- Fit only selected region; SumCoefRange() -- Set the range in which to interpret the coefficients of RooAddPdf components; SplitRange() -- Fit range is split by index catory of simultaneous PDF; ConditionalObservables() -- Define projected observables. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a p.d.f. and a dataset. void printValue(ostream& os) const; Print value of p.d.f, also print normalization integral that was last used, if any. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print multi line detailed information of this RooAbsPdf. RooAbsGenContext* binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; Return a binned generator context. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Interface function to create a generator context from a p.d.f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:60677,error,error,60677,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['error'],['error']
Availability,"dLocate(Bool_t downwards, TGeoNode* skipnode); voidDefaultAngles()MENU ; voidDefaultColors()MENU ; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableInactiveVolumes(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); TGeoVolume*Division(const char* name, const char* mother, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed = 0, Option_t* option = """"); voidDoBackupState(); voidDoRestoreState(); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawCurrentPoint(Int_t color = 2)MENU ; voidDrawPath(const char* path); voidDrawTracks(Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; virtual voidEdit(Option_t* option = """")MENU ; voidEnableInactiveVolumes(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Int_tExport(const char* filename, const char* name = """", Option_t* option = ""v""); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TGeoMaterial*FindDuplicateMaterial(const TGeoMaterial* mat) const; TGeoNode*FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char* path = """", Bool_t frombdr = kFALSE); TGeoNode*FindNextBoundaryAndStep(Double_t stepmax = TGeoShape::Big(), Bool_t compsafe = kFALSE); TGeoNode*FindNextDaughterBoundary(Double_t* point, Double_t* dir, Int_t& idaughter, Bool_t compmatrix = kFALSE); TGeoNode*FindNode(Bool_t safe_start = kTRUE); TGeoNode*FindNode(Double_t x, Double_t y, Double_t z); Double_t*FindNormal(Bool_t forward = kTRUE); Double_t*FindNormalFast(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:14228,error,error,14228,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,2,['error'],['error']
Availability,"dLocate(Bool_t downwards, TGeoNode* skipnode); voidDefaultAngles()MENU ; voidDefaultColors()MENU ; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableInactiveVolumes(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); TGeoVolume*Division(const char* name, const char* mother, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed = 0, Option_t* option = """"); voidDoBackupState(); voidDoRestoreState(); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawCurrentPoint(Int_t color = 2)MENU ; voidDrawPath(const char* path); voidDrawTracks(Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; virtual voidEdit(Option_t* option = """")MENU ; voidEnableInactiveVolumes(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Int_tExport(const char* filename, const char* name = """", Option_t* option = ""vg""); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TGeoMaterial*FindDuplicateMaterial(const TGeoMaterial* mat) const; TGeoNode*FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char* path = """", Bool_t frombdr = kFALSE); TGeoNode*FindNextBoundaryAndStep(Double_t stepmax = TGeoShape::Big(), Bool_t compsafe = kFALSE); TGeoNode*FindNextDaughterBoundary(Double_t* point, Double_t* dir, Int_t& idaughter, Bool_t compmatrix = kFALSE); TGeoNode*FindNode(Bool_t safe_start = kTRUE); TGeoNode*FindNode(Double_t x, Double_t y, Double_t z); Double_t*FindNormal(Bool_t forward = kTRUE); Double_t*FindNormalFast(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:14377,error,error,14377,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,1,['error'],['error']
Availability,"dObject ; (; const TObject * ; obj); const. inlineoverridevirtual . Find object in the collection, Note: matching by object name, like the find() method. ; Reimplemented from TObject.; Definition at line 217 of file RooAbsCollection.h. ◆ first(). RooAbsArg * RooAbsCollection::first ; (; ); const. inline . Definition at line 314 of file RooAbsCollection.h. ◆ fwdIterator(). RooFIter RooAbsCollection::fwdIterator ; (; ); const. One-time forward iterator. ; NoteUse begin() and end() or range-based for loop instead. . ◆ get(). Storage_t const & RooAbsCollection::get ; (; ); const. inline . Const access to the underlying stl container. ; Definition at line 116 of file RooAbsCollection.h. ◆ getCatIndex(). Int_t RooAbsCollection::getCatIndex ; (; const char * ; name, . Int_t ; defVal = 0, . bool ; verbose = false . ); const. Get index value of a RooAbsCategory stored in set with given name. ; If none is found, value of defVal is returned. No error messages are printed unless the verbose flag is set ; Definition at line 1054 of file RooAbsCollection.cxx. ◆ getCatLabel(). const char * RooAbsCollection::getCatLabel ; (; const char * ; name, . const char * ; defVal = """", . bool ; verbose = false . ); const. Get state name of a RooAbsCategory stored in set with given name. ; If none is found, value of defVal is returned. No error messages are printed unless the verbose flag is set ; Definition at line 1011 of file RooAbsCollection.cxx. ◆ getHashTableSize(). Int_t RooAbsCollection::getHashTableSize ; (; ); const. inline . Query the size at which the collection will automatically start using an extra lookup table instead of performing a linear search. ; Definition at line 111 of file RooAbsCollection.h. ◆ GetName(). const char * RooAbsCollection::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 365 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:42629,error,error,42629,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['error'],['error']
Availability,"dObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; TStringTGWidget::fCommandcommand to be executed; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tfIntegralHeighttrue if height should be multiple of fItemVsize; UInt_tfItemVsizemaximum height of single entry; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TGLBContainer*fLbclistbox container; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGVScrollBar*fVScrollbarvertical scrollbar; TGViewPort*fVportlistbox viewport (see TGCanvas.h); Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListBox.html:19177,mask,mask,19177,root/html528/TGListBox.html,https://root.cern,https://root.cern/root/html528/TGListBox.html,4,['mask'],['mask']
Availability,"dObjectNames(const char* name); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearObjectNames(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetCWD(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetMaxOpenedFies() const; TList*GetMergeList() const; const char*GetMsgPrefix() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const char*GetObjectNames() const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TFile*GetOutputFile() const; const char*GetOutputFileName() const; Int_tGetPrintLevel() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileMerger.html:2076,error,error,2076,root/html534/TFileMerger.html,https://root.cern,https://root.cern/root/html534/TFileMerger.html,3,['error'],['error']
Availability,"dOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEstimatorFunction(vector<Double_t>& parameters); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseFitterBase(const TMVA::FitterBase&); TMVA::FitterBaseFitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; Int_tGetNpars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__FitterBase.html:1833,error,error,1833,root/html602/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html602/TMVA__FitterBase.html,2,['error'],['error']
Availability,"dPad(Option_t* option = """"); Int_tAxisChoice(Option_t* axis) const; virtual voidBrowse(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TAttText*GetAttDate(); Color_tGetAxisColor(Option_t* axis = ""X"") const; Float_tGetBarOffset() const; Float_tGetBarWidth() const; Int_tGetCanvasBorderMode() const; Width_tGetCanvasBorderSize() const; Color_tGetCanvasColor() const; Int_tGetCanvasDefH() const; Int_tGetCanvasDefW() const; Int_tGetCanvasDefX() const; Int_tGetCanvasDefY() const; Bool_tGetCanvasPreferGL() const; Int_tGetColorModelPS() const; Int_tGetColorPalette(Int_t i) const; Float_tGetDateX() const; Float_tGetDateY() const; Int_tGetDrawBorder() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyle.html:1912,error,error,1912,root/html528/TStyle.html,https://root.cern,https://root.cern/root/html528/TStyle.html,6,['error'],['error']
Availability,"dPad(Option_t* option = """"); intAt(const Int_t* idx) const; int&At(const Int_t* idx); intAt(ULong64_t linidx) const; int&At(ULong64_t linidx); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTNDArray::GetBin(const Int_t* idx) const; Long64_tTNDArray::GetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tTNDArray::GetNbins() const; Int_tTNDArray::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_int_.html:2162,error,error,2162,root/html534/TNDArrayT_int_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_int_.html,3,['error'],['error']
Availability,"dPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGraph2D::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTGraph2D::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph2D::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph2D::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph2D::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph2D::FindObject(const char* name) const; virtual TObject*TGraph2D::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph2D::Fit(const char* formula, Option_t* option = """", Option_t* goption = """")MENU ; virtual TFitResultPtrTGraph2D::Fit(TF2* f2, Option_t* option = """", Option_t* goption = """")MENU ; virtual voidTGraph2D::FitPanel()MENU ; TList*TGraph2D::GetContourList(Double_t contour); TDirectory*TGraph2D::GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetErrorX(Int_t bin) const; virtual Double_tGetErrorY(Int_t bin) const; virtual Double_tGetErrorZ(Int_t bin) const; virtual Double_t*GetEX() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph2DErrors.html:1629,error,error,1629,root/html528/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html528/TGraph2DErrors.html,3,['error'],['error']
Availability,"dPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual RooSharedProperties*clone(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidRooSharedProperties::decreaseRefCount(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidRooSharedProperties::increaseRefCount(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooCategorySharedProperties.html:1778,error,error,1778,root/html604/RooCategorySharedProperties.html,https://root.cern,https://root.cern/root/html604/RooCategorySharedProperties.html,2,['error'],['error']
Availability,"dPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tGetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual const char*TObject::GetTitle() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyLine.html:2056,error,error,2056,root/html528/TPolyLine.html,https://root.cern,https://root.cern/root/html528/TPolyLine.html,6,['error'],['error']
Availability,"dSetOptions(const ROOT::Math::MinimizerOptions& opt); voidSetPrecision(double prec); voidSetPrintLevel(int level); voidSetStrategy(int strategyLevel); voidSetTolerance(double tol); virtual boolSetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidSetValidError(bool on); virtual boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolSetVariableValue(unsigned int, double); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string&) const; virtual stringVariableName(unsigned int) const; virtual const double*X() const. private:. ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. intfDebugprint level; unsigned intfMaxCallsmax number of function calls ; unsigned intfMaxItermax number or iterations used to find the minimum; doublefPrecprecision; intfStatusstatus of minimizer ; intfStrategyminimizer strategy; doublefToltolerance (absolute); doublefUperror scale ; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~Minimizer(). Destructor (no operations). {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetUpperLimited",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Minimizer.html:4316,error,errors,4316,root/html528/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Minimizer.html,3,['error'],['errors']
Availability,"dTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&TShape::GetBuffer3D(Int_t reqSections) const; virtual Color_tGetColorAttribute() const; virtual TShape*GetConnection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TPoints3DABC*GetMarker() const; virtual Color_tTAttMarker::GetMarkerColor()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyLineShape.html:2090,error,error,2090,root/html528/TPolyLineShape.html,https://root.cern,https://root.cern/root/html528/TPolyLineShape.html,6,['error'],['error']
Availability,"dTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConstrain(Int_t parm, Double_t low, Double_t high); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidErrorAnalysis(Double_t UP); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFit(); Double_tGetChisquare() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TVirtualFitter*GetFitter() const; virtual const char*TObject::GetIconName() const; TH1*GetMCPrediction(Int_t parm) const; virtual const char*TObject::GetName() const; Int_tGetNDF() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1*GetPlot(); Double_tGetProb() const; voidGetResult(Int_t parm, Double_t& value, Double_t& error) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFractionFitter.html:6230,error,error,6230,root/html528/TFractionFitter.html,https://root.cern,https://root.cern/root/html528/TFractionFitter.html,1,['error'],['error']
Availability,"dTObject::AbstractMethod(const char* method) const; voidAdd(TObject* obj); static voidAddObj(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); void*CheckPtrAndWarn(const char* msg, void* vp); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjectTable.html:3359,error,error,3359,root/html528/TObjectTable.html,https://root.cern,https://root.cern/root/html528/TObjectTable.html,6,['error'],['error']
Availability,"dTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; TIterbegin() const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; static voidEmptyGarbageCollection(); TIterend() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tGrowBy(Int_t delta) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollection.html:2569,error,error,2569,root/html534/TCollection.html,https://root.cern,https://root.cern/root/html534/TCollection.html,3,['error'],['error']
Availability,"dTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& box) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBox.html:1702,error,error,1702,root/html526/TBox.html,https://root.cern,https://root.cern/root/html526/TBox.html,4,['error'],['error']
Availability,"dTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& box) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBox.html:1721,error,error,1721,root/html534/TBox.html,https://root.cern,https://root.cern/root/html534/TBox.html,3,['error'],['error']
Availability,"dTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildIdArray(); voidBuildInfoBranch(); Bool_tCdDown(Int_t index); Bool_tCdDown(TGeoNode* node); voidCdNode(Int_t nodeid); voidCdTop(); voidCdUp(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillIdBranch(const Int_t* br, Int_t startlevel = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetBranch() const; voidGetBranchNames(Int_t* names) const; voidGetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; voidGetBranchOnlys(Int_t* isonly) const; TGeoHMatrix*GetCurrentMatrix() const; Int_tGetCurrentNodeId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const Int_t*GetIdBranch() const; TGeoStateInfo*GetInfo(); Int_tGetLevel() const; TGeoStateInfo*GetMakePWInfo(Int_t nd); void*GetMatrices() const; TGeoNode*GetMother(Int_t up = 1) const; TGeoHMatrix*GetMoth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNodeCache.html:1552,error,error,1552,root/html534/TGeoNodeCache.html,https://root.cern,https://root.cern/root/html534/TGeoNodeCache.html,2,['error'],['error']
Availability,"dTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildIdArray(); voidBuildInfoBranch(); Bool_tCdDown(Int_t index); Bool_tCdDown(TGeoNode* node); voidCdNode(Int_t nodeid); voidCdTop(); voidCdUp(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillIdBranch(const Int_t* br, Int_t startlevel = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetBranch() const; voidGetBranchNames(Int_t* names) const; voidGetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; voidGetBranchOnlys(Int_t* isonly) const; TGeoHMatrix*GetCurrentMatrix() const; Int_tGetCurrentNodeId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const Int_t*GetIdBranch() const; TGeoStateInfo*GetInfo(); Int_tGetLevel() const; void*GetMatrices() const; TGeoNode*GetMother(Int_t up = 1) const; TGeoHMatrix*GetMotherMatrix(Int_t up = 1) const; virtual c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNodeCache.html:1460,error,error,1460,root/html602/TGeoNodeCache.html,https://root.cern,https://root.cern/root/html602/TGeoNodeCache.html,1,['error'],['error']
Availability,"dTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsIntegrator*createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*getDepIntegratorName(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const RooAbsIntegrator*getProtoIntegrator(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntFactory.html:1967,error,error,1967,root/html526/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html526/RooNumIntFactory.html,4,['error'],['error']
Availability,"dTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDolly(Int_t delta, Bool_t mod1, Bool_t mod2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGLCamera::DrawDebugAids() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); TGLVector3TGLCamera::EyeDirection() const; TGLVertex3TGLCamera::EyePoint() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLVertex3TGLCamera::FrustumCenter() const; Rgl::EOverlapTGLCamera::FrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&TGLCamera::FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&TGLCamera::GetCamBase() const; const TGLMatrix&TGLCamera::GetCamTrans() const; Double_t*TGLCamera::GetCenterVec(); Bool_tGetDollyToZoom() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetEnableRotate() const; Bool_tTGLCamera::GetExternalCenter(); Double_tTGLCamera::GetFarClip() const; Double_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLOrthoCamera.html:2368,error,error,2368,root/html534/TGLOrthoCamera.html,https://root.cern,https://root.cern/root/html534/TGLOrthoCamera.html,1,['error'],['error']
Availability,"dTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; static Int_tTPoints3DABC::DistancetoLine(Int_t px, Int_t py, Float_t x1, Float_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLastPosition() const; virtual Int_tTPoints3DABC::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual Float_t*TPoints3DABC::GetP() const; virtual void*GetTable(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Float_tGetX(Int_t idx) const; virtual const Float_t*TPoints3DABC::GetXYZ(Int_t idx); virtual Float_t*TPoints3DABC::GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTablePoints.html:2408,error,error,2408,root/html528/TTablePoints.html,https://root.cern,https://root.cern/root/html528/TTablePoints.html,6,['error'],['error']
Availability,"dTObject::Copy(TObject& object) const; virtual TTree*CopyTree(const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawScript(const char* wrapperPrefix, const char* macrofilename, const char* cutfilename, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual Long64_tDrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tFit(const char* formula, const char* varexp, const char* selection, Option_t* option, Option_t* goption, Long64_t nentries, Long64_t firstentry); static TVirtualTreePlayer*TVirtualTreePlayer::GetCurrentPlayer(); virtual Int_tGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntries(const char* selection); virtual Long64_tGetEntriesToProcess(Long64_t firstentry, Long64_t nentries) const; virtual TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual Int_tGetNfill() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:8676,error,error,8676,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,6,['error'],['error']
Availability,"dTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact); Double_t*xvec(Double_t& xx). Data Members; public:. enum SummationRule { Trapezoid; Midpoint; };; enum { _nPoints; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*_c! Integrator workspace; Double_t*_d! Integrator workspace; Bool_t_doExtrapApply conversion step?; Double_t_epsAbsAbsolute convergence tolerance; Double_t_epsRelRelative convergence tolerance; Double_t_extrapError! Error on extrapolated value; Double_t_extrapValue! Extrapolated value; Int_t_fixStepsFixed number of steps ; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Double_t*_h! Integrator workspace; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding, using specified summa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator1D.html:6807,toler,tolerance,6807,root/html528/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator1D.html,2,['toler'],['tolerance']
Availability,"dTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact); Double_t*xvec(Double_t& xx). Data Members; public:. enum SummationRule { Trapezoid; Midpoint; };; enum { _nPoints; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*_c! Integrator workspace; Double_t*_d! Integrator workspace; Bool_t_doExtrapApply conversion step?; Double_t_epsAbsAbsolute convergence tolerance; Double_t_epsRelRelative convergence tolerance; Double_t_extrapError! Error on extrapolated value; Double_t_extrapValue! Extrapolated value; Int_t_fixStepsFixed number of steps ; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Double_t*_h! Integrator workspace; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, SummationRule rule,				 Int_t maxSteps, Double_t eps); Construct integrator on given function binding, using specified summation; rule, maximum number of ste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:6821,toler,tolerance,6821,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,2,['toler'],['tolerance']
Availability,"dTObject::MakeZombie(); static voidregisterIntegrator(RooNumIntFactory& fact); Double_t*xvec(Double_t& xx). Data Members; public:. enum SummationRule { Trapezoid; Midpoint; };; enum { _nPoints; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*_c! Integrator workspace; Double_t*_d! Integrator workspace; Bool_t_doExtrapApply conversion step?; Double_t_epsAbsAbsolute convergence tolerance; Double_t_epsRelRelative convergence tolerance; Double_t_extrapError! Error on extrapolated value; Double_t_extrapValue! Extrapolated value; Int_t_fixStepsFixed number of steps ; const RooAbsFunc*RooAbsIntegrator::_functionPointer to function binding of integrand; Double_t*_h! Integrator workspace; Int_t_maxStepsMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegrator1D.html:6876,toler,tolerance,6876,root/html530/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooIntegrator1D.html,6,['toler'],['tolerance']
Availability,"dTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Bool_tSectionsValid(UInt_t mask) const; voidSetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLocalMasterIdentity(); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); voidSetSectionsValid(UInt_t mask); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tType() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBuffer3D.html:13349,mask,mask,13349,root/html530/TBuffer3D.html,https://root.cern,https://root.cern/root/html530/TBuffer3D.html,2,['mask'],['mask']
Availability,"dTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEmpty(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAlias(); virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; TTVLVContainer*GetContainer(); TGItemContext*GetContext(); const char*GetConvName(); static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGLVEntry::GetDefaultSize() const; virtual UInt_tTGFrame::GetDefaultWidth() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTVLVEntry.html:4016,error,error,4016,root/html602/TTVLVEntry.html,https://root.cern,https://root.cern/root/html602/TTVLVEntry.html,2,['error'],['error']
Availability,"dTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tGetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TServerSocket.html:2290,error,error,2290,root/html530/TServerSocket.html,https://root.cern,https://root.cern/root/html530/TServerSocket.html,5,['error'],['error']
Availability,"dTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tTServerSocket::GetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressTServerSocket::GetLocalInetAddress(); virtual Int_tTServerSoc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPServerSocket.html:2339,error,error,2339,root/html530/TPServerSocket.html,https://root.cern,https://root.cern/root/html530/TPServerSocket.html,5,['error'],['error']
Availability,"dTerminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TApplication(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static voidClose(TApplication* app); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidHelp(const char* line); virtual voidLoadGraphicsLibs(); virtual voidMakeBatch(); voidTObject::MakeZombie(); static TApplication*Open(const char* url, Int_t debug, const char* script); static Int_tParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tProcessRemote(const char* line, Int_t* error = 0); voidSetSignalHandler(TSignalHandler* sh). private:. TApplication(const TApplication&); TApplication&operator=(const TApplication&). Data Members; public:. enum EStatusBits { kProcessRemotely; kDefaultApplication; };; enum EExitOnException { kDontExit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplication.html:10393,error,error,10393,root/html528/TApplication.html,https://root.cern,https://root.cern/root/html528/TApplication.html,4,['error'],['error']
Availability,"dTerminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TApplication(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static voidClose(TApplication* app); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidHelp(const char* line); virtual voidLoadGraphicsLibs(); virtual voidMakeBatch(); voidTObject::MakeZombie(); static TApplication*Open(const char* url, Int_t debug, const char* script); static Int_tParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tProcessRemote(const char* line, Int_t* error = 0); voidSetSignalHandler(TSignalHandler* sh). private:. TApplication(const TApplication&); TApplication&operator=(const TApplication&). Data Members; public:. enum EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*fAppRemot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:10316,error,error,10316,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,1,['error'],['error']
Availability,"dToGlobList=EAddToList::kDefault)Definition TF1.h:428; TF1::Integralvirtual Double_t Integral(Double_t a, Double_t b, Double_t epsrel=1.e-12)IntegralOneDim or analytical integral.Definition TF1.cxx:2531; TF1::SetTitlevoid SetTitle(const char *title="""") overrideSet function title if title has the form ""fffffff;xxxx;yyyy"", it is assumed that the function title i...Definition TF1.cxx:3558; TF1::GetNumberFitPointsvirtual Int_t GetNumberFitPoints() constDefinition TF1.h:531; TF1::fFormulastd::unique_ptr< TFormula > fFormulaPointer to TFormula in case when user define formula.Definition TF1.h:288; TF1::SetParNamesvirtual void SetParNames(const char *name0="""", const char *name1="""", const char *name2="""", const char *name3="""", const char *name4="""", const char *name5="""", const char *name6="""", const char *name7="""", const char *name8="""", const char *name9="""", const char *name10="""")Set up to 10 parameter names.Definition TF1.cxx:3463; TF1::DerivativeErrorstatic Double_t DerivativeError()Static function returning the error of the last call to the of Derivative's functions.Definition TF1.cxx:1277; TF1::fParMinstd::vector< Double_t > fParMinArray of lower limits of the fNpar parameters.Definition TF1.h:275; TF1::InitStandardFunctionsstatic void InitStandardFunctions()Create the basic function objects.Definition TF1.cxx:2497; TF1::fMaximumDouble_t fMaximumMaximum value for plotting.Definition TF1.h:273; TF1::SetNpxvirtual void SetNpx(Int_t npx=100)Set the number of points used to draw the function.Definition TF1.cxx:3433; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::fMinimumDouble_t fMinimumMinimum value for plotting.Definition TF1.h:272; TF1::TermCoeffLengthint TermCoeffLength(TString &term)Definition TF1.cxx:924; TF1::fgRejectPointstatic Bool_t fgRejectPointDefinition TF1.h:325; TF1::Copyvoid Copy(TObject &f1) const overrideCopy this F1 to a new F1.Definition TF1.cxx:1005; TF1::SetNumberFitPointsvirtual void SetNumberFitPoints(Int_t npfits)De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:56229,error,error,56229,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,1,['error'],['error']
Availability,"dUniform(). void RooBinning::addUniform ; (; Int_t ; nBins, . double ; xlo, . double ; xhi . ). Add array of nbins uniformly sized bins in range [xlo,xhi]. ; Definition at line 156 of file RooBinning.cxx. ◆ array(). double * RooBinning::array ; (; ); const. overridevirtual . Return array of boundary values. ; Implements RooAbsBinning.; Definition at line 202 of file RooBinning.cxx. ◆ averageBinWidth(). double RooBinning::averageBinWidth ; (; ); const. inlineoverridevirtual . Return the average bin width. ; Implements RooAbsBinning.; Definition at line 57 of file RooBinning.h. ◆ binCenter(). double RooBinning::binCenter ; (; Int_t ; bin); const. overridevirtual . Return the position of the center of bin 'bin'. ; Implements RooAbsBinning.; Definition at line 267 of file RooBinning.cxx. ◆ binEdges(). bool RooBinning::binEdges ; (; Int_t ; bin, . double & ; xlo, . double & ; xhi . ); const. protected . Return upper and lower bound of bin 'bin'. ; If the return value is true an error occurred ; Definition at line 254 of file RooBinning.cxx. ◆ binHigh(). double RooBinning::binHigh ; (; Int_t ; bin); const. overridevirtual . Return the upper bound of the requested bin. ; Implements RooAbsBinning.; Definition at line 300 of file RooBinning.cxx. ◆ binLow(). double RooBinning::binLow ; (; Int_t ; bin); const. overridevirtual . Return the lower bound of the requested bin. ; Implements RooAbsBinning.; Definition at line 289 of file RooBinning.cxx. ◆ binNumbers(). void RooBinning::binNumbers ; (; double const * ; x, . int * ; bins, . std::size_t ; n, . int ; coef . ); const. overridevirtual . Return sequential bin number that contains value x where bin zero is the first bin with an upper boundary above the lower bound of the range. ; Implements RooAbsBinning.; Definition at line 181 of file RooBinning.cxx. ◆ binWidth(). double RooBinning::binWidth ; (; Int_t ; bin); const. overridevirtual . Return the width of the requested bin. ; Implements RooAbsBinning.; Definition at line 278",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinning.html:21383,error,error,21383,doc/master/classRooBinning.html,https://root.cern,https://root.cern/doc/master/classRooBinning.html,1,['error'],['error']
Availability,"d_Macro; 2747 ; 2748The option `nostackb` allows to draw the histograms next to each; 2749other as bar charts:; 2750 ; 2751Begin_Macro(source); 2752{; 2753 auto cst0 = new TCanvas(""cst0"",""cst0"",600,400);; 2754 auto hs = new THStack(""hs"",""Stacked 1D histograms: option #font[82]{\""nostackb\""}"");; 2755 ; 2756 auto h1 = new TH1F(""h1"",""h1"",10,-4,4);; 2757 h1->FillRandom(""gaus"",20000);; 2758 h1->SetFillColor(kRed);; 2759 hs->Add(h1);; 2760 ; 2761 auto h2 = new TH1F(""h2"",""h2"",10,-4,4);; 2762 h2->FillRandom(""gaus"",15000);; 2763 h2->SetFillColor(kBlue);; 2764 hs->Add(h2);; 2765 ; 2766 auto h3 = new TH1F(""h3"",""h3"",10,-4,4);; 2767 h3->FillRandom(""gaus"",10000);; 2768 h3->SetFillColor(kGreen);; 2769 hs->Add(h3);; 2770 ; 2771 hs->Draw(""nostackb"");; 2772 hs->GetXaxis()->SetNdivisions(-10);; 2773 cst0->SetGridx();; 2774}; 2775End_Macro; 2776 ; 2777If at least one of the histograms in the stack has errors, the whole stack is; 2778visualized by default with error bars. To visualize it without errors the; 2779option `HIST` should be used.; 2780 ; 2781Begin_Macro(source); 2782{; 2783 auto cst1 = new TCanvas(""cst1"",""cst1"",700,400);; 2784 cst1->Divide(2,1);; 2785 ; 2786 auto hst11 = new TH1F(""hst11"", """", 20, -10, 10);; 2787 hst11->Sumw2();; 2788 hst11->FillRandom(""gaus"", 1000);; 2789 hst11->SetFillColor(kViolet);; 2790 hst11->SetLineColor(kViolet);; 2791 ; 2792 auto hst12 = new TH1F(""hst12"", """", 20, -10, 10);; 2793 hst12->FillRandom(""gaus"", 500);; 2794 hst12->SetFillColor(kBlue);; 2795 hst12->SetLineColor(kBlue);; 2796 ; 2797 THStack st1(""st1"", ""st1"");; 2798 st1.Add(hst11);; 2799 st1.Add(hst12);; 2800 ; 2801 cst1->cd(1); st1.Draw();; 2802 cst1->cd(2); st1.Draw(""hist"");; 2803}; 2804End_Macro; 2805 ; 2806\anchor HP27; 2807### Drawing of 3D implicit functions; 2808 ; 2809 ; 28103D implicit functions (`TF3`) can be drawn as iso-surfaces.; 2811The implicit function f(x,y,z) = 0 is drawn in cartesian coordinates.; 2812In the following example the options ""FB"" and ""BB"" suppress the; 2813""Front ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:111405,error,errors,111405,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['errors']
Availability,"daptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); unsigned intNEval() const; ROOT::Math::VirtualIntegratorMultiDim&ROOT::Math::VirtualIntegratorMultiDim::operator=(const ROOT::Math::VirtualIntegratorMultiDim&); doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); virtual voidSetRelTolerance(double relTol); virtual intStatus() const. Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error ; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function ; unsigned intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result ; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int size = 100000). construct given optionally tolerance (absolute and relative) and maximum size of working array; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000). construct with a reference to the integrand function and given optionally; tolerance (absolute and relative) and maximum size of working array. virtual ~AdaptiveInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html:1921,toler,tolerance,1921,root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,5,"['error', 'toler']","['error', 'tolerance']"
Availability,"data member fL. Int_t RegularizeCurvature(int left_bin, int center_bin, int right_bin, Double_t scale_left = 1.0, Double_t scale_right = 1.0); add regularisation on the curvature through 3 bins (2nd derivative); left_bin: 1st bin; center_bin: 2nd bin; right_bin: 3rd bin; scale_left: scale factor on center-left difference; scale_right: scale factor on right-center difference; return value: number of conditions which have been skipped; modifies data member fL. Int_t RegularizeBins(int start, int step, int nbin, TUnfold::ERegMode regmode); set regulatisation on a 1-dimensional curve; start: first bin; step: distance between neighbouring bins; nbin: total number of bins; regmode: regularisation mode; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fL. Int_t RegularizeBins2D(int start_bin, int step1, int nbin1, int step2, int nbin2, TUnfold::ERegMode regmode); set regularisation on a 2-dimensional grid of bins; start: first bin; step1: distance between bins in 1st direction; nbin1: number of bins in 1st direction; step2: distance between bins in 2nd direction; nbin2: number of bins in 2nd direction; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fL. Double_t DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); Do unfolding of an input histogram; tau_reg: regularisation parameter; input: input distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fL; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0, const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); Define the input data for subsequent calls to DoU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:24393,error,errors,24393,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,1,['error'],['errors']
Availability,"data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooBrentRootFinder. class RooBrentRootFinder: public RooAbsRootFinder. Implement the abstract 1-dimensional root finding interface using; the Brent-Decker method. This implementation is based on the one; in the GNU scientific library (v0.99).; . Function Members (Methods); public:. virtual~RooBrentRootFinder(); static TClass*Class(); virtual Bool_tfindRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; virtual TClass*IsA() const; RooBrentRootFinder&operator=(const RooBrentRootFinder&); RooBrentRootFinder(const RooAbsFunc& function); RooBrentRootFinder(const RooBrentRootFinder&); voidsetTol(Double_t tol); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. static RooBrentRootFinder::(anonymous)MaxIterations; const RooAbsFunc*RooAbsRootFinder::_functionPointer to input function; Double_t_tol; Bool_tRooAbsRootFinder::_validTrue if current state is valid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBrentRootFinder(const RooAbsFunc& function); Constructor taking function binding as input. Bool_t findRoot(Double_t& result, Double_t xlo, Double_t xhi, Double_t value = 0) const; Do the root finding using the Brent-Decker method. Returns a boolean status and; loads 'result' with our best guess at the root if true.; Prints a warning if the initial interval does not bracket a single; root or if the root is not found after a fixed number of iterations. RooBrentRootFinder(const RooAbsFunc& function). virtual ~RooBrentRootFinder(); { }. void setTol(Double_t tol); Set convergence tolerance parameter. » Last changed: Tue Jun 30 14:31:13 2015 » Last generated: 2015-06-30 14:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBrentRootFinder.html:1948,toler,tolerance,1948,root/html602/RooBrentRootFinder.html,https://root.cern,https://root.cern/root/html602/RooBrentRootFinder.html,1,['toler'],['tolerance']
Availability,"data with only value (no errors). void Add(const double* x, double val, double eval). add multi-dim coordinate data with only error in value. void Add(const double* x, double val, const double* ex, double eval). add multi-dim coordinate data with both error in coordinates and value. void Add(const double* x, double val, const double* ex, double elval, double ehval). add multi-dim coordinate data with both error in coordinates and value. const double * Coords(unsigned int ipoint) const. return a pointer to the coordinates data for the given fit point. double Value(unsigned int ipoint) const. return the value for the given fit point. double Error(unsigned int ipoint) const. return error on the value for the given fit point; Safe (but slower) method returning correctly the error on the value; in case of asymm errors return the average 0.5(eu + el). double InvError(unsigned int ipoint) const. Return the inverse of error on the value for the given fit point; useful when error in the coordinates are not stored and then this is used directly this as the weight in; the least square function. const double * CoordErrors(unsigned int ipoint) const. Return a pointer to the errors in the coordinates for the given fit point. const double * GetPoint(unsigned int ipoint, double& value) const. retrieve at the same time a pointer to the coordinate data and the fit value; More efficient than calling Coords(i) and Value(i). const double * GetPoint(unsigned int ipoint, double& value, double& invError) const. retrieve in a single call a pointer to the coordinate data, value and inverse error for; the given fit point.; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; for the error. const double * GetPointError(unsigned int ipoint, double& errvalue) const. Retrieve the errors on the point (coordinate and value) for the given fit point; It must be called only when the coordinate errors are stored otherwise it will produce an; assert. const doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__BinData.html:9969,error,error,9969,root/html528/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__BinData.html,12,['error'],['error']
Availability,"data, RooStats::ModelConfig& model); RooStats::BayesianCalculatorBayesianCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& POI, RooAbsPdf& priorPOI, const RooArgSet* nuisanceParameters = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual RooStats::SimpleInterval*GetInterval() const; doubleGetMode() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooAbsReal*GetPosteriorFunction() const; RooAbsPdf*GetPosteriorPdf() const; RooPlot*GetPosteriorPlot(bool norm = false, double precision = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BayesianCalculator.html:1806,error,error,1806,root/html528/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__BayesianCalculator.html,2,['error'],['error']
Availability,"data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the Markov chain; By default all the parameters are stored. { fChainParams.removeAll(); fChainParams.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. {fConditionalObs.removeAll(); fConditionalObs.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetProposalFunction(RooStats::ProposalFunction& proposalFunction); set the proposal function for suggesting new points for the MCMC. { fPropFunc = &proposalFunction; }. void SetNumIters(Int_t numIters); set the number of iterations to run the metropolis algorithm. { fNumIters = numIters; }. void SetNumBurnInSteps(Int_t numBurnInSteps); set the number of steps in the chain to discard as burn-in,; starting from the first. { fNumBurnInSteps = numBurnInSteps; }. void SetNumBins(Int_t numBins); set the number of bins to create for each axis when constructing the interval. { fNumBins = numBins; }. void SetAxes(RooArgList& axes); set which variables to put on each axis. { fAxes = &axes; }. void SetUseKeys(Bool_t useKeys); set whether to use kernel estima",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MCMCCalculator.html:10521,error,error,10521,root/html534/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__MCMCCalculator.html,3,['error'],['error']
Availability,"dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:38781,error,error,38781,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,12,['error'],['error']
Availability,date contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:40288,error,errors,40288,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,1,['error'],['errors']
Availability,"date the new value specified in the Fill argument. The method; used is to double the bin size until the new value fits in the range,; merging bins two by two. This automatic binning options is extensively; used by the TTree::Draw function when histogramming Tree variables; with an unknown range.; This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents.; Rebinning; At any time, an histogram can be rebinned via TH1::Rebin. This function; returns a new histogram with the rebinned contents.; If bin errors were stored, they are recomputed during the rebinning.; Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:. Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given an histogram h, one can retrieve an associated function; with:. TF1 *myfunc = h->GetFunction(""myfunc"");. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of an histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current; histogram.; Multiplications and Division",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:9719,error,errors,9719,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['error'],['errors']
Availability,"date(); update the whole window of text view. Long_t ReturnLongestLineWidth(); Return width of longest line. Bool_t Search(const char* string, Bool_t direction, Bool_t caseSensitive); Search for string in text. If direction is true search forward.; Returns true if string is found. void SetFont(FontStruct_t font); Changes text entry font. Long_t ToScrYCoord(Long_t yCoord); Convert line number to screen coordinate. Long_t ToScrXCoord(Long_t xCoord, Long_t line); Convert column number in specified line to screen coordinate. Long_t ToObjYCoord(Long_t yCoord); Convert y screen coordinate to line number. Long_t ToObjXCoord(Long_t xCoord, Long_t line); Convert x screen coordinate to column in specified line. void Clear(Option_t* = """"); Clear text view widget. Bool_t LoadFile(const char* fname, long startpos = 0, long length = -1); Load a file in the text view widget. Return false in case file does not; exist. Bool_t LoadBuffer(const char* txtbuf); Load text from a text buffer. Return false in case of failure. Bool_t Copy(); Copy selected text to clipboard. Bool_t SelectAll(); Select all text in the viewer. void DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); Draw lines in exposed region. Bool_t HandleCrossing(Event_t* event); Handle mouse crossing event. Bool_t HandleTimer(TTimer* t); Handle scroll timer. Bool_t HandleButton(Event_t* event); Handle mouse button event in text editor. Bool_t HandleDoubleClick(Event_t* event); handle double click. Bool_t HandleMotion(Event_t* event); Handle mouse motion event in the text editor widget. Bool_t HandleSelectionClear(Event_t* event); Handle selection clear event. Bool_t HandleSelectionRequest(Event_t* event); Handle request to send current clipboard contents to requestor window. Bool_t HandleDNDDrop(TDNDData* data); Handle Drop event. Atom_t HandleDNDPosition(Int_t x, Int_t y, Atom_t action, Int_t xroot, Int_t yroot); Handle Drag position event. Atom_t HandleDNDEnter(Atom_t* typelist); Handle Drag Enter event. Bool_t HandleDNDLe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextView.html:26167,failure,failure,26167,root/html528/TGTextView.html,https://root.cern,https://root.cern/root/html528/TGTextView.html,6,['failure'],['failure']
Availability,"date();; ; TCanvas *c2 = new TCanvas(""c2"",""contours"",10,10,600,800);; c2->Divide(1,2);; c2->cd(1);; /*get first contour for parameter 1 versus parameter 2*/; TGraph *gr12 = (TGraph*)gMinuit->Contour(40,1,2);; gr12->Draw(""alp"");; c2->cd(2);; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=2*/; gMinuit->SetErrorDef(4); //note 4 and not 2!; TGraph *gr2 = (TGraph*)gMinuit->Contour(80,0,2);; gr2->SetFillColor(42);; gr2->Draw(""alf"");; /*Get contour for parameter 0 versus parameter 2 for ERRDEF=1*/; gMinuit->SetErrorDef(1);; TGraph *gr1 = (TGraph*)gMinuit->Contour(80,0,2);; gr1->SetFillColor(38);; gr1->Draw(""lf"");; }; h#define h(i)Definition RSha256.hxx:106; TCanvas.h; TGraph.h; TH1F.h; TMinuit.h; gMinuitR__EXTERN TMinuit * gMinuitDefinition TMinuit.h:271; TVirtualFitter.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TMinuit::SetErrorDefvirtual Int_t SetErrorDef(Double_t up)To get the n-sigma contour the error def parameter ""up"" has to set to n^2.Definition TMinuit.cxx:908; TMinuit::Contourvirtual TObject * Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)Creates a TGraph object describing the n-sigma contour of a TMinuit fit.Definition TMinuit.cxx:653; TVirtualFitter::SetDefaultFitterstatic void SetDefaultFitter(const char *name="""")static: set name of default fitterDefinition TVirtualFitter.cxx:245; c1return c1Definition legend1.C:41; c2return c2Definition legend2.C:14; AuthorRene Brun ; Definition in file fitcont.C. tutorialsfitfitcont.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitcont_8C.html:2620,error,error,2620,doc/master/fitcont_8C.html,https://root.cern,https://root.cern/doc/master/fitcont_8C.html,1,['error'],['error']
Availability,"dates are available on; http://www.desy.de/~sschmitt. The following sources of systematic error are considered in TUnfoldSys. (a) uncorrelated errors on the input matrix histA, taken as the; errors provided with the histogram.; These are typically statistical errors from finite Monte Carlo samples. (b) correlated shifts of the input matrix histA. These shifts are taken; as one-sigma effects when switchig on a given error soure.; several such error sources may be defined. (c) a systematic error on the regularisation parameter tau. (d) uncorrelated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. In addition there is the (statistical) uncertainty of the input vector (i). Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:1813,error,errors,1813,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,3,['error'],['errors']
Availability,"dation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void ReleaseUnderlying ();  To release any existing document. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; _xmlParserCtxt * fContext;  Parse the xml file. ;  ; Int_t fParseCode;  To keep track of the errorcodes. ;  ; Bool_t fReplaceEntities;  Replace entities. ;  ; Bool_t fStopError;  Stop when parse error occurs. ;  ; Bool_t fValidate;  To validate the parse context. ;  ; TString fValidateError;  Parse error. ;  ; TString fValidateWarning;  Parse warning. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TXMLParser (const TXMLParser &)=delete;  ; TXMLParser & operator= (const TXMLParser &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:14410,error,error,14410,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['error'],['error']
Availability,"dbox path from ' Proof.Sandbox' or the alternative var 'rc'.; Use the existing setting or the default if nothing is found.; If 'assert' is kTRUE, make also sure that the path exists.; Return 0 on success, -1 on failure. void ParseConfigField(const char* config); The config file field may contain special instructions which need to be; parsed at the beginning, e.g. for debug runs with valgrind. Int_t AssertPath(const char* path, Bool_t writable); Make sure that 'path' exists; if 'writable' is kTRUE, make also sure; that the path is writable. void SetManager(TProofMgr* mgr); Set manager and schedule its destruction after this for clean; operations. Int_t AddWorkers(TList* wrks); Works on the master node only.; It starts workers on the machines in workerList and sets the paths,; packages and macros as on the master.; It is a subbstitute for StartSlaves(...); The code is mostly the master part of StartSlaves,; with the parallel startup removed. Int_t RemoveWorkers(TList* wrks); Used for shuting down the workres after a query is finished.; Sends each of the workers from the workerList, a kPROOF_STOP message.; If the workerList == 0, shutdown all the workers. Bool_t StartSlaves(Bool_t attach = kFALSE); Start up PROOF slaves. void Close(Option_t* option = """"); Close all open slave servers.; Client can decide to shutdown the remote session by passing option is 'S'; or 's'. Default for clients is detach, if supported. Masters always; shutdown the remote counterpart. TSlave * CreateSlave(const char* url, const char* ord, Int_t perf, const char* image, const char* workdir); Create a new TSlave of type TSlave::kSlave.; Note: creation of TSlave is private with TProof as a friend.; Derived classes must use this function to create slaves. TSlave * CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd); Create a new TSlave of type TSlave::kMaster.; Note: creation of TSlave is private with TProof as a friend.; Derived classes must use this function to cr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:34602,down,down,34602,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['down'],['down']
Availability,"dcastGroupPriority ; (; const char * ; grp, . Int_t ; priority, . TList * ; workers . ). private . Broadcast the group priority to all workers in the specified list. ; Returns the number of workers the message was successfully sent to. Returns -1 in case of error. ; Definition at line 2424 of file TProof.cxx. ◆ BroadcastObject() [1/2]. Int_t TProof::BroadcastObject ; (; const TObject * ; obj, . Int_t ; kind, . TList * ; slaves . ). private . Broadcast an object to all slaves in the specified list. ; Use kind to set the TMEssage what field. Returns the number of slaves the message was sent to. Returns -1 in case of error. ; Definition at line 2543 of file TProof.cxx. ◆ BroadcastObject() [2/2]. Int_t TProof::BroadcastObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT, . ESlaves ; list = kActive . ). private . Broadcast an object to all slaves in the specified list. ; Use kind to set the TMEssage what field. Returns the number of slaves the message was sent to. Returns -1 in case of error. ; Definition at line 2555 of file TProof.cxx. ◆ BroadcastRaw() [1/2]. Int_t TProof::BroadcastRaw ; (; const void * ; buffer, . Int_t ; length, . ESlaves ; list = kActive . ). private . Broadcast a raw buffer of specified length to all slaves in the specified list. ; Returns the number of slaves the buffer was sent to. Returns -1 in case of error. ; Definition at line 2594 of file TProof.cxx. ◆ BroadcastRaw() [2/2]. Int_t TProof::BroadcastRaw ; (; const void * ; buffer, . Int_t ; length, . TList * ; slaves . ). private . Broadcast a raw buffer of specified length to all slaves in the specified list. ; Returns the number of slaves the buffer was sent to. Returns -1 in case of error. ; Definition at line 2567 of file TProof.cxx. ◆ Browse(). void TProof::Browse ; (; TBrowser * ; b). overridevirtual . Build the PROOF's structure in the browser. ; Reimplemented from TObject.; Definition at line 10179 of file TProof.cxx. ◆ BuildPackage(). Int_t TProof::BuildPackage ; (; const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:70542,error,error,70542,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"dd a column holding objects; 157 ; 158~~~ {.cpp}; 159 MyClass object;; 160 auto branch = tree.Branch(branchname, &object, bufsize, splitlevel); 161~~~; 162Note: The 2nd parameter must be the address of a valid object.; 163 The object must not be destroyed (i.e. be deleted) until the TTree; 164 is deleted or TTree::ResetBranchAddress is called.; 165 ; 166- if splitlevel=0, the object is serialized in the branch buffer.; 167- if splitlevel=1 (default), this branch will automatically be split; 168 into subbranches, with one subbranch for each data member or object; 169 of the object itself. In case the object member is a TClonesArray,; 170 the mechanism described in case C is applied to this array.; 171- if splitlevel=2 ,this branch will automatically be split; 172 into subbranches, with one subbranch for each data member or object; 173 of the object itself. In case the object member is a TClonesArray,; 174 it is processed as a TObject*, only one branch.; 175 ; 176Another available syntax is the following:; 177 ; 178~~~ {.cpp}; 179 auto branch = tree.Branch(branchname, &p_object, bufsize, splitlevel); 180 auto branch = tree.Branch(branchname, className, &p_object, bufsize, splitlevel); 181~~~; 182- p_object is a pointer to an object.; 183- If className is not specified, Branch uses the type of p_object to determine the; 184 type of the object.; 185- If className is used to specify explicitly the object type, the className must; 186 be of a type related to the one pointed to by the pointer. It should be either; 187 a parent or derived class.; 188 ; 189Note: The pointer whose address is passed to TTree::Branch must not; 190 be destroyed (i.e. go out of scope) until the TTree is deleted or; 191 TTree::ResetBranchAddress is called.; 192 ; 193Note: The pointer p_object must be initialized before calling TTree::Branch; 194- Do either:; 195~~~ {.cpp}; 196 MyDataClass* p_object = nullptr;; 197 tree.Branch(branchname, &p_object);; 198~~~; 199- Or:; 200~~~ {.cpp}; 201 auto p_obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:9237,avail,available,9237,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['avail'],['available']
Availability,"dd one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ; Definition at line 428 of file BinData.cxx. ◆ AddBinUpEdge(). void ROOT::Fit::BinData::AddBinUpEdge ; (; const double * ; xup). add the bin width data, a pointer to an array with the bin upper edge information. ; This is needed when fitting with integral options The information is added for the previously inserted point. BinData::Add must be called before; This is needed when fitting with integral or Bin volume normalization options The information is added for the previously inserted point. BinData::Add must be called before ; Definition at line 613 of file BinData.cxx. ◆ Append(). void ROOT::Fit::BinData::Append ; (; unsigned int ; newPoints, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). Equivalent to Initialize() ; preallocate a data set with given size , dimension and error type (to get the full point size) If the data set already exists and it is having the compatible point size space for the new points is created in the data sets, while if not compatible the old data are erased and new space of new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints) ; Definition at line 320 of file BinData.cxx. ◆ BinUpEdge(). const double * ROOT::Fit::BinData::BinUpEdge ; (; unsigned int ; ipoint); const. inline . return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ; Definition at line 519 of file BinData.h. ◆ ComputeSums(). void ROOT::Fit::BinData::ComputeSums ; (; ). protected . Definition at line 814 of file BinData.cxx. ◆ CoordErrors(). const double * ROOT::Fit::BinData::CoordErrors ; (; unsigned int ; ipoint); const. inline . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:19804,error,error,19804,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['error']
Availability,"ddBinUpEdge(const double *xup)add the bin width data, a pointer to an array with the bin upper edge information.Definition BinData.cxx:613; ROOT::Fit::BinData::BinUpEdgeconst double * BinUpEdge(unsigned int ipoint) constreturn an array containing the upper edge of the bin for coordinate i In case of empty bin they could...Definition BinData.h:519; ROOT::Fit::BinData::fDataErrorLowPtrconst double * fDataErrorLowPtrDefinition BinData.h:625; ROOT::Fit::BinData::fDataErrorHighstd::vector< double > fDataErrorHighDefinition BinData.h:621; ROOT::Fit::BinData::InvErrordouble InvError(unsigned int ipoint) constReturn the inverse of error on the value for the given fit point useful when error in the coordinates...Definition BinData.h:325; ROOT::Fit::BinData::LogTransformBinData & LogTransform()apply a Log transformation of the data values can be used for example when fitting an exponential or ...Definition BinData.cxx:349; ROOT::Fit::BinData::IsWeightedbool IsWeighted() constreturn true if the data set is weighted We cannot compute ourselves because sometimes errors are fill...Definition BinData.h:584; ROOT::Fit::BinData::ErrorPtrconst double * ErrorPtr(unsigned int ipoint) constReturn a pointer to the error (or the inverse error) on the value for a given point depending on the ...Definition BinData.h:249; ROOT::Fit::BinData::fErrorTypeErrorType fErrorTypeDefinition BinData.h:602; ROOT::Fit::BinData::fpTmpCoordErrorVectordouble * fpTmpCoordErrorVectornot threadsafe stuff!Definition BinData.h:629; ROOT::Fit::BinData::Valuedouble Value(unsigned int ipoint) constreturn the value for the given fit pointDefinition BinData.h:220; ROOT::Fit::BinData::InitDataVectorvoid InitDataVector()Definition BinData.cxx:645; ROOT::Fit::BinData::SetRefVolumevoid SetRefVolume(double value)set the reference volume used to normalize the data when the option bin volume is setDefinition BinData.h:557; ROOT::Fit::BinData::fIsWeightedbool fIsWeightedflag to indicate weighted dataDefinition BinData.h:603",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:26296,error,errors,26296,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['error'],['errors']
Availability,"ddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeGetExpDate() const; const char*GetHost() const; virtual const char*TObject::GetIconName() const; const char*GetID() const; Int_tGetMethod() const; const char*GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tGetOffSet() const; virtual Option_t*TObject::GetOption() const; TList*GetSecContextCleanup() const; virtual const char*TObject::GetTitle() const; const char*GetToken() const; virtual UInt_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSecContext.html:1788,error,error,1788,root/html528/TSecContext.html,https://root.cern,https://root.cern/root/html528/TSecContext.html,6,['error'],['error']
Availability,"ddForCleanup(Int_t port, Int_t proto, Int_t type); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*AsString(TString& out); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDeActivate(Option_t* opt = ""CR""); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*TSecContext::GetContext() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TDatimeTSecContext::GetExpDate() const; const char*TSecContext::GetHost() const; virtual const char*TObject::GetIconName() const; const char*TSecContext::GetID() const; Int_tTSecContext::GetMethod() const; const char*TSecContext::GetMethodName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Int_tTSecContext::GetOffSet() const; virtual Option_t*TObject::GetOption() const; Int_tGetRSAKey() const; TList*TSecC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootSecContext.html:1869,error,error,1869,root/html528/TRootSecContext.html,https://root.cern,https://root.cern/root/html528/TRootSecContext.html,6,['error'],['error']
Availability,"de ""TH1.h""; #include ""TVirtualFitter.h""; #include ""TRandom.h""; ; void ConfidenceIntervals(); {; TCanvas *myc = new TCanvas(""myc"",; ""Confidence intervals on the fitted function"",1000, 500);; myc->Divide(3,1);; ; //### 1. A graph; //Create and fill a graph; int ngr = 100;; TGraph *gr = new TGraph(ngr);; gr->SetName(""GraphNoError"");; double x, y;; int i;; for (i=0; i<ngr; i++){; x = gRandom->Uniform(-1, 1);; y = -1 + 2*x + gRandom->Gaus(0, 1);; gr->SetPoint(i, x, y);; }; //Create the fitting function; TF1 *fpol = new TF1(""fpol"", ""pol1"", -1, 1);; fpol->SetLineWidth(2);; gr->Fit(fpol, ""Q"");; ; /*Create a TGraphErrors to hold the confidence intervals*/; TGraphErrors *grint = new TGraphErrors(ngr);; grint->SetTitle(""Fitted line with .95 conf. band"");; for (i=0; i<ngr; i++); grint->SetPoint(i, gr->GetX()[i], 0);; /*Compute the confidence intervals at the x points of the created graph*/; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(grint);; //Now the ""grint"" graph contains function values as its y-coordinates; //and confidence intervals as the errors on these coordinates; //Draw the graph, the function and the confidence intervals; myc->cd(1);; grint->SetLineColor(kRed);; grint->Draw(""ap"");; gr->SetMarkerStyle(5);; gr->SetMarkerSize(0.7);; gr->Draw(""psame"");; ; //### 2. A histogram; myc->cd(2);; //Create, fill and fit a histogram; int nh=5000;; TH1D *h = new TH1D(""h"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; h->FillRandom(""gaus"", nh);; TF1 *f = new TF1(""fgaus"", ""gaus"", -3, 3);; f->SetLineWidth(2);; h->Fit(f, ""Q"");; h->Draw();; ; /*Create a histogram to hold the confidence intervals*/; TH1D *hint = new TH1D(""hint"",; ""Fitted Gaussian with .95 conf.band"", 100, -3, 3);; (TVirtualFitter::GetFitter())->GetConfidenceIntervals(hint);; //Now the ""hint"" histogram has the fitted function values as the; //bin contents and the confidence intervals as bin errors; hint->SetStats(false);; hint->SetFillColor(2);; hint->Draw(""e3 same"");; ; //### 3. A 2d graph; //Create an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ConfidenceIntervals_8C.html:1509,error,errors,1509,doc/master/ConfidenceIntervals_8C.html,https://root.cern,https://root.cern/doc/master/ConfidenceIntervals_8C.html,1,['error'],['errors']
Availability,"de * GetNextNode () const;  ; Int_t GetNmany () const;  ; Int_t GetNNodes ();  ; TGeoNode * GetNode (Int_t level) const;  ; Int_t GetNodeId () const;  ; const Double_t * GetNormal () const;  ; Int_t GetNproperties () const;  ; int GetNregions () const;  ; Int_t GetNsegments () const;  Get number of segments approximating circles. ;  ; Int_t GetNtracks () const;  ; TGeoOpticalSurface * GetOpticalSurface (const char *name) const;  Get optical surface with a given name;. ;  ; TVirtualGeoPainter * GetPainter () const;  ; TGeoVolume * GetPaintVolume () const;  ; TGeoParallelWorld * GetParallelWorld () const;  ; TVirtualGeoTrack * GetParentTrackOfId (Int_t id) const;  Get parent track with a given ID. ;  ; const char * GetParticleName () const;  ; const char * GetPath () const;  Get path to the current node in the form /node0/node1/... ;  ; const char * GetPdgName (Int_t pdg) const;  Get name for given pdg code;. ;  ; TGeoPhysicalNode * GetPhysicalNode (Int_t i) const;  ; Double_t GetProperty (const char *name, Bool_t *error=nullptr) const;  Get a user-defined property. ;  ; Double_t GetProperty (size_t i, TString &name, Bool_t *error=nullptr) const;  Get a user-defined property from a given index. ;  ; TGeoRegion * GetRegion (int i);  ; Int_t GetRTmode () const;  ; Double_t GetSafeDistance () const;  ; Int_t GetSafeLevel () const;  Go upwards the tree until a non-overlapping node. ;  ; TGeoSkinSurface * GetSkinSurface (const char *name) const;  Get skin surface with a given name;. ;  ; Int_t GetStackLevel () const;  ; Double_t GetStep () const;  ; Double_t GetTmax () const;  ; Bool_t GetTminTmax (Double_t &tmin, Double_t &tmax) const;  Get time cut for drawing tracks. ;  ; TGeoNode * GetTopNode () const;  ; TGeoVolume * GetTopVolume () const;  ; TVirtualGeoTrack * GetTrack (Int_t index);  ; Int_t GetTrackIndex (Int_t id) const;  Get index for track id, -1 if not found. ;  ; TVirtualGeoTrack * GetTrackOfId (Int_t id) const;  Get track with a given ID. ;  ; Int_t GetUID (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:32946,error,error,32946,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['error'],['error']
Availability,"de at version 7); G__p2memfuncTFormula::fOptimal!pointer to optimal function; Double_t*TFormula::fParams[fNpar] Array of fNpar parameters; TFormulaPrimitive**TFormula::fPredefined![fNPar] predefined function ; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooFormula(); Default constructor. RooFormula(const char* name, const char* formula, const RooArgList& varList); Constructor with expression string and list of RooAbsArg variables. RooFormula(const RooFormula& other, const char* name = 0); Copy constructor. Bool_t reCompile(const char* newFormula); Recompile formula with new expression. ~RooFormula(); Destructor. RooArgSet& actualDependents() const; Return list of RooAbsArg dependents that is actually used by formula expression. void dump(); DEBUG: Dump state information. Bool_t changeDependents(const RooAbsCollection& newDeps, Bool_t mustReplaceAll, Bool_t nameChange); Change used variables to those with the same name in given list; If mustReplaceAll is true and error is generated if one of the; elements of newDeps is not found as a server. Double_t eval(const RooArgSet* nset = 0); Evaluate TFormula using given normalization set to be used as; observables definition passed to RooAbsReal::getVal(). DefinedValue(Int_t code); Interface to TFormula, return value defined by object with id 'code'; Object ids are mapped from object names by method DefinedVariable(). Int_t DefinedVariable(TString& name, int& action); Interface to TFormula. If name passed by TFormula is recognized; as one of our RooAbsArg servers, return a unique id integer; that represent this variable. Int_t DefinedVariable(TString& name); Interface to TFormula. If name passed by TFormula is recognized; as one of our RooAbsArg servers, return a unique id integer; that represent this variable. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. void printValu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFormula.html:14652,error,error,14652,root/html526/RooFormula.html,https://root.cern,https://root.cern/root/html526/RooFormula.html,1,['error'],['error']
Availability,"de data arrays by calling; TFumili::SetData procedure. TFumili::Minimize return following values:; 0 - fit is converged; -2 - function is not decreasing (or bad derivatives); -3 - error estimations are infinite; -4 - maximum number of iterations is exceeded. void PrintResults(Int_t k, Double_t p) const; Prints fit results. ikode is the type of printing parameters; p is function value. ikode = 1 - print values, errors and limits; ikode = 2 - print values, errors and steps; ikode = 3 - print values, errors, steps and derivatives; ikode = 4 - print only values and errors. void ReleaseParameter(Int_t ipar); Releases parameter number ipar. void SetData(Double_t* , Int_t , Int_t ); Sets pointer to data array provided by user.; Necessary if SetFCN is not called. numpoints: number of experimental points; vecsize: size of data point vector + 2; (for N-dimensional fit vecsize=N+2); exdata: data array with following format. exdata[0] = ExpValue_0 - experimental data value number 0; exdata[1] = ExpSigma_0 - error of value number 0; exdata[2] = X_0[0]; exdata[3] = X_0[1]. exdata[vecsize-1] = X_0[vecsize-3]; exdata[vecsize] = ExpValue_1; exdata[vecsize+1] = ExpSigma_1; exdata[vecsize+2] = X_1[0]. exdata[vecsize*(numpoints-1)] = ExpValue_(numpoints-1). exdata[vecsize*numpoints-1] = X_(numpoints-1)[vecsize-3]. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); Sets for prameter number ipar initial parameter value,; name parname, initial error verr and limits vlow and vhigh; If vlow = vhigh but not equil to zero, parameter will be fixed.; If vlow = vhigh = 0, parameter is released and its limits are discarded. Int_t SGZ(); Evaluates objective function ( chi-square ), gradients and; Z-matrix using data provided by user via TFumili::SetData. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFumili.html:21734,error,error,21734,root/html528/TFumili.html,https://root.cern,https://root.cern/root/html528/TFumili.html,6,['error'],['error']
Availability,"de the given bin from the fit. The bin numbering to be used is that; of TH1::GetBin(). void IncludeBin(Int_t bin); Include the given bin in the fit, if it was excluded before using ExcludeBin().; The bin numbering to be used is that of TH1::GetBin(). bool IsExcluded(Int_t bin) const; Function for internal use, checking whether the given bin is; excluded from the fit or not. void Constrain(Int_t parm, Double_t low, Double_t high); Constrain the values of parameter number <parm> (the parameter numbering; follows that of the input template vector).; Use UnConstrain() to remove this constraint. void UnConstrain(Int_t parm); Remove the constraints on the possible values of parameter <parm>. void CheckConsistency(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. Int_t Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "". void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; Used internally to obtain the bin ranges according to the dimensionality of; the histogram and the limits set by hand. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFractionFitter.html:16886,error,error,16886,root/html530/TFractionFitter.html,https://root.cern,https://root.cern/root/html530/TFractionFitter.html,3,['error'],['error']
Availability,"de the given bin from the fit. The bin numbering to be used is that; of TH1::GetBin(). void IncludeBin(Int_t bin); Include the given bin in the fit, if it was excluded before using ExcludeBin().; The bin numbering to be used is that of TH1::GetBin(). bool IsExcluded(Int_t bin) const; Function for internal use, checking whether the given bin is; excluded from the fit or not. void Constrain(Int_t parm, Double_t low, Double_t high); Constrain the values of parameter number <parm> (the parameter numbering; follows that of the input template vector).; Use UnConstrain() to remove this constraint. void UnConstrain(Int_t parm); Remove the constraints on the possible values of parameter <parm>. void CheckConsistency(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. TFitResultPtr Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; the class is deleted. void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:17490,error,error,17490,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,2,['error'],['error']
Availability,"de the visible range along the Y axis. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""3"" allows to shows the error as band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; return c41;; }; The option ""4"" is similar to the option ""3"" except that the band is smoothed.; As the following picture shows, this option should be used carefuly because; the smoothing algorithm may show some (huge) ""bouncing"" effects. In some case; looks nicer than the option ""3"" (because it is smooth) but it can be; misleading. Picture; Source. {; TCanvas *c42 = new TCanvas(""c42"",""c42"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphPainter.html:7156,error,error,7156,root/html530/TGraphPainter.html,https://root.cern,https://root.cern/root/html530/TGraphPainter.html,1,['error'],['error']
Availability,"de(const TH1* pass, const TH1* total, Option_t* opt = """"); This function is only kept for backward compatibility.; You should rather use the Divide method.; It calls Divide(pass,total,""cl=0.683 b(1,1) mode"") which is equivalent to the; former BayesDivide method. void Divide(const TH1* pass, const TH1* total, Option_t* opt = ""cp""); Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total. The assumption is that the entries in ""pass"" are a subset of those in; ""total"". That is, we create an ""efficiency"" graph, where each entry is; between 0 and 1, inclusive. If the histograms are not filled with unit weights, the number of effective; entries is used which might lead to wrong results.; . The points are assigned a x value at the center of each histogram bin.; The y values are for all options except for the; bayesian one where the estimated efficiency is given by; . If the denominator becomes 0 or pass > total, the corresponding bin is; skipped. The x errors span each histogram bin (lowedge ... lowedge+width); The y errors depend on the chosen statistic methode which can be determined; by the options given below. For a detailed description of the used statistic; calculations please have a look at the corresponding functions!. Options:; - v : verbose mode: prints information about the number of used bins; and calculated efficiencies with their errors; - cl=x : determine the used confidence level (0<x<1) (default is 0.683); - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); - w : Wilson interval (see TEfficiency::Wilson); - n : normal approximation propagation (see TEfficiency::Normal); - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; (see TEfficiency::Bayesian); - mode : use mode of posterior for Bayesian interval (default is mean); - shortest: use shortest interval (done b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphAsymmErrors.html:18937,error,errors,18937,root/html528/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html528/TGraphAsymmErrors.html,2,['error'],['errors']
Availability,"de); Open a remote file. Requires fOption to be set correctly. Int_t SysClose(Int_t fd); Close currently open file. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Return file stat information. The interface and return value is; identical to TSystem::GetPathInfo(). void Close(Option_t* option = """"); Close remote file. void Flush(); Flush file to disk. void Init(Bool_t create); Initialize a TNetFile object. Bool_t IsOpen() const; Retruns kTRUE if file is open, kFALSE otherwise. void Print(Option_t* option) const; Print some info about the net file. void PrintError(const char* where, Int_t err); Print error string depending on error code. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via rootd daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via rootd daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read a list of buffers given in pos[] and len[] and return it in a single; buffer.; Returns kTRUE in case of error. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via rootd daemon.; Returns kTRUE in case of error. Int_t Recv(Int_t& status, EMessageTypes& kind); Return status from rootd server and message kind. Returns -1 in; case of error otherwise 8 (sizeof 2 words, status and kind). void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetFile.html:25793,failure,failure,25793,root/html528/TNetFile.html,https://root.cern,https://root.cern/root/html528/TNetFile.html,6,['failure'],['failure']
Availability,"de; Double_tfPoint[3]! current point; Double_tfSafety! safety radius from current point; Bool_tfSearchOverlaps! flag set when an overlapping cluster is searched; Bool_tfStartSafe! flag a safe start for point classification; Double_tfStep! step to be done from current point and direction; Int_tfThreadId! thread id for this navigator; TGeoNode*fTopNode! top physical node. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoNavigator(); dummy constructor. TGeoNavigator(TGeoManager* geom); Default constructor. TGeoNavigator(const TGeoNavigator& ); Copy constructor. TGeoNavigator& operator=(const TGeoNavigator& ); assignment operator. ~TGeoNavigator(); Destructor. void BuildCache(Bool_t dummy = kFALSE, Bool_t nodeid = kFALSE); Builds the cache for physical nodes and global matrices. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from top node according to pathname.; Changes the path accordingly. The path is changed to point to the top node; in case of failure. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the navigator. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdDown(TGeoNode* node); Make a daughter of current node current. Can be called only with a valid; daughter node (no check). Updates cache accordingly. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdNext(); Do a cd to the node found next by FindNextBoundary. void GetBranchNames(Int_t* names) const; Fill volum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNavigator.html:12948,failure,failure,12948,root/html534/TGeoNavigator.html,https://root.cern,https://root.cern/root/html534/TGeoNavigator.html,2,['failure'],['failure']
Availability,"de;  ; Long64_t GetNbins () const override;  ; TClass * IsA () const override;  ; THn * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THn * Rebin (const Int_t *group) const;  ; THn * Rebin (Int_t group) const;  ; void Reset (Option_t *option="""") override;  Reset the contents of a THn. ;  ; void SetBinContent (const Int_t *idx, Double_t v);  Forwards to THnBase::SetBinContent(). ;  ; void SetBinContent (Long64_t bin, Double_t v) override;  ; void SetBinError2 (Long64_t bin, Double_t e2) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 () override;  Enable calculation of errors. ;  ;  Public Member Functions inherited from THnBase;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Divide (const THnBase *h);  Divide this histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:4781,error,errors,4781,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['error'],['errors']
Availability,"de;  Add object at the end of the list and also store option. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a function just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TFunctionTemplate * Get (DeclId_t id);  Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; virtual TList * GetListForObject (const char *name) const;  Return the set of overloads for this name, collecting all available ones. ;  ; virtual TList * GetListForObject (const TObject *obj) const;  Return the set of overloads for function obj, collecting all available ones. ;  ; TClass * IsA () const override;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' into this collection. ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unload ();  Mark 'all func' as being unloaded. ;  ; void Unload (TFunctionTemplate *func);  Mark 'func' as being unloaded. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctionTemplates.html:2639,avail,available,2639,doc/master/classTListOfFunctionTemplates.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html,1,['avail'],['available']
Availability,"de;  See TTree::GetEntries(const char *selection) Not implemented in TProofChain. ;  ; TList * GetListOfAliases () const override;  ; TObjArray * GetListOfBranches () override;  Return a pointer to the list of branches of the current tree. ;  ; TList * GetListOfClones () override;  ; TList * GetListOfFriends () const override;  ; TObjArray * GetListOfLeaves () override;  Return a pointer to the list of leaves of the current tree. ;  ; Int_t GetMakeClass () const;  ; TVirtualTreePlayer * GetPlayer ();  Forwards the execution to the dummy tree header. ;  ; Long64_t GetReadEntry () const override;  Returns the number of processed entries. ;  ; Bool_t HasTreeHeader () const;  ; TClass * IsA () const override;  ; Long64_t Process (const char *filename, Option_t *option="""", Long64_t nentries=TTree::kMaxEntries, Long64_t firstentry=0) override;  Forwards the execution to the TDSet. ;  ; Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=TTree::kMaxEntries, Long64_t firstentry=0) override;  The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ;  ; virtual void Progress (Long64_t total, Long64_t processed);  Changes the number of processed entries. ;  ; virtual void ReleaseProof ();  Releases PROOF. Disconnect the ""progress"" signal. ;  ; void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999) override;  See TTree::SetDebug. ;  ; void SetEntryList (TEntryList *enlist, const Option_t *) override;  ; void SetEventList (TEventList *evlist) override;  This function transfroms the given TEventList into a TEntryList. ;  ; void SetName (const char *name) override;  See TTree::GetName. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TChain;  TChain (const char *name, const char *title="""", Mode mode=kWithGlobalRegistration);  Create a chain. ;  ;  TChain (Mode mode=kWithGlobalRegistrati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:4791,error,error,4791,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['error'],['error']
Availability,"deBase;; 50}; 51}; 52namespace RDF {; 53template <typename T>; 54class RResultPtr;; 55template<typename T, typename V>; 56class RInterface;; 57using RNode = RInterface<::ROOT::Detail::RDF::RNodeBase, void>;; 58class RDataSource;; 59} // namespace RDF; 60 ; 61} // namespace ROOT; 62 ; 63/// \cond HIDDEN_SYMBOLS; 64 ; 65namespace ROOT {; 66namespace Internal {; 67namespace RDF {; 68using namespace ROOT::Detail::RDF;; 69using namespace ROOT::RDF;; 70namespace TTraits = ROOT::TypeTraits;; 71 ; 72std::string DemangleTypeIdName(const std::type_info &typeInfo);; 73 ; 74ColumnNames_t; 75ConvertRegexToColumns(const ColumnNames_t &colNames, std::string_view columnNameRegexp, std::string_view callerName);; 76 ; 77/// An helper object that sets and resets gErrorIgnoreLevel via RAII.; 78class RIgnoreErrorLevelRAII {; 79private:; 80 int fCurIgnoreErrorLevel = gErrorIgnoreLevel;; 81 ; 82public:; 83 RIgnoreErrorLevelRAII(int errorIgnoreLevel) { gErrorIgnoreLevel = errorIgnoreLevel; }; 84 ~RIgnoreErrorLevelRAII() { gErrorIgnoreLevel = fCurIgnoreErrorLevel; }; 85};; 86 ; 87/****** BuildAction overloads *******/; 88 ; 89// clang-format off; 90/// This namespace defines types to be used for tag dispatching in RInterface.; 91namespace ActionTags {; 92struct Histo1D{};; 93struct Histo2D{};; 94struct Histo3D{};; 95struct HistoND{};; 96struct Graph{};; 97struct GraphAsymmErrors{};; 98struct Profile1D{};; 99struct Profile2D{};; 100struct Min{};; 101struct Max{};; 102struct Sum{};; 103struct Mean{};; 104struct Fill{};; 105struct StdDev{};; 106struct Display{};; 107struct Snapshot{};; 108struct Book{};; 109}; 110// clang-format on; 111 ; 112template <typename T, bool ISV6HISTO = std::is_base_of<TH1, std::decay_t<T>>::value>; 113struct HistoUtils {; 114 static void SetCanExtendAllAxes(T &h) { h.SetCanExtend(::TH1::kAllAxes); }; 115 static bool HasAxisLimits(T &h); 116 {; 117 auto xaxis = h.GetXaxis();; 118 return !(xaxis->GetXmin() == 0. && xaxis->GetXmax() == 0.);; 119 }; 120};; 121 ; 122templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:2699,error,errorIgnoreLevel,2699,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,2,['error'],['errorIgnoreLevel']
Availability,"dePath + interpreter include path). Cache used by GetIncludePath; 311 TString fIncludePath; //Used to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; 312 TString fLinkedLibs; //Used to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; 313 TString fSoExt; //Extension of shared library (.so, .sl, .a, .dll, etc.); 314 TString fObjExt; //Extension of object files (.o, .obj, etc.); 315 EAclicMode fAclicMode{kDefault}; //Whether the compilation should be done debug or opt; 316 TString fMakeSharedLib; //Directive used to build a shared library; 317 TString fMakeExe; //Directive used to build an executable; 318 TString fLinkdefSuffix; //Default suffix for linkdef files to be used by ACLiC (see EACLiCProperties); 319 Int_t fAclicProperties{0}; //Various boolean flag for change ACLiC's behavior.; 320 TSeqCollection *fCompiled{nullptr}; //List of shared libs from compiled macros to be deleted; 321 TSeqCollection *fHelpers{nullptr}; //List of helper classes for alternative file/directory access; 322 ; 323 TString &GetLastErrorString(); //Last system error message (thread local).; 324 const TString &GetLastErrorString() const; //Last system error message (thread local).; 325 ; 326 TSystem *FindHelper(const char *path, void *dirptr = nullptr);; 327 virtual Bool_t ConsistentWith(const char *path, void *dirptr = nullptr);; 328 virtual const char *ExpandFileName(const char *fname);; 329 virtual Bool_t ExpandFileName(TString &fname);; 330 virtual void SigAlarmInterruptsSyscalls(Bool_t) { }; 331 virtual const char *GetLinkedLibraries();; 332 virtual void DoBeep(Int_t /*freq*/=-1, Int_t /*duration*/=-1) const { printf(""\a""); fflush(stdout); }; 333 ; 334 static const char *StripOffProto(const char *path, const char *proto);; 335 ; 336private:; 337 TSystem(const TSystem&) = delete;; 338 TSystem& operator=(const TSystem&) = delete;; 339 Bool_t ExpandFileName(const char *fname, char *xname, const int kBufSize);; 340 ; 341public:; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:13400,error,error,13400,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['error'],['error']
Availability,"deRepo() [1/2]. RooWorkspace::CodeRepo::CodeRepo ; (; RooWorkspace * ; wspace = nullptr). inline . Definition at line 170 of file RooWorkspace.h. ◆ CodeRepo() [2/2]. RooWorkspace::CodeRepo::CodeRepo ; (; const CodeRepo & ; other, . RooWorkspace * ; wspace = nullptr . ). inline . Definition at line 172 of file RooWorkspace.h. Member Function Documentation. ◆ autoImportClass(). bool RooWorkspace::CodeRepo::autoImportClass ; (; TClass * ; tc, . bool ; doReplace = false . ). Import code of class 'tc' into the repository. ; If code is already in repository it is only imported again if doReplace is false. The names and location of the source files is determined from the information in TClass. If no location is found in the TClass information, the files are searched in the workspace search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation files respectively. If files cannot be found, abort with error status, otherwise update the internal class-to-file map and import the contents of the files, if they are not imported yet. ; Definition at line 1497 of file RooWorkspace.cxx. ◆ Class(). static TClass * RooWorkspace::CodeRepo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooWorkspace::CodeRepo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooWorkspace::CodeRepo::Class_Version ; (; ). inlinestaticconstexpr . Flag indicating that classes compiled OK. ; ReturnsVersion of this class ; Definition at line 217 of file RooWorkspace.h. ◆ compileClasses(). bool RooWorkspace::CodeRepo::compileClasses ; (; ). For all classes in the workspace for which no class definition is found in the ROOT class table extract source code stored in code repository into temporary directory set by setClassFileExportDir(), compile classes and link them with current ROOT session. ; If a compilation error occurs print instructions for user how to fix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html:11941,error,error,11941,doc/master/classRooWorkspace_1_1CodeRepo.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html,1,['error'],['error']
Availability,"debug level; doublefModemode of dist; boolfOneDimflag to indicate if the function is 1 dimension; TUnuran*fUnuranunuran engine class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuranSampler(). ~TUnuranSampler(). bool Init(const char* algo = """"); initialize unuran classes using the given algorithm. bool Init(const ROOT::Math::DistSamplerOptions& opt); default initialization with algorithm name. bool DoInit1D(const char* algo); initilize for 1D sampling; need to create 1D interface from Multidim one; (to do: use directly 1D functions ??). bool DoInitDiscrete1D(const char* algo); initilize for 1D sampling of discrete distributions. bool DoInitND(const char* algo); initilize for 1D sampling. void SetFunction(TF1* pdf); set function from a TF1 pointer. void SetRandom(TRandom* r); set random generator (must be called before Init to have effect). void SetSeed(unsigned int seed); set random generator seed (must be called before Init to have effect). TRandom * GetRandom(); get random generator used. double Sample1D(); sample 1D distributions. bool Sample(double* x); sample multi-dim distributions. bool SampleBin(double prob, double& value, double* error = 0); sample a bin according to Poisson statistics. TUnuranSampler(); default constructor. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). void SetPrintLevel(int level). Set the print level; (if level=-1 use default). {fLevel = level;}. void SetMode(double mode). set the mode. void SetArea(double area). set the area. » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: TUnuranSampler.h 37419 2010-12-08 21:19:45Z moneta $ » Last generated: 2010-12-08 22:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnuranSampler.html:3635,error,error,3635,root/html528/TUnuranSampler.html,https://root.cern,https://root.cern/root/html528/TUnuranSampler.html,1,['error'],['error']
Availability,"debug level; doublefModemode of dist; boolfOneDimflag to indicate if the function is 1 dimension; TUnuran*fUnuranunuran engine class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuranSampler(). ~TUnuranSampler(). bool Init(const char* algo = """"); initialize unuran classes using the given algorithm. bool Init(const ROOT::Math::DistSamplerOptions& opt); default initialization with algorithm name. bool DoInit1D(const char* algo); initilize for 1D sampling; need to create 1D interface from Multidim one; (to do: use directly 1D functions ??). bool DoInitDiscrete1D(const char* algo); initilize for 1D sampling of discrete distributions. bool DoInitND(const char* algo); initilize for 1D sampling. void SetFunction(TF1* pdf); set function from a TF1 pointer. void SetRandom(TRandom* r); set random generator (must be called before Init to have effect). void SetSeed(unsigned int seed); set random generator seed (must be called before Init to have effect). TRandom * GetRandom(); get random generator used. double Sample1D(); sample 1D distributions. bool Sample(double* x); sample multi-dim distributions. bool SampleBin(double prob, double& value, double* error = 0); sample a bin according to Poisson statistics. TUnuranSampler(); default constructor. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). void SetPrintLevel(int level). Set the print level; (if level=-1 use default). {fLevel = level;}. void SetMode(double mode). set the mode. void SetArea(double area). set the area. » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: TUnuranSampler.h 37419 2010-12-08 21:19:45Z moneta $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TUnuranSampler.html:3635,error,error,3635,root/html530/TUnuranSampler.html,https://root.cern,https://root.cern/root/html530/TUnuranSampler.html,1,['error'],['error']
Availability,"debug level; doublefModemode of dist; boolfOneDimflag to indicate if the function is 1 dimension; TUnuran*fUnuranunuran engine class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuranSampler(). ~TUnuranSampler(). bool Init(const char* algo = """"); initialize unuran classes using the given algorithm. bool Init(const ROOT::Math::DistSamplerOptions& opt); default initialization with algorithm name. bool DoInit1D(const char* algo); initilize for 1D sampling; need to create 1D interface from Multidim one; (to do: use directly 1D functions ??). bool DoInitDiscrete1D(const char* algo); initilize for 1D sampling of discrete distributions. bool DoInitND(const char* algo); initilize for 1D sampling. void SetFunction(TF1* pdf); set function from a TF1 pointer. void SetRandom(TRandom* r); set random generator (must be called before Init to have effect). void SetSeed(unsigned int seed); set random generator seed (must be called before Init to have effect). TRandom * GetRandom(); get random generator used. double Sample1D(); sample 1D distributions. bool Sample(double* x); sample multi-dim distributions. bool SampleBin(double prob, double& value, double* error = 0); sample a bin according to Poisson statistics. TUnuranSampler(); default constructor. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). void SetPrintLevel(int level). Set the print level; (if level=-1 use default). {fLevel = level;}. void SetMode(double mode). set the mode. void SetArea(double area). set the area. » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: TUnuranSampler.h 37419 2010-12-08 21:19:45Z moneta $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUnuranSampler.html:3635,error,error,3635,root/html532/TUnuranSampler.html,https://root.cern,https://root.cern/root/html532/TUnuranSampler.html,1,['error'],['error']
Availability,"decomposition is performed . One can change the matrix A after the decomposition constructor has been called without effecting the decomposition result; Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with the solution .; TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced with the solution .; MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through the argument and replaced with the solution .; Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument the unit matrix . Note that for a matrix a(m,n) with m > n a pseudo-inverse is calculated . Tolerances and Scaling; The tolerance parameter (which is a member of this base class) plays a crucial role in all operations of the decomposition classes . It gives the user a powerful tool to monitor and steer the operations Its default value is sqrt(epsilon) where 1+epsilon = 1; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number .; The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD which can handle singular matrices . For each decomposition this will be checked in a different way; in LU the matrix is considered singular when, at some point in the decomposition, a diagonal element < fTol . Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:3003,toler,tolerance,3003,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['toler'],['tolerance']
Availability,"ded as TString.; This is used, for example, with kPROOF_FATAL to force the main thread; to mark this socket as bad, avoiding race condition when a worker; dies while in processing state. Bool_t IsServProofd(); Return kTRUE if the remote server is a 'proofd'. Int_t GetInterrupt(Bool_t& forward); Get latest interrupt level and reset it; if the interrupt has to be; propagated to lower stages forward will be kTRUE after the call. Int_t Flush(); Flush the asynchronous queue.; Typically called when a kHardInterrupt is received.; Returns number of bytes in flushed buffers. Bool_t Create(Bool_t attach = kFALSE); This method sends a request for creation of (or attachment to) a remote; server application. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); Send a raw buffer of specified length.; Use opt = kDontBlock to ask xproofd to push the message into the proofsrv.; (by default is appended to a queue waiting for a request from proofsrv).; Returns the number of bytes sent or -1 in case of error. Bool_t Ping(const char* ord = 0); Ping functionality: contact the server to check its vitality.; If external, the server waits for a reply from the server; Returns kTRUE if OK or kFALSE in case of error. void RemoteTouch(); Remote touch functionality: contact the server to proof our vitality.; No reply from server is expected. void CtrlC(); Interrupt the remote protocol instance. Used to propagate Ctrl-C.; No reply from server is expected. Int_t PickUpReady(); Wait and pick-up next buffer from the asynchronous queue. TXSockBuf * PopUpSpare(Int_t sz); Pop-up a buffer of at least size bytes from the spare list; If none is found either one is reallocated or a new one; created. void PushBackSpare(); Release read buffer giving back to the spare list. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t SendInterrupt(Int_t type); Send urgent message (interrupt) to remote server; Returns 0 or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:16476,error,error,16476,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,2,['error'],['error']
Availability,"ded for the last stimation.; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . double XMinimum() const; Return current estimate of the position of the minimum. . double XLower() const; Return current lower bound of the minimization interval. . double XUpper() const; Return current upper bound of the minimization interval. . double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . int Minimize(int maxIter, double absTol, double relTol); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. int Iterations() const; Return number of iteration used to find minimum . const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . int SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: BrentMinimizer1D.h 31583 2009-12-06 13:55:26Z rdm $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__BrentMinimizer1D.html:2556,toler,tolerance,2556,root/html526/ROOT__Math__BrentMinimizer1D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__BrentMinimizer1D.html,1,['toler'],['tolerance']
Availability,"ded to the name of a script loaded by ACLiC and used to locate any eventual...Definition TSystem.cxx:4227; TSystem::fHelpersTSeqCollection * fHelpersDefinition TSystem.h:321; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::GetBuildDirvirtual const char * GetBuildDir() constReturn the path of the build directory.Definition TSystem.cxx:3915; TSystem::Openlogvirtual void Openlog(const char *name, Int_t options, ELogFacility facility)Open connection to system log daemon.Definition TSystem.cxx:1677; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::AddIncludePathvirtual void AddIncludePath(const char *includePath)Add a directory to the already set include path.Definition TSystem.cxx:4159; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::GetEffectiveGidvirtual Int_t GetEffectiveGid()Returns the effective group id.Definition TSystem.cxx:1591; TSystem::EAclicModeEAclicModeDefinition TSystem.h:269; TSystem::kDefault@ kDefaultDefinition TSystem.h:269; TSystem::kDebug@ kDebugDefinition TSystem.h:269; TSystem::kOpt@ kOptDefinition TSystem.h:269; TSystem::~TSystemvirtual ~TSystem()Delete the OS interface.Definition TSystem.cxx:139; TSystem::SetDisplayvirtual void SetDisplay()Set DISPLAY environment variable based on utmp entry. Only for UNIX.Definition TSystem.cxx:235; TSystem::DirNamevirtual const char * DirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1006; TSystem::FreeDirectoryvirtual void FreeDirectory(void *dirp)Free a directory.Definition TSystem.cxx:845; TSystem::SetFlagsOptvirtual void SetFlagsOpt(const char *)FlagsOpt should contain the options to pass to the C++ compiler in order to compile the library in op...Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:173968,error,error,173968,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['error'],['error']
Availability,"def DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] \n"",x1,x2);; 203 }; 204#endif; 205 ; 206 // fill data; 207 std::shared_ptr<ROOT::Fit::BinData> fitdata(new ROOT::Fit::BinData(opt,range) );; 208 ROOT::Fit::FillData(*fitdata, h1, f1);; 209 if (fitdata->Size() == 0 ) {; 210 Warning(""Fit"",""Fit data is empty "");; 211 return -1;; 212 }; 213 ; 214#ifdef DEBUG; 215 printf(""HFit:: data size is %d \n"",fitdata->Size());; 216 for (unsigned int i = 0; i < fitdata->Size(); ++i) {; 217 if (fitdata->NDim() == 1) printf("" x[%d] = %f - value = %f \n"", i,*(fitdata->Coords(i)),fitdata->Value(i) );; 218 }; 219#endif; 220 ; 221 // switch off linear fitting in case data has coordinate errors and the option is set; 222 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kCoordError && fitdata->Opt().fCoordErrors ) linear = false;; 223 // linear fit cannot be done also in case of asymmetric errors; 224 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kAsymError && fitdata->Opt().fAsymErrors ) linear = false;; 225 ; 226 // this functions use the TVirtualFitter; 227 if (special != 0 && !fitOption.Bound && !linear) {; 228 if (special == 100) ROOT::Fit::InitGaus (*fitdata,f1); // gaussian; 229 else if (special == 110 || special == 112) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D gaussians ( xygaus or bigaus); 230 else if (special == 400) ROOT::Fit::InitGaus (*fitdata,f1); // landau (use the same); 231 else if (special == 410) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D landau (use the same); 232 ; 233 else if (special == 200) ROOT::Fit::InitExpo (*fitdata, f1); // exponential; 234 ; 235 }; 236 ; 237 ; 238 // set the fit function; 239 // if option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:8227,error,errors,8227,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['error'],['errors']
Availability,"def DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhigh = "" << xhigh << std::endl;; 86#endif; 87 // ignore ranges specified outside histogram range; 88 int ilow = axis->FindFixBin(xlow);; 89 int ihigh = axis->FindFixBin(xhigh);; 90 if (ilow > hxlast || ihigh < hxfirst) {; 91 Warning(""ROOT::Fit::FillData"",""fit range is outside histogram range, no fit data for %s"",axis->GetNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:2174,error,error,2174,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['error']
Availability,"default background; 1109 GetColor(0).fPixel = fWhitePixel;; 1110 ; 1111 // Inquire the XServer Vendor; 1112 char vendor[132];; 1113 strlcpy(vendor, XServerVendor((Display*)fDisplay),132);; 1114 ; 1115 // Create primitives graphic contexts; 1116 for (i = 0; i < kMAXGC; i++); 1117 gGClist[i] = XCreateGC((Display*)fDisplay, fVisRootWin, 0, nullptr);; 1118 ; 1119 XGCValues values;; 1120 if (XGetGCValues((Display*)fDisplay, *gGCtext, GCForeground|GCBackground, &values)) {; 1121 XSetForeground((Display*)fDisplay, *gGCinvt, values.background);; 1122 XSetBackground((Display*)fDisplay, *gGCinvt, values.foreground);; 1123 } else {; 1124 Error(""OpenDisplay"", ""cannot get GC values"");; 1125 }; 1126 ; 1127 // Turn-off GraphicsExpose and NoExpose event reporting for the pixmap; 1128 // manipulation GC, this to prevent these events from being stacked up; 1129 // without ever being processed and thereby wasting a lot of memory.; 1130 XSetGraphicsExposures((Display*)fDisplay, *gGCpxmp, False);; 1131 ; 1132 // Create input echo graphic context; 1133 XGCValues echov;; 1134 echov.foreground = fBlackPixel;; 1135 echov.background = fWhitePixel;; 1136 if (strstr(vendor,""Hewlett"")); 1137 echov.function = GXxor;; 1138 else; 1139 echov.function = GXinvert;; 1140 ; 1141 gGCecho = XCreateGC((Display*)fDisplay, fVisRootWin,; 1142 GCForeground | GCBackground | GCFunction,; 1143 &echov);; 1144 ; 1145 // Load a default Font; 1146 static int isdisp = 0;; 1147 if (!isdisp) {; 1148 for (i = 0; i < kMAXFONT; i++) {; 1149 gFont[i].id = nullptr;; 1150 strcpy(gFont[i].name, "" "");; 1151 }; 1152 fontlist = XListFonts((Display*)fDisplay, ""*courier*"", 1, &fontcount);; 1153 if (fontlist && fontcount != 0) {; 1154 gFont[gCurrentFontNumber].id = XLoadQueryFont((Display*)fDisplay, fontlist[0]);; 1155 gTextFont = gFont[gCurrentFontNumber].id;; 1156 strcpy(gFont[gCurrentFontNumber].name, ""*courier*"");; 1157 gCurrentFontNumber++;; 1158 XFreeFontNames(fontlist);; 1159 } else {; 1160 // emergency: try fixed font; 1161",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:36844,echo,echo,36844,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,3,['echo'],"['echo', 'echov']"
Availability,"default constructor.Definition TRatioPlot.cxx:104; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; ratioplot1Definition ratioplot1.py:1; . Fit residuals; A second constructor only accepts a single histogram, but expects it to have a fitted function. The function is used to calculate the residual between the fit and the histogram. Here, it is expected that h1 has a fit function in it's list of functions. The class calculates the difference between the histogram and the fit function at each point and divides it by the uncertainty. There are a few option to steer which error is used (as is the case for diffsig). The default is to use the statistical uncertainty from h1 using TH1::GetBinError. If the option string contains errasym, asymmetric errors will be used. The type of error can be steered by TH1::SetBinErrorOption. The corresponding error will be used, depending on if the function is below or above the bin content. The third option errfunc uses the square root of the function value as the error.; ; void ratioplot2() {; gStyle->SetOptStat(0);; auto c1 = new TCanvas(""c1"", ""fit residual simple"");; auto h1 = new TH1D(""h1"", ""h1"", 50, -5, 5);; h1->FillRandom(""gaus"", 2000);; h1->Fit(""gaus"", ""0"");; h1->GetXaxis()->SetTitle(""x"");; auto rp1 = new TRatioPlot(h1);; rp1->Draw();; rp1->GetLowerRefYaxis()->SetTitle(""ratio"");; rp1->GetUpperRefYaxis()->SetTitle(""entries"");; }; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; c1return c1Definition legend1.C:41; ratioplot2Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:4690,error,error,4690,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['error'],['error']
Availability,"default the TRefArray 'points' to the current process and can only receive object that have been created in this process. To point the TRefArray to a different process do: TRefArray array( processId );; TRefArrayAn array of references to TObjects.Definition TRefArray.h:33; For example, if 'obj' is an instance that was created in the different process and you do: TRefArray array( TProcessID::GetProcessWithUID( obj ) );; TProcessID::GetProcessWithUIDstatic TProcessID * GetProcessWithUID(const TObject *obj)static function returning a pointer to TProcessID with its pid encoded in the highest byte of obj->Ge...Definition TProcessID.cxx:297; Then array.Add(obj);; is correct (obj comes from the process the array is pointed to while TObject *nobj = new TObject;; array.Add(nobj);; TObject::TObjectTObject()TObject constructor.Definition TObject.h:254; is incorrect since 'nobj' was created in a different process than the one the array is pointed to. In this case you will see error message: Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....); TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; xDouble_t x[n]Definition legend1.C:17; When a TRefArray is Streamed, only the pointer unique id is written, not the referenced object. TRefArray may be assigned to different branches of one Tree or several Trees. The branch containing the TRefArray can be read before or after the array (eg TClonesArray, STL vector,..) of the referenced objects.; See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. Elements in a TRefArray cannot point to a TFile or TDirectory.; All elements of a TRefArray must be set in the same process, In particular, one cannot modify some elements of the array in a different process. Use an array of TRef when one of the above restrictions is met.; The number of TRef handled by a singl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefArray.html:1714,error,error,1714,doc/master/classTRefArray.html,https://root.cern,https://root.cern/doc/master/classTRefArray.html,1,['error'],['error']
Availability,"default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.94999999999999996, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value.; This method is mantained for backward compatibility and will be deprecated. std::vector<double> GetConfidenceIntervals(double cl = 0.94999999999999996, bool norm = true) const. evaluate confidence interval for the data set used in the last fit; the confidence interval are returned as a vector of data points. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors() const; flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. bool ParameterBounds(unsigned int ipar, double& lower, double& upper) const; retrieve parameter bounds - return false if parameter is not bound. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(const shared_ptr<ROOT::Fit::FitResult::IModelFunction>& func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__FitResult.html:11796,error,error,11796,root/html604/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__FitResult.html,1,['error'],['error']
Availability,"default, if no range has been set, the returned value is; 7570/// the (unbinned) one calculated at fill time. If a range has been set, however,; 7571/// the value is calculated using the bins in range, as described above; THIS; 7572/// IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use TAxis::SetRange(0, 0) to unset; 7573/// the range. To ensure that the returned value (and all other statistics) is; 7574/// always that of the binned data stored in the histogram, call TH1::ResetStats.; 7575/// See TH1::GetStats.; 7576 ; 7577Double_t TH1::GetMeanError(Int_t axis) const; 7578{; 7579 return GetMean(axis+10);; 7580}; 7581 ; 7582////////////////////////////////////////////////////////////////////////////////; 7583/// Returns the Standard Deviation (Sigma).; 7584/// The Sigma estimate is computed as; 7585/// \f[; 7586/// \sqrt{\frac{1}{N}(\sum(x_i-x_{mean})^2)}; 7587/// \f]; 7588/// For axis = 1,2 or 3 returns the Sigma value of the histogram along; 7589/// X, Y or Z axis; 7590/// For axis = 11, 12 or 13 returns the error of StdDev estimation along; 7591/// X, Y or Z axis for Normal distribution; 7592///; 7593/// Note that the mean value/sigma is computed using the bins in the currently; 7594/// defined range (see TAxis::SetRange). By default the range includes; 7595/// all bins from 1 to nbins included, excluding underflows and overflows.; 7596/// To force the underflows and overflows in the computation, one must; 7597/// call the static function TH1::StatOverflows(kTRUE) before filling; 7598/// the histogram.; 7599///; 7600/// IMPORTANT NOTE: The returned value depends on how the histogram statistics; 7601/// are calculated. By default, if no range has been set, the returned standard; 7602/// deviation is the (unbinned) one calculated at fill time. If a range has been; 7603/// set, however, the standard deviation is calculated using the bins in range,; 7604/// as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS--use; 7605/// TAxis::SetRange(0, 0) to unset ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:296344,error,error,296344,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"define I(x, y, z); TMVA::DNN::CNNDefinition ContextHandles.h:43; TMVA::DNNDefinition Adadelta.h:36; TMVA::DNN::EInitializationEInitializationDefinition Functions.h:72; TMVA::DNN::EInitialization::kGauss@ kGauss; TMVA::DNN::EInitialization::kGlorotNormal@ kGlorotNormal; TMVA::DNN::EInitialization::kUniform@ kUniform; TMVA::DNN::EInitialization::kGlorotUniform@ kGlorotUniform; TMVA::DNN::EInitialization::kZero@ kZero; TMVA::DNN::EInitialization::kIdentity@ kIdentity; TMVA::DNN::EOptimizerEOptimizerEnum representing the optimizer used for training.Definition Functions.h:82; TMVA::DNN::EOptimizer::kAdam@ kAdam; TMVA::DNN::EOptimizer::kRMSProp@ kRMSProp; TMVA::DNN::EOptimizer::kAdadelta@ kAdadelta; TMVA::DNN::EOptimizer::kSGD@ kSGD; TMVA::DNN::EOptimizer::kAdagrad@ kAdagrad; TMVA::DNN::EOutputFunctionEOutputFunctionEnum that represents output functions.Definition Functions.h:46; TMVA::DNN::weightDecaydouble weightDecay(double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization)compute the weight decay for regularization (L1 or L2)Definition NeuralNet.icc:498; TMVA::DNN::regularizationauto regularization(const typename Architecture_t::Matrix_t &A, ERegularization R) -> decltype(Architecture_t::L1Regularization(A))Evaluate the regularization functional for a given weight matrix.Definition Functions.h:238; TMVA::DNN::ERegularizationERegularizationEnum representing the regularization type applied for a given layer.Definition Functions.h:65; TMVA::DNN::ERegularization::kL2@ kL2; TMVA::DNN::ERegularization::kL1@ kL1; TMVA::DNN::ERegularization::kNone@ kNone; TMVA::DNN::EActivationFunctionEActivationFunctionEnum that represents layer activation functions.Definition Functions.h:32; TMVA::DNN::EActivationFunction::kRelu@ kRelu; TMVA::DNN::EActivationFunction::kGauss@ kGauss; TMVA::DNN::EActivationFunction::kTanh@ kTanh; TMVA::DNN::EActivationFunction::kFastTanh@ kFastTanh; TMVA::DNN::EActivationFunction::kSigmoid@ kSigmoid;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:119141,error,error,119141,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['error'],['error']
Availability,"define X(type, name); angleOption_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; styleOption_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; TObject::fUniqueIDUInt_t fUniqueIDobject unique identifierDefinition TObject.h:44; TObject::fBitsUInt_t fBitsbit field status wordDefinition TObject.h:45; lineTLine * lineDefinition entrylistblock_figure1.C:235. Reimplemented in TSystemFile, TCollection, TClass, TGFrame, and TGPack.; Definition at line 348 of file TObject.cxx. ◆ Error(). void TObject::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue error message. ; Use ""location"" to specify the method where the error occurred. Accepts standard printf formatting arguments. ; Reimplemented in TFitResult.; Definition at line 987 of file TObject.cxx. ◆ Execute() [1/2]. void TObject::Execute ; (; const char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented in TMethodCall, TCling, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 359 of file TObject.cxx. ◆ Execute() [2/2]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented in TCling, TMethodCall, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 377 of file TObject.cxx. ◆ ExecuteEvent(). void TObject::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). virtual . Execute action corresponding to an event at (px,py). ; This method must be overridden",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:33578,error,error,33578,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['error'],['error']
Availability,"define X(type, name); angleOption_t Option_t TPoint TPoint angleDefinition TGWin32VirtualXProxy.cxx:68; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; styleOption_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; TObject::fUniqueIDUInt_t fUniqueIDobject unique identifierDefinition TObject.h:44; TObject::fBitsUInt_t fBitsbit field status wordDefinition TObject.h:45; lineTLine * lineDefinition entrylistblock_figure1.C:235. Reimplemented in TSystemFile, TCollection, TClass, TGFrame, and TGPack.; Definition at line 353 of file TObject.cxx. ◆ Error(). void TObject::Error ; (; const char * ; location, . const char * ; fmt, .  ; ... . ); const. virtual . Issue error message. ; Use ""location"" to specify the method where the error occurred. Accepts standard printf formatting arguments. ; Reimplemented in TFitResult.; Definition at line 993 of file TObject.cxx. ◆ Execute() [1/2]. void TObject::Execute ; (; const char * ; method, . const char * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented in TMethodCall, TCling, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 364 of file TObject.cxx. ◆ Execute() [2/2]. void TObject::Execute ; (; TMethod * ; method, . TObjArray * ; params, . Int_t * ; error = nullptr . ). virtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented in TCling, TMethodCall, TInterpreter, ROOT::R::TRInterface, and TContextMenu.; Definition at line 382 of file TObject.cxx. ◆ ExecuteEvent(). void TObject::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). virtual . Execute action corresponding to an event at (px,py). ; This method must be overridden",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:33291,error,error,33291,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['error'],['error']
Availability,"define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Ssiz_tint Ssiz_tDefinition RtypesCore.h:67; kBitsPerByteconstexpr ULong_t kBitsPerByteDefinition RtypesCore.h:116; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; ULongptr_tunsigned long ULongptr_tDefinition RtypesCore.h:76; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassImp#define ClassImp(name)Definition Rtypes.h:382; operator<<TBuffer & operator<<(TBuffer &buf, const Tmpl *obj)Definition TBuffer.h:397; TBuffer.h; TClass.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; ErrorHandlervoid ErrorHandler(int level, const char *location, const char *fmt, std::va_list va)General error handler function. It calls the user set error handler.Definition TError.cxx:109; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; kPrintconstexpr Int_t kPrintDefinition TError.h:44; Obsoletevoid Obsolete(const char *function, const char *asOfVers, const char *removedFromVers)Use this function to declare a function obsolete.Definition TError.cxx:177; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; Fatalvoid Fatal(const char *location, const char *msgfmt,...)Use this function in case of a fatal error. It will abort the program.Definition TError.cxx:244; gPrintViaErrorHandlerBool_t gPrintViaErrorHandlerDefinition TError.cxx:33; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; directwinID h directDefinition TGWin32VirtualGLProxy.cxx:43; dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:87124,error,error,87124,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['error'],['error']
Availability,"defined range [a,b] using Chebyshev polynomials. ; It uses the algorithm from GSL; This class does not support copying ; Definition at line 71 of file ChebyshevApprox.h. Public Member Functions;  ChebyshevApprox (ChebyshevApprox &&)=delete;  ;  ChebyshevApprox (const ChebyshevApprox &)=delete;  ;  ChebyshevApprox (const ROOT::Math::IGenFunction &f, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on functions of type IGenFunction. ;  ;  ChebyshevApprox (GSLFuncPointer f, void *p, double a, double b, size_t n);  Construct a Chebyshev series approximation to a Function f in range [a,b]; constructor based on free functions with gsl_function type signature. ;  ; virtual ~ChebyshevApprox ();  ; ChebyshevApprox * Deriv ();  Compute the derivative of the series and return a pointer to a new Chebyshev series with the derivatives coefficients. ;  ; std::pair< double, double > EvalErr (double x) const;  Evaluate the series at a given point x estimating both the series result and its absolute error. ;  ; std::pair< double, double > EvalErr (double x, size_t n) const;  evaluate the series at a given point x to the given order n, estimating both the series result and its absolute error. ;  ; ChebyshevApprox * Integral ();  Compute the integral of the series and return a pointer to a new Chebyshev series with the integral coefficients. ;  ; double operator() (double x) const;  Evaluate the series at a given point x. ;  ; double operator() (double x, size_t n) const;  Evaluate the series at a given point, to (at most) the given order n. ;  ; ChebyshevApprox & operator= (ChebyshevApprox &&)=delete;  ; ChebyshevApprox & operator= (const ChebyshevApprox &)=delete;  . Protected Member Functions; void Initialize (GSLFuncPointer f, void *params, double a, double b);  Initialize series passing function and range. ;  . Private Member Functions;  ChebyshevApprox (size_t n);  construct a Chebyshev series or order n T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html:1590,error,error,1590,doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ChebyshevApprox.html,1,['error'],['error']
Availability,"defining the architecture: CPU or GPU. ; Definition at line 198 of file MethodDL.h. ◆ fBatchDepth. size_t TMVA::MethodDL::fBatchDepth. private . The depth of the batch used to train the deep net. ; Definition at line 182 of file MethodDL.h. ◆ fBatchHeight. size_t TMVA::MethodDL::fBatchHeight. private . The height of the batch used to train the deep net. ; Definition at line 183 of file MethodDL.h. ◆ fBatchLayoutString. TString TMVA::MethodDL::fBatchLayoutString. private . The string defining the layout of the batch. ; Definition at line 193 of file MethodDL.h. ◆ fBatchWidth. size_t TMVA::MethodDL::fBatchWidth. private . The width of the batch used to train the deep net. ; Definition at line 184 of file MethodDL.h. ◆ fBuildNet. bool TMVA::MethodDL::fBuildNet. private . Flag to control whether to build fNet, the stored network used for the evaluation. ; Definition at line 201 of file MethodDL.h. ◆ fErrorStrategy. TString TMVA::MethodDL::fErrorStrategy. private . The string defining the error strategy for training. ; Definition at line 195 of file MethodDL.h. ◆ fInputLayoutString. TString TMVA::MethodDL::fInputLayoutString. private . The string defining the layout of the input. ; Definition at line 192 of file MethodDL.h. ◆ fInputShape. std::vector<size_t> TMVA::MethodDL::fInputShape. private . Contains the batch size (no. ; of images in the batch), input depth (no. channels) and further input dimensions of the data (image height, width ...) ; Definition at line 178 of file MethodDL.h. ◆ fLayoutString. TString TMVA::MethodDL::fLayoutString. private . The string defining the layout of the deep net. ; Definition at line 194 of file MethodDL.h. ◆ fLossFunction. DNN::ELossFunction TMVA::MethodDL::fLossFunction. private . The loss function. ; Definition at line 190 of file MethodDL.h. ◆ fNet. std::unique_ptr<DeepNetImpl_t> TMVA::MethodDL::fNet. private . Definition at line 209 of file MethodDL.h. ◆ fNumValidationString. TString TMVA::MethodDL::fNumValidationString. private .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:53008,error,error,53008,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['error'],['error']
Availability,"defs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TGTextButton; FontStruct_t fFontStruct;  ; Bool_t fHasOwnFont;  ; Int_t fHKeycode;  ; TGHotString * fLabel;  ; Int_t fMBottom;  ; Int_t fMLeft;  ; Int_t fMRight;  ; Int_t fMTop;  ; Bool_t fPrevStateOn;  ; Bool_t fStateOn;  ; TGTextLayout * fTLayout;  ; Int_t fTMode;  ; Int_t fWrapLength;  ;  Protected Attributes inherited from TGButton; Pixel_t fBgndColor;  actual background color ;  ; TGButtonGroup * fGroup;  button group this button belongs to ;  ; Pixel_t fHighColor;  highlight color ;  ; GContext_t fNormGC;  graphics context used for drawing button ;  ; EButtonState fState;  button state ;  ; Bool_t fStayDown;  true if button has to stay down ;  ; UInt_t fStyle;  button style (modern or classic) ;  ; UInt_t fTHeight;  button height ;  ; TGToolTip * fTip;  tool tip associated with button ;  ; UInt_t fTWidth;  button width ;  ; void * fUserData;  pointer to user data structure ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSplitButton.html:34596,down,down,34596,doc/master/classTGSplitButton.html,https://root.cern,https://root.cern/doc/master/classTGSplitButton.html,1,['down'],['down']
Availability,"del(const RooStats::ModelConfig& model); virtual voidSetNuisanceParameters(const RooArgSet& set); virtual voidSetNullModel(const RooStats::ModelConfig&); virtual voidSetNullParameters(const RooArgSet& set); virtual voidSetParameters(const RooArgSet& set); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. RooAbsData*GetData() const; RooAbsPdf*GetPdf() const. Data Members; protected:. RooArgSetfAlternateParamsRooArgSet specifying alternate parameters for hypothesis test // Is it used ????; RooAbsData*fData; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfNullParamsRooArgSet specifying null parameters for hypothesis test; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdf; Double_tfSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetTestSize(Double_t size). SetModel(const RooStats::ModelConfig& model). virtual ~CombinedCalculator(); destructor. { }. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetNullModel(const RooStats::ModelConfig& ). void SetAlternateModel(const RooStats::ModelConfig& ). void SetPdf(RooAbsPdf& pdf); specific setting - keep for convenie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__CombinedCalculator.html:3576,error,error,3576,root/html526/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__CombinedCalculator.html,1,['error'],['error']
Availability,"delete previously existing arrays. ; Definition at line 718 of file TGraphMultiErrors.cxx. ◆ DeclFileName(). static const char * TGraphMultiErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 213 of file TGraphMultiErrors.h. ◆ DeleteYError(). void TGraphMultiErrors::DeleteYError ; (; Int_t ; e). virtual . Deletes the y error with the index e. ; Note that you must keep at least 1 error ; Definition at line 1422 of file TGraphMultiErrors.cxx. ◆ Divide(). void TGraphMultiErrors::Divide ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; opt = ""cp"" . ). This function was adapted from the TGraphAsymmErrors class. ; See TGraphAsymmErrors::Divide for the documentation; Only the first error dimension is affected. ; Definition at line 1001 of file TGraphMultiErrors.cxx. ◆ DoMerge(). Bool_t TGraphMultiErrors::DoMerge ; (; const TGraph * ; tg). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with multiple asymmetric errors. ; Reimplemented from TGraph.; Definition at line 838 of file TGraphMultiErrors.cxx. ◆ FillZero(). void TGraphMultiErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 802 of file TGraphMultiErrors.cxx. ◆ GetAttFill(). TAttFill * TGraphMultiErrors::GetAttFill ; (; Int_t ; e). virtual . Get AttFill pointer for specified error dimension. ; Definition at line 1621 of file TGraphMultiErrors.cxx. ◆ GetAttLine(). TAttLine * TGraphMultiErrors::GetAttLine ; (; Int_t ; e). virtual . Get AttLine pointer for specified error dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:61044,error,errors,61044,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Bool_tSectionsValid(UInt_t mask) const; voidSetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLocalMasterIdentity(); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); voidSetSectionsValid(UInt_t mask); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tType() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBuffer3D.html:13349,mask,mask,13349,root/html534/TBuffer3D.html,https://root.cern,https://root.cern/root/html534/TBuffer3D.html,1,['mask'],['mask']
Availability,"deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. const char * GetMssUrl(Bool_t = kFALSE); Gets the URL to be prepended to paths when accessing the MSS associated; with the connected cluster, if any. The information is retrieved from; the cluster the first time or if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:11678,error,error,11678,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,3,['error'],['error']
Availability,"delines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using a TSelector with PROOF. For people having a multi (e.g. dual) core computer, it is possible to exploit all the available CPUs by using PROOF-Lite. N.B. PROOF-Lite doesn't work on Windows yet and it requires to use a selector composed of a source file and a header file. You can download both files from there: ProofEventSelector.h ProofEventSelector.C or on the linux terminal. wget https://raw.githubusercontent.com/root-mirror/training/master/old-files/ProofEventSelector.C; wget https://raw.githubusercontent.com/root-mirror/training/master/old-files/ProofEventSelector.h. Then you can simply use it like this:; TProof::Open("""");; // create a TChain instead of a TTree; TChain *chain = new TChain(""EventTree"", ""Event Data Chain"");; // add our file; chain->Add(""http://root.cern/files/introtutorials/eventdata.root"");; // tell the chain that we want to use PROOF; chain->SetProof();; // run the selector; chain->Process(""ProofEventSelector.C+"");. For the functions used, see the documentation of the TChain constructor and TChain::Add().; You need to register the histogram in your selector's output list, by passing it to GetOutputList()->Add(hist), ideally right after you have created it with new TH1F(...). If you don't add it to the output list, PROOF cannot know that this histogram is the r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-tselector-proof.html:2198,down,download,2198,d/using-tselector-proof.html,https://root.cern,https://root.cern/d/using-tselector-proof.html,1,['down'],['download']
Availability,"dence intervals are computed for each bin center; The bin content of this bin is then set to the function value at the bin; center, and the bin error is set to the confidence interval value.; NOTE: confidence intervals are approximate for nonlinear models!. Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; get the error matrix in a pointer to a NxN array.; excluding the fixed parameters. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; get error matrix element. Int_t GetErrors(Int_t ipar, Double_t& eplus, Double_t& eminus, Double_t& eparab, Double_t& globcc) const; get fit errors. Int_t GetNumberTotalParameters() const; number of total parameters. Int_t GetNumberFreeParameters() const; number of variable parameters. Double_t GetParError(Int_t ipar) const; parameter error. Double_t GetParameter(Int_t ipar) const; parameter value. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& verr, Double_t& vlow, Double_t& vhigh) const; get all parameter info (name, value, errors). const char * GetParName(Int_t ipar) const; return name of parameter ipar. Int_t GetStats(Double_t& amin, Double_t& edm, Double_t& errdef, Int_t& nvpar, Int_t& nparx) const; get fit statistical information. Double_t GetSumLog(Int_t i); sum of log . Un-needed. Bool_t IsFixed(Int_t ipar) const; query if parameter ipar is fixed. void PrintResults(Int_t level, Double_t amin) const; print the fit result; use PrintResults function in case of Minuit for old -style printing. void ReleaseParameter(Int_t ipar); release a fit parameter. void SetFitMethod(const char* name); set fit method (i.e. chi2 or likelihood); according to the method the appropriate FCN function will be created. Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBackCompFitter.html:14981,error,error,14981,root/html526/TBackCompFitter.html,https://root.cern,https://root.cern/root/html526/TBackCompFitter.html,1,['error'],['error']
Availability,"dent variables. This class TMultiDimFit implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package; [2]. Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit. In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based on Winds discussion, and I refer these two excellents; text for more information. And example of usage is given in; $ROOTSYS/tutorials/fit/multidimfit.C. The Method. Let by the dependent quantity of interest, which depends smoothly; on the observable quantities ; , which we'll denote by. . Given a training sample of tuples of the form,; (TMultiDimFit::AddRow). where ; are independent; variables, is the known, quantity dependent at ; ,; and is the square error in , the class; TMultiDimFit; will; try to find the parameterization. (1). such that. (2). is minimal. Here ; are monomials, or Chebyshev or Legendre; polynomials, labelled ; , in each variable; , ; . So what TMultiDimFit does, is to determine the number of; terms , and then terms (or functions) , and the ; coefficients , so that is minimal; (TMultiDimFit::FindParameterization). Of course it's more than a little unlikely that will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error ; (TMultiDimFit::SetMinRelativeError), and ; will be considered minimized when. Optionally, the user may impose a functional expression by specifying; the powers of each variable in specified functions ; (TMultiDimFit::SetPowers). In that case, only the; coefficients is calculated by the class. Limiting the Number of Terms. As always when dealing with fits, there's a real chance of; over fitting. As is well-kno",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:2514,error,error,2514,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['error'],['error']
Availability,"dentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:10251,error,error,10251,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['error'],['error']
Availability,"dentLevel(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static Bool_tInitialized(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsBatch() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; Bool_tIsEscaped() const; Bool_tIsExecutingMacro() const; virtual Bool_tIsFolder() const; Bool_tIsInterrupted() const; Bool_tIsLineProcessing() const; virtual Bool_tTDirectory::IsModified() const; Bool_tTObject::IsOnHeap() const; Bool_tIsProofServ() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDirectory::IsWritable() const; Bool_tTObject::IsZombie() const; TClass*LoadClass(const char* name, Bool_t silent = kFALSE) const; Int_tLoadClass(const char* classname, const char* libname, Bool_t check = kFALSE); Int_tLoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); virtual voidls(Option_t* option = """") const; Long_tMacro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:10309,error,error,10309,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,3,['error'],['error']
Availability,"depending on type of branch. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all leaves of entry and return total number of bytes read. The input argument ""entry"" is the entry number in the current tree.; In case of a TChain, the entry number in the current Tree must be found; before calling this function. For example:. TChain* chain = ...;; Long64_t localEntry = chain->LoadTree(entry);; branch->GetEntry(localEntry);. The function returns the number of bytes read from the input buffer.; If entry does not exist, the function returns 0.; If an I/O error occurs, the function returns -1. See IMPORTANT REMARKS in TTree::GetEntry. Int_t GetEntryExport(Long64_t entry, Int_t getall, TClonesArray* list, Int_t n); Read all leaves of an entry and export buffers to real objects in a TClonesArray list. Returns total number of bytes read. Int_t GetExpectedType(TClass*& clptr, EDataType& type); Fill expectedClass and expectedType with information on the data type of the; object/values contained in this branch (and thus the type of pointers; expected to be passed to Set[Branch]Address; return 0 in case of success and > 0 in case of failure. TFile* GetFile(Int_t mode = 0); Return pointer to the file where branch buffers reside, returns 0; in case branch buffers reside in the same file as tree header.; If mode is 1 the branch buffer file is recreated. TBasket* GetFreshBasket(); Return a fresh basket by either resusing an existing basket that needs; to be drop (according to TTree::MemoryFull) or create a new one. TLeaf* GetLeaf(const char* name) const; *Return pointer to the 1st Leaf named name in thisBranch; *-* =======================================================. TString GetRealFileName() const. Int_t GetRow(Int_t row); -*-*-*Return all elements of one row unpacked in internal array fValues; *-* =================================================================. Bool_t GetMakeClass() const; Return whether this branch is in a mode where the object are decomposed; or not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranch.html:21924,failure,failure,21924,root/html530/TBranch.html,https://root.cern,https://root.cern/root/html530/TBranch.html,1,['failure'],['failure']
Availability,"depending on type of branch. Int_t GetEntry(Long64_t entry = 0, Int_t getall = 0); Read all leaves of entry and return total number of bytes read. The input argument ""entry"" is the entry number in the current tree.; In case of a TChain, the entry number in the current Tree must be found; before calling this function. For example:. TChain* chain = ...;; Long64_t localEntry = chain->LoadTree(entry);; branch->GetEntry(localEntry);. The function returns the number of bytes read from the input buffer.; If entry does not exist, the function returns 0.; If an I/O error occurs, the function returns -1. See IMPORTANT REMARKS in TTree::GetEntry. Int_t GetEntryExport(Long64_t entry, Int_t getall, TClonesArray* list, Int_t n); Read all leaves of an entry and export buffers to real objects in a TClonesArray list. Returns total number of bytes read. Int_t GetExpectedType(TClass*& clptr, EDataType& type); Fill expectedClass and expectedType with information on the data type of the; object/values contained in this branch (and thus the type of pointers; expected to be passed to Set[Branch]Address; return 0 in case of success and > 0 in case of failure. TFile* GetFile(Int_t mode = 0); Return pointer to the file where branch buffers reside, returns 0; in case branch buffers reside in the same file as tree header.; If mode is 1 the branch buffer file is recreated. TBasket* GetFreshBasket(); Return a fresh basket by either resusing an existing basket that needs; to be drop (according to TTree::MemoryFull) or create a new one. TLeaf* GetLeaf(const char* name) const; Return pointer to the 1st Leaf named name in thisBranch. TString GetRealFileName() const. Int_t GetRow(Int_t row); Return all elements of one row unpacked in internal array fValues; [Actually just returns 1 (?)]. Bool_t GetMakeClass() const; Return whether this branch is in a mode where the object are decomposed; or not (Also known as MakeClass mode). TBranch* GetMother() const; Get our top-level parent branch in the tree. TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBranch.html:19710,failure,failure,19710,root/html532/TBranch.html,https://root.cern,https://root.cern/root/html532/TBranch.html,4,['failure'],['failure']
Availability,"der based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  Legendre.py Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C This program demonstrates the computation of 95 % C.L ;  mathBeta.C Test the TMath::BetaDist and TMath::BetaDistI functions ;  mathcoreCDF.C Example describing how to use the different cumulative distribution functions in ROOT ;  mathcoreGenVector.C Example macro testing available methods and operation of the GenVector classes ;  mathcoreSpecFunc.C Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments ;  mathcoreStatFunc.C Example macro showing some major probability density functions in ROOT ;  mathcoreStatFunc.py Example macro showing some major probability density functions in ROOT ;  mathcoreVectorCollection.C Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree ;  mathcoreVectorFloatIO.C Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CINT ;  mathcoreVectorIO.C Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector ;  mathGammaNormal.C Tutorial illustrating the use of TMath::GammaDist and TMath::LogNormal ;  mathLaplace.C Test the TMath::LaplaceDist and TMath::LaplaceDistI func",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:130575,avail,available,130575,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['avail'],['available']
Availability,"der file for class GSLMultiRootFinder; 26//; 27 ; 28#ifndef ROOT_Math_GSLMultiRootFinder; 29#define ROOT_Math_GSLMultiRootFinder; 30 ; 31 ; 32 ; 33#include ""Math/IFunction.h""; 34 ; 35#include ""Math/WrappedFunction.h""; 36 ; 37#include <vector>; 38#include <utility>; 39#include <iostream>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44 ; 45 class GSLMultiRootBaseSolver;; 46 ; 47 /** @defgroup MultiRoot Multidimensional ROOT finding; 48 Classes for finding the roots of a multi-dimensional system.; 49 @ingroup NumAlgo; 50 */; 51 ; 52 /**; 53 Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; 54 non-linear system of equations:; 55 ; 56 f1(x1,....xn) = 0; 57 f2(x1,....xn) = 0; 58 ..................; 59 fn(x1,....xn) = 0; 60 ; 61 See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; 62 information on the GSL MultiRoot finding algorithms; 63 ; 64 The available GSL algorithms require the derivatives of the supplied functions or not (they are; 65 computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; 66 gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; 67 functions impelmenting the ROOT::Math::IMultiGenFunction interface.; 68 The available algorithms requiring derivatives (see also the GSL; 69 <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); 70 are the followings:; 71 <ul>; 72 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; 73 method as implemented in HYBRJ in MINPACK; 74 <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; 75 previous algorithm</li>; 76 <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html:2321,avail,available,2321,doc/master/GSLMultiRootFinder_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8h_source.html,1,['avail'],['available']
Availability,"der file for the class described by this TStreamerInfo the function is called by TFile::MakeProject for each class in the file. ; Implements TVirtualStreamerInfo.; Definition at line 4007 of file TStreamerInfo.cxx. ◆ GenerateIncludes(). UInt_t TStreamerInfo::GenerateIncludes ; (; FILE * ; fp, . char * ; inclist, . const TList * ; extrainfos . ). private . Add to the header file, the #include need for this class. ; Definition at line 3930 of file TStreamerInfo.cxx. ◆ GenerateInfoForPair() [1/2]. TVirtualStreamerInfo * TStreamerInfo::GenerateInfoForPair ; (; const std::string & ; firstname, . const std::string & ; secondname, . bool ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). overridevirtual . Generate the TClass and TStreamerInfo for the requested pair. ; This creates a TVirtualStreamerInfo for the pair and trigger the BuildCheck/Old to provoke the creation of the corresponding TClass. This relies on the dictionary for std::pair<const int, int> to already exist (or the interpreter information being available) as it is used as a template. NoteThe returned object is owned by the caller. ; Implements TVirtualStreamerInfo.; Definition at line 5768 of file TStreamerInfo.cxx. ◆ GenerateInfoForPair() [2/2]. TVirtualStreamerInfo * TStreamerInfo::GenerateInfoForPair ; (; const std::string & ; pairclassname, . bool ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). overridevirtual . Generate the TClass and TStreamerInfo for the requested pair. ; This creates a TVirtualStreamerInfo for the pair and trigger the BuildCheck/Old to provokes the creation of the corresponding TClass. This relies on the dictionary for std::pair<const int, int> to already exist (or the interpreter information being available) as it is used as a template. NoteThe returned object is owned by the caller. ; Implements TVirtualStreamerInfo.; Definition at line 5837 of file TStreamerInfo.cxx. ◆ GenExplicitClassStreamer(). TClassStreamer * TStreamerInfo::GenExplicit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:42397,avail,available,42397,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['avail'],['available']
Availability,"der(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). Data Members; public:. enum { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intfFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intfMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intfReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileHandler(int fd, int mask); Create a file descriptor event handler. If mask=kRead then we; want to monitor the file for read readiness, if mask=kWrite; then we monitor the file for write readiness, if mask=kRead|kWrite; then we monitor both read and write readiness. Bool_t Notify(); Notify when event occured on descriptor associated with this handler. Bool_t ReadNotify(); Notify when something can be read from the descriptor associated with; this handler. Bool_t WriteNotify(); Notify when something can be written to the descriptor associated with; this handler. Bool_t HasReadInterest(); True if handler is interested in read events. Bool_t HasWriteInterest(); True if handler is interested in write events. void SetInterest(Int_t mask); Set interest mask to 'mask'. void Add(); Add file event handler to system file handler list. void Remove(); Remove file event handler from system file handler list. TFileHandler(); { }. virtual ~TFileHandler(); { Remove(); }. int GetFd() const; { return fFileNum; }. void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileHandler.html:9672,mask,mask,9672,root/html528/TFileHandler.html,https://root.cern,https://root.cern/root/html528/TFileHandler.html,4,['mask'],['mask']
Availability,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3694 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3582 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 455 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 445 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:141625,error,errors,141625,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['error'],['errors']
Availability,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:143462,error,errors,143462,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['errors']
Availability,"derivative using a forward formula. ;  ; double DerivativeBackward (double x);  Computation of the first derivative using a backward formula. ;  ; double DerivativeForward (const IGenFunction &f, double x, double h);  Computation of the first derivative using a forward formula. ;  ; double DerivativeForward (double x);  Computation of the first derivative using a forward formula. ;  ; double Error () const;  Returns the estimate of the absolute Error of the last derivative calculation. ;  ; double operator() (double x);  ; RichardsonDerivator & operator= (const RichardsonDerivator &rhs);  Assignment operator. ;  ; void SetFunction (const IGenFunction &f);  Set function for derivative calculation (copy the function if option has been enabled in the constructor) ;  ; void SetStepSize (double h);  Set step size for derivative calculation. ;  . Protected Attributes; const IGenFunction * fFunction;  pointer to function ;  ; bool fFunctionCopied;  flag to control if function is copied in the class ;  ; double fLastError;  error estimate of last derivative calculation ;  ; double fStepSize;  step size used for derivative calculation ;  . #include <Math/RichardsonDerivator.h>; Constructor & Destructor Documentation. ◆ ~RichardsonDerivator(). ROOT::Math::RichardsonDerivator::~RichardsonDerivator ; (; ). Destructor: Removes function if needed. ; Definition at line 43 of file RichardsonDerivator.cxx. ◆ RichardsonDerivator() [1/3]. ROOT::Math::RichardsonDerivator::RichardsonDerivator ; (; double ; h = 0.001). Default Constructor. ; Give optionally the step size for derivation. By default is 0.001, which is fine for x ~ 1 Increase if x is in average larger or decrease if x is smaller ; Definition at line 23 of file RichardsonDerivator.cxx. ◆ RichardsonDerivator() [2/3]. ROOT::Math::RichardsonDerivator::RichardsonDerivator ; (; const ROOT::Math::IGenFunction & ; f, . double ; h = 0.001, . bool ; copyFunc = false . ). Construct from function and step size. ; Definition at line 31 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html:4303,error,error,4303,doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RichardsonDerivator.html,1,['error'],['error']
Availability,"des(); voidTObject::AbstractMethod(const char* method) const; Int_tActivateWorkers(Int_t nwrks); Int_tActivateWorkers(const char* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMap*GetMapOfActiveNodes() const; TMap*GetMapOfNodes() const; Int_tGetMaxWrksPerNode() const; Int_tGetMinWrksPerNode() const; Int_tGetNActives() const; virtual const char*TObject::GetName() const; Int_tGetNCores() const; Int_tGetNNodes() const; Int_tGetNWorkersCluster() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofNodes.html:1455,error,error,1455,root/html534/TProofNodes.html,https://root.cern,https://root.cern/root/html534/TProofNodes.html,3,['error'],['error']
Availability,"des(); voidTObject::AbstractMethod(const char* method) const; Int_tActivateWorkers(Int_t nwrks); Int_tActivateWorkers(const char* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMap*GetMapOfActiveNodes() const; TMap*GetMapOfNodes() const; Int_tGetMaxWrksPerNode() const; Int_tGetMinWrksPerNode() const; Int_tGetNActives() const; virtual const char*TObject::GetName() const; Int_tGetNNodes() const; Int_tGetNWorkersCluster() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofNodes.html:1455,error,error,1455,root/html530/TProofNodes.html,https://root.cern,https://root.cern/root/html530/TProofNodes.html,2,['error'],['error']
Availability,"desError(). virtual bool ROOT::Math::Minimizer::ProvidesError ; (; ); const. inlinevirtual . minimizer provides error and error matrix ; Reimplemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, TLinearMinimizer, TMinuitMinimizer, ROOT::Minuit2::Minuit2Minimizer, and ROOT::Math::RMinimizer.; Definition at line 243 of file Minimizer.h. ◆ ReleaseVariable(). bool ROOT::Math::Minimizer::ReleaseVariable ; (; unsigned int ; ivar). virtual . release an existing variable ; Reimplemented in ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 94 of file Minimizer.cxx. ◆ Scan(). bool ROOT::Math::Minimizer::Scan ; (; unsigned int ; ivar, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). virtual . scan function minimum for variable i. ; Variable and function must be set before using Scan Return false if an error or if minimizer does not support this functionality ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 195 of file Minimizer.cxx. ◆ SetCovariance(). bool ROOT::Math::Minimizer::SetCovariance ; (; std::span< const double > ; cov, . unsigned int ; nrow . ). virtual . set initial covariance matrix ; set initial values for covariance/error matrix The covariance matrix must be provided in compressed form (row-major ordered upper traingular part) ; Reimplemented in ROOT::Minuit2::Minuit2Minimizer.; Definition at line 25 of file Minimizer.cxx. ◆ SetCovarianceDiag(). bool ROOT::Math::Minimizer::SetCovarianceDiag ; (; std::span< const double > ; d2, . unsigned int ; n . ). virtual . set initial second derivatives ; Reimplemented in ROOT::Minuit2::Minuit2Minimizer.; Definition at line 15 of file Minimizer.cxx. ◆ SetDefaultOptions(). void ROOT::Math::Minimizer::SetDefaultOptions ; (; ). inline . reset the default options (defined in MinimizerOptions) ; Definition at line 361 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:26608,error,error,26608,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['error'],['error']
Availability,"destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; IMethod * BookMVA (Types::EMVA method, const TString &weightfile);  books MVA method from weightfile ;  ; void DeclareOptions ();  declaration of configuration options ;  ; void DecodeVarNames (const std::string &varNames);  decodes ""name1:name2:..."" form ;  ; void DecodeVarNames (const TString &varNames);  decodes ""name1:name2:..."" form ;  ; TString GetMethodTypeFromFile (const TString &filename);  read the method type from the file ;  ; void Init (void);  default initialisation (no member variables) ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fCalculateError;  error calculation mode ;  ; Bool_t fColor;  color mode ;  ; DataInputHandler fDataInputHandler;  ; DataSetInfo fDataSetInfo;  ; DataSetManager * fDataSetManager;  ; MsgLogger * fLogger;  ! message logger ;  ; std::map< TString, IMethod * > fMethodMap;  map of methods ;  ; Double_t fMvaEventError;  per-event error returned by MVA ;  ; Double_t fMvaEventErrorUpper;  per-event error returned by MVA ;  ; Bool_t fSilent;  silent mode ;  ; std::vector< Float_t > fTmpEvalVec;  temporary evaluation vector (if user input is v<double>) ;  ; Bool_t fVerbose;  verbosity ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Reader.html:18696,error,error,18696,doc/master/classTMVA_1_1Reader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Reader.html,3,['error'],['error']
Availability,"devirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 2643 of file TWinNTSystem.cxx. ◆ GetPeerName(). TInetAddress TWinNTSystem::GetPeerName ; (; int ; sock). overridevirtual . Get Internet Protocol (IP) address of remote host and port #. ; Reimplemented from TSystem.; Definition at line 4743 of file TWinNTSystem.cxx. ◆ GetPid(). int TWinNTSystem::GetPid ; (; ). overridevirtual . Get process id. ; Reimplemented from TSystem.; Definition at line 3897 of file TWinNTSystem.cxx. ◆ GetProcess(). HANDLE TWinNTSystem::GetProcess ; (; ). Get current process handle. ; Definition at line 3905 of file TWinNTSystem.cxx. ◆ GetProcInfo(). Int_t TWinNTSystem::GetProcInfo ; (; ProcInfo_t * ; info); const. overridevirtual . Returns cpu and memory used by this process into the ProcInfo_t structure. ; Returns -1 in case of error, 0 otherwise. ; Reimplemented from TSystem.; Definition at line 6155 of file TWinNTSystem.cxx. ◆ GetRealTime(). Double_t TWinNTSystem::GetRealTime ; (; ). Definition at line 4487 of file TWinNTSystem.cxx. ◆ GetServiceByName(). int TWinNTSystem::GetServiceByName ; (; const char * ; service). overridevirtual . Get port # of internet service. ; Reimplemented from TSystem.; Definition at line 4659 of file TWinNTSystem.cxx. ◆ GetServiceByPort(). char * TWinNTSystem::GetServiceByPort ; (; int ; port). overridevirtual . Get name of internet service. ; Reimplemented from TSystem.; Definition at line 4673 of file TWinNTSystem.cxx. ◆ GetSockName(). TInetAddress TWinNTSystem::GetSockName ; (; int ; sock). overridevirtual . Get Internet Protocol (IP) address of host and port #. ; Reimplemented from TSystem.; Definition at line 4776 of file TWinNTSystem.cxx. ◆ GetSockOpt(). int TWinNTSystem::GetSockOpt ; (; int ; sock, . int ; opt, . int * ; val . ). overridevirtual . Get socket option. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:56016,error,error,56016,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['error'],['error']
Availability,"devirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCondition::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TCondition.h. ◆ TimedWait(). Int_t TCondition::TimedWait ; (; ULong_t ; secs, . ULong_t ; nanoSec . ). Wait to be signaled or till the timer times out. ; This method is given an absolute time since the beginning of the EPOCH (use TThread::GetTime() to get this absolute time). To wait for a relative time from now, use TCondition::TimedWaitRelative(ULong_t ms). Returns 0 if successfully signalled, 1 if time expired and -1 in case of error. ; Definition at line 95 of file TCondition.cxx. ◆ TimedWaitRelative(). Int_t TCondition::TimedWaitRelative ; (; ULong_t ; ms). Wait to be signaled or till the timer times out. ; This method is given a relative time from now. To wait for an absolute time since the beginning of the EPOCH, use TCondition::TimedWait(ULong_t secs, ULong_t nanoSec). Returns 0 if successfully signalled, 1 if time expired and -1 in case of error. ; Definition at line 114 of file TCondition.cxx. ◆ Wait(). Int_t TCondition::Wait ; (; ). Wait to be signaled. ; Definition at line 75 of file TCondition.cxx. Friends And Related Symbol Documentation. ◆ TThread. friend class TThread. friend . Definition at line 34 of file TCondition.h. Member Data Documentation. ◆ fConditionImp. TConditionImp* TCondition::fConditionImp. private . Definition at line 37 of file TCondition.h. ◆ fMutex. TMutex* TCondition::fMutex. private . Definition at line 38 of file TCondition.h. ◆ fPrivateMutex. Bool_t TCondition::fPrivateMutex. private . Definition at line 39 of file TCondition.h. Libraries for TCondition:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/TCondition.h; core/thread/src/TCondition.cxx. TCondition. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCondition.html:13805,error,error,13805,doc/master/classTCondition.html,https://root.cern,https://root.cern/doc/master/classTCondition.html,1,['error'],['error']
Availability,"dex) const. double GetYError(int index) const. HypoTestResult* GetResult(int index) const. double FindInterpolatedLimit(double target). int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(); std::cout << ""finding point with cl = "" << 1-(1-ConfidenceLevel())/2 << endl;. Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::LowerLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. Double_t UpperLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::UpperLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverterResult.h 31798 2009-12-10 14:57:15Z moneta $ » Last generated: 2009-12-10 16:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html:9130,error,error,9130,root/html526/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"dex) const. double GetYError(int index) const. HypoTestResult* GetResult(int index) const. double FindInterpolatedLimit(double target). int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(); std::cout << ""finding point with cl = "" << 1-(1-ConfidenceLevel())/2 << endl;. Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::LowerLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. Double_t UpperLimitEstimatedError(); std::cout << ""The HypoTestInverterResult::UpperLimitEstimatedError() function evaluates only a rought error on the upper limit. Be careful when using this estimation\n"";. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverterResult.h 36230 2010-10-09 20:21:02Z wouter $ » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HypoTestInverterResult.html:9130,error,error,9130,root/html528/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"df . Must be called after setting the function ; Definition at line 276 of file DistSampler.h. ◆ Sample() [1/2]. const double * ROOT::Math::DistSampler::Sample ; (; ). inline . Sample one event and return an array x with sample coordinates values. ; Definition at line 193 of file DistSampler.h. ◆ Sample() [2/2]. virtual bool ROOT::Math::DistSampler::Sample ; (; double * ; x). pure virtual . Sample one event in multi-dimension by filling the given array. ; Return false if the sampling failed. Abstract method to be re-implemented by the derived classes ; Implemented in TFoamSampler, and TUnuranSampler. ◆ Sample1D(). virtual double ROOT::Math::DistSampler::Sample1D ; (; ). inlinevirtual . Sample one event in one dimension. ; Specialized implementation could be provided by the derived classes ; Reimplemented in TUnuranSampler.; Definition at line 184 of file DistSampler.h. ◆ SampleBin(). virtual bool ROOT::Math::DistSampler::SampleBin ; (; double ; prob, . double & ; value, . double * ; error = nullptr . ). inlinevirtual . Sample one bin given an estimate of the pdf in the bin. ; (this can be function value at the center or its integral in the bin divided by the bin width) By default do not do random sample, just return the function values Typically Poisson statistics will be used ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 212 of file DistSampler.h. ◆ SampleBins(). virtual bool ROOT::Math::DistSampler::SampleBins ; (; unsigned int ; n, . const double * ; prob, . double * ; values, . double * ; errors = nullptr . ). inlinevirtual . Sample a set of bins given a vector of probabilities Typically multinomial statistics will be used and the sum of the probabilities will be equal to the total number of events to be generated For sampling the bins independently, SampleBin should be used. ; Definition at line 223 of file DistSampler.h. ◆ SetArea(). virtual void ROOT::Math::DistSampler::SetArea ; (; double ; ). inlinevirtual . Set the normalization a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:11011,error,error,11011,doc/master/classROOT_1_1Math_1_1DistSampler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html,1,['error'],['error']
Availability,"df::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.186765 cHl3=8.8591 cHq3=-0.971282; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-6.32705, denominator=wrap_pdf_Int[pTV]=46316; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.218731 cHl3=0.37397 cHq3=-2.08166; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=3.22694 cHl3=-7.04051 cHq3=0.54016; Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:11115,error,error,11115,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['error'],['error']
Availability,"dflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; UInt_tTGFrame::fHeightframe height; Pixel_tfHighColorhighlight color; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; const TGPicture*fPicpicture in scrollbar element; const TGPicture*fPicDpicture for disabled state of scrollbar element; const TGPicture*fPicNpicture for normal state of scrollbar element; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tfStatestate of scrollbar element (button up or down); Int_tfStylemodern or classic style; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGScrollBarElement.html:16966,down,down,16966,root/html530/TGScrollBarElement.html,https://root.cern,https://root.cern/root/html530/TGScrollBarElement.html,3,['down'],['down']
Availability,"dfs.s ;  ; file  rf303_conditional.py;   'MULTIDIMENSIONAL MODELS' RooFit tutorial macro #303 Use of tailored p.d.f as conditional p.d.fs.s ;  ; file  rf304_uncorrprod.C;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf304_uncorrprod.py;   Multidimensional models: simple uncorrelated multi-dimensional pdfs ;  ; file  rf305_condcorrprod.C;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf305_condcorrprod.py;   Multidimensional models: multi-dimensional pdfs with conditional pdfs in product ;  ; file  rf306_condpereventerrors.C;   Multidimensional models: conditional pdf with per-event errors ;  ; file  rf306_condpereventerrors.py;   Multidimensional models: complete example with use of conditional pdf with per-event errors ;  ; file  rf307_fullpereventerrors.C;   Multidimensional models: full pdf with per-event errors ;  ; file  rf307_fullpereventerrors.py;   Multidimensional models: usage of full pdf with per-event errors ;  ; file  rf308_normintegration2d.C;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf308_normintegration2d.py;   Multidimensional models: normalization and integration of pdfs, construction of cumulative distribution functions from pdfs in two dimensions ;  ; file  rf309_ndimplot.C;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf309_ndimplot.py;   Multidimensional models: making 2/3 dimensional plots of pdfs and datasets ;  ; file  rf310_sliceplot.C;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf310_sliceplot.py;   Multidimensional models: projecting pdf and data slices in discrete observables ;  ; file  rf311_rangeplot.C;   Multidimensional models: projecting pdf and data ranges in continuous observables ;  ; file  rf311_rangeplot.py;   Multidimensional models: project",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:7782,error,errors,7782,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['error'],['errors']
Availability,"dget::isMaximized() const; boolQWidget::isMinimized() const; boolQWidget::isModal() const; boolQWidget::isRightToLeft() const; Bool_tIsSignalEventEnabled(UInt_t f) const; boolQWidget::isTopLevel() const; boolQWidget::isVisible() const; boolQWidget::isVisibleTo(QWidget*) const; boolQObject::isWidgetType() const; boolQWidget::isWindow() const; boolQWidget::isWindowModified() const; static QWidget*QWidget::keyboardGrabber(); voidQObject::killTimer(int id); QLayout*QWidget::layout() const; Qt::LayoutDirectionQWidget::layoutDirection() const; QLocaleQWidget::locale() const; intQPaintDevice::logicalDpiX() const; intQPaintDevice::logicalDpiY() const; voidQWidget::lower(); QPointQWidget::mapFrom(QWidget*, const QPoint&) const; QPointQWidget::mapFromGlobal(const QPoint&) const; QPointQWidget::mapFromParent(const QPoint&) const; QPointQWidget::mapTo(QWidget*, const QPoint&) const; QPointQWidget::mapToGlobal(const QPoint&) const; QPointQWidget::mapToParent(const QPoint&) const; QRegionQWidget::mask() const; intQWidget::maximumHeight() const; QSizeQWidget::maximumSize() const; intQWidget::maximumWidth() const; virtual const QMetaObject*metaObject() const; intQWidget::minimumHeight() const; QSizeQWidget::minimumSize() const; virtual QSizeminimumSizeHint() const; intQWidget::minimumWidth() const; static QWidget*QWidget::mouseGrabber(); voidQWidget::move(const QPoint&); voidQWidget::move(int x, int y); voidQObject::moveToThread(QThread* thread); QWidget*QWidget::nativeParentWidget() const; QWidget*QWidget::nextInFocusChain() const; QRectQWidget::normalGeometry() const; intQPaintDevice::numColors() const; QStringQObject::objectName() const; voidQWidget::overrideWindowFlags(Qt::WindowFlags type); voidQWidget::overrideWindowState(Qt::WindowStates state); virtual QPaintEngine*QWidget::paintEngine() const; boolQPaintDevice::paintingActive() const; const QPalette&QWidget::palette() const; QObject*QObject::parent() const; QWidget*QWidget::parentWidget() const; intQPaintDevice::physicalDpi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQtWidget.html:9409,mask,mask,9409,root/html602/TQtWidget.html,https://root.cern,https://root.cern/root/html602/TQtWidget.html,2,['mask'],['mask']
Availability,diDecorFrame::SetWindowIcon ; (; const TGPicture * ; pic). Set Window icon (appearing in the title bar) ; Definition at line 257 of file TGMdiDecorFrame.cxx. ◆ SetWindowName(). void TGMdiDecorFrame::SetWindowName ; (; const char * ; name). overridevirtual . Set MDI Window name (appearing in the title bar) ; Reimplemented from TGWindow.; Definition at line 248 of file TGMdiDecorFrame.cxx. ◆ Streamer(). void TGMdiDecorFrame::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGMdiDecorFrame::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 319 of file TGMdiDecorFrame.h. Friends And Related Symbol Documentation. ◆ TGMdiMainFrame. friend class TGMdiMainFrame. friend . Definition at line 231 of file TGMdiDecorFrame.h. Member Data Documentation. ◆ fButtonMask. ULong_t TGMdiDecorFrame::fButtonMask. protected . mask used to display/hide buttons ; Definition at line 250 of file TGMdiDecorFrame.h. ◆ fExpandHint. TGLayoutHints * TGMdiDecorFrame::fExpandHint. protected . layout hints ; Definition at line 248 of file TGMdiDecorFrame.h. ◆ fFrame. TGMdiFrame* TGMdiDecorFrame::fFrame. protected . parent (owner) MDI frame ; Definition at line 241 of file TGMdiDecorFrame.h. ◆ fIsCurrent. Bool_t TGMdiDecorFrame::fIsCurrent. protected . current mdi window flag ; Definition at line 239 of file TGMdiDecorFrame.h. ◆ fIsMaximized. Bool_t TGMdiDecorFrame::fIsMaximized. protected . minimized and maximized flags ; Definition at line 237 of file TGMdiDecorFrame.h. ◆ fIsMinimized. Bool_t TGMdiDecorFrame::fIsMinimized. protected . Definition at line 237 of file TGMdiDecorFrame.h. ◆ fLeftVR. TGMdiHorizontalWinResizer* TGMdiDecorFrame::fLeftVR. protected . Definition at line 247 of file TGMdiDecorFrame.h. ◆ fLHint. TGLayoutHints* TGMdiDecorFrame::fLHint. protected . Definition at line 248 of file TGMdiDecorFrame.h. ◆ fLowerHR. TGMdiVerticalWinResizer * TGM,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiDecorFrame.html:42778,mask,mask,42778,doc/master/classTGMdiDecorFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiDecorFrame.html,1,['mask'],['mask']
Availability,"diamond""); l.DrawText(x2, y, ""\\diamond"");; y -= step ; l.DrawMathText(x1, y, ""\\diamondsuit""); l.DrawText(x2, y, ""\\diamondsuit"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\div""); l.DrawText(x2, y, ""\\div"");; y -= step ; l.DrawMathText(x1, y, ""\\divideontimes""); l.DrawText(x2, y, ""\\divideontimes"");; y -= step ; l.DrawMathText(x1, y, ""\\doteq""); l.DrawText(x2, y, ""\\doteq"");; y -= step ; l.DrawMathText(x1, y, ""\\doteqdot""); l.DrawText(x2, y, ""\\doteqdot"");; y -= step ; l.DrawMathText(x1, y, ""\\dotplus""); l.DrawText(x2, y, ""\\dotplus"");; y -= step ; l.DrawMathText(x1, y, ""\\doublebarwedge""); l.DrawText(x2, y, ""\\doublebarwedge"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecap""); l.DrawText(x2, y, ""\\doublecap"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecup""); l.DrawText(x2, y, ""\\doublecup"");; y -= step ; l.DrawMathText(x1, y, ""\\downarrow""); l.DrawText(x2, y, ""\\downarrow"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownarrows""); l.DrawText(x2, y, ""\\downdownarrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownharpoons""); l.DrawText(x2, y, ""\\downdownharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonleft""); l.DrawText(x2, y, ""\\downharpoonleft"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonright""); l.DrawText(x2, y, ""\\downharpoonright"");; y -= step ; l.DrawMathText(x1, y, ""\\downuparrows""); l.DrawText(x2, y, ""\\downuparrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downupharpoons""); l.DrawText(x2, y, ""\\downupharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\ell""); l.DrawText(x2, y, ""\\ell"");; y -= step ; l.DrawMathText(x1, y, ""\\emptyset""); l.DrawText(x2, y, ""\\emptyset"");; y -= step ; l.DrawMathText(x1, y, ""\\epsilon""); l.DrawText(x2, y, ""\\epsilon"");; y -= step ; l.DrawMathText(x1, y, ""\\eqcirc""); l.DrawText(x2, y, ""\\eqcirc"");. // Draw 3rd Column; y = 0.99; step = 0.0126; x1 = 0.27; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMathText.html:14819,down,downarrow,14819,root/html602/TMathText.html,https://root.cern,https://root.cern/root/html602/TMathText.html,2,['down'],['downarrow']
Availability,"diamond""); l.DrawText(x2, y, ""\\diamond"");; y -= step ; l.DrawMathText(x1, y, ""\\diamondsuit""); l.DrawText(x2, y, ""\\diamondsuit"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\div""); l.DrawText(x2, y, ""\\div"");; y -= step ; l.DrawMathText(x1, y, ""\\divideontimes""); l.DrawText(x2, y, ""\\divideontimes"");; y -= step ; l.DrawMathText(x1, y, ""\\doteq""); l.DrawText(x2, y, ""\\doteq"");; y -= step ; l.DrawMathText(x1, y, ""\\doteqdot""); l.DrawText(x2, y, ""\\doteqdot"");; y -= step ; l.DrawMathText(x1, y, ""\\dotplus""); l.DrawText(x2, y, ""\\dotplus"");; y -= step ; l.DrawMathText(x1, y, ""\\doublebarwedge""); l.DrawText(x2, y, ""\\doublebarwedge"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecap""); l.DrawText(x2, y, ""\\doublecap"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecup""); l.DrawText(x2, y, ""\\doublecup"");; y -= step ; l.DrawMathText(x1, y, ""\\downarrow""); l.DrawText(x2, y, ""\\downarrow"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownarrows""); l.DrawText(x2, y, ""\\downdownarrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownharpoons""); l.DrawText(x2, y, ""\\downdownharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonleft""); l.DrawText(x2, y, ""\\downharpoonleft"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonright""); l.DrawText(x2, y, ""\\downharpoonright"");; y -= step ; l.DrawMathText(x1, y, ""\\downuparrows""); l.DrawText(x2, y, ""\\downuparrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downupharpoons""); l.DrawText(x2, y, ""\\downupharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\ell""); l.DrawText(x2, y, ""\\ell"");; y -= step ; l.DrawMathText(x1, y, ""\\emptyset""); l.DrawText(x2, y, ""\\emptyset"");; y -= step ; l.DrawMathText(x1, y, ""\\epsilon""); l.DrawText(x2, y, ""\\epsilon"");; y -= step ; l.DrawMathText(x1, y, ""\\eqcirc""); l.DrawText(x2, y, ""\\eqcirc"");; ; // Draw 3rd Column; y = 0.99; step = 0.0126; x1 = 0.27",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMathText.html:14823,down,downarrow,14823,root/html534/TMathText.html,https://root.cern,https://root.cern/root/html534/TMathText.html,1,['down'],['downarrow']
Availability,"dim curve of the value of the specified real-valued expression; as a function of x. Use the optional precision parameter to control; how precisely the smooth curve is rasterized. Use the optional argument set; to specify how the expression should be normalized. Use the optional scale; factor to rescale the expression after normalization.; If shiftToZero is set, the entire curve is shift down to make the lowest; point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooAbsFunc& func, Double_t xlo, Double_t xhi, UInt_t minPoints, Double_t prec = 1e-3, Double_t resolution = 1e-3, Bool_t shiftToZero = kFALSE, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0); Create a 1-dim curve of the value of the specified real-valued; expression as a function of x. Use the optional precision; parameter to control how precisely the smooth curve is; rasterized. If shiftToZero is set, the entire curve is shift; down to make the lowest point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooCurve& c1, const RooCurve& c2, Double_t scale1 = 1., Double_t scale2 = 1.); Constructor of curve as sum of two other curves. Csum = scale1*c1 + scale2*c2. ~RooCurve(); Destructor. void initialize(); Perform initialization that is common to all curves. void shiftCurveToZero(Double_t prevYMax); Find lowest point in curve and move all points in curve so that; lowest point will go exactly through zero. void addPoints(const RooAbsFunc& func, Double_t xlo, Double_t xhi, Int_t minPoints, Double_t prec, Double_t resolution, RooCurve::WingMode wmode, Int_t numee = 0, Bool_t doEEVal = kFALSE, Double_t eeVal = 0., list<Double_t>* samplingHint = 0); Add points calculated with the specified function, over the range (xlo,xhi).; Add at least minPoints equally spaced points, and add sufficient points so that; the maximum deviation from the final straight-line segements is prec*(ymax-ymin),; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCurve.html:19002,down,down,19002,root/html526/RooCurve.html,https://root.cern,https://root.cern/root/html526/RooCurve.html,5,['down'],['down']
Availability,"dim))"");; 117 //find covariant matrix from inverse of hess; 118 r.Execute(""cov<-solve(hess)"");; 119 //get errors from the sqrt of the diagonal of cov; 120 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 121 }; 122 ; 123 //results with optim; 124 else {; 125 r.Execute(""par<-result$par"");; 126 r.Execute(""hess<-result$hessian"");; 127 r.Execute(""cov<-solve(hess)"");; 128 r.Execute(""errors<-sqrt(abs(diag(cov)))"");; 129 }; 130 ; 131 //return the minimum to ROOT; 132 //TVectorD vector = gR->ParseEval(""par"").ToVector<Double_t>();; 133 std::vector<double> vectorPar = r[""par""];; 134 ; 135 //get errors and matrices from R; 136 // ROOT::R::TRObjectProxy p = gR->ParseEval(""cov""); ; 137 // TMatrixD cm = p.ToMatrix<Double_t>();; 138 TMatrixD cm = r[""cov""];; 139 // p = gR->ParseEval(""errors"");; 140 // TVectorD err = p.ToVector<Double_t>();; 141 std::vector<double> err = r[""errors""];; 142 // p = gR->ParseEval(""hess"");; 143 // TMatrixD hm = p.ToMatrix<Double_t>();; 144 TMatrixD hm = r[""hess""];; 145 ; 146 //set covariant and Hessian matrices and error vector; 147 fCovMatrix.ResizeTo(ndim,ndim);; 148 fHessMatrix.ResizeTo(ndim,ndim);; 149 //fErrors.ResizeTo(ndim);; 150 fCovMatrix = cm;; 151 fErrors = err;; 152 fHessMatrix = hm;; 153 ; 154 //get values and show minimum; 155 const double *min=vectorPar.data();; 156 SetFinalValues(min);; 157 SetMinValue((*gFunction)(min));; 158 std::cout<<""Value at minimum =""<<MinValue()<<std::endl;; 159 ; 160 return kTRUE;; 161 }; 162#ifdef LATER ; 163 //Returns the ith jth component of the covarient matrix; 164 double RMinimizer::CovMatrix(unsigned int i, unsigned int j) const {; 165 unsigned int ndim = NDim();; 166 if (fCovMatrix==0) return 0;; 167 if (i > ndim || j > ndim) return 0;; 168 return fCovMatrix[i][j];; 169 }; 170 // //Returns the full parameter error vector; 171 // TVectorD RMinimizer::RErrors() const {; 172 // return fErrors;; 173 // }; 174 //Returns the ith jth component of the Hessian matrix; 175 double RMinimizer::HessMatrix(unsigned int i, un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RMinimizer_8cxx_source.html:5610,error,error,5610,doc/master/RMinimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RMinimizer_8cxx_source.html,1,['error'],['error']
Availability,"dinates, or using a different Scalar typeDefinition LorentzVector.h:93; ROOT::Math::LorentzVector::massScalar mass() constDefinition LorentzVector.h:665; ROOT::Math::LorentzVector::RhoScalar Rho() constDefinition LorentzVector.h:325; ROOT::Math::LorentzVector::PScalar P() constDefinition LorentzVector.h:311; ROOT::Math::LorentzVector::yScalar y() constDefinition LorentzVector.h:643; ROOT::Math::LorentzVector::PyScalar Py() constspatial Y componentDefinition LorentzVector.h:284; ROOT::Math::LorentzVector::LorentzVectorconstexpr LorentzVector(const ForeignLorentzVector &v)Construct from a foreign 4D vector type, for example, HepLorentzVector Precondition: v must implement...Definition LorentzVector.h:105; ROOT::Math::LorentzVector::LorentzVectorLorentzVector(const Scalar &a, const Scalar &b, const Scalar &c, const Scalar &d)generic constructors from four scalar values.Definition LorentzVector.h:82; ROOT::Math::LorentzVector::isLightlikebool isLightlike(Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) constDetermine if momentum-energy can represent a massless particle.Definition LorentzVector.h:535; ROOT::Math::LorentzVector::Vect::ROOT::Math::DisplacementVector3D< Cartesian3D< Scalar > > Vect() constget the spatial components of the Vector in a DisplacementVector based on Cartesian CoordinatesDefinition LorentzVector.h:371; ROOT::Math::LorentzVector::ColinearRapidityScalar ColinearRapidity() constRapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)].Definition LorentzVector.h:516; ROOT::Math::LorentzVector::eScalar e() constDefinition LorentzVector.h:649; ROOT::Math::LorentzVector::PzScalar Pz() constspatial Z componentDefinition LorentzVector.h:289; ROOT::Math::LorentzVector::operator-LorentzVector operator-() constNegative of a LorentzVector (q = - v )Definition LorentzVector.h:489; ROOT::Math::LorentzVector::fDimensionstatic constexpr unsigned int fDimensionDefinition LorentzVector.h:686; ROOT::Math::LorentzVector::SetPtLorentzVector<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:31233,toler,tolerance,31233,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['toler'],['tolerance']
Availability,"dinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoord",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:19071,toler,tolerance,19071,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,1,['toler'],['tolerance']
Availability,"dinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoord",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:17465,toler,tolerance,17465,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,1,['toler'],['tolerance']
Availability,"ding input from filename; filename is assumed to contain at least 3 columns of numbers; convention for format (default=""%lg %lg %lg %lg); format = ""%lg %lg"" read only 2 first columns into X,Y; format = ""%lg %lg %lg"" read only 3 first columns into X,Y and EY; format = ""%lg %lg %lg %lg"" read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower.; In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ~TGraphErrors(); TGraphErrors default destructor. void Apply(TF1* f); apply function to all the data points; y = f(x,y). The error is calculated as ey=(f(x,y+ey)-f(x,y-ey))/2; This is the same as error(fy) = df/dy * ey for small errors. For generic functions the symmetric errors might become non-symmetric; and are averaged here. Use TGraphAsymmErrors if desired. error on x doesn't change; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. Int_t CalculateScanfFields(const char* fmt); Calculate scan fields. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:17587,error,error,17587,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,9,['error'],"['error', 'errors']"
Availability,"ding process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket** pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TPSocket.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPSocket.html:15650,error,error,15650,root/html528/TPSocket.html,https://root.cern,https://root.cern/root/html528/TPSocket.html,1,['error'],['error']
Availability,"ding process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket** pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TPSocket.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPSocket.html:15963,error,error,15963,root/html530/TPSocket.html,https://root.cern,https://root.cern/root/html530/TPSocket.html,1,['error'],['error']
Availability,"ding process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; sent or -1 in case of error. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0. TPSocket(TSocket** pSockets, Int_t size). void operator=(const TPSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. Int_t Send(const TMessage& mess). Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Recv(TMessage*& mess). Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Bool_t IsValid() const; { return fSockets ? kTRUE : kFALSE; }. Int_t GetSize() const; { return fSize; }. » Author: Fons Rademakers 20/1/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TPSocket.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPSocket.html:15963,error,error,15963,root/html532/TPSocket.html,https://root.cern,https://root.cern/root/html532/TPSocket.html,1,['error'],['error']
Availability,"direction; amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction . Definition at line 5756 of file TSpectrum2Fit.cxx. ◆ GetAmplitudes(). void TSpectrum2Fit::GetAmplitudes ; (; Double_t * ; amplitudes, . Double_t * ; amplitudesX1, . Double_t * ; amplitudesY1 . ). This function gets the amplitudes of fitted 2D peaks and 1D ridges. . amplitudes - gets vector of amplitudes of 2D peaks; amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction . Definition at line 5741 of file TSpectrum2Fit.cxx. ◆ GetBackgroundParameters(). void TSpectrum2Fit::GetBackgroundParameters ; (; Double_t & ; a0, . Double_t & ; a0Err, . Double_t & ; ax, . Double_t & ; axErr, . Double_t & ; ay, . Double_t & ; ayErr . ). This function gets the background parameters and their errors. . a0 - gets the fitted value of a0 parameter; a0Err - gets error value of a0 parameter; ax - gets the fitted value of ax parameter; axErr - gets error value of ax parameter; ay - gets the fitted value of ay parameter; ayErr - gets error value of ay parameter . Definition at line 5829 of file TSpectrum2Fit.cxx. ◆ GetChi(). Double_t TSpectrum2Fit::GetChi ; (; ); const. inline . Definition at line 176 of file TSpectrum2Fit.h. ◆ GetPositionErrors(). void TSpectrum2Fit::GetPositionErrors ; (; Double_t * ; positionErrorsX, . Double_t * ; positionErrorsY, . Double_t * ; positionErrorsX1, . Double_t * ; positionErrorsY1 . ). This function gets the errors of positions of fitted 2D peaks and 1D ridges. . positionErrorsX - gets vector of errors of x positions of 2D peaks; positionErrorsY - gets vector of errors of y positions of 2D peaks; positionErrorsX1 - gets vector of errors of x positions of 1D ridges; positionErrorsY1 - gets vector of errors of y positions of 1D ridges . Definition at line 5725 of file TSpectrum2Fit.cxx. ◆ GetPositions(). void TSpectrum2Fit::GetPositions ; (; Double_t * ; positionsX, . Double_t * ; pos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:65374,error,error,65374,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,3,['error'],['error']
Availability,"directly (by solving a system of linear equations) the minimum of a least-square function which has a linear dependence in the fit parameters. This class is not used directly, but via the ROOT::Fitter class, when calling the LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). ; Definition at line 31 of file TLinearMinimizer.h. Public Member Functions;  TLinearMinimizer (const char *type);  Constructor from a char * (used by PM) ;  ;  TLinearMinimizer (int type=0);  Default constructor. ;  ;  ~TLinearMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearMinimizer.html:1340,error,errors,1340,doc/master/classTLinearMinimizer.html,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html,2,['error'],['errors']
Availability,"directly in shared memory in the; producer, but the consumer still has to copy the object from; shared memory into a local object which has the correct vtbl; pointer for that process (copy ctor's can be used for creating; the local copy).; 2) Another possibility is to only allow objects without virtual; functions in shared memory (like simple C structs), or to; forbid (how?) the consumer from calling any virtual functions; of the objects in shared memory.; 3) A last option is to copy the object internals to shared memory; and copy them again from there. This is what is done in the; TMapFile (using the object Streamer() to make a deep copy).; Option 1) saves one copy, but requires solid copy ctor's (along the; full inheritance chain) to rebuild the object in the consumer. Most; classes don't provide these copy ctor's, especially not when objects; contain collections, etc. 2) is too limiting or dangerous (calling; accidentally a virtual function will segv). So since we have a; robust Streamer mechanism I opted for 3). Function Members (Methods); public:. virtual~TMapFile(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TObject* obj, const char* name = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); Bool_tcd(const char* path = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidClose(Option_t* option = """"); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TMapFile*Create(const char* name, Option_t* option = ""READ"", Int_t size = kDefaultMapSize, const char* title = """"); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMapFile.html:2414,robust,robust,2414,root/html528/TMapFile.html,https://root.cern,https://root.cern/root/html528/TMapFile.html,6,['robust'],['robust']
Availability,"directly in shared memory in the; producer, but the consumer still has to copy the object from; shared memory into a local object which has the correct vtbl; pointer for that process (copy ctor's can be used for creating; the local copy).; 2) Another possibility is to only allow objects without virtual; functions in shared memory (like simple C structs), or to; forbid (how?) the consumer from calling any virtual functions; of the objects in shared memory.; 3) A last option is to copy the object internals to shared memory; and copy them again from there. This is what is done in the; TMapFile (using the object Streamer() to make a deep copy).; Option 1) saves one copy, but requires solid copy ctor's (along the; full inheritance chain) to rebuild the object in the consumer. Most; classes don't provide these copy ctor's, especially not when objects; contain collections, etc. 2) is too limiting or dangerous (calling; accidentally a virtual function will segv). So since we have a; robust Streamer mechanism I opted for 3). Function Members (Methods); public:. ~TMapRec(); void*GetBuffer(Long_t offset = 0) const; Int_tGetBufSize() const; const char*GetClassName(Long_t offset = 0) const; const char*GetName(Long_t offset = 0) const; TMapRec*GetNext(Long_t offset = 0) const; TObject*GetObject() const; TMapRec(const char* name, const TObject* obj, Int_t size, void* buf). private:. TMapRec&operator=(const TMapRec&); TMapRec(const TMapRec&). Data Members; private:. Int_tfBufSizebuffer size; void*fBufferbuffer containing object of class name; char*fClassNameclass name; char*fNameobject name; TMapRec*fNextnext MapRec in list; TObject*fObjectpointer to original object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMapRec(const char* name, const TObject* obj, Int_t size, void* buf); Constructor. ~TMapRec(); Destructor. TObject * GetObject() const; This method returns a pointer to the original object. NOTE: this pointer; is only valid in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMapRec.html:2395,robust,robust,2395,root/html602/TMapRec.html,https://root.cern,https://root.cern/root/html602/TMapRec.html,2,['robust'],['robust']
Availability,"directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXNetSystem.html:18843,mask,mask,18843,root/html534/TXNetSystem.html,https://root.cern,https://root.cern/root/html534/TXNetSystem.html,9,['mask'],"['mask', 'masks']"
Availability,"disk when; more than autof bytes have been written to the file. At the first FlushBaskets; TTree::Fill will replace fAutoFlush by the current value of fEntries. Calling this function with autof<0 is interesting when it is hard to estimate; the size of one entry. This value is also independent of the Tree. The Tree is initialized with fAutoFlush=-30000000, ie that, by default,; the first AutoFlush will be done when 30 MBytes of data are written to the file. CASE 3 : autof = 0. The AutoFlush mechanism is disabled. Flushing the buffers at regular intervals optimize the location of; consecutive entries on the disk. void SetAutoSave(Long64_t autos = 300000000); This function may be called at the start of a program to change; the default value for fAutoSave(300000000, ie 300 MBytes).; When filling the Tree the branch buffers as well as the Tree header; will be flushed to disk when more than fAutoSave bytes have been written to the file.; In case of a program crash, it will be possible to recover the data in the Tree; up to the last AutoSave point. void SetBasketSize(const char* bname, Int_t buffsize = 16000); Set a branch's basket size. bname is the name of a branch.; if bname=""*"", apply to all branches.; if bname=""xxx*"", apply to all branches with name starting with xxx; see TRegexp for wildcarding options; buffsize = branc basket size. Int_t SetBranchAddress(const char* bname, void** add, TBranch** ptr = 0); Change branch address, dealing with clone trees properly.; See TTree::CheckBranchAddressType for the semantic of the return value. Note: See the comments in TBranchElement::SetAddress() for the; meaning of the addr parameter. Int_t SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); Verify the validity of the type of addr before calling SetBranchAddress.; See TTree::CheckBranchAddressType for the semantic of the return value. Note: See the comments in TBranchElement::SetAddress() for the; meaning of the addr parameter.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:116096,recover,recover,116096,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['recover'],['recover']
Availability,"displays only the name of histogram and the number of entries, whereas:. gStyle->SetOptStat(1101);. displays the name of histogram, mean value and RMS.; WARNING 1: never do:. gStyle->SetOptStat(0001111);. but instead do:. gStyle->SetOptStat(1111);. because 0001111 will be taken as an octal number!; WARNING 2: for backward compatibility with older versions. gStyle->SetOptStat(1);. is taken as:. gStyle->SetOptStat(1111). To print only the name of the histogram do:. gStyle->SetOptStat(1000000001);. NOTE that in case of 2D histograms, when selecting only underflow; (10000) or overflow (100000), the statistics box will show all combinations; of underflow/overflows and not just one single number.; The parameter mode can be any combination of the letters; kKsSiIourRmMen. k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; I : integral of bins with option ""width"" printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed. For example, to print only name of histogram and number of entries do:. gStyle->SetOptStat(""ne"");. To print only the name of the histogram do:. gStyle->SetOptStat(""n"");. The default value is:. gStyle->SetOptStat(""nemr"");. When a histogram is painted, a TPaveStats object is created and added; to the list of functions of the histogram. If a TPaveStats object; already exists in the histogram list of functions, the existing object is just; updated with the current histogram parameters.; Once a histogram is painted, the statistics box can be accessed using; h->FindObject(""stats""). In the command line it is enough to do:. Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""). because after h->Draw() the histogram is automatically painted. But; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:16692,error,error,16692,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,4,['error'],['error']
Availability,"distribution in x and a; # uniform distribution in y; ; tree = ROOT.TTree(""tree"", ""tree""); px = array(""d"", [0]); py = array(""d"", [0]); tree.Branch(""x"", px, ""x/D""); tree.Branch(""y"", py, ""y/D""); for i in range(100):; px[0] = ROOT.gRandom.Gaus(0, 3); py[0] = ROOT.gRandom.Uniform() * 30 - 15; tree.Fill(); return tree; ; ; ############################; # Importing ROOT histograms; ############################; # Import ROOT TH1 into a RooDataHist; # ---------------------------------------------------------; # Create a ROOT TH1 histogram; hh = makeTH1(); ; # Declare observable x; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); ; # Create a binned dataset that imports contents of ROOT.TH1 and associates; # its contents to observable 'x'; dh = ROOT.RooDataHist(""dh"", ""dh"", [x], Import=hh); ; # Plot and fit a RooDataHist; # ---------------------------------------------------; # Make plot of binned dataset showing Poisson error bars (RooFit default); frame = x.frame(Title=""Imported ROOT.TH1 with Poisson error bars""); dh.plotOn(frame); ; # Fit a Gaussian p.d.f to the data; mean = ROOT.RooRealVar(""mean"", ""mean"", 0, -10, 10); sigma = ROOT.RooRealVar(""sigma"", ""sigma"", 3, 0.1, 10); gauss = ROOT.RooGaussian(""gauss"", ""gauss"", x, mean, sigma); gauss.fitTo(dh, PrintLevel=-1); gauss.plotOn(frame); ; # Plot and fit a RooDataHist with internal errors; # ---------------------------------------------------------------------------------------------; ; # If histogram has custom error (i.e. its contents is does not originate from a Poisson process; # but e.g. is a sum of weighted events) you can data with symmetric 'sum-of-weights' error instead; # (same error bars as shown by ROOT); frame2 = x.frame(Title=""Imported ROOT.TH1 with internal errors""); dh.plotOn(frame2, DataError=""SumW2""); gauss.plotOn(frame2); ; # Please note that error bars shown (Poisson or SumW2) are for visualization only, the are NOT used; # in a maximum likelihood fit; #; # A (binned) ML fit will ALWAYS assume the Poisson error int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf102__dataimport_8py.html:1645,error,error,1645,doc/master/rf102__dataimport_8py.html,https://root.cern,https://root.cern/doc/master/rf102__dataimport_8py.html,1,['error'],['error']
Availability,"distribution in; 2499/// the other variable is normal. According to this approximate formula the error on the quantile is; 2500/// estimated as sqrt( p (1-p) / ( n * f(q)^2) ), where p is the probability content of the quantile and; 2501/// n is the number of events used to compute the quantile and f(q) is the probability distribution for the; 2502/// other variable evaluated at the obtained quantile. In the error estimation the probability is then assumed to be; 2503/// a normal distribution.; 2504 ; 2505TH1D* TH2::QuantilesX( Double_t prob, const char * name) const; 2506{; 2507 return DoQuantiles(true, name, prob);; 2508}; 2509 ; 2510 ; 2511////////////////////////////////////////////////////////////////////////////////; 2512/// Compute the Y distribution of quantiles in the other variable X; 2513/// name is the name of the returned histogram; 2514/// prob is the probability content for the quantile (0.5 is the default for the median); 2515/// An approximate error for the quantile is computed assuming that the distribution in; 2516/// the other variable is normal.; 2517 ; 2518TH1D* TH2::QuantilesY( Double_t prob, const char * name) const; 2519{; 2520 return DoQuantiles(false, name, prob);; 2521}; 2522 ; 2523 ; 2524////////////////////////////////////////////////////////////////////////////////; 2525/// Implementation of quantiles for x or y; 2526 ; 2527TH1D* TH2::DoQuantiles(bool onX, const char * name, Double_t prob) const; 2528{; 2529 const TAxis *outAxis = nullptr;; 2530 if ( onX ) {; 2531 outAxis = GetXaxis();; 2532 } else {; 2533 outAxis = GetYaxis();; 2534 }; 2535 ; 2536 // build first name of returned histogram; 2537 TString qname = name;; 2538 if (qname.IsNull() || qname == ""_qx"" || qname == ""_qy"") {; 2539 const char * qtype = (onX) ? ""qx"" : ""qy"";; 2540 qname = TString::Format(""%s_%s_%3.2f"",GetName(),qtype, prob);; 2541 }; 2542 // check if the histogram is already existing; 2543 TH1D *h1=nullptr;; 2544 //check if histogram with identical name exist; 2545 T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:103489,error,error,103489,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['error'],['error']
Availability,"distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fL; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0., Double_t oneOverZeroError = 0., const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; hist_vyy: if non-zero, defines the data covariance matrix; otherwise it is calculated from the data errors; hist_vyy_inv: if non-zero and if hist_vyy is set, defines the inverse of the data covariance matrix; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Data members modified:; fY, fVyy, , fBiasScale; Data members cleared; fVyyInv, fNdf; + see ClearResults. Double_t DoUnfold(Double_t tau); Unfold with given value of regularisation parameter tau; tau: new tau parameter; required data members:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fV: inverse of covariance matrix for y; fL: regularisation conditions; modified data members:; fTauSquared and those documented in DoUnfold(void). Int_t ScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); scan the L curve; nPoint: number of points on the resulting curve; tauMin: smallest tau value to study; tauMax: largest tau value to study; lCurve: the L curve as graph; logTauX: output spline of x-coordinates vs tau for the L c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfold.html:26135,error,errors,26135,root/html602/TUnfold.html,https://root.cern,https://root.cern/root/html602/TUnfold.html,6,['error'],"['error', 'errors']"
Availability,"dition(const TPosixCondition&); virtual~TPosixCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPosixCondition.html:1481,error,error,1481,root/html528/TPosixCondition.html,https://root.cern,https://root.cern/root/html528/TPosixCondition.html,4,['error'],['error']
Availability,"ditionalObservables(Args_t &&... argsOrArgSet)Create a RooCmdArg to declare conditional observables.Definition RooGlobalFunc.h:278; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; RooFit::CutRooCmdArg Cut(const char *cutSpec)Definition RooGlobalFunc.cxx:320; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf702_efficiencyfit_2DDefinition rf702_efficiencyfit_2D.py:1; ; [#0] WARNING:Generation -- RooAcceptReject::ctor(effPdf_Int[]_Norm[cut]) WARNING: performing accept/reject sampling on a p.d.f in 2 dimensions without prior knowledge on maximum value of p.d.f. Determining maximum value by taking 200000 trial samples. If p.d.f contains sharp peaks smaller than average distance between trial sampling points these may be missed and p.d.f. may be sampled incorrectly.; [#0] WARNING:Generation -- RooAcceptReject::ctor(effPdf_Int[]_Norm[cut]): WARNING: 200000 trial samples requested by p.d.f for 2-dimensional accept/reject sampling, this may take some time; [#1] INFO:Fitting -- RooAbsPdf::fitTo(effPdf_over_effPdf_Int[cut]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_effPdf_over_effPdf_Int[cut]_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf702_efficiencyfit_2D.C. tutorialsroofitrf702_efficiencyfit_2D.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html:8497,error,error,8497,doc/master/rf702__efficiencyfit__2D_8C.html,https://root.cern,https://root.cern/doc/master/rf702__efficiencyfit__2D_8C.html,1,['error'],['error']
Availability,"ditor. Editor for geometry volumes and assemblies of volumes. Besides the volume; name and line attributes, a TGeoVolume has the following editable categories; splitted vertically by a shutter:; - Properties: one can edit the shape and medium components from here. It is; also possible to change the existing ones.; - Daughters: the main category allowing defining, editing, removing or; positioning daughter volumes inside the current edited volume. To add a; daughter, one needs to select first a volume and a matrix. Currently no check; is performed if the daughter volume creates an extrusion (illegal for tracking).; To remove or change the position of an existing daughter, one should simply; select the desired daughter from the combo box with the existing ones, then; simply click the appropriate button.; - Visualization: One can set the visibility of the volume and of its daughters,; set the visibility depth and the view type. Selecting ""All"" will draw the; volume and all visible daughters down to the selected level starting from the; edited volume. Selecting ""Leaves"" will draw just the deepest daughters within; the selected visibility level, without displaying the containers, while ""Only""; will just draw the edited volume.; - Division: The category becomes active only if there are no daughters of the; edited volume added by normal positioning (e.g. from <Daughters> category). The; minimum allowed starting value for the selected division axis is automatically; selected, while the dslicing step is set to 0 - meaning that only the number; of slices matter. Function Members (Methods); public:. TGeoVolumeEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual~TGeoVolumeEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass* cl); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolumeEditor.html:1335,down,down,1335,root/html528/TGeoVolumeEditor.html,https://root.cern,https://root.cern/root/html528/TGeoVolumeEditor.html,3,['down'],['down']
Availability,"dity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:13075,error,error,13075,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,3,['error'],['error']
Availability,"dium * GetMedium() constDefinition TGeoVolume.h:175; TGeoVolume::GetRefCountInt_t GetRefCount() constDefinition TGeoVolume.h:131; TGeoVolume::SortNodesvoid SortNodes()sort nodes by decreasing volume of the bounding box.Definition TGeoVolume.cxx:2080; TGeoVolume::Voxelizevoid Voxelize(Option_t *option)build the voxels for this volumeDefinition TGeoVolume.cxx:2464; TGeoVolume::IsRunTimeBool_t IsRunTime() constDefinition TGeoVolume.h:109; TGeoVolume::CreateThreadDatavirtual void CreateThreadData(Int_t nthreads)Definition TGeoVolume.cxx:435; TGeoVolume::GetByteCountvirtual Int_t GetByteCount() constget the total size in bytes for this volumeDefinition TGeoVolume.cxx:2204; TGeoVolume::OptimizeVoxelsBool_t OptimizeVoxels()Perform an extensive sampling to find which type of voxelization is most efficient.Definition TGeoVolume.cxx:1247; TGeoVolume::IsVolumeMultivirtual Bool_t IsVolumeMulti() constDefinition TGeoVolume.h:110; TGeoVolume::CountNodesInt_t CountNodes(Int_t nlevels=1000, Int_t option=0)Count total number of subnodes starting from this volume, nlevels down.Definition TGeoVolume.cxx:730; TGeoVolume::UnmarkSavedvoid UnmarkSaved()Reset SavePrimitive bits.Definition TGeoVolume.cxx:1699; TGeoVolume::SetFindervoid SetFinder(TGeoPatternFinder *finder)Definition TGeoVolume.h:244; TGeoVolume::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoVolume.h:362; TGeoVolume::Grabvoid Grab()Definition TGeoVolume.h:136; TGeoVolume::Classstatic TClass * Class(); TGeoVolume::SetTransparencyvoid SetTransparency(Char_t transparency=0)Definition TGeoVolume.h:376; TGeoVolume::Releasevoid Release()Definition TGeoVolume.h:137; TGeoVolume::FindOverlapsvoid FindOverlaps() constloop all nodes marked as overlaps and find overlapping brothersDefinition TGeoVolume.cxx:2227; TGeoVolume::GetNodeTGeoNode * GetNode(const char *name) constget the pointer to a daughter nodeDefinition TGeoVolume.cxx:2193; TGeoVolume::SetMediumvirtual void SetMedium(TGeoMedium *medium)Definition TGeoVolume.h:242; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:235379,down,down,235379,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['down'],['down']
Availability,"div); virtual~TGeoPatternFinder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t); virtual TGeoNode*CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGeoNode*FindNode(Double_t*, const Double_t* = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetByteCount() const; Int_tGetCurrent(); virtual Int_tGetDivAxis(); Int_tGetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*GetMatrix(); virtual const char*TObject::GetName() const; Int_tGetNdiv() const; Int_tGetNext() const; TGeoNode*GetNodeOffset(Int_t idiv); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetStart()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPatternFinder.html:2360,error,error,2360,root/html528/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html528/TGeoPatternFinder.html,2,['error'],['error']
Availability,"dle hex; std::cout << TString::Itoa(017,2) ; /// 0 prefix to handle oct; In case of error returns the ""!"" string. TString UItoa(UInt_t value, Int_t base); Converts a UInt_t (twice the range of an Int_t) to a TString with respect; to the base specified (2-36). Thus it is an enhanced version of sprintf; (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString LLtoa(Long64_t value, Int_t base); Converts a Long64_t to a TString with respect to the base specified (2-36).; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of; http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString ULLtoa(ULong64_t value, Int_t base); Converts a ULong64_t (twice the range of an Long64_t) to a TString with; respect to the base specified (2-36). Thus it is an enhanced version of; sprintf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString BaseConvert(const TString& s_in, Int_t base_in, Int_t base_out); Converts string from base base_in to base base_out. Supported bases; are 2-36. At most 64 bit data can be converted. Bool_t EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Return true if string ends with the specified string. TObjArray * Tokenize(const TString& delim) const; This function is used to isolate sequential tokens in a TString.; These tokens are separated in the string by at least one of the; characters in delim. The returned array contains the tokens; as TObjString's. The returned array is the owner of the objects,; and must be deleted by the user. void FormImp(const char* fmt, va_list ap); Formats a string using a printf style format descriptor.; Existing string contents will be overwritten. void Form(const char *va_(fmt), ...); Formats a string using a printf style format descriptor.; Existing string contents will be overwritten. TString Format(const char *v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TString.html:19582,error,error,19582,root/html602/TString.html,https://root.cern,https://root.cern/root/html602/TString.html,2,['error'],['error']
Availability,"dle of the specified font structure ""fs"". void DeleteFont(FontStruct_t fs); Explicitely deletes the font structure ""fs"" obtained via LoadQueryFont(). GContext_t CreateGC(Drawable_t id, GCValues_t* gval); Creates a graphics context using the provided GCValues_t *gval structure.; The mask data member of gval specifies which components in the GC are; to be set using the information in the specified values structure.; It returns a graphics context handle GContext_t that can be used with any; destination drawable or O if the creation falls. void ChangeGC(GContext_t gc, GCValues_t* gval); Changes the components specified by the mask in gval for the specified GC. GContext_t gc - specifies the GC to be changed; GCValues_t gval - specifies the mask and the values to be set; (see also the GCValues_t structure). void CopyGC(GContext_t org, GContext_t dest, Mask_t mask); Copies the specified components from the source GC ""org"" to the; destination GC ""dest"". The ""mask"" defines which component to copy; and it is a data member of GCValues_t. void DeleteGC(GContext_t gc); Deletes the specified GC ""gc"". Cursor_t CreateCursor(ECursor cursor); Creates the specified cursor. (just return cursor from cursor pool).; The cursor can be:. kBottomLeft, kBottomRight, kTopLeft, kTopRight,; kBottomSide, kLeftSide, kTopSide, kRightSide,; kMove, kCross, kArrowHor, kArrowVer,; kHand, kRotate, kPointer, kArrowRight,; kCaret, kWatch. void SetCursor(Window_t id, Cursor_t curid); Sets the cursor ""curid"" to be used when the pointer is in the; window ""id"". Pixmap_t CreatePixmap(Drawable_t id, UInt_t w, UInt_t h); Creates a pixmap of the specified width and height and returns; a pixmap ID that identifies it. Pixmap_t CreatePixmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth); Creates a pixmap from bitmap data of the width, height, and depth you; specified and returns a pixmap that identifies it. The width and height; arguments must be non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:41322,mask,mask,41322,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['mask'],['mask']
Availability,"dler was not in the list of signal handlers. void ResetSignal(ESignals sig, Bool_t reset = kTRUE); If reset is true reset the signal handler for the specified signal; to the default handler, else restore previous behaviour. void ResetSignals(); Reset signals handlers to previous behaviour. void IgnoreSignal(ESignals sig, Bool_t ignore = kTRUE); If ignr is true ignore the specified signal, else restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:22282,mask,mask,22282,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,1,['mask'],['mask']
Availability,"dlerFunc_t GetErrorHandler ();  Returns the current error handler function. ;  ; ErrorSystemMsgHandlerFunc_t ROOT::Internal::GetErrorSystemMsgHandler ();  ; void Info (const char *location, const char *msgfmt,...);  Use this function for informational messages. ;  ; void MayNotUse (const char *method);  This function can be used in classes that should override a certain function, but in the inherited class the function makes no sense. ;  ; void ROOT::Internal::MinimalErrorHandler (Int_t level, Bool_t abort_bool, const char *location, const char *msg);  A very simple error handler that is usually replaced by the TROOT default error handler. ;  ; void Obsolete (const char *function, const char *asOfVers, const char *removedFromVers);  Use this function to declare a function obsolete. ;  ; ErrorHandlerFunc_t SetErrorHandler (ErrorHandlerFunc_t newhandler);  Set an errorhandler function. Returns the old handler. ;  ; ErrorSystemMsgHandlerFunc_t ROOT::Internal::SetErrorSystemMsgHandler (ErrorSystemMsgHandlerFunc_t h);  Returns the previous system error message handler. ;  ; void SysError (const char *location, const char *msgfmt,...);  Use this function in case a system (OS or GUI) related error occurred. ;  ; void Warning (const char *location, const char *msgfmt,...);  Use this function in warning situations. ;  . Variables; Int_t gErrorAbortLevel;  ; Int_t gErrorIgnoreLevel;  Error handling routines. ;  ; Bool_t gPrintViaErrorHandler;  ; const char * kAssertMsg;  ; constexpr Int_t kBreak = 4000;  ; const char * kCheckMsg;  ; constexpr Int_t kError = 3000;  ; constexpr Int_t kFatal = 6000;  ; constexpr Int_t kInfo = 1000;  ; constexpr Int_t kPrint = 0;  ; constexpr Int_t kSysError = 5000;  ; constexpr Int_t kUnset = -1;  ; constexpr Int_t kWarning = 2000;  . Macro Definition Documentation. ◆ R__ASSERT. #define R__ASSERT; (;  ; e). Value: do { \; if (R__unlikely(!(e))) \; ::Fatal("""", kAssertMsg, _QUOTE_(e), __LINE__, __FILE__); \; } while (false); _QUOTE_#define _QUOTE_(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:3045,error,error,3045,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['error'],['error']
Availability,"dlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:10094,error,error,10094,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,1,['error'],['error']
Availability,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:2575,error,error,2575,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,2,['error'],['error']
Availability,"do-inverse is calculated . Tolerances and Scaling; The tolerance parameter (which is a member of this base class) plays a crucial role in all operations of the decomposition classes . It gives the user a powerful tool to monitor and steer the operations Its default value is sqrt(epsilon) where 1+epsilon = 1; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number .; The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD which can handle singular matrices . For each decomposition this will be checked in a different way; in LU the matrix is considered singular when, at some point in the decomposition, a diagonal element < fTol . Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; a#define a(i)Definition RSha256.hxx:99; double; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 33 of file TDecompBase.h. Public Member Functions;  TDecompBase ();  Default constructor. ;  ;  TDecompBase (const TDecompBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:3548,toler,tolerance,3548,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['toler'],['tolerance']
Availability,"do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, Binomial errors are also supported. One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via myhist.SetBit(TH1::kIsAverage); When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. Projections of histograms; One can:. make a 1-D projection of a 2-D histogram or Profile see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; make a 1-D, 2-D or profile out of a 3-D histogram see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via: TH2::FitSlicesX,Y, TH3::FitSlicesZ.; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; TH3::FitSlicesZvirtual void FitSlicesZ(TF1 *f1=nullptr, Int_t binminx=1, Int_t binmaxx=0, Int_t binminy=1, Int_t binmaxy=0, Int_t cut=0, Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:14460,error,errors,14460,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"dom2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Random number generator class based on the maximally quidistributed combined Tausworthe generator by L'Ecuyer. ; The period of the generator is 2**88 (about 10**26) and it uses only 3 words for the state.; For more information see: P. L'Ecuyer, Mathematics of Computation, 65, 213 (1996) P. L'Ecuyer, Mathematics of Computation, 68, 225 (1999); The publications are available online at [http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tausme.ps] [http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tausme2.ps] ; Definition at line 27 of file TRandom2.h. Public Member Functions;  TRandom2 (UInt_t seed=1);  Default constructor. ;  ;  ~TRandom2 () override;  Default destructor. ;  ; UInt_t GetSeed () const override;  Returns one of the seeds of the generator. ;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  TausWorth generator from L'Ecuyer, uses as seed 3x32bits integers Use a mask of 0xffffffffUL to make in work on 64 bit machines Periodicity of about 10**26 Generate number in interval (0,1) : 0 and 1 are not included in the interval. ;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t n, Double_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void RndmArray (Int_t n, Float_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void SetSeed (ULong_t seed=0) override;  Set the generator seed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRandom;  TRandom (UInt_t seed=65539);  Default constructor. For seed see SetSeed(). ;  ;  ~TRandom () override;  Default destructor. ;  ; virtual Int_t Binomial (Int_t ntot, Double_t prob);  Generates a random integer N accordi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom2.html:1239,mask,mask,1239,doc/master/classTRandom2.html,https://root.cern,https://root.cern/doc/master/classTRandom2.html,1,['mask'],['mask']
Availability,"dom=kTRUE);  Generate an n-dimensional random tuple based on the histogrammed distribution. ;  ; Double_t GetSumw () const;  ; Double_t GetSumw2 () const;  ; Double_t GetSumwx (Int_t dim) const;  ; Double_t GetSumwx2 (Int_t dim) const;  ; Double_t GetWeightSum () const;  ; Double_t Integral (Bool_t respectAxisRange) const;  Compute integral (sum of counts) of histogram in all dimensions. ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsInRange (Int_t *coord) const;  Check whether bin coord is in range, as defined by TAxis::SetRange(). ;  ; Long64_t Merge (TCollection *list);  Merge this with a list of THnBase's. ;  ; void Multiply (const THnBase *h);  Multiply this histogram by histogram h this = this * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void Multiply (TF1 *f, Double_t c=1.);  Performs the operation: this = this*c*f1 if errors are defined, errors are also recalculated. ;  ; void Print (Option_t *option="""") const override;  Print a THnBase. ;  ; void PrintBin (Int_t *coord, Option_t *options) const;  ; void PrintBin (Long64_t idx, Option_t *options) const;  Print bin with linex index ""idx"". ;  ; void PrintEntries (Long64_t from=0, Long64_t howmany=-1, Option_t *options=nullptr) const;  Print ""howmany"" entries starting at ""from"". ;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Project all bins into a 3-dimensional histogram, keeping only axes ""xDim"", ""yDim"", and ""zDim"". ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Project all bins into a 1-dimensional histogram, keeping only axis ""xDim"". ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Project all bins into a 2-dimensional histogram, keeping only axes ""xDim"" and ""yDim"". ;  ; THnBase * ProjectionND (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; void Reb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:11431,error,errors,11431,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,6,['error'],['errors']
Availability,"domain2(struct mg_context *ctx,; 20300 const char **options,; 20301 struct mg_error_data *error); 20302{; 20303 const char *name;; 20304 const char *value;; 20305 const char *default_value;; 20306 struct mg_domain_context *new_dom;; 20307 struct mg_domain_context *dom;; 20308 int idx, i;; 20309 ; 20310 if (error != NULL) {; 20311 error->code = 0;; 20312 if (error->text_buffer_size > 0) {; 20313 *error->text = 0;; 20314 }; 20315 }; 20316 ; 20317 if ((ctx == NULL) || (options == NULL)) {; 20318 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20319 mg_snprintf(NULL,; 20320 NULL, /* No truncation check for error buffers */; 20321 error->text,; 20322 error->text_buffer_size,; 20323 ""%s"",; 20324 ""Invalid parameters"");; 20325 }; 20326 return -1;; 20327 }; 20328 ; 20329 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 20330 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20331 mg_snprintf(NULL,; 20332 NULL, /* No truncation check for error buffers */; 20333 error->text,; 20334 error->text_buffer_size,; 20335 ""%s"",; 20336 ""Server already stopped"");; 20337 }; 20338 return -1;; 20339 }; 20340 ; 20341 new_dom = (struct mg_domain_context *); 20342 mg_calloc_ctx(1, sizeof(struct mg_domain_context), ctx);; 20343 ; 20344 if (!new_dom) {; 20345 /* Out of memory */; 20346 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20347 mg_snprintf(NULL,; 20348 NULL, /* No truncation check for error buffers */; 20349 error->text,; 20350 error->text_buffer_size,; 20351 ""%s"",; 20352 ""Out or memory"");; 20353 }; 20354 return -6;; 20355 }; 20356 ; 20357 /* Store options - TODO: unite duplicate code */; 20358 while (options && (name = *options++) != NULL) {; 20359 if ((idx = get_option_index(name)) == -1) {; 20360 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 20361 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20362 mg_snprintf(NULL,; 20363 NULL, /* No truncation check for error buffers */; 20364 error->text,; 20365 error->text_buffer_size,; 20366 ""Invalid opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:607817,error,error,607817,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"domain2(struct mg_context *ctx,; 20301 const char **options,; 20302 struct mg_error_data *error); 20303{; 20304 const char *name;; 20305 const char *value;; 20306 const char *default_value;; 20307 struct mg_domain_context *new_dom;; 20308 struct mg_domain_context *dom;; 20309 int idx, i;; 20310 ; 20311 if (error != NULL) {; 20312 error->code = 0;; 20313 if (error->text_buffer_size > 0) {; 20314 *error->text = 0;; 20315 }; 20316 }; 20317 ; 20318 if ((ctx == NULL) || (options == NULL)) {; 20319 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20320 mg_snprintf(NULL,; 20321 NULL, /* No truncation check for error buffers */; 20322 error->text,; 20323 error->text_buffer_size,; 20324 ""%s"",; 20325 ""Invalid parameters"");; 20326 }; 20327 return -1;; 20328 }; 20329 ; 20330 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 20331 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20332 mg_snprintf(NULL,; 20333 NULL, /* No truncation check for error buffers */; 20334 error->text,; 20335 error->text_buffer_size,; 20336 ""%s"",; 20337 ""Server already stopped"");; 20338 }; 20339 return -1;; 20340 }; 20341 ; 20342 new_dom = (struct mg_domain_context *); 20343 mg_calloc_ctx(1, sizeof(struct mg_domain_context), ctx);; 20344 ; 20345 if (!new_dom) {; 20346 /* Out of memory */; 20347 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20348 mg_snprintf(NULL,; 20349 NULL, /* No truncation check for error buffers */; 20350 error->text,; 20351 error->text_buffer_size,; 20352 ""%s"",; 20353 ""Out or memory"");; 20354 }; 20355 return -6;; 20356 }; 20357 ; 20358 /* Store options - TODO: unite duplicate code */; 20359 while (options && (name = *options++) != NULL) {; 20360 if ((idx = get_option_index(name)) == -1) {; 20361 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 20362 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20363 mg_snprintf(NULL,; 20364 NULL, /* No truncation check for error buffers */; 20365 error->text,; 20366 error->text_buffer_size,; 20367 ""Invalid opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:607850,error,error,607850,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"domvirtual; Class()TRandomstatic; Class_Name()TRandomstatic; Class_Version()TRandominlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TRandominlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Exp(Double_t tau)TRandomvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fNameTNamedprotected; fSeedTRandomprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; Gaus(Double_t mean=0, Double_t sigma=1)TRandomvirtual; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetIconName() constTObjectvirtual; GetName() const overrideTNamedinlinevirtual; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetSeed() constTRandomvirtual; GetTitle() const overrideTNamedinlinevirtual; GetUniqueID() constTObjectvirtual; HandleTimer(TTimer *timer)TObjectvirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom-members.html:1504,error,error,1504,doc/master/classTRandom-members.html,https://root.cern,https://root.cern/doc/master/classTRandom-members.html,2,['error'],['error']
Availability,"don't need to be stored; they are returned by value; only pointers / references / objects need to be stored. ; Definition at line 7701 of file TCling.cxx. ◆ RegisterTemporary() [2/2]. void TCling::RegisterTemporary ; (; const TInterpreterValue & ; value). Definition at line 7687 of file TCling.cxx. ◆ ReloadAllSharedLibraryMaps(). Int_t TCling::ReloadAllSharedLibraryMaps ; (; ). finalvirtual . Reload the library map entries coming from all the loaded shared libraries, after first unloading the current ones. ; In case of error -1 is returned, 0 otherwise. ; Implements TInterpreter.; Definition at line 5937 of file TCling.cxx. ◆ RemoveAndInvalidateObject(). template<typename List , typename Object > . static void TCling::RemoveAndInvalidateObject ; (; List & ; L, . Object * ; O . ). inlinestaticprivate . Definition at line 591 of file TCling.h. ◆ ReportDiagnosticsToErrorHandler(). void TCling::ReportDiagnosticsToErrorHandler ; (; bool ; = true). finalvirtual . Report diagnostics to the ROOT error handler (see TError.h). ; Reimplemented from TInterpreter.; Definition at line 7615 of file TCling.cxx. ◆ RescanLibraryMap(). Int_t TCling::RescanLibraryMap ; (; ). finalvirtual . Scan again along the dynamic path for library maps. ; Entries for the loaded shared libraries are unloaded first. This can be useful after reseting the dynamic path through TSystem::SetDynamicPath() In case of error -1 is returned, 0 otherwise. ; Implements TInterpreter.; Definition at line 5925 of file TCling.cxx. ◆ Reset(). void TCling::Reset ; (; ). finalvirtual . Pressing Ctrl+C should forward here. ; In the case where we have had continuation requested we must reset it. ; Implements TInterpreter.; Definition at line 3708 of file TCling.cxx. ◆ ResetAll(). void TCling::ResetAll ; (; ). finalvirtual . Reset the Cling state to its initial state. ; Implements TInterpreter.; Definition at line 3724 of file TCling.cxx. ◆ ResetGlobals(). void TCling::ResetGlobals ; (; ). finalvirtual . Reset in Cling th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:127660,error,error,127660,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['error'],['error']
Availability,"dop]) or HESSE (MnHesse::operator())) then the parameter errors printed by M are the square roots of the diagonal elements of this matrix. The covariance or the correlations can be printed and shown via std::cout as the ostream operator operator\(<<\) is overloaded. The eigenvalues of the error matrix can be calculated using MnEigen, which should all be positive if the matrix is positive-definite (see below on \(\mbox{MIGRAD}\) and positive-definiteness).; The effect of correlations on the individual parameter errors can be seen as follows. When parameter \(\mbox{n}\) is fixed (e.g. via the method MnMigrad::fix(n)), M inverts the error matrix, removes the row and column corresponding to parameter \(\mbox{n}\), and re-inverts the result. The effect on the errors of the other parameters will in general be to make them smaller, since the component due to the uncertainty in parameter \(\mbox{n}\) has now been removed. (In the limit that a given parameter is uncorrelated with parameter \(\mbox{n}\), its error will not change when parameter \(\mbox{n}\) is fixed.) However the procedure is not reversible, since M forgets the original error matrix, so if parameter \(\mbox{n}\) is then released (e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MINOS}\) errors; The M processor \(\mbox{MINOS}\) (MnMinos, see [api:minos]) was probably the first, and may still be the only, generally available program to calculate parameter errors taking into account both parameter correlations and non-linearities. The \(\mbox{MINOS}\) error intervals are in general assymmetric, and may be expensive to calculate, especially if there are a lot of free parameters and the problem is very non-linear.; \(\mbox{MINOS}\) can only operate after a good minimum has already been found, and the error matrix has been calculated, so the \(\mbox{MINOS}\) error analysis will normally follow a \(\mbox{MIGRAD}\",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:22546,error,error,22546,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['error'],['error']
Availability,"dop]) or HESSE (MnHesse::operator())) then the parameter errors printed by M are the square roots of the diagonal elements of this matrix. The covariance or the correlations can be printed and shown via std::cout as the ostream operator operator\(<<\) is overloaded. The eigenvalues of the error matrix can be calculated using MnEigen, which should all be positive if the matrix is positive-definite (see below on \(\mbox{MIGRAD}\) and positive-definiteness).; The effect of correlations on the individual parameter errors can be seen as follows. When parameter \(\mbox{n}\) is fixed (e.g. via the method MnMigrad::fix(n)), M inverts the error matrix, removes the row and column corresponding to parameter \(\mbox{n}\), and re-inverts the result. The effect on the errors of the other parameters will in general be to make them smaller, since the component due to the uncertainty in parameter \(\mbox{n}\) has now been removed. (In the limit that a given parameter is uncorrelated with parameter \(\mbox{n}\), its error will not change when parameter \(\mbox{n}\) is fixed.) However the procedure is not reversible, since M forgets the original error matrix, so if parameter \(\mbox{n}\) is then released (e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MINOS}\) errors; The M processor \(\mbox{MINOS}\) (MnMinos, see [api:minos]) was probably the first, and may still be the only, generally available program to calculate parameter errors taking into account both parameter correlations and non-linearities. The \(\mbox{MINOS}\) error intervals are in general asymmetric, and may be expensive to calculate, especially if there are a lot of free parameters and the problem is very non-linear.; \(\mbox{MINOS}\) can only operate after a good minimum has already been found, and the error matrix has been calculated, so the \(\mbox{MINOS}\) error analysis will normally follow a \(\mbox{MIGRAD}\)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:18524,error,error,18524,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['error'],['error']
Availability,"dopt.fNormBinVolume = true;; 780 ; 781 // Get the sparse data; 782 ROOT::Fit::SparseData d(ndim, &xmin[0], &xmax[0]);; 783 ROOT::Fit::FillData(d, s1, func);; 784 ; 785// std::cout << ""FillData(BinData & dv, const THnBase * s1, TF1 * func) (1)"" << std::endl;; 786 ; 787 // Create the bin data from the sparse data; 788 d.GetBinDataIntegral(dv);; 789 ; 790}; 791 ; 792void FillData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 820 DoFillData(dv, gr, type, func);; 821 ; 822}; 823 ; 824void FillData ( BinData & dv, const TMultiGraph * mg, TF1 * func ) {; 825 // fill the data vector from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:26188,error,errors,26188,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['errors']
Availability,"double &xmax, double fy, int npx=100, bool useLog=false);  Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ;  . Function Documentation. ◆ MinimBrent(). double ROOT::Math::BrentMethods::MinimBrent ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; xmiddle, . double ; fy, . bool & ; ok, . int & ; niter, . double ; epsabs = 1.E-8, . double ; epsrel = 1.E-10, . int ; maxiter = 100 . ). Finds a minimum of a function, if the function is unimodal between xmin and xmax This method uses a combination of golden section search and parabolic interpolation Details about convergence and properties of this algorithm can be found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives"" or in the ""Numerical Recipes"", chapter 10.2 convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs) ; type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy; if ok=true the method has converged. Maxiter returns the actual number of iteration performed ; Definition at line 130 of file BrentMethods.cxx. ◆ MinimStep(). double ROOT::Math::BrentMethods::MinimStep ; (; const IGenFunction * ; f, . int ; type, . double & ; xmin, . double & ; xmax, . double ; fy, . int ; npx = 100, . bool ; useLog = false . ). Grid search implementation, used to bracket the minimum and later use Brent's method with the bracketed interval The step of the search is set to (xmax-xmin)/fNpx type: 0-returns MinimumX 1-returns Minimum 2-returns MaximumX 3-returns Maximum 4-returns X corresponding to fy. ; Definition at line 28 of file BrentMethods.cxx. ROOTMathBrentMethods. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html:1934,toler,tolerance,1934,doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1BrentMethods.html,1,['toler'],['tolerance']
Availability,"double * GetParams() const; parameter values (return const pointer). { return &fParams.front(); }. double Value(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Parameter(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Error(unsigned int i) const; parameter error by index; (NOTE: this due to conflict with TObject::Error cannot used in derived class which; inherits from TObject. Use instead ParError (or Errors()[i] ). double ParError(unsigned int i) const; parameter error by index. std::string ParName(unsigned int i) const; name of the parameter. void SetMinosError(unsigned int i, double elow, double eup); set the Minos errors for parameter i (called by the Fitter class when running Minos). bool HasMinosError(unsigned int i) const; query if parameter i has the Minos error. double LowerError(unsigned int i) const; lower Minos error. If Minos has not run for parameter i return the parabolic error. double UpperError(unsigned int i) const; upper Minos error. If Minos has not run for parameter i return the parabolic error. double GlobalCC(unsigned int i) const; parameter global correlation coefficient. double CovMatrix(unsigned int i, unsigned int j) const; retrieve covariance matrix element. double Correlation(unsigned int i, unsigned int j) const; retrieve correlation elements. void GetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double* x, double* ci, double cl = 0.94999999999999996, bool norm = true) const. get confidence intervals for an array of n points x.; stride1 indicates the stride in the coordinate space while stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__FitResult.html:8995,error,error,8995,root/html602/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__FitResult.html,2,['error'],['error']
Availability,"double * GetParams() const; parameter values (return const pointer). { return &fParams.front(); }. double Value(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Parameter(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Error(unsigned int i) const; parameter error by index; (NOTE: this due to conflict with TObject::Error cannot used in derived class which; inherits from TObject. Use instead ParError (or Errors()[i] ). double ParError(unsigned int i) const; parameter error by index. std::string ParName(unsigned int i) const; name of the parameter. void SetMinosError(unsigned int i, double elow, double eup); set the Minos errors for parameter i (called by the Fitter class when running Minos). bool HasMinosError(unsigned int i) const; query if parameter i has the Minos error. double LowerError(unsigned int i) const; lower Minos error. If Minos has not run for parameter i return the parabolic error. double UpperError(unsigned int i) const; upper Minos error. If Minos has not run for parameter i return the parabolic error. double GlobalCC(unsigned int i) const; parameter global correlation coefficient. double CovMatrix(unsigned int i, unsigned int j) const; retrieve covariance matrix element. double Correlation(unsigned int i, unsigned int j) const; retrieve correlation elements. void GetCovarianceMatrix(TMatrixTSym<double>& mat) const; fill covariance matrix elements using a generic matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetCorrelationMatrix(TMatrixTSym<double>& mat) const; fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double* x, double* ci, double cl = 0.95, bool norm = true) const. get confidence intervals for an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__FitResult.html:8597,error,error,8597,root/html530/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__FitResult.html,3,['error'],['error']
Availability,"double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Derivator.html:6089,error,error,6089,root/html602/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Derivator.html,2,['error'],['error']
Availability,"double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__Derivator.html:6089,error,error,6089,root/html604/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html,2,['error'],['error']
Availability,"double prob, const std::string & method ) {; 463 // initialization for a Binomial; 464 double par[2];; 465 par[0] = ntot;; 466 par[1] = prob;; 467 fUdistr = unur_distr_binomial(par,2);; 468 ; 469 fMethod = method;; 470 if (fUdistr == nullptr) return false;; 471 if (! SetMethodAndInit() ) return false;; 472 if (! SetRandomGenerator() ) return false;; 473 return true;; 474}; 475 ; 476 ; 477bool TUnuran::ReInitDiscrDist(unsigned int npar, double * par) {; 478 // re-initialization of UNURAN without freeing and creating a new fGen object; 479 // works only for pre-defined distribution by changing their parameters; 480 if (!fGen ) return false;; 481 if (!fUdistr) return false;; 482 unur_distr_discr_set_pmfparams(fUdistr,par,npar);; 483 int iret = unur_reinit(fGen);; 484 if (iret) Warning(""ReInitDiscrDist"",""re-init failed - a full initizialization must be performed"");; 485 return (!iret);; 486}; 487 ; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuran.h; UnuranDistrAdapter.h; UnuranRng.h; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8cxx_source.html:15922,error,error,15922,doc/master/TUnuran_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8cxx_source.html,1,['error'],['error']
Availability,"double value) set the value of parameter \(\mbox{parno}\) or with name \(\mbox{name}\) to \(\mbox{ value}\). The parameter in question may be variable, fixed, or constant, but must be defined.; 5.14.3 setError(…); [api:seterror] setError(unsigned int parno, double error) or setError(const char* name, double error) set the error (sigma) of parameter \(\mbox{parno}\) or with name \(\mbox{name}\) to \(\mbox{value}\).; 5.14.4 fix(…); [api:fix] fix(unsigned int parno) or fix(const char* name) fixes parameter \(\mbox{parno}\) or with name \(\mbox{name}\).; 5.14.5 release(…); [api:release] release(unsigned int parno) or release(const char* name) releases a previously fixed parameter \(\mbox{parno}\) or with name \(\mbox{name}\).; 5.14.6 setLimits(…); [api:setlimits] setLimits(unsigned int n, double low, double up) or setLimits(const char* name, double low, double up) sets the lower and upper bound of parameter \(\mbox{n}\) or with name \(\mbox{name}\).; However, if \(\mbox{low}\) is equal to \(\mbox{up}\), an error condition results.; 5.14.7 setUpperLimit(…); [api:setupperlimits] setUpperLimit(unsigned int n, double up) or setUpperLimit(const char* name, double up) sets the upper bound of parameter \(\mbox{n}\) or with name \(\mbox{name}\). The parameters does not have a lower limit.; 5.14.8 setLowerLimit(…); [api:setlowerlimits] setLowerLimit(unsigned int n, double low) or setLowerLimit(const char* name, double low) sets the lower bound of parameter \(\mbox{n}\) or with name \(\mbox{name}\). The parameters does not have an upper limit.; 5.14.9 removeLimits(…); [api:removelimits] removeLimits(unsigned int n) or removeLimits(const char* name) removes all possible limits on parameter \(\mbox{n}\) or with name \(\mbox{name}\). The parameter can then vary in both directions without any bounds.; 5.14.10 value(…); value(unsigned int n) or value(const char* name) return the current value of parameter \(\mbox{n}\) or with name \(\mbox{name}\).; 5.14.11 error(…); error(unsigned int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:60406,error,error,60406,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"double,double>fYRange; pair<double,double>fYRangeScaled; Double_tfYScale; pair<int,int>fZBins; Bool_tfZLog; pair<double,double>fZRange; pair<double,double>fZRangeScaled; Double_tfZScale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlotCoordinates(); Constructor. ~TGLPlotCoordinates(); Destructor. void SetCoordType(EGLCoordType type); If coord type was changed, plot must reset sections (if any),; set fModified. EGLCoordType GetCoordType() const; Get coordinates type. void SetXLog(Bool_t xLog); If log changed, sections must be reset,; set fModified. Bool_t GetXLog() const; Get X log. void SetYLog(Bool_t yLog); If log changed, sections must be reset,; set fModified. Bool_t GetYLog() const; Get Y log. void SetZLog(Bool_t zLog); If log changed, sections must be reset,; set fModified. Bool_t GetZLog() const; Get Z log. void ResetModified(); Reset modified. Bool_t Modified() const; Modified. Bool_t SetRanges(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Set bin ranges, ranges. Int_t GetNXBins() const; Number of X bins. Int_t GetNYBins() const; Number of Y bins. Int_t GetNZBins() const; Number of Z bins. const Rgl::BinRange_t & GetXBins() const; X bins range. const Rgl::BinRange_t & GetYBins() const; Y bins range. const Rgl::BinRange_t & GetZBins() const; Z bins range. const Rgl::Range_t & GetXRange() const; X range. Double_t GetXLength() const; X length. const Rgl::Range_t & GetYRange() const; Y range. Double_t GetYLength() const; Y length. const Rgl::Range_t & GetZRange() const; Z range. Double_t GetZLength() const; Z length. const Rgl::Range_t & GetXRangeScaled() const; Scaled range. const Rgl::Range_t & GetYRangeScaled() const; Scaled range. const Rgl::Range_t & GetZRangeScaled() const; Scaled range. Double_t GetFactor() const; Get factor. Bool_t SetRangesCartesian(const TH1* hist, Bool_t errors = kFALSE, Bool_t zBins = kFALSE); Set bin ranges, ranges, etc. Bool_t SetRanges(TH2Poly* hist); Set bin rang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPlotCoordinates.html:3481,error,errors,3481,root/html528/TGLPlotCoordinates.html,https://root.cern,https://root.cern/root/html528/TGLPlotCoordinates.html,4,['error'],['errors']
Availability,"double> pdfValues = _evaluator->run();; 134 if (_dataWeights.empty()) {; 135 out = std::accumulate(pdfValues.begin(), pdfValues.end(), 0.0) / pdfValues.size();; 136 } else {; 137 double weightsSum = 0.0;; 138 for (std::size_t i = 0; i < pdfValues.size(); ++i) {; 139 out += pdfValues[i] * _dataWeights[i];; 140 weightsSum += _dataWeights[i];; 141 }; 142 out /= weightsSum;; 143 }; 144 out *= _scaleFactor;; 145 ; 146 _var.setVal(oldVal);; 147 return out;; 148 }; 149 double getMinLimit(UInt_t /*dimension*/) const override { return _var.getMin(); }; 150 double getMaxLimit(UInt_t /*dimension*/) const override { return _var.getMax(); }; 151 ; 152private:; 153 RooAbsRealLValue &_var;; 154 std::unique_ptr<RooAbsReal> _arg;; 155 std::span<const double> _dataWeights;; 156 double _scaleFactor;; 157 std::unique_ptr<RooFit::Evaluator> _evaluator;; 158 std::stack<std::vector<double>> _vectorBuffers;; 159};; 160 ; 161struct EvalErrorData {; 162 using ErrorList = std::map<const RooAbsArg *, std::pair<std::string, std::list<RooAbsReal::EvalError>>>;; 163 RooAbsReal::ErrorLoggingMode mode = RooAbsReal::PrintErrors;; 164 int count = 0;; 165 ErrorList errorList;; 166};; 167 ; 168EvalErrorData &evalErrorData(); 169{; 170 static EvalErrorData data;; 171 return data;; 172}; 173 ; 174} // namespace; 175 ; 176Int_t RooAbsReal::numEvalErrorItems(); 177{; 178 return evalErrorData().errorList.size();; 179}; 180 ; 181EvalErrorData::ErrorList::iterator RooAbsReal::evalErrorIter(); 182{; 183 return evalErrorData().errorList.begin();; 184}; 185 ; 186ClassImp(RooAbsReal); 187 ; 188bool RooAbsReal::_globalSelectComp = false;; 189bool RooAbsReal::_hideOffset = true ;; 190 ; 191void RooAbsReal::setHideOffset(bool flag) { _hideOffset = flag ; }; 192bool RooAbsReal::hideOffset() { return _hideOffset ; }; 193 ; 194 ; 195////////////////////////////////////////////////////////////////////////////////; 196/// coverity[UNINIT_CTOR]; 197/// Default constructor; 198 ; 199RooAbsReal::RooAbsReal() {}; 200 ; 201 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:5838,error,errorList,5838,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['errorList']
Availability,"doubleCLsplusb(int index) const; doubleCLsplusbError(int index) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::SimpleInterval::ConfidenceLevel() const; RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const char* name = 0); RooStats::ConfIntervalRooStats::ConfInterval::ConfInterval(const RooStats::ConfInterval&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; intExclusionCleanup(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); intFindIndex(double xvalue) const; doubleFindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooStats::SamplingDistribution*GetAltTestStatDist(int index) const; RooStats::SamplingDistribution*GetBackgroundTestStatDist(int index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); doubleGetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; RooStats::SamplingDistribution*GetExpectedPValueDist(int index) const; doubleGetExpectedUpperLimit(double nsig = 0, const char* opt = """") const; virtual const char*TObject::GetIconName() const; RooStats::HypoTestInverterResult::InterpolOp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:2131,error,error,2131,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['error'],['error']
Availability,"doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html:5636,toler,tolerance,5636,root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,2,['toler'],['tolerance']
Availability,"doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); virtual voidSetRelTolerance(double relTol); virtual intStatus() const. Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error ; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function ; unsigned intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result ; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int size = 100000). construct given optionally tolerance (absolute and relative) and maximum size of working array; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 100000). construct with a reference to the integrand function and given optionally; tolerance (absolute and relative) and maximum size of working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html:2572,toler,tolerance,2572,root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"double studenttDouble (double distributionParameter);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename ItInvActFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight);  ; template<typename ItOutput , typename ItTruth , typename ItDelta , typename InvFnc > ; double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight);  sum of squares error function ;  ; template<typename Container , typename T > ; void uniformDouble (Container &container, T maxValue);  ; double uniformDouble (double minValue, double maxValue);  ; template<typename T > ; T uniformFromTo (T from, T to);  ; template<typename LAYERDATA > ; void update (const LAYERDATA &prevLayerData, LAYERDATA &currLayerData, double factorWeightDecay, EnumRegularization regularization);  update the node values ;  ; template<typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient);  update the gradients ;  ; template<EnumRegularization Regularization, typename ItSource , typename ItDelta , typename ItTargetGradient , typename ItGradient , typename ItWeight > ; void update (ItSource itSource, ItSource itSourceEnd, ItDelta itTargetDeltaBegin, ItDelta itTargetDeltaEnd, ItTargetGradient itTargetGradientBegin, ItGradient itGradient, ItWeight itWeight, double weightDecay);  update the gradients, using regularization ;  ; template<typename ItWeight > ; double weightDecay (double error, ItWeight itWeight, ItWeight itWeightEnd, double factorWeightDecay, EnumRegularization eRegularization);  compute the weight decay for regularization (L1 or L2) ;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:14617,error,error,14617,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['error'],['error']
Availability,"double wgkB [11];  ; static const double wgkC [16];  ; static const double wgkD [21];  ; static const double wgkE [26];  ; static const double wgkF [31];  ; static const double xgkA [8];  ; static const double xgkB [11];  ; static const double xgkC [16];  ; static const double xgkD [21];  ; static const double xgkE [26];  ; static const double xgkF [31];  . Macro Definition Documentation. ◆ GSL_COERCE_DBL. #define GSL_COERCE_DBL; (;  ; x);    (gsl_coerce_double(x)). Definition at line 414 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_DBL_EPSILON. #define GSL_DBL_EPSILON   2.2204460492503131e-16. Definition at line 387 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_DBL_MAX. #define GSL_DBL_MAX   1.7976931348623157e+308. Definition at line 386 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_DBL_MIN. #define GSL_DBL_MIN   2.2250738585072014e-308. Definition at line 385 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EBADTOL. #define GSL_EBADTOL   13 /* user specified an invalid tolerance */. Definition at line 382 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EDIVERGE. #define GSL_EDIVERGE   6. Definition at line 393 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EDOM. #define GSL_EDOM   1 /* input domain error, e.g sqrt(-1) */. Definition at line 380 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EFAILED. #define GSL_EFAILED   5. Definition at line 392 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EINVAL. #define GSL_EINVAL   2. Definition at line 389 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EMAXITER. #define GSL_EMAXITER   3. Definition at line 390 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_ENOMEM. #define GSL_ENOMEM   8 /* malloc failed */. Definition at line 381 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_EROUND. #define GSL_EROUND   7. Definition at line 394 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ GSL_ERROR. #define GSL_ERROR; (;  ; a, .  ; b . );    oo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html:7929,toler,tolerance,7929,doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,https://root.cern,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,1,['toler'],['tolerance']
Availability,"dow size used; static Long64_tfgBytesReadnumber of bytes received by all TFTP objects; static Long64_tfgBytesWritenumber of bytes sent by all TFTP objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFTP(const char* url, Int_t parallel = 1, Int_t wsize = kDfltWindowSize, TSocket* sock = 0); Open connection to host specified by the url using par parallel sockets.; The url has the form: [root[s,k]://]host[:port].; If port is not specified the default rootd port (1094) will be used.; Using wsize one can specify the tcp window size. Normally this is not; needed when using parallel sockets.; An existing connection (TSocket *sock) can also be used to establish; the FTP session. void Init(const char* url, Int_t parallel, Int_t wsize); Set up the actual connection. ~TFTP(); TFTP dtor. Send close message and close socket. void Print(Option_t* opt = """") const; Print some info about the FTP connection. void PrintError(const char* where, Int_t err) const; Print error string depending on error code. Int_t Recv(Int_t& status, EMessageTypes& kind) const; Return status from rootd server and message kind. Returns -1 in; case of error otherwise 8 (sizeof 2 words, status and kind). void SetBlockSize(Int_t blockSize); Make sure the block size is a power of two, with a minimum of 32768. Long64_t PutFile(const char* file, const char* remoteName = 0); Transfer file to remote host. Returns number of bytes; sent or < 0 in case of error. Error -1 connection is still; open, error -2 connection has been closed. In case of failure; fRestartAt is set to the number of bytes correclty transfered.; Calling PutFile() immediately afterwards will restart at fRestartAt.; If this is not desired call SetRestartAt(0) before calling PutFile().; If rootd reports that the file is locked, and you are sure this is not; the case (e.g. due to a crash), you can force unlock it by prepending; the remoteName with a '-'. Long64_t GetFile(const char* file, const char* lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:8572,error,error,8572,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,12,['error'],['error']
Availability,"dow's origin; w, h - the inside size of the window, not including the border. void FillPolygon(Window_t id, GContext_t gc, Point_t* points, Int_t npnt); Fills the region closed by the specified path. The path is closed; automatically if the last point in the list does not coincide with the; first point. Point_t *points - specifies an array of points; Int_t npnt - specifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC; mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Returns the root window the pointer is logically on and the pointer; coordinates relative to the root window's origin. id - specifies the window; rotw - the root window that the pointer is in; childw - the child window that the pointer is located in, if any; root_x, root_y - the pointer coordinates relative to the root window's; origin; win_x, win_y - the pointer coordinates relative to the specified; window ""id""; mask - the current state of the modifier keys and pointer; buttons. void SetForeground(GContext_t gc, ULong_t foreground); Sets the foreground color for the specified GC (shortcut for ChangeGC; with only foreground mask set). gc - specifies the GC; foreground - the foreground you want to set; (see also the GCValues_t structure). void SetClipRectangles(GContext_t gc, Int_t x, Int_t y, Rectangle_t* recs, Int_t n); Sets clipping rectangles in graphics context. [x,y] specify the origin; of the rectangles. ""recs"" specifies an array of rectangles that define; the clipping mask and ""n"" is the number of rectangles.; (see also the GCValues_t structure). void Update(Int_t mode = 0); Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer.; Flush flushes output buffer. Sync flushes buffer and waits till all; requests have been processed by X server. Region_t CreateReg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:59090,mask,mask,59090,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['mask'],['mask']
Availability,"dow_manager.CDemonstrates usage of EVE window-manager ;  ► eve7;  collection.CThis example display collection of ??? in web browser ;  compound.C;  csgdemo.CCombinatorial Solid Geometry example ;  event_demo.CThis example display geometry, tracks and hits in web browser ;  geom_cms.C;  points.CThis example display only points in web browser ;  projection_prescale.C;  show_extract.CHelper script for showing of extracted / simplified geometries ;  table.CThis example display table in web browser ;  tracks.CThis example display only points in web browser ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:106795,error,error,106795,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,2,['error'],"['error', 'errors']"
Availability,"down. */; 6006 for (;;) {; 6007 ; 6008#if defined(USE_MBEDTLS); 6009 if (ssl != NULL) {; 6010 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6011 if (n <= 0) {; 6012 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6013 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6014 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6015 n = 0;; 6016 } else {; 6017 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6018 return -2;; 6019 }; 6020 } else {; 6021 err = 0;; 6022 }; 6023 } else; 6024#elif !defined(NO_SSL); 6025 if (ssl != NULL) {; 6026 ERR_clear_error();; 6027 n = SSL_write(ssl, buf, len);; 6028 if (n <= 0) {; 6029 err = SSL_get_error(ssl, n);; 6030 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6031 err = ERRNO;; 6032 } else if ((err == SSL_ERROR_WANT_READ); 6033 || (err == SSL_ERROR_WANT_WRITE)) {; 6034 n = 0;; 6035 } else {; 6036 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6037 ERR_clear_error();; 6038 return -2;; 6039 }; 6040 ERR_clear_error();; 6041 } else {; 6042 err = 0;; 6043 }; 6044 } else; 6045#endif; 6046 ; 6047 if (fp != NULL) {; 6048 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6049 if (ferror(fp)) {; 6050 n = -1;; 6051 err = ERRNO;; 6052 } else {; 6053 err = 0;; 6054 }; 6055 } else {; 6056 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6057 err = (n < 0) ? ERRNO : 0;; 6058#if defined(_WIN32); 6059 if (err == WSAEWOULDBLOCK) {; 6060 err = 0;; 6061 n = 0;; 6062 }; 6063#else; 6064 if (ERROR_TRY_AGAIN(err)) {; 6065 err = 0;; 6066 n = 0;; 6067 }; 6068#endif; 6069 if (n < 0) {; 6070 /* shutdown of the socket at client side */; 6071 return -2;; 6072 }; 6073 }; 6074 ; 6075 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6076 return -2;; 6077 }; 6078 ; 6079 if ((n > 0) || ((n == 0) && (len == 0))) {; 6080 /* some data has been read, or no data was requested */; 6081 return n;; 6082 }; 6083 if (n < 0) {; 6084 /* socket error - check errno */; 6085 DEBUG_TRACE(""send() failed, error %d"", err);; 6086 ; 6087 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:176302,error,error,176302,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,6,['error'],['error']
Availability,"down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6038 ERR_clear_error();; 6039 return -2;; 6040 }; 6041 ERR_clear_error();; 6042 } else {; 6043 err = 0;; 6044 }; 6045 } else; 6046#endif; 6047 ; 6048 if (fp != NULL) {; 6049 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6050 if (ferror(fp)) {; 6051 n = -1;; 6052 err = ERRNO;; 6053 } else {; 6054 err = 0;; 6055 }; 6056 } else {; 6057 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6058 err = (n < 0) ? ERRNO : 0;; 6059#if defined(_WIN32); 6060 if (err == WSAEWOULDBLOCK) {; 6061 err = 0;; 6062 n = 0;; 6063 }; 6064#else; 6065 if (ERROR_TRY_AGAIN(err)) {; 6066 err = 0;; 6067 n = 0;; 6068 }; 6069#endif; 6070 if (n < 0) {; 6071 /* shutdown of the socket at client side */; 6072 return -2;; 6073 }; 6074 }; 6075 ; 6076 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6077 return -2;; 6078 }; 6079 ; 6080 if ((n > 0) || ((n == 0) && (len == 0))) {; 6081 /* some data has been read, or no data was requested */; 6082 return n;; 6083 }; 6084 if (n < 0) {; 6085 /* socket error - check errno */; 6086 DEBUG_TRACE(""send() failed, error %d"", err);; 6087 ; 6088 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:176334,error,error,176334,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,6,['error'],['error']
Availability,"dows, which are items of the container. In this case sub-window must provide DrawCopy method, see for example TGLVEntry class. It is also possible to use option which allows mapping sub-windows. This option has much slower drawing speed in case of more than 1000 items placed in container. To activate this option the fMapSubwindows data member must be set to kTRUE (for example TTVLVContainer class).; A scroll bar only is available when scrolling is necessary. It consists of three elements: a slider box and two directional scroll arrows (buttons).; fCanvas = new TGCanvas(parent, w, h);; fContents = new TGListTree(fCanvas, kHorizontalFrame);; fContents->Associate(parent);; parent->AddFrame(fCanvas, new TGLayoutHints(kLHintsExpandX |; kLHintsExpandY));; // or; fCanvas = new TGCanvas(parent, w, h);; fContents = new TGListTree(fCanvas->GetViewPort(),100,100,; kHorizontalFrame);; fContents->SetCanvas(fCanvas);; fContents->Associate(parent);; fCanvas->SetContainer(fContents);; parent->AddFrame(fCanvas, new TGLayoutHints(kLHintsExpandX |; kLHintsExpandY));; The TGContainer class can handle the following keys:; F7, Ctnrl-Factivate a search dialog; F3, Ctnrl-Gcontinue to search; Endgo to the last item in container; Homego to the first item in container; PageUpnavigate up; PageDownnavigate down; arrow keysnavigate inside container; Return/Enterequivalent to double click of the mouse button; Contrl-Aselect all items; Spaceinvert selection.; 25.8.15 Embedded Canvas; This class creates a TGCanvas in which a well known ROOT TCanvas is embedded. A pointer to the TCanvas can be obtained via the GetCanvas() member function.; fEc1 = new TRootEmbeddedCanvas(""ec1"",fParent,100,100);; fParent ->AddFrame(fEc1, new TGLayoutHints(kLHintsExpandX |; kLHintsExpandY));; fEc2 = new TRootEmbeddedCanvas(""ec2"",fParent,100,100);; fParent ->AddFrame(fEc2, new TGLayoutHints(kLHintsExpandX |; kLHintsExpandY));; fEc1->GetCanvas()->SetBorderMode(0);; fEc2->GetCanvas()->SetBorderMode(0);; fEc1->GetCanvas()->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1219190,down,down,1219190,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['down']
Availability,"dr, sizeof(adr));; 4163 server.sin_family = addr.GetFamily();; 4164 server.sin_port = sport;; 4165 ; 4166 // Create socket; 4167 int sock;; 4168 if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {; 4169 ::SysError(""TUnixSystem::UnixTcpConnect"", ""socket (%s:%d)"",; 4170 hostname, port);; 4171 return -1;; 4172 }; 4173 ; 4174 if (tcpwindowsize > 0) {; 4175 gSystem->SetSockOpt(sock, kRecvBuffer, tcpwindowsize);; 4176 gSystem->SetSockOpt(sock, kSendBuffer, tcpwindowsize);; 4177 }; 4178 ; 4179 while (connect(sock, (struct sockaddr*) &server, sizeof(server)) == -1) {; 4180 if (GetErrno() == EINTR); 4181 ResetErrno();; 4182 else {; 4183 ::SysError(""TUnixSystem::UnixTcpConnect"", ""connect (%s:%d)"",; 4184 hostname, port);; 4185 close(sock);; 4186 return -1;; 4187 }; 4188 }; 4189 return sock;; 4190}; 4191 ; 4192 ; 4193////////////////////////////////////////////////////////////////////////////////; 4194/// Creates a UDP socket connection; 4195/// Is called via the TSocket constructor. Returns -1 in case of error.; 4196 ; 4197int TUnixSystem::UnixUdpConnect(const char *hostname, int port); 4198{; 4199 short sport;; 4200 struct servent *sp;; 4201 ; 4202 if ((sp = getservbyport(htons(port), kProtocolName))); 4203 sport = sp->s_port;; 4204 else; 4205 sport = htons(port);; 4206 ; 4207 TInetAddress addr = gSystem->GetHostByName(hostname);; 4208 if (!addr.IsValid()) return -1;; 4209 UInt_t adr = htonl(addr.GetAddress());; 4210 ; 4211 struct sockaddr_in server;; 4212 memset(&server, 0, sizeof(server));; 4213 memcpy(&server.sin_addr, &adr, sizeof(adr));; 4214 server.sin_family = addr.GetFamily();; 4215 server.sin_port = sport;; 4216 ; 4217 // Create socket; 4218 int sock;; 4219 if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {; 4220 ::SysError(""TUnixSystem::UnixUdpConnect"", ""socket (%s:%d)"",; 4221 hostname, port);; 4222 return -1;; 4223 }; 4224 ; 4225 while (connect(sock, (struct sockaddr*) &server, sizeof(server)) == -1) {; 4226 if (GetErrno() == EINTR); 4227 ResetErrno();; 4228 else {;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:134402,error,error,134402,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['error'],['error']
Availability,"draw error bars. By default, graph classes that have errors; are drawn with the errors (TGraph itself has no errors, and so this option; has no effect.). ""||""; Draw only the small vertical/horizontal lines at the ends of the; error bars, without drawing the bars themselves. This option is; interesting to superimpose statistical-only errors on top of a graph; with statistical+systematic errors. ""[]""; Does the same as option ""||"" except that it draws additional marks at the; ends of the small vertical/horizontal lines. It makes plots less ambiguous; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:6692,error,error,6692,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,4,['error'],['error']
Availability,"draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; values simultaneously by pressing the left mouse button near to its; center and moving it to a new desire position. ""Minimization"" Tab. ""Library"" group allows you to use Minuit, Minuit2 or Fumili; minimization packages for your fit.; ""Minuit"" - the popular Minuit minimization package.; ""Minuit2"" - a new object-oriented implementation of Minuit in C++.; ""Fumili"" - the popular Fumili minimization package. ""Method"" group has currently restricted functionality.; ""MIGRAD"" method is available for Minuit and Minuit2; ""FUMILI"" method is available for Fumili and Minuit2; ""SIMPLEX"" method is disabled (will come with the new fitter design). ""Minimization Settings' group allows users to set values for: //; ""Error definition"" - between 0.0 and 100.0 (default is 1.0).; ""Maximum tolerance"" - the fit relative precision in use.; ""Maximum number of iterations"" - default is 5000. Print options:; ""Default"" - between Verbose and Quiet.; ""Verbose"" - prints results after each iteration.; ""Quiet"" - no fit information is printed. Fit button - performs a fit.; Reset - resets all GUI elements and related fit settings to the; default ones.; Close - closes this window. //; /*. */. Function Members (Methods); public:. TFitEditor(TVirtualPad* pad, TObject* obj); virtual~TFitEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:4038,toler,tolerance,4038,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,4,['toler'],['tolerance']
Availability,"draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; values simultaneously by pressing the left mouse button near to its; center and moving it to a new desire position. ""Minimization"" Tab. ""Library"" group allows you to use Minuit, Minuit2 or Fumili; minimization packages for your fit.; ""Minuit"" - the popular Minuit minimization package.; ""Minuit2"" - a new object-oriented implementation of Minuit in C++.; ""Fumili"" - the popular Fumili minimization package. ""Method"" group has currently restricted functionality.; ""MIGRAD"" method is available for Minuit and Minuit2; ""FUMILI"" method is available for Fumili and Minuit2; ""SIMPLEX"" method is disabled (will come with the new fitter design). ""Minimization Settings' group allows users to set values for: //; ""Error definition"" - between 0.0 and 100.0 (default is 1.0).; ""Maximum tolerance"" - the fit relative precision in use.; ""Maximum number of iterations"" - default is 5000. Print options:; ""Default"" - between Verbose and Quiet.; ""Verbose"" - prints results after each iteration.; ""Quiet"" - no fit information is printed. Fit button - performs a fit.; Reset - resets all GUI elements and related fit settings to the; default ones.; Close - closes this window. //; /*. */. Function Members (Methods); public:. virtual~TFitEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitEditor.html:4038,toler,tolerance,4038,root/html602/TFitEditor.html,https://root.cern,https://root.cern/root/html602/TFitEditor.html,2,['toler'],['tolerance']
Availability,"draw itself inside a two-pixel frame if; enable is kTRUE, and to draw itself without any frame if enable is; kFALSE. The default is kTRUE. void SetAlignment(ETextJustification mode = kTextLeft); Sets the alignment of the text entry.; Possible values are kTextLeft(default), kTextRight, kTextCenterX.; See also GetAlignment(). void SetInsertMode(TGTextEntry::EInsertMode mode = kInsert); Sets the mode how characters are entered to the text entry. void SetText(const char* text, Bool_t emit = kTRUE); Sets text entry to text, clears the selection and moves; the cursor to the end of the line.; If necessary the text is truncated to fit MaxLength().; See also GetText(). void SetMaxLength(Int_t maxlen); Set the maximum length of the text in the editor. If the text is; currently too long, it is chopped off at the limit. Any marked text will; be unmarked. The cursor position is set to 0 and the first part of the; string is shown.; See also GetMaxLength(). void SetEchoMode(TGTextEntry::EEchoMode mode = kNormal); The echo modes available are:. ; kNormal - display characters as they are entered. This is the default.; kNoEcho - do not display anything.; kPassword - display asterisks instead of the characters actually entered.; . It is always possible to cut and paste any marked text; only the widget's own; display is affected.; See also GetEchoMode(), GetDisplayText(). TString GetMarkedText() const; Returns the text marked by the user (e.g. by clicking and; dragging), or zero if no text is marked.; See also HasMarkedText(). void NewMark(Int_t pos); New character mark at position pos.; See also SetCursorPosition(). void SetCursorPosition(Int_t pos); Set the cursor position to newPos.; See also NewMark(). void MarkWord(Int_t pos); Marks the word nearest to cursor position.; See also HandleDoubleClick(). void Insert(const char* ); Removes any currently selected text, inserts newText,; sets it as the new contents of the text entry. void CursorRight(Bool_t mark = kFALSE, Int_t steps = 1)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEntry.html:29250,echo,echo,29250,root/html528/TGTextEntry.html,https://root.cern,https://root.cern/root/html528/TGTextEntry.html,12,"['avail', 'echo']","['available', 'echo']"
Availability,"dress(&event);; branch->SetAutoDelete(kTRUE);; for (Int_t i=0; i<nentries; i++) {; T.GetEntry(i); // the object event has been filled at this point; }; At any iteration, the GetEntry deletes the object event and a new instance of Event is created and filled.; Option 3 - same as option 1, but you delete the event yourself:; for (Int_t i=0; i<nentries; i++) {; delete event;; event = 0; //EXTREMELY IMPORTANT; T.GetEntry(i);; // the objrect event has been filled at this point; }; It is strongly recommended to use the default option 1. It has the additional advantage that functions like TTree::Draw (internally calling TTree::GetEntry) will be functional even when the classes in the file are not available. Reading selected branches is quicker than reading an entire entry. If you are interested in only one branch, you can use the TBranch::GetEntry method and only that branch is read. Here is the script tree1r:; void tree1r(){; // read the Tree generated by tree1w and fill two histograms; // note that we use ""new"" to create the TFile and TTree objects,; // to keep them alive after leaving this function.; TFile *f = new TFile(""tree1.root"");; TTree *t1 = (TTree*)f->Get(""t1"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1->SetBranchAddress(""px"",&px);; t1->SetBranchAddress(""py"",&py);; t1->SetBranchAddress(""pz"",&pz);; t1->SetBranchAddress(""random"",&random);; t1->SetBranchAddress(""ev"",&ev);; // create two histograms; TH1F *hpx = new TH1F(""hpx"",""px distribution"",100,-3,3);; TH2F *hpxpy = new TH2F(""hpxpy"",""py vs px"",30,-3,3,30,-3,3);; //read all entries and fill the histograms; Int_t nentries = (Int_t)t1->GetEntries();; for (Int_t i=0; i<nentries; i++) {; t1->GetEntry(i);; hpx->Fill(px);; hpxpy->Fill(px,py);; }; // We do not close the file. We want to keep the generated; // histograms we open a browser and the TreeViewer; if (gROOT->IsBatch()) return;; new TBrowser ();; t1->StartViewer();. //In the browser, click on ""ROOT Files"", then on ""tree1.root""; //You can click on the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:558959,alive,alive,558959,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['alive'],['alive']
Availability,"ds recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(). RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x obs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:36818,error,errors,36818,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['error'],"['error', 'errors']"
Availability,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSocket.html:11685,error,error,11685,root/html534/TXSocket.html,https://root.cern,https://root.cern/root/html534/TXSocket.html,1,['error'],['error']
Availability,"ds,; 20103 sizeof(struct mg_connection),; 20104 ctx);; 20105 if (ctx->worker_connections == NULL) {; 20106 const char *err_msg =; 20107 ""Not enough memory for worker thread connection array"";; 20108 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20109 ; 20110 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20111 mg_snprintf(NULL,; 20112 NULL, /* No truncation check for error buffers */; 20113 error->text,; 20114 error->text_buffer_size,; 20115 ""%s"",; 20116 err_msg);; 20117 }; 20118 free_context(ctx);; 20119 pthread_setspecific(sTlsKey, NULL);; 20120 return NULL;; 20121 }; 20122 ; 20123#if defined(ALTERNATIVE_QUEUE); 20124 ctx->client_wait_events =; 20125 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20126 sizeof(ctx->client_wait_events[0]),; 20127 ctx);; 20128 if (ctx->client_wait_events == NULL) {; 20129 const char *err_msg = ""Not enough memory for worker event array"";; 20130 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20131 mg_free(ctx->worker_threadids);; 20132 ; 20133 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20134 mg_snprintf(NULL,; 20135 NULL, /* No truncation check for error buffers */; 20136 error->text,; 20137 error->text_buffer_size,; 20138 ""%s"",; 20139 err_msg);; 20140 }; 20141 free_context(ctx);; 20142 pthread_setspecific(sTlsKey, NULL);; 20143 return NULL;; 20144 }; 20145 ; 20146 ctx->client_socks =; 20147 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20148 sizeof(ctx->client_socks[0]),; 20149 ctx);; 20150 if (ctx->client_socks == NULL) {; 20151 const char *err_msg = ""Not enough memory for worker socket array"";; 20152 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20153 mg_free(ctx->client_wait_events);; 20154 mg_free(ctx->worker_threadids);; 20155 ; 20156 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20157 mg_snprintf(NULL,; 20158 NULL, /* No truncation check for error buffers */; 20159 error->text,; 20160 error->text_buffer_size,; 20161 ""%s"",; 20162 err_msg);; 20163 }; 20164 free_context(ctx);; 20165 pthread_setspe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:601770,error,error,601770,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ds,; 20104 sizeof(struct mg_connection),; 20105 ctx);; 20106 if (ctx->worker_connections == NULL) {; 20107 const char *err_msg =; 20108 ""Not enough memory for worker thread connection array"";; 20109 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20110 ; 20111 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20112 mg_snprintf(NULL,; 20113 NULL, /* No truncation check for error buffers */; 20114 error->text,; 20115 error->text_buffer_size,; 20116 ""%s"",; 20117 err_msg);; 20118 }; 20119 free_context(ctx);; 20120 pthread_setspecific(sTlsKey, NULL);; 20121 return NULL;; 20122 }; 20123 ; 20124#if defined(ALTERNATIVE_QUEUE); 20125 ctx->client_wait_events =; 20126 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20127 sizeof(ctx->client_wait_events[0]),; 20128 ctx);; 20129 if (ctx->client_wait_events == NULL) {; 20130 const char *err_msg = ""Not enough memory for worker event array"";; 20131 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20132 mg_free(ctx->worker_threadids);; 20133 ; 20134 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20135 mg_snprintf(NULL,; 20136 NULL, /* No truncation check for error buffers */; 20137 error->text,; 20138 error->text_buffer_size,; 20139 ""%s"",; 20140 err_msg);; 20141 }; 20142 free_context(ctx);; 20143 pthread_setspecific(sTlsKey, NULL);; 20144 return NULL;; 20145 }; 20146 ; 20147 ctx->client_socks =; 20148 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20149 sizeof(ctx->client_socks[0]),; 20150 ctx);; 20151 if (ctx->client_socks == NULL) {; 20152 const char *err_msg = ""Not enough memory for worker socket array"";; 20153 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20154 mg_free(ctx->client_wait_events);; 20155 mg_free(ctx->worker_threadids);; 20156 ; 20157 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20158 mg_snprintf(NULL,; 20159 NULL, /* No truncation check for error buffers */; 20160 error->text,; 20161 error->text_buffer_size,; 20162 ""%s"",; 20163 err_msg);; 20164 }; 20165 free_context(ctx);; 20166 pthread_setspe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:601803,error,error,601803,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"dstore;  Data storage implementation. ;  ; std::unique_ptr< RooArgSet > _globalObservables;  Snapshot of global observables. ;  ; const TNamed * _namePtr = nullptr;  ! De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; std::map< std::string, RooAbsData * > _ownedComponents;  Owned external components. ;  ; RooArgSet _vars;  Dimensions of this data set. ;  ; StorageType storageType;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from RooDirItem; TDirectory * _dir {nullptr};  ! Associated directory ;  . Private Member Functions; void loadValuesFromSlices (RooCategory &indexCat, std::map< std::string, RooAbsData * > const &slices, const char *rangeName, RooFormulaVar const *cutVar, const char *cutSpec);  . Private Attributes; bool _doWeightErrorCheck {true};  ! When adding events with weights, check that weights can actually be stored. ;  ; unsigned short _errorMsgCount {0};  ! Counter to silence error messages when filling dataset. ;  ; std::unique_ptr< std::vector< double > > _sumW2Buffer;  ! Buffer for sumW2 in case a batch of values is requested. ;  . Friends; class RooProdGenContext;  . Additional Inherited Members;  Public Types inherited from RooAbsData; using CategorySpans = std::map< RooFit::Detail::DataKey, std::span< const RooAbsCategory::value_type > >;  ; enum  ErrorType { ;   Poisson; , SumW2; , None; , Auto; , ;   Expected. };  ; using RealSpans = std::map< RooFit::Detail::DataKey, std::span< const double > >;  ; enum  StorageType { Tree; , Vector; , Composite; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:34864,error,error,34864,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['error'],['error']
Availability,"dsuit""); l.DrawText(x2, y, ""\\diamondsuit"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\div""); l.DrawText(x2, y, ""\\div"");; y -= step ; l.DrawMathText(x1, y, ""\\divideontimes""); l.DrawText(x2, y, ""\\divideontimes"");; y -= step ; l.DrawMathText(x1, y, ""\\doteq""); l.DrawText(x2, y, ""\\doteq"");; y -= step ; l.DrawMathText(x1, y, ""\\doteqdot""); l.DrawText(x2, y, ""\\doteqdot"");; y -= step ; l.DrawMathText(x1, y, ""\\dotplus""); l.DrawText(x2, y, ""\\dotplus"");; y -= step ; l.DrawMathText(x1, y, ""\\doublebarwedge""); l.DrawText(x2, y, ""\\doublebarwedge"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecap""); l.DrawText(x2, y, ""\\doublecap"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecup""); l.DrawText(x2, y, ""\\doublecup"");; y -= step ; l.DrawMathText(x1, y, ""\\downarrow""); l.DrawText(x2, y, ""\\downarrow"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownarrows""); l.DrawText(x2, y, ""\\downdownarrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownharpoons""); l.DrawText(x2, y, ""\\downdownharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonleft""); l.DrawText(x2, y, ""\\downharpoonleft"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonright""); l.DrawText(x2, y, ""\\downharpoonright"");; y -= step ; l.DrawMathText(x1, y, ""\\downuparrows""); l.DrawText(x2, y, ""\\downuparrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downupharpoons""); l.DrawText(x2, y, ""\\downupharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\ell""); l.DrawText(x2, y, ""\\ell"");; y -= step ; l.DrawMathText(x1, y, ""\\emptyset""); l.DrawText(x2, y, ""\\emptyset"");; y -= step ; l.DrawMathText(x1, y, ""\\epsilon""); l.DrawText(x2, y, ""\\epsilon"");; y -= step ; l.DrawMathText(x1, y, ""\\eqcirc""); l.DrawText(x2, y, ""\\eqcirc"");. // Draw 3rd Column; y = 0.99; step = 0.0126; x1 = 0.27; x2 = x1+0.02;; l.DrawMathText(x1, y, ""\\eqcolon""); l.DrawText(x2, y, ""\\eqcolon"");; y -=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMathText.html:14904,down,downdownarrows,14904,root/html602/TMathText.html,https://root.cern,https://root.cern/root/html602/TMathText.html,2,['down'],['downdownarrows']
Availability,"dsuit""); l.DrawText(x2, y, ""\\diamondsuit"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\digamma""); l.DrawText(x2, y, ""\\digamma"");; y -= step ; l.DrawMathText(x1, y, ""\\div""); l.DrawText(x2, y, ""\\div"");; y -= step ; l.DrawMathText(x1, y, ""\\divideontimes""); l.DrawText(x2, y, ""\\divideontimes"");; y -= step ; l.DrawMathText(x1, y, ""\\doteq""); l.DrawText(x2, y, ""\\doteq"");; y -= step ; l.DrawMathText(x1, y, ""\\doteqdot""); l.DrawText(x2, y, ""\\doteqdot"");; y -= step ; l.DrawMathText(x1, y, ""\\dotplus""); l.DrawText(x2, y, ""\\dotplus"");; y -= step ; l.DrawMathText(x1, y, ""\\doublebarwedge""); l.DrawText(x2, y, ""\\doublebarwedge"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecap""); l.DrawText(x2, y, ""\\doublecap"");; y -= step ; l.DrawMathText(x1, y, ""\\doublecup""); l.DrawText(x2, y, ""\\doublecup"");; y -= step ; l.DrawMathText(x1, y, ""\\downarrow""); l.DrawText(x2, y, ""\\downarrow"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownarrows""); l.DrawText(x2, y, ""\\downdownarrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downdownharpoons""); l.DrawText(x2, y, ""\\downdownharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonleft""); l.DrawText(x2, y, ""\\downharpoonleft"");; y -= step ; l.DrawMathText(x1, y, ""\\downharpoonright""); l.DrawText(x2, y, ""\\downharpoonright"");; y -= step ; l.DrawMathText(x1, y, ""\\downuparrows""); l.DrawText(x2, y, ""\\downuparrows"");; y -= step ; l.DrawMathText(x1, y, ""\\downupharpoons""); l.DrawText(x2, y, ""\\downupharpoons"");; y -= step ; l.DrawMathText(x1, y, ""\\ell""); l.DrawText(x2, y, ""\\ell"");; y -= step ; l.DrawMathText(x1, y, ""\\emptyset""); l.DrawText(x2, y, ""\\emptyset"");; y -= step ; l.DrawMathText(x1, y, ""\\epsilon""); l.DrawText(x2, y, ""\\epsilon"");; y -= step ; l.DrawMathText(x1, y, ""\\eqcirc""); l.DrawText(x2, y, ""\\eqcirc"");; ; // Draw 3rd Column; y = 0.99; step = 0.0126; x1 = 0.27; x2 = x1+0.02;; l.DrawMathText(x1, y, ""\\eqcolon""); l.DrawText(x2, y, ""\\eqcolon"");; y ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMathText.html:14908,down,downdownarrows,14908,root/html534/TMathText.html,https://root.cern,https://root.cern/root/html534/TMathText.html,1,['down'],['downdownarrows']
Availability,"dt between x and infinity; 198 ; 199Double_t TMath::Erfc(Double_t x); 200{; 201 return ::ROOT::Math::erfc(x);; 202}; 203 ; 204////////////////////////////////////////////////////////////////////////////////; 205/// Returns the inverse error function.; 206/// x must be <-1<x<1; 207 ; 208Double_t TMath::ErfInverse(Double_t x); 209{; 210 Int_t kMaxit = 50;; 211 Double_t kEps = 1e-14;; 212 Double_t kConst = 0.8862269254527579; // sqrt(pi)/2.0; 213 ; 214 if(TMath::Abs(x) <= kEps) return kConst*x;; 215 ; 216 // Newton iterations; 217 Double_t erfi, derfi, y0,y1,dy0,dy1;; 218 if(TMath::Abs(x) < 1.0) {; 219 erfi = kConst*TMath::Abs(x);; 220 y0 = TMath::Erf(0.9*erfi);; 221 derfi = 0.1*erfi;; 222 for (Int_t iter=0; iter<kMaxit; iter++) {; 223 y1 = 1. - TMath::Erfc(erfi);; 224 dy1 = TMath::Abs(x) - y1;; 225 if (TMath::Abs(dy1) < kEps) {if (x < 0) return -erfi; else return erfi;}; 226 dy0 = y1 - y0;; 227 derfi *= dy1/dy0;; 228 y0 = y1;; 229 erfi += derfi;; 230 if(TMath::Abs(derfi/erfi) < kEps) {if (x < 0) return -erfi; else return erfi;}; 231 }; 232 }; 233 return 0; //did not converge; 234}; 235 ; 236////////////////////////////////////////////////////////////////////////////////; 237/// Returns the inverse of the complementary error function.; 238/// x must be 0<x<2; 239/// implement using the quantile of the normal distribution; 240/// instead of ErfInverse for better numerical precision for large x; 241 ; 242Double_t TMath::ErfcInverse(Double_t x); 243{; 244 ; 245 // erfc-1(x) = - 1/sqrt(2) * normal_quantile( 0.5 * x); 246 return - 0.70710678118654752440 * TMath::NormQuantile( 0.5 * x);; 247}; 248 ; 249////////////////////////////////////////////////////////////////////////////////; 250/// Computes factorial(n).; 251 ; 252Double_t TMath::Factorial(Int_t n); 253{; 254 if (n <= 0) return 1.;; 255 Double_t x = 1;; 256 Int_t b = 0;; 257 do {; 258 b++;; 259 x *= b;; 260 } while (b != n);; 261 return x;; 262}; 263 ; 264///////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:7090,error,error,7090,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['error'],['error']
Availability,"dth is the width of the band. Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units. Algorithm:. A(x1,y1) P B(x2,y2). I; I; I; I; M(x,y). Let us call a = distance AM a2=a**2; b = distance BM b2=b**2; c = distance AB c2=c**2; d = distance PM d2=d**2; u = distance AP u2=u**2; v = distance BP v2=v**2 c = u + v. d2 = a2 - u2; d2 = b2 - v2 = b2 -(c-u)**2; ==> u = (a2 -b2 +c2)/2c. Float_t x1 = gPad->XtoAbsPixel(xp1);; Float_t y1 = gPad->YtoAbsPixel(yp1);; Float_t x2 = gPad->XtoAbsPixel(xp2);; Float_t y2 = gPad->YtoAbsPixel(yp2);. Int_t SetNextPoint(Float_t x, Float_t y, Float_t z); Add one 3D point defined by x,y,z to the array of the points; as its last element. Int_t GetN() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. TPoints3DABC(); {;}. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t GetX(Int_t idx) const. Float_t GetY(Int_t idx) const. Float_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPoints3DABC.html:8242,avail,available,8242,root/html602/TPoints3DABC.html,https://root.cern,https://root.cern/root/html602/TPoints3DABC.html,4,['avail'],['available']
Availability,"dth is the width of the band. Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units. Algorithm:. A(x1,y1) P B(x2,y2). I; I; I; I; M(x,y). Let us call a = distance AM a2=a**2; b = distance BM b2=b**2; c = distance AB c2=c**2; d = distance PM d2=d**2; u = distance AP u2=u**2; v = distance BP v2=v**2 c = u + v. d2 = a2 - u2; d2 = b2 - v2 = b2 -(c-u)**2; ==> u = (a2 -b2 +c2)/2c. Float_t x1 = gPad->XtoAbsPixel(xp1);; Float_t y1 = gPad->YtoAbsPixel(yp1);; Float_t x2 = gPad->XtoAbsPixel(xp2);; Float_t y2 = gPad->YtoAbsPixel(yp2);. Int_t SetNextPoint(Float_t x, Float_t y, Float_t z); Add one 3D point defined by x,y,z to the array of the points; as its last element. Int_t GetN() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t GetX(Int_t idx) const. Float_t GetY(Int_t idx) const. Float_t GetZ(Int_t idx) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPoints3DABC.html:7642,avail,available,7642,root/html528/TPoints3DABC.html,https://root.cern,https://root.cern/root/html528/TPoints3DABC.html,8,['avail'],['available']
Availability,"dth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; In addition to the drawing options previously described, the graphs with error; bars can be drawn with the following extra options:. ""Z""; By default horizonthal and vertical small lines are drawn at; the end of the error bars. If option ""z"" or ""Z"" is specified,; these lines are not drawn. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; By default the error bars are drawn. If option ""X"" is specified,; the errors are not drawn. The graph with errors in drawn like a normal graph. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y axis the error; bars are not drawn. Combined with other options, this option forces error bars'; drawing for the data points outside the visible range along the Y axis. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphPainter.html:5425,error,errors,5425,root/html530/TGraphPainter.html,https://root.cern,https://root.cern/root/html530/TGraphPainter.html,1,['error'],['errors']
Availability,"dth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; In addition to the drawing options previously described, the graphs with error; bars can be drawn with the following extra options:. ""Z""; By default horizonthal and vertical small lines are drawn at; the end of the error bars. If option ""z"" or ""Z"" is specified,; these lines are not drawn. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; By default the error bars are drawn. If option ""X"" is specified,; the errors are not drawn. The graph with errors in drawn like a normal graph. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:5425,error,errors,5425,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,1,['error'],['errors']
Availability,"dthComboBox;  CTGLIsoPainter""gliso"" option for TH3 ;  CTGListBox;  CTGListDetailsLayout;  CTGListLayout;  CTGListTree;  CTGListTreeItem;  CTGListTreeItemStd;  CTGListView;  CTGLLegoPainterPlot-painter implementing LEGO rendering of TH2 histograms in cartesian, polar, cylindrical and spherical coordinates ;  CTGLLevelPalette;  CTGLLightSetEncapsulates a set of lights for OpenGL ;  CTGLLightSetEditor;  CTGLLightSetSubEditorSub-editor for TGLLightSet ;  CTGLLine33D space, fixed length, line class, with direction / length 'vector', passing through point 'vertex' ;  ►CTGLLockableSimple locking interface used by viewer and scene ;  CTUnlocker;  CTGLLogicalShapeAbstract logical shape - a GL 'drawable' - base for all shapes - faceset sphere etc ;  CTGLManager;  CTGLManipAbstract base class for viewer manipulators, which allow direct in viewer manipulation of a (TGlPhysicalShape) object - currently translation, scaling and rotation along/round objects local axes ;  CTGLManipSetCombine all available manipulators in a collection ;  CTGLMatrix16 component (4x4) transform matrix - column MAJOR as per GL ;  CTGlobalGlobal variables class (global variables are obtained from CINT) ;  CTGlobalMappedFunction;  CTGLObjectBase-class for direct OpenGL renderers ;  CTGLongPosition;  CTGLOrthoCameraOrthographic projection camera ;  CTGLOutputWrapper class for GL capture & output routines ;  CTGLOverlayButtonGL-overlay button ;  CTGLOverlayElementAn overlay element ;  CTGLOverlayListManage a collection of overlay elements ;  CTGLOvlSelectRecordSelection record for overlay objects ;  CTGLPadPainter""Delegating"" part of TGLPadPainter ;  CTGLPaintDevice;  CTGLParametricEquationA parametric surface is a surface defined by a parametric equation, involving two parameters (u, v): ;  CTGLParametricEquationGLGL-renderer wrapper for TGLParametricEquation ;  ►CTGLParametricPlot;  CVertex_t;  CTGLPerspectiveCameraPerspective projection camera - with characteristic foreshortening ;  CTGLPhysicalShapeCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:176293,avail,available,176293,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['avail'],['available']
Availability,"dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:13915,error,error,13915,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,4,['error'],['error']
Availability,"duced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time CPU and wall clock consumption of fit steps, off by default; PrintLevel(Int_t level) -- Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; messages are suppressed as well; Warnings(Bool_t flag) -- Enable or disable MINUIT warnings (enabled by default); PrintEvalErrors(Int_t numErr) -- Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataHist& data, RooCmdArg arg1, RooCmdArg arg2, 				 RooCmdArg arg3, RooCmdArg arg4, RooCmdArg arg5, 				 RooCmdArg arg6, RooCmdArg arg7, RooCmdArg arg8); Create a chi-2 from a histogram and this function. The following named arguments are supported. Options to control construction of the chi^2. DataError(RooAbsData::ErrorType) -- Choose between Poisson errors and Sum-of-weights errors; NumCPU(Int_t) -- Activate parallel processing feature on N processes; Range() -- Calculate Chi2 only in selected region. RooAbsReal* createChi2(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to create a chi2. RooFitResult* chi2FitTo(RooDataSet& xydata, RooCmdArg arg1, RooCmdArg arg2, 				 RooCmdArg arg3, RooCmdArg arg4, RooCmdArg arg5, 				 RooCmdArg arg6, RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:72145,error,error,72145,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['error'],['error']
Availability,"duced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time CPU and wall clock consumption of fit steps, off by default; PrintLevel(Int_t level) -- Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; messages are suppressed as well; Warnings(Bool_t flag) -- Enable or disable MINUIT warnings (enabled by default); PrintEvalErrors(Int_t numErr) -- Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a histogram and this function. The following named arguments are supported. Options to control construction of the chi^2. DataError(RooAbsData::ErrorType) -- Choose between Poisson errors and Sum-of-weights errors; NumCPU(Int_t) -- Activate parallel processing feature on N processes; Range() -- Calculate Chi2 only in selected region. RooAbsReal* createChi2(RooDataHist& data, const RooLinkedList& cmdList); I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:73111,error,error,73111,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['error'],['error']
Availability,"duced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time CPU and wall clock consumption of fit steps, off by default; PrintLevel(Int_t level) -- Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; messages are suppressed as well; Warnings(Bool_t flag) -- Enable or disable MINUIT warnings (enabled by default); PrintEvalErrors(Int_t numErr) -- Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataSet& data, RooCmdArg arg1, RooCmdArg arg2, 				 RooCmdArg arg3, RooCmdArg arg4, RooCmdArg arg5, 				 RooCmdArg arg6, RooCmdArg arg7, RooCmdArg arg8); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:75128,error,error,75128,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['error'],['error']
Availability,"duced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time CPU and wall clock consumption of fit steps, off by default; PrintLevel(Int_t level) -- Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; messages are suppressed as well; Warnings(Bool_t flag) -- Enable or disable MINUIT warnings (enabled by default); PrintEvalErrors(Int_t numErr) -- Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataSet& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights (default), or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:76506,error,error,76506,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['error'],['error']
Availability,"duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for those; RooAddPdf components that have the default 'automatic' interpretation of; coefficients (i.e. the interpretation is defined by the observables passed; to getVal()). If force is true, also RooAddPdf that already have a fixed; interpretation are changed to a new fixed interpretation. void fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization range choice is only fixed for those; RooAddPdf components that currently use the de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:63116,error,errors,63116,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['error'],['errors']
Availability,"dvirtual; DoProfile(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoProjection(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoQuantiles(bool onX, const char *name, Double_t prob) constTH2protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; fArrayTArrayF; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t) overrideTH2protectedvirtual; Fill(const char *, Double_t) overrideTH2inlineprotectedvirtual; Fill(Double_t x, Double_t y) overrideTH2virtual; Fill(Double_t x, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2F-members.html:4960,error,error,4960,doc/master/classTH2F-members.html,https://root.cern,https://root.cern/doc/master/classTH2F-members.html,2,['error'],['error']
Availability,"dvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjStringCollectable string class.Definition TObjString.h:28; TObjString::StringTString & String()Definition TObjString.h:48; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::RecursiveRemovevirtual void RecursiveRemove(TObject *obj)Recursively remove this object from a list.Definition TObject.cxx:665; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TPRegexpDefinition TPRegexp.h:36; TPluginHandlerDefinition TPluginManager.h:103; TQObject::Emitvoid Emit(const char *signal, const T &arg)Activate signal with single parameter.Definition TQObject.h:164; TROOT::GetMacroPathstatic const char * GetMacroPath()Get macro search path. Static utility function.Definition TROOT.cxx:2762; TROOT::ShutDownstatic void ShutDown()Shut down ROOT.Definition TROOT.cxx:3140; TROOT::GetTTFFontDirstatic const TString & GetTTFFontDir()Get the fonts directory ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:100555,error,error,100555,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['error'],['error']
Availability,"dx.Definition TObjArray.cxx:235; TObjArray::AddAftervoid AddAfter(const TObject *after, TObject *obj) overrideAdd object in the slot after object after.Definition TObjArray.cxx:215; TObjArray::Streamervoid Streamer(TBuffer &) overrideStream all objects in the array to or from the I/O buffer.Definition TObjArray.cxx:449; TObjArray::MakeIteratorTIterator * MakeIterator(Bool_t dir=kIterForward) const overrideReturns an array iterator.Definition TObjArray.cxx:649; TObjArray::Compressvirtual void Compress()Remove empty slots from array.Definition TObjArray.cxx:334; TObjArray::GetEntriesInt_t GetEntries() const overrideReturn the number of objects in array (i.e.Definition TObjArray.cxx:523; TObjArray::BoundsOkBool_t BoundsOk(const char *where, Int_t at) constDefinition TObjArray.h:157; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::OutOfBoundsErrorBool_t OutOfBoundsError(const char *where, Int_t i) constGenerate an out-of-bounds error. Always returns false.Definition TObjArray.cxx:658; TObjArray::BinarySearchvirtual Int_t BinarySearch(TObject *obj, Int_t upto=kMaxInt)Find object using a binary search.Definition TObjArray.cxx:841; TObjArray::AddLastvoid AddLast(TObject *obj) overrideAdd object in the next empty slot in the array.Definition TObjArray.cxx:178; TObjArray::FirstTObject * First() const overrideReturn the object in the first slot.Definition TObjArray.cxx:496; TObjArray::fLowerBoundInt_t fLowerBoundArray contents.Definition TObjArray.h:38; TObjArray::RemoveTObject * Remove(TObject *obj) overrideRemove object from array.Definition TObjArray.cxx:719; TObjArray::GetAbsLastInt_t GetAbsLast() constReturn absolute index to last object in array.Definition TObjArray.cxx:539; TObjArray::SetLastvoid SetLast(Int_t last)Set index of last object in array, effectively truncating the array.Definition TObjArray.cxx:775; TObjArray::RemoveAtTObject * RemoveAt(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:38044,error,error,38044,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['error'],['error']
Availability,"dy Haas; 4663 if (!GetListOfPrimitives()) return nullptr; //Andy Haas; 4664 ; 4665 Int_t dist;; 4666 // Search if point is in pad itself; 4667 Double_t x = AbsPixeltoX(px);; 4668 Double_t y = AbsPixeltoY(py);; 4669 if (this != gPad->GetCanvas()) {; 4670 if (!((x >= fX1 && x <= fX2) && (y >= fY1 && y <= fY2))) return nullptr;; 4671 }; 4672 ; 4673 // search for a primitive in this pad or its sub-pads; 4674 static TObjOptLink dummyLink(nullptr,""""); //place holder for when no link available; 4675 ; 4676 TContext ctxt(this, kFALSE); // since no drawing will be done, don't use cd() for efficiency reasons; 4677 ; 4678 TPad *pick = nullptr;; 4679 TPad *picked = this;; 4680 pickobj = nullptr;; 4681 if (DistancetoPrimitive(px,py) < fgMaxPickDistance) {; 4682 dummyLink.SetObject(this);; 4683 pickobj = &dummyLink;; 4684 }; 4685 ; 4686 // Loop backwards over the list of primitives. The first non-pad primitive; 4687 // found is the selected one. However, we have to keep going down the; 4688 // list to see if there is maybe a pad overlaying the primitive. In that; 4689 // case look into the pad for a possible primitive. Once a pad has been; 4690 // found we can terminate the loop.; 4691 Bool_t gotPrim = kFALSE; // true if found a non pad primitive; 4692 TObjLink *lnk = GetListOfPrimitives()->LastLink();; 4693 ; 4694 //We can have 3d stuff in pad. If canvas prefers to draw; 4695 //such stuff with OpenGL, the selection of 3d objects is; 4696 //a gl viewer business so, in first cycle we do not; 4697 //call DistancetoPrimitive for TAtt3D descendants.; 4698 //In case of gl we first try to select 2d object first.; 4699 ; 4700 while (lnk) {; 4701 TObject *obj = lnk->GetObject();; 4702 ; 4703 //If canvas prefers GL, all 3d objects must be drawn/selected by; 4704 //gl viewer; 4705 if (obj->InheritsFrom(TAtt3D::Class()) && fEmbeddedGL) {; 4706 lnk = lnk->Prev();; 4707 continue;; 4708 }; 4709 ; 4710 fPadPointer = obj;; 4711 if (obj->InheritsFrom(TPad::Class())) {; 4712 pick = ((TPad*)obj)->Pi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:149074,down,down,149074,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['down'],['down']
Availability,"dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetDX() const; virtual Double_tGetDY() const; virtual Double_tGetDZ() const; virtual Double_tGetFacetArea(Int_t index = 0) const; virtual Int_tGetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; virtual const char*TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBBox.html:5532,error,error,5532,root/html534/TGeoBBox.html,https://root.cern,https://root.cern/root/html534/TGeoBBox.html,3,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. TGeoCombiTrans(); TGeoCombiTrans(const TGeoCombiTrans& other); TGeoCombiTrans(const TGeoMatrix& other); TGeoCombiTrans(const char* name); TGeoCombiTrans(const TGeoTranslation& tr, const TGeoRota",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCombiTrans.html:6234,error,error,6234,root/html528/TGeoCombiTrans.html,https://root.cern,https://root.cern/root/html528/TGeoCombiTrans.html,4,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. TGeoGenTrans(); TGeoGenTrans(const char* name); TGeoGenTrans(const TGeoGenTrans&); TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGenTrans.html:6232,error,error,6232,root/html528/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html528/TGeoGenTrans.html,4,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. TGeoHMatrix(); TGeoHMatrix(const TGeoMatrix& matrix); TGeoHMatrix(const char* name); TGeoHMatrix(const TGeoHMatrix&); virtual~TGeoHMatrix(); voidTObject::AbstractMethod(const char* method) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHMatrix.html:6225,error,error,6225,root/html528/TGeoHMatrix.html,https://root.cern,https://root.cern/root/html528/TGeoHMatrix.html,4,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. TGeoIdentity(); TGeoIdentity(const char* name); TGeoIdentity(const TGeoIdentity&); virtual~TGeoIdentity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoIdentity.html:6228,error,error,6228,root/html528/TGeoIdentity.html,https://root.cern,https://root.cern/root/html528/TGeoIdentity.html,4,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. TGeoRotation(); TGeoRotation(const TGeoRotation& other); TGeoRotation(const TGeoMatrix& other); TGeoRotation(const char* name); TGeoRotation(const char* name, Double_t phi, Double_t theta, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoRotation.html:6228,error,error,6228,root/html528/TGeoRotation.html,https://root.cern,https://root.cern/root/html528/TGeoRotation.html,4,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. TGeoScale(); TGeoScale(const TGeoScale& other); TGeoScale(Double_t sx, Double_t sy, Double_t sz); TGeoScale(const char* name, Double_t sx, Double_t sy, Double_t sz); virtual~TGeoScale(); voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoScale.html:6219,error,error,6219,root/html528/TGeoScale.html,https://root.cern,https://root.cern/root/html528/TGeoScale.html,4,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. TGeoTranslation(); TGeoTranslation(const TGeoTranslation& other); TGeoTranslation(const TGeoMatrix& other); TGeoTranslation(Double_t dx, Double_t dy, Double_t dz); TGeoTranslation(const char* na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTranslation.html:6237,error,error,6237,root/html528/TGeoTranslation.html,https://root.cern,https://root.cern/root/html528/TGeoTranslation.html,4,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. virtual~TGeoCombiTrans(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCombiTrans.html:6234,error,error,6234,root/html602/TGeoCombiTrans.html,https://root.cern,https://root.cern/root/html602/TGeoCombiTrans.html,2,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. virtual~TGeoGenTrans(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoGenTrans.html:6232,error,error,6232,root/html602/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html602/TGeoGenTrans.html,2,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. virtual~TGeoHMatrix(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHMatrix.html:6225,error,error,6225,root/html602/TGeoHMatrix.html,https://root.cern,https://root.cern/root/html602/TGeoHMatrix.html,2,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. virtual~TGeoIdentity(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoIdentity.html:6228,error,error,6228,root/html602/TGeoIdentity.html,https://root.cern,https://root.cern/root/html602/TGeoIdentity.html,2,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. virtual~TGeoRotation(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoRotation.html:6228,error,error,6228,root/html602/TGeoRotation.html,https://root.cern,https://root.cern/root/html602/TGeoRotation.html,2,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. virtual~TGeoScale(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoScale.html:6219,error,error,6219,root/html602/TGeoScale.html,https://root.cern,https://root.cern/root/html602/TGeoScale.html,2,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods); public:. virtual~TGeoTranslation(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const TGeoTranslation* other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTranslation.html:6237,error,error,6237,root/html602/TGeoTranslation.html,https://root.cern,https://root.cern/root/html602/TGeoTranslation.html,2,['error'],['error']
Availability,"dy,dz) translation. Data members:; Double_t fTranslation[3]. Translations can be added/subtracted.; TGeoTranslation t1;; t1->SetTranslation(-5,10,4);; TGeoTranslation *t2 = new TGeoTranslation(4,3,10);; t2->Subtract(&t1);. 2. Rotations - represent a pure rotation. Data members: Double_t fRotationMatrix[3*3].; Rotations can be defined either by Euler angles, either, by GEANT3 angles :; TGeoRotation *r1 = new TGeoRotation();; r1->SetAngles(phi, theta, psi); // all angles in degrees; This represent the composition of : first a rotation about Z axis with; angle phi, then a rotation with theta about the rotated X axis, and; finally a rotation with psi about the new Z axis. r1->SetAngles(th1,phi1, th2,phi2, th3,phi3); This is a rotation defined in GEANT3 style. Theta and phi are the spherical; angles of each axis of the rotated coordinate system with respect to the; initial one. This construction allows definition of malformed rotations,; e.g. not orthogonal. A check is performed and an error message is issued; in this case. Specific utilities : determinant, inverse. 3. Scale transformations - represent a scale shrinking/enlargement. Data; members :Double_t fScale[3]. Not fully implemented yet. 4. Combined transformations - represent a rotation folowed by a translation.; Data members: Double_t fTranslation[3], TGeoRotation *fRotation.; TGeoRotation *rot = new TGeoRotation(""rot"",10,20,30);; TGeoTranslation trans;. TGeoCombiTrans *c1 = new TGeoCombiTrans(trans, rot);; TGeoCombiTrans *c2 = new TGeoCombiTrans(""somename"",10,20,30,rot). 5. TGeoGenTrans - combined transformations including a scale. Not implemented.; 6. TGeoIdentity - a generic singleton matrix representing a identity transformation; NOTE: identified by the global variable gGeoIdentity. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGeoMatrix(); voidTObject::AbstractMethod(const char* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMatrix.html:6218,error,error,6218,root/html528/TGeoMatrix.html,https://root.cern,https://root.cern/root/html528/TGeoMatrix.html,6,['error'],['error']
Availability,"dyPackage&); ~RooStudyPackage(); voidTObject::AbstractMethod(const char* method) const; voidaddStudy(RooAbsStudy& study); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voiddriver(Int_t nExperiments); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidexportData(TList* olist, Int_t seqno); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidfinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStudyPackage.html:1569,error,error,1569,root/html530/RooStudyPackage.html,https://root.cern,https://root.cern/root/html530/RooStudyPackage.html,3,['error'],['error']
Availability,"dz); Int_tDistToHype(Double_t* point, Double_t* dir, Double_t* s, Bool_t inner, Bool_t in) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeoBBox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoHype.html:4399,error,error,4399,root/html530/TGeoHype.html,https://root.cern,https://root.cern/root/html530/TGeoHype.html,2,['error'],['error']
Availability,"dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeoBBox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTubeSeg.html:4088,error,error,4088,root/html528/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html528/TGeoTubeSeg.html,3,['error'],['error']
Availability,"dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoTubeSeg::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCtub.html:4171,error,error,4171,root/html528/TGeoCtub.html,https://root.cern,https://root.cern/root/html528/TGeoCtub.html,3,['error'],['error']
Availability,"d . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 74 of file TPSocket.h. ◆ Recv() [4/4]. Int_t TPSocket::Recv ; (; TMessage *& ; mess). overridevirtual . Receive a TMessage object. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). In those case mess == 0. ; Reimplemented from TSocket.; Definition at line 626 of file TPSocket.cxx. ◆ RecvRaw(). Int_t TPSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). overridevirtual . Send a raw buffer of specified length. ; Returns the number of bytes sent or -1 in case of error. ; Reimplemented from TSocket.; Definition at line 679 of file TPSocket.cxx. ◆ Send() [1/4]. Int_t TPSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). inlineoverridevirtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 71 of file TPSocket.h. ◆ Send() [2/4]. Int_t TPSocket::Send ; (; const TMessage & ; mess). overridevirtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:28007,error,error,28007,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"d Clear (Option_t *option="""") override;  Clear resources for consecutive fits. ;  ; bool Contour (unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683);  Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or is invalid it will return false on exit a TGraph is filled with the contour points the number of contour points is determined by the size of the TGraph. ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs) override;  Execute the command (Fortran Minuit compatible interface) ;  ; void FixParameter (Int_t ipar) override;  Fix the parameter. ;  ; void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95) override;  Computes point-by-point confidence intervals for the fitted function. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  Get the error matrix in a pointer to a NxN array. ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  Get error matrix element (return all zero if matrix is not available) ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc) const override;  Get fit errors. ;  ; ROOT::Fit::FitConfig & GetFitConfig ();  Get reference to Fit configuration (NOTE: it will be invalid when class is deleted) ;  ; const ROOT::Fit::FitData & GetFitData () const;  Get reference to Fit Data object (NOTE: it will be invalid when class is deleted) ;  ; const ROOT::Fit::FitResult & GetFitResult () const;  Get reference to Fit Result object (NOTE: it will be invalid when class is deleted) ;  ; ROOT::Math::Minimizer * GetMinimizer () const;  Return a pointer to the minimizer. ;  ; Int_t GetNumberFreeParameters () const override;  ; Int_t GetNumberTotalParameters () const override;  Number of total parameters. ;  ; ROOT::Math::IMultiGenFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:4673,error,error,4673,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['error'],['error']
Availability,"d SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual Bool_t CompileVariables ();  Compiles each variable from fTreeDrawArgsParser for the tree fTree. ;  ; virtual void DefVar ()=0;  ; virtual void DoFill (Long64_t entry, Double_t w, const Double_t *v)=0;  ; void FillWeight ();  Get weight from input list, if any. ;  ; virtual Bool_t ProcessSingle (Long64_t, Int_t);  Processes a single variable from an entry. ;  ; void SetCanvas (const char *objname);  Move to a canvas named <name>_canvas; create the canvas if not existing. ;  ; void SetDrawAtt (TObject *o);  Set the drawing attributes from the input list. ;  ; void SetError (const char *sub, const char *mesg);  Sets the error status. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fDimension;  ; TString fInitialExp;  ; TTreeFormulaManager * fManager;  ; Int_t fMultiplicity;  ; Bool_t fObjEval;  ; TTreeFormula * fSelect;  ; TString fSelection;  ; TStatus * fStatus;  ; TTree * fTree;  ; TTreeDrawArgsParser fTreeDrawArgsParser;  ; TTreeFormula * fVar [4];  ; Double_t fWeight;  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Friends; class TPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDraw.html:12199,error,error,12199,doc/master/classTProofDraw.html,https://root.cern,https://root.cern/doc/master/classTProofDraw.html,1,['error'],['error']
Availability,"d SetRefCount (UInt_t r);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGGC (GCValues_t *values, Bool_t calledByGCPool);  Create a graphics context (only called via TGGCPool::GetGC()). ;  ; TString GetMaskString () const;  Returns GC mask as a string - used in SavePrimitive(). ;  ; void UpdateValues (GCValues_t *v);  Update values + mask. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; GContext_t fContext;  graphics context handle ;  ; GCValues_t fValues = {};  graphics context values + mask ;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Friends; class TGGCPool;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGGC.html:12631,mask,mask,12631,doc/master/classTGGC.html,https://root.cern,https://root.cern/doc/master/classTGGC.html,1,['mask'],['mask']
Availability,d nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooRealProxy _avgC;  ; RooRealProxy _avgMistag;  ; RooRealProxy _avgS;  ; Int_t _basisCos;  ; Int_t _basisExp;  ; Int_t _basisSin;  ; RooRealProxy _delMistag;  ; RooRealProxy _dm;  ; double _genB0Frac;  ; RooRealProxy _mu;  ; RooRealProxy _t;  ; RooCategoryProxy _tag;  ; RooRealProxy _tau;  ; DecayType _type;  ;  Protected Attributes inherited from RooAbsAnaConvPdf; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPGenDecay.html:64388,error,errors,64388,doc/master/classRooBCPGenDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPGenDecay.html,1,['error'],['errors']
Availability,"e ""THnBase.h""; 27#include ""TF1.h""; 28#include ""TGraph2D.h""; 29#include ""TGraph.h""; 30#include ""TGraphErrors.h""; 31// #include ""TGraphErrors.h""; 32// #include ""TGraphBentErrors.h""; 33// #include ""TGraphAsymmErrors.h""; 34#include ""TMultiGraph.h""; 35#include ""TList.h""; 36#include ""TError.h""; 37 ; 38 ; 39//#define DEBUG; 40#ifdef DEBUG; 41#include ""TClass.h""; 42#include <iostream>; 43#endif; 44 ; 45 ; 46namespace ROOT {; 47 ; 48namespace Fit {; 49 ; 50// add a namespace to distinguish from the Graph functions; 51namespace HFitInterface {; 52 ; 53 ; 54bool IsPointOutOfRange(const TF1 * func, const double * x) {; 55 // function to check if a point is outside range; 56 if (func ==nullptr) return false;; 57 return !func->IsInside(x);; 58}; 59 ; 60bool AdjustError(const DataOptions & option, double & error, double value = 1) {; 61 // adjust the given error according to the option; 62 // return false when point must be skipped.; 63 // When point error = 0, the point is kept if the option UseEmpty is set or if; 64 // fErrors1 is set and the point value is not zero.; 65 // The value should be used only for points representing counts (histograms), not for the graph.; 66 // In the graph points with zero errors are by default skipped indepentently of the value.; 67 // If one wants to keep the points, the option fUseEmpty must be set; 68 ; 69 if (error <= 0) {; 70 if (option.fUseEmpty || (option.fErrors1 && std::abs(value) > 0 ) ); 71 error = 1.; // set error to 1; 72 else; 73 return false; // skip bins with zero errors or empty; 74 } else if (option.fErrors1); 75 error = 1; // set all error to 1 for non-empty bins; 76 return true;; 77}; 78 ; 79void ExamineRange(const TAxis * axis, std::pair<double,double> range,int &hxfirst,int &hxlast) {; 80 // examine the range given with the pair on the given histogram axis; 81 // correct in case the bin values hxfirst hxlast; 82 double xlow = range.first;; 83 double xhigh = range.second;; 84#ifdef DEBUG; 85 std::cout << ""xlow "" << xlow << "" xhi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:1771,error,error,1771,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['error']
Availability,"e ""TMethod.h""; 15#include ""TF1.h""; 16#include ""TMethodCall.h""; 17#include <TBenchmark.h>; 18#include ""TError.h""; 19#include ""TInterpreter.h""; 20#include ""TInterpreterValue.h""; 21#include ""TFormula.h""; 22#include ""TRegexp.h""; 23 ; 24#include ""ROOT/StringUtils.hxx""; 25 ; 26#include <array>; 27#include <iostream>; 28#include <memory>; 29#include <unordered_map>; 30#include <functional>; 31#include <set>; 32#include <sstream>; 33 ; 34using std::map, std::pair, std::make_pair, std::list, std::max, std::string;; 35 ; 36#ifdef WIN32; 37#pragma optimize("""",off); 38#endif; 39#include ""v5/TFormula.h""; 40 ; 41ClassImp(TFormula);; 42 ; 43/** \class TFormula TFormula.h ""inc/TFormula.h""; 44 \ingroup Hist; 45 The Formula class; 46 ; 47 This is a new version of the TFormula class based on Cling.; 48 This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as; 49 `ROOT::v5::TFormula`. Some of the TFormula member functions available in version 5, such as; 50 `Analyze` and `AnalyzeFunction` are not available in the new TFormula.; 51 On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; 52 ; 53 This class has been implemented during Google Summer of Code 2013 by Maciej Zimnoch.; 54 ; 55 ### Example of valid expressions:; 56 ; 57 - `sin(x)/x`; 58 - `[0]*sin(x) + [1]*exp(-[2]*x)`; 59 - `x + y**2`; 60 - `x^2 + y^2`; 61 - `[0]*pow([1],4)`; 62 - `2*pi*sqrt(x/y)`; 63 - `gaus(0)*expo(3) + ypol3(5)*x`; 64 - `gausn(0)*expo(3) + ypol3(5)*x`; 65 - `gaus(x, [0..2]) + expo(y, [3..4])`; 66 ; 67 In the last examples above:; 68 ; 69 - `gaus(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)`; 70 and (0) means start numbering parameters at 0; 71 - `gausn(0)` is a substitute for `[0]*exp(-0.5*((x-[1])/[2])**2)/(sqrt(2*pi)*[2]))`; 72 and (0) means start numbering parameters at 0; 73 - `expo(3)` is a substitute for `exp([3]+[4]*x)`; 74 - `pol3(5)` is a substitute for `par[5]+par[6]*x+par[7]*x**2+par[8]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:1647,avail,available,1647,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,2,['avail'],['available']
Availability,"e &x);  Constructor with convolution variable 'x'. ;  ;  RooResolutionModel (const RooResolutionModel &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooResolutionModel () override;  Destructor. ;  ; const RooFormulaVar & basis () const;  ; const RooRealVar & basisConvVar () const;  Return the convolution variable of the selection basis function. ;  ; virtual RooResolutionModel * convolution (RooFormulaVar *basis, RooAbsArg *owner) const;  Instantiate a clone of this resolution model representing a convolution with given basis function. ;  ; RooAbsRealLValue & convVar () const;  Return the convolution variable of the resolution model. ;  ; double getNorm (const RooArgSet *nset=nullptr) const override;  Return the integral of this PDF over all elements of 'nset'. ;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Modified version of RooAbsPdf::getValF(). ;  ; bool isBasisSupported (const char *name) const;  ; bool isConvolved () const;  ; virtual void normLeafServerList (RooArgSet &list) const;  Floating point error checking and tracing for given float value. ;  ; void printMultiline (std::ostream &os, Int_t content, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTruthModel.html:3642,error,error,3642,doc/master/classRooTruthModel.html,https://root.cern,https://root.cern/doc/master/classRooTruthModel.html,1,['error'],['error']
Availability,"e () == gradients.size ());; 1094 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, nothing, false);; 1095 return error;; 1096 }; 1097 ; 1098 template <typename Weights, typename Gradients, typename PassThrough, typename OutContainer>; 1099 double Net::operator() (PassThrough& settingsAndBatch, Weights& weights, Gradients& gradients, ModeOutput eFetch, OutContainer& outputContainer) const; 1100 {; 1101 MATH_UNUSED(eFetch);; 1102 assert (numWeights () == weights.size ());; 1103 assert (weights.size () == gradients.size ());; 1104 double error = forward_backward(m_layers, settingsAndBatch, std::begin (weights), std::end (weights), std::begin (gradients), std::end (gradients), 0, outputContainer, true);; 1105 return error;; 1106 }; 1107 ; 1108 ; 1109 ; 1110 template <typename LayerContainer, typename DropContainer, typename ItWeight, typename ItGradient>; 1111 std::vector<std::vector<LayerData>> Net::prepareLayerData (LayerContainer& _layers,; 1112 Batch& batch,; 1113 const DropContainer& dropContainer,; 1114 ItWeight itWeightBegin,; 1115 ItWeight /*itWeightEnd*/,; 1116 ItGradient itGradientBegin,; 1117 ItGradient itGradientEnd,; 1118 size_t& totalNumWeights) const; 1119 {; 1120 LayerData::const_dropout_iterator itDropOut;; 1121 bool usesDropOut = !dropContainer.empty ();; 1122 if (usesDropOut); 1123 itDropOut = std::begin (dropContainer);; 1124 ; 1125 if (_layers.empty ()); 1126 throw std::string (""no layers in this net"");; 1127 ; 1128 ; 1129 // ----------- create layer data -------------------------------------------------------; 1130 //LM- This assert not needed anymore (outputsize is actually numNodes+1); 1131 //assert (_layers.back ().numNodes () == outputSize ());; 1132 totalNumWeights = 0;; 1133 std::vector<std::vector<LayerData>> layerPatternData;; 1134 layerPatternData.reserve (_layers.size ()+1);; 1135 ItWeight itWeight = itWeightBegin;; 1136 ItGradient itGradi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:35483,error,error,35483,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['error'],['error']
Availability,"e ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void AddMSparse (TMatrixDSparse *dest, Double_t f, const TMatrixDSparse *src) const;  add a sparse matrix, scaled by a factor, to another scaled matrix ;  ; Bool_t AddRegularisationCondition (Int_t i0, Double_t f0, Int_t i1=-1, Double_t f1=0., Int_t i2=-1, Double_t f2=0.);  add a row of regularisation conditions to the matrix L ;  ; Bool_t AddRegularisationCondition (Int_t nEle, const Int_t *indices, const Double_t *rowData);  add a row of regularisation conditions to the matrix L ;  ; void ClearHistogram (TH1 *h, Double_t x=0.) const;  Initialize bin contents and bin errors for a given histogram. ;  ; virtual void ClearResults (void);  reset all results ;  ; TMatrixDSparse * CreateSparseMatrix (Int_t nrow, Int_t ncol, Int_t nele, Int_t *row, Int_t *col, Double_t *data) const;  create a sparse matrix, given the nonzero elements ;  ; virtual Double_t DoUnfold (void);  core unfolding algorithm ;  ; void ErrorMatrixToHist (TH2 *ematrix, const TMatrixDSparse *emat, const Int_t *binMap, Bool_t doClear) const;  add up an error matrix, also respecting the bin mapping ;  ; const TMatrixDSparse * GetAx (void) const;  vector of folded-back result ;  ; Int_t GetBinFromRow (int ix) const;  converts matrix row to truth histogram bin number ;  ; const TMatrixDSparse * GetDXDAM (int i) const;  matrix contributions of the derivative dx/dA ;  ; const TMatrixDSparse * GetDXDAZ (int i) const;  vector contributions of the derivative dx/dA ;  ; const TMatrixDSparse * GetDXDtauSquared (void) const;  vector of derivative dx/dtauSquared, using internal bin counting ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:17882,error,errors,17882,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['error'],['errors']
Availability,"e ();  Get the Chisquare. ;  ; void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95) override;  Computes point-by-point confidence intervals for the fitted function Parameters: n - number of points ndim - dimensions of points x - points, at which to compute the intervals, for ndim > 1 should be in order: (x0,y0, x1, y1, ... xn, yn) ci - computed intervals are returned in this array cl - confidence level, default=0.95. ;  ; void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95) override;  Computes confidence intervals at level cl. ;  ; Double_t * GetCovarianceMatrix () const override;  Returns covariance matrix. ;  ; virtual void GetCovarianceMatrix (TMatrixD &matr);  Returns covariance matrix. ;  ; Double_t GetCovarianceMatrixElement (Int_t i, Int_t j) const override;  ; virtual void GetDesignMatrix (TMatrixD &matr);  Returns the internal design matrix. ;  ; Int_t GetErrors (Int_t, Double_t &, Double_t &, Double_t &, Double_t &) const override;  ; virtual void GetErrors (TVectorD &vpar);  Returns parameter errors. ;  ; virtual void GetFitSample (TBits &bits);  For robust lts fitting, returns the sample, on which the best fit was based. ;  ; virtual Int_t GetNpoints ();  ; Int_t GetNumberFreeParameters () const override;  ; Int_t GetNumberTotalParameters () const override;  ; Double_t GetParameter (Int_t ipar) const override;  ; Int_t GetParameter (Int_t ipar, char *name, Double_t &value, Double_t &, Double_t &, Double_t &) const override;  Returns the value and the name of the parameter #ipar NB: In the calling function the argument name must be set large enough. ;  ; virtual void GetParameters (TVectorD &vpar);  Returns parameter values. ;  ; Double_t GetParError (Int_t ipar) const override;  Returns the error of parameter #ipar ;  ; const char * GetParName (Int_t ipar) const override;  Returns name of parameter #ipar ;  ; virtual Double_t GetParSignificance (Int_t ipar);  Returns the significance of parameter #i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:11586,error,errors,11586,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['error'],['errors']
Availability,"e (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::unique_ptr< RooRatio > makeRatio (const char *name, const char *title, RooArgList &nr, RooArgList &dr);  Return the RooRatio form of products and denominators of morphing functions. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:56065,error,error,56065,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['error'],['error']
Availability,"e (type / algorithm)Definition FitConfig.cxx:239; ROOT::Fit::FitConfig::UseWeightCorrectionbool UseWeightCorrection() constApply Weight correction for error matrix computation.Definition FitConfig.h:214; ROOT::Fit::FitConfig::ParamsSettingsconst std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings() constget the vector of parameter settings (const method)Definition FitConfig.h:86; ROOT::Fit::FitConfig::fParabErrorsbool fParabErrorsget correct parabolic errors estimate (call Hesse after minimizing)Definition FitConfig.h:260; ROOT::Fit::FitConfig::fMinimizerOptsROOT::Math::MinimizerOptions fMinimizerOptsminimizer control parameters including name and algo typeDefinition FitConfig.h:268; ROOT::Fit::FitConfig::~FitConfig~FitConfig()Destructor.Definition FitConfig.cxx:52; ROOT::Fit::FitConfig::CreateMinimizerROOT::Math::Minimizer * CreateMinimizer()create a new minimizer according to chosen configurationDefinition FitConfig.cxx:173; ROOT::Fit::FitConfig::SetParabErrorsvoid SetParabErrors(bool on=true)set parabolic errorsDefinition FitConfig.h:226; ROOT::Fit::FitConfig::fMinosErrorsbool fMinosErrorsdo full error analysis using MinosDefinition FitConfig.h:261; ROOT::Fit::FitConfig::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)static function to control default minimizer type and algorithmDefinition FitConfig.cxx:252; ROOT::Fit::FitConfig::SetFromFitResultvoid SetFromFitResult(const FitResult &rhs)Definition FitConfig.cxx:80; ROOT::Fit::FitConfig::CreateParamsSettingsvoid CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl< T > &func)set the parameter settings from a model function.Definition FitConfig.h:109; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::fWeightCorrbool fWeightCorrapply correction to errors for weights fitsDefinition FitConfig.h:263; ROOT::Fit::FitConfig::ParSettingsconst Paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8h_source.html:14275,error,errorsDefinition,14275,doc/master/FitConfig_8h_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html,1,['error'],['errorsDefinition']
Availability,"e );; 182 ; 183 // options treatment; 184 virtual void Init() = 0;; 185 virtual void DeclareOptions() = 0;; 186 virtual void ProcessOptions() = 0;; 187 virtual void DeclareCompatibilityOptions(); // declaration of past options; 188 ; 189 // reset the Method --> As if it was not yet trained, just instantiated; 190 // virtual void Reset() = 0;; 191 //for the moment, I provide a dummy (that would not work) default, just to make; 192 // compilation/running w/o parameter optimisation still possible; 193 virtual void Reset(){return;}; 194 ; 195 // classifier response:; 196 // some methods may return a per-event error estimate; 197 // error calculation is skipped if err==0; 198 virtual Double_t GetMvaValue( Double_t* errLower = nullptr, Double_t* errUpper = nullptr) = 0;; 199 ; 200 // signal/background classification response; 201 Double_t GetMvaValue( const TMVA::Event* const ev, Double_t* err = nullptr, Double_t* errUpper = nullptr );; 202 ; 203 protected:; 204 // helper function to set errors to -1; 205 void NoErrorCalc(Double_t* const err, Double_t* const errUpper);; 206 ; 207 // signal/background classification response for all current set of data; 208 virtual std::vector<Double_t> GetMvaValues(Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 209 // same as above but using a provided data set (used by MethodCategory); 210 virtual std::vector<Double_t> GetDataMvaValues(DataSet *data = nullptr, Long64_t firstEvt = 0, Long64_t lastEvt = -1, Bool_t logProgress = false);; 211 ; 212 public:; 213 // regression response; 214 const std::vector<Float_t>& GetRegressionValues(const TMVA::Event* const ev){; 215 fTmpEvent = ev;; 216 const std::vector<Float_t>* ptr = &GetRegressionValues();; 217 fTmpEvent = nullptr;; 218 return (*ptr);; 219 }; 220 ; 221 virtual const std::vector<Float_t>& GetRegressionValues() {; 222 std::vector<Float_t>* ptr = new std::vector<Float_t>(0);; 223 return (*ptr);; 224 }; 225 ; 226 // multiclass classification response; 227 virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:7313,error,errors,7313,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['error'],['errors']
Availability,"e *w1 = getWorkspace(mode);; if (mode == 1) {; ; // Show workspace that was created; w1->Print();; ; // Show plot of cached integral values; RooDataHist *hhcache = (RooDataHist *)w1->expensiveObjectCache().getObj(1);; if (hhcache) {; ; new TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600);; hhcache->createHistogram(""a"")->Draw();; ; } else {; Error(""rf903_numintcache"", ""Cached histogram is not existing in workspace"");; }; return;; }; ; // U s e p . d . f . f r o m w o r k s p a c e f o r g e n e r a t i o n a n d f i t t i n g; // -----------------------------------------------------------------------------------; ; // This is always slow (need to find maximum function value empirically in 3D space); std::unique_ptr<RooDataSet> d{w1->pdf(""model"")->generate({*w1->var(""x""), *w1->var(""y""), *w1->var(""z"")}, 1000)};; ; // This is slow in mode 0, but fast in mode 1; w1->pdf(""model"")->fitTo(*d, Verbose(true), Timer(true), PrintLevel(-1));; ; // Projection on x (always slow as 2D integral over Y,Z at fitted value of a is not cached); RooPlot *framex = w1->var(""x"")->frame(Title(""Projection of 3D model on X""));; d->plotOn(framex);; w1->pdf(""model"")->plotOn(framex);; ; // Draw x projection on canvas; auto canv = new TCanvas(""rf903_numintcache"", ""rf903_numintcache"", 600, 600);; framex->Draw();; canv->Draw();; ; // Make workspace available on command line after macro finishes; gDirectory->Add(w1);; }; ; RooWorkspace *getWorkspace(Int_t mode); {; // C r e a t e , s a v e o r l o a d w o r k s p a c e w i t h p . d . f .; // -----------------------------------------------------------------------------------; //; // Mode = 0 : Create workspace for plain running (no integral caching); // Mode = 1 : Generate workspace with pre-calculated integral and store it on file; // Mode = 2 : Load previously stored workspace from file; ; RooWorkspace *w(0);; ; if (mode != 2) {; ; // Create empty workspace workspace; w = new RooWorkspace(""w"", 1);; ; // Make a difficult to normalize pdf i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:2572,avail,available,2572,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['avail'],['available']
Availability,"e * MultiplyMSparseM (const TMatrixDSparse *a, const TMatrixD *b) const;  multiply sparse matrix and a non-sparse matrix ;  ; TMatrixDSparse * MultiplyMSparseMSparse (const TMatrixDSparse *a, const TMatrixDSparse *b) const;  multiply two sparse matrices ;  ; TMatrixDSparse * MultiplyMSparseMSparseTranspVector (const TMatrixDSparse *m1, const TMatrixDSparse *m2, const TMatrixTBase< Double_t > *v) const;  calculate a sparse matrix product M1*V*M2T where the diagonal matrix V is given by a vector ;  ; TMatrixDSparse * MultiplyMSparseTranspMSparse (const TMatrixDSparse *a, const TMatrixDSparse *b) const;  multiply a transposed Sparse matrix with another Sparse matrix ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TMatrixD * fAoutside;  Input: underflow/overflow bins. ;  ; TMap * fBgrErrScaleIn;  Input: background sources correlated error. ;  ; TMap * fBgrErrUncorrInSq;  Input: uncorr error squared from bgr sources. ;  ; TMap * fBgrIn;  Input: size of background sources. ;  ; TMatrixD * fDAinColRelSq;  Input: normalized column err.sq. (inp.matr.) ;  ; TMatrixDSparse * fDAinRelSq;  Input: normalized errors from input matrix. ;  ; TMap * fDeltaCorrAx;  Result: syst.shift from fSysIn on fAx. ;  ; TMap * fDeltaCorrX;  Result: syst.shift from fSysIn on fX. ;  ; TMatrixDSparse * fDeltaSysTau;  Result: systematic shift from tau. ;  ; Double_t fDtau;  Input: error on tau. ;  ; TMatrixDSparse * fEmatUncorrAx;  Result: syst.error from fDA2 on fAx. ;  ; TMatrixDSparse * fEmatUncorrX;  Result: syst.error from fDA2 on fX. ;  ; TMap * fSysIn;  Input: correlated errors. ;  ; TMatrixDSparse * fVyyData;  Input: error on fY prior to bgr subtraction. ;  ; TMatrixD * fYData;  Input: fY prior to bgr subtraction. ;  ;  Protected Attributes inherited from TUnfold; TMatrixDSparse * fA;  response matrix A ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:27908,error,error,27908,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['error']
Availability,"e + (len - xmllen), "".xml""));; 460 } else {; 461 return false;; 462 }; 463}; 464 ; 465////////////////////////////////////////////////////////////////////////////////; 466 ; 467bool IsLinkdefFile(const clang::PresumedLoc& PLoc); 468{; 469 return ROOT::TMetaUtils::IsLinkdefFile(PLoc.getFilename());; 470}; 471 ; 472////////////////////////////////////////////////////////////////////////////////; 473 ; 474bool IsSelectionFile(const char *filename); 475{; 476 return ROOT::TMetaUtils::IsLinkdefFile(filename) || IsSelectionXml(filename);; 477}; 478 ; 479////////////////////////////////////////////////////////////////////////////////; 480/// Set the ROOTSYS env var based on the executable location.; 481 ; 482void SetRootSys(); 483{; 484 const char *exepath = GetExePath();; 485 if (exepath && *exepath) {; 486#if !defined(_WIN32); 487 char *ep = new char[PATH_MAX];; 488 if (!realpath(exepath, ep)) {; 489 fprintf(stderr, ""rootcling: error getting realpath of rootcling!"");; 490 strlcpy(ep, exepath, PATH_MAX);; 491 }; 492#else; 493 int nche = strlen(exepath) + 1;; 494 char *ep = new char[nche];; 495 strlcpy(ep, exepath, nche);; 496#endif; 497 char *s;; 498 ; 499 if ((s = strrchr(ep, '/'))) {; 500 // $ROOTSYS/bin/rootcling; 501 int removesubdirs = 2;; 502 if (!strncmp(s + 1, ""rootcling_stage1.exe"", 20)) {; 503 // $ROOTSYS/bin/rootcling_stage1.exe; 504 removesubdirs = 2;; 505 gBuildingROOT = true;; 506 } else if (!strncmp(s + 1, ""rootcling_stage1"", 16)) {; 507 // $ROOTSYS/core/rootcling_stage1/src/rootcling_stage1; 508 removesubdirs = 4;; 509 gBuildingROOT = true;; 510 }; 511 for (int i = 1; s && i < removesubdirs; ++i) {; 512 *s = 0;; 513 s = strrchr(ep, '/');; 514 }; 515 if (s) *s = 0;; 516 } else {; 517 // There was no slashes at all let now change ROOTSYS; 518 delete [] ep;; 519 return;; 520 }; 521 ; 522 if (!gBuildingROOT) {; 523 delete [] ep;; 524 return; // don't mess with user's ROOTSYS.; 525 }; 526 ; 527 int ncha = strlen(ep) + 10;; 528 char *env = new char[ncha];; 529 sn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:17711,error,error,17711,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['error']
Availability,"e . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5801 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the TClassTable or the autoloader. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5771 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data from the clang pcm. If further calls to this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5824 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:103212,avail,available,103212,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['avail'],['available']
Availability,"e . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5868 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the TClassTable or the autoloader. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5838 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data from the clang pcm. If further calls to this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5891 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4325 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:103213,avail,available,103213,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['avail'],['available']
Availability,"e . POSIX Parser(...) (gnu==false). ; Definition at line 1097 of file OptionParser.h. ◆ Parser() [5/5]. ROOT::option::Parser::Parser ; (; const Descriptor ; usage[], . int ; argc, . char ** ; argv, . Option ; options[], . Option ; buffer[], . int ; min_abbr_len = 0, . bool ; single_minus_longopt = false, . int ; bufmax = -1 . ). inline . POSIX Parser(...) (gnu==false) with non-const argv. ; Definition at line 1105 of file OptionParser.h. Member Function Documentation. ◆ error(). bool ROOT::option::Parser::error ; (; ). inline . Returns true if an unrecoverable error occurred while parsing options. ; An illegal argument to an option (i.e. CheckArg returns ARG_ILLEGAL) is an unrecoverable error that aborts the parse. Unknown options are only an error if their CheckArg function returns ARG_ILLEGAL. Otherwise they are collected. In that case if you want to exit the program if either an illegal argument or an unknown option has been passed, use code like this; if (parser.error() || options[UNKNOWN]); exit(1);. Definition at line 1264 of file OptionParser.h. ◆ instr(). static bool ROOT::option::Parser::instr ; (; char ; ch, . const char * ; st . ). inlinestaticprivate . Definition at line 1346 of file OptionParser.h. ◆ nonOption(). const char * ROOT::option::Parser::nonOption ; (; int ; i). inline . Returns nonOptions()[i] (without checking if i is in range!). ; Definition at line 1244 of file OptionParser.h. ◆ nonOptions(). const char ** ROOT::option::Parser::nonOptions ; (; ). inline . Returns a pointer to an array of non-option arguments (only valid if nonOptionsCount() >0 ). ; Note; parse() does not copy arguments, so this pointer points into the actual argument vector as passed to parse(). ; As explained at nonOptionsCount() this pointer is only changed by parse() calls that actually encounter non-option arguments. A parse() call that encounters only options, will not change nonOptions(). . Definition at line 1236 of file OptionParser.h. ◆ nonOptionsCount(). int ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html:10351,error,error,10351,doc/v632/classROOT_1_1option_1_1Parser.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1option_1_1Parser.html,2,['error'],['error']
Availability,"e . Return a pointer to the errors in the coordinates for the given fit point. ; Definition at line 412 of file BinData.h. ◆ Error(). double ROOT::Fit::BinData::Error ; (; unsigned int ; ipoint); const. inline . Return the error on the given point. ; Safer method returning in any case the error and not the inverse as in the function above. ; Definition at line 262 of file BinData.h. ◆ ErrorPtr(). const double * ROOT::Fit::BinData::ErrorPtr ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:21747,error,errors,21747,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['errors']
Availability,"e . total number of parameters (abbreviation) ; Definition at line 122 of file FitResult.h. ◆ NTotalParameters(). unsigned int ROOT::Fit::FitResult::NTotalParameters ; (; ); const. inline . get total number of parameters ; Definition at line 120 of file FitResult.h. ◆ Parameter(). double ROOT::Fit::FitResult::Parameter ; (; unsigned int ; i); const. inline . parameter value by index ; Definition at line 174 of file FitResult.h. ◆ ParameterBounds(). bool ROOT::Fit::FitResult::ParameterBounds ; (; unsigned int ; ipar, . double & ; lower, . double & ; upper . ); const. retrieve parameter bounds - return false if parameter is not bound ; Definition at line 369 of file FitResult.cxx. ◆ Parameters(). const std::vector< double > & ROOT::Fit::FitResult::Parameters ; (; ); const. inline . parameter values (return std::vector) ; Definition at line 167 of file FitResult.h. ◆ ParError(). double ROOT::Fit::FitResult::ParError ; (; unsigned int ; i); const. inline . parameter error by index ; Definition at line 183 of file FitResult.h. ◆ ParName(). std::string ROOT::Fit::FitResult::ParName ; (; unsigned int ; i); const. name of the parameter ; Definition at line 382 of file FitResult.cxx. ◆ Print(). void ROOT::Fit::FitResult::Print ; (; std::ostream & ; os, . bool ; covmat = false . ); const. print the result and optionally covariance matrix and correlations ; Definition at line 389 of file FitResult.cxx. ◆ PrintCovMatrix(). void ROOT::Fit::FitResult::PrintCovMatrix ; (; std::ostream & ; os); const. print error matrix and correlations ; Definition at line 447 of file FitResult.cxx. ◆ Prob(). double ROOT::Fit::FitResult::Prob ; (; ); const. p value of the fit (chi2 probability) ; Definition at line 320 of file FitResult.cxx. ◆ Scan(). bool ROOT::Fit::FitResult::Scan ; (; unsigned int ; ipar, . unsigned int & ; npoints, . double * ; pntsx, . double * ; pntsy, . double ; xmin = 0, . double ; xmax = 0 . ). scan likelihood value of parameter and fill the given graph. ; Scan parameter i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:21721,error,error,21721,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['error'],['error']
Availability,"e 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ Result(). double ROOT::Math::Derivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 152 of file Derivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::Derivator::SetFunction ; (; const GSLFuncPointer & ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 88 of file Derivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::Derivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 84 of file Derivator.cxx. ◆ Status(). int ROOT::Math::Derivator::Status ; (; ); const. return the error status of the last derivative calculation ; Definition at line 156 of file Derivator.cxx. Member Data Documentation. ◆ fDerivator. GSLDerivator* ROOT::Math::Derivator::fDerivator. mutableprivate . Definition at line 232 of file Derivator.h. Libraries for ROOT::Math::Derivator:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Derivator.h; math/mathmore/src/Derivator.cxx. ROOTMathDerivator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:10626,error,error,10626,doc/master/classROOT_1_1Math_1_1Derivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html,1,['error'],['error']
Availability,"e 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:63043,error,error,63043,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"e 150 of file TH1Editor.cxx. ◆ ~TH1Editor(). TH1Editor::~TH1Editor ; (; ). override . Destructor of TH1 editor. ; Definition at line 514 of file TH1Editor.cxx. Member Function Documentation. ◆ AcceptModel(). Bool_t TH1Editor::AcceptModel ; (; TObject * ; model). overridevirtual . Check if object is able to configure with this editor. ; Reimplemented from TGedFrame.; Definition at line 588 of file TH1Editor.cxx. ◆ BuildHistAddComboBox(). TGComboBox * TH1Editor::BuildHistAddComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create Line/Bar combo box. ; Definition at line 2337 of file TH1Editor.cxx. ◆ BuildHistCoordsComboBox(). TGComboBox * TH1Editor::BuildHistCoordsComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create coordinate system type combo box. ; Definition at line 2302 of file TH1Editor.cxx. ◆ BuildHistErrorComboBox(). TGComboBox * TH1Editor::BuildHistErrorComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create error type combo box. ; Definition at line 2320 of file TH1Editor.cxx. ◆ BuildHistTypeComboBox(). TGComboBox * TH1Editor::BuildHistTypeComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create histogram type combo box. ; Definition at line 2282 of file TH1Editor.cxx. ◆ BuildPercentComboBox(). TGComboBox * TH1Editor::BuildPercentComboBox ; (; TGFrame * ; parent, . Int_t ; id . ). staticprotected . Create Percentage combo box for bar option. ; Definition at line 2353 of file TH1Editor.cxx. ◆ ChangeErrorCombo(). void TH1Editor::ChangeErrorCombo ; (; Int_t ; i). private . Change the error combo box entry. ; Definition at line 2371 of file TH1Editor.cxx. ◆ ConnectSignals2Slots(). void TH1Editor::ConnectSignals2Slots ; (; ). protectedvirtual . Connect signals to slots. ; Definition at line 532 of file TH1Editor.cxx. ◆ CreateBinTab(). void TH1Editor::CreateBinTab ; (; ). protected . Create binning tab. ; Definition at line 340 of file TH1Editor.cxx. ◆ Dividers(). Int_t * TH1Editor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Editor.html:45530,error,error,45530,doc/master/classTH1Editor.html,https://root.cern,https://root.cern/doc/master/classTH1Editor.html,1,['error'],['error']
Availability,"e 167 of file TApplication.h. ◆ ClearInputFiles(). void TApplication::ClearInputFiles ; (; ). Clear list containing macro files passed as program arguments. ; This method is called from TRint::Run() to ensure that the macro files are only executed the first time Run() is called. ; Definition at line 318 of file TApplication.cxx. ◆ Close(). void TApplication::Close ; (; TApplication * ; app). staticprotected . Static function used to close a remote application. ; Definition at line 2070 of file TApplication.cxx. ◆ CreateApplication(). void TApplication::CreateApplication ; (; ). static . Static function used to create a default application environment. ; Definition at line 1975 of file TApplication.cxx. ◆ DeclFileName(). static const char * TApplication::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 167 of file TApplication.h. ◆ ExecuteFile(). Longptr_t TApplication::ExecuteFile ; (; const char * ; file, . Int_t * ; error = nullptr, . Bool_t ; keep = kFALSE . ). static . Execute a file containing a C++ macro (static method). ; Can be used while TApplication is not yet created. ; Definition at line 1729 of file TApplication.cxx. ◆ ExitOnException(). TApplication::EExitOnException TApplication::ExitOnException ; (; TApplication::EExitOnException ; opt = kExit). Set the exit on exception option. ; Setting this option determines what happens in HandleException() in case an exception (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction or kSigFloatingException) is trapped. Choices are: kDontExit (default), kExit or kAbort. Returns the previous value. ; Definition at line 614 of file TApplication.cxx. ◆ Forum(). void TApplication::Forum ; (; const char * ; line). protectedvirtual . The function ("".forum <type>"") submits a new post on the ROOT forum via web browser. ; NoteYou can use ""bug"" as <type>. ; Parameters. [in]linecommand from the command line . Definition at line 1165 of file TApplication.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:25456,error,error,25456,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['error'],['error']
Availability,"e 253 of file PyMethodBase.cxx. ◆ PyRunString() [1/2]. void PyMethodBase::PyRunString ; (; TString ; code, . PyObject * ; globalNS, . PyObject * ; localNS . ). static . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]globalNSGlobal Namespace for Python Session ; [in]localNSLocal Namespace for Python Session. Overloaded static Helper function to run python code from string and throw runtime error if the Python session is unable to execute the code ; Definition at line 347 of file PyMethodBase.cxx. ◆ PyRunString() [2/2]. void PyMethodBase::PyRunString ; (; TString ; code, . TString ; errorMessage = ""Failed to run python code"", . int ; start = 256 . ). protected . Execute Python code from string. ; Parameters. [in]codePython code as string ; [in]errorMessageError message which shall be shown if the execution fails ; [in]startStart symbol. Helper function to run python code from string in local namespace with error handling start defines the start symbol defined in PyRun_String (Py_eval_input, Py_single_input, Py_file_input) ; Definition at line 325 of file PyMethodBase.cxx. ◆ PyStringAsString(). const char * PyMethodBase::PyStringAsString ; (; PyObject * ; string). static . Returns const char* from Python string in PyObject. ; Parameters. [in]stringPython String object . ReturnsString representation in const char* ; Definition at line 362 of file PyMethodBase.cxx. ◆ ReadModelFromFile(). virtual void TMVA::PyMethodBase::ReadModelFromFile ; (; ). protectedpure virtual . Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, and TMVA::MethodPyTorch. ◆ ReadWeightsFromStream() [1/2]. virtual void TMVA::PyMethodBase::ReadWeightsFromStream ; (; std::istream & ; ). protectedpure virtual . Implements TMVA::MethodBase.; Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, and T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:36319,error,error,36319,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['error'],['error']
Availability,"e 37 of file GaussLegendreIntegrator.h. Public Member Functions;  GaussLegendreIntegrator (int num=10, double eps=1e-12);  Basic constructor of GaussLegendreIntegrator. ;  ;  ~GaussLegendreIntegrator () override;  Default Destructor. ;  ; int GetNumberPoints () const;  ; void GetWeightVectors (double *x, double *w) const;  Returns the arrays x and w containing the abscissa and weight of the Gauss-Legendre n-point quadrature formula. ;  ; int NEval () const override;  return number of function evaluations in calculating the integral This is equivalent to the number of points ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; void SetAbsTolerance (double) override;  This method is not implemented. ;  ; void SetNumberPoints (int num);  Set the number of points used in the calculation of the integral. ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double) override;  Set the desired relative Error. ;  ;  Public Member Functions inherited from ROOT::Math::GaussIntegrator;  GaussIntegrator (double absTol=-1, double relTol=-1);  Default Constructor. ;  ;  ~GaussIntegrator () override;  Destructor. ;  ; void AbsValue (bool flag);  Static function: set the fgAbsValue flag. ;  ; double Error () const override;  Return the estimate of the absolute Error of the last Integral calculation. ;  ; double Integral () override;  Returns Integral of function on an infinite interval. ;  ; double Integral (const std::vector< double > &pts) override;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:1638,toler,tolerance,1638,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,1,['toler'],['tolerance']
Availability,"e ; (; ); const. Return a pointer to the TTree which stores the data. ; Returns a nullpointer if vector-based storage is used. The RooAbsData remains owner of the tree. GetClonedTree() can be used to get a tree even if the internal storage does not use one. ; Definition at line 2417 of file RooAbsData.cxx. ◆ uniqueId(). RooFit::UniqueId< RooAbsData > const & RooAbsData::uniqueId ; (; ); const. inline . Returns a unique ID that is different for every instantiated RooAbsData object. ; This ID can be used whether two RooAbsData are the same object, which is safer than memory address comparisons that might result in false positives when memory is reused. ; Definition at line 308 of file RooAbsData.h. ◆ weight(). virtual double RooAbsData::weight ; (; ); const. pure virtual . Implemented in RooDataHist, and RooDataSet. ◆ weightError() [1/2]. virtual void RooAbsData::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; = Poisson . ); const. inlinevirtual . Return the asymmetric errors on the current weight. ; See also weightError(ErrorType) const for symmetric error. Parameters. [out]loLow error. ; [out]hiHigh error. . Reimplemented in RooDataHist, and RooDataSet.; Definition at line 122 of file RooAbsData.h. ◆ weightError() [2/2]. virtual double RooAbsData::weightError ; (; ErrorType ; = Poisson); const. inlinevirtual . Return the symmetric error on the current weight. ; See also weightError(double&,double&,ErrorType) const for asymmetric errors. ; Reimplemented in RooDataHist, and RooDataSet.; Definition at line 112 of file RooAbsData.h. ◆ weightSquared(). virtual double RooAbsData::weightSquared ; (; ); const. pure virtual . Implemented in RooDataHist, and RooDataSet. Friends And Related Symbol Documentation. ◆ RooAbsOptTestStatistic. friend class RooAbsOptTestStatistic. friend . Definition at line 332 of file RooAbsData.h. ◆ RooFit::TestStatistics::ConstantTermsOptimizer. friend struct RooFit::TestStatistics::ConstantTermsOptimizer. friend . Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:76970,error,errors,76970,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['error'],['errors']
Availability,"e = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawDInput(Int_t i); voidDrawDInputs(); voidDrawNetwork(Int_t neuron, const char* signal, const char* bg); TProfile*DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); TProfile*DrawTruthDeviationInOut(Int_t innode, Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviationInsOut(Int_t outnode = 0, Option_t* option = """"); THStack*DrawTruthDeviations(Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidGatherInformations(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TTree*GetIOTree() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMLPAnalyzer.html:1995,error,error,1995,root/html528/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html528/TMLPAnalyzer.html,6,['error'],['error']
Availability,"e = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C++ callable object implementing operator()(double x); 153 @param type integration type (adaptive, non-adaptive, etc..); 154 @param absTol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:5316,toler,tolerance,5316,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,1,['toler'],['tolerance']
Availability,"e = kTRUE); TCanvas*MakeDefCanvas() const; voidTObject::MayNotUse(const char* method) const; static Bool_tMemCheck(); voidMessage(Int_t id, const TObject* obj); virtual TDirectory*TDirectory::mkdir(const char* name, const char* title = """"); Bool_tMustClean() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual TFile*TDirectory::OpenFile(const char*, Option_t* = """", const char* = """", Int_t = 1, Int_t = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTDirectory::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectory::Print(Option_t* option = """") const; Long_tProcessLine(const char* line, Int_t* error = 0); Long_tProcessLineFast(const char* line, Int_t* error = 0); Long_tProcessLineSync(const char* line, Int_t* error = 0); virtual voidTDirectory::Purge(Short_t = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectory::ReadAll(Option_t* = """"); Bool_tReadingObject() const; virtual Int_tTDirectory::ReadKeys(Bool_t = kTRUE); virtual Int_tTDirectory::ReadTObject(TObject*, const char*); virtual voidTDirectory::RecursiveRemove(TObject* obj); voidRefreshBrowsers(); virtual TObject*TDirectory::Remove(TObject*); voidRemoveClass(TClass*); voidReset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTDirectory::rmdir(const char* name); static Int_tRootVersionCode(); virtual voidTDirectory::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveContext(); virtual Int_tTDirectory::SaveObjectAs(const TObject*, const char* = """", Option_t* = """") const; virtual voidTObject::Sa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:11453,error,error,11453,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,3,['error'],['error']
Availability,"e = nullptr . ). Copy Constructor. ; Definition at line 191 of file RooRealVar.cxx. ◆ ~RooRealVar(). RooRealVar::~RooRealVar ; (; ). override . Destructor. ; Definition at line 218 of file RooRealVar.cxx. Member Function Documentation. ◆ _nullProp(). RooRealVarSharedProperties & RooRealVar::_nullProp ; (; ). staticprotected . Null property. ; Return a dummy object to use when properties are not initialised. ; Definition at line 102 of file RooRealVar.cxx. ◆ attachToTree(). void RooRealVar::attachToTree ; (; TTree & ; t, . Int_t ; bufSize = 32000 . ). overrideprotectedvirtual . Overload RooAbsReal::attachToTree to also attach branches for errors and/or asymmetric errors attribute StoreError and/or StoreAsymError are set. ; Reimplemented from RooAbsReal.; Definition at line 1102 of file RooRealVar.cxx. ◆ attachToVStore(). void RooRealVar::attachToVStore ; (; RooVectorDataStore & ; vstore). overrideprotectedvirtual . Overload RooAbsReal::attachToTree to also attach branches for errors and/or asymmetric errors attribute StoreError and/or StoreAsymError are set. ; Reimplemented from RooAbsReal.; Definition at line 1069 of file RooRealVar.cxx. ◆ chopAt(). double RooRealVar::chopAt ; (; double ; what, . Int_t ; where . ); const. protected . Utility to calculate number of decimals to show based on magnitude of error. ; Definition at line 1055 of file RooRealVar.cxx. ◆ Class(). static TClass * RooRealVar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRealVar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooRealVar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 173 of file RooRealVar.h. ◆ cleanup(). void RooRealVar::cleanup ; (; ). static . Explicitly deletes the shared properties list on exit to avoid problems with the initialization order. ; Meant to be only used internally in RooFit by RooSentinel. ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:75612,error,errors,75612,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,2,['error'],['errors']
Availability,"e == AUTH_HANDLER) {; 13642 DEBUG_ASSERT(handler == NULL);; 13643 DEBUG_ASSERT(connect_handler == NULL && ready_handler == NULL; 13644 && data_handler == NULL && close_handler == NULL);; 13645 DEBUG_ASSERT(is_delete_request || (auth_handler != NULL));; 13646 if (handler != NULL) {; 13647 return;; 13648 }; 13649 if ((connect_handler != NULL) || (ready_handler != NULL); 13650 || (data_handler != NULL) || (close_handler != NULL)) {; 13651 return;; 13652 }; 13653 if (!is_delete_request && (auth_handler == NULL)) {; 13654 return;; 13655 }; 13656 } else {; 13657 /* Unknown handler type. */; 13658 return;; 13659 }; 13660 ; 13661 if (!phys_ctx || !dom_ctx) {; 13662 /* no context available */; 13663 return;; 13664 }; 13665 ; 13666 mg_lock_context(phys_ctx);; 13667 ; 13668 /* first try to find an existing handler */; 13669 do {; 13670 lastref = &(dom_ctx->handlers);; 13671 for (tmp_rh = dom_ctx->handlers; tmp_rh != NULL;; 13672 tmp_rh = tmp_rh->next) {; 13673 if (tmp_rh->handler_type == handler_type; 13674 && (urilen == tmp_rh->uri_len) && !strcmp(tmp_rh->uri, uri)) {; 13675 if (!is_delete_request) {; 13676 /* update existing handler */; 13677 if (handler_type == REQUEST_HANDLER) {; 13678 /* Wait for end of use before updating */; 13679 if (tmp_rh->refcount) {; 13680 mg_unlock_context(phys_ctx);; 13681 mg_sleep(1);; 13682 mg_lock_context(phys_ctx);; 13683 /* tmp_rh might have been freed, search again. */; 13684 break;; 13685 }; 13686 /* Ok, the handler is no more use -> Update it */; 13687 tmp_rh->handler = handler;; 13688 } else if (handler_type == WEBSOCKET_HANDLER) {; 13689 tmp_rh->subprotocols = subprotocols;; 13690 tmp_rh->connect_handler = connect_handler;; 13691 tmp_rh->ready_handler = ready_handler;; 13692 tmp_rh->data_handler = data_handler;; 13693 tmp_rh->close_handler = close_handler;; 13694 } else { /* AUTH_HANDLER */; 13695 tmp_rh->auth_handler = auth_handler;; 13696 }; 13697 tmp_rh->cbdata = cbdata;; 13698 } else {; 13699 /* remove existing handler */; 13700 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:399739,avail,available,399739,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['avail'],['available']
Availability,"e == AUTH_HANDLER) {; 13643 DEBUG_ASSERT(handler == NULL);; 13644 DEBUG_ASSERT(connect_handler == NULL && ready_handler == NULL; 13645 && data_handler == NULL && close_handler == NULL);; 13646 DEBUG_ASSERT(is_delete_request || (auth_handler != NULL));; 13647 if (handler != NULL) {; 13648 return;; 13649 }; 13650 if ((connect_handler != NULL) || (ready_handler != NULL); 13651 || (data_handler != NULL) || (close_handler != NULL)) {; 13652 return;; 13653 }; 13654 if (!is_delete_request && (auth_handler == NULL)) {; 13655 return;; 13656 }; 13657 } else {; 13658 /* Unknown handler type. */; 13659 return;; 13660 }; 13661 ; 13662 if (!phys_ctx || !dom_ctx) {; 13663 /* no context available */; 13664 return;; 13665 }; 13666 ; 13667 mg_lock_context(phys_ctx);; 13668 ; 13669 /* first try to find an existing handler */; 13670 do {; 13671 lastref = &(dom_ctx->handlers);; 13672 for (tmp_rh = dom_ctx->handlers; tmp_rh != NULL;; 13673 tmp_rh = tmp_rh->next) {; 13674 if (tmp_rh->handler_type == handler_type; 13675 && (urilen == tmp_rh->uri_len) && !strcmp(tmp_rh->uri, uri)) {; 13676 if (!is_delete_request) {; 13677 /* update existing handler */; 13678 if (handler_type == REQUEST_HANDLER) {; 13679 /* Wait for end of use before updating */; 13680 if (tmp_rh->refcount) {; 13681 mg_unlock_context(phys_ctx);; 13682 mg_sleep(1);; 13683 mg_lock_context(phys_ctx);; 13684 /* tmp_rh might have been freed, search again. */; 13685 break;; 13686 }; 13687 /* Ok, the handler is no more use -> Update it */; 13688 tmp_rh->handler = handler;; 13689 } else if (handler_type == WEBSOCKET_HANDLER) {; 13690 tmp_rh->subprotocols = subprotocols;; 13691 tmp_rh->connect_handler = connect_handler;; 13692 tmp_rh->ready_handler = ready_handler;; 13693 tmp_rh->data_handler = data_handler;; 13694 tmp_rh->close_handler = close_handler;; 13695 } else { /* AUTH_HANDLER */; 13696 tmp_rh->auth_handler = auth_handler;; 13697 }; 13698 tmp_rh->cbdata = cbdata;; 13699 } else {; 13700 /* remove existing handler */; 13701 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:399772,avail,available,399772,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['avail'],['available']
Availability,"e BinData.cxx. ◆ BinData() [3/7]. ROOT::Fit::BinData::BinData ; (; const DataOptions & ; opt, . const DataRange & ; range, . unsigned int ; maxpoints = 0, . unsigned int ; dim = 1, . ErrorType ; err = kValueError . ). constructor from options and range default is 1D and value errors ; constructor from options and range efault is 1D and value errors ; Definition at line 56 of file BinData.cxx. ◆ BinData() [4/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; val, . const double * ; ex, . const double * ; eval . ). constructors using external data ; constructor from external data for 1D with errors on coordinate and value ; Definition at line 73 of file BinData.cxx. ◆ BinData() [5/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; eval . ). constructor from external data for 2D with errors on coordinate and value ; Definition at line 111 of file BinData.cxx. ◆ BinData() [6/7]. ROOT::Fit::BinData::BinData ; (; unsigned int ; n, . const double * ; dataX, . const double * ; dataY, . const double * ; dataZ, . const double * ; val, . const double * ; ex, . const double * ; ey, . const double * ; ez, . const double * ; eval . ). constructor from external data for 3D with errors on coordinate and value ; Definition at line 149 of file BinData.cxx. ◆ ~BinData(). ROOT::Fit::BinData::~BinData ; (; ). override . destructor ; Definition at line 188 of file BinData.cxx. ◆ BinData() [7/7]. ROOT::Fit::BinData::BinData ; (; const BinData & ; rhs). copy constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:16264,error,errors,16264,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['errors']
Availability,"e Bool_t TObject::HasInconsistentHash() const; 359{; 360 return fBits & kInconsistent;; 361}; 362 ; 363// Global bits (can be set for any object and should not be reused).; 364// Only here for backward compatibility reasons.; 365// For detailed description see TObject::EStatusBits above.; 366enum EObjBits {; 367 kCanDelete = TObject::kCanDelete,; 368 kMustCleanup = TObject::kMustCleanup,; 369 kObjInCanvas = TObject::kObjInCanvas,; 370 kIsReferenced = TObject::kIsReferenced,; 371 kHasUUID = TObject::kHasUUID,; 372 kCannotPick = TObject::kCannotPick,; 373 kNoContextMenu = TObject::kNoContextMenu,; 374 kInvalidObject = TObject::kInvalidObject; 375};; 376 ; 377namespace cling {; 378 std::string printValue(TObject *val);; 379}; 380 ; 381namespace ROOT {; 382 ; 383namespace Internal {; 384 bool DeleteChangesMemory();; 385} // Internal; 386 ; 387namespace Detail {; 388 ; 389 ; 390/// @brief Check if the TObject's memory has been deleted.; 391/// @warning This should be only used for error mitigation as the answer is only; 392/// sometimes correct. It actually just checks whether the object has been; 393/// deleted, so this will falsely return true for an object that has; 394/// been destructed but its memory has not been deleted. This will return an; 395/// undefined value if the memory is re-used between the deletion and the check.; 396/// i.e. This is useful to prevent a segmentation fault in case where the problem; 397/// can be detected when the deletion and the usage are 'close-by'; 398/// @warning In enviroment where delete taints (changes) the memory, this function; 399/// always returns false as the marker left by ~TObject will be overwritten.; 400/// @param obj The memory to check; 401/// @return true if the object has been destructed and it can be inferred that it has been deleted; 402R__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj) {; 403 return !ROOT::Internal::DeleteChangesMemory() && obj->IsDestructed();; 404}; 405 ; 406}} // ROOT::Details; 407 ; 408#",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:16398,error,error,16398,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['error'],['error']
Availability,"e Carlo simulation based on the; distributions shown in Fig. 1. The data sample consists of 500 signal events and 5000 background events. Chosing and as discriminating variables to determine and through a maximum Likelihood fit, one builds, for the control variable which is unknown to the fit, the two ; for signal and background shown in Fig. 3. One observes that the . for signal reproduces correctly the PDF even where the latter vanishes,; although the error bars remain sizeable. This results from the almost; complete cancellation between positive and negative weights: the sum of; weights is close to zero while the sum of weights squared is not. The; occurence of negative weights occurs through the appearance of the; covariance matrix, and its negative components, in the definition of; Eq. (2). A word of caution is in order with respect to the error bars. Whereas; their sum in quadrature is identical to the statistical uncertainties; of the yields determined by the fit, and if, in addition, they are; asymptotically correct, the error bars should be handled with care for; low statistics and/or for too fine binning. This is because the error; bars do not incorporate two known properties of the PDFs: PDFs are; positive definite and can be non-zero in a given x-bin, even if in the; particular data sample at hand, no event is observed in this bin. The; latter limitation is not specific to; ,; rather it is always present when one is willing to infer the PDF at the; origin of an histogram, when, for some bins, the number of entries does; not guaranty the applicability of the Gaussian regime. In such; situations, a satisfactory practice is to attach allowed ranges to the; histogram to indicate the upper and lower limits of the PDF value which; are consistent with the actual observation, at a given confidence; level. Figure 3:; The ; (signal on the left, background on the right) obtained for are represented as dots with error bars. They are obtained from a fit using only in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:7567,error,error,7567,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,6,['error'],['error']
Availability,"e DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using custom variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied values for the specified column. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with a single column. The variation tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9, pt*1.1}"", {""down"", ""up""}); .Filter(""pt > k""); .Define(""x"", someFunc, {""pt""}); .Histo1D(""x"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1074 of file RInterface.hxx. ◆ Vary() [11/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::string_view ; colName, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName = """" . ). inline . Register systematic variations for a single existing column using auto-generated variation tags. ; Parameters. [in]colNamename of the column for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec containing the varied",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:153876,down,down,153876,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['down'],['down']
Availability,"e FCNBase interface may be chosen freely (in documentation we give it the generic name \(\mbox{FCN}\)).; 4.1.1 FCNBase::operator()(const std::vector\(<\)double\(>\)&); The meaning of the vector of parameters std::vector\(<\)double\(>\) in the argument of FCNBase::operator() are of course defined by the user, who uses the values of those parameters to calculate their function value. The order and the position of these parameters is strictly the one specified by the user when supplying the starting values for minimization.; The starting values must be specified by the user, either via an std::vector\(<\)double\(>\) or the MnUserParameters (see [api:parameters]) supplied as input to the M minimizers such as VariableMetricMinimizer or MnMigrad (see [api:migrad]). Later values are determined by M as it searches for the minimum or performs whatever analysis is requested by the user.; 4.1.2 FCNBase::up(); [howto:errordef] Returns the value of \(\mbox{up}\) (default value \(= 1.\)), defining parameter errors. M defines parameter errors as the change in parameter value required to change the function value by \(\mbox{up}\). Normally, for chisquared fits \(\mbox{up = 1}\), and for negative log likelihood, \(\mbox{up = 0.5}\).; 4.1.3 \(\mbox{FCN}\) function with gradient; By default first derivatives are calculated numerically by M . In case the user wants to supply their own gradient calculator (e.g. analytical derivatives), they need to implement the FCNGradientBase interface. The size of the output vector is the same as of the input one. The same is true for the position of the elements (first derivative of the function with respect to the \(n_\mathrm{th}\) variable has index \(n\) in the output vector).; 4.2 M parameters; Interaction with the parameters of the function are essential both for M and the user. Different interfaces are provided, depending on the level of interaction.; 4.2.1 Minimal required interface; Starting values of parameters and uncertainties can be provi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:30789,error,errors,30789,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['error'],['errors']
Availability,"e FitConfig.h. ◆ SetParamsSettings() [1/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; const std::vector< ROOT::Fit::ParameterSettings > & ; pars). inline . Definition at line 145 of file FitConfig.h. ◆ SetParamsSettings() [2/2]. void ROOT::Fit::FitConfig::SetParamsSettings ; (; unsigned int ; npar, . const double * ; params, . const double * ; vstep = nullptr . ). set the parameter settings from number of parameters and a vector of values and optionally step values. ; If there are not existing or number of parameters does not match existing one, create a new parameter setting list. ; Definition at line 135 of file FitConfig.cxx. ◆ SetUpdateAfterFit(). void ROOT::Fit::FitConfig::SetUpdateAfterFit ; (; bool ; on = true). inline . Update configuration after a fit using the FitResult. ; Definition at line 243 of file FitConfig.h. ◆ SetWeightCorrection(). void ROOT::Fit::FitConfig::SetWeightCorrection ; (; bool ; on = true). inline . apply the weight correction for error matrix computation ; Definition at line 232 of file FitConfig.h. ◆ UpdateAfterFit(). bool ROOT::Fit::FitConfig::UpdateAfterFit ; (; ); const. inline . Update configuration after a fit using the FitResult. ; Definition at line 211 of file FitConfig.h. ◆ UseWeightCorrection(). bool ROOT::Fit::FitConfig::UseWeightCorrection ; (; ); const. inline . Apply Weight correction for error matrix computation. ; Definition at line 214 of file FitConfig.h. Member Data Documentation. ◆ fMinimizerOpts. ROOT::Math::MinimizerOptions ROOT::Fit::FitConfig::fMinimizerOpts. private . minimizer control parameters including name and algo type ; Definition at line 268 of file FitConfig.h. ◆ fMinosErrors. bool ROOT::Fit::FitConfig::fMinosErrors. private . do full error analysis using Minos ; Definition at line 261 of file FitConfig.h. ◆ fMinosParams. std::vector<unsigned int> ROOT::Fit::FitConfig::fMinosParams. private . vector with the parameter indices for running Minos ; Definition at line 266 of file FitConfig.h. ◆ fNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:11498,error,error,11498,doc/master/classROOT_1_1Fit_1_1FitConfig.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html,1,['error'],['error']
Availability,"e Guide ; .  . Loading...; Searching...; No Matches. Files |; Classes ; Base ROOT classesCore ROOT classes. ; The Base classes of ROOT. ; The base classes of the ROOT system provide the core of the system. They are available to all other classes. They range from a set of abstract interfaces (TVirtualXXXXX classes), to a wide range of basic utility classes providing basic services like strings, regular expression, timers, date/time, md5 checksumming, signal/slots event handling, plugin handler, run-config resource processor, etc. etc. . Files; file  RConversionRuleParser.cxx;  ; file  RDirectory.cxx;  ; file  RDirectory.hxx;  ; file  RDirectoryEntry.hxx;  ; file  RError.cxx;  ; file  RError.hxx;  ; file  RFile.cxx;  ; file  RFile.hxx;  ; file  RIndexIter.hxx;  ; file  RLogger.cxx;  ; file  RLogger.hxx;  ; file  RNotFn.hxx;  ; file  RRangeCast.hxx;  ; file  RSpan.hxx;  ; file  span.hxx;  ; file  StringUtils.hxx;  ; file  TClassEdit.cxx;  . Classes; class  ROOT::Experimental::RError;  Captures diagnostics related to a ROOT runtime error. More...;  ; class  ROOT::Experimental::RException;  Base class for all ROOT issued exceptions. More...;  ; class  ROOT::Experimental::RResult< T >;  The class is used as a return type for operations that can fail; wraps a value of type T or an RError. More...;  ; class  ROOT::Experimental::RResultBase;  Common handling of the error case for RResult<T> (T != void) and RResult<void> More...;  ; class  TApplication;  This class creates the ROOT Application Environment that interfaces to the windowing system eventloop and eventhandlers. More...;  ; class  TApplicationImp;  ABC describing GUI independent application implementation protocol. More...;  ; class  TAtt3D;  Use this attribute class when an object should have 3D capabilities. More...;  ; class  TAttAxis;  Manages histogram axis attributes. More...;  ; class  TAttBBox;  Helper for management of bounding-box information. More...;  ; class  TAttBBox2D;  Abstract base class for element",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Base.html:1099,error,error,1099,doc/master/group__Base.html,https://root.cern,https://root.cern/doc/master/group__Base.html,1,['error'],['error']
Availability,"e HypoTestResult.h. ◆ GetPValueIsRightTail(). bool RooStats::HypoTestResult::GetPValueIsRightTail ; (; void ; ); const. inline . Definition at line 99 of file HypoTestResult.h. ◆ GetTestStatisticData(). double RooStats::HypoTestResult::GetTestStatisticData ; (; void ; ); const. inline . Definition at line 82 of file HypoTestResult.h. ◆ HasTestStatisticData(). bool HypoTestResult::HasTestStatisticData ; (; void ; ); const. Definition at line 251 of file HypoTestResult.cxx. ◆ IsA(). TClass * RooStats::HypoTestResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 142 of file HypoTestResult.h. ◆ NullPValue(). virtual double RooStats::HypoTestResult::NullPValue ; (; ); const. inlinevirtual . Return p-value for null hypothesis. ; Reimplemented in RooStats::HybridResult.; Definition at line 52 of file HypoTestResult.h. ◆ NullPValueError(). double HypoTestResult::NullPValueError ; (; ); const. The error on the Null p-value. ; Definition at line 257 of file HypoTestResult.cxx. ◆ operator=(). HypoTestResult & HypoTestResult::operator= ; (; const HypoTestResult & ; other). assignment operator ; Definition at line 136 of file HypoTestResult.cxx. ◆ Print(). void HypoTestResult::Print ; (; const Option_t * ; = """"); const. override . Print out some information about the results Note: use Alt/Null labels for the hypotheses here as the Null might be the s+b hypothesis. ; Definition at line 333 of file HypoTestResult.cxx. ◆ SetAllTestStatisticsData(). void HypoTestResult::SetAllTestStatisticsData ; (; const RooArgList * ; tsd). Definition at line 231 of file HypoTestResult.cxx. ◆ SetAltDetailedOutput(). void RooStats::HypoTestResult::SetAltDetailedOutput ; (; RooDataSet * ; d). inline . Definition at line 92 of file HypoTestResult.h. ◆ SetAltDistribution(). void HypoTestResult::SetAltDistribution ; (; SamplingDistribution * ; alt). Definition at line 208 of file HypoTestResult.cxx. ◆ SetAltPValue().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:22913,error,error,22913,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['error'],['error']
Availability,"e Linear Fitter) ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool FixVariable (unsigned int ivar);  fix an existing variable ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearMinimizer.html:3752,error,error,3752,doc/master/classTLinearMinimizer.html,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html,1,['error'],['error']
Availability,"e Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Accessing a TTree With a TSelector. What is a Selector?; To benefit from many ROOT features (e.g. PROOF and PROOF-lite) you should use a class deriving from the TSelector to analyze a TTree. The selector's code will be used by calling TTree::Process().; We provide a TSelector derived class in a simple source file. So please download the following source file and save it where you can find it: EventSelector.C. This is a skeleton of our selector.; N.B. If you are using ROOT via ssh, you have to download the file with wget from your remote directory. E.g.:; wget http://root-mirror.github.io/training/intro/EventSelector.C; Preparation; Now quit and restart ROOT (to make sure everybody starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. Processing a Selector on a Tree; To apply this selector on the tree you do not call the selector directly; instead, the selector is passed to the tree which then runs it (see the documentation of TTree::Process()):; root[1] EventTree->Process(""EventSelector.C""). As you can see, nothing happens because our selector is empty. So lets see what we can do with this selector.; Editing the Selector Skeleton; Open the downloaded selector file (EventSelector.C) in a text editor, e.g. with vi, emacs, wordpad, Eclipse... At the beginning of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tselector.html:2246,down,download,2246,d/accessing-ttree-tselector.html,https://root.cern,https://root.cern/d/accessing-ttree-tselector.html,1,['down'],['download']
Availability,"e Minuit package acts on a multi parameter FORTRAN function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the Minuit SetFCN member function when an histogram fitting is invoked. The value of FCN will in general depend on one or more variable parameters.; 5.9.2 The Transformation of Limited Parameters; For variable parameters with limits, Minuit uses the following transformation:; Pint = arcsin(2((Pext-a)/(b-a))-1); Pext = a+((b-a)/(2))(sinPint+1); so that the internal value Pint can take on any value, while the external value Pext can take on values only between the lower limit a and the ext upper limit b. Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical round off both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if they put limits of (0, 1010) on a parameter, then the values 0.0 and 1. 0 will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the ‘’parabolic’’ parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\frac{\partial Pext}{\partial Pint} \neq 0\). Therefore,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:216737,down,down,216737,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['down']
Availability,"e PS, PDF and SVG. pattern_number can have any value from 1 to 25 (see table), or any; value from 100 to 999. For the latest the numbering convention is the following:. pattern_number = ijk (FillStyle = 3ijk); ; i (1-9) : specify the space between each hatch; 1 = 1/2mm 9 = 6mm; ; j (0-9) : specify angle between 0 and 90 degrees; 0 = 0; 1 = 10; 2 = 20; 3 = 30; 4 = 45; 5 = Not drawn; 6 = 60; 7 = 70; 8 = 80; 9 = 90; ; k (0-9) : specify angle between 90 and 180 degrees; 0 = 180; 1 = 170; 2 = 160; 3 = 150; 4 = 135; 5 = Not drawn; 6 = 120; 7 = 110; 8 = 100; 9 = 90. The following table shows the list of pattern styles.; The first table displays the 25 fixed patterns. They cannot be; customized unlike the hatches displayed in the second table which be; customized using:. gStyle->SetHatchesSpacing() to define the spacing between hatches.; gStyle->SetHatchesLineWidth() to define the hatches line width. Picture; Source. TCanvas * fillpatterns(); {; // Fill patterns example. This macro shows the available fill patterns.; // The first table displays the 25 fixed patterns. They cannot be; // customized unlike the hatches displayed in the second table which be ; // cutomized using:; // - gStyle->SetHatchesSpacing() to define the spacing between hatches.; SetHatchesLineWidth() to define the hatches line width.; ; ; ; TCanvas *Pat = new TCanvas(""Fill Patterns"", """",0,0,500,700);; Pat->Range(0,0,1,1);; Pat->SetBorderSize(2);; Pat->SetFrameFillColor(0);; Double_t bh = 0.059;; Double_t db = 0.01; ; Double_t y = 0.995;; Int_t i,j=3001;. ; for (i=1; i<=5; i++) {; box(j++, 0.01, y-bh, 0.19, y);; box(j++, 0.21, y-bh, 0.39, y);; box(j++, 0.41, y-bh, 0.59, y);; box(j++, 0.61, y-bh, 0.79, y);; box(j++, 0.81, y-bh, 0.99, y);; y = y-bh-db;; }. ; y = y-3*db;; gStyle->SetHatchesSpacing(2.0);; gStyle->SetHatchesLineWidth(1);; Int_t j1 = 3144;; Int_t j2 = 3305;; Int_t j3 = 3350;; Int_t j4 = 3490;; Int_t j5 = 3609;; for (i=1; i<=9; i++) {; if (i==6) {j2 += 10; j3 += 1; j4 += 1; j5 += 10;}; if (i==5) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttFill.html:3894,avail,available,3894,root/html526/TAttFill.html,https://root.cern,https://root.cern/root/html526/TAttFill.html,4,['avail'],['available']
Availability,"e PassThrough > ; double operator() (PassThrough &settingsAndBatch, Weights &weights, Gradients &gradients) const;  execute computation of the DNN for one mini-batch (used by the minimizer); returns gradients as well ;  ; template<typename Weights , typename Gradients , typename PassThrough , typename OutContainer > ; double operator() (PassThrough &settingsAndBatch, Weights &weights, Gradients &gradients, ModeOutput eFetch, OutContainer &outputContainer) const;  ; size_t outputSize () const;  output size of the DNN ;  ; template<typename LayerContainer , typename DropContainer , typename ItWeight , typename ItGradient > ; std::vector< std::vector< LayerData > > prepareLayerData (LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) const;  ; template<typename Minimizer > ; void preTrain (std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings);  pre-training for future use ;  ; void removeLayer ();  remove one layer ;  ; void setErrorFunction (ModeErrorFunction eErrorFunction);  which error function is to be used ;  ; void setInputSize (size_t sizeInput);  set the input size of the DNN ;  ; void SetIpythonInteractive (IPythonInteractive *fI, bool *fE, UInt_t *M, UInt_t *C);  ; void setOutputSize (size_t sizeOutput);  set the output size of the DNN ;  ; template<typename Minimizer > ; double train (std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings);  start the training ;  ; template<typename Iterator , typename Minimizer > ; double trainCycle (Minimizer &minimizer, std::vector< double > &weights, Iterator itPatternBegin, Iterator itPatternEnd, Settings &settings, DropContainer &dropContainer);  executes one training cycle ;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:5522,error,error,5522,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['error'],['error']
Availability,"e ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O.Definition TFitResult.h:34; TFitResult::~TFitResult~TFitResult() overrideDefinition TFitResult.h:53; TFitResult::TFitResultTFitResult(int status=0)Definition TFitResult.h:39; TFitResult::Errordouble Error(unsigned int i) constDefinition TFitResult.h:74; TFitResult::GetCorrelationMatrixTMatrixDSym GetCorrelationMatrix() constReturn the correlation matrix from fit.Definition TFitResult.cxx:77; TFitResult::Contourbool Contour(unsigned int ipar, unsigned int jpar, TGraph *gr, double confLevel=0.683)Create a 2D contour around the minimum for the parameter ipar and jpar if a minimum does not exist or...Definition TFitResult.cxx:119; TFitResult::GetCovarianceMatrixTMatrixDSym GetCovarianceMatrix() constReturn the covariance matrix from fit.Definition TFitResult.cxx:59; TFitResult::Printvoid Print(Option_t *option="""") const overridePrint result of the fit, by default chi2, parameter values and errors.Definition TFitResult.cxx:44; TFitResult::TFitResultTFitResult(const char *name, const char *title)Definition TFitResult.h:45; TFitResult::Scanbool Scan(unsigned int ipar, TGraph *gr, double xmin=0, double xmax=0)Scan parameter ipar between value of xmin and xmax A graph must be given which will be on return fill...Definition TFitResult.cxx:93; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TMatrixTSym< Double_t >; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; grTGraphErrors * grDefinition legend1.C:25; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. histhistincTFitResult.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResult_8h_source.html:5722,error,error,5722,doc/master/TFitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/TFitResult_8h_source.html,1,['error'],['error']
Availability,"e ROOT::Math::GSLMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 154 of file GSLMinimizer1D.cxx. ◆ Iterate(). int ROOT::Math::GSLMinimizer1D::Iterate ; (; ). Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ; Definition at line 110 of file GSLMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::GSLMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 173 of file GSLMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::GSLMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 164 of file GSLMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::GSLMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 159 of file GSLMinimizer1D.cxx. ◆ operator=() [1/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; const GSLMinimizer1D & ; ). delete . ◆ operator=() [2/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; GSLMinimizer1D && ; ). delete . ◆ SetFunction() [1/2]. template<class UserFunc > . void ROOT::Math::GSLMinimizer1D::SetFunction ; (; const UserFunc & ; f, . double ; xmin, . double ; xlow, . double ; xup . ). inline . Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:6155,toler,tolerance,6155,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"e RVecN is shorter than `pos`.; 1314 value_type at(size_type pos, value_type fallback) const; 1315 {; 1316 if (pos >= size_type(this->fSize)); 1317 return fallback;; 1318 return this->operator[](pos);; 1319 }; 1320};; 1321 ; 1322// clang-format off; 1323/**; 1324\class ROOT::VecOps::RVec; 1325\brief A ""std::vector""-like collection of values implementing handy operation to analyse them; 1326\tparam T The type of the contained objects; 1327 ; 1328A RVec is a container designed to make analysis of values' collections fast and easy.; 1329Its storage is contiguous in memory and its interface is designed such to resemble to the one; 1330of the stl vector. In addition the interface features methods and; 1331[external functions](https://root.cern/doc/master/namespaceROOT_1_1VecOps.html) to ease the manipulation and analysis; 1332of the data in the RVec.; 1333 ; 1334\note ROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD; 1335are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; 1336- RVecB (`bool`); 1337- RVecC (`char`); 1338- RVecD (`double`); 1339- RVecF (`float`); 1340- RVecI (`int`); 1341- RVecL (`long`); 1342- RVecLL (`long long`); 1343- RVecU (`unsigned`); 1344- RVecUL (`unsigned long`); 1345- RVecULL (`unsigned long long`); 1346 ; 1347\note RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or; 1348other operations will be propagated potentially leaving the RVec object in an invalid state.; 1349 ; 1350\note RVec methods (e.g. `at` or `size`) follow the STL naming convention instead of the ROOT naming convention in order; 1351to make RVec a drop-in replacement for `std::vector`.; 1352 ; 1353\htmlonly; 1354<a href=""https://doi.org/10.5281/zenodo.1253756""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.1253756.svg"" alt=""DOI""></a>; 1355\endhtmlonly; 1356 ; 1357## Table of Contents; 1358- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:46197,avail,available,46197,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['avail'],['available']
Availability,"e Return the list of selected column names. . Definition at line 915 of file RDFInterfaceUtils.cxx. ◆ GetValuePtrHelper() [1/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; ROOT::RVec< T > & ; v, . std::size_t ; , . std::size_t ; varIdx . ). Definition at line 80 of file RVariation.hxx. ◆ GetValuePtrHelper() [2/2]. template<typename T > . void * ROOT::Internal::RDF::GetValuePtrHelper ; (; std::vector< ROOT::RVec< T > > & ; v, . std::size_t ; colIdx, . std::size_t ; varIdx . ). Definition at line 122 of file RVariation.hxx. ◆ GetVectorAddress(). template<typename dtype > . ULong64_t ROOT::Internal::RDF::GetVectorAddress ; (; std::vector< dtype > & ; p). Definition at line 25 of file PyROOTHelpers.hxx. ◆ InterpreterCalc(). Long64_t ROOT::Internal::RDF::InterpreterCalc ; (; const std::string & ; code, . const std::string & ; context = """" . ). Jit code in the interpreter with TInterpreter::Calc, throw in case of errors. ; The optional context parameter, if present, is mentioned in the error message. The pointer returned by the call to TInterpreter::Calc is returned in case of success. ; Definition at line 345 of file RDFUtils.cxx. ◆ InterpreterDeclare(). void ROOT::Internal::RDF::InterpreterDeclare ; (; const std::string & ; code). Declare code in the interpreter via the TInterpreter::Declare method, throw in case of errors. ; Definition at line 333 of file RDFUtils.cxx. ◆ IsInternalColumn(). bool ROOT::Internal::RDF::IsInternalColumn ; (; std::string_view ; colName). Whether custom column with name colName is an ""internal"" column such as rdfentry_ or rdfslot_. ; Definition at line 381 of file RDFUtils.cxx. ◆ IsStrInVec(). bool ROOT::Internal::RDF::IsStrInVec ; (; const std::string & ; str, . const std::vector< std::string > & ; vec . ). Definition at line 439 of file RDFUtils.cxx. ◆ JitBuildAction(). std::string ROOT::Internal::RDF::JitBuildAction ; (; const ColumnNames_t & ; cols, . std::shared_ptr< RDFDetail::RNodeBase > * ; prevNode, . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html:35359,error,error,35359,doc/master/namespaceROOT_1_1Internal_1_1RDF.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1RDF.html,1,['error'],['error']
Availability,"e RooMinimizer.cxx. ◆ calculateMinosErrors(). bool RooMinimizer::calculateMinosErrors ; (; ). private . Definition at line 911 of file RooMinimizer.cxx. ◆ Class(). static TClass * RooMinimizer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooMinimizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooMinimizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 247 of file RooMinimizer.h. ◆ clearStatusHistory(). void RooMinimizer::clearStatusHistory ; (; ). inline . Clears the Minuit status history. ; Definition at line 182 of file RooMinimizer.h. ◆ contour(). RooPlot * RooMinimizer::contour ; (; RooRealVar & ; var1, . RooRealVar & ; var2, . double ; n1 = 1.0, . double ; n2 = 2.0, . double ; n3 = 0.0, . double ; n4 = 0.0, . double ; n5 = 0.0, . double ; n6 = 0.0, . unsigned int ; npoints = 50 . ). Create and draw a TH2 with the error contours in the parameters var1 and var2. ; Parameters. [in]var1The first parameter (x axis). ; [in]var2The second parameter (y axis). ; [in]n1First contour. ; [in]n2Optional contour. 0 means don't draw. ; [in]n3Optional contour. 0 means don't draw. ; [in]n4Optional contour. 0 means don't draw. ; [in]n5Optional contour. 0 means don't draw. ; [in]n6Optional contour. 0 means don't draw. ; [in]npointsNumber of points for evaluating the contour. Up to six contours can be drawn using the arguments n1 to n6 to request the desired coverage in units of \( \sigma = n^2 \cdot \mathrm{ErrorDef} \). See ROOT::Math::Minimizer::ErrorDef(). ; Definition at line 591 of file RooMinimizer.cxx. ◆ DeclFileName(). static const char * RooMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 247 of file RooMinimizer.h. ◆ determineStatus(). void RooMinimizer::determineStatus ; (; bool ; fitterReturnValue). private . Definition at line 261 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:19008,error,error,19008,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['error'],['error']
Availability,"e TGCocoa.h. Public Member Functions;  TGCocoa ();  ;  TGCocoa (const char *name, const char *title);  ;  ~TGCocoa () override;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t wid, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t wid, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t wid, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t wid, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t wid, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:1875,mask,mask,1875,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['mask'],['mask']
Availability,"e TGHtmlUri.cxx. Member Function Documentation. ◆ BuildUri(). char * TGHtmlUri::BuildUri ; (; ). Create a string to hold the given URI. ; Memory to hold the string is allocated with new[] and must be freed by the calling function. ; Definition at line 204 of file TGHtmlUri.cxx. ◆ ComponentLength(). int TGHtmlUri::ComponentLength ; (; const char * ; z, . const char * ; zInit, . const char * ; zTerm . ). Return the length of the next component of the URL in z[] given that the component starts at z[0]. ; The initial sequence of the component must be zInit[]. The component is terminated by any character in zTerm[]. The length returned is 0 if the component doesn't exist. The length includes the zInit[] string, but not the termination character. Component zInit zTerm; ---------- ------- -------; scheme """" "":/?#""; authority ""//"" ""/?#""; path ""/"" ""?#""; query ""?"" ""#""; fragment ""#"" """" . Definition at line 183 of file TGHtmlUri.cxx. ◆ EqualsUri(). int TGHtmlUri::EqualsUri ; (; const TGHtmlUri * ; uri, . int ; field_mask = ( (1<<0)  |  (1<<1)  |    (1<<2)  |  (1<<3)  |    (1<<4) ) . ). Compare another uri with given field mask. ; Definition at line 120 of file TGHtmlUri.cxx. ◆ operator=(). TGHtmlUri & TGHtmlUri::operator= ; (; const TGHtmlUri & ; ). privatedelete . Member Data Documentation. ◆ fZAuthority. char* TGHtmlUri::fZAuthority. Definition at line 72 of file TGHtmlUri.h. ◆ fZFragment. char* TGHtmlUri::fZFragment. Definition at line 75 of file TGHtmlUri.h. ◆ fZPath. char* TGHtmlUri::fZPath. Definition at line 73 of file TGHtmlUri.h. ◆ fZQuery. char* TGHtmlUri::fZQuery. Definition at line 74 of file TGHtmlUri.h. ◆ fZScheme. char* TGHtmlUri::fZScheme. Definition at line 71 of file TGHtmlUri.h. Libraries for TGHtmlUri:. [legend]; The documentation for this class was generated from the following files:; gui/guihtml/inc/TGHtmlUri.h; gui/guihtml/src/TGHtmlUri.cxx. TGHtmlUri. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:12158,mask,mask,12158,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['mask'],['mask']
Availability,"e TGraph.cxx. ◆ Apply(). void TGraph::Apply ; (; TF1 * ; f). virtual . Apply function f to all the data points f may be a 1-D function TF1 or 2-d function TF2 The Y values of the graph are replaced by the new values computed using the function. ; Reimplemented in TGraphAsymmErrors, TGraphBentErrors, TGraphErrors, and TGraphMultiErrors.; Definition at line 638 of file TGraph.cxx. ◆ Browse(). void TGraph::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 651 of file TGraph.cxx. ◆ Chisquare(). Double_t TGraph::Chisquare ; (; TF1 * ; func, . Option_t * ; option = """" . ); const. virtual . Return the chisquare of this graph with respect to f1. ; The chisquare is computed as the sum of the quantity below at each point: ; \[; \frac{(y-f1(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f1'(x))^{2}}; \]. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x). This method to approximate the uncertainty in y because of the errors in x, is called ""effective variance"" method. In case of a pure TGraph, the denominator is 1. In case of a TGraphErrors or TGraphAsymmErrors the errors are taken into account. By default the range of the graph is used whatever function range. Use option ""R"" to use the function range ; Definition at line 677 of file TGraph.cxx. ◆ Class(). static TClass * TGraph::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 203 of file TGraph.h. ◆ CompareArg(). Bool_t TGraph::CompareArg ; (; const TGraph * ; gr, . Int_t ; left, . Int_t ; right . ). static . Return kTRUE if point number ""left""'s argument (angle with respect to positive x-axis) is bigger than that of point number ""right"". ; Can be used by Sort. ; Definition at line 6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:37969,error,errors,37969,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['error'],['errors']
Availability,e TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment op,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:31968,error,errors,31968,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['errors']
Availability,"e TMath.h. ◆ Sort(). template<typename Element , typename Index > . void TMath::Sort ; (; Index ; n, . const Element * ; a, . Index * ; index, . Bool_t ; down = kTRUE . ). Sort the n elements of the array a of generic templated type Element. ; In output the array index of type Index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length >= n before calling this function. NOTE also that the size type for n must be the same type used for the index array (templated type Index) ; Definition at line 431 of file TMathBase.h. ◆ SortItr(). template<typename Iterator , typename IndexIterator > . void TMath::SortItr ; (; Iterator ; first, . Iterator ; last, . IndexIterator ; index, . Bool_t ; down = kTRUE . ). Sort the n1 elements of the Short_t array defined by its iterators. ; In output the array index contains the indices of the sorted array. If down is false sort in increasing order (default is decreasing order).; NOTE that the array index must be created with a length bigger or equal than the main array before calling this function. ; Definition at line 406 of file TMathBase.h. ◆ Sq(). Double_t TMath::Sq ; (; Double_t ; x). inline . Returns x*x. ; Definition at line 656 of file TMath.h. ◆ Sqrt(). Double_t TMath::Sqrt ; (; Double_t ; x). inline . Returns the square root of x. ; Definition at line 662 of file TMath.h. ◆ Sqrt2(). constexpr Double_t TMath::Sqrt2 ; (; ). constexpr . \( \sqrt{2} \) ; Definition at line 86 of file TMath.h. ◆ StdDev() [1/3]. template<typename Iterator > . Double_t TMath::StdDev ; (; Iterator ; first, . Iterator ; last . ). Same as RMS. ; Definition at line 528 of file TMath.h. ◆ StdDev() [2/3]. template<typename Iterator , typename WeightIterator > . Double_t TMath::StdDev ; (; Iterator ; first, . Iterator ; last, . WeightIterator ; wfirst . ). Same as RMS. ; Definition at line 529 of file TMath.h. ◆ StdDev() [3/3]. template<typena",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:82604,down,down,82604,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['down'],['down']
Availability,"e TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:16600,error,errors,16600,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,1,['error'],['errors']
Availability,"e TProfile2D.h. ◆ BufferFill() [3/3]. Int_t TProfile2D::BufferFill ; (; Double_t ; x, . Double_t ; y, . Double_t ; w . ). inlineoverrideprotectedvirtual . accumulate arguments in buffer. ; When buffer is full, empty the buffer fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry; fBuffer[3] = y of first entry; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; TH1::fBufferDouble_t * fBuffer[fBufferSize] entry bufferDefinition TH1.h:108; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. Reimplemented from TH2.; Definition at line 45 of file TProfile2D.h. ◆ BuildOptions(). void TProfile2D::BuildOptions ; (; Double_t ; zmin, . Double_t ; zmax, . Option_t * ; option . ). Set Profile2D histogram structure and options. . zmin: minimum value allowed for z; zmax: maximum value allowed for z if (zmin = zmax = 0) there are no limits on the allowed z values (zmin = -inf, zmax = +inf); option: this is the option for the computation of the t error of the profile ( TProfile2D::GetBinError ) possible values for the options are documented in TProfile2D::SetErrorOption; See TProfile::BuildOptions for a detailed description . Definition at line 189 of file TProfile2D.cxx. ◆ Class(). static TClass * TProfile2D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProfile2D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProfile2D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 153 of file TProfile2D.h. ◆ Copy(). void TProfile2D::Copy ; (; TObject & ; hnew); const. overridevirtual . Copy a Profile2D histogram to a new profile2D histogram. ; Reimplemented from TH2D.; Definition at line 386 of file TProfile2D.cxx. ◆ DeclFileName(). static const char * TProfile2D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:74392,error,error,74392,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['error'],['error']
Availability,"e TRint.cxx. ◆ Interrupt(). void TRint::Interrupt ; (; ). inline . Definition at line 62 of file TRint.h. ◆ IsA(). TClass * TRint::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TApplication.; Definition at line 67 of file TRint.h. ◆ operator=(). TRint & TRint::operator= ; (; const TRint & ; ). privatedelete . ◆ PrintLogo(). void TRint::PrintLogo ; (; Bool_t ; lite = kFALSE). virtual . Print the ROOT logo on standard output. ; Definition at line 512 of file TRint.cxx. ◆ ProcessLineNr(). Longptr_t TRint::ProcessLineNr ; (; const char * ; filestem, . const char * ; line, . Int_t * ; error = nullptr . ). private . Calls TRint::ProcessLine() possibly prepending a #line directive for better diagnostics. ; The user is responsible for incrementing fNcmd, where appropriate, after a call to this function. ; Definition at line 791 of file TRint.cxx. ◆ ProcessRemote(). Longptr_t TRint::ProcessRemote ; (; const char * ; line, . Int_t * ; error = nullptr . ). overrideprivatevirtual . Process the content of a line starting with "".R"" (already stripped-off) The format is [user@]host[:dir] [-l user] [-d dbg] [script] The variable 'dir' is the remote directory to be used as working dir. ; The username can be specified in two ways, ""-l"" having the priority (as in ssh). A 'dbg' value > 0 gives increasing verbosity. The last argument 'script' allows to specify an alternative script to be executed remotely to startup the session. ; Reimplemented from TApplication.; Definition at line 768 of file TRint.cxx. ◆ Run(). void TRint::Run ; (; Bool_t ; retrn = kFALSE). overridevirtual . Main application eventloop. ; First process files given on the command line and then go into the main application event loop, unless the -q command line option was specified in which case the program terminates. When return is true this method returns even when -q was specified.; When QuitOpt is true and return is false, terminate the application with an er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:25706,error,error,25706,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['error'],['error']
Availability,"e TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.cxx. ◆ GetCompressionAlgorithm(). Int_t TSocket::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 175 of file TSocket.h. ◆ GetCompressionLevel(). Int_t TSocket::GetCompressionLevel ; (; ); const. inline . Definition at line 181 of file TSocket.h. ◆ GetCompressionSettings(). Int_t TSocket::GetCompressionSettings ; (; ); const. inline . Definition at line 187 of file TSocket.h. ◆ GetDescriptor(). virtual Int_t TSocket::GetDescriptor ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 112 of file TSocket.h. ◆ GetErrorCode(). Int_t TSocket::GetErrorCode ; (; ); const. Returns error code. ; Meaning depends on context where it is called. If no error condition returns 0 else a value < 0. For example see TServerSocket ctor. ; Definition at line 1035 of file TSocket.cxx. ◆ GetInetAddress(). TInetAddress TSocket::GetInetAddress ; (; ); const. inline . Definition at line 113 of file TSocket.h. ◆ GetLastUsage(). TTimeStamp TSocket::GetLastUsage ; (; ). inline . Definition at line 129 of file TSocket.h. ◆ GetLocalInetAddress(). TInetAddress TSocket::GetLocalInetAddress ; (; ). virtual . Return internet address of local host to which the socket is bound. ; In case of error TInetAddress::IsValid() returns kFALSE. ; Reimplemented in TPSocket, and TServerSocket.; Definition at line 409 of file TSocket.cxx. ◆ GetLocalPort(). Int_t TSocket::GetLocalPort ; (; ). virtual . Return the local port # to which the socket is bound. ; In case of error return -1. ; Reimplemented in TServerSocket.; Definition at line 423 of file TSocket.cxx. ◆ GetOption() [1/2]. Option_t * TSocket::GetOption ; (; ); const. inlineoverrideprivatevirtual . Reimplemented from TObject.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:27551,error,error,27551,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['error'],['error']
Availability,"e TSocket.h. ◆ IsValid(). virtual Bool_t TSocket::IsValid ; (; ); const. inlinevirtual . Reimplemented in TPSocket.; Definition at line 132 of file TSocket.h. ◆ MarkBrokenConnection(). void TSocket::MarkBrokenConnection ; (; ). protected . Close the socket and mark as due to a broken connection. ; Definition at line 371 of file TSocket.cxx. ◆ NetError(). void TSocket::NetError ; (; const char * ; where, . Int_t ; error . ). static . Print error string depending on error code. ; Definition at line 1477 of file TSocket.cxx. ◆ operator=(). TSocket & TSocket::operator= ; (; const TSocket & ; ). privatedelete . ◆ Reconnect(). virtual Int_t TSocket::Reconnect ; (; ). inlinevirtual . Definition at line 138 of file TSocket.h. ◆ Recv() [1/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max . ). virtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 728 of file TSocket.cxx. ◆ Recv() [2/4]. Int_t TSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). virtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 756 of file TSocket.cxx. ◆ Recv() [3/4]. Int_t TSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). virtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:31341,error,error,31341,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['error'],['error']
Availability,"e TTabCom.cxx. ◆ Hook(). Int_t TTabCom::Hook ; (; char * ; buf, . int * ; pLoc, . std::ostream & ; out . ). [private] ; Definition at line 1567 of file TTabCom.cxx. ◆ InitPatterns(). void TTabCom::InitPatterns ; (; ). private . [private] ; Definition at line 2139 of file TTabCom.cxx. ◆ IsA(). virtual TClass * TTabCom::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 226 of file TTabCom.h. ◆ IsDirectory(). Bool_t TTabCom::IsDirectory ; (; const char ; fileName[]). static . [static utility function]///////////////////////////// ; calls TSystem::GetPathInfo() to see if ""fileName"" is a system directory. ; Definition at line 1029 of file TTabCom.cxx. ◆ MakeClassFromClassName(). TClass * TTabCom::MakeClassFromClassName ; (; const char ; className[]); const. private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a class. ; user must delete. returns 0 in case of error. ; Definition at line 2206 of file TTabCom.cxx. ◆ MakeClassFromVarName(). TClass * TTabCom::MakeClassFromVarName ; (; const char ; varName[], . EContext_t & ; context, . int ; iter = 0 . ). private . [private] (does some specific error handling that makes the function unsuitable for general use.) returns a new'd TClass given the name of a variable. ; user must delete. returns 0 in case of error. if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf. context sensitive behavior. ; Definition at line 2255 of file TTabCom.cxx. ◆ NewListOfFilesInPath(). TSeqCollection * TTabCom::NewListOfFilesInPath ; (; const char ; path1[]). static . [static utility function]///////////////////////////// ; creates a list containing the full path name for each file in the (colon separated) string ""path1""; memory is allocated with ""new"", so whoever calls this function takes responsibility for deleting it. ; Definition at line 1049 of file TTabCom.cxx. ◆ NoMsg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:15481,error,error,15481,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['error'],['error']
Availability,"e Tolerance() const; absolute tolerance. { return fTol; }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fPrec; }. int Strategy() const; strategy. { return fStrategy; }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fUp; }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fDebug = level; }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fMaxCalls = maxfcn; }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fMaxIter = maxiter; }. void SetTolerance(double tol); set the tolerance. { fTol = tol; }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fPrec = prec; }. void SetStrategy(int strategyLevel); set the strategy. { fStrategy = strategyLevel; }. void SetErrorDef(double up); set scale for calculating the errors. { fUp = up; }. void SetValidError(bool on); flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit). { fValidError = on; }. » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: Minimizer.h 31604 2009-12-07 19:04:33Z moneta $ » Last generated: 2009-12-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Minimizer.html:10206,toler,tolerance,10206,root/html526/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Minimizer.html,3,"['error', 'toler']","['error', 'errors', 'tolerance']"
Availability,"e Warning: This function copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Reimplemented from RooAbsRealLValue.; Definition at line 1193 of file RooRealVar.cxx. ◆ copyCacheFast(). void RooRealVar::copyCacheFast ; (; const RooRealVar & ; other, . bool ; setValDirty = true . ). inline . Definition at line 131 of file RooRealVar.h. ◆ DeclFileName(). static const char * RooRealVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file RooRealVar.h. ◆ defaultPrintContents(). Int_t RooRealVar::defaultPrintContents ; (; Option_t * ; opt); const. overridevirtual . Mapping of Print() option string to RooPrintable contents specifications. ; Reimplemented from RooAbsArg.; Definition at line 820 of file RooRealVar.cxx. ◆ deleteSharedProperties(). void RooRealVar::deleteSharedProperties ; (; ). Stop sharing properties. ; Definition at line 1318 of file RooRealVar.cxx. ◆ errorVar(). RooErrorVar * RooRealVar::errorVar ; (; ); const. Return a RooAbsRealLValue representing the error associated with this variable. ; The callers takes ownership of the return object ; Definition at line 278 of file RooRealVar.cxx. ◆ evaluate(). double RooRealVar::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 145 of file RooRealVar.h. ◆ fillTreeBranch(). void RooRealVar::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Overload RooAbsReal::fillTreeBranch to also fill tree branches with (asymmetric) errors if requested. ; Reimplemented from RooAbsReal.; Definition at line 1155 of file RooRealVar.cxx. ◆ format() [1/2]. TString * RooRealVar::format ; (; const RooCmdArg & ; formatArg); const. Format contents of RooRealVar for pretty printing on RooPlot parameter boxes. ; This function processes the named arguments taken by paramOn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:78034,error,errorVar,78034,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['error'],['errorVar']
Availability,"e Window win. ; Reimplemented from TVirtualX.; Definition at line 7811 of file TGWin32.cxx. ◆ SetDoubleBuffer(). void TGWin32::SetDoubleBuffer ; (; Int_t ; wid, . Int_t ; mode . ). overridevirtual . Set the double buffer on/off on window wid. ; wid : GdkWindow identifier. 999 means all the opened windows. mode : 1 double buffer is on 0 double buffer is off ; Reimplemented from TVirtualX.; Definition at line 3027 of file TGWin32.cxx. ◆ SetDoubleBufferOFF(). void TGWin32::SetDoubleBufferOFF ; (; ). overridevirtual . Turn double buffer mode off. ; Reimplemented from TVirtualX.; Definition at line 3063 of file TGWin32.cxx. ◆ SetDoubleBufferON(). void TGWin32::SetDoubleBufferON ; (; ). overridevirtual . Turn double buffer mode on. ; Reimplemented from TVirtualX.; Definition at line 3073 of file TGWin32.cxx. ◆ SetDrawMode(). void TGWin32::SetDrawMode ; (; EDrawMode ; mode). overridevirtual . Set the drawing mode. ; mode : drawing mode mode=1 copy mode=2 xor mode=3 invert mode=4 set the suitable mode for cursor echo according to the vendor ; Reimplemented from TVirtualX.; Definition at line 3102 of file TGWin32.cxx. ◆ SetFillColor(). void TGWin32::SetFillColor ; (; Color_t ; cindex). overridevirtual . Set color index for fill areas. ; Reimplemented from TAttFill.; Definition at line 3132 of file TGWin32.cxx. ◆ SetFillStyle(). void TGWin32::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set fill area style. ; fstyle : compound fill area interior style fstyle = 1000*interiorstyle + styleindex ; Reimplemented from TAttFill.; Definition at line 3166 of file TGWin32.cxx. ◆ SetForeground(). void TGWin32::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Set foreground color in graphics context (shortcut for ChangeGC with only foreground mask set). ; Reimplemented from TVirtualX.; Definition at line 7072 of file TGWin32.cxx. ◆ SetIconName(). void TGWin32::SetIconName ; (; Window_t ; id, . char * ; name . ). overridevirtual . Set window icon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:106859,echo,echo,106859,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['echo'],['echo']
Availability,"e a file. Returns 0 when successful, -1 in case of failure. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: id, bsize, bfree, blocks.; Id is file system type (machine dependend, see statfs()); Bsize is block size of file system; Blocks is total number of blocks in file system; Bfree is number of free blocks in file system; The function returns 0 in case of success and 1 if the file system could; not be stat'ed. int Link(const char* from, const char* to); Create a link from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Symlink(const char* from, const char* to); Create a symlink from file1 to file2. Returns 0 when succesfull,; -1 in case of failure. int Unlink(const char* name); Unlink, i.e. remove, a file or directory. Returns 0 when succesfull,; -1 in case of failure. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. int Chmod(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:26339,failure,failure,26339,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,3,['failure'],['failure']
Availability,"e a file. Returns 0 when successful, -1 in case of failure. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. int GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: id, bsize, bfree, blocks.; Id is file system type (machine dependend, see statfs()); Bsize is block size of file system; Blocks is total number of blocks in file system; Bfree is number of free blocks in file system; The function returns 0 in case of success and 1 if the file system could; not be stat'ed. int Link(const char* from, const char* to); Create a link from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Symlink(const char* from, const char* to); Create a symlink from file1 to file2. Returns 0 when successful,; -1 in case of failure. int Unlink(const char* name); Unlink, i.e. remove, a file or directory. Returns 0 when successful,; -1 in case of failure. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. int Chmod(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:26679,failure,failure,26679,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,3,['failure'],['failure']
Availability,"e a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are define",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:59209,error,errors,59209,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,1,['error'],['errors']
Availability,"e a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionaly; compute Binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are defined",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:57527,error,errors,57527,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['error'],['errors']
Availability,"e a list view container. ;  ;  TGLVContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  ~TGLVContainer () override;  Delete list view container. ;  ; virtual void AddItem (TGLVEntry *item);  ; const char * GetHeader (Int_t idx) const;  ; TGListView * GetListView () const;  ; virtual TGDimension GetMaxItemSize () const;  Get size of largest item in container. ;  ; virtual Int_t GetMaxSubnameWidth (Int_t idx) const;  Get width of largest subname in container. ;  ; Bool_t GetMultipleSelection () const;  ; TGDimension GetPageDimension () const override;  Returns page dimension. ;  ; TList * GetSelectedEntries ();  Get list of selected items in container. ;  ; TList * GetSelectedItems ();  Get list of selected items in container. ;  ; EListViewMode GetViewMode () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle mouse button event in container. ;  ; TClass * IsA () const override;  ; void LineDown (Bool_t select=kFALSE) override;  Move one line down. ;  ; void LineLeft (Bool_t select=kFALSE) override;  Move current position one column left. ;  ; void LineRight (Bool_t select=kFALSE) override;  Move current position one column right. ;  ; void LineUp (Bool_t select=kFALSE) override;  Make current position first line in window by scrolling up. ;  ; virtual void RemoveItemWithData (void *userData);  Remove item with fUserData == userData from container. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a list view container as a C++ statement(s) on output stream out. ;  ; virtual void SelectEntry (TGLVEntry *item);  Select the TGLVEntry given as argument and de-select the previous one if the container is not in multi-selection mode. ;  ; virtual void SetColHeaders (const char *n1="""", const char *n2="""", const char *n3="""", const char *n4="""", const char *n5="""", const char *n6="""", const char *n7="""", const char *n8="""", const char *n9="""", const char *n10=""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFileContainer.html:3734,down,down,3734,doc/master/classTGFileContainer.html,https://root.cern,https://root.cern/doc/master/classTGFileContainer.html,2,['down'],['down']
Availability,"e a lock used to protect critical section; 7544/// of its code (non-thread safe parts).; 7545 ; 7546void TCling::SetAllocunlockfunc(void (* /* p */ )()) const; 7547{; 7548 // nothing to do for now.; 7549}; 7550 ; 7551////////////////////////////////////////////////////////////////////////////////; 7552/// Returns if class AutoLoading is currently enabled.; 7553 ; 7554bool TCling::IsClassAutoLoadingEnabled() const; 7555{; 7556 if (IsFromRootCling()); 7557 return false;; 7558 if (!fClingCallbacks); 7559 return false;; 7560 return fClingCallbacks->IsAutoLoadingEnabled();; 7561}; 7562 ; 7563////////////////////////////////////////////////////////////////////////////////; 7564/// Enable/Disable the AutoLoading of libraries.; 7565/// Returns the old value, i.e whether it was enabled or not.; 7566 ; 7567int TCling::SetClassAutoLoading(int autoload) const; 7568{; 7569 // If no state change is required, exit early.; 7570 // FIXME: In future we probably want to complain if we made a request which; 7571 // was with the same state as before in order to catch programming errors.; 7572 if ((bool) autoload == IsClassAutoLoadingEnabled()); 7573 return autoload;; 7574 ; 7575 assert(fClingCallbacks && ""We must have callbacks!"");; 7576 bool oldVal = fClingCallbacks->IsAutoLoadingEnabled();; 7577 fClingCallbacks->SetAutoLoadingEnabled(autoload);; 7578 return oldVal;; 7579}; 7580 ; 7581////////////////////////////////////////////////////////////////////////////////; 7582/// Enable/Disable the Autoparsing of headers.; 7583/// Returns the old value, i.e whether it was enabled or not.; 7584 ; 7585int TCling::SetClassAutoparsing(int autoparse); 7586{; 7587 bool oldVal = fHeaderParsingOnDemand;; 7588 fHeaderParsingOnDemand = autoparse;; 7589 return oldVal;; 7590}; 7591 ; 7592////////////////////////////////////////////////////////////////////////////////; 7593/// Suspend the Autoparsing of headers.; 7594/// Returns the old value, i.e whether it was suspended or not.; 7595 ; 7596Bool_t TCling:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:295442,error,errors,295442,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['error'],['errors']
Availability,"e a new root output file; 133 TString outfileName( ""TMVAReg.root"" );; 134 TFile* outputFile = TFile::Open( outfileName, ""RECREATE"" );; 135 ; 136 // Create the factory object. Later you can choose the methods; 137 // whose performance you'd like to investigate. The factory will; 138 // then run the performance analysis for you.; 139 //; 140 // The first argument is the base of the name of all the; 141 // weightfiles in the directory weight/; 142 //; 143 // The second argument is the output file for the training results; 144 // All TMVA output can be suppressed by removing the ""!"" (not) in; 145 // front of the ""Silent"" argument in the option string; 146 TMVA::Factory *factory = new TMVA::Factory( ""TMVARegression"", outputFile,; 147 ""!V:!Silent:Color:DrawProgressBar:AnalysisType=Regression"" );; 148 ; 149 ; 150 TMVA::DataLoader *dataloader=new TMVA::DataLoader(""datasetreg"");; 151 // If you wish to modify default settings; 152 // (please check ""src/Config.h"" to see all available global options); 153 //; 154 // (TMVA::gConfig().GetVariablePlotting()).fTimesRMS = 8.0;; 155 // (TMVA::gConfig().GetIONames()).fWeightFileDir = ""myWeightDirectory"";; 156 ; 157 // Define the input variables that shall be used for the MVA training; 158 // note that you may also use variable expressions, such as: ""3*var1/var2*abs(var3)""; 159 // [all types of expressions that can also be parsed by TTree::Draw( ""expression"" )]; 160 dataloader->AddVariable( ""var1"", ""Variable 1"", ""units"", 'F' );; 161 dataloader->AddVariable( ""var2"", ""Variable 2"", ""units"", 'F' );; 162 ; 163 // You can add so-called ""Spectator variables"", which are not used in the MVA training,; 164 // but will appear in the final ""TestTree"" produced by TMVA. This TestTree will contain the; 165 // input variables, the response values of all trained MVAs, and the spectator variables; 166 dataloader->AddSpectator( ""spec1:=var1*2"", ""Spectator 1"", ""units"", 'F' );; 167 dataloader->AddSpectator( ""spec2:=var1*3"", ""Spectator 2"", ""units"", 'F' );; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C_source.html:5220,avail,available,5220,doc/master/TMVARegression_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C_source.html,1,['avail'],['available']
Availability,"e a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 21503 2007-12-19 17:34:54Z moneta $ » Last generated: 2010-09-23 19:55; This page has been automatically gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__Chebyshev.html:2910,error,error,2910,root/html528/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"e a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 38026 2011-02-10 11:46:12Z rdm $ » Last generated: 2011-07-04 15:19; This page has been automatically generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__Chebyshev.html:2912,error,error,2912,root/html530/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"e a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~Chebyshev(); destructor. Chebyshev(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. Chebyshev(const ROOT::Math::Chebyshev& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. Chebyshev * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. Chebyshev * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id: Chebyshev.h 38026 2011-02-10 11:46:12Z rdm $ » Last generated: 2011-11-03 20:04; This page has been automatically generate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Chebyshev.html:2912,error,error,2912,root/html532/ROOT__Math__Chebyshev.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Chebyshev.html,1,['error'],['error']
Availability,"e able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: IntervalCalculator.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__IntervalCalculator.html:2420,error,error,2420,root/html528/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__IntervalCalculator.html,2,['error'],['error']
Availability,"e able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: IntervalCalculator.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__IntervalCalculator.html:2422,error,error,2422,root/html530/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__IntervalCalculator.html,2,['error'],['error']
Availability,"e able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector& insp); virtual Double_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: IntervalCalculator.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__IntervalCalculator.html:2422,error,error,2422,root/html532/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__IntervalCalculator.html,2,['error'],['error']
Availability,"e all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:61495,error,error,61495,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['error'],['error']
Availability,"e all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = 2, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = 2); Build specified package on the client. Executes the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:70747,error,error,70747,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['error'],['error']
Availability,"e all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = kCheckROOT); Build specified package on the client. Executes the PR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:72905,error,error,72905,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['error'],['error']
Availability,"e all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = kCheckROOT); Build specified package on the cli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:73578,error,error,73578,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['error'],['error']
Availability,"e all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:60953,error,error,60953,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['error'],['error']
Availability,"e along an axis, use TAxis::SetRange, eg; h3.GetYaxis()->SetRange(23,56);. TProfile2D * DoProjectProfile2D(const char* name, const char* title, const TAxis* projX, const TAxis* projY, bool originalRange, bool useUF, bool useOF) const; internal method to project to a 2D Profile; called from TH3::Project3DProfile but re-implemented in case of the TPRofile3D since what is done is different. void PutStats(Double_t* stats); Replace current statistics with the values in array stats. void Reset(Option_t* option = """"); -*-*Reset contents of a Profile3D histogram; *-* =======================================. void ExtendAxis(Double_t x, TAxis* axis); Profile histogram is resized along axis such that x is in the axis range.; The new axis limits are recomputed by doubling iteratively; the current axis range until the specified value x is within the limits.; The algorithm makes a copy of the histogram, then loops on all bins; of the old histogram to fill the rebinned histogram.; Takes into account errors (Sumw2) if any.; The axis must be rebinnable before invoking this function.; Ex: h->GetXaxis()->SetCanExtend(kTRUE). void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Scale(Double_t c1 = 1, Option_t* option = """"); *-*-*-*-*Multiply this profile2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile3D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax, Int_t nbinsz, Double_t zmin, Double_t zmax); -*-*-*-*-*-*-*Redefine x, y and z axis parameters*-*-*-*-*-*-*-*-*-*-*-*; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins, Int_t nz, const Double_t* zBins); -*-*-*-*-*-*-*Redefine x, y and z axis p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile3D.html:44635,error,errors,44635,root/html602/TProfile3D.html,https://root.cern,https://root.cern/root/html602/TProfile3D.html,2,['error'],['errors']
Availability,"e an HybridCalculator type) and a RooRealVar for the variable. ~HypoTestInverterOriginal(); destructor. void CreateResults(); create a new HypoTestInverterResult to hold all computed results. bool RunAutoScan(double xMin, double xMax, double target, double epsilon = 0.005, unsigned int numAlgorithm = 0); Search for the value of the parameter of interest (vary the; hypothesis being tested) in the specified range [xMin,xMax]; until the confidence level is compatible with the target value; within one time the estimated error (and the estimated error; should also become smaller than the specified parameter epsilon). bool RunFixedScan(int nBins, double xMin, double xMax); Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX); run only one point. HypoTestInverterOriginal(); default constructor (used only for I/O). HypoTestInverterResult* GetInterval() const; { return fResults; }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetData(RooAbsData& ); { }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterOriginal.html:9360,error,error,9360,root/html534/RooStats__HypoTestInverterOriginal.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterOriginal.html,2,['error'],['error']
Availability,"e an arithmetic progression of sizes into which; the window to be resized (minimum to maximum). void SetWMState(Window_t id, EInitialState state); Sets the initial state of the window ""id"": either kNormalState; or kIconicState. void SetWMTransientHint(Window_t id, Window_t main_id); Tells window manager that the window ""id"" is a transient window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return lenght of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:52184,mask,mask,52184,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['mask'],['mask']
Availability,"e an arithmetic progression of sizes into which; the window to be resized (minimum to maximum). void SetWMState(Window_t id, EInitialState state); Sets the initial state of the window ""id"": either kNormalState; or kIconicState. void SetWMTransientHint(Window_t id, Window_t main_id); Tells window manager that the window ""id"" is a transient window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return length of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualX.html:55838,mask,mask,55838,root/html602/TVirtualX.html,https://root.cern,https://root.cern/root/html602/TVirtualX.html,2,['mask'],['mask']
Availability,"e an arithmetic progression of sizes into which; the window to be resized (minimum to maximum). void SetWMState(Window_t id, EInitialState state); Sets the initial state of the window ""id"": either kNormalState; or kIconicState. void SetWMTransientHint(Window_t id, Window_t main_id); Tells window manager that the window ""id"" is a transient window; of the window ""main_id"". A window manager may decide not to decorate; a transient window or may treat it differently in other ways. void DrawString(Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char* s, Int_t len); Each character image, as defined by the font in the GC, is treated as an; additional mask for a fill operation on the drawable. id - the drawable; gc - the GC; x, y - coordinates, which are relative to the origin of the specified; drawable and define the origin of the first character; s - the character string; len - the number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font,; subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). Int_t TextWidth(FontStruct_t font, const char* s, Int_t len); Return length of the string ""s"" in pixels. Size depends on font. void GetFontProperties(FontStruct_t font, Int_t& max_ascent, Int_t& max_descent); Returns the font properties. void GetGCValues(GContext_t gc, GCValues_t& gval); Returns the components specified by the mask in ""gval"" for the; specified GC ""gc"" (see also the GCValues_t structure). FontStruct_t GetGCFont(GContext_t gc); Return the font associated with the graphics context gc. FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed whe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:55225,mask,mask,55225,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,4,['mask'],['mask']
Availability,"e assigned a x value at the center of each histogram bin. The y values are \(\text{eff} = \frac{\text{pass}}{\text{total}}\) for all options except for the bayesian methods where the result depends on the chosen option.; If the denominator becomes 0 or pass > total, the corresponding bin is skipped. 2) calculating ratios of two Poisson means (option 'pois'):; The two histograms are interpreted as independent Poisson processes and the ratio ; \[; \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; \]. with \(\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\). The histogram 'pass' is interpreted as \(n_{1}\) and the total histogram is used for \(n_{2}\).; The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties of efficiency by a parameter transformation: ; \[; \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; \]. The x errors span each histogram bin (lowedge ... lowedge+width) The y errors depend on the chosen statistic methode which can be determined by the options given below. For a detailed description of the used statistic calculations please have a look at the corresponding functions!; Options:; v : verbose mode: prints information about the number of used bins and calculated efficiencies with their errors; cl=x : determine the used confidence level (0<x<1) (default is 0.683); cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); w : Wilson interval (see TEfficiency::Wilson); n : normal approximation propagation (see TEfficiency::Normal); ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0 (see TEfficiency::Bayesian); mode : use mode of posterior for Bayesian interval (default is mean); shortest: use shortest interval (done by default if mode is set); central: use centra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors.html:45210,error,errors,45210,doc/master/classTGraphAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html,1,['error'],['errors']
Availability,"e associated to the baskets of the branch,; then call Reset(). If the option contains ""all"", delete also the baskets; for the subbranches.; The branch is reset.; NOTE that this function must be used with extreme care. Deleting branch baskets; fragments the file and may introduce inefficiencies when adding new entries; in the Tree or later on when reading the Tree. void DropBaskets(Option_t* option = """"); Loop on all branch baskets. Drop all baskets from memory except readbasket.; If the option contains ""all"", drop all baskets including; read- and write-baskets (unless they are not stored individually on disk).; The option ""all"" also lead to DropBaskets being called on the sub-branches. void ExpandBasketArrays(); Increase BasketEntry buffer of a minimum of 10 locations; and a maximum of 50 per cent of current size. Int_t Fill(); Loop on all leaves of this branch to fill Basket buffer. The function returns the number of bytes committed to the memory basket.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because e.g. the branch is disabled,; the number of bytes returned is 0. Int_t FillEntryBuffer(TBasket* basket, TBuffer* buf, Int_t& lnew); Copy the data from fEntryBuffer into the current basket. TBranch* FindBranch(const char* name); -- Find the immediate sub-branch with passed name. TLeaf* FindLeaf(const char* name); -- Find the leaf corresponding to the name 'searchname'. Int_t FlushBaskets(); Flush to disk all the baskets of this branch and any of subbranches.; Return the number of bytes written or -1 in case of write error. Int_t FlushOneBasket(UInt_t which); If we have a write basket in memory and it contains some entries and; has not yet been written to disk, we write it and delete it from memory.; Return the number of bytes written;. TBasket* GetBasket(Int_t basket); Return pointer to basket basketnumber in this Branch. Long64_t GetBasketSeek(Int_t basket) const; Return address of basket in the file. TList* GetBrowsables",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBranch.html:17161,error,error,17161,root/html532/TBranch.html,https://root.cern,https://root.cern/root/html532/TBranch.html,4,['error'],['error']
Availability,"e associated to the baskets of the branch,; then call Reset(). If the option contains ""all"", delete also the baskets; for the subbranches.; The branch is reset.; NOTE that this function must be used with extreme care. Deleting branch baskets; fragments the file and may introduce inefficiencies when adding new entries; in the Tree or later on when reading the Tree. void DropBaskets(Option_t* option = """"); Loop on all branch baskets. Drop all baskets from memory except readbasket.; If the option contains ""all"", drop all baskets including; read- and write-baskets (unless they are not stored individually on disk).; The option ""all"" also lead to DropBaskets being called on the sub-branches. void ExpandBasketArrays(); Increase BasketEntry buffer of a minimum of 10 locations; and a maximum of 50 per cent of current size. Int_t Fill(); Loop on all leaves of this branch to fill Basket buffer. The function returns the number of bytes committed to the memory basket.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because e.g. the branch is disabled,; the number of bytes returned is 0. void FillLeaves(TBuffer& b); Fill each of the leaf of the branch. TBranch* FindBranch(const char* name); -- Find the immediate sub-branch with passed name. TLeaf* FindLeaf(const char* name); -- Find the leaf corresponding to the name 'searchname'. Int_t FlushBaskets(); Flush to disk all the baskets of this branch and any of subbranches.; Return the number of bytes written or -1 in case of write error. Int_t FlushOneBasket(UInt_t which); If we have a write basket in memory and it contains some entries and; has not yet been written to disk, we write it and delete it from memory.; Return the number of bytes written;. TBasket* GetBasket(Int_t basket); Return pointer to basket basketnumber in this Branch*-; *-* ====================================================. Long64_t GetBasketSeek(Int_t basket) const; Return address of basket in the file*-; *-* ============",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:17529,error,error,17529,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,2,['error'],['error']
Availability,"e authors be held liable for any damages; 85 arising from the use of this software.; 86 ; 87 Permission is granted to anyone to use this software for any purpose,; 88 including commercial applications, and to alter it and redistribute it; 89 freely, subject to the following restrictions:; 90 ; 91 1. The origin of this software must not be misrepresented; you must not; 92 claim that you wrote the original software. If you use this software; 93 in a product, an acknowledgment in the product documentation would be; 94 appreciated but is not required.; 95 2. Altered source versions must be plainly marked as such, and must not be; 96 misrepresented as being the original software.; 97 3. This notice may not be removed or altered from any source distribution.; 98 ; 99 L. Peter Deutsch; 100 ghost@aladdin.com; 101 ; 102 */; 103/* $Id: md5.c,v 1.6 2002/04/13 19:20:28 lpd Exp $ */; 104/*; 105 Independent implementation of MD5 (RFC 1321).; 106 ; 107 This code implements the MD5 Algorithm defined in RFC 1321, whose; 108 text is available at; 109 http://www.ietf.org/rfc/rfc1321.txt; 110 The code is derived from the text of the RFC, including the test suite; 111 (section A.5) but excluding the rest of Appendix A. It does not include; 112 any code or documentation that is identified in the RFC as being; 113 copyrighted.; 114 ; 115 The original and principal author of md5.c is L. Peter Deutsch; 116 <ghost@aladdin.com>. Other authors are noted in the change history; 117 that follows (in reverse chronological order):; 118 ; 119 2002-04-13 lpd Clarified derivation from RFC 1321; now handles byte order; 120 either statically or dynamically; added missing #include <string.h>; 121 in library.; 122 2002-03-11 lpd Corrected argument list for main(), and added int return; 123 type, in test program and T value program.; 124 2002-02-21 lpd Added missing #include <stdio.h> in test program.; 125 2000-07-03 lpd Patched to eliminate warnings about ""constant is; 126 unsigned in ANSI C, signed in tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md5_8inl_source.html:4334,avail,available,4334,doc/master/md5_8inl_source.html,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html,1,['avail'],['available']
Availability,"e base URI path if it does not contain any ""/"" characters). ; Definition at line 1180 of file TUri.cxx. ◆ Normalise(). void TUri::Normalise ; (; ). Syntax based normalisation according to RFC chapter 6.2.2. ; Definition at line 985 of file TUri.cxx. ◆ operator=(). TUri & TUri::operator= ; (; const TUri & ; rhs). TUri assignment operator. ; Definition at line 89 of file TUri.cxx. ◆ PctDecode(). TString const TUri::PctDecode ; (; const TString & ; source). static . Percent-decode the given string according to chapter 2.1 we assume a valid pct-encoded string. ; Definition at line 1086 of file TUri.cxx. ◆ PctDecodeUnreserved(). TString const TUri::PctDecodeUnreserved ; (; const TString & ; source). static . Percent-decode the given string according to chapter 2.1 we assume a valid pct-encoded string. ; Definition at line 1012 of file TUri.cxx. ◆ PctEncode(). const TString TUri::PctEncode ; (; const TString & ; source). static . Percent-encode and return the given string according to RFC 3986 in principle, this function cannot fail or produce an error. ; Definition at line 815 of file TUri.cxx. ◆ PctNormalise(). TString const TUri::PctNormalise ; (; const TString & ; source). static . Normalise the percent-encoded parts of the string i.e. ; uppercase the hexadecimal digits %[:alpha:][:alpha:] -> %[:ALPHA:][:ALPHA:] ; Definition at line 1057 of file TUri.cxx. ◆ Print(). void TUri::Print ; (; Option_t * ; option = """"); const. overridevirtual . Display function,. . option ""d"" .. debug output; anything else .. simply print URI. . Reimplemented from TObject.; Definition at line 528 of file TUri.cxx. ◆ RemoveDotSegments(). const TString TUri::RemoveDotSegments ; (; const TString & ; inp). static . This functions implements the ""remove_dot_segments"" routine of chapter 5.2.4 ""for interpreting and removing the special '. ; ' and '..' complete path segments from a referenced path"". ; Definition at line 159 of file TUri.cxx. ◆ Reset(). void TUri::Reset ; (; ). Initialize this URI o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUri.html:28376,error,error,28376,doc/master/classTUri.html,https://root.cern,https://root.cern/doc/master/classTUri.html,1,['error'],['error']
Availability,"e base if valid; 2096 if (base < 2 || base > 36) {; 2097 Error(""TString::Itoa"", ""base %d is not supported. Supported bases are {2,3,...,36}."",base) ;; 2098 return (TString(""!""));; 2099 }; 2100 buf.reserve(35); // Pre-allocate enough space (35=kMaxDigits); 2101 Int_t quotient = value;; 2102 // Translating number to string with base:; 2103 do {; 2104 buf += ""0123456789abcdefghijklmnopqrstuvwxyz""[ TMath::Abs(quotient % base) ];; 2105 quotient /= base;; 2106 } while (quotient);; 2107 // Append the negative sign; 2108 if (value < 0) buf += '-';; 2109 std::reverse(buf.begin(), buf.end());; 2110 return (TString(buf.data()));; 2111}; 2112 ; 2113////////////////////////////////////////////////////////////////////////////////; 2114/// Converts a UInt_t (twice the range of an Int_t) to a TString with respect; 2115/// to the base specified (2-36). Thus it is an enhanced version of sprintf; 2116/// (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; 2117/// In case of error returns the ""!"" string.; 2118 ; 2119TString TString::UItoa(UInt_t value, Int_t base); 2120{; 2121 std::string buf;; 2122 // check that the base if valid; 2123 if (base < 2 || base > 36) {; 2124 Error(""TString::UItoa"", ""base %d is not supported. Supported bases are {2,3,...,36}."",base);; 2125 return (TString(""!""));; 2126 }; 2127 buf.reserve(35); // Pre-allocate enough space (35=kMaxDigits); 2128 UInt_t quotient = value;; 2129 // Translating number to string with base:; 2130 do {; 2131 buf += ""0123456789abcdefghijklmnopqrstuvwxyz""[ quotient % base ];; 2132 quotient /= base;; 2133 } while (quotient);; 2134 std::reverse(buf.begin(), buf.end());; 2135 return (TString(buf.data()));; 2136}; 2137 ; 2138////////////////////////////////////////////////////////////////////////////////; 2139/// Converts a Long64_t to a TString with respect to the base specified (2-36).; 2140/// Thus it is an enhanced version of sprintf (adapted from versions 0.4 of; 2141/// http://www.jb.man.ac.uk/~slowe/cpp/ito",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:66615,error,error,66615,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['error'],['error']
Availability,"e between; THIS histogram and h2, using Kolmogorov test.; Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test; (much less than one means NOT compatible). The KS test uses the distance between the pseudo-CDF's obtained; from the histogram. Since in 2D the order for generating the pseudo-CDF is; arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; other from the y axis and the maximum distance is the average of the two maximum; distances obtained. Code adapted by Rene Brun from original HBOOK routine HDIFF. Long64_t Merge(TCollection* list); Add all histograms in the collection to this histogram.; This function computes the min/max for the axes,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. TH2 * RebinX(Int_t ngroup = 2, const char* newname = """"); Rebin only the X axis; see Rebin2D. TH2 * RebinY(Int_t ngroup = 2, const char* newname = """"); Rebin only the Y axis; see Rebin2D. TH2 * Rebin2D(Int_t nxgroup = 2, Int_t nygroup = 2, const char* newname = """"); -*-*-*Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together*-*-*-*-. if newname is not blank a new temporary histogram hnew is created.; else the current histogram is modified (default); The parameter nxgroup/nygro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2.html:40628,error,errors,40628,root/html528/TH2.html,https://root.cern,https://root.cern/root/html528/TH2.html,4,['error'],['errors']
Availability,"e between; THIS histogram and h2, using Kolmogorov test.; Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test; (much less than one means NOT compatible). The KS test uses the distance between the pseudo-CDF's obtained; from the histogram. Since in 2D the order for generating the pseudo-CDF is; arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the; other from the y axis and the maximum distance is the average of the two maximum; distances obtained. Code adapted by Rene Brun from original HBOOK routine HDIFF. Long64_t Merge(TCollection* list); Add all histograms in the collection to this histogram.; This function computes the min/max for the axes,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. TH2 * RebinX(Int_t ngroup = 2, const char* newname = """"); Rebin only the X axis; see Rebin2D. TH2 * RebinY(Int_t ngroup = 2, const char* newname = """"); Rebin only the Y axis; see Rebin2D. TH2 * Rebin2D(Int_t nxgroup = 2, Int_t nygroup = 2, const char* newname = """"); Rebin this histogram grouping nxgroup/nygroup bins along the xaxis/yaxis together. if newname is not blank a new temporary histogram hnew is created.; else the current histogram is modified (default); The parameter nxgroup/nygroup indicate ho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2.html:45098,error,errors,45098,root/html602/TH2.html,https://root.cern,https://root.cern/root/html602/TH2.html,2,['error'],['errors']
Availability,"e branches may have buffers holding many entries.; If fAutoSave is negative, AutoSave is automatically called by; TTree::Fill when the number of bytes generated since the previous; AutoSave is greater than -fAutoSave bytes.; If fAutoSave is positive, AutoSave is automatically called by; TTree::Fill every N entries.; This function may also be invoked by the user.; Each AutoSave generates a new key on the file.; Once the key with the tree header has been written, the previous cycle; (if any) is deleted. Note that calling TTree::AutoSave too frequently (or similarly calling; TTree::SetAutoSave with a small value) is an expensive operation.; You should make tests for your own application to find a compromise; between speed and the quantity of information you may loose in case of; a job crash. In case your program crashes before closing the file holding this tree,; the file will be automatically recovered when you will connect the file; in UPDATE mode.; The Tree will be recovered at the status corresponding to the last AutoSave. if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; This allows another process to analyze the Tree while the Tree is being filled. if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; the current basket are closed-out and written to disk individually. By default the previous header is deleted after having written the new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occurred while writing; the header to the file. How to write a Tree in one process and view it from another process. The following two scripts illustrate how to do this.; The script treew.C is executed by process1, treer.C by process2. ----- scri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:42135,recover,recovered,42135,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['recover'],['recovered']
Availability,"e bytes. When large Trees are produced, it is safe to activate the AutoSave; procedure. Some branches may have buffers holding many entries.; AutoSave is automatically called by TTree::Fill when the number of bytes; generated since the previous AutoSave is greater than fAutoSave bytes.; This function may also be invoked by the user, for example every; N entries.; Each AutoSave generates a new key on the file.; Once the key with the tree header has been written, the previous cycle; (if any) is deleted. Note that calling TTree::AutoSave too frequently (or similarly calling; TTree::SetAutoSave with a small value) is an expensive operation.; You should make tests for your own application to find a compromise; between speed and the quantity of information you may loose in case of; a job crash. In case your program crashes before closing the file holding this tree,; the file will be automatically recovered when you will connect the file; in UPDATE mode.; The Tree will be recovered at the status corresponding to the last AutoSave. if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; This allows another process to analyze the Tree while the Tree is being filled. if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; the current basket are closed-out and written to disk individually. By default the previous header is deleted after having written the new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occurred while writing; the header to the file. How to write a Tree in one process and view it from another process. The following two scripts illustrate how to do this.; The script treew.C is executed by process1, treer.C by process2. ----- scri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:40763,recover,recovered,40763,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['recover'],['recovered']
Availability,"e bytes. When large Trees are produced, it is safe to activate the AutoSave; procedure. Some branches may have buffers holding many entries.; AutoSave is automatically called by TTree::Fill when the number of bytes; generated since the previous AutoSave is greater than fAutoSave bytes.; This function may also be invoked by the user, for example every; N entries.; Each AutoSave generates a new key on the file.; Once the key with the tree header has been written, the previous cycle; (if any) is deleted. Note that calling TTree::AutoSave too frequently (or similarly calling; TTree::SetAutoSave with a small value) is an expensive operation.; You should make tests for your own application to find a compromize; between speed and the quantity of information you may loose in case of; a job crash. In case your program crashes before closing the file holding this tree,; the file will be automatically recovered when you will connect the file; in UPDATE mode.; The Tree will be recovered at the status corresponding to the last AutoSave. if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; This allows another process to analyze the Tree while the Tree is being filled. if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; the current basket are closed-out and written to disk individually. By default the previous header is deleted after having written the new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occured while writing; the header to the file. How to write a Tree in one process and view it from another process. The following two scripts illustrate how to do this.; The script treew.C is executed by process1, treer.C by process2. ----- scrip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:38618,recover,recovered,38618,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['recover'],['recovered']
Availability,"e cache have changed return type from void to Int_t, to be able to return a code to indicate if there was an error.; Usually TTree::SetCacheSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined functions are provided, as: crystalball for the Crystal-Ball function, cheb0,1,...10 for the Chebyshev polynomials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automaticall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:14808,avail,available,14808,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['avail'],['available']
Availability,"e cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooObjCacheManager _cacheMgr;  ; RooArgSet * _curNormSet = nullptr;  The cache manager. ;  ; TMatrixD * _M = nullptr;  ; TVectorD * _mref = nullptr;  ; RooListProxy _pdfList;  ; Setting _setting;  ; bool _useHorizMorph = true;  ; RooSetProxy _varList;  ; RooRealProxy m;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Compon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:70082,error,errors,70082,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,1,['error'],['errors']
Availability,"e calculation"");; 3575 Printf("" will be stopped."");; 3576 goto L99;; 3577 }; 3578//______________________________________________________________________________; 3579//; 3580// Command MIGRAD; 3581//; 3582 if( !strncmp(comd.Data(),""MIG"",3) ) {; 3583 Printf("" ***>MIGrad [maxcalls] [tolerance]"");; 3584 Printf("" Causes minimization of the function by the method of Migrad,"");; 3585 Printf("" the most efficient and complete single method, recommended"");; 3586 Printf("" for general functions (see also MINImize)."");; 3587 Printf("" The minimization produces as a by-product the error matrix"");; 3588 Printf("" of the parameters, which is usually reliable unless warning"");; 3589 Printf("" messages are produced."");; 3590 Printf("" The optional argument [maxcalls] specifies the (approximate)"");; 3591 Printf("" maximum number of function calls after which the calculation"");; 3592 Printf("" will be stopped even if it has not yet converged."");; 3593 Printf("" The optional argument [tolerance] specifies required tolerance"");; 3594 Printf("" on the function value at the minimum."");; 3595 Printf("" The default tolerance is 0.1, and the minimization will stop"");; 3596 Printf("" when the estimated vertical distance to the minimum (EDM) is"");; 3597 Printf("" less than 0.001*[tolerance]*UP (see [SET ERRordef])."");; 3598 goto L99;; 3599 }; 3600//______________________________________________________________________________; 3601//; 3602// Command MINIMIZE; 3603//; 3604 if( !strncmp(comd.Data(),""MINI"",4) ) {; 3605 Printf("" ***>MINImize [maxcalls] [tolerance]"");; 3606 Printf("" Causes minimization of the function by the method of Migrad,"");; 3607 Printf("" as does the MIGrad command, but switches to the SIMplex method"");; 3608 Printf("" if Migrad fails to converge. Arguments are as for MIGrad."");; 3609 Printf("" Note that command requires four characters to be unambiguous."");; 3610 goto L99;; 3611 }; 3612//______________________________________________________________________________; 3613//; 3614// Command",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:115660,toler,tolerance,115660,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['toler'],['tolerance']
Availability,"e call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. Opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TServerSocket.html:13650,error,error,13650,root/html528/TServerSocket.html,https://root.cern,https://root.cern/root/html528/TServerSocket.html,1,['error'],['error']
Availability,"e called on the top master only. Int_t RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. void HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:28629,error,error,28629,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,1,['error'],['error']
Availability,"e can also be used as a value for the estimated efficiency. This can be done by calling; 238SetBit(kPosteriorMode) or TEfficiency::SetPosteriorMode. In this case, the estimated efficiency is:; 239 ; 240\f[; 241 \hat{\varepsilon} = \frac{k + \alpha -1}{N + \alpha + \beta - 2}; 242\f]; 243 ; 244In the case of a uniform prior distribution, B(x,1,1), the posterior mode is k/n, equivalent to the frequentist; 245estimate (the maximum likelihood value).; 246 ; 247The statistic options also specify which confidence interval is used for calculating; 248the uncertainties of the efficiency. The following properties define the error; 249calculation:; 250- **fConfLevel:** desired confidence level: 0 < fConfLevel < 1 (TEfficiency::GetConfidenceLevel / TEfficiency::SetConfidenceLevel); 251- **fStatisticOption** defines which method is used to calculate the boundaries of the confidence interval (TEfficiency::SetStatisticOption); 252- **fBeta_alpha, fBeta_beta:** parameters for the prior distribution which is only used in the bayesian case (TEfficiency::GetBetaAlpha / TEfficiency::GetBetaBeta / TEfficiency::SetBetaAlpha / TEfficiency::SetBetaBeta); 253- **kIsBayesian:** flag whether bayesian statistics are used or not (TEfficiency::UsesBayesianStat); 254- **kShortestInterval:** flag whether shortest interval (instead of central one) are used in case of Bayesian statistics (TEfficiency::UsesShortestInterval). Normally shortest interval should be used in combination with the mode (see TEfficiency::UsesPosteriorMode); 255- **fWeight:** global weight for this TEfficiency object which is used during combining or merging with other TEfficiency objects(TEfficiency::GetWeight / TEfficiency::SetWeight); 256 ; 257In the following table, the implemented confidence intervals are listed; 258with their corresponding statistic option. For more details on the calculation,; 259please have a look at the mentioned functions.; 260 ; 261 ; 262| name | statistic option | function | kIsBayesian | paramete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:10939,error,error,10939,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['error'],['error']
Availability,"e can be an inconsistency if the expected p-values have been; obtained with different toys. In this case the merge is done but a warning message is printed. double GetXValue(int index) const; function to return the value of the parameter of interest for the i^th entry in the results. double GetYValue(int index) const; function to return the value of the confidence level for the i^th entry in the results. double GetYError(int index) const; function to return the estimated error on the value of the confidence level for the i^th entry in the results. double CLb(int index) const; function to return the observed CLb value for the i-th entry. double CLsplusb(int index) const; function to return the observed CLs+b value for the i-th entry. double CLs(int index) const; function to return the observed CLs value for the i-th entry. double CLbError(int index) const; function to return the error on the observed CLb value for the i-th entry. double CLsplusbError(int index) const; function to return the error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linea rinterpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:11190,error,error,11190,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"e capabilities of p.d.f.; RooDataSet*_genData! Data being generated; Bool_t_isValidIs context in valid state?; static Int_tRooPrintable::_nameLength; Int_t_nextProtoIndexNext prototype event to load according to LUT; Int_t*_protoOrderLUT with traversal order of prototype data; RooArgSet_protoVarsPrototype observables; const RooDataSet*_prototypePointer to prototype dataset; RooArgSet*_theEventPointer to observable event being generated; Bool_t_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsGenContext(); Destructor. void attach(const RooArgSet& params); Interface to attach given parameters to object in this context. RooDataSet * generate(Int_t nEvents = 0); Generate the specified number of events with nEvents>0 and; and return a dataset containing the generated events. With nEvents<=0,; generate the number of events in the prototype dataset, if available,; or else the expected number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the loo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsGenContext.html:8407,avail,available,8407,root/html526/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html526/RooAbsGenContext.html,1,['avail'],['available']
Availability,"e changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(). RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:37125,error,errors,37125,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['error'],"['error', 'errors']"
Availability,"e checked; TGeoNode*fSelectedNode! Selected node for overlap checking; TStopwatch*fTimer! Timer; Double_t*fVal1! Array of number of crossings per volume.; Double_t*fVal2! Array of timing per volume.; TGeoVolume*fVsafevolume to which a safety sphere node was added. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoChecker(); Default constructor. TGeoChecker(TGeoManager* geom); Constructor for a given geometry. ~TGeoChecker(); Destructor. void OpProgress(const char* opname, Long64_t current, Long64_t size, TStopwatch* watch = 0, Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char* msg = """"); Print current operation progress. void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.); Check pushes and pulls needed to cross the next boundary with respect to the; position given by FindNextBoundary. If radius is not mentioned the full bounding; box will be sampled. void CheckBoundaryReference(Int_t icheck = -1); Check the boundary errors reference file created by CheckBoundaryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = NULL); Geometry checking. Opional overlap checkings (by sampling and by mesh). Optional; boundary crossing check + timing per volume. STAGE 1: extensive overlap checking by sampling per volume. Stdout need to be; checked by user to get report, then TGeoVolume::CheckOverlaps(0.01, ""s"") can; be called for the suspicious volumes.; STAGE2 : normal overlap checking using the shapes mesh - fills the list of; overlaps.; STAGE3 : shooting NRAYS rays from VERTEX and counting the total number of; crossings per volume (rays propagated from boundary to boundary until; geometry exit). Timing computed and results stored in a histo.; STAGE4 : shooting 1 mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoChecker.html:11175,error,errors,11175,root/html534/TGeoChecker.html,https://root.cern,https://root.cern/root/html534/TGeoChecker.html,1,['error'],['errors']
Availability,"e checked; TGeoNode*fSelectedNode! Selected node for overlap checking; TStopwatch*fTimer! Timer; Double_t*fVal1! Array of number of crossings per volume.; Double_t*fVal2! Array of timing per volume.; TGeoVolume*fVsafevolume to which a safety sphere node was added. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoChecker(); Default constructor. TGeoChecker(TGeoManager* geom); Constructor for a given geometry. ~TGeoChecker(); Destructor. void OpProgress(const char* opname, Long64_t current, Long64_t size, TStopwatch* watch = 0, Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char* msg = """"); Print current operation progress. void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.); Check pushes and pulls needed to cross the next boundary with respect to the; position given by FindNextBoundary. If radius is not mentioned the full bounding; box will be sampled. void CheckBoundaryReference(Int_t icheck = -1); Check the boundary errors reference file created by CheckBoundaryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = __null); Geometry checking. Opional overlap checkings (by sampling and by mesh). Optional; boundary crossing check + timing per volume. STAGE 1: extensive overlap checking by sampling per volume. Stdout need to be; checked by user to get report, then TGeoVolume::CheckOverlaps(0.01, ""s"") can; be called for the suspicious volumes.; STAGE2 : normal overlap checking using the shapes mesh - fills the list of; overlaps.; STAGE3 : shooting NRAYS rays from VERTEX and counting the total number of; crossings per volume (rays propagated from boundary to boundary until; geometry exit). Timing computed and results stored in a histo.; STAGE4 : shooting 1 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoChecker.html:11670,error,errors,11670,root/html602/TGeoChecker.html,https://root.cern,https://root.cern/root/html602/TGeoChecker.html,2,['error'],['errors']
Availability,"e chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin vol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:39874,error,error,39874,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,6,['error'],['error']
Availability,"e class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Option_t* option = """"); -*Constructor for Profile histograms with variable bin size; *-* =========================================================. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Option_t* option = """"); -*Constructor for Profile histograms with variable bin size; *-* =========================================================. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Double_t ylow, Double_t yup, Option_t* option = """"); -*Constructor for Profile histograms with variable bin size; *-* =========================================================. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup, Option_t* option = """"); Constructor for Profile histograms with range in y; *-* ==================================================; The first five parameters are similar to TH1D::TH1D.; Only the values of Y between ylow and yup will be considered at filling time.; ylow and yup will also be the maximum and minimum values; on the y scale when drawing the profile. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. void BuildOptions(Double_t ymin, Double_t ymax, Option_t* option); Set Profile histogram structure and options*-*-; *-* ===========================================. If a bin has N data points all with the same value Y (especially; possible when dealing with integers), the spread in Y for that bin; is zero, and the unc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile.html:27243,error,errors,27243,root/html528/TProfile.html,https://root.cern,https://root.cern/root/html528/TProfile.html,3,['error'],['errors']
Availability,"e class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Option_t* option = """"); -*Constructor for Profile histograms with variable bin size; *-* =========================================================. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Option_t* option = """"); -*Constructor for Profile histograms with variable bin size; *-* =========================================================. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Double_t ylow, Double_t yup, Option_t* option = """"); -*Constructor for Profile histograms with variable bin size; *-* =========================================================. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. TProfile(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup, Option_t* option = """"); Constructor for Profile histograms with range in y; *-* ==================================================; The first five parameters are similar to TH1D::TH1D.; Only the values of Y between ylow and yup will be considered at filling time.; ylow and yup will also be the maximum and minimum values; on the y scale when drawing the profile. See TProfile::BuildOptions for more explanations on errors. see also comments in the TH1 base class constructors. void BuildOptions(Double_t ymin, Double_t ymax, Option_t* option); Set Profile histogram structure and options*-*-; *-* ===========================================; ymin: minimum value allowed for y; ymax: maximum value allowed for y; if (ymin = ymax = 0) there are no limits on the allowed y values (ymin = -inf, ymax ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:29606,error,errors,29606,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,3,['error'],['errors']
Availability,"e commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ();  Calculates the full second-derivative matrix of FCN. ;  ; virtual void mnimpr ();  Attempts to improve on a good local minimum. ;  ; virtual void mninex (Double_t *pint);  Transforms from internal coordinates (PINT) to external (U) ;  ; virtual void mninit (Int_t i1, Int_t i2, Int_t i3);  Main initialization member function for MINUIT. ;  ; virtual void mnlims ();  Interprets the SET LIM command, to reset the parameter limits. ;  ; virtual void mnline (Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler);  Perform a line search from position START. ;  ; virtual void mnmatu (Int_t kode);  Prints the covariance matrix v when KODE=1. ;  ; virtual void mnmigr ();  Performs a local function minimization. ;  ; virtual void mnmnos ();  Performs a MINOS error analysis. ;  ; virtual void mnmnot (Int_t ilax, Int_t ilax2, Double_t &val2pl, Double_t &val2mi);  Performs a MINOS error analysis on one parameter. ;  ; virtual void mnparm (Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t &ierflg);  Implements one parameter definition. ;  ; virtual void mnpars (TString &crdbuf, Int_t &icondn);  Implements one parameter definition. ;  ; virtual void mnpfit (Double_t *parx2p, Double_t *pary2p, Int_t npar2p, Double_t *coef2p, Double_t &sdev2p);  To fit a parabola to npar2p points. ;  ; virtual void mnpint (Double_t &pexti, Int_t i, Double_t &pinti);  Calculates the internal parameter value PINTI. ;  ; virtual void mnplot (Double_t *xpt, Double_t *ypt, char *chpt, Int_t nxypt, Int_t npagwd, Int_t npagln);  Plots points in array xypt onto one page with labelled axes. ;  ; virtual void mnpout (Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) const;  Provides the user with information concerning the current status. ;  ; virtual void mnprin (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:20306,error,error,20306,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,['error'],['error']
Availability,"e computed just after the minimization; 597 // (in DoMinimization) aftewr minimizing if the; 598 // FitConfig::MinosErrors() flag is set; 599 ; 600 if (!fMinimizer) {; 601 MATH_ERROR_MSG(""Fitter::CalculateMinosErrors"",""Minimizer does not exist - cannot calculate Minos errors"");; 602 return false;; 603 }; 604 ; 605 if (!fResult || fResult->IsEmpty() ) {; 606 MATH_ERROR_MSG(""Fitter::CalculateMinosErrors"",""Invalid Fit Result - cannot calculate Minos errors"");; 607 return false;; 608 }; 609 ; 610 if (fFitType == ROOT::Math::FitMethodFunction::kLogLikelihood && fConfig.UseWeightCorrection() ) {; 611 MATH_ERROR_MSG(""Fitter::CalculateMinosErrors"",""Computation of MINOS errors not implemented for weighted likelihood fits"");; 612 return false;; 613 }; 614 ; 615 // update minimizer (but cannot re-create in this case). Must use an existing one; 616 if (!DoUpdateMinimizerOptions(false)) {; 617 MATH_ERROR_MSG(""Fitter::CalculateHessErrors"",""Error re-initializing the minimizer"");; 618 return false;; 619 }; 620 ; 621 // set flag to compute Minos error to false in FitConfig to avoid that; 622 // following minimizaiton calls perform unwanted Minos error calculations; 623 /// fConfig.SetMinosErrors(false);; 624 ; 625 ; 626 const std::vector<unsigned int> & ipars = fConfig.MinosParams();; 627 unsigned int n = (!ipars.empty()) ? ipars.size() : fResult->Parameters().size();; 628 bool ok = false;; 629 ; 630 int iparNewMin = 0;; 631 int iparMax = n;; 632 int iter = 0;; 633 // rerun minos for the parameters run before a new Minimum has been found; 634 do {; 635 if (iparNewMin > 0); 636 MATH_INFO_MSG(""Fitter::CalculateMinosErrors"",""Run again Minos for some parameters because a new Minimum has been found"");; 637 iparNewMin = 0;; 638 for (int i = 0; i < iparMax; ++i) {; 639 double elow, eup;; 640 unsigned int index = (!ipars.empty()) ? ipars[i] : i;; 641 bool ret = fMinimizer->GetMinosError(index, elow, eup);; 642 // flags case when a new minimum has been found; 643 if ((fMinimizer->MinosStatus(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:23986,error,error,23986,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,2,['error'],['error']
Availability,e configuration ; : 441 | 695.167 373.877 0.0206789 0.00187467 42543.7 0; : 442 Minimum Test error found - save the configuration ; : 442 | 687.861 370.419 0.0206937 0.00187678 42514.9 0; : 443 Minimum Test error found - save the configuration ; : 443 | 681.656 366.359 0.0201552 0.00181904 43629.7 0; : 444 Minimum Test error found - save the configuration ; : 444 | 674.01 362.924 0.0201329 0.0018218 43689.4 0; : 445 Minimum Test error found - save the configuration ; : 445 | 667.37 358.699 0.0201197 0.00181899 43714.1 0; : 446 Minimum Test error found - save the configuration ; : 446 | 660.646 354.833 0.0201137 0.00181978 43730.3 0; : 447 Minimum Test error found - save the configuration ; : 447 | 654.211 352.003 0.0201333 0.00184653 43747.4 0; : 448 Minimum Test error found - save the configuration ; : 448 | 647.374 347.327 0.0201121 0.0018176 43729 0; : 449 Minimum Test error found - save the configuration ; : 449 | 641 344.618 0.0201064 0.00181317 43732 0; : 450 Minimum Test error found - save the configuration ; : 450 | 634.906 340.694 0.0201841 0.00185283 43641.2 0; : 451 Minimum Test error found - save the configuration ; : 451 | 628.321 336.668 0.0202054 0.00184722 43577.2 0; : 452 Minimum Test error found - save the configuration ; : 452 | 621.73 333.236 0.0201956 0.00184565 43596.7 0; : 453 Minimum Test error found - save the configuration ; : 453 | 615.499 330.282 0.0202258 0.00184415 43521.7 0; : 454 Minimum Test error found - save the configuration ; : 454 | 608.831 326.391 0.0201257 0.00180567 43668.1 0; : 455 Minimum Test error found - save the configuration ; : 455 | 602.478 323.085 0.0201467 0.00181706 43645.1 0; : 456 Minimum Test error found - save the configuration ; : 456 | 596.625 319.828 0.0201415 0.00181382 43649.8 0; : 457 Minimum Test error found - save the configuration ; : 457 | 590.662 316.621 0.0201112 0.00181253 43718.9 0; : 458 Minimum Test error found - save the configuration ; : 458 | 584.171 313.672 0.0201179 0.00180966 43696.3 0; :,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:61850,error,error,61850,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18654,error,error,18654,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e configuration ; : 703 | 31.9128 29.3224 0.0202722 0.00182152 43358.7 0; : 704 Minimum Test error found - save the configuration ; : 704 | 31.2876 29.167 0.0201013 0.00181585 43750.6 0; : 705 Minimum Test error found - save the configuration ; : 705 | 30.8198 28.9852 0.0201048 0.0018126 43734.4 0; : 706 Minimum Test error found - save the configuration ; : 706 | 30.3399 28.5636 0.0203047 0.00182247 43284.8 0; : 707 | 29.8899 28.5807 0.0200458 0.00176314 43757.3 1; : 708 | 29.6409 28.6883 0.0201432 0.0017637 43526.7 2; : 709 Minimum Test error found - save the configuration ; : 709 | 29.434 28.2 0.0201313 0.00182437 43699.3 0; : 710 | 28.7076 28.492 0.0200557 0.00176519 43738.5 1; : 711 Minimum Test error found - save the configuration ; : 711 | 28.4018 27.2754 0.0201013 0.00182194 43765.3 0; : 712 | 28.1436 28.1139 0.020041 0.00175734 43754.9 1; : 713 | 27.878 27.4183 0.0200281 0.0017564 43783.5 2; : 714 | 27.4734 27.8632 0.020054 0.00175612 43720.8 3; : 715 Minimum Test error found - save the configuration ; : 715 | 27.1251 26.6487 0.0201232 0.0018277 43726.6 0; : 716 | 26.6302 26.7712 0.0200343 0.00176196 43782.1 1; : 717 Minimum Test error found - save the configuration ; : 717 | 26.542 26.4691 0.020103 0.00182338 43764.7 0; : 718 Minimum Test error found - save the configuration ; : 718 | 25.9613 26.206 0.0200958 0.00181915 43771.6 0; : 719 Minimum Test error found - save the configuration ; : 719 | 25.6965 25.7845 0.0200932 0.00181887 43777.1 0; : 720 Minimum Test error found - save the configuration ; : 720 | 25.279 25.7029 0.0200856 0.00181582 43788.1 0; : 721 | 24.9296 25.8529 0.0200326 0.00176051 43782.6 1; : 722 | 24.8179 25.9725 0.0200485 0.0017542 43729.4 2; : 723 Minimum Test error found - save the configuration ; : 723 | 24.602 25.0488 0.0200826 0.00181241 43787.1 0; : 724 Minimum Test error found - save the configuration ; : 724 | 24.1724 25.032 0.0200931 0.00180717 43749.4 0; : 725 Minimum Test error found - save the configuration ; : 725 | 23.8272 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:90507,error,error,90507,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 746 | 18.8292 21.203 0.0201069 0.00182679 43763.3 0; : 747 Minimum Test error found - save the configuration ; : 747 | 18.4234 20.9247 0.0201054 0.00181179 43731.2 0; : 748 Minimum Test error found - save the configuration ; : 748 | 18.2054 20.8597 0.0200854 0.00181067 43776.4 0; : 749 Minimum Test error found - save the configuration ; : 749 | 17.9119 20.8249 0.0200825 0.00181515 43794.1 0; : 750 | 17.7295 20.9077 0.0200909 0.00176261 43648.3 1; : 751 Minimum Test error found - save the configuration ; : 751 | 17.6646 20.1562 0.02009 0.00181812 43783 0; : 752 Minimum Test error found - save the configuration ; : 752 | 17.2045 20.1301 0.0200899 0.00181385 43773 0; : 753 Minimum Test error found - save the configuration ; : 753 | 17.2492 20.0483 0.0200805 0.00181433 43796.8 0; : 754 Minimum Test error found - save the configuration ; : 754 | 16.8738 20.0271 0.0201173 0.00182078 43724.2 0; : 755 | 16.6744 20.3793 0.0200328 0.00175569 43770.5 1; : 756 Minimum Test error found - save the configuration ; : 756 | 16.5214 19.4549 0.0200975 0.00181399 43755.3 0; : 757 | 16.5493 20.0416 0.0200274 0.00175373 43778.7 1; : 758 | 16.7051 19.8344 0.0200284 0.00174826 43763.4 2; : 759 | 16.2032 19.717 0.0200656 0.00175048 43679.7 3; : 760 | 16.1221 19.4686 0.0200628 0.00175006 43685.5 4; : 761 Minimum Test error found - save the configuration ; : 761 | 15.7828 18.8348 0.0201031 0.00181849 43752.5 0; : 762 | 15.5545 19.1688 0.0200359 0.00175521 43762.1 1; : 763 Minimum Test error found - save the configuration ; : 763 | 15.3589 18.6297 0.0200894 0.00181179 43769.4 0; : 764 Minimum Test error found - save the configuration ; : 764 | 15.3977 18.5678 0.0201039 0.0018081 43725.8 0; : 765 | ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:94289,error,error,94289,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21437,error,error,21437,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"e construction time of *this.Definition RLogger.hxx:297; ROOT::Experimental::RLogScopedDiagCount::HasErrorOccurredbool HasErrorOccurred() constWhether the RLogDiagCount has emitted an error (fatal or not) since construction time of *this.Definition RLogger.hxx:294; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount(RLogDiagCount &cnt)Construct the scoped count given a counter (e.g.Definition RLogger.hxx:272; ROOT::Experimental::RLogScopedDiagCount::fInitialErrorslong long fInitialErrorsThe number of the RLogDiagCount's emitted errors at construction time.Definition RLogger.hxx:265; ROOT::Experimental::RLogScopedDiagCount::fInitialWarningslong long fInitialWarningsThe number of the RLogDiagCount's emitted warnings at construction time of *this.Definition RLogger.hxx:263; ROOT::Experimental::RLogScopedDiagCount::fCounterRLogDiagCount * fCounterDefinition RLogger.hxx:261; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedErrorslong long GetAccumulatedErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:285; ROOT::Experimental::RLogScopedDiagCount::fInitialFatalErrorslong long fInitialFatalErrorsThe number of the RLogDiagCount's emitted fatal errors at construction time.Definition RLogger.hxx:267; ROOT::Experimental::RLogScopedDiagCount::RLogScopedDiagCountRLogScopedDiagCount()Construct the scoped count for any diagnostic, whatever its channel.Definition RLogger.hxx:279; ROOT::Experimental::RLogScopedDiagCount::GetAccumulatedFatalErrorslong long GetAccumulatedFatalErrors() constGet the number of errors that the RLogDiagCount has emitted since construction of *this.Definition RLogger.hxx:288; ROOT::Experimental::RLogScopedVerbosityChange the verbosity level (global or specific to the RLogChannel passed to the constructor) for the ...Definition RLogger.hxx:243; ROOT::Experimental::RLogScopedVerbosity::fChannelRLogChannel * fChannelDefinition RLogger.hxx:244; ROOT::Exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:23126,error,errors,23126,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['error'],['errors']
Availability,"e controlled by:; gStyle->SetDateX(x); x in NDC; gStyle->SetDateY(y); y in NDC. The date text attributes can be changed with:; gStyle->GetAttDate()->SetTextFont(font=62);; gStyle->GetAttDate()->SetTextSize(size=0.025);; gStyle->GetAttDate()->SetTextAngle(angle=0);; gStyle->GetAttDate()->SetTextAlign(align=11);; gStyle->GetAttDate()->SetTextColor(color=1);. The current date attributes can be obtained via:; gStyle->GetAttDate()->GetTextxxxx();. When the date option is active, a text object is created when the pad; paint its list of primitives. The text object is named ""DATE"".; The DATE attributes can also be edited interactively (position; and attributes) via the normal context menu. void SetOptFit(Int_t fit = 1); The type of information about fit parameters printed in the histogram; statistics box can be selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; i = 2; integral of bins with option ""width"" printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values prin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStyle.html:33677,error,errors,33677,root/html604/TStyle.html,https://root.cern,https://root.cern/root/html604/TStyle.html,2,['error'],['errors']
Availability,"e controlled by:; gStyle->SetDateX(x); x in NDC; gStyle->SetDateY(y); y in NDC. The date text attributes can be changed with:; gStyle->GetAttDate()->SetTextFont(font=62);; gStyle->GetAttDate()->SetTextSize(size=0.025);; gStyle->GetAttDate()->SetTextAngle(angle=0);; gStyle->GetAttDate()->SetTextAlign(align=11);; gStyle->GetAttDate()->SetTextColor(color=1);. The current date attributes can be obtained via:; gStyle->GetAttDate()->GetTextxxxx();. When the date option is active, a text object is created when the pad; paint its list of primitives. The text object is named ""DATE"".; The DATE attributes can also be edited interactively (position; and attributes) via the normal context menu. void SetOptFit(Int_t fit = 1); The type of information about fit parameters printed in the histogram; statistics box can be selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; i = 2; integral of bins with option ""width"" printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values prin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStyle.html:32773,error,errors,32773,root/html534/TStyle.html,https://root.cern,https://root.cern/root/html534/TStyle.html,4,['error'],['errors']
Availability,"e controlled by:; gStyle->SetDateX(x); x in NDC; gStyle->SetDateY(y); y in NDC. The date text attributes can be changed with:; gStyle->GetAttDate()->SetTextFont(font=62);; gStyle->GetAttDate()->SetTextSize(size=0.025);; gStyle->GetAttDate()->SetTextAngle(angle=0);; gStyle->GetAttDate()->SetTextAlign(align=11);; gStyle->GetAttDate()->SetTextColor(color=1);. The current date attributes can be obtained via:; gStyle->GetAttDate()->GetTextxxxx();. When the date option is active, a text object is created when the pad; paint its list of primitives. The text object is named ""DATE"".; The DATE attributes can also be edited interactively (position; and attributes) via the normal context menu. void SetOptFit(Int_t fit = 1); The type of information about fit parameters printed in the histogram; statistics box can be selected via the parameter mode.; The parameter mode can be = pcev (default = 0111); p = 1; print Probability; c = 1; print Chisquare/Number of degress of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors.; When ""v""=1 is specified, only the non-fixed parameters are shown.; When ""v""=2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to; gStyle->SetOptFit(111). see also SetOptStat below. void SetOptStat(Int_t stat = 1); The type of information printed in the histogram statistics box; can be selected via the parameter mode.; The parameter mode can be = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyle.html:32160,error,errors,32160,root/html528/TStyle.html,https://root.cern,https://root.cern/root/html528/TStyle.html,6,['error'],['errors']
Availability,"e corresponding nsig quantile in the p values and then; interpolates them. double GetExpectedLimit(double nsig, bool lower, const char* opt = """") const; get expected limit (lower/upper) depending on the flag; for asymptotic is a special case (the distribution is generated an step in sigma values); distringuish asymptotic looking at the hypotest results; if option = ""P"" get expected limit using directly quantiles of p value distribution; else (default) find expected limit by obtaining first a full limit distributions; The last one is in general more correct. double GetLastYValue() const; { return GetYValue( fXValues.size()-1); }. double GetLastXValue() const; { return GetXValue( fXValues.size()-1); }. double GetLastYError() const; { return GetYError( fXValues.size()-1); }. HypoTestResult * GetLastResult() const; { return GetResult( fXValues.size()-1); }. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void SetCLsCleanupThreshold(Double_t th); set CLs threshold for exclusion cleanup function. { fCLsCleanupThreshold = th; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. bool IsOneSided() const; query if one sided result. { return !fIsTwoSided; }. bool IsTwoSided() const; query if two sided result. { return fIsTwoSided; }. SamplingDistribution * GetNullTestStatDist(int index) const; same in terms of alt and null. SamplingDistribution * GetAltTestStatDist(int index) const. SamplingDistribution* GetLowerLimitDistribution() const; get expected lower limit distributions; implemented using interpolation; The size for the sampling distribution is given (by def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html:17065,error,error,17065,root/html534/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"e corresponding nsig quantile in the p values and then; interpolates them. double GetExpectedLimit(double nsig, bool lower, const char* opt = """") const; get expected limit (lower/upper) depending on the flag; for asymptotic is a special case (the distribution is generated an step in sigma values); distringuish asymptotic looking at the hypotest results; if option = ""P"" get expected limit using directly quantiles of p value distribution; else (default) find expected limit by obtaining first a full limit distributions; The last one is in general more correct. double GetLastYValue() const; { return GetYValue( fXValues.size()-1); }. double GetLastXValue() const; { return GetXValue( fXValues.size()-1); }. double GetLastYError() const; { return GetYError( fXValues.size()-1); }. HypoTestResult * GetLastResult() const; { return GetResult( fXValues.size()-1); }. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. SamplingDistribution * GetNullTestStatDist(int index) const; same in terms of alt and null. SamplingDistribution * GetAltTestStatDist(int index) const. SamplingDistribution* GetLowerLimitDistribution() const; get expected lower limit distributions; implemented using interpolation; The size for the sampling distribution is given (by default is given by the average number of toy/point). { return GetLimitDistribution(true); }. SamplingDistribution* GetUpperLimitDistribution() const; get expected upper limit distributions; implemented using interpolation. { return GetLimitDistribution(false); }. void SetInterpola",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:15834,error,error,15834,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"e current window. ; Reimplemented from TVirtualX.; Definition at line 496 of file TGX11.cxx. ◆ CopyWindowtoPixmap(). void TGX11::CopyWindowtoPixmap ; (; Drawable * ; pix, . Int_t ; xpos, . Int_t ; ypos . ). private . Copy area of current window in the pixmap pix. ; Definition at line 508 of file TGX11.cxx. ◆ CreateBitmap(). Pixmap_t TGX11::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ; Reimplemented from TVirtualX.; Definition at line 1082 of file GX11Gui.cxx. ◆ CreateCursor(). Cursor_t TGX11::CreateCursor ; (; ECursor ; cursor). overridevirtual . Create cursor handle (just return cursor from cursor pool fCursors). ; Reimplemented from TVirtualX.; Definition at line 1043 of file GX11Gui.cxx. ◆ CreateGC(). GContext_t TGX11::CreateGC ; (; Drawable_t ; id, . GCValues_t * ; gval . ). overridevirtual . Create a graphics context using the values set in gval (but only for those entries that are in the mask). ; Reimplemented from TVirtualX.; Definition at line 971 of file GX11Gui.cxx. ◆ CreateImage(). Drawable_t TGX11::CreateImage ; (; UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a client-side XImage. Returns handle to XImage. ; Reimplemented from TVirtualX.; Definition at line 2613 of file GX11Gui.cxx. ◆ CreatePictureFromData(). Bool_t TGX11::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a picture pixmap from data. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 1236 of file GX11Gui.cxx. ◆ CreatePictureFromFile(). Bool_t TGX11::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:62639,mask,mask,62639,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['mask'],['mask']
Availability,"e data, the objective function; and the fitter class have not been deleted.; To be used only after fitting.; The pointer should not be stored and will be invalided after performing a new fitting.; In this case a new instance of ROOT::Math::Minimizer will be re-created and can be; obtained calling again GetMinimizer(). { return fMinimizer.get(); }. ROOT::Math::IMultiGenFunction * GetFCN() const. return pointer to last used objective function; (is NULL in case fit is not yet done); This pointer will be valid as far as the data and the fitter class; have not been deleted. To be used after the fitting.; The pointer should not be stored and will be invalided after performing a new fitting.; In this case a new instance of the function pointer will be re-created and can be; obtained calling again GetFCN(). { return fObjFunction.get(); }. bool ApplyWeightCorrection(const ROOT::Math::IMultiGenFunction& loglw2, bool minimizeW2L = false). apply correction in the error matrix for the weights for likelihood fits; This method can be called only after a fit. The; passed function (loglw2) is a log-likelihood function impelemented using the; sum of weight squared; When using FitConfig.SetWeightCorrection() this correction is applied; automatically when doing a likelihood fit (binned or unbinned). bool DoLinearFit(const ROOT::Fit::BinData& data); linear least square fit. bool DoInitMinimizer(); initialize the minimizer. bool DoMinimization(const ROOT::Fit::Fitter::BaseFunc& f, const ROOT::Math::IMultiGenFunction* chifunc = 0); do minimization. bool DoMinimization(const ROOT::Math::IMultiGenFunction* chifunc = 0); do minimization after having set obj function. void DoUpdateFitConfig(); update config after fit. int GetNCallsFromFCN(); get function calls from the FCN. void DoSetFunction(const IModel1DFunction & func, bool useGrad); set 1D function. void DoSetFunction(const IModelFunction & func, bool useGrad); set generic N-d function. » Author: L. Moneta Wed Aug 30 11:05:19 2006 » Copy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__Fitter.html:13700,error,error,13700,root/html532/ROOT__Fit__Fitter.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__Fitter.html,3,['error'],['error']
Availability,"e depends on the choice of normalization such as; RooAddPdf. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function to force use of a given normalization range; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void setCacheCheck(Bool_t flag); Activate cache validation mode. Int_t getMaxVal(const RooArgSet& vars) const; Advertise capability to determine maximum value of function for given set of; observables. If no direct generator method is provided, this information; will assist the accept/reject generator to operate more efficiently as; it can skip the initial trial sampling phase to empirically find the function; maximum. Double_t maxVal(Int_t code) const; Return maximum value for set of observables identified by code assigned; in getMaxVal. void logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); Interface to insert remote error logging messages received by RooRealMPFE into current error loggin stream. void logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:61377,error,error,61377,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,14,['error'],['error']
Availability,"e desired state. ; If printError is set, a message will be printed if the specified label does not represent a valid state. Returnsfalse on success. ; Implements RooAbsCategoryLValue.; Definition at line 186 of file RooCategory.cxx. ◆ setLabel() [2/4]. virtual bool RooAbsCategoryLValue::setLabel ; (; const char * ; label, . bool ; printError = true . ). virtual . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implements RooAbsCategoryLValue. ◆ setLabel() [3/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [4/4]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Set value by specifying the name of the desired state. ; If printError is set, a message will be printed if the specified label does not represent a valid state. Returnsfalse on success. ; Definition at line 60 of file RooAbsCategoryLValue.h. ◆ setRange(). void RooCategory::setRange ; (; const char * ; rangeName, . const char * ; stateNameList . ). Definition at line 336 of file RooCategory.cxx. ◆ states(). std::map< std::string, RooAbsCategory::value_type > & RooCategory::states ; (; ). Return a reference to the map of state names to index states. ; This can be used to manipulate the category. NoteCalling this function will always trigger recomputations of of everything that depends on this category, since in case the map gets manipulated, names or indices might change. Also, the ord",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:64120,error,error,64120,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['error'],['error']
Availability,"e dictionary name; 4145 if (gOptDictionaryFileName.size() > (PATH_MAX - 1)) {; 4146 ROOT::TMetaUtils::Error(nullptr, ""rootcling: dictionary name too long (more than %d characters): %s\n"",; 4147 (PATH_MAX - 1), gOptDictionaryFileName.c_str());; 4148 return 1;; 4149 }; 4150 ; 4151 dictname = llvm::sys::path::filename(gOptDictionaryFileName).str();; 4152 }; 4153 ; 4154 if (gOptForce && dictname.empty()) {; 4155 ROOT::TMetaUtils::Error(nullptr, ""Inconsistent set of arguments detected: overwrite of dictionary file forced but no filename specified.\n"");; 4156 llvm::cl::PrintHelpMessage();; 4157 return 1;; 4158 }; 4159 ; 4160 std::vector<std::string> clingArgs;; 4161 clingArgs.push_back(executableFileName);; 4162 clingArgs.push_back(""-iquote."");; 4163 ; 4164 bool dictSelection = !gOptNoDictSelection;; 4165 ; 4166 // Collect the diagnostic pragmas linked to the usage of -W; 4167 // Workaround for ROOT-5656; 4168 std::list<std::string> diagnosticPragmas = {""#pragma clang diagnostic ignored \""-Wdeprecated-declarations\""""};; 4169 ; 4170 if (gOptFailOnWarnings) {; 4171 using namespace ROOT::TMetaUtils;; 4172 // If warnings are disabled with the current verbosity settings, lower; 4173 // it so that the user sees the warning that caused the failure.; 4174 if (GetErrorIgnoreLevel() > kWarning); 4175 GetErrorIgnoreLevel() = kWarning;; 4176 GetWarningsAreErrors() = true;; 4177 }; 4178 ; 4179 if (gOptISysRoot != ""-"") {; 4180 if (gOptISysRoot.empty()) {; 4181 ROOT::TMetaUtils::Error("""", ""isysroot specified without a value.\n"");; 4182 return 1;; 4183 }; 4184 clingArgs.push_back(gOptISysRoot.ArgStr.str());; 4185 clingArgs.push_back(gOptISysRoot.ValueStr.str());; 4186 }; 4187 ; 4188 // Check if we have a multi dict request but no target library; 4189 if (gOptMultiDict && gOptSharedLibFileName.empty()) {; 4190 ROOT::TMetaUtils::Error("""", ""Multidict requested but no target library. Please specify one with the -s argument.\n"");; 4191 return 1;; 4192 }; 4193 ; 4194 for (const std::string &PP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:169147,failure,failure,169147,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['failure'],['failure']
Availability,"e drawn volume. The points are drawn with the color of their deepest container. Only points inside visible nodes are drawn. Random rays; A ray tracing method can be called TGeoVolume::RandomRays(). This shoots rays from a given point in the local reference frame with random directions. The intersections with displayed nodes appear as segments having the color of the touched node. The Drawing Package. The modeller provides a powerful drawing package, supporting several different options of visualization. A library separated from the main one provides all functionality being linked with the underlying ROOT visualization system. This library is dynamically loaded by the plug-in manager only when drawing features are requested. The geometrical structures that can be visualized are volumes and volume hierarchies.; The main component of the visualization system is volume primitive painting in a ROOT pad. Starting from this one, several specific options or subsystems are available, like: X3D viewing using hidden line and surface removal algorithms, OpenGL viewing* or ray tracing.; The method TGeoManager::GetGeomPainter() loads the painting library in memory.; This is generally not needed since it is called automatically by TGeoVolume::Draw() as well as by few other methods setting visualization attributes. Drawing Volumes and Hierarchies of Volumes; The first thing one would like to do after building some geometry is to visualize the volume tree. This provides the fastest validation check for most common coding or design mistakes. As soon as the geometry is successfully closed, one should draw it starting from the top-level volume:; //... code for geometry building; root[] gGeoManager->CloseGeometry();; root[] gGeoManager->GetMasterVolume()->Draw();; TGeoManager::GetMasterVolumeTGeoVolume * GetMasterVolume() constDefinition TGeoManager.h:511; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; Doing this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:106087,avail,available,106087,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['avail'],['available']
Availability,"e error bars are drawn. If option ""X"" is specified,; the errors are not drawn. The graph with errors in drawn like a normal graph. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y axis the error; bars are not drawn. Combined with other options, this option forces error bars'; drawing for the data points outside the visible range along the Y axis. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""3"" allows to shows the error as band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphPainter.html:6385,error,error,6385,root/html530/TGraphPainter.html,https://root.cern,https://root.cern/root/html530/TGraphPainter.html,1,['error'],['error']
Availability,"e error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definition at line 562 of file BinData.h. ◆ GetPoint() [1/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value . ); const. inline . retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ; Definition at line 381 of file BinData.h. ◆ GetPoint() [2/2]. const double * ROOT::Fit::BinData::GetPoint ; (; unsigned int ; ipoint, . double & ; value, . double & ; invError . ); const. inline . retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned for the error. ; Definition at line 439 of file BinData.h. ◆ GetPointError() [1/2]. const double * ROOT::Fit::BinData::GetPointError ; (; unsigned int ; ipoint, . double & ; errlow, . double & ; errhigh . ); const. inline . Get errors on the point (coordinate errors and asymmetric value errors) for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:23166,error,errortype,23166,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['errortype']
Availability,"e error for a given bin number, do:. Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given an histogram h, one can retrieve an associated function; with:. TF1 *myfunc = h->GetFunction(""myfunc"");. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of an histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current; histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply; an histogram by a function. If an histogram has associated error bars (TH1::Sumw2 has been called),; the resulting error bars are also computed assuming independent histograms.; In case of divisions, Binomial errors are also supported.; One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via; myhist.SetBit(TH1::kIsAverage);; When adding (see TH1::Add) average histograms, the histograms are averaged and not summed.; Fitting histograms; Histograms (1-D, 2-D, 3-D and Profiles) can be fitted with a user; specified function via TH1::Fit. When an histogram is fitted, the; resulting function with its parameters is added to the list of functions; of this histogram. If the histogram is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:. Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); value of 1st parameter; Double_t err0 = myfunc->GetParError(0); error on first parameter. Projections of histograms; One can:. make a 1-D projection of a 2-D histogram or Profile; see functions TH2::Projec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:11086,error,errors,11086,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['error'],['errors']
Availability,"e error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linea rinterpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(). Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:12207,error,error,12207,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"e error on the observed CLs+b value for the i-th entry. double CLsError(int index) const; function to return the error on the observed CLs value for the i-th entry. HypoTestResult* GetResult(int index) const; get the HypoTestResult object at the given index point. int FindIndex(double xvalue) const; find the index corresponding at the poi value xvalue; If no points is found return -1; Note that a tolerance is used of 10^-12 to find the closest point. double GetGraphX(const TGraph& g, double y0, bool lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(). Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:12536,error,error,12536,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['error'],['error']
Availability,"e errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented from TH1.; Definition at line 71 of file TProfile2D.h. ◆ SetBinsLength(). void TProfile2D::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow. ; Reallocate bin contents array ; Reimplemented from TH2D.; Definition at line 1947 of file TProfile2D.cxx. ◆ SetBuffer(). void TProfile2D::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). overridevirtual . Set the buffer size in units of 8 bytes (double). ; Reimplemented from TH1.; Definition at line 1956 of file TProfile2D.cxx. ◆ SetErrorOption(). void TProfile2D::SetErrorOption ; (; Option_t * ; option = """"). virtual . Set option to compute profile2D errors. ; The computation of the bin errors is based on the parameter option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z), i.e. the standard error of the bin contents. Note that if TProfile::Approximate() is called, an approximation is used when the spread in Z is 0 and the number of bin entries is > 0; 's' The bin errors are the standard deviations of the Z bin values Note that if TProfile::Approximate() is called, an approximation is used when the spread in Z is 0 and the number of bin entries is > 0; 'i' Errors are as in default case (standard errors of the bin contents) The only difference is for the case when the spread in Z is zero. In this case for N > 0 the error is 1./SQRT(12.*N); 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0. W is the sum in the bin of the weights of the profile. This option is for combining measurements z +/- dz, and the profile is filled with values y and weights z = 1/dz**2. See TProfile::BuildOptions for a detailed explanation of all options ; Definition at line 1994 of file TProfile2D.cxx. ◆ Streamer(). void TProfile2D::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:105059,error,error,105059,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['error'],['error']
Availability,"e event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 5870 of file TGWin32.cxx. ◆ OpenDisplay(). Int_t TGWin32::OpenDisplay ; (; const char * ; dpyName = 0). overridevirtual . Open the display. Return -1 if the opening fails, 0 when ok. ; Reimplemented from TVirtualX.; Definition at line 971 of file TGWin32.cxx. ◆ OpenPixmap(). Int_t TGWin32::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; w,h : Width and height of the pixmap. ; Reimplemented from TVirtualX.; Definition at line 2099 of file TGWin32.cxx. ◆ ParseColor(). Bool_t TGWin32::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On success, the ColorStruct_t fRed, fGreen and fBlue fields are all filled in and the mask is set for all three colors, but fPixel is not set. ; Reimplemented from TVirtualX.; Definition at line 5736 of file TGWin32.cxx. ◆ PointInRegion(). Bool_t TGWin32::PointInRegion ; (; Int_t ; x, . Int_t ; y, . Region_t ; reg . ). overridevirtual . Returns true if the point x,y is in the region. ; Reimplemented from TVirtualX.; Definition at line 7202 of file TGWin32.cxx. ◆ PolygonRegion(). Region_t TGWin32::PolygonRegion ; (; Point_t * ; points, . Int_t ; np, . Bool_t ; winding . ). overridevirtual . Create region for the polygon defined by the points array. ; If winding is true use WindingRule else EvenOddRule as fill rule. ; Reimplemented from TVirtualX.; Definition at line 7149 of file TGWin32.cxx. ◆ PutImage() [1/2]. void TGWin32::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:94042,mask,mask,94042,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['mask'],['mask']
Availability,"e eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile); Load a tree from s TDSetElement. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TEventIter.h 38810 2011-04-12 16:22:59Z ganis $ » Last generated: 2011-07-04 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEventIterTree.html:7848,error,error,7848,root/html530/TEventIterTree.html,https://root.cern,https://root.cern/root/html530/TEventIterTree.html,1,['error'],['error']
Availability,"e eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile); Load a tree from s TDSetElement. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TEventIter.h 38810 2011-04-12 16:22:59Z ganis $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEventIterTree.html:7848,error,error,7848,root/html532/TEventIterTree.html,https://root.cern,https://root.cern/root/html532/TEventIterTree.html,1,['error'],['error']
Availability,"e expression may be of the form:; value*(boolean expression); if boolean expression is true, the histogram is filled with; a weight = value.; Examples:; selection1 = ""x<y && sqrt(z)>3.2""; selection2 = ""(x+y)*(sqrt(z)>3.2)""; selection1 returns a weight = 0 or 1; selection2 returns a weight = x+y if sqrt(z)>3.2; returns a weight = 0 otherwise. option is the drawing option.; - See TH1::Draw for the list of all drawing options.; - If option COL is specified when varexp has three fields:; tree.Draw(""e1:e2:e3"","""",""col"");; a 2D scatter is produced with e1 vs e2, and e3 is mapped on the color; table. The colors for e3 are evaluated once in linear scale before; painting. Therefore changing the pad to log scale along Z as no effect; on the colors.; - If option contains the string ""goff"", no graphics is generated. nentries is the number of entries to process (default is all); first is the first entry to process (default is 0). This function returns the number of selected entries. It returns -1; if an error occurs. Drawing expressions using arrays and array elements. Let assumes, a leaf fMatrix, on the branch fEvent, which is a 3 by 3 array,; or a TClonesArray.; In a TTree::Draw expression you can now access fMatrix using the following; syntaxes:. String passed What is used for each entry of the tree. ""fMatrix"" the 9 elements of fMatrix; ""fMatrix[][]"" the 9 elements of fMatrix; ""fMatrix[2][2]"" only the elements fMatrix[2][2]; ""fMatrix[1]"" the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2]; ""fMatrix[1][]"" the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2]; ""fMatrix[][0]"" the 3 elements fMatrix[0][0], fMatrix[1][0] and fMatrix[2][0]. ""fEvent.fMatrix...."" same as ""fMatrix..."" (unless there is more than one leaf named fMatrix!). In summary, if a specific index is not specified for a dimension, TTree::Draw; will loop through all the indices along this dimension. Leaving off the; last (right most) dimension of specifying then with the two characters '[]'; is equi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:70335,error,error,70335,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['error'],['error']
Availability,"e expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1049inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1050this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1051 ; 1052The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1053 ; 1054#### Combining multiple variations; 1055 ; 1056Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1057by applying multiple systematic variations at the same time.; 1058For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1059""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1060 ; 1061~~~{.cpp}; 1062auto df = _df.Vary(""pt"",; 1063 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1064 {""down"", ""up""}); 1065 .Vary(""eta"",; 1066 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1067 {""eta""},; 1068 2);; 1069 ; 1070auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1071auto all_hs = VariationsFor(nom_h);; 1072all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1073~~~; 1074 ; 1075Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1076shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1077 ; 1078\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1079 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1080 programming model will be streamlined in future versions.; 1081 ; 1082\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1083 call \ref ROOT::RDF::Experimental::Va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:62569,down,down,62569,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['down'],['down']
Availability,"e expression returns an RVec of two RVecs: each inner vector contains the varied values for one column. The; 1089inner vectors follow the same ordering as the column names that are passed as the first argument. Besides the variation tags, in; 1090this case we also have to explicitly pass the variation name (here: ""ptAndEta"") as the default column name does not exist.; 1091 ; 1092The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; 1093 ; 1094#### Combining multiple variations; 1095 ; 1096Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced; 1097by applying multiple systematic variations at the same time.; 1098For example, in the following example snippet, the RResultMap instance `all_h` will contain keys ""nominal"", ""pt:down"",; 1099""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; 1100 ; 1101~~~{.cpp}; 1102auto df = _df.Vary(""pt"",; 1103 ""ROOT::RVecD{pt*0.9, pt*1.1}"",; 1104 {""down"", ""up""}); 1105 .Vary(""eta"",; 1106 [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; 1107 {""eta""},; 1108 2);; 1109 ; 1110auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; 1111auto all_hs = VariationsFor(nom_h);; 1112all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; 1113~~~; 1114 ; 1115Note how we passed the integer `2` instead of a list of variation tags to the second Vary() invocation: this is a; 1116shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; 1117 ; 1118\note Currently, VariationsFor() and RResultMap are in the `ROOT::RDF::Experimental` namespace, to indicate that these; 1119 interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related; 1120 programming model will be streamlined in future versions.; 1121 ; 1122\note Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to; 1123 call \ref ROOT::RDF::Experimental::Va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:64249,down,down,64249,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['down'],['down']
Availability,"e fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSlave.html:10544,recover,recovered,10544,root/html534/TXSlave.html,https://root.cern,https://root.cern/root/html534/TXSlave.html,2,"['error', 'recover']","['error', 'recovered']"
Availability,"e file (out) returns: 0 in case of success and 1 if the file could not be stat'ed. ; Definition at line 331 of file TNetXNGSystem.cxx. ◆ MakeDirectory(). Int_t TNetXNGSystem::MakeDirectory ; (; const char * ; dir). overridevirtual . Create a directory. ; param dir: the directory name returns: 0 on success, -1 otherwise ; Reimplemented from TSystem.; Definition at line 129 of file TNetXNGSystem.cxx. ◆ OpenDirectory(). void * TNetXNGSystem::OpenDirectory ; (; const char * ; dir). overridevirtual . Open a directory. ; param dir: the name of the directory to open returns: a non-zero pointer (with no special purpose) in case of success, 0 in case of error ; Reimplemented from TSystem.; Definition at line 114 of file TNetXNGSystem.cxx. ◆ Stage() [1/2]. Int_t TNetXNGSystem::Stage ; (; const char * ; path, . UChar_t ; priority . ). virtual . Issue a stage request for a single file. ; param path: the path of the file to stage param opt: defines 'option' and 'priority' for 'Prepare': the format is opt = ""option=o priority=p"" returns: 0 for success, -1 for error ; Definition at line 401 of file TNetXNGSystem.cxx. ◆ Stage() [2/2]. Int_t TNetXNGSystem::Stage ; (; TCollection * ; files, . UChar_t ; priority . ). virtual . Issue stage requests for multiple files. ; param pathlist: list of paths of files to stage param opt: defines 'option' and 'priority' for 'Prepare': the format is opt = ""option=o priority=p"" returns: 0 for success, -1 for error ; Definition at line 416 of file TNetXNGSystem.cxx. ◆ Streamer(). void TNetXNGSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TNetXNGSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TNetXNGSystem.h. ◆ Unlink(). int TNetXNGSystem::Unlink ; (; const char * ; path). overridevirtual . Unlink a file on the remote server. ; param path: the path of the file to unlink returns: 0 on succ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGSystem.html:38438,error,error,38438,doc/master/classTNetXNGSystem.html,https://root.cern,https://root.cern/doc/master/classTNetXNGSystem.html,1,['error'],['error']
Availability,"e file is copied to the remote cache instead of the sandbox (to copy to the cache on a different name use rfile = ""cache:newname""). The mask 'opt' is an or of ESendFileOpt: kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Definition at line 6894 of file TProof.cxx. ◆ SendGroupView(). Int_t TProof::SendGroupView ; (; ). private . Send to all active slaves servers the current slave group size and their unique id. ; Returns number of active slaves. Returns -1 in case of error. ; Definition at line 6460 of file TProof.cxx. ◆ SendingLogToWindow(). Bool_t TProof::SendingLogToWindow ; (; ); const. inline . Definition at line 1016 of file TProof.h. ◆ SendInitialState(). Int_t TProof::SendInitialState ; (; ). private . Transfer the initial (i.e. ; current) state of the master to all slave servers. Currently the initial state includes: log level. Returns the number of active slaves. Returns -1 in case of error. ; Definition at line 6774 of file TProof.cxx. ◆ SendInputData(). Int_t TProof::SendInputData ; (; TQueryResult * ; qr, . TProof * ; p, . TString & ; emsg . ). staticprotected . Send the input data file to the workers. ; Definition at line 12380 of file TProof.cxx. ◆ SendInputDataFile(). void TProof::SendInputDataFile ; (; ). protectedvirtual . Send the input data objects to the master; the objects are taken from the dedicated list and / or the specified file. ; If the fInputData is empty the specified file is sent over. If there is no specifie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:139413,error,error,139413,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"e file; print(""Histogram '{}' is attached to: '{}'.\n"".format(histo_2.GetName(), histo_2.GetDirectory().GetName())); # Before exiting the context, objects can be written to the file; f.WriteObject(histo_2, ""my_histogram""); ; # When the TFile.Close method is called, the current directory is automatically; # set again to ROOT.gROOT. Objects that were attached to the file inside the; # context are automatically deleted and made 'None' when the file is closed.; print(""Status after the first TFile context manager:""); print("" Current directory: '{}'."".format(ROOT.gDirectory.GetName())); print("" Accessing 'histo_2' gives: '{}'.\n"".format(histo_2)); ; # Also reading data from a TFile can be done in a context manager. Information; # stored in the objects of the file can be queried and used inside the context.; # After the context, the objects are not usable anymore because the file is; # automatically closed. This means you should use this pattern as a quick way; # to get information or modify objects from a certain file, without needing to; # keep the histograms alive afterwards.; with TFile.Open(""pyroot005_file_1.root"", ""read"") as f:; # Retrieve histogram using the name given to f.WriteObject in the previous; # with statement; histo_2_fromfile = f[""my_histogram""]; print(""Retrieved '{}' histogram from file '{}'.\n"".format(histo_2_fromfile.GetName(), f.GetName())); ; # Cleanup the file created for this tutorial; os.remove(""pyroot005_file_1.root""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot005__tfile__context__manager_8py.html:2871,alive,alive,2871,doc/master/pyroot005__tfile__context__manager_8py.html,https://root.cern,https://root.cern/doc/master/pyroot005__tfile__context__manager_8py.html,1,['alive'],['alive']
Availability,"e file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TArcBall. class TArcBall. Implements the arc-ball rotation manipulator.; Used by plot-painters. Function Members (Methods); public:. TArcBall(UInt_t NewWidth = 100, UInt_t NewHeight = 100); virtual~TArcBall(); static TClass*Class(); voidClick(const TPoint& NewPt); voidDrag(const TPoint& NewPt); const Double_t*GetRotMatrix() const; virtual TClass*IsA() const; voidSetBounds(UInt_t NewWidth, UInt_t NewHeight); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidMapToSphere(const TPoint& NewPt, Double_t* NewVec) const. private:. TArcBall(const TArcBall&); TArcBall&operator=(const TArcBall&); voidResetMatrices(). Data Members; private:. Double_tfAdjustHeightMouse bounds height; Double_tfAdjustWidthMouse bounds width; Double_tfEnVec[3]Saved drag vector; Double_tfLastRot[9]; Double_tfStVec[3]Saved click vector; Double_tfThisRot[9]; Double_tfTransform[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void MapToSphere(const TPoint& NewPt, Double_t* NewVec) const; map to sphere. TArcBall(UInt_t NewWidth = 100, UInt_t NewHeight = 100); constructor. void Click(const TPoint& NewPt); Mouse down. void Drag(const TPoint& NewPt); Mouse drag, calculate rotation. void ResetMatrices(); Set rotation matrix as union. TArcBall(const TArcBall& ); Non-copyable. virtual ~TArcBall(); { }. void SetBounds(UInt_t NewWidth, UInt_t NewHeight). const Double_t * GetRotMatrix() const. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TArcBall.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TArcBall.html:1463,down,down,1463,root/html528/TArcBall.html,https://root.cern,https://root.cern/root/html528/TArcBall.html,1,['down'],['down']
Availability,"e file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TArcBall. class TArcBall. Implements the arc-ball rotation manipulator.; Used by plot-painters. Function Members (Methods); public:. TArcBall(UInt_t NewWidth = 100, UInt_t NewHeight = 100); virtual~TArcBall(); static TClass*Class(); voidClick(const TPoint& NewPt); voidDrag(const TPoint& NewPt); const Double_t*GetRotMatrix() const; virtual TClass*IsA() const; voidSetBounds(UInt_t NewWidth, UInt_t NewHeight); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidMapToSphere(const TPoint& NewPt, Double_t* NewVec) const. private:. TArcBall(const TArcBall&); TArcBall&operator=(const TArcBall&); voidResetMatrices(). Data Members; private:. Double_tfAdjustHeightMouse bounds height; Double_tfAdjustWidthMouse bounds width; Double_tfEnVec[3]Saved drag vector; Double_tfLastRot[9]; Double_tfStVec[3]Saved click vector; Double_tfThisRot[9]; Double_tfTransform[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void MapToSphere(const TPoint& NewPt, Double_t* NewVec) const; map to sphere. TArcBall(UInt_t NewWidth = 100, UInt_t NewHeight = 100); constructor. void Click(const TPoint& NewPt); Mouse down. void Drag(const TPoint& NewPt); Mouse drag, calculate rotation. void ResetMatrices(); Set rotation matrix as union. TArcBall(const TArcBall& ); Non-copyable. virtual ~TArcBall(); { }. void SetBounds(UInt_t NewWidth, UInt_t NewHeight). const Double_t * GetRotMatrix() const. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TArcBall.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TArcBall.html:1463,down,down,1463,root/html530/TArcBall.html,https://root.cern,https://root.cern/root/html530/TArcBall.html,1,['down'],['down']
Availability,"e file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » TArcBall. class TArcBall. Implements the arc-ball rotation manipulator.; Used by plot-painters. Function Members (Methods); public:. TArcBall(UInt_t NewWidth = 100, UInt_t NewHeight = 100); virtual~TArcBall(); static TClass*Class(); voidClick(const TPoint& NewPt); voidDrag(const TPoint& NewPt); const Double_t*GetRotMatrix() const; virtual TClass*IsA() const; voidSetBounds(UInt_t NewWidth, UInt_t NewHeight); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidMapToSphere(const TPoint& NewPt, Double_t* NewVec) const. private:. TArcBall(const TArcBall&); TArcBall&operator=(const TArcBall&); voidResetMatrices(). Data Members; private:. Double_tfAdjustHeightMouse bounds height; Double_tfAdjustWidthMouse bounds width; Double_tfEnVec[3]Saved drag vector; Double_tfLastRot[9]; Double_tfStVec[3]Saved click vector; Double_tfThisRot[9]; Double_tfTransform[16]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void MapToSphere(const TPoint& NewPt, Double_t* NewVec) const; map to sphere. TArcBall(UInt_t NewWidth = 100, UInt_t NewHeight = 100); constructor. void Click(const TPoint& NewPt); Mouse down. void Drag(const TPoint& NewPt); Mouse drag, calculate rotation. void ResetMatrices(); Set rotation matrix as union. TArcBall(const TArcBall& ); Non-copyable. virtual ~TArcBall(); { }. void SetBounds(UInt_t NewWidth, UInt_t NewHeight). const Double_t * GetRotMatrix() const. » Author: Timur Pocheptsov 03/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TArcBall.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TArcBall.html:1463,down,down,1463,root/html532/TArcBall.html,https://root.cern,https://root.cern/root/html532/TArcBall.html,1,['down'],['down']
Availability,"e filling; the histogram. Return mean value of this histogram along the X axis. Note that the mean value/StdDev is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Double_t GetMeanError(Int_t axis = 1) const; Return standard error of mean of this histogram along the X axis. Note that the mean value/StdDev is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram.; Also note, that although the definition of standard error doesn't include the; assumption of normality, many uses of this feature implicitly assume it. Double_t GetStdDev(Int_t axis = 1) const; Returns the Standard Deviation (Sigma).; The Sigma estimate is computed as Sqrt((1/N)*(Sum(x_i-x_mean)^2)). For axis = 1,2 or 3 returns the Sigma value of the histogram along; X, Y or Z axis; For axis = 11, 12 or 13 returns the error of StdDev estimation along; X, Y or Z axis for Normal distribution. Note that the mean value/sigma is computed using the bins in the currently; defined range (see TAxis::SetRange). By default the range includes; all bins from 1 to nbins included, excluding underflows and overflows.; To force the underflows and overflows in the computation, one must; call the static function TH1::StatOverflows(kTRUE) before filling; the histogram. Double_t GetStdDevError(Int_t axis = 1) const; Return error of standard deviation estimation for Normal distribution. Note that the mean value/StdDev is computed using the bins in the currently; defined range (see",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH1.html:111610,error,error,111610,root/html604/TH1.html,https://root.cern,https://root.cern/root/html604/TH1.html,1,['error'],['error']
Availability,"e floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void optimizeConst(Bool_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:10471,error,errors,10471,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,3,['error'],['errors']
Availability,"e floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void optimizeConst(Int_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinimizer construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinimizer.html:10625,error,errors,10625,root/html532/RooMinimizer.html,https://root.cern,https://root.cern/root/html532/RooMinimizer.html,4,['error'],['errors']
Availability,"e floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void setNoWarn(); Instruct MINUIT to suppress warnings. Int_t setWarnLevel(Int_t newLevel); Set MINUIT warning level to given level. Bool_t synchronize(Bool_t verbose); Internal function to synchronize TMinuit with current; information in RooAbsReal function parameters. void optimizeConst(Bool_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinuit const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:10781,error,errors,10781,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,3,['error'],['errors']
Availability,"e floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t setPrintLevel(Int_t newLevel); Change the MINUIT internal printing level. void setNoWarn(); Instruct MINUIT to suppress warnings. Int_t setWarnLevel(Int_t newLevel); Set MINUIT warning level to given level. Bool_t synchronize(Bool_t verbose); Internal function to synchronize TMinuit with current; information in RooAbsReal function parameters. void optimizeConst(Int_t flag); If flag is true, perform constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinuit constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:11054,error,errors,11054,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,4,['error'],['errors']
Availability,"e for automatic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH2C(); Constructor. ~TH2C(); Destructor. TH2C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2C(const TH2C& h2c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH2C. TH2C& operator=(const TH2C& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH2C.html:29440,error,errors,29440,root/html604/TH2C.html,https://root.cern,https://root.cern/root/html604/TH2C.html,1,['error'],['errors']
Availability,"e for automatic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH2C(); Constructor. ~TH2C(); Destructor. TH2C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2C(const TH2C& h2c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH2C. TH2C& operator=(const TH2C& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2C.html:29440,error,errors,29440,root/html602/TH2C.html,https://root.cern,https://root.cern/root/html602/TH2C.html,1,['error'],['errors']
Availability,"e for automatic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH2S(); Constructor. ~TH2S(); Destructor. TH2S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2S(const TH2S& h2s); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH2S. TH2S& operator=(const TH2S& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH2S.html:29460,error,errors,29460,root/html604/TH2S.html,https://root.cern,https://root.cern/root/html604/TH2S.html,1,['error'],['errors']
Availability,"e for automatic histograms; static Bool_tTH1::fgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tTH1::fgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH2S(); Constructor. ~TH2S(); Destructor. TH2S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2S(const TH2S& h2s); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w. void Copy(TObject& hnew) const; Copy. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& ); Stream an object of class TH2S. TH2S& operator=(const TH2S& h1); Operator =. Double_t RetrieveBinContent(Int_t bin) const; { return Double_t (fArray[bin]); }. void UpdateBinContent(Int_t bin, Double_t content); { fArray[bin] = Char_t (content); }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2S.html:29460,error,errors,29460,root/html602/TH2S.html,https://root.cern,https://root.cern/root/html602/TH2S.html,1,['error'],['errors']
Availability,"e for fit (coordinates + values + errors); TAxis *xaxis1 = h1->GetXaxis();; TAxis *yaxis1 = h1->GetYaxis();; TAxis *xaxis2 = h2->GetXaxis();; TAxis *yaxis2 = h2->GetYaxis();; ; int nbinX1 = h1->GetNbinsX();; int nbinY1 = h1->GetNbinsY();; int nbinX2 = h2->GetNbinsX();; int nbinY2 = h2->GetNbinsY();; ; /// reset data structure; coords = std::vector<std::pair<double,double> >();; values = std::vector<double>();; errors = std::vector<double>();; ; ; for (int ix = 1; ix <= nbinX1; ++ix) {; for (int iy = 1; iy <= nbinY1; ++iy) {; if ( h1->GetBinContent(ix,iy) > 0 ) {; coords.push_back( std::make_pair(xaxis1->GetBinCenter(ix), yaxis1->GetBinCenter(iy) ) );; values.push_back( h1->GetBinContent(ix,iy) );; errors.push_back( h1->GetBinError(ix,iy) );; }; }; }; for (int ix = 1; ix <= nbinX2; ++ix) {; for (int iy = 1; iy <= nbinY2; ++iy) {; if ( h2->GetBinContent(ix,iy) > 0 ) {; coords.push_back( std::make_pair(xaxis2->GetBinCenter(ix), yaxis2->GetBinCenter(iy) ) );; values.push_back( h2->GetBinContent(ix,iy) );; errors.push_back( h2->GetBinError(ix,iy) );; }; }; }; ; TVirtualFitter::SetDefaultFitter(""Minuit"");; TVirtualFitter * minuit = TVirtualFitter::Fitter(nullptr,10);; for (int i = 0; i < 10; ++i) {; minuit->SetParameter(i, func->GetParName(i), func->GetParameter(i), 0.01, 0,0);; }; minuit->SetFCN(myFcn);; ; double arglist[100];; arglist[0] = 0;; // set print level; minuit->ExecuteCommand(""SET PRINT"",arglist,2);; ; // minimize; arglist[0] = 5000; // number of function calls; arglist[1] = 0.01; // tolerance; minuit->ExecuteCommand(""MIGRAD"",arglist,2);; ; //get result; double minParams[10];; double parErrors[10];; for (int i = 0; i < 10; ++i) {; minParams[i] = minuit->GetParameter(i);; parErrors[i] = minuit->GetParError(i);; }; double chi2, edm, errdef;; int nvpar, nparx;; minuit->GetStats(chi2,edm,errdef,nvpar,nparx);; ; func->SetParameters(minParams);; func->SetParErrors(parErrors);; func->SetChisquare(chi2);; int ndf = coords.size()-nvpar;; func->SetNDF(ndf);; ; std::cout ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TwoHistoFit2D_8C.html:5687,error,errors,5687,doc/master/TwoHistoFit2D_8C.html,https://root.cern,https://root.cern/doc/master/TwoHistoFit2D_8C.html,1,['error'],['errors']
Availability,"e for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ; ierflg . ). virtual . Interprets a command and takes appropriate action. ; either directly by skipping to the corres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:49693,error,errors,49693,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,3,['error'],"['error', 'errors']"
Availability,"e for the given fit point; Safe (but slower) method returning correctly the error on the value; in case of asymm errors return the average 0.5(eu + el). double InvError(unsigned int ipoint) const. Return the inverse of error on the value for the given fit point; useful when error in the coordinates are not stored and then this is used directly this as the weight in; the least square function. const double * CoordErrors(unsigned int ipoint) const. Return a pointer to the errors in the coordinates for the given fit point. const double * GetPoint(unsigned int ipoint, double& value) const. retrieve at the same time a pointer to the coordinate data and the fit value; More efficient than calling Coords(i) and Value(i). const double * GetPoint(unsigned int ipoint, double& value, double& invError) const. retrieve in a single call a pointer to the coordinate data, value and inverse error for; the given fit point.; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; for the error. const double * GetPointError(unsigned int ipoint, double& errvalue) const. Retrieve the errors on the point (coordinate and value) for the given fit point; It must be called only when the coordinate errors are stored otherwise it will produce an; assert. const double * GetPointError(unsigned int ipoint, double& errlow, double& errhigh) const. Get errors on the point (coordinate errors and asymmetric value errors) for the; given fit point.; It must be called only when the coordinate errors and asymmetric errors are stored; otherwise it will produce an assert. void Resize(unsigned int npoints). resize the vector to the new given npoints; if vector does not exists is created using existing point size. unsigned int NPoints() const. return number of fit points. { return fNPoints; }. unsigned int Size() const. return number of fit points. { return fNPoints; }. unsigned int NDim() const. return coordinate data dimension. { return fDim; }. BinData & LogTransform().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__BinData.html:10506,error,error,10506,root/html526/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__BinData.html,7,['error'],['error']
Availability,"e for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:131659,error,errors,131659,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"e formulas; 1148/// \f[; 1149/// D(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^{2}}; 1150/// \f]; 1151/// the final estimate; 1152/// \f[; 1153/// D = \frac{4D(h/2) - D(h)}{3}; 1154/// \f]; 1155/// ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition""; 1156///; 1157/// if the argument params is null, the current function parameters are used,; 1158/// otherwise the parameters in params are used.; 1159///; 1160/// the argument eps may be specified to control the step size (precision).; 1161/// the step size is taken as eps*(xmax-xmin).; 1162/// the default value (0.001) should be good enough for the vast majority; 1163/// of functions. Give a smaller value if your function has many changes; 1164/// of the second derivative in the function range.; 1165///; 1166/// Getting the error via TF1::DerivativeError:; 1167/// (total error = roundoff error + interpolation error); 1168/// the estimate of the roundoff error is taken as follows:; 1169/// \f[; 1170/// err = k\sqrt{f(x)^{2} + x^{2}deriv^{2}}\sqrt{\sum ai^{2}},; 1171/// \f]; 1172/// where k is the double precision, ai are coefficients used in; 1173/// central difference formulas; 1174/// interpolation error is decreased by making the step size h smaller.; 1175///; 1176/// \author Anna Kreshuk; 1177 ; 1178Double_t TF1::Derivative2(Double_t x, Double_t *params, Double_t eps) const; 1179{; 1180 if (GetNdim() > 1) {; 1181 Warning(""Derivative2"", ""Function dimension is larger than one"");; 1182 }; 1183 ; 1184 ROOT::Math::RichardsonDerivator rd;; 1185 double xmin, xmax;; 1186 GetRange(xmin, xmax);; 1187 // this is not optimal (should be used the average x instead of the range); 1188 double h = eps * std::abs(xmax - xmin);; 1189 if (h <= 0) h = 0.001;; 1190 double der = 0;; 1191 if (params) {; 1192 ROOT::Math::WrappedTF1 wtf(*(const_cast<TF1 *>(this)));; 1193 wtf.SetParameters(params);; 1194 der = rd.Derivative2(wtf, x, h);; 1195 } else {; 1196 // no need to set parameters used a non-parametric wrapper to avoid all",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:41772,error,error,41772,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,6,['error'],['error']
Availability,"e found in the contributing readme.; Pulling the last changes from upstream/master; Often, there might have been changes in the upstream/master repository that you want to have together with your new changes. This section will describe how to pull the new changes.; Add the ROOT repository upstream as a remote:; git remote add upstream https://github.com/root-project/root; Make sure you are on the master branch locally and pull the latest changes from upstream:; git checkout master; git pull upstream master; Go back to your local branch and rebase the last changes from master:; git checkout histogram-race-condition-fix; git rebase master; Push your new updated local branch to your GitHub repository (origin):; git push --force; Summary. The entire workflow is summarized in the image above. First, we cloned root-project/root, and cloned it to our local machine. Then after making the commit, we pushed the change to origin. Optionally, we can pull down the last changes from upstream and rebase our branch onto the current master and force-push this to origin. After this, we create a pull request on GitHub from origin. It is important to note that it is not necessary to fork and clone for each contribution.; Merging a pull request locally; If the pull request does not have any conflicts with the master branch, it is possible to apply the changes locally by downloading a patch and piping it to git am with; wget -qO- https://github.com/root-project/root/pull/<PR#>.patch | git am; If you have conflicts, the preferred method is to rebase your branch onto master:; git remote update && git checkout master && git pull && git rebase master <your branch>; When a conflict exists with a commit, git will interrupt the rebase and let you resolve them by editing your files. Once the conflict is resolved, use; git add <conflicting files> && git rebase --continue; to continue the rebasing process. After all conflicts have been resolved, you can check that your changes are really what you w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:4583,down,down,4583,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['down'],['down']
Availability,"e fraction) Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits by finding good starting values for the parameters for the actual fit. WarningPrefitting may give bad results when used in binned analysis. Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit). . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default. . PrintLevel(Int_t level) Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well. See RooMinimizer::PrintLevel for the meaning of the levels. . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppresses output completely, a zero value will only print the error count per p.d.f component, a positive value will print details of each error up to numErr messages per p.d.f component. . Parallelize(Int_t nWorkers) Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization backend and uses the number given as the number of workers to use in the parallelization. -1 also enables RooFit's parallel minimization backend, and sets the number of workers to the number of available processes. 0 disables this feature. In case parallelization is requested, this option implies ModularL(true) in the internal call to the NLL creation method. . ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1) Experimental - Control gradient parallelization settings. The first argument only disables or enables gradient parallelization, this is on by default. The second argument determines the internal partial derivative calculation ordering strategy. The third argument determines the number of partial derivatives that are executed per task package on each ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:109872,error,error,109872,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['error'],['error']
Availability,e frame line color is modified by the user. void ModFrameLineWidth(); Slot called whenever the frame line width is modified by the user. void ModFrameLineStyle(); Slot called whenever the frame line style is modified by the user. void ModPaletteEdit(); Slot called whenever the palette editor is opened by the user. void ModFrameBorderMode(); Slot called whenever the frame border mode is modified by the user. void ModFrameBorderSize(); Slot called whenever the frame border size is modified by the user. void ModFuncColor(); Slot called whenever the function line color is modified by the user. void ModFuncWidth(); Slot called whenever the function line width is modified by the user. void ModFuncStyle(); Slot called whenever the function line style is modified by the user. void ModDrawBorder(); Slot called whenever the draw border boolean is modified by the user. void ModEndErrorSize(); Slot called whenever the end error size is modified by the user. void ModErrorX(); Slot called whenever the error along X is modified by the user. void ModTimeOffset(); Slot called whenever the time offset is modified by the user. void ModStripDecimals(); Slot called whenever the strip decimal boolean is modified by the user. void ModApplyOnXYZ(); Slot called whenever the apply on XYZ button is clicked. The settings of; the current selected axis pad are applyed on all axis.; NB: The logarithmic scale option isn't modified by this method. void ModXTitleSize(); Slot called whenever the X axis title size is modified by the user. void ModXTitleSizeInPixels(Bool_t b); Slot called whenever the X axis title size mode is modified by the user. void ModXTitleColor(); Slot called whenever the X axis title color is modified by the user. void ModXTitleOffset(); Slot called whenever the X axis title offset is modified by the user. void ModXTitleFont(); Slot called whenever the X axis title font is modified by the user. void ModXLabelSize(); Slot called whenever the X axis label size is modified by the ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:68103,error,error,68103,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,6,['error'],['error']
Availability,"e frames ;  ; Int_t fSplitterLen;  ; Bool_t fUseSplitters;  ; Bool_t fVertical;  ; Float_t fWeightSum;  total sum of sub frame weights ;  ;  Protected Attributes inherited from TGCompositeFrame; Bool_t fLayoutBroken;  no layout manager is used ;  ; TGLayoutManager * fLayoutManager;  layout manager ;  ; TList * fList;  container of frame elements ;  ; Bool_t fMapSubwindows;  kTRUE - map subwindows ;  ; Int_t fMustCleanup;  cleanup mode (see EFrameCleanup) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGPack (const TGPack &)=delete;  ; TGPack & operator= (const TGPack &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEven",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPack.html:28283,mask,mask,28283,doc/master/classTGPack.html,https://root.cern,https://root.cern/doc/master/classTGPack.html,1,['mask'],['mask']
Availability,"e function implementation.; Function Implementation; Lets start with something simple: calculate the sum of all event sizes. For this we need a new variable of type int. Create (declare) it at the beginning of the function, and don't forget to initialize it to 0. At the end, the code in AnalyzeTree.C should look like this:; #include ""TFile.h""; #include ""TTree.h"". void AnalyzeTree(); {; // Variables used to store the data; Int_t totalSize = 0; // Sum of data size (in bytes) of all events. ... Opening the File and Getting the Tree; The first thing to do is to open the file containing the tree, by calling TFile::Open(), passing the file name, and then, if the file is open (i.e. if the pointer to it is not NULL), create a TTreeReader using the tree name and the file. At the end, the code in AnalyzeTree.C should look like this:; ... // open the file; TFile *f = TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");; if (f == 0) {; // if we cannot open the file, print an error message and return immediatly; printf(""Error: cannot open http://root.cern/files/introtutorials/eventdata.root!\n"");; return;; }. // Create tyhe tree reader and its data containers; TTreeReader myReader(""EventTree"", f);. ... Getting the data out of the TTree; Fine, we have access to our tree. But now we need to get a handle on the data it stores, as shown below:; ... TTreeReaderValue<Int_t> eventSize(myReader, ""fEventSize"");. ... Loading TTree's Data; For the analysis example we need to access the events' size, which is accessible through the TTreeReaderValue eventSize. But the TTreeReader first needs to get told about which TTree entry to access. For that call TTreeReader::Next() in a loop. It will return false once it has reached the end of the TTree.; In the same loop, compute the total size of all events (simply add the current event size to the total size); ... // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Get the data from the current TTree entry",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:3639,error,error,3639,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['error'],['error']
Availability,"e function; has sharp peaks, you should increase the number of points (SetNpx); such that the peak is correctly tabulated at several points. void GetRange(Double_t& xmin, Double_t& xmax) const; Return range of a 1-D function. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Return range of a 2-D function. void GetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; Return range of function. Double_t GetSave(const Double_t* x); Get value corresponding to X in array of fSave values. TAxis * GetXaxis() const; Get x axis of the function. TAxis * GetYaxis() const; Get y axis of the function. TAxis * GetZaxis() const; Get z axis of the function. (In case this object is a TF2 or TF3). Double_t GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); Compute the gradient (derivative) wrt a parameter ipar; Parameters:; ipar - index of parameter for which the derivative is computed; x - point, where the derivative is computed; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); Compute the gradient wrt parameters; Parameters:; x - point, were the gradient is computed; grad - used to return the computed gradient, assumed to be of at least fNpar size; eps - if the errors of parameters have been computed, the step used in; numerical differentiation is eps*parameter_error.; if the errors have not been computed, step=eps is used; default value of eps = 0.01; Method is the same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:48168,error,errors,48168,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['error'],['errors']
Availability,"e generic name \(\mbox{FCN}\)).; 4.1.1 FCNBase::operator()(const std::vector\(<\)double\(>\)&); The meaning of the vector of parameters std::vector\(<\)double\(>\) in the argument of FCNBase::operator() are of course defined by the user, who uses the values of those parameters to calculate his function value. The order and the position of these parameters is strictly the one specified by the user when supplying the starting values for minimization.; The starting values must be specified by the user, either via an std::vector\(<\)double\(>\) or the MnUserParameters (see [api:parameters]) supplied as input to the M minimizers such as VariableMetricMinimizer or MnMigrad (see [api:migrad]). Later values are determined by M as it searches for the minimum or performs whatever analysis is requested by the user.; 4.1.2 FCNBase::up(); [howto:errordef] Returns the value of \(\mbox{up}\) (default value \(= 1.\)), defining parameter errors. M defines parameter errors as the change in parameter value required to change the function value by \(\mbox{up}\). Normally, for chisquared fits \(\mbox{up = 1}\), and for negative log likelihood, \(\mbox{up = 0.5}\).; 4.1.3 \(\mbox{FCN}\) function with gradient; By default first derivatives are calculated numerically by M . In case the user wants to supply his own gradient calculator (e.g. analytical derivatives), he needs to implement the FCNGradientBase interface. The size of the output vector is the same as of the input one. The same is true for the position of the elements (first derivative of the function with respect to the \(n_\mathrm{th}\) variable has index \(n\) in the output vector).; 4.2 M parameters; Interaction with the parameters of the function are essential both for M and the user. Different interfaces are provided, depending on the level of interaction.; 4.2.1 Minimal required interface; Starting values of parameters and uncertainties can be provided to M by the user via std::vector\(<\)double\(>\) vector containers. Any ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:34839,error,errors,34839,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['error'],['errors']
Availability,"e given by Eq. (6). The \(\hbox {$_s$}{\cal P}lots\) reproduce the true distributions of the species in the control variable \(x\), within the above defined statistical uncertainties. Illustrations; To illustrate the technique, one considers an example derived from the analysis where \(\hbox {$_s$}{\cal P}lots\) have been first used (charmless B decays). One is dealing with a data sample in which two species are present: the first is termed signal and the second background. A maximum Likelihood fit is performed to obtain the two yields \(N_1\) and \(N_2\) . The fit relies on two discriminating variables collectively denoted \(y\) which are chosen within three possible variables denoted \({m_{\rm ES}}\) , \(\Delta E\) and \({\cal F}\). The variable which is not incorporated in \(y\) is used as the control variable \(x\) . The six distributions of the three variables are assumed to be the ones depicted in Fig. 1. Figure 1 ; Distributions of the three discriminating variables available to perform the Likelihood fit: \({m_{\rm ES}}\) , \(\Delta E\) , \({\cal F}\) . Among the three variables, two are used to perform the fit while one is kept out of the fit to serve the purpose of a control variable. The three distributions on the top (resp. bottom) of the figure correspond to the signal (resp. background). The unit of the vertical axis is chosen such that it indicates the number of entries per bin, if one slices the histograms in 25 bins.; A data sample being built through a Monte Carlo simulation based on the distributions shown in Fig. 1, one obtains the three distributions of Fig. 2. Whereas the distribution of \(\Delta E\) clearly indicates the presence of the signal, the distribution of \({m_{\rm ES}}\) and \({\cal F}\) are less obviously populated by signal. Figure 2 ; Distributions of the three discriminating variables for signal plus background. The three distributions are the ones obtained from a data sample obtained through a Monte Carlo simulation based on the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:7388,avail,available,7388,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['avail'],['available']
Availability,"e graph to be drawn in high resolution mode.; By default, the graph is drawn in low resolution; in case the number of points is greater than the number of; pixels in the current pad.; ; ""][""; ""Cutoff"" style. When this option is selected together with; H option, the first and last vertical lines of the histogram; are not drawn.; . . void PaintGraphAsymmErrors(TGraph* theGraph, Option_t* option). Paint this TGraphAsymmErrors with its current attributes.; . void PaintGraphBentErrors(TGraph* theGraph, Option_t* option). Paint this TGraphBentErrors with its current attributes.; . void PaintGraphErrors(TGraph* theGraph, Option_t* option). Paint this TGraphErrors with its current attributes.; . void PaintGraphPolar(TGraph* theGraph, Option_t* option). Paint this TGraphPolar with its current attributes.; . void PaintGraphQQ(TGraph* theGraph, Option_t* option). Paint this graphQQ. No options for the time being.; ; . void PaintGraphSimple(TGraph* theGraph, Option_t* option). Paint a simple graph, without errors bars.; ; . void PaintPolyLineHatches(TGraph* theGraph, Int_t n, const Double_t* x, const Double_t* y). Paint a polyline with hatches on one side showing an exclusion zone. x and y; are the the vectors holding the polyline and n the number of points in the; polyline and w the width of the hatches. w can be negative.; This method is not meant to be used directly. It is called automatically; according to the line style convention.; ; . void PaintStats(TGraph* theGraph, TF1* fit). Paint the statistics box with the fit info.; ; . void Smooth(TGraph* theGraph, Int_t npoints, Double_t* x, Double_t* y, Int_t drawtype). Smooth a curve given by N points.; ; The original code come from an underlaying routine for Draw based on the; CERN GD3 routine TVIPTE:; ; Author - Marlow etc. Modified by - P. Ward Date - 3.10.1973; ; This method draws a smooth tangentially continuous curve through; the sequence of data points P(I) I=1,N where P(I)=(X(I),Y(I)); the curve is approximated by a pol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:22762,error,errors,22762,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,2,['error'],['errors']
Availability,"e graphics context gc. FontStruct_t GetFontStruct(FontH_t fh); Retrieves the associated font structure of the font specified font; handle ""fh"". Free returned FontStruct_t using FreeFontStruct(). void FreeFontStruct(FontStruct_t fs); Frees the font structure ""fs"". The font itself will be freed when; no other resource references it. void ClearWindow(Window_t id); Clears the entire area in the specified window and it is equivalent to; ClearArea(id, 0, 0, 0, 0). Int_t KeysymToKeycode(UInt_t keysym); Converts the ""keysym"" to the appropriate keycode. For example,; keysym is a letter and keycode is the matching keyboard key (which; is dependend on the current keyboard mapping). If the specified; ""keysym"" is not defined for any keycode, returns zero. void FillRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h].; using the GC you specify. GC components in use are: function, plane-mask, fill-style,; subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, and tile-stipple-y-origin.; (see also the GCValues_t structure). void DrawRectangle(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h); Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. GC components in use: function, plane-mask, line-width, line-style,; cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,; clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple,; tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list.; (see also the GCValues_t structure). void DrawSegments(Drawable_t id, GContext_t gc, Segment_t* seg, Int_t nseg); Draws multiple line segments. Each line is specified by a pair of points.; Segment_t *seg - specifies an array of segments; Int_t nseg - specifies the number of segments in the array. GC components in use: function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:56935,mask,mask,56935,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,4,['mask'],['mask']
Availability,"e has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:88867,recover,recovered,88867,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['recover'],['recovered']
Availability,"e have been copied ...; 2030/// }; 2031/// ~~~; 2032 ; 2033Long64_t TChain::Merge(TFile* file, Int_t basketsize, Option_t* option); 2034{; 2035 // We must have been passed a file, we will use it; 2036 // later to reset the compression level of the branches.; 2037 if (!file) {; 2038 // FIXME: We need an error message here.; 2039 return 0;; 2040 }; 2041 ; 2042 // Options; 2043 bool fastClone = false;; 2044 TString opt = option;; 2045 opt.ToLower();; 2046 if (opt.Contains(""fast"")) {; 2047 fastClone = true;; 2048 }; 2049 ; 2050 // The chain tree must have a list of branches; 2051 // because we may try to change their basket; 2052 // size later.; 2053 TObjArray* lbranches = GetListOfBranches();; 2054 if (!lbranches) {; 2055 // FIXME: We need an error message here.; 2056 return 0;; 2057 }; 2058 ; 2059 // The chain must have a current tree because; 2060 // that is the one we will clone.; 2061 if (!fTree) {; 2062 // -- LoadTree() has not yet been called, no current tree.; 2063 // FIXME: We need an error message here.; 2064 return 0;; 2065 }; 2066 ; 2067 // Copy the chain's current tree without; 2068 // copying any entries, we will do that later.; 2069 TTree* newTree = CloneTree(0);; 2070 if (!newTree) {; 2071 // FIXME: We need an error message here.; 2072 return 0;; 2073 }; 2074 ; 2075 // Strip out the (potential) directory name.; 2076 // FIXME: The merged chain may or may not have the; 2077 // same name as the original chain. This is; 2078 // bad because the chain name determines the; 2079 // names of the trees in the chain by default.; 2080 newTree->SetName(gSystem->BaseName(GetName()));; 2081 ; 2082 // FIXME: Why do we do this?; 2083 newTree->SetAutoSave(2000000000);; 2084 ; 2085 // Circularity is incompatible with merging, it may; 2086 // force us to throw away entries, which is not what; 2087 // we are supposed to do.; 2088 newTree->SetCircular(0);; 2089 ; 2090 // Reset the compression level of the branches.; 2091 if (opt.Contains(""c"")) {; 2092 TBranch* branch = nullptr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:74245,error,error,74245,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['error'],['error']
Availability,"e have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:17701,error,errors,17701,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,3,['error'],['errors']
Availability,e height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; const TGPicture*TGCheckButton::fOffbutton OFF picture; const TGPicture*TGCheckButton::fOnbutton ON picture; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TGedPopup*fPopup; EButtonStateTGCheckButton::fPrevStateprevious check button state; Bool_tTGTextButton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGedSelect.html:21378,down,down,21378,root/html530/TGedSelect.html,https://root.cern,https://root.cern/root/html530/TGedSelect.html,5,['down'],['down']
Availability,e height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; const TGPicture*TGCheckButton::fOffbutton OFF picture; const TGPicture*TGCheckButton::fOnbutton ON picture; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TGedPopup*fPopup; EButtonStateTGCheckButton::fPrevStateprevious check button state; Bool_tTGTextButton::fPrevStateOnbit to save previos state On/Off; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGTextButton::fStateOnbit to save the state across disable/enable; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fTHeightbutton height; TGTextLayout*TGTextButton::fTLayouttext layout; Int_tTGTextButton::fTModetext justify mode; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGTextButton::fWrapLengthwrap length; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGT,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedSelect.html:21040,down,down,21040,root/html528/TGedSelect.html,https://root.cern,https://root.cern/root/html528/TGedSelect.html,1,['down'],['down']
Availability,e histogram errors are reset to zero. ; The array binMap is explained with the method GetOutput() ; Definition at line 1475 of file TUnfoldSys.cxx. Member Data Documentation. ◆ fAoutside. TMatrixD* TUnfoldSys::fAoutside. protected . Input: underflow/overflow bins. ; Definition at line 68 of file TUnfoldSys.h. ◆ fBgrErrScaleIn. TMap* TUnfoldSys::fBgrErrScaleIn. protected . Input: background sources correlated error. ; Definition at line 76 of file TUnfoldSys.h. ◆ fBgrErrUncorrInSq. TMap* TUnfoldSys::fBgrErrUncorrInSq. protected . Input: uncorr error squared from bgr sources. ; Definition at line 74 of file TUnfoldSys.h. ◆ fBgrIn. TMap* TUnfoldSys::fBgrIn. protected . Input: size of background sources. ; Definition at line 72 of file TUnfoldSys.h. ◆ fDAinColRelSq. TMatrixD* TUnfoldSys::fDAinColRelSq. protected . Input: normalized column err.sq. (inp.matr.) ; Definition at line 66 of file TUnfoldSys.h. ◆ fDAinRelSq. TMatrixDSparse* TUnfoldSys::fDAinRelSq. protected . Input: normalized errors from input matrix. ; Definition at line 64 of file TUnfoldSys.h. ◆ fDeltaCorrAx. TMap* TUnfoldSys::fDeltaCorrAx. protected . Result: syst.shift from fSysIn on fAx. ; Definition at line 90 of file TUnfoldSys.h. ◆ fDeltaCorrX. TMap* TUnfoldSys::fDeltaCorrX. protected . Result: syst.shift from fSysIn on fX. ; Definition at line 88 of file TUnfoldSys.h. ◆ fDeltaSysTau. TMatrixDSparse* TUnfoldSys::fDeltaSysTau. protected . Result: systematic shift from tau. ; Definition at line 92 of file TUnfoldSys.h. ◆ fDtau. Double_t TUnfoldSys::fDtau. protected . Input: error on tau. ; Definition at line 78 of file TUnfoldSys.h. ◆ fEmatUncorrAx. TMatrixDSparse* TUnfoldSys::fEmatUncorrAx. protected . Result: syst.error from fDA2 on fAx. ; Definition at line 86 of file TUnfoldSys.h. ◆ fEmatUncorrX. TMatrixDSparse* TUnfoldSys::fEmatUncorrX. protected . Result: syst.error from fDA2 on fX. ; Definition at line 84 of file TUnfoldSys.h. ◆ fSysIn. TMap* TUnfoldSys::fSysIn. protected . Input: correlated erro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:50151,error,errors,50151,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['errors']
Availability,"e histogram. The bin shape is a rectangle.; It returns the bin number of the bin in the histogram. Bool_t Add(const TH1* h1, Double_t c1); Performs the operation: this = this + c1*h1. Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. Bool_t Add(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); Replace contents of this histogram by the addition of h1 and h2. void AddBinToPartition(TH2PolyBin* bin); Adds the input bin into the partition cell matrix. This method is called; in AddBin() and ChangePartition(). void ChangePartition(Int_t n, Int_t m); Changes the number of partition cells in the histogram.; Deletes the old partition and constructs a new one. TObject* Clone(const char* newname = """") const; Make a complete copy of the underlying object. If 'newname' is set,; the copy's name will be set to that name. void ClearBinContents(); Clears the contents of all bins in the histogram. void Reset(Option_t* option); Reset this histogram: contents, errors, etc. Int_t FindBin(Double_t x, Double_t y, Double_t z = 0); Returns the bin number of the bin at the given coordinate. -1 to -9 are; the overflow and underflow bins. overflow bin -5 is the unbinned areas in; the histogram (also called ""the sea""). The third parameter can be left; blank.; The overflow/underflow bins are:. -1 | -2 | -3. -4 | -5 | -6. -7 | -8 | -9. where -5 means is the ""sea"" bin (i.e. unbinned areas). Int_t Fill(Double_t x, Double_t y); Increment the bin containing (x,y) by 1.; Uses the partitioning algorithm. Int_t Fill(Double_t x, Double_t y, Double_t w); Increment the bin containing (x,y) by w.; Uses the partitioning algorithm. Int_t Fill(const char* name, Double_t w); Increment the bin named ""name"" by w. void FillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1); Fills a 2-D histogram with an array of values and weights. ntimes: number of entries in arrays x and w; (array size must be ntimes*str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH2Poly.html:35913,error,errors,35913,root/html602/TH2Poly.html,https://root.cern,https://root.cern/root/html602/TH2Poly.html,2,['error'],['errors']
Availability,"e if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TApplicationRemote.html:16682,error,error,16682,root/html534/TApplicationRemote.html,https://root.cern,https://root.cern/root/html534/TApplicationRemote.html,1,['error'],['error']
Availability,"e if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationRemote.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2009-12-07 13:50; This page has been automatically generated. For comments or suggestions regar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationRemote.html:16353,error,error,16353,root/html526/TApplicationRemote.html,https://root.cern,https://root.cern/root/html526/TApplicationRemote.html,1,['error'],['error']
Availability,"e if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationRemote.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2010-10-06 16:19; This page has been automatically generated. For comments or suggestions regar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationRemote.html:16512,error,error,16512,root/html528/TApplicationRemote.html,https://root.cern,https://root.cern/root/html528/TApplicationRemote.html,1,['error'],['error']
Availability,"e if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationRemote.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TApplicationRemote.html:16663,error,error,16663,root/html530/TApplicationRemote.html,https://root.cern,https://root.cern/root/html530/TApplicationRemote.html,1,['error'],['error']
Availability,"e if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationRemote.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TApplicationRemote.html:16663,error,error,16663,root/html532/TApplicationRemote.html,https://root.cern,https://root.cern/root/html532/TApplicationRemote.html,1,['error'],['error']
Availability,"e if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For comme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TApplicationRemote.html:17556,error,error,17556,root/html604/TApplicationRemote.html,https://root.cern,https://root.cern/root/html604/TApplicationRemote.html,1,['error'],['error']
Availability,"e if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Send a file to the server. Return 0 on success, -1 in case of error.; If defined, the full path of the remote path will be rfile.; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run). void Terminate(Int_t status = 0); Terminate this session. void SetPortParam(Int_t lower = -1, Int_t upper = -1, Int_t attempts = -1); Set port parameters for tunnelling. A value of -1 means unchanged. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Parse a single command line and forward the request to the remote server; where it will be processed. The line is either a C++ statement or an; interpreter command starting with a ""."".; Return the return value of the command casted to a long. void Print(Option_t* option = """") const; Print some info about this instance. void Interrupt(Int_t type = kRRI_Hard); Send interrupt OOB byte to server.; Returns 0 if ok, -1 in case of error. void Browse(TBrowser* b); Browse remote application (working directory and ROOT files). Int_t Broadcast(const TMessage& mess). TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0). Bool_t IsFolder() const; { return kTRUE; }. const char * ApplicationName() const; { return fName; }. Bool_t IsValid() const; { return (fSocket) ? kTRUE : kFALSE; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationRemote.html:17556,error,error,17556,root/html602/TApplicationRemote.html,https://root.cern,https://root.cern/root/html602/TApplicationRemote.html,1,['error'],['error']
Availability,e if owned by this class ;  ; TUnfoldBinning * fOwnedOutputBins;  pointer to output binning scheme if owned by this class ;  ; TUnfoldBinning * fRegularisationConditions;  binning scheme for the regularisation conditions ;  ;  Protected Attributes inherited from TUnfoldSys; TMatrixD * fAoutside;  Input: underflow/overflow bins. ;  ; TMap * fBgrErrScaleIn;  Input: background sources correlated error. ;  ; TMap * fBgrErrUncorrInSq;  Input: uncorr error squared from bgr sources. ;  ; TMap * fBgrIn;  Input: size of background sources. ;  ; TMatrixD * fDAinColRelSq;  Input: normalized column err.sq. (inp.matr.) ;  ; TMatrixDSparse * fDAinRelSq;  Input: normalized errors from input matrix. ;  ; TMap * fDeltaCorrAx;  Result: syst.shift from fSysIn on fAx. ;  ; TMap * fDeltaCorrX;  Result: syst.shift from fSysIn on fX. ;  ; TMatrixDSparse * fDeltaSysTau;  Result: systematic shift from tau. ;  ; Double_t fDtau;  Input: error on tau. ;  ; TMatrixDSparse * fEmatUncorrAx;  Result: syst.error from fDA2 on fAx. ;  ; TMatrixDSparse * fEmatUncorrX;  Result: syst.error from fDA2 on fX. ;  ; TMap * fSysIn;  Input: correlated errors. ;  ; TMatrixDSparse * fVyyData;  Input: error on fY prior to bgr subtraction. ;  ; TMatrixD * fYData;  Input: fY prior to bgr subtraction. ;  ;  Protected Attributes inherited from TUnfold; TMatrixDSparse * fA;  response matrix A ;  ; Double_t fBiasScale;  scale factor for the bias ;  ; EConstraint fConstraint;  type of constraint to use for the unfolding ;  ; TArrayI fHistToX;  mapping of histogram bins to matrix indices ;  ; TMatrixDSparse * fL;  regularisation conditions L ;  ; ERegMode fRegMode;  type of regularisation ;  ; TArrayD fSumOverY;  truth vector calculated from the non-normalized response matrix ;  ; Double_t fTauSquared;  regularisation parameter tau squared ;  ; TMatrixDSparse * fVyy;  covariance matrix Vyy corresponding to y ;  ; TMatrixD * fX0;  bias vector x0 ;  ; TArrayI fXToHist;  mapping of matrix indices to histogram bins ;  ; TMatr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:38173,error,error,38173,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['error'],['error']
Availability,"e image, in pixels ; [in]heightthe height of the image, in pixels . Reimplemented from TVirtualX.; Definition at line 7263 of file TGWin32.cxx. ◆ CreatePictureFromData(). Bool_t TGWin32::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a pixture pixmap from data. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 5647 of file TGWin32.cxx. ◆ CreatePictureFromFile(). Bool_t TGWin32::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a picture pixmap from data on file. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 5613 of file TGWin32.cxx. ◆ CreatePixmap() [1/2]. Pixmap_t TGWin32::CreatePixmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height, . ULong_t ; forecolor, . ULong_t ; backcolor, . Int_t ; depth . ). overridevirtual . Create a pixmap from bitmap data. ; Ones will get foreground color and zeroes background color. ; Reimplemented from TVirtualX.; Definition at line 5563 of file TGWin32.cxx. ◆ CreatePixmap() [2/2]. Pixmap_t TGWin32::CreatePixmap ; (; Drawable_t ; id, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Creates a pixmap of the width and height you specified and returns a pixmap ID that identifies it. ; Reimplemented from TVirtualX.; Definition at line 5551 of file TGWin32.cxx. ◆ CreatePixmapFromData(). Pixmap_t TGWin32::CreatePixmapFromData ; (; unsigned char * ; bits, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . create an image from RGB data. ; RGB data is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:62787,mask,mask,62787,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['mask'],['mask']
Availability,"e in $ROOTSYS/tutorials/tree/cernstaff.C.; If a variable is defined as char* it is drawn as a string by default. You change that and draw the value of char[0] as an integer by adding an arithmetic operation to the expression as shown below.; // draw the integer value of MyChar[0] where ""MyChar"" is char[5]; tree.Draw(""MyChar + 0"");; 3.14.4 Sort Options; When using the options 2 or 3 above, the labels are automatically added to the list (THashList) of labels for a given axis. By default, an axis is drawn with the order of bins corresponding to the filling sequence. It is possible to reorder the axis alphabetically or by increasing or decreasing values. The reordering can be triggered via the TAxis context menu by selecting the menu item “LabelsOption” or by calling directly.; TH1::LabelsOption(option,axis);; Here axis may be X, Y, or Z. The parameter option may be:. “a” sort by alphabetic order; “>” sort by decreasing values; “<” sort by increasing values; “h” draw labels horizontal; “v” draw labels vertical; “u” draw labels up (end of label right adjusted); “d” draw labels down (start of label left adjusted). When using the option second above, new labels are added by doubling the current number of bins in case one label does not exist yet. When the filling is terminated, it is possible to trim the number of bins to match the number of active labels by calling:; TH1::LabelsDeflate(axis);; Here axis may be X, Y, or Z. This operation is automatic when using TTree::Draw . Once bin labels have been created, they become persistent if the histogram is written to a file or when generating the C++ code via SavePrimitive .; 3.15 Histogram Stacks; A THStack is a collection of TH1 (or derived) objects. Use THStack::Add( TH1 *h) to add a histogram to the stack. The THStack does not own the objects in the list. Stacked histograms. By default, THStack::Draw draws the histograms stacked as shown in the left pad in the picture above. If the option ""nostack"" is used, the histograms ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:123055,down,down,123055,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['down']
Availability,"e in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; std::unique_ptr< RooHist > createEmptyResidHist (const RooCurve &curve, bool normalize=false) const;  ; void fillResidHist (RooHist &residHist, const RooCurve &curve, bool normalize=false, bool useAverage=false) const;  ; void initialize ();  Perform common initialization for all constructors. ;  ; Int_t roundBin (double y);  Return the nearest positive integer to the input value and print a warning if an adjustment is required. ;  ;  Protected Member Functions inherited from TGraphAsymmErrors; Double_t ** Allocate (Int_t size) override;  Allocate internal data structures for size points. ;  ; void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy and release. ;  ; Bool_t CopyPoints (Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) override;  Copy errors from fE*** to arrays[***] or to f*** Copy points. ;  ; Bool_t CtorAllocate ();  Should be called from ctors after fNpoints has been set. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with asymmetric errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end] ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:37675,error,errors,37675,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['error'],['errors']
Availability,"e in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number .; The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD which can handle singular matrices . For each decomposition this will be checked in a different way; in LU the matrix is considered singular when, at some point in the decomposition, a diagonal element < fTol . Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; a#define a(i)Definition RSha256.hxx:99; double; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 33 of file TDecompBase.h. Public Member Functions;  TDecompBase ();  Default constructor. ;  ;  TDecompBase (const TDecompBase &another);  Copy constructor. ;  ;  ~TDecompBase () override;  ; virtual Double_t Condition ();  Matrix condition number. ;  ; virtual Bool_t Decompose ()=0;  ; virtual void Det (Double_t &d1, Double_t &d2);  Matrix determinant det = d1*TMath::Power(2.,d2) ;  ; Int_t GetColLwb () const;  ; Double_t GetCondition () const;  ; Double_t GetDet1 () const;  ; Double_t GetDet2 () ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:3956,toler,tolerance,3956,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['toler'],['tolerance']
Availability,"e in size of parameter vector)Definition FitResult.h:345; ROOT::Fit::FitResult::fBoundParamsstd::map< unsigned int, unsigned int > fBoundParamslist of limited parametersDefinition FitResult.h:358; ROOT::Fit::FitResult::FittedBinDataconst BinData * FittedBinData() constreturn BinData used in the fit (return a nullptr in case a different fit is done or the data are not ...Definition FitResult.cxx:631; ROOT::Fit::FitResult::ParErrordouble ParError(unsigned int i) constparameter error by indexDefinition FitResult.h:183; ROOT::Fit::FitResult::FillResultvoid FillResult(const std::shared_ptr< ROOT::Math::Minimizer > &min, const FitConfig &fconfig, const std::shared_ptr< IModelFunction > &f, bool isValid, unsigned int sizeOfData=0, int fitType=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the conf...Definition FitResult.cxx:100; ROOT::Fit::FitResult::UpperErrordouble UpperError(unsigned int i) constupper Minos error. If Minos has not run for parameter i return the parabolic errorDefinition FitResult.cxx:339; ROOT::Fit::FitResult::fValdouble fValminimum function valueDefinition FitResult.h:350; ROOT::Fit::FitResult::fEdmdouble fEdmexpected distance from minimumDefinition FitResult.h:351; ROOT::Fit::FitResult::fErrorsstd::vector< double > fErrorserrorsDefinition FitResult.h:361; ROOT::Fit::FitResult::NormalizedErrorsbool NormalizedErrors() constflag to check if errors are normalizedDefinition FitResult.h:308; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::GetErrorsconst double * GetErrors() constparameter errors (return const pointer)Definition FitResult.h:164; ROOT::Fit::FitResult::fMinimizerstd::shared_ptr< ROOT::Math::Minimizer > fMinimizer! minimizer object used for fittingDefinition FitResult.h:353; ROOT::Fit::FitResult::fValidbool fVali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:17966,error,error,17966,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,1,['error'],['error']
Availability,"e in the MathCore library implementing the Brent method (not using the derivatives) and one in the MathMore library implementing several different methods, using in some case the derivatives.; 13.10.1.1 ROOT::Math::BrentMinimizer1D; This class implements the Brent method to minimize one-dimensional function. An interval containing the function minimum must be provided. Here is an example where we define the function to minimize as a lambda function (requires C++11). The function to minimize must be given to the class implementing the algorithm as a ROOT::Math::IBaseFunctionOneDim object.; ROOT::Math::Functor1D func( [](double x){ return 1 + -4*x + 1*x*x; } );. ROOT::Math::BrentMinimizer1D bm;; bm.SetFunction(func, -10,10);; bm.Minimize(10,0,0);; cout << ""Minimum: f("" << bm.XMinimum() << "") = "" <<bm.FValMinimum() << endl;; Note that when setting the function to minimize, one needs to provide the interval range to find the minimum. In the Minimize call, the maximum number of function calls, the relative and absolute tolerance must be provided.; 13.10.1.2 ROOT::Math::GSLMInimizer1D; This class wraps two different methods from the GSL. The algorithms which can be chosen at construction time are GOLDENSECTION, which is the simplest method but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. The algorithm can be chosen as a different enumeration in the constructor: * ROOT::Math::Minim1D::kBRENT for the Brent algorithm (default) * ROOT::Math::Minim1D::kGOLDENSECTION for the golden section algorithm; // this makes class with the default Brent algorithm; ROOT::Math::GSLMinimizer1D minBrent;; // this make the class with the Golden Section algorithm; ROOT::Math::GSLMinimizer1D minGold(ROOT::Math::Minim1D::kGOLDENSECTION);; The interface to set the function and to minimize is the same as in the case of the BrentMinimizer1D.; 13.10.1.3 Using the TF1 class; It is possible to perform the one-dimensional minimization/maximiza",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:715763,toler,tolerance,715763,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['toler'],['tolerance']
Availability,"e in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:72070,error,error,72070,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,2,['error'],['error']
Availability,"e input vector (i). Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply added to the; existing histogram. Function Members (Methods); public:. TUnfoldSys(const TUnfoldSys&); TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegMod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:2605,error,error,2605,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,2,['error'],"['error', 'errors']"
Availability,"e input vector (i). Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)+(e). Error matrices can be added to existing histograms.; This is useful to retreive the sum of several error matrices.; If the last argument of the GetEmatrixXXX() methods is set to kFALSE,; the histogram is not cleared, but the error matrix is simply added to the; existing histogram. Function Members (Methods); public:. virtual~TUnfoldSys(); voidTObject::AbstractMethod(const char* method) const; voidAddSysError(const TH2* sysError, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:2629,error,error,2629,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,4,['error'],"['error', 'errors']"
Availability,"e interface and return value is; identical to TSystem::GetPathInfo(). void Close(Option_t* option = """"); Close remote file. void Flush(); Flush file to disk. void Init(Bool_t create); Initialize a TNetFile object. Bool_t IsOpen() const; Retruns kTRUE if file is open, kFALSE otherwise. void Print(Option_t* option) const; Print some info about the net file. void PrintError(const char* where, Int_t err); Print error string depending on error code. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via rootd daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via rootd daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read a list of buffers given in pos[] and len[] and return it in a single; buffer.; Returns kTRUE in case of error. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via rootd daemon.; Returns kTRUE in case of error. Int_t Recv(Int_t& status, EMessageTypes& kind); Return status from rootd server and message kind. Returns -1 in; case of error otherwise 8 (sizeof 2 words, status and kind). void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. void ConnectServer(Int_t* stat, EMessageTypes* kind, Int_t netopt, Int_t tcpwindowsize, Bool_t forceOpen, Bool_t forceRead); Connect to remote rootd server. void Create(const char* url, Option_t* option, Int_t netopt); Create a NetF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetFile.html:25978,error,error,25978,root/html528/TNetFile.html,https://root.cern,https://root.cern/root/html528/TNetFile.html,6,['error'],['error']
Availability,"e interval oscillates significantly according to the total number of; events and the true efficiency. In order to decrease the impact of this; oscillation on the actual coverage probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. Int_t Merge(TCollection* list); Adds all graphs with asymmetric errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphAsymmErrors.html:22817,error,errors,22817,root/html602/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html602/TGraphAsymmErrors.html,2,['error'],['errors']
Availability,"e interval oscillates significantly according to the total number of; events and the true efficiency. In order to decrease the impact of this; oscillation on the actual coverage probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPoint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphAsymmErrors.html:22328,error,errors,22328,root/html534/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html534/TGraphAsymmErrors.html,1,['error'],['errors']
Availability,"e intervals. SumW2 draws symmetric sum-of-weights error; Binning(double xlo, double xhi, -- Use specified binning to draw dataset; int nbins); Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t factor) -- Apply global rescaling factor to histogram. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is black; LineWidth(Int_t width) -- Select line with in pixels, default is 3; MarkerStyle(Int_t style) -- Select the ROOT marker style, default is 21; MarkerColor(Int_t color) -- Select the ROOT marker color, default is black; MarkerSize(Double_t size) -- Select the ROOT marker size; XErrorSize(Double_t frac) -- Select size of X error bar as fraction of the bin width, default is 1. Misc. other options. Name(const chat* name) -- Give curve specified name in frame. Useful if curve is to be referenced later; Invisble(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(); AddTo(const char* name, -- Add constructed histogram to already existing histogram with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). TH1 * createHistogram(const char* varNameList, Int_t xbins = 0, Int_t ybins = 0, Int_t zbins = 0) const; Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this dataset for the variables with given names; The range of each observable that is histogrammed is always automatically ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:19552,error,error,19552,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,4,['error'],['error']
Availability,"e intervals. SumW2 draws symmetric sum-of-weights error; Binning(int nbins, double xlo, -- Use specified binning to draw dataset; double xhi); Binning(const RooAbsBinning&) -- Use specified binning to draw dataset; Binning(const char* name) -- Use binning with specified name to draw dataset; RefreshNorm(Bool_t flag) -- Force refreshing for PDF normalization information in frame.; If set, any subsequent PDF will normalize to this dataset, even if it is; not the first one added to the frame. By default only the 1st dataset; added to a frame will update the normalization information; Rescale(Double_t factor) -- Apply global rescaling factor to histogram. Histogram drawing options. DrawOption(const char* opt) -- Select ROOT draw option for resulting TGraph object; LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is black; LineWidth(Int_t width) -- Select line with in pixels, default is 3; MarkerStyle(Int_t style) -- Select the ROOT marker style, default is 21; MarkerColor(Int_t color) -- Select the ROOT marker color, default is black; MarkerSize(Double_t size) -- Select the ROOT marker size; XErrorSize(Double_t frac) -- Select size of X error bar as fraction of the bin width, default is 1. Misc. other options. Name(const chat* name) -- Give curve specified name in frame. Useful if curve is to be referenced later; Invisble(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(); AddTo(const char* name, -- Add constructed histogram to already existing histogram with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). TH1 * createHistogram(const char* varNameList, Int_t xbins = 0, Int_t ybins = 0, Int_t zbins = 0) const; Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this dataset for the variables with given names; The range of each observable that is histogrammed is always automatically ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsData.html:20743,error,error,20743,root/html534/RooAbsData.html,https://root.cern,https://root.cern/root/html534/RooAbsData.html,3,['error'],['error']
Availability,"e is 32000 bytes and should be ok for most cases.; You can specify a larger value (e.g. 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if the class can not be split. TBranch* BronchExec(const char* name, const char* classname, void* addobj, Bool_t isptrptr, Int_t bufsize, Int_t splitlevel); Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. void Browse(TBrowser* ); Browse content of the TTree. Int_t BuildIndex(const char* majorname, const char* minorname = ""0""); Build a Tree Index (default is TTreeIndex).; See a description of the parameters and functionality in; TTreeIndex::TTreeIndex(). The return value is the number of entries in the Index (< 0 indicates failure). A TTreeIndex object pointed by fTreeIndex is created.; This object will be automatically deleted by the TTree destructor.; See also comments in TTree::SetTreeIndex(). TStreamerInfo* BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); Build StreamerInfo for class cl.; pointer is an optional argument that may contain a pointer to an object of cl. TFile* ChangeFile(TFile* file); Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize.; Create a new file. If the original file is named ""myfile.root"",; subsequent files are named ""myfile_1.root"", ""myfile_2.root"", etc. Returns a pointer to the new file. Currently, the automatic change of file is restricted; to the case where the tree is in the top level directory.; The file should not contain sub-directories. Before switching to a new file, the tree header is written; to the current file, then the current file is closed. To process the multiple files created by ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:54885,failure,failure,54885,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,4,['failure'],['failure']
Availability,"e is opened and can be accessed ;  ; Bool_t IsOracle () const;  checks, if Oracle database ;  ; void MakeFree (Long64_t, Long64_t) final;  Mark unused bytes on the file. ;  ; void MakeProject (const char *, const char *=""*"", Option_t *=""new"") final;  Generate source code necessary to access the objects stored in the file. ;  ; TString MakeSelectQuery (TClass *cl);  Produce SELECT statement which can be used to get all data of class cl in one SELECT statement. ;  ; void Map () final;  ; void Map (Option_t *) final;  List the contents of a file sequentially. ;  ; void Paint (Option_t *="""") final;  Paint all objects in the file. ;  ; void Print (Option_t *="""") const final;  Print all objects in the file. ;  ; Bool_t ReadBuffer (char *, Int_t) final;  Read a buffer from the file. ;  ; Bool_t ReadBuffer (char *, Long64_t, Int_t) final;  Read a buffer from the file at the offset 'pos' in the file. ;  ; void ReadFree () final;  Read the FREE linked list. ;  ; Int_t Recover () final;  Attempt to recover file if not correctly closed. ;  ; Int_t ReOpen (Option_t *mode) final;  Reopen a file with a different access mode, like from READ to See TFile::Open() for details. ;  ; void ResetErrno () const final;  Method resetting the errno. ;  ; Bool_t Rollback ();  Rollback all operations, done after StartTransaction() call. ;  ; void Seek (Long64_t, ERelativeTo=kBeg) final;  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; void SetArrayLimit (Int_t limit=20);  Defines maximum number of columns for array representation If array size bigger than limit, array data will be converted to raw format This is usefull to prevent tables with very big number of columns If limit==0, all arrays will be stored in raw format If limit<0, all array values will be stored in column form Default value is 21. ;  ; void SetEND (Long64_t) final;  ; void SetTablesType (const char *table_type);  Defines tables type, which is used in CREATE TABLE statements Now is only used for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:12894,recover,recover,12894,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['recover'],['recover']
Availability,"e just a call to MultiSolve with as input argument the unit matrix . Note that for a matrix a(m,n) with m > n a pseudo-inverse is calculated . Tolerances and Scaling; The tolerance parameter (which is a member of this base class) plays a crucial role in all operations of the decomposition classes . It gives the user a powerful tool to monitor and steer the operations Its default value is sqrt(epsilon) where 1+epsilon = 1; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number .; The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD which can handle singular matrices . For each decomposition this will be checked in a different way; in LU the matrix is considered singular when, at some point in the decomposition, a diagonal element < fTol . Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; a#define a(i)Definition RSha256.hxx:99; double; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 33 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:3492,toler,tolerance,3492,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['toler'],['tolerance']
Availability,"e last three entries on the output of TFile::Map() are the list of keys, the list of free segments, and the address where the data ends.. When a file is closed, it writes a linked list of keys at the end of the file. This is what we see in the third to the last entry. In our example, the list of keys is stored in 732 bytes beginning at byte# 8244.; 20010404/092347 At:8244 N=732 KeysList; 20010404/092347 At:8976 N=53 FreeSegments; 20010404/092347 At:9029 N=1 END; The second to last entry is a list of free segments. In our case, this starts 8976 and is not very long, only 53 bytes, since we have not deleted any objects. The last entry is the address of the last byte in the file.; 11.1.6 File Recovery; A file may become corrupted or it may be impossible to write it to disk and close it properly. For example if the file is too large and exceeds the disk quota, or the job crashes or a batch job reaches its time limit before the file can be closed. In these cases, it is imperative to recover and retain as much information as possible. ROOT provides an intelligent and elegant file recovery mechanism using the redundant directory information in the record header.; If a file that has been not properly closed is opened again, it is scanned and rebuilt according to the information in the record header. The recovery algorithm reads the file and creates the saved objects in memory according to the header information. It then rebuilds the directory and file structure. If the file is opened in write mode, the recovery makes the correction on disk when the file is closed; however if the file is opened in read mode, the correction can not be written to disk. You can also explicitly invoke the recovery procedure by calling the TFile::Recover() method. You can recover the directory structure, but you cannot save what you recovered to the file on disk. In the following example, we interrupted and aborted the previous ROOT session, causing the file not to be closed. When we start a new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:440420,recover,recover,440420,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['recover'],['recover']
Availability,"e lib was already loaded, -1 in case lib does not exist; or in case of error and -2 in case of version mismatch.; When entry is specified the loaded lib is; searched for this entry point (return -1 when entry does not exist,; 0 otherwise). When the system flag is kTRUE, the library is consisdered; a permanent systen library that should not be unloaded during the; course of the session. char * DynamicPathName(const char* lib, Bool_t quiet = kFALSE); Need to return the equivalent of LD_LIBRARY_PATH. Func_t DynFindSymbol(const char* module, const char* entry); Find specific entry point in specified library. Specify ""*"" for lib; to search in all libraries. void Unload(const char* module); Unload a shared library. void ListSymbols(const char* module, const char* re = """"); List symbols in a shared library. void ListLibraries(const char* regexp = """"); List all loaded shared libraries. Regexp is a wildcard expression,; see TRegexp::MakeWildcard. TString & GetLastErrorString(); Return the thread local storage for the custom last error message. const TString & GetLastErrorString() const; Return the thread local storage for the custom last error message. const char * GetLinkedLibraries(); Get list of shared libraries loaded at the start of the executable.; Returns 0 in case list cannot be obtained or in case of error. const char * GetLibraries(const char* regexp = """", const char* option = """", Bool_t isRegexp = kTRUE); Return a space separated list of loaded shared libraries.; Regexp is a wildcard expression, see TRegexp::MakeWildcard.; This list is of a format suitable for a linker, i.e it may contain; -Lpathname and/or -lNameOfLib.; Option can be any of:; S: shared libraries loaded at the start of the executable, because; they were specified on the link line.; D: shared libraries dynamically loaded after the start of the program.; For MacOS only:; L: list the .dylib rather than the .so (this is intended for linking); This options is not the default. TInetAddress GetHostByName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSystem.html:34513,error,error,34513,root/html534/TSystem.html,https://root.cern,https://root.cern/root/html534/TSystem.html,1,['error'],['error']
Availability,"e list of signal handlers. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 542 of file TSystem.cxx. ◆ RemoveStdExceptionHandler(). TStdExceptionHandler * TSystem::RemoveStdExceptionHandler ; (; TStdExceptionHandler * ; eh). virtual . Remove an exception handler from list of exception handlers. ; Returns the handler or 0 if the handler was not in the list of exception handlers. ; Definition at line 621 of file TSystem.cxx. ◆ RemoveTimer(). TTimer * TSystem::RemoveTimer ; (; TTimer * ; ti). virtual . Remove timer from list of system timers. ; Returns removed timer or 0 if timer was not active. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 481 of file TSystem.cxx. ◆ Rename(). int TSystem::Rename ; (; const char * ; from, . const char * ; to . ). virtual . Rename a file. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1350 of file TSystem.cxx. ◆ ResetErrno(). void TSystem::ResetErrno ; (; ). static . Static function resetting system error number. ; Definition at line 284 of file TSystem.cxx. ◆ ResetSignal(). void TSystem::ResetSignal ; (; ESignals ; sig, . Bool_t ; reset = kTRUE . ). virtual . If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 576 of file TSystem.cxx. ◆ ResetSignals(). void TSystem::ResetSignals ; (; ). virtual . Reset signals handlers to previous behaviour. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 584 of file TSystem.cxx. ◆ ResetTimer(). virtual void TSystem::ResetTimer ; (; TTimer * ; ). inlinevirtual . Reimplemented in TUnixSystem.; Definition at line 396 of file TSystem.h. ◆ Run(). void TSystem::Run ; (; ). virtual . System event loop. ; Definition at line 343 of file TSystem.cxx. ◆ Select() [1/2]. Int_t TSystem::Select ; (; TFileHandler * ; fh, . Long_t ; timeout . ). virtual . Select on active file descriptors (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:80675,error,error,80675,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['error'],['error']
Availability,"e list.Definition TList.cxx:194; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Paintvoid Paint(Option_t *option="""") overridePaint this pavelabel with its current attributes.Definition TPaveLabel.cxx:111; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Classstatic TClass * Class(); TPaveText::fLongestInt_t fLongestLength of the longest line.Definition TPaveText.h:25; TPaveText::GetSizevirtual Int_t GetSize() constreturn number of text lines (ignoring TLine, etc)Definition TPaveText.cxx:373; TPaveText::~TPaveText~TPaveText() overridepavetext default destructor.Definition TPaveText.cxx:118; TPaveT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8cxx_source.html:37921,error,error,37921,doc/master/TPaveText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8cxx_source.html,1,['error'],['error']
Availability,"e mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoParallel(Int_t nodes, Bool_t accept = kFALSE, Bool_t random = kFALSE); Go in parallel mode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:57571,mask,mask,57571,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['mask'],['mask']
Availability,"e matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual bool Minimize ()=0;  method to perform the minimization ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual double MinValue () const =0;  return minimum function value ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NDim () const =0;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; virtual unsigned int NFree () const;  n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:6989,error,error,6989,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['error'],['error']
Availability,"e matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5489,error,error,5489,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['error'],['error']
Availability,"e matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumiliMinimizer.html:5193,error,error,5193,doc/master/classTFumiliMinimizer.html,https://root.cern,https://root.cern/doc/master/classTFumiliMinimizer.html,2,['error'],['error']
Availability,"e mean of Y = S(Y)/SQRT(N); where S(Y) is the standard deviation (RMS) of the Y data in the bin; and N is the number of bin entries (from TProfile::GetBinEntries(ibin) ); (i.e the errors are the standard error on the bin content of the profile). 's' Errors are the standard deviation of Y, S(Y). 'i' Errors are S(Y)/SQRT(N) (standard error on the mean as in the default); The only difference is only when the standard deviation in Y is zero.; In this case the error a standard deviation = 1/SQRT(12) is assumed and the error is; 1./SQRT(12*N).; This approximation assumes that the Y values are integer (e.g. ADC counts); and have an implicit uncertainty of y +/- 0.5. With the assumption that the probability that y; takes any value between y-0.5 and y+0.5 is uniform, its standard error is 1/SQRT(12). 'g' Errors are 1./SQRT(W) where W is the sum of the weights for the bin J; W is obtained as from TProfile::GetBinEntries(ibin); This errors corresponds to the standard deviation of weighted mean where each; measurement Y is uncorrelated and has an error sigma, which is expressed in the; weight used to fill the Profile: w = 1/sigma^2; The resulting error in TProfile is then 1./SQRT( Sum(1./sigma^2) ). TProfile(const TProfile& profile); Copy constructor. Bool_t Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. Bool_t Add(const TH1* h1, Double_t c1 = 1); Performs the operation: this = this + c1*h1. Bool_t Add(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); -*-*Replace contents of this profile by the addition of h1 and h2; *-* =============================================================. this = c1*h1 + c2*h2. c1 and c2 are considered as weights applied to the two summed profiles.; The operation acts therefore like merging the two profiles with a weight c1 and c2. void Approximate(Bool_t approx = kTRUE); static function; set the fgApproximate flag. When the flag is true, the function GetBinError; will approximate the b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:31727,error,errors,31727,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,9,['error'],"['error', 'errors']"
Availability,"e merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:42130,error,error,42130,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['error']
Availability,"e mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSocket.html:19142,error,error,19142,root/html530/TSocket.html,https://root.cern,https://root.cern/root/html530/TSocket.html,9,['error'],['error']
Availability,"e mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionLevel(Int_t level = 1); Set the message compression level. Can be between 0 and 9 with 0; being no compression and 9 maximum compression. In general the default; level of 1 is the best compromise between achieved compression and; cpu time. Compression will only happen when the message is > 256 bytes. Bool_t Authenticate(const char* user); Authenticated the socket with specified user. TSocket * CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:18865,error,error,18865,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,1,['error'],['error']
Availability,"e meta-data from the previous HEAD (author, etc) with the exception of the commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the package name tig from the default repositories.; On RHEL-based systems it is available from the additional repository RepoForge.; On OS X it is easily installed via Homebrew:; brew install tig. Tig pager mode; Many git commands can be piped into tig. When tig is invoked this way, it is in pager mode: output will be colored according to the input format, and colored.; For instance it is possible to pipe the differences of one file like this:; git diff path/to/file.cxx | tig. or see the changes of one revision like this:; git show b204d4c87 | tig. The most important interactive tig commands are:. 'h': opens the help screen; 'q': closes current window; 'Q': closes all windows and exits. Log view; Tig invoked without any argument spawns a full log view with one line per commit including author, date and log message. Heads of the different branches are clearly indicated. To see a graph view indicating branching graphically (just like git log --oneline --graph), do:; tig --all. A log can be selected with Enter to see the revision changes.; An example of useful application of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:16502,avail,available,16502,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['avail'],['available']
Availability,"e mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_t * GetUserInfo(const char* user = 0); Returns all user info in the UserGroup_t structure. If user = 0, returns; current user's id info. The returned structure must be deleted by the; user. In case of error 0 is returned. UserGroup_t * GetGroupInfo(Int_t gid); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; The returned structure must be deleted by the user. In case of; error 0 is returned. UserGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. void Unsetenv(const char* name); Unset environment variable. const char * Getenv(const char* env); Get environment variable. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:30610,error,error,30610,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,6,['error'],['error']
Availability,"e name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPFile.html:12571,error,error,12571,root/html530/TZIPFile.html,https://root.cern,https://root.cern/root/html530/TZIPFile.html,5,['error'],['error']
Availability,"e name of this curve. void printTitle(ostream& os) const; Print the title of this curve. void printClassName(ostream& os) const; Print the class name of this curve. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the details of this curve. Double_t chiSquare(const RooHist& hist, int nFitParam) const; Calculate the chi^2/NDOF of this curve with respect to the histogram; 'hist' accounting nFitParam floating parameters in case the curve; was the result of a fit. Double_t average(Double_t lo, Double_t hi) const; Return average curve value in [xFirst,xLast] by integrating curve between points; and dividing by xLast-xFirst. Int_t findPoint(Double_t value, Double_t tolerance = 1.0E-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1.0E-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:23720,toler,tolerance,23720,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,2,['toler'],['tolerance']
Availability,"e name.Definition TTreeReaderValue.cxx:693; TBranchElementA Branch for the case of an object.Definition TBranchElement.h:39; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TDictionaryThis class defines an abstract interface that must be implemented by all classes that contain diction...Definition TDictionary.h:168; TLeafA TLeaf describes individual elements of a TBranch See TBranch structure in TTree.Definition TLeaf.h:57; TStringBasic string class.Definition TString.h:139; TTreeReaderValueAn interface for reading values stored in ROOT columnar datasets.Definition TTreeReaderValue.h:174; TTreeReaderValue::operator->T * operator->()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:201; TTreeReaderValue::TTreeReaderValueTTreeReaderValue()=delete; TTreeReaderValue::GetT * Get()Return a pointer to the value of the current entry.Definition TTreeReaderValue.h:189; TTreeReaderValue::TTreeReaderValueTTreeReaderValue(TTreeReader &tr, const char *branchname)Definition TTreeReaderValue.h:180; TTreeReaderValue::operator*T & operator*()Return a reference to the value of the current entry.Definition TTreeReaderValue.h:206; TTreeReaderValue::NonConstT_ttypename std::remove_const< T >::type NonConstT_tDefinition TTreeReaderValue.h:178; TTreeReaderValue::GetDerivedTypeNameconst char * GetDerivedTypeName() const overrideGet the template argument as a string.Definition TTreeReaderValue.h:211; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. treetreeplayerincTTreeReaderValue.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReaderValue_8h_source.html:20263,robust,robust,20263,doc/master/TTreeReaderValue_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReaderValue_8h_source.html,1,['robust'],['robust']
Availability,"e needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooListProxy_coefList; RooRealProxy_x. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooBernstein(). RooBernstein(const char* name, const char* title, RooAbsReal& _x, const RooArgList& _coefList); Constructor. RooBernstein(const RooBernstein& other, const char* name = 0). Double_t evaluate() const. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; No analytical calculation available (yet) of integrals over subranges. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const. TObject* clone(const char* newname) const; { return new RooBernstein(*this, newname); }. virtual ~RooBernstein(); { }. » Last changed: Thu Sep 23 19:58:31 2010 » Last generated: 2010-09-23 19:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooBernstein.html:40584,avail,available,40584,root/html528/RooBernstein.html,https://root.cern,https://root.cern/root/html528/RooBernstein.html,1,['avail'],['available']
Availability,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:16732,error,error,16732,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,2,['error'],['error']
Availability,"e normalization range.; 4422/// \param[in] ctx An object to manage auxiliary information for code-squashing.; 4423///; 4424/// \returns The representative code string of the integral for the given object.; 4425std::string RooAbsReal::buildCallToAnalyticIntegral(Int_t /* code */, const char * /* rangeName */,; 4426 RooFit::Detail::CodeSquashContext & /*ctx*/) const; 4427{; 4428 std::stringstream errorMsg;; 4429 errorMsg << ""An analytical integral function for class \"""" << ClassName() << ""\"" has not yet been implemented."";; 4430 coutE(Minimization) << errorMsg.str() << std::endl;; 4431 throw std::runtime_error(errorMsg.str().c_str());; 4432}; 4433 ; 4434double RooAbsReal::_DEBUG_getVal(const RooArgSet* normalisationSet) const {; 4435 ; 4436 const bool tmpFast = _fast;; 4437 const double tmp = _value;; 4438 ; 4439 double fullEval = 0.;; 4440 try {; 4441 fullEval = getValV(normalisationSet);; 4442 }; 4443 catch (CachingError& error) {; 4444 throw CachingError(std::move(error),; 4445 FormatPdfTree() << *this);; 4446 }; 4447 ; 4448 const double ret = (_fast && !_inhibitDirty) ? _value : fullEval;; 4449 ; 4450 if (std::isfinite(ret) && ( ret != 0. ? (ret - fullEval)/ret : ret - fullEval) > 1.E-9) {; 4451#ifndef NDEBUG; 4452 gSystem->StackTrace();; 4453#endif; 4454 FormatPdfTree formatter;; 4455 formatter << ""--> (Scalar computation wrong here:)\n""; 4456 << GetName() << "" "" << this << "" _fast="" << tmpFast; 4457 << ""\n\tcached _value="" << std::setprecision(16) << tmp; 4458 << ""\n\treturning ="" << ret; 4459 << ""\n\trecomputed ="" << fullEval; 4460 << ""\n\tnew _value ="" << _value << ""] "";; 4461 formatter << ""\nServers:"";; 4462 for (const auto server : _serverList) {; 4463 formatter << ""\n "";; 4464 server->printStream(formatter.stream(), kName | kClassName | kArgs | kExtras | kAddress | kValue, kInline);; 4465 }; 4466 ; 4467 throw CachingError(formatter);; 4468 }; 4469 ; 4470 return ret;; 4471}; 4472 ; 4473 ; 4474bool RooAbsReal::redirectServersHook(const RooAbsCollection & newSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:195786,error,error,195786,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,['error'],['error']
Availability,"e objects are; to be found, the top level directory (""/"") is the default.; Directories can be specified using wildcards, e.g. ""*"" or ""/*""; means to look in all top level directories, ""/dir/*"" in all; directories under ""/dir"", and ""/*/*"" to look in all directories; two levels deep.; For backward compatibility the type can also be passed via 'name',; in which case 'type' is ignored. TDSet(const TChain& chain, Bool_t withfriends = kTRUE); Create a named TDSet object from existing TChain 'chain'.; If 'withfriends' is kTRUE add also friends.; This constructor substituted the static methods TChain::MakeTDSet; removing any residual dependence of 'tree' on 'proof'. ~TDSet(); Cleanup. Long64_t Process(const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process TDSet on currently active PROOF session.; The last argument 'enl' specifies an entry- or event-list to be used as; event selection.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void AddInput(TObject* obj); Add objects that might be needed during the processing of; the selector (see Process()). void ClearInput(); Clear input object list. TObject * GetOutput(const char* name); Get specified object that has been produced during the processing; (see Process()). TList * GetOutputList(); Get list with all object created during processing (see Process()). void Print(Option_t* option = """") const; Print TDSet basic or full data. When option=""a"" print full data. void SetObjName(const char* objname); Set/change object name. void SetDirectory(const char* dir); Set/change directory. Bool_t Add(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); Add file to list of files to be analyzed. Optionally with the; objname and dir arguments the default, TDSet wide, objname and; dir can be overridden. Bool_t Add(TDSet* set); Add specified data set to the this set.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:10590,error,error,10590,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,3,['error'],['error']
Availability,"e objects being merged. It provides access to the output directory pointer (fOutputDirectory); to whether or not this is the first time Merge is being called in the; serie (for example for TTree, the first time we also need to Clone; the object on which Merge is called), and provides for a User Data; object to be passed along to each of the calls to Merge.; The fUserData object is owned by the TFileMergeInfo and will be; deleted when the TFileMerger moves on to the next set of objects. Function Members (Methods); public:. TFileMergeInfo(TDirectory* outputfile); virtual~TFileMergeInfo(); static TClass*Class(); virtual TClass*IsA() const; voidReset(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TFileMergeInfo(); TFileMergeInfo(const TFileMergeInfo&); TFileMergeInfo&operator=(const TFileMergeInfo&). Data Members; public:. Bool_tfIsFirstTrue if this is the first call to Merge for this series of object.; TStringfOptionsAdditional text based option being passed down to customize the merge.; TDirectory*fOutputDirectoryTarget directory where the merged object will be written.; TObject*fUserDataPlace holder to pass extra information. This object will be deleted at the end of each series of objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileMergeInfo(). TFileMergeInfo(const TFileMergeInfo& ). TFileMergeInfo& operator=(const TFileMergeInfo& ). TFileMergeInfo(TDirectory* outputfile); {}. virtual ~TFileMergeInfo(); { delete fUserData; }. void Reset(); { fIsFirst = kTRUE; delete fUserData; fUserData = 0; }. » Author: Philippe Canal May, 2011 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileMergeInfo.html:1415,down,down,1415,root/html534/TFileMergeInfo.html,https://root.cern,https://root.cern/root/html534/TFileMergeInfo.html,1,['down'],['down']
Availability,"e observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:39955,error,errors,39955,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,12,['error'],"['error', 'errors']"
Availability,"e observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at ea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:37860,error,error,37860,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,6,['error'],['error']
Availability,"e observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:1863,error,errors,1863,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['errors']
Availability,"e of TGraphErrors an effective chi2 is used (see below TGraphErrors fit); To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:25940,error,errors,25940,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,12,['error'],"['error', 'errors']"
Availability,"e of Y and its error for each bin in X. The displayed error is by default the; standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ); Profile histograms are in many cases an; elegant replacement of two-dimensional histograms : the inter-relation of two; measured quantities X and Y can always be visualized by a two-dimensional; histogram or scatter-plot; its representation on the line-printer is not particularly; satisfactory, except for sparse data. If Y is an unknown (but single-valued); approximate function of X, this function is displayed by a profile histogram with; much better precision than by a scatter-plot. The following formulae show the cumulated contents (capital letters) and the values; displayed by the printing or plotting routines (small letters) of the elements for bin J. 2; H(J) = sum Y E(J) = sum Y; l(J) = sum l L(J) = sum l; h(J) = H(J)/L(J) mean of Y,; s(J) = sqrt(E(J)/L(J)- h(J)**2) standard deviation of Y (e.g. RMS); e(J) = s(J)/sqrt(L(J)) standard error on the mean. The displayed bin content for bin J of a TProfile is always h(J). The corresponding bin error is by default; e(J). In case the option ""s"" is used (in the constructor or by calling TProfile::BuildOptions); the displayed error is s(J). In the special case where s(J) is zero (eg, case of 1 entry only in one bin); the bin error e(J) is computed from the average of the s(J) for all bins if; the static function TProfile::Approximate has been called.; This simple/crude approximation was suggested in order to keep the bin; during a fit operation. But note that this approximation is not the default behaviour.; See also TProfile::BuildOptions for other error options and more detailed explanations. Example of a profile histogram with its graphics output; {; TCanvas *c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; Float_t px, py, pz;; for ( Int_t i=0; i<25000; i++) {; gRandom->R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:1346,error,error,1346,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,3,['error'],['error']
Availability,"e of bin entries and profile is weighted, we need to set also the bin error; 1346 if (binEntries && fBinSumw2.fN ) {; 1347 R__ASSERT( h1->GetSumw2() );; 1348 h1->GetSumw2()->fArray[bin] = fBinSumw2.fArray[bin];; 1349 }; 1350 }; 1351 }; 1352 h1->SetEntries(fEntries);; 1353 return h1;; 1354}; 1355 ; 1356////////////////////////////////////////////////////////////////////////////////; 1357/// Project a 2-D histogram into a profile histogram along X.; 1358///; 1359/// The projection is made from the channels along the Y axis; 1360/// ranging from firstybin to lastybin included.; 1361/// The result is a 1D profile which contains the combination of all the considered bins along Y; 1362/// By default, bins 1 to ny are included; 1363/// When all bins are included, the number of entries in the projection; 1364/// is set to the number of entries of the 2-D histogram, otherwise; 1365/// the number of entries is incremented by 1 for all non empty cells.; 1366///; 1367/// The option can also be used to specify the projected profile error type.; 1368/// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; 1369 ; 1370TProfile *TProfile2D::ProfileX(const char *name, Int_t firstybin, Int_t lastybin, Option_t *option) const; 1371{; 1372 return DoProfile(true, name, firstybin, lastybin, option);; 1373}; 1374 ; 1375////////////////////////////////////////////////////////////////////////////////; 1376/// Project a 2-D histogram into a profile histogram along X; 1377///; 1378/// The projection is made from the channels along the X axis; 1379/// ranging from firstybin to lastybin included.; 1380/// The result is a 1D profile which contains the combination of all the considered bins along X; 1381/// By default, bins 1 to ny are included; 1382/// When all bins are included, the number of entries in the projection; 1383/// is set to the number of entries of the 2-D histogram, otherwise; 1384/// the number of entries is incremented by 1 for all non empty cells",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:49352,error,error,49352,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['error']
Availability,"e of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:16734,error,error,16734,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,4,['error'],['error']
Availability,"e of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCatType.html:3722,error,error,3722,doc/master/classRooCatType.html,https://root.cern,https://root.cern/doc/master/classRooCatType.html,1,['error'],['error']
Availability,e of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_n,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:43461,error,errors,43461,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,2,['error'],['errors']
Availability,e of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static RooFormulaVar*RooResolutionModel::_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooObjCacheManager_intCacheMgrManager of cache with integrals; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddModel.html:44094,error,errors,44094,root/html602/RooAddModel.html,https://root.cern,https://root.cern/root/html602/RooAddModel.html,2,['error'],['errors']
Availability,"e of information about fit parameters printed in the histogram statistics box can be selected via the parameter mode. The parameter mode can be = pcev (default = 0111) p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters; Example: gStyle->SetOptFit(1011);; print fit probability, parameter names/values and errors. When v = 1 is specified, only the non-fixed parameters are shown.; When v = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to gStyle->SetOptFit(111). The error bars options. Option Description . ""E"" Default. Shows only the error bars, not a marker. . ""E1"" Small lines are drawn at the end of the error bars. . ""E2"" Error rectangles are drawn. . ""E3"" A filled area is drawn through the end points of the vertical error bars. . ""E4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""E0"" Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping . ""E5"" Like E3 but ignore the bins with 0 contents. . ""E6"" Like E4 but ignore the bins with 0 contents. . ""X0"" When used with one of the ""E"" option, it suppress the error bar along X as gStyle->SetErrorX(0) would do. . {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; }; TStyle::SetEndErrorSizevoid SetEndErrorSize(Float_t np=2)Set the size (in pixels) of the small lines drawn at the end of the error bars (TH1 or TGraphErrors).Definition TStyle.cxx:1340; TStyle::SetErrorXvoid SetErrorX(Float_t errorx=0.5)Definition TStyle.h:340. The options ""E3"" and ""E4"" draw an error band through the end points of the vertical error bars. With ""E4"" the error band ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:28128,error,error,28128,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"e of pT values; // covered by the analysis.; const std::vector<double> x{5.50e3, 5.52e3, 12.54e3, 17.43e3, 22.40e3, 27.48e3, 30e3, 10000e3};; const std::vector<double> y{0.06628, 0.06395, 0.06396, 0.03372, 0.02441, 0.01403, 0, 0};; TGraph graph(x.size(), x.data(), y.data());; ; // Use the Vary method to add the systematic variations to the total MC scale factor (""weight"") of the analysis; // The input consists of the input column to be varied and the lambda function to compute the systematic variations.; // The new output columns contain the varied values of the input column.; auto df_with_variations_mc =; df_mc; .Vary(""weight"",; [&graph](double x, const RVecF &pt, const RVec<unsigned int> &type) {; const auto v = Mean(Map(pt[type == 11], [&graph](auto p) { return graph.Eval(p); }));; return RVec<double>{(1 + v) * x, (1 - v) * x};; },; {""weight"", ""goodlep_pt"", ""goodlep_type""}, {""up"", ""down""}); .Histo1D<float>(ROOT::RDF::TH1DModel(""Invariant Mass"", ""m4l"", 24, 80, 170), ""m4l"", ""weight"");; ; // Create the total MC scale factor histograms: ""nominal"", ""weight:up"" and ""weight:down"".; auto histos_mc = VariationsFor(df_with_variations_mc);; ; // Evaluate the total MC uncertainty based on the variations. Note, in this case the uncertainties are symmetric.; for (unsigned int i = 0; i < histos_mc[""nominal""].GetXaxis()->GetNbins(); i++) {; histos_mc[""nominal""].SetBinError(; i, (histos_mc[""weight:up""].GetBinContent(i) - histos_mc[""nominal""].GetBinContent(i)));; }; ; // Make the plot of the data, individual MC contributions and the total MC scale factor systematic variations.; gROOT->SetStyle(""ATLAS"");; ; // Create canvas with pad; auto c = new TCanvas(""c"", "" "", 600, 600);; auto pad = new TPad(""upper_pad"", """", 0, 0, 1, 1);; pad->SetTickx(0);; pad->SetTicky(0);; pad->Draw();; pad->cd();; ; // Draw stack with MC contributions; // Draw cloned histograms to preserve graphics when original objects goes out of scope; df_other->SetFillColor(kViolet - 9);; df_zz->SetFillColor(kAzure - 9);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:9375,down,down,9375,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['down'],['down']
Availability,"e of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t fNumberIterations;  number of iterations in fitting procedure, input parameter, it should be > 0 ;  ; Double_t * fPositionCalcX;  [fNPeaks] array of calculated values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcX1;  [fNPeaks] array of calculated x positions of 1D ridges, output parameters ;  ; Double_t * fPositionCalcY;  [fNPeaks] array of calculated values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionCalcY1;  [fNPeaks] array of calculated y positions of 1D ridges, output parameters ;  ; Double_t * fPositionErrX;  [fNPeaks] array of error values of x positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrX1;  [fNPeaks] array of x positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionErrY;  [fNPeaks] array of error values of y positions of 2D peaks, output parameters ;  ; Double_t * fPositionErrY1;  [fNPeaks] array of y positions errors of 1D ridges, output parameters ;  ; Double_t * fPositionInitX;  [fNPeaks] array of initial values of x positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitX1;  [fNPeaks] array of initial x positions of 1D ridges, input parameters ;  ; Double_t * fPositionInitY;  [fNPeaks] array of initial values of y positions of 2D peaks, input parameters ;  ; Double_t * fPositionInitY1;  [fNPeaks] array of initial y positions of 1D ridges, input parameters ;  ; Int_t fPower;  possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ;  ; Double_t fRoCalc;  calculated value of correlation coefficient ;  ; Double_t fRoErr;  error value of correlation coefficient ;  ; Double_t fRoInit;  initial ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:29452,error,error,29452,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,4,['error'],"['error', 'errors']"
Availability,"e of the formula. ; [in]formulaFormula to be evaluated. Parameters/observables are identified by name or ordinal position in varList. ; [in]varListList of variables to be passed to the formula. ; [in]checkVariablesUnused parameter. . Definition at line 194 of file RooFormula.cxx. ◆ RooFormula() [2/2]. RooFormula::RooFormula ; (; const RooFormula & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 205 of file RooFormula.cxx. Member Function Documentation. ◆ actualDependents(). RooArgSet RooFormula::actualDependents ; (; ); const. inline . Return list of arguments which are used in the formula. ; Definition at line 39 of file RooFormula.h. ◆ changeDependents(). bool RooFormula::changeDependents ; (; const RooAbsCollection & ; newDeps, . bool ; mustReplaceAll, . bool ; nameChange . ). Change used variables to those with the same name in given list. ; Parameters. [in]newDepsNew dependents to replace the old ones. ; [in]mustReplaceAllWill yield an error if one dependent does not have a replacement. ; [in]nameChangePassed down to RooAbsArg::findNewServer(const RooAbsCollection&, bool) const. . Definition at line 344 of file RooFormula.cxx. ◆ Clone(). TObject * RooFormula::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 32 of file RooFormula.h. ◆ doEval(). void RooFormula::doEval ; (; RooFit::EvalContext & ; ctx); const. Definition at line 407 of file RooFormula.cxx. ◆ dump(). void RooFormula::dump ; (; ); const. DEBUG: Dump state inf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFormula.html:18674,error,error,18674,doc/master/classRooFormula.html,https://root.cern,https://root.cern/doc/master/classRooFormula.html,1,['error'],['error']
Availability,"e of the function, FVAL,; 812 which is usually a chisquare or log likelihood.; 813 if (iflag == 3) {; 814 will come here only after the fit is finished.; 815 Perform any final calculations, output fitted data, etc.; 816 }; 817*/; 818// See concrete examples in TH1::H1FitChisquare, H1FitLikelihood; 819 ; 820 if (fFCN) (*fFCN)(npar,grad,fval,par,flag);; 821 return 0;; 822}; 823 ; 824////////////////////////////////////////////////////////////////////////////////; 825/// fix a parameter; 826 ; 827Int_t TMinuit::FixParameter( Int_t parNo); 828{; 829 Int_t err;; 830 Double_t tmp[1];; 831 tmp[0] = parNo+1; //set internal Minuit numbering; 832 ; 833 mnexcm( ""FIX"", tmp, 1, err );; 834 ; 835 return err;; 836}; 837 ; 838////////////////////////////////////////////////////////////////////////////////; 839/// return parameter value and error; 840 ; 841Int_t TMinuit::GetParameter( Int_t parNo, Double_t &currentValue, Double_t &currentError ) const; 842{; 843 Int_t err;; 844 TString name; // ignored; 845 Double_t bnd1, bnd2; // ignored; 846 ; 847 mnpout( parNo, name, currentValue, currentError, bnd1, bnd2, err );; 848 ; 849 return err;; 850}; 851 ; 852////////////////////////////////////////////////////////////////////////////////; 853/// returns the number of currently fixed parameters; 854 ; 855Int_t TMinuit::GetNumFixedPars() const; 856{; 857 return fNpfix;; 858}; 859 ; 860////////////////////////////////////////////////////////////////////////////////; 861/// returns the number of currently free parameters; 862 ; 863Int_t TMinuit::GetNumFreePars() const; 864{; 865 return fNpar;; 866}; 867 ; 868////////////////////////////////////////////////////////////////////////////////; 869/// returns the total number of parameters that have been defined; 870/// as fixed or free. The constant parameters are not counted.; 871 ; 872Int_t TMinuit::GetNumPars() const; 873{; 874 return fNpar + fNpfix;; 875}; 876 ; 877//////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:31445,error,error,31445,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"e of the period will be used as the extension (instead of 'h') and the left side will be used as the classname.; ""macrofilename"" and optionally ""cutfilename"" are expected to point to source file which will be included in by the generated skeletong. Method of the same name as the file(minus the extension and path) will be called by the generated skeleton's Process method as follow: [if (cutfilename())] htemp->Fill(macrofilename());; ""option"" can be used select some of the optional features during the code generation. The possible options are:; nohist : indicates that the generated ProcessFill should not fill the histogram. 'maxUnrolling' controls how deep in the class hierarchy does the system 'unroll' class that are not split. 'unrolling' a class will allow direct access to its data members a class (this emulates the behavior of TTreeFormula).; The main features of this skeleton are:. on-demand loading of branches; ability to use the 'branchname' as if it was a data member; protection against array out-of-bound; ability to use the branch data as object (when the user code is available). For example with Event.root, if Double_t somepx = fTracks.fPx[2];; double; is executed by one of the method of the skeleton, somepx will be updated with the current value of fPx of the 3rd track.; Both macrofilename and the optional cutfilename are expected to be the name of source files which contain at least a free standing function with the signature: x_t macrofilename(); // i.e function with the same name as the file; and y_t cutfilename(); // i.e function with the same name as the file; x_t and y_t needs to be types that can convert respectively to a double and a bool (because the skeleton uses: if (cutfilename()) htemp->Fill(macrofilename());; This 2 functions are run in a context such that the branch names are available as local variables of the correct (read-only) type.; Note that if you use the same 'variable' twice, it is more efficient to 'cache' the value. For example Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:32697,avail,available,32697,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['avail'],['available']
Availability,"e of the sum of squares of; 546/// weights is automatically triggered and the sum of the squares of weights is incremented; 547/// by w^2 in the bin corresponding to namex,y; 548///; 549/// The function returns the corresponding global bin number which has its content; 550/// incremented by w; 551 ; 552Int_t TH2::Fill(const char *namex, Double_t y, Double_t w); 553{; 554 Int_t binx, biny, bin;; 555 fEntries++;; 556 binx = fXaxis.FindBin(namex);; 557 biny = fYaxis.FindBin(y);; 558 if (binx <0 || biny <0) return -1;; 559 bin = biny*(fXaxis.GetNbins()+2) + binx;; 560 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 561 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 562 AddBinContent(bin,w);; 563 if (binx == 0 || binx > fXaxis.GetNbins()) return -1;; 564 if (biny == 0 || biny > fYaxis.GetNbins()) {; 565 if (!GetStatOverflowsBehaviour()) return -1;; 566 }; 567 Double_t z= w; //(w > 0 ? w : -w);; 568 fTsumw += z;; 569 fTsumw2 += z*z;; 570 fTsumwy += z*y;; 571 fTsumwy2 += z*y*y;; 572 // skip statistics along x axis, for only one axis no need to use bit mask from GetAxisLabelStatus; 573 if (!fXaxis.CanExtend() || !fXaxis.IsAlphanumeric()) {; 574 Double_t x = fXaxis.GetBinCenter(binx);; 575 fTsumwx += z * x;; 576 fTsumwx2 += z * x * x;; 577 fTsumwxy += z * x * y;; 578 }; 579 return bin;; 580}; 581 ; 582 ; 583////////////////////////////////////////////////////////////////////////////////; 584/// Increment cell defined by x,namey by a weight w; 585///; 586/// - if x or/and y is less than the low-edge of the corresponding axis first bin,; 587/// the Underflow cell is incremented.; 588/// - if x or/and y is equal to or greater than the upper edge of corresponding axis last bin,; 589/// the Overflow cell is incremented.; 590///; 591/// - If the weight is not equal to 1, the storage of the sum of squares of; 592/// weights is automatically triggered and the sum of the squares of weights is incremented; 593/// by w^2 in the bin cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:22441,mask,mask,22441,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['mask'],['mask']
Availability,"e of transparency usage with parallel coordinates can be found in parallelcoordtrans.C.; To ease the creation of a transparent color the static method GetColorTransparent(Int_t color, Float_t a) is provided. In the following example the trans_red color index point to a red color 30% opaque (70% transparent). The alpha value of the color index kRed is not modified.; Int_t trans_red = GetColorTransparent(kRed, 0.3);; TColor::GetColorTransparentstatic Int_t GetColorTransparent(Int_t color, Float_t a)Static function: Returns the transparent color number corresponding to n.Definition TColor.cxx:2174; This function is also used in the methods SetFillColorAlpha(), SetLineColorAlpha(), SetMarkerColorAlpha() and SetTextColorAlpha(). In the following example the fill color of the histogram histo is set to blue with an opacity of 35% (i.e. a transparency of 65%). (The color kBlue itself is internally stored as fully opaque.); histo->SetFillColorAlpha(kBlue, 0.35);; The transparency is available on all platforms when the flag OpenGL.CanvasPreferGL is set to 1 in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output it is visible with PDF, PNG, Gif, JPEG, SVG, TeX ... but not PostScript.; Alternatively, you can call at the top of your script gSytle->SetCanvasPreferGL();. Or if you prefer to activate GL for a single canvas c, then use c->SetSupportGL(true);.; The following macro gives an example of transparency usage:; ; void transparency(); {; auto c1 = new TCanvas(""c1"", ""c1"",224,330,700,527);; c1->Range(-0.125,-0.125,1.125,1.125);; ; auto tex = new TLatex(0.06303724,0.0194223,""This text is opaque and this line is transparent"");; tex->SetLineWidth(2);; tex->Draw();; ; auto arrow = new TArrow(0.5555158,0.07171314,0.8939828,0.6195219,0.05,""|>"");; arrow->SetLineWidth(4);; arrow->SetAngle(30);; arrow->Draw();; ; // Draw a transparent graph.; Double_t x[10] = {; 0.5232808, 0.8724928, 0.9280086, 0.7059456, 0.7399714,; 0.4659742, 0.8241404, 0.4838825, 0.79369",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:21617,avail,available,21617,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['avail'],['available']
Availability,"e old histogram to fill the extended histogram.; Takes into account errors (Sumw2) if any.; The algorithm works for 1-d, 2-D and 3-D histograms.; The axis must be extendable before invoking this function.; Ex: h->GetXaxis()->SetCanExtend(kTRUE);. void RecursiveRemove(TObject* obj); Recursively remove object from the list of functions. void Scale(Double_t c1 = 1, Option_t* option = """"); Multiply this histogram by a constant c1. this = c1*this. Note that both contents and errors(if any) are scaled.; This function uses the services of TH1::Add. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. One can scale an histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. If option contains ""width"" the bin contents and errors are divided; by the bin width. Bool_t CanExtendAllAxes() const; returns true if all axes are extendable. UInt_t SetCanExtend(UInt_t extendBitMask); make the histogram axes extendable / not extendable according to the bit mask; returns the previous bit mask specifying which axes are extendable. void SetDefaultBufferSize(Int_t buffersize = 1000); static function to set the default buffer size for automatic histograms.; When an histogram is created with one of its axis lower limit greater; or equal to its upper limit, the function SetBuffer is automatically; called with the default buffer size. void SetDefaultSumw2(Bool_t sumw2 = kTRUE); static function.; When this static function is called with sumw2=kTRUE, all new; histograms will automatically activate the storage; of the sum of squares of errors, ie TH1::Sumw2 is automatically called. void SetTitle(const char* title); Change (i.e. set) the title. if title is in the form ""stringt;stringx;stringy;stringz""; the histogram tit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:106539,error,errors,106539,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['errors']
Availability,"e one of the ROOT file during verification.; NB: we do not change the name in here, because this would screw up lists; of these objects hashed on the name. Those lists need to be rebuild.; TFileCollection does that in RemoveDuplicates. TUrl * GetCurrentUrl() const; Return the current url. TUrl * NextUrl(); Iterator function, start iteration by calling ResetUrl().; The first call to NextUrl() will return the 1st element,; the seconde the 2nd element etc. Returns 0 in case no more urls. TUrl * FindByUrl(const char* url, Bool_t withDeflt = kFALSE); Find an element from a URL. Returns 0 if not found. Bool_t AddUrl(const char* url, Bool_t infront = kFALSE); Add a new URL. If 'infront' is TRUE the new url is pushed at the beginning; of the list; otherwise is pushed back.; Returns kTRUE if successful, kFALSE otherwise. Bool_t RemoveUrl(const char* url); Remove an URL. Returns kTRUE if successful, kFALSE otherwise. Bool_t RemoveUrlAt(Int_t i); Remove URL at given position. Returns kTRUE on success, kFALSE on error. Bool_t SetCurrentUrl(const char* url); Set 'url' as current URL, if in the list; Return kFALSE if not in the list. Bool_t SetCurrentUrl(TUrl* url); Set 'url' as current URL, if in the list; Return kFALSE if not in the list. Bool_t AddMetaData(TObject* meta); Add's a meta data object to the file info object. The object will be; adopted by the TFileInfo and should not be deleted by the user.; Typically objects of class TFileInfoMeta or derivatives should be added,; but any class is accepted.; Returns kTRUE if successful, kFALSE otherwise. Bool_t RemoveMetaData(const char* meta = 0); Remove the metadata obeject. If meta is 0 remove all meta data objects.; Returns kTRUE if successful, kFALSE otherwise. TFileInfoMeta * GetMetaData(const char* meta = 0) const; Get meta data object with specified name. If meta is 0; get first meta data object. Returns 0 in case no; suitable meta data object is found. Int_t Compare(const TObject* obj) const; Compare TFileInfo object by th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileInfo.html:9248,error,error,9248,root/html534/TFileInfo.html,https://root.cern,https://root.cern/root/html534/TFileInfo.html,3,['error'],['error']
Availability,"e only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMinuit ();  Minuit normal constructor. ;  ;  TMinuit (Int_t maxpar);  Minuit normal constructor. ;  ;  ~TMinuit () override;  Minuit ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:14087,error,errors,14087,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,['error'],['errors']
Availability,"e options and directory; to be listed to ls. Returns 0 in case of success and -1 in case of; failure. Int_t PrintDirectory() const; Print path of remote working directory. Returns 0 in case of succes and; -1 in cse of failure. Int_t RenameFile(const char* file1, const char* file2) const; Rename a remote file. Anonymous users may not rename files.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteFile(const char* file) const; Delete a remote file. Anonymous users may not delete files.; Returns 0 in case of success and -1 in case of failure. Int_t ChangePermission(const char* file, Int_t mode) const; Change permissions of a remote file. Anonymous users may not; chnage permissions. Returns 0 in case of success and -1 in case; of failure. Int_t Close(); Close ftp connection. Returns 0 in case of success and -1 in case of; failure. Bool_t OpenDirectory(const char* name, Bool_t print = kFALSE); Open a directory via rootd.; Returns kTRUE in case of success.; Returns kFALSE in case of error. void FreeDirectory(Bool_t print = kFALSE); Free a remotely open directory via rootd. const char * GetDirEntry(Bool_t print = kFALSE); Get directory entry via rootd.; Returns 0 in case no more entries or in case of error. Int_t GetPathInfo(const char* path, FileStat_t& buf, Bool_t print = kFALSE); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. Bool_t AccessPathName(const char* path, EAccessMode mode = kFileExists, Bool_t print = kFALSE); Returns kFALSE if one can access a file using the specified access mode.; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. TFTP(); { }. TFTP(const TFTP& ). void operator=(const TFTP& ). void SetMode(Int_t mode); { fMode = mode; }. Int_t GetBlockSize() const; { return fBlockSize; }. void SetRestartAt(Long64_t at); { fRestartAt = at; }. Long64_t GetResta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:11848,error,error,11848,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,6,['error'],['error']
Availability,"e or more object ( can be added to the list; 4090/// of functions (fFunctions) associated to each histogram.; 4091/// When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions).; 4092/// If the histogram is made persistent, the list of associated functions is also persistent.; 4093/// Given a histogram h, one can retrieve an associated function with:; 4094///; 4095/// ~~~ {.cpp}; 4096/// TF1 *myfunc = h->GetFunction(""myfunc"");; 4097/// ~~~; 4098/// or by quering directly the list obtained by calling `TH1::GetListOfFunctions`.; 4099///; 4100/// \anchor HFitStatus; 4101/// ### Fit status; 4102///; 4103/// The status of the fit is obtained converting the TFitResultPtr to an integer; 4104/// independently if the fit option ""S"" is used or not:; 4105///; 4106/// ~~~ {.cpp}; 4107/// TFitResultPtr r = h->Fit(myFunc,opt);; 4108/// Int_t fitStatus = r;; 4109/// ~~~; 4110///; 4111/// - `status = 0` : the fit has been performed successfully (i.e no error occurred).; 4112/// - `status < 0` : there is an error not connected with the minimization procedure, for example when a wrong function is used.; 4113/// - `status > 0` : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; 4114/// - `status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus`.; 4115/// TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error; 4116/// only in Minos but not in Migrad a fitStatus of 40 will be returned.; 4117/// Minuit2 returns 0 in case of success and different values in migrad,minos or; 4118/// hesse depending on the error. See in this case the documentation of; 4119/// Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the; 4120/// minos return status and Minuit2Minimizer::Hesse for the hesse return status.; 4121/// If other minimize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:168296,error,error,168296,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"e outside the foam. void Train( void ); Train PDE-Foam depending on the set options. void TrainSeparatedClassification(); Creation of 2 separated foams: one for signal events, one for; backgound events. void TrainUnifiedClassification(); Create only one unified foam which contains discriminator; (N_sig)/(N_sig + N_bg). void TrainMonoTargetRegression(); Training mono target regression foam; - foam density = average Target(0); - dimension of foam = number of non-targets; - cell content = average target 0. void TrainMultiTargetRegression(); Training multi target regression foam; - foam density = Event density; - dimension of foam = number of non-targets + number of targets; - cell content = event density. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); Return Mva-Value. In case of 'fSigBgSeparated==false' return; the cell content (D = N_sig/(N_bg+N_sig)). In case of; 'fSigBgSeparated==false' return D =; Density_sig/(Density_sig+Density_bg). In both cases the error; of the discriminant is stored in 'err'. void SetXminXmax(TMVA::PDEFoam* ); Set Xmin, Xmax for every dimension in the given pdefoam object. void InitFoam(TMVA::PDEFoam* , TMVA::EFoamType ); Set foam options (incl. Xmin, Xmax) and initialize foam via; pdefoam->Init(). const std::vector<Float_t>& GetRegressionValues(); Return regression values for both multi and mono target regression. void PrintCoefficients( void ); {}. void AddWeightsXMLTo(void* parent) const; create XML output of PDEFoam method variables. void WriteFoamsToFile() const; Write pure foams to file. void ReadWeightsFromStream(istream& i); read options and internal parameters. void ReadWeightsFromXML(void* wghtnode); read PDEFoam variables from xml weight file. void ReadFoamsFromFile(); read pure foams from file. TMVA::EKernel UIntToKernel(UInt_t iker); convert UInt_t to EKernel (used for reading weight files). TMVA::ETargetSelection UIntToTargetSelection(UInt_t its); convert UInt_t to ETargetSelection (used for reading weight file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDEFoam.html:19396,error,error,19396,root/html528/TMVA__MethodPDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDEFoam.html,1,['error'],['error']
Availability,"e pad to be represented label is the text you wish to associate with obj in the legend if label is null or empty, the title of the object will be used.; Options are:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified . Definition at line 343 of file TLegend.cxx. ◆ AddEntry() [2/2]. TLegendEntry * TLegend::AddEntry ; (; const TObject * ; obj, . const char * ; label = """", . Option_t * ; option = ""lpf"" . ). Add a new entry to this legend. ; ""obj"" is the object to be represented. ""label"" is the text you wish to associate with obj in the legend. If ""label"" is null or empty, the title of the object will be used.; Options are:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified . Definition at line 320 of file TLegend.cxx. ◆ Class(). static TClass * TLegend::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLegend::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLegend::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 82 of file TLegend.h. ◆ Clear(). void TLegend::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear all entries in this legend, including the header. ; Reimplemented from TObject.; Definition at line 379 of file TLegend.cxx. ◆ Copy(). void TLegend::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this legend into ""obj"". ; Reimplemented from TBox.; Definition at line 388 of file TLegend.cxx. ◆ DeclFileName(). static const char * TLegend::DeclFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:37069,error,error,37069,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['error'],['error']
Availability,"e parameter value sync is done in one line with:; 49# ```C++; 50# f_sum->SetParameters(fnorm_exp_cb->GetParameters().data());; 51# ```; 52# However, TF1NormSum::GetParameters() returns an std::vector by value, which; 53# doesn't survive long enough in Python. That's why we have to explicitly; 54# assign it to a variable first and can't use a temporary.; 55 ; 56f_sum.SetParName(1, ""NBackground""); 57f_sum.SetParName(0, ""NSignal""); 58for i in range(2, f_sum.GetNpar()):; 59 f_sum.SetParName(i, fnorm_exp_cb.GetParName(i)); 60 ; 61# GENERATE HISTOGRAM TO FIT ..............................................................; 62w = ROOT.TStopwatch(); 63w.Start(); 64h_sum = ROOT.TH1D(""h_ExpCB"", ""Exponential Bkg + CrystalBall function"", nBins, -5.0, 5.0); 65h_sum.FillRandom(""fsum"", nEvents); 66print(""Time to generate {0} events: "".format(nEvents)); 67w.Print(); 68 ; 69# need to scale histogram with width since we are fitting a density; 70h_sum.Sumw2(); 71h_sum.Scale(1.0, ""width""); 72 ; 73# fit - use Minuit2 if available; 74ROOT.Math.MinimizerOptions.SetDefaultMinimizer(""Minuit2""); 75c1 = ROOT.TCanvas(""Fit"", ""Fit"", 800, 1000); 76# do a least-square fit of the spectrum; 77result = h_sum.Fit(""fsum"", ""SQ""); 78result.Print(); 79h_sum.Draw(); 80print(""Time to fit using ROOT TF1Normsum: ""); 81w.Print(); 82 ; 83# test if parameters are fine; 84for i, pref in enumerate([nsig, nbkg, signal_mean]):; 85 if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; 86 ROOT.Error(; 87 ""testFitNormSum"",; 88 ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; 89 f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); 90 ),; 91 ); 92 ; 93ROOT.gStyle.SetOptStat(0); 94# add parameters; 95t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); 96t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); 97t1.Draw(); 98t2.Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8py_source.html:2806,avail,available,2806,doc/master/fitNormSum_8py_source.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8py_source.html,1,['avail'],['available']
Availability,"e passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t LoadPackageOnClient(const char* package, TList* loadopts = 0); Load specified package in the client. Executes the PROOF-INF/SETUP.C; script on the client. Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kLoadPackage; case). Keep in sync in case of changes.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:63761,error,error,63761,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['error'],['error']
Availability,"e passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t LoadPackageOnClient(const char* package, TList* loadopts = 0); Load specified package in the client. Executes the PROOF-INF/SETUP.C; script on the client. Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kLoadPackage; case). Keep in sync in case of changes.; The argument 'loadopts' specify a list of objects to be passed to the SETUP.; The objects in the list must be streamable; the SETUP macro will be executed; like this: SETUP.C(loadopts).; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackage(const char* package); Unload specified package.; Returns 0 in case of success and -1 in case of error. Int_t UnloadPackageOnClient(const char* package); Unload a specific package on the client.; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::UnloadPackage; case). Keep in sync in case of changes. Int_t UnloadPackages(); Unload all packages.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:73644,error,error,73644,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['error'],['error']
Availability,"e plugin handlers in $ROOTSYS/etc/system.rootrc; for regular expressions that will be checked) and as last a local file will; be tried.; Before opening a file via TNetFile a check is made to see if the URL; specifies a local file. If that is the case the file will be opened; via a normal TFile. To force the opening of a local file via a; TNetFile use either TNetFile directly or specify as host ""localhost"".; The netopt argument is only used by TNetFile. For the meaning of the; options and other arguments see the constructors of the individual; file classes. In case of error returns 0. For TFile implementations supporting asynchronous file open, see; TFile::AsyncOpen(...), it is possible to request a timeout with the; option:; TIMEOUT=<secs> the timeout must be specified in seconds and; it will be internally checked with granularity of; one millisec. For remote files there is the option:; CACHEREAD opens an existing file for reading through the file cache.; The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by; SetCacheFileDir(). TFileOpenHandle * AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function to submit an open request. The request will be; processed asynchronously. See TFile::Open(const char *, ...) for an; explanation of the arguments. A handler is returned which is to be passed; to TFile::Open(TFileOpenHandle *) to get the real TFile instance once; the file is open.; This call never blocks and it is provided to allow parallel submission; of file opening operations expected to take a long time.; TFile::Open(TFileOpenHandle *) may block if the file is not yet ready.; The sequence; TFile::Open(TFile::AsyncOpen(const char *, ...)); is equivalent to; TFile::Open(const char *, ...) .; To be effective, the underlying TFile implementation must be able to; support as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:45960,down,downloaded,45960,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['down'],['downloaded']
Availability,"e plugin manager see the TPluginManager class). The returned; type of TFile depends on the file name specified by 'url'.; If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried; sequentially in the specified order until a successful open.; If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object; will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile,; etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc; for regular expressions that will be checked) and as last a local file will; be tried.; Before opening a file via TNetFile a check is made to see if the URL; specifies a local file. If that is the case the file will be opened; via a normal TFile. To force the opening of a local file via a; TNetFile use either TNetFile directly or specify as host ""localhost"".; The netopt argument is only used by TNetFile. For the meaning of the; options and other arguments see the constructors of the individual; file classes. In case of error returns 0. For TFile implementations supporting asynchronous file open, see; TFile::AsyncOpen(...), it is possible to request a timeout with the; option:; TIMEOUT=<secs> the timeout must be specified in seconds and; it will be internally checked with granularity of; one millisec. For remote files there is the option:; CACHEREAD opens an existing file for reading through the file cache.; The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by; SetCacheFileDir(). TFileOpenHandle * AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function to submit an open request. The request will be; processed asynchronously. See TFile::Open(const char *, ...) for an; explanation of the arguments. A handler is returned which is to be passed; to TFile::Open(TFileOpenHandle *) to get the real TFile instanc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:45547,error,error,45547,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['error'],['error']
Availability,"e points,; copy points [0,oend).; Return newarray (passed or new instance if it was zero; and allocations are needed). void Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); Sorts the points of this TGraph using in-place quicksort (see e.g. older glibc).; To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an; example of such a method, which is also the default comparison function for Sort). After; the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and; kFALSE otherwise. The last two parameters are used for the recursive quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& ); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:41115,error,errors,41115,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,1,['error'],['errors']
Availability,"e points,; copy points [0,oend).; Return newarray (passed or new instance if it was zero; and allocations are needed). void Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); Sorts the points of this TGraph using in-place quicksort (see e.g. older glibc).; To compare two points the function parameter greaterfunc is used (see TGraph::CompareX for an; example of such a method, which is also the default comparison function for Sort). After; the sort, greaterfunc(this, i, j) will return kTRUE for all i>j if ascending == kTRUE, and; kFALSE otherwise. The last two parameters are used for the recursive quick sort, stating the range to be sorted. Examples:; // sort points along x axis; graph->Sort();; // sort points along their distance to origin; graph->Sort(&TGraph::CompareRadius);. Bool_t CompareErrors(const TGraph* gr, Int_t i, Int_t j) {; const TGraphErrors* ge=(const TGraphErrors*)gr;; return (ge->GetEY()[i]>ge->GetEY()[j]); }; // sort using the above comparison function, largest errors first; graph->Sort(&CompareErrors, kFALSE);. void Streamer(TBuffer& b); Stream an object of class TGraph. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. void SwapValues(Double_t* arr, Int_t pos1, Int_t pos2); Swap values. void UseCurrentStyle(); Set current style settings in this graph; This function is called when either TCanvas::UseCurrentStyle; or TROOT::ForceStyle have been invoked. Int_t Merge(TCollection* list); Adds all graphs from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations); Find zero of a continuous function.; This function finds a real zero of the continuous real; function Y(X) in a given interval (A,B). See accompanying; notes for details of the argument list and calling sequence. Double_t ** Allocate(Int_t newsize). TLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:39385,error,errors,39385,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,3,['error'],['errors']
Availability,"e previous fit.; - Modifying the dimension or number of bins results in an error (in this case; rather instantiate a new TFractionFitter object). void SetMC(Int_t parm, TH1* MC); Change the histogram for template number <parm>. Notes:; - Parameter constraints and settings are retained from a possible previous fit.; - Modifying the dimension or number of bins results in an error (in this case; rather instantiate a new TFractionFitter object). void SetWeight(Int_t parm, TH1* weight); Set bin by bin weights for template number <parm> (the parameter numbering; follows that of the input template vector).; Weights can be ""unset"" by passing a null pointer.; Consistency of the weights histogram with the data histogram is checked at; this point, and an error in case of problems. ROOT::Fit::Fitter* GetFitter() const; Give direct access to the underlying fitter class. This can be; used e.g. to modify parameter values or step sizes. void CheckParNo(Int_t parm) const; Function for internal use, checking parameter validity; An invalid parameter results in an error. void SetRangeX(Int_t low, Int_t high); Set the X range of the histogram to be used in the fit.; Use ReleaseRangeX() to go back to fitting the full histogram.; The consistency check ensures that no empty fit range occurs (and also; recomputes the bin content integrals).; Arguments:; low: lower X bin number; high: upper X bin number. void ReleaseRangeX(); Release restrictions on the X range of the histogram to be used in the fit. void SetRangeY(Int_t low, Int_t high); Set the Y range of the histogram to be used in the fit (2D or 3D histograms only).; Use ReleaseRangeY() to go back to fitting the full histogram.; The consistency check ensures that no empty fit range occurs (and also; recomputes the bin content integrals).; Arguments:; low: lower Y bin number; high: upper Y bin number. void ReleaseRangeY(); Release restrictions on the Y range of the histogram to be used in the fit. void SetRangeZ(Int_t low, Int_t high); Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:15092,error,error,15092,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,2,['error'],['error']
Availability,"e printed unless the verbose flag is set. Bool_t setRealValue(const char* name, Double_t newVal = 0, Bool_t verbose = kFALSE); Set value of a RooAbsRealLValye stored in set with given name to newVal; No error messages are printed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setStringValue(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set string value of a RooStringVar stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. void writeToFile(const char* fileName) const; Write contents of the argset to specified file.; See writeToStream() for details. Bool_t readFromFile(const char* fileName, const char* flagReadAtt = 0, const char* section = 0, Bool_t ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:19643,error,error,19643,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,7,['error'],['error']
Availability,"e projection. NOTE 4: underflow/overflow are by default excluded from the projection; (Note that this is a different default behavior compared to the projection to an histogram); To include the underflow and/or overflow use option ""UF"" and/or ""OF"". void PutStats(Double_t* stats); Replace current statistics with the values in array stats. TH3 * RebinX(Int_t ngroup, const char* newname); Rebin only the X axis; see Rebin3D. TH3 * RebinY(Int_t ngroup, const char* newname); Rebin only the Y axis; see Rebin3D. TH3 * RebinZ(Int_t ngroup, const char* newname); Rebin only the Z axis; see Rebin3D. TH3 * Rebin3D(Int_t nxgroup, Int_t nygroup, Int_t nzgroup, const char* newname); -*-*-*Rebin this histogram grouping nxgroup/nygroup/nzgroup bins along the xaxis/yaxis/zaxis together*-*-*-*-. if newname is not blank a new temporary histogram hnew is created.; else the current histogram is modified (default); The parameter nxgroup/nygroup indicate how many bins along the xaxis/yaxis of this; have to me merged into one bin of hnew; If the original histogram has errors stored (via Sumw2), the resulting; histograms has new errors correctly calculated. examples: if hpxpy is an existing TH3 histogram with 40 x 40 x 40 bins; hpxpypz->Rebin3D(); // merges two bins along the xaxis and yaxis in one in hpxpypz; // Carefull: previous contents of hpxpy are lost; hpxpypz->RebinX(5); //merges five bins along the xaxis in one in hpxpypz; TH3 *hnew = hpxpypz->RebinY(5,""hnew""); // creates a new histogram hnew; // merging 5 bins of h1 along the yaxis in one bin. NOTE : If nxgroup/nygroup is not an exact divider of the number of bins,; along the xaxis/yaxis the top limit(s) of the rebinned histogram; is changed to the upper edge of the xbin=newxbins*nxgroup resp.; ybin=newybins*nygroup and the corresponding bins are added to; the overflow bin.; Statistics will be recomputed from the new bin contents. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ====================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH3.html:48604,error,errors,48604,root/html530/TH3.html,https://root.cern,https://root.cern/root/html530/TH3.html,4,['error'],['errors']
Availability,"e provided TF1 function.; 1154/// ""EX0"" | When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates; 1155/// ""ROB"" | In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points; 1156///; 1157///; 1158/// This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors.; 1159/// See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; 1160///; 1161/// The fitting of the TGraph, i.e simple data points without any error associated, is performed using the; 1162/// un-weighted least-square (chi-square) method.; 1163///; 1164///; 1165///\anchor GFitErrors; 1166/// ### TGraphErrors fit:; 1167///; 1168/// In case of a TGraphErrors or TGraphAsymmErrors object, when `x` errors are present, the error along x,; 1169/// is projected along the y-direction by calculating the function at the points `x-ex_low` and; 1170/// `x+ex_high`, where `ex_low` and `ex_high` are the corresponding lower and upper error in x.; 1171/// The chi-square is then computed as the sum of the quantity below at each data point:; 1172///; 1173/// \f[; 1174/// \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; 1175/// \f]; 1176///; 1177/// where `x` and `y` are the point coordinates, and `f'(x)` is the derivative of the; 1178/// function `f(x)`.; 1179///; 1180/// In case of asymmetric errors, if the function lies below (above) the data point, `ey` is `ey_low` (`ey_high`).; 1181///; 1182/// The approach used to approximate the uncertainty in y because of the; 1183/// errors in x is to make it equal the error in x times the slope of the line.; 1184/// This approach is called ""effective variance method"" and; 1185/// the implementation is provided in the function FitUtil::EvaluateChi2Effective; 1186///; 1187/// \anch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:41005,error,errors,41005,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,3,['error'],"['error', 'errors']"
Availability,"e range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhigh() const; {return fEYhigh;}. Double_t * GetEXlowd() const; {return fEXlowd;}. Double_t * GetEXhighd() const; {return fEXhighd;}. Double_t * GetEYlowd() const; {return fEYlowd;}. Double_t * G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphBentErrors.html:17791,error,errors,17791,root/html528/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html528/TGraphBentErrors.html,3,['error'],['errors']
Availability,"e reference above that it has good coverage properties for most cases, and can be used where FeldmannCousins can't.; What are the advantages of TRolke over TLimit? TRolke is fully frequentist. TLimit treats nuisance parameters Bayesian. For a coverage study of a Bayesian method refer to physics/0408039 (Tegenfeldt & J.C). However, this note studies the coverage of Feldman&Cousins with Bayesian treatment of nuisance parameters. To make a long story short: using the Bayesian method you might introduce a small amount of over-coverage (though I haven't shown it for TLimit). On the other hand, coverage of course is a not so interesting when you consider yourself a Bayesian. . Definition at line 33 of file TRolke.h. Public Member Functions;  TRolke (Double_t CL=0.9, Option_t *option="""");  Constructor with optional Confidence Level argument. ;  ;  ~TRolke () override;  Destructor. ;  ; Double_t CalculateInterval (Int_t x, Int_t y, Int_t z, Double_t bm, Double_t em, Double_t e, Int_t mid, Double_t sde, Double_t sdb, Double_t tau, Double_t b, Int_t m);  Deprecated and error prone model selection interface. ;  ; bool GetBounding () const;  ; Double_t GetCL () const;  ; bool GetCriticalNumber (Int_t &ncrit, Int_t maxtry=-1);  get the value of x corresponding to rejection of the null hypothesis. ;  ; bool GetLimits (Double_t &low, Double_t &high);  Calculate and get the upper and lower limits for the pre-specified model. ;  ; bool GetLimitsML (Double_t &low, Double_t &high, Int_t &out_x);  get the upper and lower limits for the most likely outcome. ;  ; bool GetLimitsQuantile (Double_t &low, Double_t &high, Int_t &out_x, Double_t integral=0.5);  get the upper and lower limits for the outcome corresponding to a given quantile. ;  ; Double_t GetLowerLimit ();  Calculate and get lower limit for the pre-specified model. ;  ; bool GetSensitivity (Double_t &low, Double_t &high, Double_t pPrecision=0.00001);  get the upper and lower average limits based on the specified model. ;  ; Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:6351,error,error,6351,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['error'],['error']
Availability,"e registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooCategoryProxy _indexCat;  Index category. ;  ; Int_t _numPdf = 0;  Number of registered PDFs. ;  ; RooObjCacheManager _partIntMgr;  ! Component normalization manager ;  ; TList _pdfProxyList;  List of PDF proxies (named after applicable category state) ;  ; const TNamed * _plotCoefNormRange = nullptr;  ; RooSetProxy _plotCoefNormSet;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:71978,error,errors,71978,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['error'],['errors']
Availability,"e regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:8023,error,error,8023,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,6,['error'],['error']
Availability,"e regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProtoClass.html:4564,error,error,4564,doc/master/classTProtoClass.html,https://root.cern,https://root.cern/doc/master/classTProtoClass.html,2,['error'],['error']
Availability,"e remote directory contains a .message; file and it is < 1024 characters then the contents is echoed back.; Returns 0 in case of success and -1 in case of failure. Int_t MakeDirectory(const char* dir, Bool_t print = kFALSE) const; Make a remote directory. Anonymous users may not create directories.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteDirectory(const char* dir) const; Delete a remote directory. Anonymous users may not delete directories.; Returns 0 in case of success and -1 in case of failure. Int_t ListDirectory(Option_t* cmd = """") const; List remote directory. With cmd you specify the options and directory; to be listed to ls. Returns 0 in case of success and -1 in case of; failure. Int_t PrintDirectory() const; Print path of remote working directory. Returns 0 in case of succes and; -1 in cse of failure. Int_t RenameFile(const char* file1, const char* file2) const; Rename a remote file. Anonymous users may not rename files.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteFile(const char* file) const; Delete a remote file. Anonymous users may not delete files.; Returns 0 in case of success and -1 in case of failure. Int_t ChangePermission(const char* file, Int_t mode) const; Change permissions of a remote file. Anonymous users may not; chnage permissions. Returns 0 in case of success and -1 in case; of failure. Int_t Close(); Close ftp connection. Returns 0 in case of success and -1 in case of; failure. Bool_t OpenDirectory(const char* name, Bool_t print = kFALSE); Open a directory via rootd.; Returns kTRUE in case of success.; Returns kFALSE in case of error. void FreeDirectory(Bool_t print = kFALSE); Free a remotely open directory via rootd. const char * GetDirEntry(Bool_t print = kFALSE); Get directory entry via rootd.; Returns 0 in case no more entries or in case of error. Int_t GetPathInfo(const char* path, FileStat_t& buf, Bool_t print = kFALSE); Get info about a file. Info is returned in the form of a File",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:11234,failure,failure,11234,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,6,['failure'],['failure']
Availability,"e replacement of a using declaration. ; Definition at line 153 of file THn.h. ◆ Rebin() [1/2]. THn * THn::Rebin ; (; const Int_t * ; group); const. inline . Definition at line 173 of file THn.h. ◆ Rebin() [2/2]. THn * THn::Rebin ; (; Int_t ; group); const. inline . Definition at line 170 of file THn.h. ◆ Reset(). void THn::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset the contents of a THn. ; Implements THnBase.; Definition at line 250 of file THn.cxx. ◆ SetBinContent() [1/2]. void THn::SetBinContent ; (; const Int_t * ; idx, . Double_t ; v . ). inline . Forwards to THnBase::SetBinContent(). ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 97 of file THn.h. ◆ SetBinContent() [2/2]. void THn::SetBinContent ; (; Long64_t ; bin, . Double_t ; v . ). inlineoverridevirtual . Implements THnBase.; Definition at line 100 of file THn.h. ◆ SetBinError2(). void THn::SetBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). inlineoverridevirtual . Implements THnBase.; Definition at line 103 of file THn.h. ◆ Streamer(). void THn::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in THnT< T >. ◆ StreamerNVirtual(). void THn::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 183 of file THn.h. ◆ Sumw2(). void THn::Sumw2 ; (; ). overridevirtual . Enable calculation of errors. ; Implements THnBase.; Definition at line 216 of file THn.cxx. Member Data Documentation. ◆ fCoordBuf. std::vector<Int_t> THn::fCoordBuf. mutableprotected . Definition at line 181 of file THn.h. ◆ fSumw2. TNDArrayT<Double_t> THn::fSumw2. protected . Definition at line 180 of file THn.h. Libraries for THn:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/THn.h; hist/hist/src/THn.cxx. THn. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:32658,error,errors,32658,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['error'],['errors']
Availability,"e rest; 1224 requestedTesting = useForTesting;; 1225 }; 1226 ; 1227 else if (requestedTraining == 0){ // case B); 1228 useForTesting = TMath::Max(requestedTesting,availableTesting);; 1229 if (allAvailable < useForTesting) {; 1230 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName())<< ""More events requested for testing (""; 1231 << requestedTesting << "") than available (""; 1232 << allAvailable << "")!"" << Endl;; 1233 }; 1234 useForTraining= allAvailable - useForTesting; // the rest; 1235 requestedTraining = useForTraining;; 1236 }; 1237 ; 1238 else {; 1239 // Case A; 1240 // requestedTraining R and requestedTesting S >0; 1241 // free events: Nfree = u-Thet(R-r)-Thet(S-s); 1242 // nR = Max(R,r) + 0.5 * Nfree; 1243 // nS = Max(S,s) + 0.5 * Nfree; 1244 Int_t stillNeedForTraining = TMath::Max(requestedTraining-availableTraining,0);; 1245 Int_t stillNeedForTesting = TMath::Max(requestedTesting-availableTesting,0);; 1246 ; 1247 int NFree = availableUndefined - stillNeedForTraining - stillNeedForTesting;; 1248 if (NFree <0) NFree = 0;; 1249 useForTraining = TMath::Max(requestedTraining,availableTraining) + NFree/2;; 1250 useForTesting= allAvailable - useForTraining; // the rest; 1251 }; 1252 ; 1253 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""determined event sample size to select training sample from=""<<useForTraining<<Endl;; 1254 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""determined event sample size to select test sample from=""<<useForTesting<<Endl;; 1255 ; 1256 ; 1257 ; 1258 // associate undefined events; 1259 if( splitMode == ""ALTERNATE"" ){; 1260 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""split 'ALTERNATE'"" << Endl;; 1261 Int_t nTraining = availableTraining;; 1262 for( EventVector::iterator it = eventVectorUndefined.begin(), itEnd = eventVectorUndefined.end(); it != itEnd; ){; 1263 ++nTraining;; 1264 if( nTraining <= requestedTraining ){; 1265 eventVectorTraining.insert( eventVectorTraining.end(), (*it) );; 1266 ++it;; 126",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:54208,avail,availableTraining,54208,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,4,['avail'],"['availableTesting', 'availableTraining', 'availableUndefined']"
Availability,"e restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if children have finished. Bool_t CheckDescriptors(); Check if there is activity on some file descriptors and call their; Notify() member. int MakeDirectory(const char* name); Make a Unix file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnixSystem.html:23113,error,error,23113,root/html602/TUnixSystem.html,https://root.cern,https://root.cern/root/html602/TUnixSystem.html,2,['error'],['error']
Availability,"e restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. void DispatchSignals(ESignals sig); Handle and dispatch signals. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if children have finished. Bool_t CheckDescriptors(); Check if there is activity on some file descriptors and call their; Notif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:22729,error,error,22729,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,1,['error'],['error']
Availability,"e restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. void DispatchSignals(ESignals sig); Handle and dispatch signals. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if childs have finished. Bool_t CheckDescriptors(); Check if there is activity on some file descriptors and call their; Notify(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:22391,error,error,22391,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,3,['error'],['error']
Availability,"e results using VariationsFor(). In between these steps, no other change to the analysis code is required: the presence of systematic variations for certain columns is automatically propagated through filters, defines and actions, and RDataFrame will take these dependencies into account when producing varied results. VariationsFor() is included in header ROOT/RDFHelpers.hxx. The compiled C++ programs must include this header explicitly, this is not required for ROOT macros.; An example usage of Vary() and VariationsFor() in C++:; auto nominal_hx =; df.Vary(""pt"", ""ROOT::RVecD{pt*0.9f, pt*1.1f}"", {""down"", ""up""}); .Filter(""pt > pt_cut""); .Define(""x"", someFunc, {""pt""}); .Histo1D<float>(""x"");; ; // request the generation of varied results from the nominal_hx; ROOT::RDF::Experimental::RResultMap<TH1D> hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; ; // the event loop runs here, upon first access to any of the results or varied results:; hx[""nominal""].Draw(); // same effect as nominal_hx->Draw(); hx[""pt:down""].Draw(""SAME"");; hx[""pt:up""].Draw(""SAME"");; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; A list of variation ""tags"" is passed as the last argument to Vary(). The tags give names to the varied values that are returned as elements of an RVec of the appropriate C++ type. The number of variation tags must correspond to the number of elements of this RVec (2 in the example above: the first element will correspond to the tag ""down"", the second to the tag ""up""). The full variation name will be composed of the varied column name and the variation tags (e.g. ""pt:down"", ""pt:up"" in this example). Python usage looks similar.; Note how we use the ""pt"" column as usual in the Filter() and Define() calls and we simply use ""x"" as the value to fill the resulting histogram. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:53941,down,down,53941,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['down'],['down']
Availability,"e retrieved also; from the fitted function. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); -*-*-*-*-*Display a panel with all histogram fit options*-*-*-*-*-*. See class TFitPanel for example. Option_t * GetGraphDrawOption(const TGraph* gr) const; Return the draw option for the TGraph gr in this TMultiGraph; The return option is the one specified when calling TMultiGraph::Add(gr,option). void InitGaus(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin, Double_t xmax); Compute Initial values of parameters for an exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiGraph.html:14608,error,errors,14608,root/html528/TMultiGraph.html,https://root.cern,https://root.cern/root/html528/TMultiGraph.html,3,['error'],['errors']
Availability,"e retrieved also; from the fitted function. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a panel with all histogram fit options.; See class TFitPanel for example. Option_t * GetGraphDrawOption(const TGraph* gr) const; Return the draw option for the TGraph gr in this TMultiGraph.; The return option is the one specified when calling TMultiGraph::Add(gr,option). void InitGaus(Double_t xmin, Double_t xmax); Compute Initial values of parameters for a gaussian. void InitExpo(Double_t xmin, Double_t xmax); Compute Initial values of parameters for an exponential. void Init",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiGraph.html:21050,error,errors,21050,root/html534/TMultiGraph.html,https://root.cern,https://root.cern/root/html534/TMultiGraph.html,3,['error'],['errors']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.05); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point; Double_tfToleranceprobability to add an unecessary term. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BernsteinCorrection(Double_t tolerance). Int_t ImportCorrectedPdf(RooWorkspace* , const char* , c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BernsteinCorrection.html:2605,toler,tolerance,2605,root/html528/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html528/RooStats__BernsteinCorrection.html,3,['toler'],['tolerance']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.05); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point; Double_tfToleranceprobability to add an unecessary term. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BernsteinCorrection(Double_t tolerance). Int_t ImportCorrectedPdf(RooWorkspace* , c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__BernsteinCorrection.html:2615,toler,tolerance,2615,root/html526/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html526/RooStats__BernsteinCorrection.html,1,['toler'],['tolerance']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.05); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); voidSetMaxDegree(Int_t maxDegree); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point (default is 100); Int_tfMaxDegreemaximum polynomial degree correction (default is 10); Double_tfToleranceprobability to add an unnecessary term. Class Charts. Inheritance; Inherited Members; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__BernsteinCorrection.html:2615,toler,tolerance,2615,root/html534/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html534/RooStats__BernsteinCorrection.html,1,['toler'],['tolerance']
Availability,"e roughly ; \chi^2 with one degree of freedom if the n-th order correction is a good model for the data. ; Thus, one only moves to the n+1-th order correction of q is relatively large. The chance that ; one moves from the n-th to the n+1-th order correction when the n-th order correction ; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 > threshold). The constructor ; of this class allows you to directly set this tolerance (in terms of probability that the n+1-th; term is added unnecessarily). To do:; Add another method to the utility that will make the sampling distribution for -2 log lambda ; for various m vs. m+1 order corrections using a nominal model and perhaps having two ways of ; generating the toys (either via a histogram or via an independent model that is supposed to; reflect reality). That will allow one to make plots like Glen has at the end of his DRAFT; very easily. . Function Members (Methods); public:. virtual~BernsteinCorrection(); RooStats::BernsteinCorrectionBernsteinCorrection(double tolerance = 0.050000000000000003); RooStats::BernsteinCorrectionBernsteinCorrection(const RooStats::BernsteinCorrection&); static TClass*Class(); voidCreateQSamplingDist(RooWorkspace* wks, const char* nominalName, const char* varName, const char* dataName, TH1F*, TH1F*, Int_t degree, Int_t nToys = 500); Int_tImportCorrectedPdf(RooWorkspace*, const char*, const char*, const char*); virtual TClass*IsA() const; RooStats::BernsteinCorrection&operator=(const RooStats::BernsteinCorrection&); voidSetMaxCorrection(Double_t maxCorr); voidSetMaxDegree(Int_t maxDegree); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; private:. Double_tfMaxCorrectionmaximum correction factor at any point (default is 100); Int_tfMaxDegreemaximum polynomial degree correction (default is 10); Double_tfToleranceprobability to add an unnecessary term. Class Charts. Inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__BernsteinCorrection.html:2615,toler,tolerance,2615,root/html602/RooStats__BernsteinCorrection.html,https://root.cern,https://root.cern/root/html602/RooStats__BernsteinCorrection.html,2,['toler'],['tolerance']
Availability,"e scaling beyond fFixR; Float_tTEveProjection::fPastFixZFacrelative scaling factor beyond fFixZ as 10^x; Float_tTEveProjection::fPastFixZScalerelative scaling beyond fFixZ; TEveProjection::vPreScale_tTEveProjection::fPreScales[3]scaling before the distortion; Float_tTEveProjection::fScaleRscale factor to keep projected radius at fFixR fixed; Float_tTEveProjection::fScaleZscale factor to keep projected z-coordinate at fFixZ fixed; TEveProjection::EPType_eTEveProjection::fTypetype; Bool_tTEveProjection::fUsePreScaleuse pre-scaling. private:. TEveVectorfProjectedCenterprojected center of distortion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveRhoZProjection(); Constructor. void ProjectPoint(Float_t& x, Float_t& y, Float_t& z, Float_t d, TEveProjection::EPProc_e proc = kPP_Full); Project point. void SetCenter(TEveVector& v); Set center of distortion (virtual method). void SetDirectionalVector(Int_t screenAxis, TEveVector& vec); Get direction in the unprojected space for axis index in the; projected space.; This is virtual method from base-class TEveProjection. Bool_t AcceptSegment(TEveVector& v1, TEveVector& v2, Float_t tolerance) const; Check if segment of two projected points is valid. Move slightly one of the points if by shifting it by no more than; tolearance the segment can become acceptable. Int_t SubSpaceId(const TEveVector& v) const; Return sub-space id for the point.; 0 - upper half-space; 1 - lowwer half-space. Bool_t IsOnSubSpaceBoundrary(const TEveVector& v) const; Checks if point is on sub-space boundrary. Bool_t Is2D() const. Bool_t Is3D() const. Float_t* GetProjectedCenter(). Bool_t HasSeveralSubSpaces() const; { return kFALSE; }. TEveRhoZProjection(). virtual ~TEveRhoZProjection(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveRhoZProjection.html:6598,toler,tolerance,6598,root/html604/TEveRhoZProjection.html,https://root.cern,https://root.cern/root/html604/TEveRhoZProjection.html,1,['toler'],['tolerance']
Availability,"e scaling beyond fFixR; Float_tTEveProjection::fPastFixZFacrelative scaling factor beyond fFixZ as 10^x; Float_tTEveProjection::fPastFixZScalerelative scaling beyond fFixZ; TEveProjection::vPreScale_tTEveProjection::fPreScales[3]scaling before the distortion; Float_tTEveProjection::fScaleRscale factor to keep projected radius at fFixR fixed; Float_tTEveProjection::fScaleZscale factor to keep projected z-coordinate at fFixZ fixed; TEveProjection::EPType_eTEveProjection::fTypetype; Bool_tTEveProjection::fUsePreScaleuse pre-scaling. private:. TEveVectorfProjectedCenterprojected center of distortion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveRhoZProjection(); Constructor. void ProjectPoint(Float_t& x, Float_t& y, Float_t& z, Float_t d, TEveProjection::EPProc_e proc = kPP_Full); Project point. void SetCenter(TEveVector& v); Set center of distortion (virtual method). void SetDirectionalVector(Int_t screenAxis, TEveVector& vec); Get direction in the unprojected space for axis index in the; projected space.; This is virtual method from base-class TEveProjection. Bool_t AcceptSegment(TEveVector& v1, TEveVector& v2, Float_t tolerance) const; Check if segment of two projected points is valid. Move slightly one of the points if by shifting it by no more than; tolearance the segment can become acceptable. Int_t SubSpaceId(const TEveVector& v) const; Return sub-space id for the point.; 0 - upper half-space; 1 - lowwer half-space. Bool_t IsOnSubSpaceBoundrary(const TEveVector& v) const; Checks if point is on sub-space boundrary. Bool_t Is2D() const. Bool_t Is3D() const. Float_t* GetProjectedCenter(). Bool_t HasSeveralSubSpaces() const; { return kFALSE; }. TEveRhoZProjection(). virtual ~TEveRhoZProjection(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveRhoZProjection.html:6598,toler,tolerance,6598,root/html602/TEveRhoZProjection.html,https://root.cern,https://root.cern/root/html602/TEveRhoZProjection.html,1,['toler'],['tolerance']
Availability,"e searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCint.html:26039,error,error,26039,root/html528/TCint.html,https://root.cern,https://root.cern/root/html528/TCint.html,3,['error'],['error']
Availability,"e sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 70 of file TServerSocket.h. ◆ Send() [4/4]. Int_t TServerSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). inlineoverridevirtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 72 of file TServerSocket.h. ◆ SendObject(). Int_t TServerSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). inlineoverridevirtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented from TSocket.; Definition at line 76 of file TServerSocket.h. ◆ SendRaw(). Int_t TServerSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). inlineoverridevirtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented from TSocket.; Definition at line 78 of file TServerSocket.h. ◆ SetAcceptOptions(). void TServerSocket::SetAcceptOptions ; (; UChar_t ; mod). static . Set default options for Accept according to modifier 'mod'. ; Use: kSrvAuth require client authentication kSrvNoAuth do not require client authentication ; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:29944,error,error,29944,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['error'],['error']
Availability,"e shown in class A with a blue line; crossing-out the corresponding member function.; The following picture is the class inheritance tree of class TPaveLabel:. /*; ; */. TObject * DrawClone(Option_t* option = """") const; Draw a clone of this object in the current pad. void Dump() const; Dump contents of object on stdout.; Using the information in the object dictionary (class TClass); each data member is interpreted.; If a data member is a pointer, the pointer value is printed. The following output is the Dump of a TArrow object:; fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style. void Execute(const char* method, const char* params, Int_t* error = 0); Execute method on this object with the given parameter string, e.g.; ""3.14,1,\""text\"""". void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); Execute method on this object with parameters stored in the TObjArray.; The TObjArray should contain an argv vector like:. argv[0] ... argv[n] = the list of TObjString parameters. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to an event at (px,py). This method; must be overridden if an object can react to graphics events. TObject * FindObject(const char* name) const; Must be redefined in derived classes.; This function is typycally used with TCollections, but can also be used; to find an object by name inside this object. TObject * FindObject(const TObject* obj) const; Must be redefined in derived classes.; This function is typycally used with TCollections, but can also be used; to find an object inside this object. Option_t * GetDrawOption() const; Get option used by the graphics system to dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObject.html:8518,error,error,8518,root/html528/TObject.html,https://root.cern,https://root.cern/root/html528/TObject.html,6,['error'],['error']
Availability,"e size of the box is proportional to the absolute value of the cell contents. The cells with negative contents are drawn with an X on top of the boxes. With option BOX1 a button is drawn for each cell with surface proportional to contents’ absolute value. A sunken button is drawn for negative values, a raised one for positive values.; 3.8.2.4 The ERRor Bars Options. ""E"" Default. Draw only error bars, without markers; ""E0"" Draw also bins with 0 contents (turn off the symbols clipping).; ""E1"" Draw small lines at the end of error bars; ""E2"" Draw error rectangles; ""E3"" Draw a fill area through the end points of vertical error bars; ""E4"" Draw a smoothed filled area through the end points of error bars. The “E1” bars’ option. Note that for all options, the line and fill attributes of the histogram are used for the errors or errors contours. Use gStyle->SetErrorX(dx) to control the size of the error along x. The parameter dx is a percentage of bin width for errors along X. Set dx=0 to suppress the error along X. Use gStyle->SetEndErrorSize(np) to control the size of the lines at the end of the error bars (when option 1 is used). By default np=1 (np represents the number of pixels).; 3.8.2.5 The Color Option; For each cell (i,j) a box is drawn with a color proportional to the cell content. The color table used is defined in the current style (gStyle ). The color palette in TStyle can be modified with TStyle::SetPalette . Different draw options. 3.8.2.6 The TEXT Option; For each cell (i,j) the cell content is printed. The text attributes are:. Text font = current font set by TStyle; Text size= 0.02 * pad-height * marker-size; Text color= marker color. The TEXT option. 3.8.2.7 The CONTour Options; The following contour options are supported:. ""CONT"": Draw a contour plot (same as CONT0); ""CONT0"": Draw a contour plot using surface colors to distinguish contours; ""CONT1"": Draw a contour plot using line styles to distinguish contours; ""CONT2"": Draw a contour plot using the same l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:91799,error,error,91799,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"e sizes (physical) of the transform in each dimension. ~TFFTReal(); clean-up. void Init(Option_t* flags, Int_t sign, const Int_t* kind); Creates the fftw-plan. NOTE: input and output arrays are overwritten during initialisation,; so don't set any points, before running this function!!!!!. 1st parameter:; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found; This option should be chosen depending on how many transforms of the same size and; type are going to be done. Planning is only done once, for the first transform of this; size and type.; 2nd parameter is dummy and doesn't need to be specified; 3rd parameter- transform kind for each dimension; 4 different kinds of sine and cosine transforms are available; DCT-I - kind=0; DCT-II - kind=1; DCT-III - kind=2; DCT-IV - kind=3; DST-I - kind=4; DST-II - kind=5; DSTIII - kind=6; DSTIV - kind=7. void Transform(); Computes the transform, specified in Init() function. Option_t * GetType() const; Returns the type of the transform. void GetPoints(Double_t* data, Bool_t fromInput = kFALSE) const; Copies the output (or input) points into the provided array, that should; be big enough. Double_t GetPointReal(Int_t ipoint, Bool_t fromInput = kFALSE) const; For 1d tranforms. Returns point #ipoint. Double_t GetPointReal(const Int_t* ipoint, Bool_t fromInput = kFALSE) const; For multidim.transforms. Returns point #ipoint. void GetPointComplex(Int_t ipoint, Double_t& re, Double_t& im, Bool_t fromInput = kFALSE) const; Only for input of HC2R and output of R2HC. void GetPointComplex(const Int_t* ipoint, Double_t& re, Double_t& im, Bool_t fromInput = kFALSE) const; Only for input of HC2R and output of R2HC and for 1d. Double_t* GetPointsReal(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFFTReal.html:10364,avail,available,10364,root/html528/TFFTReal.html,https://root.cern,https://root.cern/root/html528/TFFTReal.html,6,['avail'],['available']
Availability,"e some hierarchy, one has to create several other volumes and the matrices to position them. Once this is done, use the volume editor interface to:. add/remove daughters, change shape, edit position of daughters; change visualization settings; divide the volume (only if there are no daughters yet). Close the geometry from the “General” category. 19 Python Interface. Python is a popular, open-source, dynamic programming language with an interactive interpreter. Its interoperability with other programming languages, both for extending Python as well as embedding it, is excellent and many existing third-party applications and libraries have therefore so-called “Python bindings.” PyROOT provides Python bindings for ROOT: it enables cross-calls from ROOT/Cling into Python and vice versa, the intermingling of the two interpreters, and the transport of user-level objects from one interpreter to the other. PyROOT enables access from ROOT to any application or library that itself has Python bindings, and it makes all ROOT functionality directly available from the python interpreter.; 19.1 PyROOT Overview; The Python scripting language is widely used for scientific programming, including high performance and distributed parallel code (see http://www.scipy.org). It is the second most popular scripting language (after Perl) and enjoys a wide-spread use as a “glue language”: practically every library and application these days comes with Python bindings (and if not, they can be easily written or generated).; PyROOT, a Python extension module, provides the bindings for the ROOT class library in a generic way using the Cling dictionary. This way, it allows the use of any ROOT classes from the Python interpreter, and thus the “glue-ing” of ROOT libraries with any non-ROOT library or applications that provide Python bindings. Further, PyROOT can be loaded into the Cling interpreter to allow (as of now still rudimentary) access to Python classes. The best way to understand the benefit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1041866,avail,available,1041866,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"e specified drawable. id - specifies which screen the pixmap is created on; bitmap - the data in bitmap format; width, height - define the dimensions of the pixmap; forecolor - the foreground pixel values to use; backcolor - the background pixel values to use; depth - the depth of the pixmap. Pixmap_t CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); Creates a bitmap (i.e. pixmap with depth 1) from the bitmap data. id - specifies which screen the pixmap is created on; bitmap - the data in bitmap format; width, height - define the dimensions of the pixmap. void DeletePixmap(Pixmap_t pmap); Explicitely deletes the pixmap resource ""pmap"". Bool_t CreatePictureFromFile(Drawable_t id, const char* filename, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); Creates a picture pict from data in file ""filename"". The picture; attributes ""attr"" are used for input and output. Returns kTRUE in; case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; exist it is set to kNone. Bool_t CreatePictureFromData(Drawable_t id, char** data, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); Creates a picture pict from data in bitmap format. The picture; attributes ""attr"" are used for input and output. Returns kTRUE in; case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; exist it is set to kNone. Bool_t ReadPictureDataFromFile(const char* filename, char*** ret_data); Reads picture data from file ""filename"" and store it in ""ret_data"".; Returns kTRUE in case of success, kFALSE otherwise. void DeletePictureData(void* data); Delete picture data created by the function ReadPictureDataFromFile. void SetDashes(GContext_t gc, Int_t offset, const char* dash_list, Int_t n); Sets the dash-offset and dash-list attributes for dashed line styles; in the specified GC. There must be at least one element in the; specified dash_list. The initial and alternating elements (second,; fourth, and so on) of the dash_list are the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:43417,mask,mask,43417,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['mask'],['mask']
Availability,"e specified file. ; If the fInputData is empty the specified file is sent over. If there is no specified file, a file named ""inputdata.root"" is created locally with the content of fInputData and sent over to the master. If both fInputData and the specified file are not empty, a copy of the file is made locally and augmented with the content of fInputData. ; Reimplemented in TProofLite.; Definition at line 9612 of file TProof.cxx. ◆ SendLogToWindow(). void TProof::SendLogToWindow ; (; Bool_t ; mode). inline . Definition at line 1017 of file TProof.h. ◆ SendObject(). Int_t TProof::SendObject ; (; const TObject * ; obj, . ESlaves ; list = kActive . ). private . Send object to master or slave servers. ; Returns number of slaves object was sent to, -1 in case of error. ; Definition at line 7054 of file TProof.cxx. ◆ SendPrint(). Int_t TProof::SendPrint ; (; Option_t * ; option = """"). private . Send print command to master server. ; Returns number of slaves message was sent to. Returns -1 in case of error. ; Definition at line 7068 of file TProof.cxx. ◆ SetActive(). void TProof::SetActive ; (; Bool_t ; = kTRUE). inline . Definition at line 988 of file TProof.h. ◆ SetAlias(). void TProof::SetAlias ; (; const char * ; alias = """"). virtual . Set an alias for this session. ; If reconnection is supported, the alias will be communicated to the remote coordinator so that it can be recovered when reconnecting ; Definition at line 10583 of file TProof.cxx. ◆ SetDataPoolUrl(). void TProof::SetDataPoolUrl ; (; const char * ; url). inline . Definition at line 1044 of file TProof.h. ◆ SetDataSetTreeName(). Int_t TProof::SetDataSetTreeName ; (; const char * ; dataset, . const char * ; treename . ). virtual . Set/Change the name of the default tree. ; The tree name may contain subdir specification in the form ""subdir/name"". Returns 0 on success, -1 otherwise. ; Reimplemented in TProofLite.; Definition at line 10766 of file TProof.cxx. ◆ SetDrawFeedbackOption(). void TProof::SetDrawFeedba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:141311,error,error,141311,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"e specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:13288,error,error,13288,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['error']
Availability,"e specified list (either; all slaves or only the active slaves). Returns the number of slaves; the message was successfully sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind, TList* slaves); Broadcast a character string buffer to all slaves in the specified; list. Use kind to set the TMessage what field. Returns the number of; slaves the message was sent to. Returns -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, TProof::ESlaves list = kActive); Broadcast a character string buffer to all slaves in the specified; list (either all slaves or only the active slaves). Use kind to; set the TMessage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Broadcast an object to all slaves in the specified list. Use kind to; set the TMEssage what field. Returns the number of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slaves); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:40224,error,error,40224,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['error'],['error']
Availability,"e specified output stream. ;  ; void printValue (std::ostream &os) const override;  Print value of the dataset, i.e. the sum of weights contained in the dataset. ;  ; void SetName (const char *name) override;  Change the name of this dataset into the given name. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the title of this dataset into the given name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class RooDataSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double sumEntries () const override;  Return effective number of entries in dataset, i.e., sum all weights. ;  ; double sumEntries (const char *cutSpec, const char *cutRange=nullptr) const override;  Return the sum of weights in all entries matching cutSpec (if specified) and in named range cutRange (if specified) ;  ; double weight () const override;  Return event weight of current event. ;  ; void weightError (double &lo, double &hi, ErrorType etype=SumW2) const override;  Return the asymmetric errors on the current weight. ;  ; double weightError (ErrorType etype=SumW2) const override;  ; double weightSquared () const override;  Return squared event weight of the current event. ;  ; RooRealVar * weightVar () const;  Returns a pointer to the weight variable (if set). ;  ; bool write (const char *filename) const;  Write the contents of this dataset to an ASCII file with the specified name. ;  ; bool write (std::ostream &ofs) const;  Write the contents of this dataset to the stream. ;  ;  Public Member Functions inherited from RooAbsData;  RooAbsData ();  Default constructor. ;  ;  RooAbsData (const RooAbsData &other, const char *newname=nullptr);  Copy constructor. ;  ;  RooAbsData (RooStringView name, RooStringView title, const RooArgSet &vars, RooAbsDataStore *store=nullptr);  Constructor from a set of variables. ;  ;  ~RooAbsData () override;  Destructor. ;  ; void addOwnedComponent (const char *idxlabel, RooAbsData &data);  ; void at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:8585,error,errors,8585,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['error'],['errors']
Availability,"e step)=0set a new free variable; ROOT::Math::Minimizer::FixVariablevirtual bool FixVariable(unsigned int ivar)fix an existing variableDefinition Minimizer.cxx:87; ROOT::Math::Minimizer::SetFixedVariablevirtual bool SetFixedVariable(unsigned int ivar, const std::string &name, double val)set a new fixed variable (override if minimizer supports them )Definition Minimizer.cxx:44; ROOT::Math::Minimizer::GetMinosErrorvirtual bool GetMinosError(unsigned int ivar, double &errLow, double &errUp, int option=0)minos error for variable i, return false if Minos failed or not supported and the lower and upper err...Definition Minimizer.cxx:172; ROOT::Math::Minimizer::SetVariableLowerLimitvirtual bool SetVariableLowerLimit(unsigned int ivar, double lower)set the lower-limit of an already existing variableDefinition Minimizer.cxx:70; ROOT::Math::Minimizer::IsFixedVariablevirtual bool IsFixedVariable(unsigned int ivar) constquery if an existing variable is fixed (i.e.Definition Minimizer.cxx:102; ROOT::Math::Minimizer::ReleaseVariablevirtual bool ReleaseVariable(unsigned int ivar)release an existing variableDefinition Minimizer.cxx:94; ROOT::Math::Minimizer::Hessevirtual bool Hesse()perform a full calculation of the Hessian matrix for error calculationDefinition Minimizer.cxx:185; ROOT::Math::Minimizer::Contourvirtual bool Contour(unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj)find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The c...Definition Minimizer.cxx:211; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoresrcMinimizer.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:13650,error,error,13650,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['error'],['error']
Availability,"e strategy; 344 void SetStrategy(int strategyLevel) { fOptions.SetStrategy(strategyLevel); }; 345 ; 346 /// set scale for calculating the errors; 347 void SetErrorDef(double up) { fOptions.SetErrorDef(up); }; 348 ; 349 /// flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit); 350 void SetValidError(bool on) { fValidError = on; }; 351 ; 352 /// set all options in one go; 353 void SetOptions(const MinimizerOptions & opt) {; 354 fOptions = opt;; 355 }; 356 ; 357 /// set only the extra options; 358 void SetExtraOptions(const IOptions & extraOptions) { fOptions.SetExtraOptions(extraOptions); }; 359 ; 360 /// reset the default options (defined in MinimizerOptions); 361 void SetDefaultOptions() {; 362 fOptions.ResetToDefaultOptions();; 363 }; 364 ; 365protected:; 366 ; 367 // keep protected to be accessible by the derived classes; 368 ; 369 bool fValidError = false; ///< flag to control if errors have been validated (Hesse has been run in case of Minuit); 370 MinimizerOptions fOptions; ///< minimizer options; 371 int fStatus = -1; ///< status of minimizer; 372};; 373 ; 374 } // end namespace Math; 375 ; 376} // end namespace ROOT; 377 ; 378 ; 379#endif /* ROOT_Math_Minimizer */; IFunction.h; MinimizerOptions.h; RSpan.hxx; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Math::IB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:16354,error,errors,16354,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['error'],['errors']
Availability,"e stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm is a flag to control if the intervals need to be normalized to the chi2/ndf value; By default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors() const; flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 39474 2011-05-30 07:48:13Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__FitResult.html:10695,error,errors,10695,root/html530/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__FitResult.html,2,['error'],"['error', 'errors']"
Availability,"e stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm is a flag to control if the intervals need to be normalized to the chi2/ndf value; By default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors() const; flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 39474 2011-05-30 07:48:13Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__FitResult.html:10695,error,errors,10695,root/html532/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__FitResult.html,2,['error'],"['error', 'errors']"
Availability,e structure to store sum of squares of weights per bin. ; This is needed to compute the correct statistical quantities of a profile filled with weights; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag is false the structure is deleted ; Reimplemented from TH1.; Definition at line 1825 of file TProfile.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 36 of file TProfile.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 35 of file TProfile.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile::fBinEntries. protected . number of entries per bin ; Definition at line 39 of file TProfile.h. ◆ fBinSumw2. TArrayD TProfile::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 46 of file TProfile.h. ◆ fErrorMode. EErrorType TProfile::fErrorMode. protected . Option to compute errors. ; Definition at line 40 of file TProfile.h. ◆ fgApproximate. Bool_t TProfile::fgApproximate = kFALSE. staticprotected . bin error approximation option ; Definition at line 48 of file TProfile.h. ◆ fScaling. Bool_t TProfile::fScaling. protected . ! True when TProfile::Scale is called ; Definition at line 43 of file TProfile.h. ◆ fTsumwy. Double_t TProfile::fTsumwy. protected . Total Sum of weight*Y. ; Definition at line 44 of file TProfile.h. ◆ fTsumwy2. Double_t TProfile::fTsumwy2. protected . Total Sum of weight*Y*Y. ; Definition at line 45 of file TProfile.h. ◆ fYmax. Double_t TProfile::fYmax. protected . Upper limit in Y (if set) ; Definition at line 42 of file TProfile.h. ◆ fYmin. Double_t TProfile::fYmin. protected . Lower limit in Y (if set) ; Definition at line 41 of file TProfile.h. Libraries for TProfile:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile.h; hist/hist/src/TProfile.cxx. TProfile. ROOT master,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:90590,error,errors,90590,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['errors']
Availability,"e that generates numEntries entries.; 1637/// \param[in] numEntries The number of entries to generate.; 1638///; 1639/// An empty-source dataframe constructed with a number of entries will; 1640/// generate those entries on the fly when some action is triggered,; 1641/// and it will do so for all the previously-defined columns.; 1642/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1643RDataFrame::RDataFrame(ULong64_t numEntries); 1644 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1645 ; 1646{; 1647}; 1648 ; 1649//////////////////////////////////////////////////////////////////////////; 1650/// \brief Build dataframe associated to data source.; 1651/// \param[in] ds The data source object.; 1652/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1653///; 1654/// A dataframe associated to a data source will query it to access column values.; 1655/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1656RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1657 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1658{; 1659}; 1660 ; 1661//////////////////////////////////////////////////////////////////////////; 1662/// \brief Build dataframe from an RDatasetSpec object.; 1663/// \param[in] spec The dataset specification object.; 1664///; 1665/// A dataset specification includes trees and file names,; 1666/// as well as an optional friend list and/or entry range.; 1667///; 1668/// ### Example usage from Python:; 1669/// ~~~{.py}; 1670/// spec = (; 1671/// ROOT.RDF.Experimental.RDatasetSpec(); 1672/// .AddSample((""data"", ""tree"", ""file.root"")); 1673/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1674/// .WithGlobalRange((100, 200)); 1675/// ); 1676/// df = ROOT.RDataFrame(spec); 1677/// ~~~; 1678///; 1679/// See also ROOT::RDataFrame::FromSp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:92824,avail,available,92824,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e that generates numEntries entries.; 1814/// \param[in] numEntries The number of entries to generate.; 1815///; 1816/// An empty-source dataframe constructed with a number of entries will; 1817/// generate those entries on the fly when some action is triggered,; 1818/// and it will do so for all the previously-defined columns.; 1819/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1820RDataFrame::RDataFrame(ULong64_t numEntries); 1821 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1822 ; 1823{; 1824}; 1825 ; 1826//////////////////////////////////////////////////////////////////////////; 1827/// \brief Build dataframe associated to data source.; 1828/// \param[in] ds The data source object.; 1829/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1830///; 1831/// A dataframe associated to a data source will query it to access column values.; 1832/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1833RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1834 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1835{; 1836}; 1837 ; 1838//////////////////////////////////////////////////////////////////////////; 1839/// \brief Build dataframe from an RDatasetSpec object.; 1840/// \param[in] spec The dataset specification object.; 1841///; 1842/// A dataset specification includes trees and file names,; 1843/// as well as an optional friend list and/or entry range.; 1844///; 1845/// ### Example usage from Python:; 1846/// ~~~{.py}; 1847/// spec = (; 1848/// ROOT.RDF.Experimental.RDatasetSpec(); 1849/// .AddSample((""data"", ""tree"", ""file.root"")); 1850/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1851/// .WithGlobalRange((100, 200)); 1852/// ); 1853/// df = ROOT.RDataFrame(spec); 1854/// ~~~; 1855///; 1856/// See also ROOT::RDataFrame::FromSp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:100663,avail,available,100663,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e that in case of only dense layer the input layout could be omitted but it is required when defining more; # complex architectures; ; # - **layer layout** string defining the layer architecture. The syntax is; # - layer type (e.g. DENSE, CONV, RNN); # - layer parameters (e.g. number of units); # - activation function (e.g TANH, RELU,...); ; # *the different layers are separated by the ``"",""`` *; ; #### 2. Define Training Strategy; ; # We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; # One can then concatenate different training strategy with different parameters. The training strategy are separated by; # the ``""|""`` separator.; ; # - Optimizer; # - Learning rate; # - Momentum (valid for SGD and RMSPROP); # - Regularization and Weight Decay; # - Dropout; # - Max number of epochs; # - Convergence steps. if the test error will not decrease after that value the training will stop; # - Batch size (This value must be the same specified in the input layout); # - Test Repetitions (the interval when the test error will be computed); ; ; #### 3. Define general DNN options; ; # We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; # Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; # In addition to input layout, batch layout and training strategy we add now:; ; # - Type of Loss function (e.g. CROSSENTROPY); # - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); # - Variable Transformation; # - Type of Architecture (e.g. CPU, GPU, Standard); ; # We can then book the DL method using the built option string; if useDL:; useDLGPU = ROOT.gSystem.GetFromPipe(""root-config --has-tmva-gpu"") == ""yes""; ; # Define DNN layout; # Define Training strategies; # one can catenate several training strategies; training1 = ROOT.TString(; ""LearningRate=1e-3,Momentum=0.9,""; ""ConvergenceSteps=10,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:64319,error,error,64319,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,2,['error'],['error']
Availability,"e that indpar = {0,1,2,....,fNpar-1}. void SetMaximum(Double_t maximum = -1111); Set the maximum value along Y for this function; In case the function is already drawn, set also the maximum in the; helper histogram. void SetMinimum(Double_t minimum = -1111); Set the minimum value along Y for this function; In case the function is already drawn, set also the minimum in the; helper histogram. void SetNDF(Int_t ndf); Set the number of degrees of freedom; ndf should be the number of points used in a fit - the number of free parameters. void SetNpx(Int_t npx = 100); Set the number of points used to draw the function. The default number of points along x is 100 for 1-d functions and 30 for 2-d/3-d functions; You can increase this value to get a better resolution when drawing; pictures with sharp peaks or to get a better result when using TF1::GetRandom; the minimum number of points is 4, the maximum is 10000000 for 1-d and 10000 for 2-d/3-d functions. void SetParError(Int_t ipar, Double_t error); Set error for parameter number ipar. void SetParErrors(const Double_t* errors); Set errors for all active parameters; when calling this function, the array errors must have at least fNpar values. void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); Set limits for parameter ipar. The specified limits will be used in a fit operation; when the option ""B"" is specified (Bounds).; To fix a parameter, use TF1::FixParameter. void SetRange(Double_t xmin, Double_t xmax); Initialize the upper and lower bounds to draw the function. The function range is also used in an histogram fit operation; when the option ""R"" is specified. void SetSavedPoint(Int_t point, Double_t value); Restore value of function saved at point. void SetTitle(const char* title = """"); Set function title; if title has the form ""fffffff;xxxx;yyyy"", it is assumed that; the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; titles for the X and Y axis respectively. void Streamer(TBuffer& ); Stream a class o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TF1.html:61959,error,error,61959,root/html534/TF1.html,https://root.cern,https://root.cern/root/html534/TF1.html,4,['error'],['error']
Availability,"e that indpar = {0,1,2,....,fNpar-1}. void SetMaximum(Double_t maximum = -1111); Set the maximum value along Y for this function; In case the function is already drawn, set also the maximum in the; helper histogram. void SetMinimum(Double_t minimum = -1111); Set the minimum value along Y for this function; In case the function is already drawn, set also the minimum in the; helper histogram. void SetNDF(Int_t ndf); Set the number of degrees of freedom; ndf should be the number of points used in a fit - the number of free parameters. void SetNpx(Int_t npx = 100); Set the number of points used to draw the function. The default number of points along x is 100 for 1-d functions and 30 for 2-d/3-d functions; You can increase this value to get a better resolution when drawing; pictures with sharp peaks or to get a better result when using TF1::GetRandom; the minimum number of points is 4, the maximum is 10000000 for 1-d and 10000 for 2-d/3-d functions. void SetParError(Int_t ipar, Double_t error); Set error for parameter number ipar. void SetParErrors(const Double_t* errors); Set errors for all active parameters; when calling this function, the array errors must have at least fNpar values. void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); Set limits for parameter ipar. The specified limits will be used in a fit operation; when the option ""B"" is specified (Bounds).; To fix a parameter, use TF1::FixParameter. void SetRange(Double_t xmin, Double_t xmax); Initialize the upper and lower bounds to draw the function. The function range is also used in an histogram fit operation; when the option ""R"" is specified. void SetSavedPoint(Int_t point, Double_t value); Restore value of function saved at point. void SetTitle(const char* title = """"); Set function title; if title has the form ""fffffff;xxxx;yyyy"", it is assumed that; the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; titles for the X and Y axis respectively. void Streamer(TBuffer& b); Stream a class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF1.html:61515,error,error,61515,root/html530/TF1.html,https://root.cern,https://root.cern/root/html530/TF1.html,4,['error'],['error']
Availability,"e that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {return fEntryOffset;}. Int_t GetNevBuf() const; {return fNevBuf;}. Int_t GetNevBufSize() const; {return fNevBufSize;}. Int_t GetLast() const; {return fLast;}. void PrepareBasket(Long64_t ); {}. void SetBranch(TBranch* branch); { fBranch = branch; }. void SetNevBufSize(Int_t n); { fNevBufSize=n; }. void Update(Int_t newlast); { Update(newlast,newlast); }. » Author: Rene Brun 19/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBasket.h 39642 2011-06-09 17:18:42Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the document",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBasket.html:12261,error,error,12261,root/html532/TBasket.html,https://root.cern,https://root.cern/root/html532/TBasket.html,1,['error'],['error']
Availability,"e that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {return fEntryOffset;}. Int_t GetNevBuf() const; {return fNevBuf;}. Int_t GetNevBufSize() const; {return fNevBufSize;}. Int_t GetLast() const; {return fLast;}. void PrepareBasket(Long64_t ); {}. void SetBranch(TBranch* branch); { fBranch = branch; }. void SetNevBufSize(Int_t n); { fNevBufSize=n; }. void Update(Int_t newlast); { Update(newlast,newlast); }. » Author: Rene Brun 19/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBasket.h 39643 2011-06-09 17:32:22Z pcanal $ » Last generated: 2011-07-04 15:25; This page has been automatically generated. For comments or suggestions regarding the document",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBasket.html:12254,error,error,12254,root/html530/TBasket.html,https://root.cern,https://root.cern/root/html530/TBasket.html,1,['error'],['error']
Availability,"e the 'mutable' keyword; 2136 return fMother;; 2137 }; 2138 if (!parent->fParent) {; 2139 // This is the top node; 2140 const_cast<TBranch*>(this)->fMother = parent; // We can not yet use the 'mutable' keyword; 2141 return fMother;; 2142 }; 2143 parent = parent->fParent;; 2144 }; 2145 }; 2146 ; 2147 const TObjArray* array = fTree->GetListOfBranches();; 2148 Int_t n = array->GetEntriesFast();; 2149 for (Int_t i = 0; i < n; ++i) {; 2150 TBranch* branch = (TBranch*) array->UncheckedAt(i);; 2151 TBranch* parent = branch->GetSubBranch(this);; 2152 if (parent) {; 2153 const_cast<TBranch*>(this)->fMother = branch; // We can not yet use the 'mutable' keyword; 2154 return branch;; 2155 }; 2156 }; 2157 return nullptr;; 2158}; 2159 ; 2160////////////////////////////////////////////////////////////////////////////////; 2161/// Find the parent branch of child.; 2162/// Return 0 if child is not in this branch hierarchy.; 2163 ; 2164TBranch* TBranch::GetSubBranch(const TBranch* child) const; 2165{; 2166 // Handle error condition, if the parameter is us, we cannot find the parent.; 2167 if (this == child) {; 2168 // Note: We cast away any const-ness of ""this"".; 2169 return (TBranch*) this;; 2170 }; 2171 ; 2172 if (child->fParent) {; 2173 return child->fParent;; 2174 }; 2175 ; 2176 Int_t len = fBranches.GetEntriesFast();; 2177 for (Int_t i = 0; i < len; ++i) {; 2178 TBranch* branch = (TBranch*) fBranches.UncheckedAt(i);; 2179 if (!branch) {; 2180 continue;; 2181 }; 2182 if (branch == child) {; 2183 // We are the direct parent of child.; 2184 // Note: We cast away any const-ness of ""this"".; 2185 const_cast<TBranch*>(child)->fParent = (TBranch*)this; // We can not yet use the 'mutable' keyword; 2186 return (TBranch*) this;; 2187 }; 2188 // FIXME: This is a tail-recursion!; 2189 TBranch* parent = branch->GetSubBranch(child);; 2190 if (parent) {; 2191 return parent;; 2192 }; 2193 }; 2194 // We failed to find the parent.; 2195 return nullptr;; 2196}; 2197 ; 2198//////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:78450,error,error,78450,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['error'],['error']
Availability,"e the child-side immediately. */; 5759 set_close_on_exec(fdin[1], conn, NULL); /* stdin write */; 5760 set_close_on_exec(fdout[0], conn, NULL); /* stdout read */; 5761 set_close_on_exec(fderr[0], conn, NULL); /* stderr read */; 5762 } else {; 5763 /* Child */; 5764 if (chdir(dir) != 0) {; 5765 mg_cry_internal(; 5766 conn, ""%s: chdir(%s): %s"", __func__, dir, strerror(ERRNO));; 5767 } else if (dup2(fdin[0], 0) == -1) {; 5768 mg_cry_internal(conn,; 5769 ""%s: dup2(%d, 0): %s"",; 5770 __func__,; 5771 fdin[0],; 5772 strerror(ERRNO));; 5773 } else if (dup2(fdout[1], 1) == -1) {; 5774 mg_cry_internal(conn,; 5775 ""%s: dup2(%d, 1): %s"",; 5776 __func__,; 5777 fdout[1],; 5778 strerror(ERRNO));; 5779 } else if (dup2(fderr[1], 2) == -1) {; 5780 mg_cry_internal(conn,; 5781 ""%s: dup2(%d, 2): %s"",; 5782 __func__,; 5783 fderr[1],; 5784 strerror(ERRNO));; 5785 } else {; 5786 struct sigaction sa;; 5787 ; 5788 /* Keep stderr and stdout in two different pipes.; 5789 * Stdout will be sent back to the client,; 5790 * stderr should go into a server error log. */; 5791 (void)close(fdin[0]);; 5792 (void)close(fdout[1]);; 5793 (void)close(fderr[1]);; 5794 ; 5795 /* Close write end fdin and read end fdout and fderr */; 5796 (void)close(fdin[1]);; 5797 (void)close(fdout[0]);; 5798 (void)close(fderr[0]);; 5799 ; 5800 /* After exec, all signal handlers are restored to their default; 5801 * values, with one exception of SIGCHLD. According to; 5802 * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler; 5803 * will leave unchanged after exec if it was set to be ignored.; 5804 * Restore it to default action. */; 5805 memset(&sa, 0, sizeof(sa));; 5806 sa.sa_handler = SIG_DFL;; 5807 sigaction(SIGCHLD, &sa, NULL);; 5808 ; 5809 interp = conn->dom_ctx->config[CGI_INTERPRETER + cgi_config_idx];; 5810 if (interp == NULL) {; 5811 /* no interpreter configured, call the programm directly */; 5812 (void)execle(prog, prog, NULL, envp);; 5813 mg_cry_internal(conn,; 5814 ""%s: execle(%s): %s"",; 5815 __func__,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:170057,error,error,170057,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e the child-side immediately. */; 5760 set_close_on_exec(fdin[1], conn, NULL); /* stdin write */; 5761 set_close_on_exec(fdout[0], conn, NULL); /* stdout read */; 5762 set_close_on_exec(fderr[0], conn, NULL); /* stderr read */; 5763 } else {; 5764 /* Child */; 5765 if (chdir(dir) != 0) {; 5766 mg_cry_internal(; 5767 conn, ""%s: chdir(%s): %s"", __func__, dir, strerror(ERRNO));; 5768 } else if (dup2(fdin[0], 0) == -1) {; 5769 mg_cry_internal(conn,; 5770 ""%s: dup2(%d, 0): %s"",; 5771 __func__,; 5772 fdin[0],; 5773 strerror(ERRNO));; 5774 } else if (dup2(fdout[1], 1) == -1) {; 5775 mg_cry_internal(conn,; 5776 ""%s: dup2(%d, 1): %s"",; 5777 __func__,; 5778 fdout[1],; 5779 strerror(ERRNO));; 5780 } else if (dup2(fderr[1], 2) == -1) {; 5781 mg_cry_internal(conn,; 5782 ""%s: dup2(%d, 2): %s"",; 5783 __func__,; 5784 fderr[1],; 5785 strerror(ERRNO));; 5786 } else {; 5787 struct sigaction sa;; 5788 ; 5789 /* Keep stderr and stdout in two different pipes.; 5790 * Stdout will be sent back to the client,; 5791 * stderr should go into a server error log. */; 5792 (void)close(fdin[0]);; 5793 (void)close(fdout[1]);; 5794 (void)close(fderr[1]);; 5795 ; 5796 /* Close write end fdin and read end fdout and fderr */; 5797 (void)close(fdin[1]);; 5798 (void)close(fdout[0]);; 5799 (void)close(fderr[0]);; 5800 ; 5801 /* After exec, all signal handlers are restored to their default; 5802 * values, with one exception of SIGCHLD. According to; 5803 * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler; 5804 * will leave unchanged after exec if it was set to be ignored.; 5805 * Restore it to default action. */; 5806 memset(&sa, 0, sizeof(sa));; 5807 sa.sa_handler = SIG_DFL;; 5808 sigaction(SIGCHLD, &sa, NULL);; 5809 ; 5810 interp = conn->dom_ctx->config[CGI_INTERPRETER + cgi_config_idx];; 5811 if (interp == NULL) {; 5812 /* no interpreter configured, call the programm directly */; 5813 (void)execle(prog, prog, NULL, envp);; 5814 mg_cry_internal(conn,; 5815 ""%s: execle(%s): %s"",; 5816 __func__,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:170089,error,error,170089,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,e the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13868,error,error,13868,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13980,error,error,13980,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14092,error,error,14092,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14204,error,error,14204,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14316,error,error,14316,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14871,error,error,14871,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14983,error,error,14983,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15095,error,error,15095,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.29682 0.292587 0.0806285 0.00686869 43384.1 1; : ; : Elapsed time for training with 4000 events: 1.62 sec ; : Datas,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:16043,error,error,16043,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['error'],['error']
Availability,e the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15429,error,error,15429,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 390 | 1148.13 652.893 0.0205991 0.00194136 42877.5 0; : 391 Minimum Test error found - save the configuration ; : 391 | 1136.83 645.4 0.0202307 0.00186692 43564 0; : 392 Minimum Test error found - save the configuration ; : 392 | 1125.56 638.711 0.0206275 0.00184646 42596.2 0; : 393 Minimum Test error found - save the configuration ; : 393 | 1115.4 631.055 0.0202254 0.00180782 43436.7 0; : 394 Minimum Test error found - save the configuration ; : 394 | 1104.59 624.317 0.02027 0.00182884 43381.3 0; : 395 Minimum Test error found - save the configuration ; : 395 | 1094.1 617.12 0.0203693 0.00181577 43118.4 0; : 396 Minimum Test error found - save the configuration ; : 396 | 1083.6 610.558 0.0201067 0.00181126 43726.6 0; : 397 Minimum Test error found - save the configuration ; : 397 | 1073.44 603.068 0.020123 0.00181306 43692 0; : 398 Minimum Test error found - save the configuration ; : 398 | 1062.93 596.682 0.020266 0.00184767 43435 0; : 399 Minimum Test error found - save the configuration ; : 399 | 1052.39 590.107 0.0201237 0.00182381 43716.1 0; : 400 Minimum Test error found - save the configuration ; : 400 | 1042.76 583.068 0.0201639 0.00182862 43631.8 0; : 401 Minimum Test error found - save the configuration ; : 401 | 1032.4 576.548 0.0201234 0.00181928 43705.9 0; : 402 Minimum Test error found - save the configuration ; : 402 | 1022.23 570.272 0.0201306 0.00182147 43694 0; : 403 Minimum Test error found - save the configuration ; : 403 | 1012.74 563.823 0.0201066 0.00181196 43728.6 0; : 404 Minimum Test error found - save the configuration ; : 404 | 1002.66 558.031 0.0201068 0.0018122 43728.9 0; : 405 Minimum Test error found - save the configuration ; : 405 | 993.455 551.67 0.020178 0.00184829 43644.9 0; : 406 Minimum Test error found - save the configuration ; : 406 | 983.719 545.531 0.0202059 0.00184968 43581.9 0; : 407 Minimum Test error found - save the configuration ; : 407 | 974.381 539.309 0.0201407 0.00182369 43675.3 0; : 408 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:56069,error,error,56069,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:16986,error,error,16986,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:17098,error,error,17098,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20657,error,error,20657,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20769,error,error,20769,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - sa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20881,error,error,20881,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22328,error,error,22328,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,e the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test error found - save the configuration ; : 106 | 12890.1 11854.8 0.0204012 0.00181637 43045.8 0; : 107 Minimum Test error found - save the configuration ; : 107 | 12783.3 11750.6 0.0200273 0.00179591 43880.4 0; : 108 Minimum Test error found - save the configuration ; : 108 | 12679.4 11643.6 0.0200105 0.00179336 43914.7 0; : 109 Minimum Test error found - save the configuration ; : 109 | 12570.9 11543.2 0.0200071 0.00179343 43923.1 0; : 110 Minimum Test error found - save the configuration ; : 110 | 12468 11440.7 0.0200047 0.00179413 43930.5 0; : 111 Minimum,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:22440,error,error,22440,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"e the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. void CountLevels(); Count maximum number of nodes per volume, maximum depth and maximum; number of xtru vertices. Int_t CountNodes(const TGeoVolume* vol = 0, Int_t nlevels = 10000, Int_t option = 0); Count the total number of nodes starting from a volume, nlevels down. void DefaultAngles(); Set default angles for a given view. void DrawCurrentPoint(Int_t color = 2); Draw current point in the same view. void AnimateTracks(Double_t tmin = 0, Double_t tmax = 4.9999999999999998E-8, Int_t nframes = 200, Option_t* option = ""/*""); Draw animation of tracks. void DrawTracks(Option_t* option = """"); Draw tracks over the geometry, according to option. By default, only; primaries are drawn. See TGeoTrack::Draw() for additional options. void DrawPath(const char* path, Option_t* option = """"); Draw current path. void RandomPoints(const TGeoVolume* vol, Int_t npoints = 10000, Option_t* option = """"); Draw random points in the bounding box of a volume. void Test(Int_t npoints = 1000000, Option_t* option = """"); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path = """"); Geometry overlap checker based on sampling. void GetBranchNames(Int_t* names) const; Fill vol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoManager.html:48178,down,down,48178,root/html602/TGeoManager.html,https://root.cern,https://root.cern/root/html602/TGeoManager.html,2,['down'],['down']
Availability,"e the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname.; Changes the path accordingly. Bool_t CheckPath(const char* path) const; Check if a geometry path is valid without changing the state of the current navigator. void ConvertReflections(); Convert all reflections in geometry to normal rotations + reflected shapes. void CountLevels(); Count maximum number of nodes per volume, maximum depth and maximum; number of xtru vertices. Int_t CountNodes(const TGeoVolume* vol = 0, Int_t nlevels = 10000, Int_t option = 0); Count the total number of nodes starting from a volume, nlevels down. void DefaultAngles(); Set default angles for a given view. void DrawCurrentPoint(Int_t color = 2); Draw current point in the same view. void AnimateTracks(Double_t tmin = 0, Double_t tmax = 5E-8, Int_t nframes = 200, Option_t* option = ""/*""); Draw animation of tracks. void DrawTracks(Option_t* option = """"); Draw tracks over the geometry, according to option. By default, only; primaries are drawn. See TGeoTrack::Draw() for additional options. void DrawPath(const char* path, Option_t* option = """"); Draw current path. void RandomPoints(const TGeoVolume* vol, Int_t npoints = 10000, Option_t* option = """"); Draw random points in the bounding box of a volume. void Test(Int_t npoints = 1000000, Option_t* option = """"); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path = """"); Geometry overlap checker based on sampling. void GetBranchNames(Int_t* names) const; Fill volume names of curr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoManager.html:47701,down,down,47701,root/html534/TGeoManager.html,https://root.cern,https://root.cern/root/html534/TGeoManager.html,1,['down'],['down']
Availability,"e the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:136757,error,error,136757,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"e the next paragraph for the list of pre-defined functions.; *option: The second parameter is the fitting option. Here is the list of fitting options:. “W” Set all weights to 1 for non empty bins; ignore error bars; “WW” Set all weights to 1 including empty bins; ignore error bars; “I” Use integral of function in bin instead of value at bin center; “L” Use log likelihood method (default is chi-square method). To be used when the histogram represents counts; “WL” Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1.; “P” Use Pearson chi-square method, using expected errors instead of the observed one given by TH1::GetBinError (default case). The expected error is instead estimated from the square-root of the bin function value.; “Q” Quiet mode (minimum printing); “V” Verbose mode (default is between Q and V); “S” The result of the fit is returned in the TFitResultPtr.; “E” Perform better errors estimation using the Minos technique; “M” Improve fit results, by using the IMPROVE algorithm of TMinuit.; “R” Use the range specified in the function range; “N” Do not store the graphics function, do not draw; “0” Do not plot the result of the fit. By default the fitted function is drawn unless the option “N” above is specified.; “+” Add this new fitted function to the list of fitted functions (by default, the previous function is deleted and only the last one is kept); “B”Use this option when you want to fix one or more parameters and the fitting function is a predefined one, like polN, expo, landau, gaus. Note that in case of pre-defined functions some default initial values and limits are set.; “C”In case of linear fitting, don’t calculate the chisquare (saves time).; “F”If fitting a linear function (e.g. polN), switch to use the default minimizer (e.g. Minuit). By default, polN functions are fitted by the linear fitter. *goption:The third parameter is the graphics option that is the same as in the TH1::Draw (see the ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:165248,error,errors,165248,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"e the result depends on the chosen option.; 533///; 534/// If the denominator becomes 0 or pass > total, the corresponding bin is; 535/// skipped.; 536///; 537/// ### 2) calculating ratios of two Poisson means (option 'pois'):; 538///; 539/// The two histograms are interpreted as independent Poisson processes and the ratio; 540/// \f[; 541/// \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; 542/// \f]; 543/// with \f$\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\f$.; 544/// The histogram 'pass' is interpreted as \f$n_{1}\f$ and the total histogram; 545/// is used for \f$n_{2}\f$.; 546///; 547/// The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties; 548/// of efficiency by a parameter transformation:; 549/// \f[; 550/// \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; 551/// \f]; 552///; 553/// The x errors span each histogram bin (lowedge ... lowedge+width); 554/// The y errors depend on the chosen statistic methode which can be determined; 555/// by the options given below. For a detailed description of the used statistic; 556/// calculations please have a look at the corresponding functions!; 557///; 558/// Options:; 559/// - v : verbose mode: prints information about the number of used bins; 560/// and calculated efficiencies with their errors; 561/// - cl=x : determine the used confidence level (0<x<1) (default is 0.683); 562/// - cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); 563/// - w : Wilson interval (see TEfficiency::Wilson); 564/// - n : normal approximation propagation (see TEfficiency::Normal); 565/// - ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); 566/// - fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); 567/// - midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); 568/// - b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0; 569/// (see TEfficiency::Bayesian); 570/// - mode : use mode of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:19675,error,errors,19675,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errors']
Availability,"e this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fraction)`; 1029 * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; 1030 * by finding good starting values for the parameters for the actual fit.; 1031 * \warning Prefitting may give bad results when used in binned analysis.; 1032 *; 1033 * <tr><th><th> Options to control informational output; 1034 * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; 1035 * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:49030,error,errors,49030,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['error'],['errors']
Availability,"e this object is deleted.; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelectorCint.html:7962,avail,available,7962,root/html528/TSelectorCint.html,https://root.cern,https://root.cern/root/html528/TSelectorCint.html,1,['avail'],['available']
Availability,"e this object is deleted.; TObject*TSelector::fObjectcurrent object if processing object (vs. TTree); TStringTSelector::fOptionoption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSelectorCint.html:8099,avail,available,8099,root/html530/TSelectorCint.html,https://root.cern,https://root.cern/root/html530/TSelectorCint.html,2,['avail'],['available']
Availability,"e tiff support in image processing. bonjour; ON; Bonjour support, requires libdns_sd and/or Avahi. builtin_afterimage; ON; Built included libAfterImage, or use system libAfterImage. builtin_fftw3; OFF; Built the FFTW3 library internally (downloading tarfile from the Web) (ROOT 6 only). builtin_ftgl; ON; Built included libFTGL, or use system libftgl. builtin_freetype; OFF; Built included libfreetype, or use system libfreetype. builtin_glew; ON; Built included libGLEW, or use system libGLEW. builtin_pcre; OFF; Built included libpcre, or use system libpcre. builtin_zlib; OFF; Built included libz, or use system libz. builtin_lzma; OFF; Built included liblzma, or use system liblzma. builtin_davix; OFF; Built the Davix library internally (downloading tarfile from the Web). builtin_gsl; OFF; Built the GSL library internally (downloading tarfile from the Web). builtin_cfitsio; OFF; Built the FITSIO library internally (downloading tarfile from the Web). builtin_xrootd; OFF; Built the XROOTD internally (downloading tarfile from the Web). builtin_llvm; ON; Built the LLVM internally. builtin_tbb; OFF; Built the TBB internally. cxx11; ON; Build using C++11 compatible mode, requires gcc > 4.7.x or clang. cxx14; OFF; Build using C++14 compatible mode, requires gcc > 4.9.x or clang. cxx17; OFF; Build using C++17 compatible mode, requires gcc > 7.1.x or clang. libcxx; OFF; Build using libc++, requires cxx11 option (MacOS X only, for the time being). castor; ON; CASTOR support, requires libshift from CASTOR >= 1.5.2. ccache; OFF; Enable ccache usage for speeding up builds. chirp; ON; Chirp support (Condor remote I/O), requires libchirp_client. cling; ON; Enable new CLING C++ interpreter. cocoa; *; Use native Cocoa/Quartz graphics backend (MacOS X only). davix; *; DavIx library for HTTP/WEBDAV access. dcache; ON; dCache support, requires libdcap from DESY. exceptions; ON; Turn on compiler exception handling capability. explicit link; *; Explicitly link with all dependent libraries. fai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:8302,down,downloading,8302,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['down'],['downloading']
Availability,"e timeout = -1.0;; 12451 int enable_ping_pong = 0;; 12452 int ping_count = 0;; 12453 ; 12454 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12455 enable_ping_pong =; 12456 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12457 ""yes"");; 12458 }; 12459 ; 12460 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12461 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12462 }; 12463 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12464 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12465 }; 12466 if (timeout <= 0.0) {; 12467 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12468 }; 12469 ; 12470 /* Enter data processing loop */; 12471 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12472 conn->request_info.remote_addr,; 12473 conn->request_info.remote_port);; 12474 conn->in_websocket_handling = 1;; 12475 mg_set_thread_name(""wsock"");; 12476 ; 12477 /* Loop continuously, reading messages from the socket, invoking the; 12478 * callback, and waiting repeatedly until an error occurs. */; 12479 while (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12480 && (!conn->must_close)) {; 12481 header_len = 0;; 12482 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12483 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12484 len = buf[1] & 127;; 12485 mask_len = (buf[1] & 128) ? 4 : 0;; 12486 if ((len < 126) && (body_len >= mask_len)) {; 12487 /* inline 7-bit length field */; 12488 data_len = len;; 12489 header_len = 2 + mask_len;; 12490 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12491 /* 16-bit length field */; 12492 header_len = 4 + mask_len;; 12493 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12494 } else if (body_len >= (10 + mask_len)) {; 12495 /* 64-bit length field */; 12496 uint32_t l1, l2;; 12497 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12498 memcpy(&l2, &buf[6], 4);; 12499 header_len = 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:362070,error,error,362070,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12458 ""yes"");; 12459 }; 12460 ; 12461 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12462 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12463 }; 12464 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12465 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12466 }; 12467 if (timeout <= 0.0) {; 12468 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12469 }; 12470 ; 12471 /* Enter data processing loop */; 12472 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12473 conn->request_info.remote_addr,; 12474 conn->request_info.remote_port);; 12475 conn->in_websocket_handling = 1;; 12476 mg_set_thread_name(""wsock"");; 12477 ; 12478 /* Loop continuously, reading messages from the socket, invoking the; 12479 * callback, and waiting repeatedly until an error occurs. */; 12480 while (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12481 && (!conn->must_close)) {; 12482 header_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:362103,error,error,362103,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"e title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnSparse* Rebin(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnSparse.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void Reset(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnSparse. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). THnSparseArrayChunk& operator=(const THnSparse& ). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Int_t GetChunkSize() const; { return fChunkSize; }. THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. Long64_t Fill(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:25359,error,error,25359,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,2,['error'],['error']
Availability,"e title of axis0 to string0,; of axis1 to string1, of axis2 to string2, etc, just like it is done; for TH1/TH2/TH3.; To insert the character "";"" in one of the titles, one should use ""#;""; or ""#semicolon"". THnSparse* Rebin(const Int_t* group) const; Combine the content of ""group"" neighboring bins for each dimension; into a new bin and return the resulting THnSparse.; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins; will be grouped. void Reset(Option_t* option = """"); Clear the histogram. Double_t ComputeIntegral(); Calculate the integral of the histogram. void PrintBin(Long64_t idx, Option_t* options) const; Print bin with linex index ""idx"".; For valid options see PrintBin(Long64_t idx, Int_t* bin, Option_t* options). Bool_t PrintBin(Long64_t idx, Int_t* coord, Option_t* options) const; Print one bin. If ""idx"" is != -1 use that to determine the bin,; otherwise (if ""idx"" == -1) use the coordinate in ""bin"".; If ""options"" contains:; '0': only print bins with an error or content != 0; Return whether the bin was printed (depends on options). void PrintEntries(Long64_t from = 0, Long64_t howmany = -1, Option_t* options = 0) const; Print ""howmany"" entries starting at ""from"". If ""howmany"" is -1, print all.; If ""options"" contains:; 'x': print in the order of axis bins, i.e. (0,0,...,0), (0,0,...,1),...; '0': only print bins with content != 0. void Print(Option_t* option = """") const; Print a THnSparse. If ""option"" contains:; 'a': print axis details; 'm': print memory usage; 's': print statistics; 'c': print its content, too (this can generate a LOT of output!); Other options are forwarded to PrintEntries(). void Browse(TBrowser* b); Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each; dimension. THnSparse& operator=(const THnSparse& ). Int_t GetChunkSize() const; { return fChunkSize; }. THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. Long64_t Fill(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THnSparse.html:25463,error,error,25463,root/html532/THnSparse.html,https://root.cern,https://root.cern/root/html532/THnSparse.html,1,['error'],['error']
Availability,"e to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod *, TObjArray *, int * /*error*/ = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TCint.h 30549 2009-10-04 01:40:54Z rdm $ » Last generated: 2009-12-07 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:43495,error,error,43495,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['error'],['error']
Availability,"e to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . repeated calls to SubtractBackground() to specify background sources . repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple times in a scan to determine the best chouce of tau, method ScanLCurve() . Unfolding results are retrieved using various GetXXX() methods . Description of (systematic) uncertainties available in TUnfoldSys. There are covariance matrix contributions and there are systematic shifts. Systematic shifts correspond to the variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on a given error soure. Several such error sources may be defined . (c)SetTauError()GetEmatrixSysTau() GetDeltaSysTau() A systematic error on the regularisation parameter tau . (d)SubtractBackground() GetEmatrixSysBackgroundUncorr()n.a. uncorrelated errors on backg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:2560,avail,available,2560,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['avail'],['available']
Availability,"e to force an external value. ;  ; Double_t GetBranch () const;  Returns the formula value. ;  ; Double_t GetDeDw () const;  Computes the derivative of the error wrt the neuron weight. ;  ; Double_t GetDEDw () const;  ; Double_t GetDerivative () const;  computes the derivative for the appropriate function at the working point ;  ; Double_t GetError () const;  Computes the error for output neurons. ;  ; TNeuron * GetInLayer (Int_t n) const;  ; Double_t GetInput () const;  Returns neuron input. ;  ; const Double_t * GetNormalisation () const;  ; TSynapse * GetPost (Int_t n) const;  ; TSynapse * GetPre (Int_t n) const;  ; Double_t GetTarget () const;  Computes the normalized target pattern for output neurons. ;  ; ENeuronType GetType () const;  Returns the neuron type. ;  ; Double_t GetValue () const;  Computes the output using the appropriate function and all the weighted inputs, or uses the branch as input. ;  ; Double_t GetWeight () const;  ; TClass * IsA () const override;  ; void SetDEDw (Double_t in);  Sets the derivative of the total error wrt the neuron weight. ;  ; void SetNewEvent () const;  Inform the neuron that inputs of the network have changed, so that the buffered values have to be recomputed. ;  ; void SetNormalisation (Double_t mean, Double_t RMS);  Sets the normalization variables. ;  ; void SetWeight (Double_t w);  Sets the neuron weight to w. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TTreeFormula * UseBranch (TTree *, const char *);  Sets a formula that can be used to make the neuron an input. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings ("""").",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNeuron.html:3284,error,error,3284,doc/master/classTNeuron.html,https://root.cern,https://root.cern/doc/master/classTNeuron.html,1,['error'],['error']
Availability,"e to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure that the slot exists and to check that the contained object is initialized (and not a nullptr). ; Definition at line 249 of file TThreadedObject.hxx. ◆ GetNSlots(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetNSlots ; (; ); const. inline . Return the number of currently available slot. ; The method is safe to call concurrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreaded",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:7393,avail,available,7393,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,2,['avail'],['available']
Availability,"e to master.Definition TGeoNavigator.cxx:2700; TGeoNavigator::SetCurrentPointvoid SetCurrentPoint(const Double_t *point)Definition TGeoNavigator.h:172; TGeoNavigator::fCurrentMatrixTGeoHMatrix * fCurrentMatrixbackup stateDefinition TGeoNavigator.h:81; TGeoNavigator::fOverlapClustersInt_t * fOverlapClusterscurrent recursive position in fOverlapClustersDefinition TGeoNavigator.h:60; TGeoNavigator::GetCldirconst Double_t * GetCldir() constDefinition TGeoNavigator.h:165; TGeoNavigator::fTopNodeTGeoNode * fTopNodecurrent nodeDefinition TGeoNavigator.h:76; TGeoNavigator::LocalToMasterVectvoid LocalToMasterVect(const Double_t *local, Double_t *master) constDefinition TGeoNavigator.h:236; TGeoNavigator::IsSafeStepBool_t IsSafeStep(Double_t proposed, Double_t &newsafety) constIn case a previous safety value was computed, check if the safety region is still safe for the curren...Definition TGeoNavigator.cxx:2609; TGeoNavigator::SearchNodeTGeoNode * SearchNode(Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr)Returns the deepest node containing fPoint, which must be set a priori.Definition TGeoNavigator.cxx:1924; TGeoNavigator::fLastSafetyDouble_t fLastSafetysafety radius from current pointDefinition TGeoNavigator.h:45; TGeoNavigator::~TGeoNavigator~TGeoNavigator() overrideDestructor.Definition TGeoNavigator.cxx:169; TGeoNavigator::TGeoNavigatorTGeoNavigator()global mode is caching enabled for parallel world safety callsDefinition TGeoNavigator.cxx:57; TGeoNavigator::SetCurrentDirectionvoid SetCurrentDirection(const Double_t *dir)Definition TGeoNavigator.h:185; TGeoNavigator::BuildCachevoid BuildCache(Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE)Builds the cache for physical nodes and global matrices.Definition TGeoNavigator.cxx:182; TGeoNavigator::fNextDaughterIndexInt_t fNextDaughterIndexnumber of overlapping nodes on current branchDefinition TGeoNavigator.h:57; TGeoNavigator::PopPathBool_t PopPath(Int_t index)Definition TGeoNavigator.h:255; TGeoNavigator::fIsNullStepBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:31177,down,downwards,31177,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['down'],['downwards']
Availability,"e to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:10145,recover,recovers,10145,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['recover'],['recovers']
Availability,"e tolerance=1e-10) const;  Find the nearest point to xvalue. ;  ; double getFitRangeBinW () const override;  Get the bin width associated with this plotable object. ;  ; double getFitRangeNEvt () const override;  Return the number of events associated with the plotable object, it is always 1 for curves. ;  ; double getFitRangeNEvt (double xlo, double xhi) const override;  Return the number of events associated with the plotable object, in the given range. ;  ; double interpolate (double x, double tolerance=1e-10) const;  Return linearly interpolated value of curve at xvalue. ;  ; TClass * IsA () const override;  ; bool isIdentical (const RooCurve &other, double tol=1e-6, bool verbose=true) const;  Return true if curve is identical to other curve allowing for given absolute tolerance on each point compared point. ;  ; RooCurve * makeErrorBand (const std::vector< RooCurve * > &plusVar, const std::vector< RooCurve * > &minusVar, const TMatrixD &V, double Z=1) const;  Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments plusVar and minusVar corresponding to one-sigma variations of each parameter. ;  ; RooCurve * makeErrorBand (const std::vector< RooCurve * > &variations, double Z=1) const;  Construct filled RooCurve represented error band that captures alpha% of the variations of the curves passed through argument variations, where the percentage alpha corresponds to the central interval fraction of a significance Z. ;  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print the class name of this curve. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print the details of this curve. ;  ; void printName (std::ostream &os) const override;  Print name of object. ;  ; void printTitle (std::ostream &os) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:5295,error,error,5295,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,2,['error'],['error']
Availability,"e transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - Name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, which corresponds to the given; untransformed event vector 'xvec' and return its value, which is; given by the parameter 'cv'. If cv == kValue, it is checked wether the cell value is; undefined. If this is the case, then the mean of the neighbor's; target values is returned, using GetAverageNeighborsValue(). Float_t GetAverageNeighborsValue(vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases, where empty cells shall; not be evaluated. Parameters:; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. virtual ~PDEFoamTarget(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamTarget.html:12590,error,error,12590,root/html530/TMVA__PDEFoamTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamTarget.html,2,['error'],['error']
Availability,"e transform; Double_t*TMVA::PDEFoam::fXmin[fDim] minimum for variable transform. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamTarget(); Default constructor for streamer, user should not use it. PDEFoamTarget(const TString& , UInt_t ); User constructor. Parameters:. - name - name of PDEFoam object. - target - target number to range-search for. PDEFoamTarget(const TMVA::PDEFoamTarget& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void FillFoamCells(const TMVA::Event* ev, Float_t wt); This function fills an event into the discriminant PDEFoam. The; weight 'wt' is filled into cell element 0 if the event is of; class 'fTarget', and filled into cell element 1 otherwise. void Finalize(); Calculate average cell target in every cell and save them to the; cell. Cell element 0 will contain the average target and cell; element 1 will contain the error on the target. Bool_t CellValueIsUndefined(TMVA::PDEFoamCell* cell); Returns true, if the target error equals -1, as set in; Finalize() in case of no events in the cell. Float_t GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase* ); This function finds the cell, which corresponds to the given; untransformed event vector 'xvec' and return its value, which is; given by the parameter 'cv'. If cv == kValue, it is checked wether the cell value is; undefined. If this is the case, then the mean of the neighbor's; target values is returned, using GetAverageNeighborsValue(). Float_t GetAverageNeighborsValue(vector<Float_t>& , TMVA::ECellValue ); This function returns the average value 'cv' of only nearest; neighbor cells. It is used in cases, where empty cells shall; not be evaluated. Parameters:; - txvec - event vector, transformed into foam coordinates [0, 1]; - cv - cell value, see definition of ECellValue. virtual ~PDEFoamTarget(); {}. » Author: Tancredi Carli, Dominik Dannheim, Alexander Voigt » Copyright (c) 2008, 2010: *; » Last changed: root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__PDEFoamTarget.html:12606,error,error,12606,root/html534/TMVA__PDEFoamTarget.html,https://root.cern,https://root.cern/root/html534/TMVA__PDEFoamTarget.html,3,['error'],['error']
Availability,"e unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The possible options are:; k : keep the shared library after the session end.; f : force recompilation.; g : compile with debug symbol; O : optimized the code",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:36741,error,error,36741,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,1,['error'],['error']
Availability,"e unix domain service. int AcceptConnection(int sock); Accept a connection. void CloseConnection(int sock, Bool_t force = kFALSE); Close socket connection. int RecvRaw(int sock, void* buffer, int length, int flag); Receive exactly length bytes into buffer. Use opt to receive out-of-band; data or to have a peek at what is in the buffer (see TSocket). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). int RecvBuf(int sock, void* buffer, int length); Receive a buffer headed by a length indicator. int SendBuf(int sock, const void* buffer, int length); Send a buffer headed by a length indicator. int SetSockOpt(int sock, int kind, int val); Set socket option. int GetSockOpt(int sock, int kind, int* val); Get socket option. int GetSysInfo(SysInfo_t* info) const; Returns static system info, like OS type, CPU type, number of CPUs; RAM size, etc into the SysInfo_t structure. Returns -1 in case of error,; 0 otherwise. int GetCpuInfo(CpuInfo_t* info, Int_t sampleTime = 1000) const; Returns cpu load average and load info into the CpuInfo_t structure.; Returns -1 in case of error, 0 otherwise. Use sampleTime to set the; interval over which the CPU load will be measured, in ms (default 1000). int GetMemInfo(MemInfo_t* info) const; Returns ram and swap memory usage info into the MemInfo_t structure.; Returns -1 in case of error, 0 otherwise. int GetProcInfo(ProcInfo_t* info) const; Returns cpu and memory used by this process into the ProcInfo_t structure.; Returns -1 in case of error, 0 otherwise. int CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); This method compiles and loads a shared library containing; the code from the file ""filename"". The return value is true (1) in case of success and false (0); in case of error. The possible options are:; k : keep the shared library after the session end.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSystem.html:36810,error,error,36810,root/html530/TSystem.html,https://root.cern,https://root.cern/root/html530/TSystem.html,5,['error'],['error']
Availability,"e used in the fit (3D histograms only).; Use ReleaseRangeY() to go back to fitting the full histogram.; The consistency check ensures that no empty fit range occurs (and also; recomputes the bin content integrals).; Arguments:; low: lower Y bin number; high: upper Y bin number. void ReleaseRangeZ(); Release restrictions on the Z range of the histogram to be used in the fit. void Constrain(Int_t parm, Double_t low, Double_t high); Constrain the values of parameter number <parm> (the parameter numbering; follows that of the input template vector).; Use UnConstrain() to remove this constraint. void UnConstrain(Int_t parm); Remove the constraints on the possible values of parameter <parm>. void CheckConsistency(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. Int_t Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "". void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; Used internally to obtain the bin ranges according to the dimensionality of; the histogram and the limits set by hand. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFractionFitter.html:15717,error,error,15717,root/html528/TFractionFitter.html,https://root.cern,https://root.cern/root/html528/TFractionFitter.html,1,['error'],['error']
Availability,"e value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 362 of file RFieldBase.hxx. ◆ Read() [2/2]. void ROOT::Experimental::RFieldBase::Read ; (; RClusterIndex ; clusterIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RRVecField.; Definition at line 941 of file RField.cxx. ◆ ReadGlobalImpl(). void ROOT::Experimental::RFieldBase::ReadGlobalImpl ; (; NTupleSize_t ; globalIndex, . void * ; to . ). protectedvirtual . Reimplemented in ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, ROOT::Experimental::RField< TObject >, ROOT::Experimental::RP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:48248,mask,masks,48248,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['mask'],['masks']
Availability,"e variation of a (buicance) parameter, for example a background normalisation or a one-sigma variation of a correlated systematic error. . Set by Access covariance matrix Access vector of shifts Description . (a)TUnfoldSys constructor GetEmatrixSysUncorr()n.a. uncorrelated errors on the input matrix histA, taken as the errors provided with the histogram. These are typically statistical errors from finite Monte Carlo samples. . (b)AddSysError()GetEmatrixSysSource() GetDeltaSysSource() correlated shifts of the input matrix histA. These shifts are taken as one-sigma effects when switchig on a given error soure. Several such error sources may be defined . (c)SetTauError()GetEmatrixSysTau() GetDeltaSysTau() A systematic error on the regularisation parameter tau . (d)SubtractBackground() GetEmatrixSysBackgroundUncorr()n.a. uncorrelated errors on background sources, originating from the errors provided with the background histograms . (e)SubtractBackground GetEmatrixSysBackgroundScale()GetDeltaSysBackgroundScale() scale errors on background sources . (i)SetInput() GetEmatrixInput()n.a.statistical uncertainty of the input (the measurement) . (i)+(d)+(e)see aboveGetEmatrix()n.a. Partial sun of uncertainties: all sources which are propagated to the covariance before unfolding . (i)+(a)+(b)+(c)+(d)+(e)see aboveGetEmatrixTotal() n.a.All known error sources summed up . Note: (a), (b), (c) are propagated to the result AFTER unfolding, whereas the background errors (d) and (e) are added to the data errors BEFORE unfolding. For this reason the errors of type (d) and (e) are INCLUDED in the standard error matrix and other methods provided by the base class TUnfold, whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods provided by the base class TUnfold. ; Definition at line 59 of file TUnfoldSys.h. Public Types; enum  ESysErrMode { kSysErrModeMatrix =0; , kSysErrModeShift =1; , kSysErrModeRelative =2; };  type of matrix specified with AddSysError() More...;  ;  Public",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:3723,error,errors,3723,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['errors']
Availability,"e were waiting, so we need to do the checks again.; 2997 ; 2998 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 2999 if (cl) {; 3000 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3001 ; 3002 // We could speed-up some of the search by adding (the equivalent of); 3003 //; 3004 // if (cl->GetState() == kInterpreter) return cl; 3005 //; 3006 // In this case, if a ROOT dictionary was available when the TClass; 3007 // was first requested it would have been used and if a ROOT dictionary is; 3008 // loaded later on TClassTable::Add will take care of updating the TClass.; 3009 // So as far as ROOT dictionary are concerned, if the current TClass is; 3010 // in interpreted state, we are sure there is nothing to load.; 3011 //; 3012 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3013 // by a user provided TClassGenerator. We have no way of knowing whether; 3014 // those do (or even can) behave the same way as the ROOT dictionary and; 3015 // have the 'dictionary is now available for use' step informs the existing; 3016 // TClass that their dictionary is now available.; 3017 ; 3018 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3019 load = kTRUE;; 3020 }; 3021 ; 3022 if (TClassEdit::IsArtificial(name)) {; 3023 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3024 // from an already normalized name for the purpose of supporting schema evolution.; 3025 // There is no dictionary or interpreter information about this kind of class, the only; 3026 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3027 // auto-loading or auto-parsing based on the scope of the name.; 3028 return cl;; 3029 }; 3030 ; 3031 // To avoid spurious auto parsing, let's check if the name as-is is; 3032 // known in the TClassTable.; 3033 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3034 if (dict) {; 3035 // The name is normalize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:113489,avail,available,113489,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['avail'],['available']
Availability,"e were waiting, so we need to do the checks again.; 3064 ; 3065 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 3066 if (cl) {; 3067 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3068 ; 3069 // We could speed-up some of the search by adding (the equivalent of); 3070 //; 3071 // if (cl->GetState() == kInterpreter) return cl; 3072 //; 3073 // In this case, if a ROOT dictionary was available when the TClass; 3074 // was first requested it would have been used and if a ROOT dictionary is; 3075 // loaded later on TClassTable::Add will take care of updating the TClass.; 3076 // So as far as ROOT dictionary are concerned, if the current TClass is; 3077 // in interpreted state, we are sure there is nothing to load.; 3078 //; 3079 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3080 // by a user provided TClassGenerator. We have no way of knowing whether; 3081 // those do (or even can) behave the same way as the ROOT dictionary and; 3082 // have the 'dictionary is now available for use' step informs the existing; 3083 // TClass that their dictionary is now available.; 3084 ; 3085 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3086 load = kTRUE;; 3087 }; 3088 ; 3089 if (TClassEdit::IsArtificial(name)) {; 3090 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3091 // from an already normalized name for the purpose of supporting schema evolution.; 3092 // There is no dictionary or interpreter information about this kind of class, the only; 3093 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3094 // auto-loading or auto-parsing based on the scope of the name.; 3095 return cl;; 3096 }; 3097 ; 3098 // To avoid spurious auto parsing, let's check if the name as-is is; 3099 // known in the TClassTable.; 3100 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3101 if (dict) {; 3102 // The name is normalize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:116240,avail,available,116240,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['avail'],['available']
Availability,"e while stride2 the stride in dimension space.; For 1-dim points : stride1=1, stride2=1; for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm is a flag to control if the intervals need to be normalized to the chi2/ndf value; By default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors(); flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: FitResult.h 37438 2010-12-09 14:14:30Z moneta $ » Last generated: 2010-12-09 16:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitResult.html:10369,error,errors,10369,root/html528/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitResult.html,2,['error'],"['error', 'errors']"
Availability,"e width; 208- The two digits number `ff` represent the filled area width.; 209- The sign of ""ffll"" allows to flip the filled area from one side of the line to the other.; 210 ; 211The current fill area attributes are used to draw the hatched zone.; 212 ; 213Begin_Macro(source); 214../../../tutorials/graphs/exclusiongraph.C; 215End_Macro; 216 ; 217\anchor GrP3; 218### Graphs with error bars; 219Three classes are available to handle graphs with error bars:; 220`TGraphErrors`, `TGraphAsymmErrors` and `TGraphBentErrors`.; 221The following drawing options are specific to graphs with error bars:; 222 ; 223| Option | Description |; 224|----------|-------------------------------------------------------------------|; 225| ""Z"" | Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. |; 226| "">"" | An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. |; 227| \""\|>\"" | A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. |; 228| ""X"" | Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) |; 229| \""\|\|\"" | Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. |; 230| ""[]"" | Does the same as option \""\|\|\"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. |; 231| ""0"" | By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). |; 232| ""2"" | Er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:8320,error,error,8320,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['error'],['error']
Availability,"e window wid. ; Parameters. [in]wid: Window identifier. ; [in]x: x new window position ; [in]y: y new window position . Reimplemented from TVirtualX.; Definition at line 1080 of file TGX11.cxx. ◆ MoveWindow() [2/2]. void TGX11::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move a window. ; Reimplemented from TVirtualX.; Definition at line 297 of file GX11Gui.cxx. ◆ NextEvent(). void TGX11::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 1411 of file GX11Gui.cxx. ◆ OpenDisplay() [1/2]. Int_t TGX11::OpenDisplay ; (; const char * ; dpyName). overridevirtual . Open connection to display server (if such a thing exist on the current platform). ; On X11 this method returns on success the X display socket descriptor (> 0), 0 in case of batch mode and < 0 in case of failure (cannot connect to display dpyName). It also initializes the TGX11 class via Init(). Called from TGClient ctor. ; Reimplemented from TVirtualX.; Definition at line 809 of file GX11Gui.cxx. ◆ OpenDisplay() [2/2]. Int_t TGX11::OpenDisplay ; (; void * ; display). Open the display. Return -1 if the opening fails, 0 when ok. ; Definition at line 1091 of file TGX11.cxx. ◆ OpenPixmap(). Int_t TGX11::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; Parameters. [in]w,h: Width and height of the pixmap. . Reimplemented from TVirtualX.; Definition at line 1243 of file TGX11.cxx. ◆ ParseColor(). Bool_t TGX11::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On success, the ColorStruct_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:95046,failure,failure,95046,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['failure'],['failure']
Availability,"e with a define. The end point of a branch is always an action. Running on a range of entries; It is sometimes necessary to limit the processing of the dataset to a range of entries. For this reason, the RDataFrame offers the concept of ranges as a node of the RDataFrame chain of transformations; this means that filters, columns and actions can be concatenated to and intermixed with Range()s. If a range is specified after a filter, the range will act exclusively on the entries passing the filter – it will not even count the other entries! The same goes for a Range() hanging from another Range(). Here are some commented examples: RDataFrame d(""myTree"", ""file.root"");; // Here we store a dataframe that loops over only the first 30 entries in a variable; auto d30 = d.Range(30);; // This is how you pick all entries from 15 onwards; auto d15on = d.Range(15, 0);; // We can specify a stride too, in this case we pick an event every 3; auto d15each3 = d.Range(0, 15, 3);; Note that ranges are not available when multi-threading is enabled. More information on ranges is available here. Executing multiple actions in the same event loop; As a final example let us apply two different cuts on branch ""MET"" and fill two different histograms with the ""pt_v"" of the filtered events. By now, you should be able to easily understand what is happening: RDataFrame d(""treeName"", ""file.root"");; auto h1 = d.Filter(""MET > 10"").Histo1D(""pt_v"");; auto h2 = d.Histo1D(""pt_v"");; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:24373,avail,available,24373,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['avail'],['available']
Availability,"e"");; 1157 return -1;; 1158 }; 1159 ; 1160 TFile *f = GetCurrentFile();; 1161 if (!f) {; 1162 Error(""DropBranchFromCache"", ""No file is available. Branch was not dropped from the cache"");; 1163 return -1;; 1164 }; 1165 TTreeCache *tc = GetReadCache(f,true);; 1166 if (!tc) {; 1167 Error(""DropBranchFromCache"", ""No cache is available, branch not dropped"");; 1168 return -1;; 1169 }; 1170 return tc->DropBranch(bname,subbranches);; 1171}; 1172 ; 1173////////////////////////////////////////////////////////////////////////////////; 1174/// Remove the branch b from the Tree cache.; 1175/// if subbranches is true all the branches of the subbranches are; 1176/// also removed from the cache.; 1177///; 1178/// Returns:; 1179/// - 0 branch dropped or not in cache; 1180/// - -1 on error; 1181 ; 1182Int_t TTree::DropBranchFromCache(TBranch *b, bool subbranches); 1183{; 1184 if (!GetTree()) {; 1185 if (LoadTree(0)<0) {; 1186 Error(""DropBranchFromCache"",""Could not load a tree"");; 1187 return -1;; 1188 }; 1189 }; 1190 if (GetTree()) {; 1191 if (GetTree() != this) {; 1192 Int_t res = GetTree()->DropBranchFromCache(b, subbranches);; 1193 if (res<0) {; 1194 Error(""DropBranchFromCache"", ""Error dropping branch"");; 1195 }; 1196 return res;; 1197 }; 1198 } else {; 1199 Error(""DropBranchFromCache"", ""No tree is available. Branch was not dropped from the cache"");; 1200 return -1;; 1201 }; 1202 ; 1203 TFile *f = GetCurrentFile();; 1204 if (!f) {; 1205 Error(""DropBranchFromCache"", ""No file is available. Branch was not dropped from the cache"");; 1206 return -1;; 1207 }; 1208 TTreeCache *tc = GetReadCache(f,true);; 1209 if (!tc) {; 1210 Error(""DropBranchFromCache"", ""No cache is available, branch not dropped"");; 1211 return -1;; 1212 }; 1213 return tc->DropBranch(b,subbranches);; 1214}; 1215 ; 1216////////////////////////////////////////////////////////////////////////////////; 1217/// Add a cloned tree to our list of trees to be notified whenever we change; 1218/// our branch addresses or when we are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:41888,error,error,41888,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,"['avail', 'error']","['available', 'error']"
Availability,"e& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic facility, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic facility, Bool_t forceSkipPrefix = kFALSE); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMsgService.html:11163,error,error,11163,root/html528/RooMsgService.html,https://root.cern,https://root.cern/root/html528/RooMsgService.html,6,['error'],['error']
Availability,"e&, …); The VariableMetricMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.7 MnMinimize and CombinedMinimizer; [api:minimize]; Causes minimization of the function by the method of \(\mbox{MIGRAD}\), as does the MnMigrad class, but switches to the \(\mbox{SIMPLEX}\) method if \(\mbox{MIGRAD}\) fails to converge. Constructor arguments, methods arguments and names of methods are the same as for MnMigrad or MnSimplex and VariableMetricMinimizer or SimplexMinimizer.; 5.8 MnMinos; [api:minos] Causes a \(\mbox{MINOS}\) error analysis to be performed on the parameter whose number is specified. \(\mbox{MINOS}\) errors may be expensive to calculate, but are very reliable since they take account of non-linearities in the problem as well as parameter correlations, and are in general asymmetric. The optional argument \(\mbox{maxcalls}\) specifies the (approximate) maximum number of function calls per parameter requested, after which the calculation will be stopped for that parameter.; 5.8.1 MnMinos(const FCNBase&, const FunctionMinimum&); Construct an MnMinos object from the user’s \(\mbox{FCN}\) and a valid FunctionMinimum. Additional constructors for user specific MnStrategy settings are provided.; 5.8.2 operator(); MnMinos::operator()(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\). The return value is a std::pair\(<\)double,double\(>\) with the lower and upper bounds of parameter \(\mbox{n}\).; 5.8.3 minos(unsigned int n, unsigned int maxcalls); MnMinos::minos(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\) and returns a MinosError with the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:50296,error,errors,50296,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,"['error', 'reliab']","['errors', 'reliable']"
Availability,"e() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Int_tCompile(const char* expression = """"); virtual voidCopy(TObject& f1) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEval(Double_t x) const; Double_tEval(Double_t x, Double_t y) const; Double_tEval(Double_t x, Double_t y, Double_t z) const; Double_tEval(Double_t x, Double_t y, Double_t z, Double_t t) const; Double_tEvalPar(const Double_t* x, const Double_t* params = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetExpFormula(Option_t* option = """") const; virtual const char*TObject::GetIconName() const; const TObject*GetLinearPart(Int_t i) const; virtual const char*TNamed::GetName() const; Int_tGetNdim() const; Int_tGetNpar() const; Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetParameter(const char* name) const; Double_tGetParameter(Int_t param) const; Double_t*GetParame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFormula.html:1723,error,error,1723,root/html604/TFormula.html,https://root.cern,https://root.cern/root/html604/TFormula.html,1,['error'],['error']
Availability,"e() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tfill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const RooArgSet*get() const; virtual const RooArgSet*get(Int_t index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_thasFilledCache()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsDataStore.html:2379,error,error,2379,root/html526/RooAbsDataStore.html,https://root.cern,https://root.cern/root/html526/RooAbsDataStore.html,3,['error'],['error']
Availability,"e());; ; // Dataset d is now a dataset with one observable (x) with 1000 entries and a sum of weights of ~430K; wdata.Print();; ; // U n b i n n e d M L f i t t o w e i g h t e d d a t a; // ---------------------------------------------------------------; ; // Construction quadratic polynomial pdf for fitting; RooRealVar a0(""a0"", ""a0"", 1);; RooRealVar a1(""a1"", ""a1"", 0, -1, 1);; RooRealVar a2(""a2"", ""a2"", 1, 0, 10);; RooPolynomial p2(""p2"", ""p2"", x, RooArgList(a0, a1, a2), 0);; ; // Fit quadratic polynomial to weighted data; ; // NOTE: A plain Maximum likelihood fit to weighted data does in general; // NOT result in correct error estimates, unless individual; // event weights represent Poisson statistics themselves.; //; // Fit with 'wrong' errors; std::unique_ptr<RooFitResult> r_ml_wgt{p2.fitTo(wdata, Save(), PrintLevel(-1))};; ; // A first order correction to estimated parameter errors in an; // (unbinned) ML fit can be obtained by calculating the; // covariance matrix as; //; // V' = V C-1 V; //; // where V is the covariance matrix calculated from a fit; // to -logL = - sum [ w_i log f(x_i) ] and C is the covariance; // matrix calculated from -logL' = -sum [ w_i^2 log f(x_i) ]; // (i.e. the weights are applied squared); //; // A fit in this mode can be performed as follows:; ; std::unique_ptr<RooFitResult> r_ml_wgt_corr{p2.fitTo(wdata, Save(), SumW2Error(true), PrintLevel(-1))};; ; // P l o t w e i g h e d d a t a a n d f i t r e s u l t; // ---------------------------------------------------------------; ; // Construct plot frame; RooPlot *frame = x.frame(Title(""Unbinned ML fit, binned chi^2 fit to weighted data""));; ; // Plot data using sum-of-weights-squared error rather than Poisson errors; wdata.plotOn(frame, DataError(RooAbsData::SumW2));; ; // Overlay result of 2nd order polynomial fit to weighted data; p2.plotOn(frame);; ; // ML Fit of pdf to equivalent unweighted dataset; // ------------------------------------------------------------------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf403__weightedevts_8C.html:2612,error,errors,2612,doc/master/rf403__weightedevts_8C.html,https://root.cern,https://root.cern/doc/master/rf403__weightedevts_8C.html,1,['error'],['errors']
Availability,"e(). static const char * RooVoigtian::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 54 of file RooVoigtian.h. ◆ doEval(). void RooVoigtian::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute multiple values of Voigtian distribution. ; Reimplemented from RooAbsReal.; Definition at line 115 of file RooVoigtian.cxx. ◆ evaluate(). double RooVoigtian::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 81 of file RooVoigtian.cxx. ◆ IsA(). TClass * RooVoigtian::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 54 of file RooVoigtian.h. ◆ selectDefaultAlgorithm(). void RooVoigtian::selectDefaultAlgorithm ; (; ). inline . Disable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ; Definition at line 38 of file RooVoigtian.h. ◆ selectFastAlgorithm(). void RooVoigtian::selectFastAlgorithm ; (; ). inline . Enable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ; Definition at line 34 of file RooVoigtian.h. ◆ Streamer(). void RooVoigtian::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooVoigtian::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file RooVoigtian.h. Member Data Documentation. ◆ _doFast. bool RooVoigtian::_doFast = false. private . Definition at line 53 of file RooVoigtian.h. ◆ mean. RooRealProxy RooVoigtian::mean. protected . Definition at line 43 of file RooVoigtian.h. ◆ sigma. RooRealProxy RooVoigtian::sigma. protected . Definition at line 45 of file RooVoigtian.h. ◆ width. Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:77337,error,error,77337,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['error'],['error']
Availability,"e(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. void SetReplyHostName(const char* host_name); Set reply host name. const char * GetDcapVersion(); Return dCache version string. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Interface to system write. All arguments like in POSIX write. Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Interface to system seek. All arguments like in POSIX lseek. Int_t SysSync(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheFile.html:24027,failure,failure,24027,root/html528/TDCacheFile.html,https://root.cern,https://root.cern/root/html528/TDCacheFile.html,3,['failure'],['failure']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html:2082,error,error,2082,root/html602/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IRootFinderMethod.html,3,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. IRootFinderMethod(); Default Constructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IRootFinderMethod.html:2082,error,error,2082,root/html604/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IRootFinderMethod.html,3,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id: IRootFinderMethod.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IRootFinderMethod.html:1888,error,error,1888,root/html528/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IRootFinderMethod.html,3,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id: IRootFinderMethod.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__IRootFinderMethod.html:1890,error,error,1890,root/html530/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__IRootFinderMethod.html,3,['error'],['error']
Availability,"e(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction&, double); virtual boolSetFunction(const ROOT::Math::IGenFunction&, double, double); virtual boolSolve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); virtual intStatus() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IRootFinderMethod(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGradFunction& , double ); Common functionality; Sets the function for algorithms using derivatives. . bool SetFunction(const ROOT::Math::IGenFunction& , double , double ); Sets the function for the rest of the algorithms.; The parameters set the interval where the root has to be calculated. . double Root() const; Returns the previously calculated root. . int Status() const; Returns the status of the previous estimate . bool Solve(int maxIter = 100, double absTol = 1E-8, double relTol = 1E-10); Methods to be Implemented in the derived classes; Stimates the root for the function.; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. const char* Name() const; Return name of root finder algorithm . int Iterate(); This method is implemented only by the GSLRootFinder; and GSLRootFinderDeriv classes and will return an error if it's not one of them. . int Iterations() const; Return number of iterations used to find the root; Must be implemented by derived classes. { return -1; }. » Last changed: root/mathcore:$Id: IRootFinderMethod.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IRootFinderMethod.html:1890,error,error,1890,root/html532/ROOT__Math__IRootFinderMethod.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IRootFinderMethod.html,3,['error'],['error']
Availability,"e(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDouble.html:1501,error,error,1501,root/html526/RooDouble.html,https://root.cern,https://root.cern/root/html526/RooDouble.html,7,['error'],['error']
Availability,"e(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const char* classes = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindClass(const char* classname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClasses() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetSourceDir() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClassTree.html:5755,error,error,5755,root/html526/TClassTree.html,https://root.cern,https://root.cern/root/html526/TClassTree.html,7,['error'],['error']
Availability,"e(); voidTObject::AbstractMethod(const char* method) const; voidAdjustWeight(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalculateDelta(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidDecayLearningRate(Double_t rate); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetDEDw(); Double_tGetDelta(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Double_tGetLearningRate(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWeight(); Double_tGetWeightedDelta(); Double_tGetWeightedValue(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TSynapse.html:1406,error,error,1406,root/html528/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html528/TMVA__TSynapse.html,6,['error'],['error']
Availability,"e(Bool_t attach = kFALSE); static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidCtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableTimeout(); voidDisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFlush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:2078,error,error,2078,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,5,['error'],['error']
Availability,"e(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19604,error,error,19604,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,2,['error'],['error']
Availability,"e(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:19115,error,error,19115,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,1,['error'],['error']
Availability,"e(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidTEveElement::ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; TEveProjectable::ProjList_iTEveProjectable::EndProjecteds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEveElement::sLTI_iTEveElement::FindItem(TGLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackList.html:4844,error,error,4844,root/html528/TEveTrackList.html,https://root.cern,https://root.cern/root/html528/TEveTrackList.html,12,['error'],['error']
Availability,"e(Int_t v); virtual voidTDirectory::Copy(TObject&) const; static TDirectory*&TDirectory::CurrentDirectory(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); static Int_tDecreaseDirLevel(); virtual voidTDirectory::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); voidEndOfProcessCleanups(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*GetApplication() const; virtual Int_tTDirectory::GetBufferSize() const; Int_tGetBuiltDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:3959,error,error,3959,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['error'],['error']
Availability,"e(MethodArgInfo_t *marginfo) const finalDefinition TCling.cxx:9304; TCling::HasPCMForLibraryBool_t HasPCMForLibrary(const char *libname) const finalReturn true if ROOT has cxxmodules pcm for a given library name.Definition TCling.cxx:3147; TCling::TypedefInfo_Initvoid TypedefInfo_Init(TypedefInfo_t *tinfo, const char *name) const finalDefinition TCling.cxx:9472; TCling::DataMemberInfo_Titleconst char * DataMemberInfo_Title(DataMemberInfo_t *dminfo) const finalDefinition TCling.cxx:8706; TCling::CallFunc_ExecIntLongptr_t CallFunc_ExecInt(CallFunc_t *func, void *address) const finalDefinition TCling.cxx:7885; TCling::ClearStackvoid ClearStack() finalDelete existing temporary values.Definition TCling.cxx:3085; TCling::SetAlloclockfuncvoid SetAlloclockfunc(void(*)()) const final[Place holder for Mutex Lock] Provide the interpreter with a way to acquire a lock used to protect cr...Definition TCling.cxx:7536; TCling::SetErrorMessagesBool_t SetErrorMessages(Bool_t enable=kTRUE) finalIf error messages are disabled, the interpreter should suppress its failures and warning messages fro...Definition TCling.cxx:7356; TCling::CallFunc_FactoryMethodMethodInfo_t * CallFunc_FactoryMethod(CallFunc_t *func) const finalDefinition TCling.cxx:7924; TCling::IsUnsignedIntegerTypebool IsUnsignedIntegerType(const void *QualTypePtr) constDefinition TCling.cxx:9563; TCling::TypedefInfo_FactoryCopyTypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t *tinfo) const finalDefinition TCling.cxx:9465; TCling::GetFunctionOverloadsvoid GetFunctionOverloads(ClassInfo_t *cl, const char *funcname, std::vector< DeclId_t > &res) const finalInsert overloads of name in cl to res.Definition TCling.cxx:5048; TCling::UnRegisterTClassUpdatevoid UnRegisterTClassUpdate(const TClass *oldcl) finalIf the dictionary is loaded, we can remove the class from the list (otherwise the class might be load...Definition TCling.cxx:2393; TCling::MethodArgInfo_TypeNormalizedNamestd::string MethodArgInfo_TypeNormalizedName(Metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:434539,error,error,434539,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,4,"['error', 'failure']","['error', 'failures']"
Availability,"e(Option_t* option = """")MENU ; virtual voidTPaveText::DeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPaveText::DrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidTPaveText::EditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveText::GetLabel() const; virtual TText*TPaveText::GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*TPaveText::GetLineWith(const char* text) const; virtual TList*TPaveText::GetListOfLines() const; Float_tTPaveText::GetMargin() const; virtual Option_t*TPave::GetName() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPavesText.html:2420,error,error,2420,root/html528/TPavesText.html,https://root.cern,https://root.cern/root/html528/TPavesText.html,3,['error'],['error']
Availability,"e(Option_t* option = """")MENU ; virtual voidTPaveText::DeleteText()MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPaveText::DrawFile(const char* filename, Option_t* option = """"); virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTObject::Dump() constMENU ; virtual voidTPaveText::EditText()MENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tTPave::GetBorderSize() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveText::GetLabel() const; virtual TText*TPaveText::GetLine(Int_t number) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TText*TPaveText::GetLineWith(const char* text) const; virtual TList*TPaveText::GetListOfLines() const; Floa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPavesText.html:2420,error,error,2420,root/html534/TPavesText.html,https://root.cern,https://root.cern/root/html534/TPavesText.html,3,['error'],['error']
Availability,"e(TBrowser* b); Int_tCharBbox(Int_t index, Int_t* x, Int_t* y, Int_t* w, Int_t* h) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Int_tDistanceToText(Int_t x, Int_t y) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidDrawText(Drawable_t dst, GContext_t gc, Int_t x, Int_t y, Int_t firstChar, Int_t lastChar) const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextLayout.html:1767,error,error,1767,root/html528/TGTextLayout.html,https://root.cern,https://root.cern/root/html528/TGTextLayout.html,6,['error'],['error']
Availability,"e(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*GetMaxPowers() const; Double_tGetMaxQuantity() const; Int_tGetMaxStudy() const; Int_tGetMaxTerms() const; const TVectorD*GetMaxVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:14830,error,error,14830,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['error'],['error']
Availability,"e(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TVectorD*GetCoefficientsRMS() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*GetMaxPowers() const; Double_tGetMaxQuantity() const; Int_tGetMaxStudy() const; Int_tG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:15044,error,error,15044,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['error'],['error']
Availability,"e(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tContains(Long64_t, TTree*); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTEntryList::DirectoryAutoAdd(TDirectory*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Bool_tEnter(Long64_t, TTree*); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TEntryList*GetCurrentList() const; virtual TDirectory*TEntryList::GetDirectory() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetEntries(); virtual Long64_tGetEntriesFast() const; virtual Long64_tTEntryList::GetEntriesToProcess() const; virtual Long64_tGetEntry(Int_t index); virtual Long64_tGetEntryAndTree(Int_t index, Int_t& treenum); virtual TEntryList*GetEntryList(const char*, const char*, Option_t*); virtual const char*GetFileName() const; virtual const char*TObject::GetIconName() const; virtual TList*TEntryList::GetLists() const; virtual Long64_tGetN() const; virtual const char*TNamed::GetName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEntryListFromFile.html:2553,error,error,2553,root/html528/TEntryListFromFile.html,https://root.cern,https://root.cern/root/html528/TEntryListFromFile.html,6,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::GetNInActiveCe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamTarget.html:1995,error,error,1995,root/html530/TMVA__PDEFoamTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamTarget.html,3,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDiscriminant.html:2056,error,error,2056,root/html530/TMVA__PDEFoamDiscriminant.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDiscriminant.html,3,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamEvent.html:1954,error,error,1954,root/html530/TMVA__PDEFoamEvent.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamEvent.html,3,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamDiscriminant::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoamDiscriminant::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>TMVA::PDEFoam::GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tTMVA::PDEFoam::GetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html:2248,error,error,2248,root/html530/TMVA__PDEFoamDecisionTree.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamDecisionTree.html,3,['error'],['error']
Availability,"e(TBrowser* b); voidTMVA::PDEFoam::CheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidTMVA::PDEFoam::Create(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::PDEFoam::DeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*TMVA::PDEFoam::Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = NULL); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTMVA::PDEFoam::FillBinarySearchTree(const TMVA::Event* ev); virtual voidTMVA::PDEFoamEvent::FillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidTMVA::PDEFoam::Finalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>&, TMVA::ECellValue); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringTMVA::PDEFoam::GetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tTMVA::PDEFoam::GetMaxDepth() const; UInt_tTMVA::PDEFoam::GetNActiveCells() const; virtual const char*TObject::GetName() const; UInt_tTMVA::PDEFoam::GetNCells() const; UInt_tTMVA::PDEFoam::Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamMultiTarget.html:2488,error,error,2488,root/html530/TMVA__PDEFoamMultiTarget.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamMultiTarget.html,3,['error'],['error']
Availability,"e(TH1* sig, TH1* bkg, TH1* any = 0); Double_tGetEffSForEffBof(Double_t effBref, Double_t& effSerr); TH1*GetMvaBpdf(); TH1*GetMvaSpdf(); TH1*GetPurity(Int_t nStot, Int_t nBtot); TH1D*GetROC(); Double_tGetROCIntegral(); Double_tGetSignalReferenceCut(); TH1*GetSignificance(Int_t nStot, Int_t nBtot); TMVA::ROCCalc&operator=(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(const TMVA::ROCCalc&); TMVA::ROCCalcROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). private:. Double_tGetEffForRoot(Double_t theCut); TMVA::MsgLogger&Log() const; Double_tRoot(Double_t). Data Members; private:. Double_tfAbsTolabsolute tolerance deviation; Int_tfCutOrientation+1 if larger mva value means more signal like, -1 otherwise; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; UInt_tfNbins; Double_tfNevtSnumber of signal events (used in error calculation); TH1*fPurity; Double_tfSignalCutMVA cut value for last demanded background rejection or signal efficiency; TH1*fSignificance; TSpline*fSplB; TSpline*fSplS; TSpline*fSpleffBvsS; TSpline*fSplmvaCumBspline of cumulated mva distributions; TSpline*fSplmvaCumS; TStringfSuffix; Bool_tfUseSplines; Float_tfXmaxmin and max of the mva distribution ; Float_tfXmin; TH1*fmvaBthe input mva distributions; TH1*fmvaBcumul; TH1*fmvaBpdfthe normalized (and rebinned) input mva distributions; TH1*fmvaS; TH1*fmvaScumul; TH1*fmvaSpdf; Int_tfnBtot; Int_tfnStot. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROCCalc(TH1* mvaS, TH1* mvaB, TString nameSuffix = """"). void ApplySignalAndBackgroundStyle(TH1* sig, TH1* bkg, TH1* any = 0); Int_t c_Canvas = TColor::GetColor( ""#f0f0f0"" );; Int_t c_FrameFill = TColor::GetColor( ""#fffffd"" );; Int_t c_TitleBox = TColor::GetColor( ""#5D6B7D"" );; Int_t c_TitleBorder = TColor::GetColor( ""#7D8B9D"" );; Int_t c_TitleText = TColor::GetColor( ""#FFFFFF"" );. ~ROCCalc(); destructor. TH1D* GetROC(); get the ROC curve. Double_t GetROCIntegral(); code to compute the ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__ROCCalc.html:966,toler,tolerance,966,root/html534/TMVA__ROCCalc.html,https://root.cern,https://root.cern/root/html534/TMVA__ROCCalc.html,2,"['error', 'toler']","['error', 'tolerance']"
Availability,"e(_xmlNode* node, TXMLNode* parent = 0, TXMLNode* previous = 0); virtual~TXMLNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetAttributes(); TXMLNode*GetChildren(); const char*GetContent() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; const char*GetNamespaceHref() const; const char*GetNamespacePrefix() const; TXMLNode*GetNextNode(); const char*GetNodeName() const; TXMLNode::EXMLElementTypeGetNodeType() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TXMLNode*GetParent() const; TXMLNode*GetPreviousNode() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLNode.html:1635,error,error,1635,root/html528/TXMLNode.html,https://root.cern,https://root.cern/root/html528/TXMLNode.html,4,['error'],['error']
Availability,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html:5956,toler,toler,5956,root/html602/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FumiliMinimizer.html,5,['toler'],['toler']
Availability,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html:5321,toler,toler,5321,root/html534/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__FumiliMinimizer.html,5,['toler'],['toler']
Availability,"e(const FCNGradientBase&, const MnUserParameterState&, const MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1); need to re-implement all function in ModularFuncitionMinimizer otherwise they will be hided. FunctionMinimum Minimize(const FCNGradientBase&fcn, const std::vector<double>&par, const std::vector<double>&err, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const std::vector<double>&par, unsigned int nrow, const std::vector<double>&cov, unsigned int stra=1, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const FCNGradientBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, const MnStrategy& stra, unsigned int maxfcn = 0, double toler = 0.1). FunctionMinimum Minimize(const MnFcn& mfcn, const GradientCalculator& gc, const MinimumSeed& seed, const MnStrategy& stra, unsigned int maxfcn, double toler). » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__FumiliMinimizer.html:5956,toler,toler,5956,root/html604/ROOT__Minuit2__FumiliMinimizer.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__FumiliMinimizer.html,5,['toler'],['toler']
Availability,"e(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf703_effpdfprodDefinition rf703_effpdfprod.py:1; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Fitting -- RooAbsPdf::fitTo(modelEff_over_modelEff_Int[t]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_modelEff_over_modelEff_Int[t]_modelEffData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init(modelEff_Int[t]) using numeric integrator RooIntegrator1D to calculate Int(t); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf703_effpdfprod.C. tutorialsroofitrf703_effpdfprod.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf703__effpdfprod_8C.html:5020,error,error,5020,doc/master/rf703__effpdfprod_8C.html,https://root.cern,https://root.cern/doc/master/rf703__effpdfprod_8C.html,1,['error'],['error']
Availability,"e(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoordSelect.html:2780,error,error,2780,root/html602/TParallelCoordSelect.html,https://root.cern,https://root.cern/root/html602/TParallelCoordSelect.html,2,['error'],['error']
Availability,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char** name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_char_.html:3321,error,error,3321,root/html534/THnT_char_.html,https://root.cern,https://root.cern/root/html534/THnT_char_.html,22,['error'],['error']
Availability,"e(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char*[] name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual const TNDArray&GetArray() const; virtual TNDArray&GetArray(); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHn::GetBin(const Int_t* idx) const; virtual Long64_tTHn::GetBin(const Double_t* x) const; virtual Long64_tTHn::GetBin(const char*[] name) const; virtual Long64_tTHn::GetBin(const Int_t* idx, Bool_t = kTRUE); virtual Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_char_.html:2090,error,error,2090,root/html602/THnT_char_.html,https://root.cern,https://root.cern/root/html602/THnT_char_.html,44,['error'],['error']
Availability,"e(const char* queryref, const char* path = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTProof::SendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Bool_tTProof::SendingLogToWindow() const; voidTProof::SendLogToWindow(Bool_t mode); virtual voidSetActive(); virtual voidSetActive(Bool_t active); virtual voidTProof::SetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTProof::SetDataPoolUrl(const char* url); virtual Int_tTProof::SetDataSetTreeName(const char* dataset, const char* treename); voidTProof::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTProof::SetInputDataFile(const char* datafile); voidTProof::SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); voidTProof::SetManager(TProofMgr* mgr); voidTProof::SetMaxDrawQueries(Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tTProof::SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); voidTProof::SetParameter(const char* par, const char* value); voidTProof::SetParameter(const char* par, Int_t value); voidTProof::SetParameter(const char* par, Long_t value); voidTProof::SetParameter(const char* par, Long64_t value); voidTProof::SetParameter(const char* par, Double_t value); voidTProof::SetPrintProgress(PrintProgress_t pp); voidTProof::SetProgressDialog(Bool_t on = kTRUE); voidTProof::SetQueryMode(TProof::EQueryMode mode); voidTProof::SetRealTimeLog(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTProof::ShowCache(Bool_t all = kFALSE); voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:15453,mask,mask,15453,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,1,['mask'],['mask']
Availability,"e(const char* typenam); virtual~TDataType(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*AsString(void* buf) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; Int_tGetType() const; static EDataTypeGetType(const type_info& typeinfo); const char*GetTypeName() const; static const char*GetTypeName(EDataType type); virtual UInt_tTObject::GetUniqueID",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataType.html:1620,error,error,1620,root/html528/TDataType.html,https://root.cern,https://root.cern/root/html528/TDataType.html,2,['error'],['error']
Availability,"e(const std::vector<std::string> &columnNames); 315{; 316 auto newColNames = columnNames;; 317 for (auto &col : newColNames) {; 318 const auto dotPos = col.find('.');; 319 if (dotPos != std::string::npos && dotPos != col.size() - 1 && dotPos != 0u) {; 320 auto oldName = col;; 321 std::replace(col.begin(), col.end(), '.', '_');; 322 if (std::find(columnNames.begin(), columnNames.end(), col) != columnNames.end()); 323 throw std::runtime_error(""Column "" + oldName + "" would be written as "" + col +; 324 "" but this column already exists. Please use Alias to select a new name for "" +; 325 oldName);; 326 Info(""Snapshot"", ""Column %s will be saved as %s"", oldName.c_str(), col.c_str());; 327 }; 328 }; 329 ; 330 return newColNames;; 331}; 332 ; 333void InterpreterDeclare(const std::string &code); 334{; 335 R__LOG_DEBUG(10, RDFLogChannel()) << ""Declaring the following code to cling:\n\n"" << code << '\n';; 336 ; 337 if (!gInterpreter->Declare(code.c_str())) {; 338 const auto msg =; 339 ""\nRDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of ""; 340 ""the crash\n All RDF objects that have not run an event loop yet should be considered in an invalid state.\n"";; 341 throw std::runtime_error(msg);; 342 }; 343}; 344 ; 345Long64_t InterpreterCalc(const std::string &code, const std::string &context); 346{; 347 R__LOG_DEBUG(10, RDFLogChannel()) << ""Jitting and executing the following code:\n\n"" << code << '\n';; 348 ; 349 TInterpreter::EErrorCode errorCode(TInterpreter::kNoError); // storage for cling errors; 350 ; 351 auto callCalc = [&errorCode, &context](const std::string &codeSlice) {; 352 gInterpreter->Calc(codeSlice.c_str(), &errorCode);; 353 if (errorCode != TInterpreter::EErrorCode::kNoError) {; 354 std::string msg = ""\nAn error occurred during just-in-time compilation"";; 355 if (!context.empty()); 356 msg += "" in "" + context;; 357 msg +=; 358 "". The lines above might indicate the cause of the crash\nAll RDF objects that have no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFUtils_8cxx_source.html:13365,error,error,13365,doc/master/RDFUtils_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFUtils_8cxx_source.html,1,['error'],['error']
Availability,"e(file.c_str(), amode, arguments, aclicio);; 657 mode = amode.Data(); args = arguments.Data();; 658 io = aclicio.Data(); fname = f.Data();; 659}; 660 ; 661//______________________________________________________________________________; 662//; 663//; 664//; 665 ; 666#ifdef R__WIN32; 667extern ""C"" {; 668 char *__unDName(char *demangled, const char *mangled, int out_len,; 669 void * (* pAlloc )(size_t), void (* pFree )(void *),; 670 unsigned short int flags);; 671}; 672#endif; 673 ; 674////////////////////////////////////////////////////////////////////////////////; 675/// Find a template decl within N nested namespaces, 0<=N<inf; 676/// Assumes 1 and only 1 template present and 1 and only 1 entity contained; 677/// by the namespace. Example: `ns1::ns2::..::%nsN::%myTemplate`; 678/// Returns nullptr in case of error; 679 ; 680static clang::ClassTemplateDecl* FindTemplateInNamespace(clang::Decl* decl); 681{; 682 using namespace clang;; 683 if (NamespaceDecl* nsd = llvm::dyn_cast<NamespaceDecl>(decl)){; 684 return FindTemplateInNamespace(*nsd->decls_begin());; 685 }; 686 ; 687 if (ClassTemplateDecl* ctd = llvm::dyn_cast<ClassTemplateDecl>(decl)){; 688 return ctd;; 689 }; 690 ; 691 return nullptr; // something went wrong.; 692}; 693 ; 694//______________________________________________________________________________; 695//; 696//; 697//; 698 ; 699int TCling_GenerateDictionary(const std::vector<std::string> &classes,; 700 const std::vector<std::string> &headers,; 701 const std::vector<std::string> &fwdDecls,; 702 const std::vector<std::string> &unknown); 703{; 704 //This function automatically creates the ""LinkDef.h"" file for templated; 705 //classes then executes CompileMacro on it.; 706 //The name of the file depends on the class name, and it's not generated again; 707 //if the file exist.; 708 if (classes.empty()) {; 709 return 0;; 710 }; 711 // Use the name of the first class as the main name.; 712 const std::string& className = classes[0];; 713 //(0) prepare file na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:24145,error,error,24145,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['error'],['error']
Availability,"e(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); virtual voidShowMembers(TMemberInspector&); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. private:. TLinearMinimizer(const TLinearMinimizer&); TLinearMinimizer&operator=(const TLinearMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; vector<double>fErrors; TLinearFitter*fFitter; doublefMinVal; unsigned intfNFree; const ROOT::Math::IGradientFunctionMultiDim*fObjFunc; vector<double>fParams; boolfRobust. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearMinimizer(int type = 0); Default constructor implementation.; type is not used - needed for consistency with other minimizer plug-ins. TLinearMinimizer(const char* type); constructor passing a type of algorithm, (supported now robust via LTS regression). ~TLinearMinimizer(); Destructor implementation. TLinearMinimizer(const TLinearMinimizer& ); Implementation of copy constructor. void SetFunction(const ROOT::Math::IMultiGenFunction & ); Set function to be minimized. Flag an error since only support Gradient objective functions. void SetFunction(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearMinimizer.html:5652,error,errors,5652,root/html534/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html534/TLinearMinimizer.html,1,['error'],['errors']
Availability,"e) const; Int_tBinarySearch(Bool_t value) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tCountKey(const void* key, Int_t firstIndx = 0, Bool_t bSearch = kTRUE, Int_t* firstRow = 0) const; virtual Int_tCountKeys() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindFirstKey(const void* key) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetColumnName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFirstRow() const; virtual const char*TObject::GetIconName() const; Int_tGetIndex(UInt_t sortedIndex) const; virtual const void*GetKeyAddress(Int_t indx); virtual Int_tGetLastFound() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOptio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:4800,error,error,4800,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,6,['error'],['error']
Availability,"e) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; CreateInterpolator(Bool_t oldInterp)TGraph2Dprivate; DeclFileName()TGraph2DErrorsinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TGraph2Dvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTGraph2Dvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option=""P0"") overrideTGraph2Dvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph2Dprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraph2Dvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fDelaunayTGraph2Dprotected; fDirectoryTGraph2Dprotected; fEXTGraph2DErrorsprotected; fEYTGraph2DErrorsprotected; fEZTGraph2DErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraph2Dprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraph2Dprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) const overrideTGraph2Dvirtual; FindObject(const TObject *obj) const overrideTGraph2Dvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; Fit(TF2 *f2, Option_t *option="""", Option_t *goption="""")TGraph2Dvirtual; FitPanel()TGraph2Dvirtual; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarginTGraph2Dprotected; f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors-members.html:2070,error,error,2070,doc/master/classTGraph2DErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors-members.html,2,['error'],['error']
Availability,"e)) == -1) {; 19729 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 19730 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19731 mg_snprintf(NULL,; 19732 NULL, /* No truncation check for error buffers */; 19733 error->text,; 19734 error->text_buffer_size,; 19735 ""Invalid configuration option: %s"",; 19736 name);; 19737 }; 19738 free_context(ctx);; 19739 pthread_setspecific(sTlsKey, NULL);; 19740 return NULL;; 19741 } else if ((value = *options++) == NULL) {; 19742 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 19743 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19744 mg_snprintf(NULL,; 19745 NULL, /* No truncation check for error buffers */; 19746 error->text,; 19747 error->text_buffer_size,; 19748 ""Invalid configuration option value: %s"",; 19749 name);; 19750 }; 19751 free_context(ctx);; 19752 pthread_setspecific(sTlsKey, NULL);; 19753 return NULL;; 19754 }; 19755 if (ctx->dd.config[idx] != NULL) {; 19756 /* A duplicate configuration option is not an error - the last; 19757 * option value will be used. */; 19758 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19759 mg_free(ctx->dd.config[idx]);; 19760 }; 19761 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19762 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19763 }; 19764 ; 19765 /* Set default value if needed */; 19766 for (i = 0; config_options[i].name != NULL; i++) {; 19767 default_value = config_options[i].default_value;; 19768 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19769 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19770 }; 19771 }; 19772 ; 19773 /* Request size option */; 19774 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19775 if (itmp < 1024) {; 19776 mg_cry_ctx_internal(ctx,; 19777 ""%s too small"",; 19778 config_options[MAX_REQUEST_SIZE].name);; 19779 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19780 mg_snprintf(NULL,; 19781 NULL, /* No truncation check for error buffers */; 19782 error->text,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:589610,error,error,589610,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e)) == -1) {; 19730 mg_cry_ctx_internal(ctx, ""Invalid option: %s"", name);; 19731 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19732 mg_snprintf(NULL,; 19733 NULL, /* No truncation check for error buffers */; 19734 error->text,; 19735 error->text_buffer_size,; 19736 ""Invalid configuration option: %s"",; 19737 name);; 19738 }; 19739 free_context(ctx);; 19740 pthread_setspecific(sTlsKey, NULL);; 19741 return NULL;; 19742 } else if ((value = *options++) == NULL) {; 19743 mg_cry_ctx_internal(ctx, ""%s: option value cannot be NULL"", name);; 19744 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19745 mg_snprintf(NULL,; 19746 NULL, /* No truncation check for error buffers */; 19747 error->text,; 19748 error->text_buffer_size,; 19749 ""Invalid configuration option value: %s"",; 19750 name);; 19751 }; 19752 free_context(ctx);; 19753 pthread_setspecific(sTlsKey, NULL);; 19754 return NULL;; 19755 }; 19756 if (ctx->dd.config[idx] != NULL) {; 19757 /* A duplicate configuration option is not an error - the last; 19758 * option value will be used. */; 19759 mg_cry_ctx_internal(ctx, ""warning: %s: duplicate option"", name);; 19760 mg_free(ctx->dd.config[idx]);; 19761 }; 19762 ctx->dd.config[idx] = mg_strdup_ctx(value, ctx);; 19763 DEBUG_TRACE(""[%s] -> [%s]"", name, value);; 19764 }; 19765 ; 19766 /* Set default value if needed */; 19767 for (i = 0; config_options[i].name != NULL; i++) {; 19768 default_value = config_options[i].default_value;; 19769 if ((ctx->dd.config[i] == NULL) && (default_value != NULL)) {; 19770 ctx->dd.config[i] = mg_strdup_ctx(default_value, ctx);; 19771 }; 19772 }; 19773 ; 19774 /* Request size option */; 19775 itmp = atoi(ctx->dd.config[MAX_REQUEST_SIZE]);; 19776 if (itmp < 1024) {; 19777 mg_cry_ctx_internal(ctx,; 19778 ""%s too small"",; 19779 config_options[MAX_REQUEST_SIZE].name);; 19780 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19781 mg_snprintf(NULL,; 19782 NULL, /* No truncation check for error buffers */; 19783 error->text,;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:589643,error,error,589643,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"e); set regulatisation on a 1-dimensional curve; start: first bin; step: distance between neighbouring bins; nbin: total number of bins; regmode: regularisation mode; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fLsquared. Int_t RegularizeBins2D(int start_bin, int step1, int nbin1, int step2, int nbin2, TUnfold::ERegMode regmode); set regularisation on a 2-dimensional grid of bins; start: first bin; step1: distance between bins in 1st direction; nbin1: number of bins in 1st direction; step2: distance between bins in 2nd direction; nbin2: number of bins in 2nd direction; return value:; number of errors (i.e. conditions which have been skipped); modifies data member fLsquared. Double_t DoUnfold(Double_t tau, const TH1* hist_y, Double_t scaleBias = 0.0); Do unfolding of an input histogram; tau_reg: regularisation parameter; input: input distribution with errors; scaleBias: scale factor applied to the bias; Data members required:; fA, fX0, fLsquared; Data members modified:; those documented in SetInput(); and those documented in DoUnfold(Double_t); Return value:; maximum global correlation coefficient; NOTE!!! return value >=1.0 means error, and the result is junk. Overflow bins of the input distribution are ignored!. Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Data members modified:; fY, fVyy, fVyyinv, fBiasScale, fNdf; Data members cleared; see ClearResults. Double_t DoUnfold(Double_t tau); Unfold with given value of regularisation parameter tau; tau: new tau parame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:27112,error,errors,27112,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,3,['error'],['errors']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNetFile.html:4989,error,error,4989,root/html532/TNetFile.html,https://root.cern,https://root.cern/root/html532/TNetFile.html,1,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; virtual TFile::EAsyncOpenStatusGetAsyncOpenStatus(); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXNetFile.html:4207,error,error,4207,root/html532/TXNetFile.html,https://root.cern,https://root.cern/root/html532/TXNetFile.html,1,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDCacheFile.html:3346,error,error,3346,root/html532/TDCacheFile.html,https://root.cern,https://root.cern/root/html532/TDCacheFile.html,5,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TStringGetAccessId() const; TStringGetAccessKey() const; TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAS3File.html:3422,error,error,3422,root/html532/TAS3File.html,https://root.cern,https://root.cern/root/html532/TAS3File.html,2,['error'],['error']
Availability,"e); virtual TKey*TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidTNetFile::Flush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCastorFile.html:4272,error,error,4272,root/html532/TCastorFile.html,https://root.cern,https://root.cern/root/html532/TCastorFile.html,1,['error'],['error']
Availability,"e); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBin(const Int_t* idx) const; Long64_tGetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tGetNbins() const; Int_tGetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArray.html:2076,error,error,2076,root/html534/TNDArray.html,https://root.cern,https://root.cern/root/html534/TNDArray.html,3,['error'],['error']
Availability,"e);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooArgList _basisList;  ! List of created basis functions ;  ; RooAICRegistry _codeReg;  ! Registry of analytical integration codes ;  ; RooObjCacheManager _coefNormMgr;  ! Coefficient normalization manager ;  ; RooListProxy _convSet;  Set of (resModel (x) basisFunc) convolution objects. ;  ; RooRealProxy _convVar;  Convolution variable. ;  ; bool _isCopy;  ; RooRealProxy _model;  Original model. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:72840,error,errors,72840,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['error'],['errors']
Availability,"e);; 11912 }; 11913 ; 11914 } else {; 11915 mg_cry_internal(conn, ""Bad SSI #include: [%s]"", tag);; 11916 return;; 11917 }; 11918 ; 11919 if (truncated) {; 11920 mg_cry_internal(conn, ""SSI #include path length overflow: [%s]"", tag);; 11921 return;; 11922 }; 11923 ; 11924 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 11925 mg_cry_internal(conn,; 11926 ""Cannot open SSI #include: [%s]: fopen(%s): %s"",; 11927 tag,; 11928 path,; 11929 strerror(ERRNO));; 11930 } else {; 11931 fclose_on_exec(&file.access, conn);; 11932 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11933 > 0) {; 11934 send_ssi_file(conn, path, &file, include_level + 1);; 11935 } else {; 11936 send_file_data(conn, &file, 0, INT64_MAX);; 11937 }; 11938 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11939 }; 11940}; 11941 ; 11942 ; 11943#if !defined(NO_POPEN); 11944static void; 11945do_ssi_exec(struct mg_connection *conn, char *tag); 11946{; 11947 char cmd[1024] = """";; 11948 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11949 ; 11950 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11951 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11952 } else {; 11953 cmd[1023] = 0;; 11954 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11955 mg_cry_internal(conn,; 11956 ""Cannot SSI #exec: [%s]: %s"",; 11957 cmd,; 11958 strerror(ERRNO));; 11959 } else {; 11960 send_file_data(conn, &file, 0, INT64_MAX);; 11961 pclose(file.access.fp);; 11962 }; 11963 }; 11964}; 11965#endif /* !NO_POPEN */; 11966 ; 11967 ; 11968static int; 11969mg_fgetc(struct mg_file *filep); 11970{; 11971 if (filep == NULL) {; 11972 return EOF;; 11973 }; 11974 ; 11975 if (filep->access.fp != NULL) {; 11976 return fgetc(filep->access.fp);; 11977 } else {; 11978 return EOF;; 11979 }; 11980}; 11981 ; 11982 ; 11983static void; 11984send_ssi_file(struct mg_connection *conn,; 11985 const char *path,; 11986 struct mg_file *filep,; 11987 int include_level); 11988{; 11989 char buf[MG_BUF_LEN];; 11990 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:345821,error,errors,345821,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"e);; 11913 }; 11914 ; 11915 } else {; 11916 mg_cry_internal(conn, ""Bad SSI #include: [%s]"", tag);; 11917 return;; 11918 }; 11919 ; 11920 if (truncated) {; 11921 mg_cry_internal(conn, ""SSI #include path length overflow: [%s]"", tag);; 11922 return;; 11923 }; 11924 ; 11925 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 11926 mg_cry_internal(conn,; 11927 ""Cannot open SSI #include: [%s]: fopen(%s): %s"",; 11928 tag,; 11929 path,; 11930 strerror(ERRNO));; 11931 } else {; 11932 fclose_on_exec(&file.access, conn);; 11933 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11934 > 0) {; 11935 send_ssi_file(conn, path, &file, include_level + 1);; 11936 } else {; 11937 send_file_data(conn, &file, 0, INT64_MAX);; 11938 }; 11939 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11940 }; 11941}; 11942 ; 11943 ; 11944#if !defined(NO_POPEN); 11945static void; 11946do_ssi_exec(struct mg_connection *conn, char *tag); 11947{; 11948 char cmd[1024] = """";; 11949 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11950 ; 11951 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11952 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11953 } else {; 11954 cmd[1023] = 0;; 11955 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11956 mg_cry_internal(conn,; 11957 ""Cannot SSI #exec: [%s]: %s"",; 11958 cmd,; 11959 strerror(ERRNO));; 11960 } else {; 11961 send_file_data(conn, &file, 0, INT64_MAX);; 11962 pclose(file.access.fp);; 11963 }; 11964 }; 11965}; 11966#endif /* !NO_POPEN */; 11967 ; 11968 ; 11969static int; 11970mg_fgetc(struct mg_file *filep); 11971{; 11972 if (filep == NULL) {; 11973 return EOF;; 11974 }; 11975 ; 11976 if (filep->access.fp != NULL) {; 11977 return fgetc(filep->access.fp);; 11978 } else {; 11979 return EOF;; 11980 }; 11981}; 11982 ; 11983 ; 11984static void; 11985send_ssi_file(struct mg_connection *conn,; 11986 const char *path,; 11987 struct mg_file *filep,; 11988 int include_level); 11989{; 11990 char buf[MG_BUF_LEN];; 11991 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:345854,error,errors,345854,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"e* n); TMVA::MsgLogger&Log() const; voidOptimize(TMVA::DecisionTree* dt, Double_t weights). Data Members; protected:. Double_tTMVA::IPruneTool::B; Double_tTMVA::IPruneTool::S; Double_tTMVA::IPruneTool::fPruneStrength. private:. TMVA::MsgLogger*fLogger! output stream to save logging information; Int_tfOptimalK! the optimal index of the prune sequence; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Double_t>fPruneStrengthList! map of alpha -> pruning index; vector<Double_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::SeparationBase*fQualityIndexTool! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CostComplexityPruneTool( SeparationBase* qualityIndex ); the constructor for the cost complexity prunig. ~CostComplexityPruneTool(); the destructor for the cost complexity prunig. CalculatePruningInfo(TMVA::DecisionTree* dt, const TMVA::IPruneTool::EventSample* testEvents = __null, Bool_t isAutomatic = kFALSE). void InitTreePruningMetaData(TMVA::DecisionTreeNode* n); initialise ""meta data"" for the pruning, like the ""costcomplexity"", the; critical alpha, the minimal alpha down the tree, etc... for each node!!. void Optimize(TMVA::DecisionTree* dt, Double_t weights); after the critical alpha values (at which the corresponding nodes would; be pruned away) had been established in the ""InitMetaData"" we need now:; automatic pruning:; find the value of ""alpha"" for which the test sample gives minimal error,; on the tree with all nodes pruned that have alpha_critital < alpha,; fixed parameter pruning. CostComplexityPruneTool( SeparationBase* qualityIndex = NULL ). » Last changed: Tue Sep 8 17:45:53 2015 » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html:2502,down,down,2502,root/html604/TMVA__CostComplexityPruneTool.html,https://root.cern,https://root.cern/root/html604/TMVA__CostComplexityPruneTool.html,2,"['down', 'error']","['down', 'error']"
Availability,"e*) which shall be merged. ; Definition at line 39 of file TFileMerger.h. ◆ fHistoOneGo. Bool_t TFileMerger::fHistoOneGo. protected . Merger histos in one go (default is kTRUE) ; Definition at line 53 of file TFileMerger.h. ◆ fIOFeatures. TIOFeatures* TFileMerger::fIOFeatures {nullptr}. protected . IO features to use in the output file. ; Definition at line 48 of file TFileMerger.h. ◆ fLocal. Bool_t TFileMerger::fLocal. protected . Makes local copies of merging files if True (default is kTRUE) ; Definition at line 52 of file TFileMerger.h. ◆ fMaxOpenedFiles. Int_t TFileMerger::fMaxOpenedFiles. protected . Maximum number of files opened at the same time by the TFileMerger. ; Definition at line 51 of file TFileMerger.h. ◆ fMergeList. TList TFileMerger::fMergeList. protected . list of TObjString containing the name of the files need to be merged ; Definition at line 55 of file TFileMerger.h. ◆ fMergeOptions. TString TFileMerger::fMergeOptions. protected . Options (in string format) to be passed down to the Merge functions. ; Definition at line 47 of file TFileMerger.h. ◆ fMsgPrefix. TString TFileMerger::fMsgPrefix {""TFileMerger""}. protected . Prefix to be used when printing informational message (default TFileMerger) ; Definition at line 49 of file TFileMerger.h. ◆ fNoTrees. Bool_t TFileMerger::fNoTrees {kFALSE}. protected . True if Trees should not be merged (default is kFALSE) ; Definition at line 43 of file TFileMerger.h. ◆ fObjectNames. TString TFileMerger::fObjectNames. protected . List of object names to be either merged exclusively or skipped. ; Definition at line 54 of file TFileMerger.h. ◆ fOutputFile. TFile* TFileMerger::fOutputFile {nullptr}. protected . The outputfile for merging. ; Definition at line 40 of file TFileMerger.h. ◆ fOutputFilename. TString TFileMerger::fOutputFilename. protected . The name of the outputfile for merging. ; Definition at line 41 of file TFileMerger.h. ◆ fPrintLevel. Int_t TFileMerger::fPrintLevel {0}. protected . How much informa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:29250,down,down,29250,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['down'],['down']
Availability,"e*AddFree(TList* lfree, Long64_t first, Long64_t last); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFree*GetBestFree(TList* lfree, Int_t nbytes); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetFirst() const; virtual const char*TObject::GetIconName() const; Long64_tGetLast() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFree.html:2093,error,error,2093,root/html528/TFree.html,https://root.cern,https://root.cern/root/html528/TFree.html,6,['error'],['error']
Availability,"e, Double_t size, const Char_t* text); voidTObject::MakeZombie(); TLatex&operator=(const TLatex&); TLatexFormSizeReadfs(); voidSavefs(TLatexFormSize* fs). Data Members; public:. enum { kTextNDC; };; enum TText::[unnamed] { kTextNDC; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. const Char_t*fError!error code; Double_tfFactorPos!Relative position of subscripts and superscripts; Double_tfFactorSize!Relative size of subscripts and superscripts; Bool_tfItalic!Currently inside #it operator; Int_tfLimitFactorSizelower bound for subscripts/superscripts size; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TStringTNamed::fNameobject identifier; Double_tfOriginSizeFont size of the starting font; Int_tfPos!Current position in array fTabSize;; Bool_tfShow!is true during the second pass (Painting); Int_tfTabMax!Maximum allocation for array fTabSize;; FormSize_t*fTabSize!array of values for the different zones; Short_tTAttText::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; Double_tTText::fXX position of text (left,center,etc..); Double_tTText::fYY position of text (left,center,etc..). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLatex(); Default constructor. TLatex(Double_t x, Double_t y, const char* text); Normal constructor. ~TLatex(); Destructor. TLatex(const TLatex& text); Copy constructor. TLatex& operator=(const TLatex& ); assignment operator. void Copy(TObject& text) const; Copy this TLatex object to another TLatex. TLatexFormSize Anal1(TextSpec_t spec, const Char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLatex.html:28005,error,error,28005,root/html528/TLatex.html,https://root.cern,https://root.cern/root/html528/TLatex.html,3,['error'],['error']
Availability,"e, Drawable_t, id, GContext_t, gc, Int_t, x, Int_t, y, UInt_t, w, UInt_t, h, 1) VOID_METHOD_ARG7(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG6 (VirtualX, DrawString, Drawable_t, id, GContext_t, gc, Int_t, x, Int_t, y, const char *, s, Int_t, len, 1) VOID_METHOD_ARG6(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG6 (VirtualX, GrabPointer, Window_t, id, UInt_t, evmask, Window_t, confine, Cursor_t, cursor, Bool_t, grab, Bool_t, owner_events, 1) VOID_METHOD_ARG6(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG7 (VirtualX, DrawCellArray, Int_t, x1, Int_t, y1, Int_t, x2, Int_t, y2, Int_t, nx, Int_t, ny, Int_t *, ic, 1) VOID_METHOD_ARG7(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t VOID_METHOD_ARG8 (VirtualX, QueryPointer, Window_t, id, Window_t &, rootw, Window_t &, childw, Int_t &, root_x, Int_t &, root_y, Int_t &, win_x, Int_t &, win_y, UInt_t &, mask, 1) VOID_METHOD_ARG0(VirtualX;  ; Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t VOID_METHOD_ARG9 (VirtualX, PutImage, Drawable_t, id, GContext_t, gc, Drawable_t, img, Int_t, dx, Int_t, dy, Int_t, x, Int_t, y, UInt_t, w, UInt_t, h, 1) VOID_METHOD_ARG9(VirtualX;  .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:39420,mask,mask,39420,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['mask'],['mask']
Availability,"e, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); static TStringTXMLSetup::DefaultXmlSetup(); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawMap(const char* = ""*"", Option_t* = """"); virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* handle); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TXMLFile.html:5465,error,error,5465,root/html532/TXMLFile.html,https://root.cern,https://root.cern/root/html532/TXMLFile.html,1,['error'],['error']
Availability,"e, Int_t setNum, const TObject* obj = 0, Bool_t isArray = kFALSE); voiddefineRequiredArgs(const char* argName1, const char* argName2 = 0, const char* argName3 = 0, const char* argName4 = 0, const char* argName5 = 0, const char* argName6 = 0, const char* argName7 = 0, const char* argName8 = 0); Bool_tdefineSet(const char* name, const char* argName, Int_t setNum, const RooArgSet* set = 0); Bool_tdefineString(const char* name, const char* argName, Int_t stringNum, const char* defValue = """", Bool_t appendMode = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; RooLinkedListfilterCmdList(RooLinkedList& cmdInList, const char* cmdNameList, Bool_t removeFromInList = kTRUE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tgetDouble(const char* name, Double_t defaultValue = 0); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tgetInt(const char* name, Int_t defaultValue = 0); virtual const char*TObject::GetName() const; TObject*getObject(const char* name, TObject* obj = 0); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; const RooLinkedList&getObjectList(const char* name); static Bool_tTObject::GetObjectStat(); virtual Option_t*TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCmdConfig.html:4299,error,error,4299,root/html526/RooCmdConfig.html,https://root.cern,https://root.cern/root/html526/RooCmdConfig.html,7,['error'],['error']
Availability,"e, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:5526,toler,tolerance,5526,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,6,['toler'],['tolerance']
Availability,"e, and hence, it cannot be used as a PDF. In this case, RooFit passes an error to the minimiser, which might try to recover.; ; import ROOT; ; ; # Create a fit model:; # The polynomial is notoriously unstable, because it can quickly go negative.; # Since PDFs need to be positive, one often ends up with an unstable fit model.; x = ROOT.RooRealVar(""x"", ""x"", -15, 15); a1 = ROOT.RooRealVar(""a1"", ""a1"", -0.5, -10.0, 20.0); a2 = ROOT.RooRealVar(""a2"", ""a2"", 0.2, -10.0, 20.0); a3 = ROOT.RooRealVar(""a3"", ""a3"", 0.01); pdf = ROOT.RooPolynomial(""pol3"", ""c + a1 * x + a2 * x*x + 0.01 * x*x*x"", x, [a1, a2, a3]); ; # Create toy data with all-positive coefficients:; data = pdf.generate(x, 10000); ; # For plotting.; # We create pointers to the plotted objects. We want these objects to leak out of the function,; # so we can still see them after it returns.; c = ROOT.TCanvas(); frame = x.frame(); data.plotOn(frame, Name=""data""); ; # Plotting a PDF with disallowed parameters doesn't work. We would get a lot of error messages.; # Therefore, we disable plotting messages in RooFit's message streams:; ROOT.RooMsgService.instance().getStream(0).removeTopic(ROOT.RooFit.Plotting); ROOT.RooMsgService.instance().getStream(1).removeTopic(ROOT.RooFit.Plotting); ; ; # RooFit before ROOT 6.24; # --------------------------------; # Before 6.24, RooFit wasn't able to recover from invalid parameters. The minimiser just errs around; # the starting values of the parameters without finding any improvement.; ; # Set up the parameters such that the PDF would come out negative. The PDF is now undefined.; a1.setVal(10.0); a2.setVal(-1.0); ; # Perform a fit:; fitWithoutRecovery = pdf.fitTo(; data,; Save=True,; RecoverFromUndefinedRegions=0.0, # This is how RooFit behaved prior to ROOT 6.24; PrintEvalErrors=-1, # We are expecting a lot of evaluation errors. -1 switches off printing.; PrintLevel=-1,; ); ; pdf.plotOn(frame, LineColor=""r"", Name=""noRecovery""); ; ; # RooFit since ROOT 6.24; # ------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html:1702,error,error,1702,doc/master/rf612__recoverFromInvalidParameters_8py.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8py.html,1,['error'],['error']
Availability,"e, bool createOnTheFly=false) override;  Retrieve binning of this linear transformation. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; bool hasBinning (const char *name) const override;  Returns true if binning with given name exists.If a given binning exists on the input variable, it will also exists on this linear transformation. ;  ; TClass * IsA () const override;  ; bool isJacobianOK (const RooArgSet &depList) const override;  Returns true if Jacobian term associated with current expression tree is indeed constant. ;  ; double jacobian () const override;  Return value of Jacobian associated with the transformation. ;  ; virtual RooAbsArg & operator= (double newValue);  Assignment operator from a double. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream. ;  ; void setVal (double value) override;  Assign given value to linear transformation: sets input variable to (value-offset)/slope If slope is zerom an error message is printed and no assignment is made. ;  ; virtual void setVal (double value)=0;  Set the current value of the object. Needs to be overridden by implementations. ;  ; virtual void setVal (double value, const char *);  Set the current value of the object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream. ;  ;  Public Member Functions inherited from RooAbsRealLValue;  RooAbsRealLValue ();  ;  RooAbsRealLValue (const char *name, const char *title, const char *unit="""");  Constructor. ;  ;  RooAbsRealLValue (const RooAbsRealLValue &other, const char *name=nullptr);  Copy constructor. ;  ; TH1F * createHistogram (const char *name, const char *yAxisLabel) const;  Create an empty 1D-histogram with appropriate scale and labels for this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:2987,error,error,2987,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['error'],['error']
Availability,"e, column, fColRegister);; 676 // For now disable this functionality in case of an empty data source and; 677 // the column name was not defined previously.; 678 if (ROOT::Internal::RDF::GetDataSourceLabel(*this) == ""EmptyDS""); 679 RDFInternal::CheckForDefinition(where, column, fColRegister, fLoopManager->GetBranchNames(),; 680 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 681 const auto validColumnNames = ColumnNames_t{column.data()};; 682 CheckAndFillDSColumns(validColumnNames, TTraits::TypeList<T>{});; 683 ; 684 // Declare return type to the interpreter, for future use by jitted actions; 685 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(T));; 686 if (retTypeName.empty()) {; 687 // The type is not known to the interpreter.; 688 // We must not error out here, but if/when this column is used in jitted code; 689 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(T));; 690 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 691 }; 692 ; 693 auto newColumn = std::make_shared<ROOT::Internal::RDF::RDefaultValueFor<T>>(; 694 column, retTypeName, defaultValue, validColumnNames, fColRegister, *fLoopManager);; 695 ; 696 RDFInternal::RColumnRegister newCols(fColRegister);; 697 newCols.AddDefine(std::move(newColumn));; 698 ; 699 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 700 ; 701 return newInterface;; 702 }; 703 ; 704 // clang-format off; 705 ////////////////////////////////////////////////////////////////////////////; 706 /// \brief Define a new column that is updated when the input sample changes.; 707 /// \param[in] name The name of the defined column.; 708 /// \param[in] expression A C++ callable that computes the new value of the defined column.; 709 /// \return the first node of the computation graph for which the new quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:36245,error,error,36245,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['error']
Availability,"e, compRes, &result);; 2603 }; 2604 fCurExecutingMacros.pop_back();; 2605 }; 2606 } // .L / .X / .x; 2607 else {; 2608 if (0!=strncmp(sLine.Data(), "".autodict "",10) && sLine != "".autodict"") {; 2609 // explicitly ignore .autodict without having to support it; 2610 // in cling.; 2611 ; 2612 // Turn off autoparsing if this is an include directive; 2613 bool isInclusionDirective = sLine.Contains(""\n#include"") || sLine.BeginsWith(""#include"");; 2614 if (isInclusionDirective) {; 2615 SuspendAutoParsing autoParseRaii(this);; 2616 indent = HandleInterpreterException(GetMetaProcessorImpl(), sLine, compRes, &result);; 2617 } else {; 2618 indent = HandleInterpreterException(GetMetaProcessorImpl(), sLine, compRes, &result);; 2619 }; 2620 }; 2621 }; 2622 if (result.isValid()); 2623 RegisterTemporary(result);; 2624 if (indent) {; 2625 if (error); 2626 *error = kProcessing;; 2627 return 0;; 2628 }; 2629 if (error) {; 2630 switch (compRes) {; 2631 case cling::Interpreter::kSuccess: *error = kNoError; break;; 2632 case cling::Interpreter::kFailure: *error = kRecoverable; break;; 2633 case cling::Interpreter::kMoreInputExpected: *error = kProcessing; break;; 2634 }; 2635 }; 2636 if (compRes == cling::Interpreter::kSuccess; 2637 && result.isValid(); 2638 && !result.isVoid()); 2639 {; 2640 return result.castAs<Longptr_t>();; 2641 }; 2642 return 0;; 2643}; 2644 ; 2645////////////////////////////////////////////////////////////////////////////////; 2646/// No-op; see TRint instead.; 2647 ; 2648void TCling::PrintIntro(); 2649{; 2650}; 2651 ; 2652////////////////////////////////////////////////////////////////////////////////; 2653/// \brief Add a directory to the list of directories in which the; 2654/// interpreter looks for include files.; 2655/// \param[in] path The path to the directory.; 2656/// \note Only one path item can be specified at a time, i.e. ""path1:path2"" is; 2657/// \b NOT supported.; 2658/// \warning Only the path to the directory should be specified, without; 2659/// prep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:101539,error,error,101539,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,6,['error'],['error']
Availability,"e, const char* cmd = """", Int_t tab = 1, Int_t sub = -1); virtual~TBrowserPlugin(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBrowserPlugin.html:1464,error,error,1464,root/html526/TBrowserPlugin.html,https://root.cern,https://root.cern/root/html526/TBrowserPlugin.html,5,['error'],['error']
Availability,"e, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); Draw the CPU speedup plot.; opt = 'typewhat', e.g. 'std:max:'; type = 'std:' draw standard plot; 'stdx:' draw standard plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node; what = 'max:' draw max rate; 'avg:' draw average rate; 'all:' draw max and average rate on same plot (default); type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots; dofit = 0 no fit; 1 fit with default 3 parameter saturated I/O formula; 2 fit with 4 parameter saturated I/O formula (varying Rcpu); n0 = for dofit == 2, number of real cores; n1 = for dofit == 2, number of total cores (real + hyperthreaded). void DrawEfficiency(const char* outfile, const char* opt = """", Bool_t verbose = kFALSE); Draw the efficiency plot.; opt = 'cpu' or 'data' (default the first found). Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; These can be changed via dset and fnroot, respectively.; The string 'fnroot' defines the location of the files, interpreted as an URL.; Examples:; fnroot files; 'event' <datadir>/event_<ord>_<#>.root; '/mss/event' /mss/event_<ord>_<#>.root; 'root://srv//mss/event?remote=1'; root://srv//mss/event_<ord>_<#>?remote=1.root; Default selector is TSelEventGen. Use SetDataGenSel and SetDataGenPar to change it; and to pass the list of PARs defining the alternative selector.; The argument 'nevt' controls the number of events per file (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:12760,error,error,12760,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,3,['error'],['error']
Availability,"e, const char* serverValueString = 0); Interface to insert remote error logging messages received by RooRealMPFE into current error loggin stream. void logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:62286,error,errors,62286,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['error'],['errors']
Availability,"e, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFormat(const char* format = ""%.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGProgressBar.html:4301,error,error,4301,root/html602/TGProgressBar.html,https://root.cern,https://root.cern/root/html602/TGProgressBar.html,4,['error'],['error']
Availability,"e, const char* slot_name = 0); virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static voidNeedGraphicsLibs(); Bool_tNoLogoOpt() const; Bool_tNoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual voidOpen(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tQuitOpt() const; virtual voidRaise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tReturnFromRun() const; virtual voidReturnPressed(char* text)SIGNAL ; virtual voidRun(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEchoMode(Bool_t mode); virtual voidSetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidSetReturnFromRun(Bool_t ret)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplication.html:7487,error,error,7487,root/html526/TApplication.html,https://root.cern,https://root.cern/root/html526/TApplication.html,2,['error'],['error']
Availability,"e, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10207,toler,tolerance,10207,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,1,['toler'],['tolerance']
Availability,"e, see [api:hesse]) (normally) produce an error matrix. This matrix is twice the inverse of the matrix of second derivatives of the \(\mbox{FCN}\), transformed if necessary into external coordinate space2, and multiplied by FCNBase::up(). Therefore, errors based on the M error matrix take account of all the parameter correlations, but not the non-linearities. That is, from the error matrix alone, two-standard-deviation errors are always exactly twice as big as one-standard-deviation errors.; When the error matrix has been calculated (for example by the successful execution of \(\mbox{MIGRAD}\) (MnMigrad::operator(), see [api:migradop]) or HESSE (MnHesse::operator())) then the parameter errors printed by M are the square roots of the diagonal elements of this matrix. The covariance or the correlations can be printed and shown via std::cout as the ostream operator operator\(<<\) is overloaded. The eigenvalues of the error matrix can be calculated using MnEigen, which should all be positive if the matrix is positive-definite (see below on \(\mbox{MIGRAD}\) and positive-definiteness).; The effect of correlations on the individual parameter errors can be seen as follows. When parameter \(\mbox{n}\) is fixed (e.g. via the method MnMigrad::fix(n)), M inverts the error matrix, removes the row and column corresponding to parameter \(\mbox{n}\), and re-inverts the result. The effect on the errors of the other parameters will in general be to make them smaller, since the component due to the uncertainty in parameter \(\mbox{n}\) has now been removed. (In the limit that a given parameter is uncorrelated with parameter \(\mbox{n}\), its error will not change when parameter \(\mbox{n}\) is fixed.) However the procedure is not reversible, since M forgets the original error matrix, so if parameter \(\mbox{n}\) is then released (e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:21822,error,error,21822,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"e,""struct "",7)==0) name += 7;; 2981 ; 2982 if (!gROOT->GetListOfClasses()) return nullptr;; 2983 ; 2984 // FindObject will take the read lock before actually getting the; 2985 // TClass pointer so we will need not get a partially initialized; 2986 // object.; 2987 TClass *cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 2988 ; 2989 // Early return to release the lock without having to execute the; 2990 // long-ish normalization.; 2991 if (cl && (cl->IsLoaded() || cl->TestBit(kUnloading))) return cl;; 2992 ; 2993 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 2994 ; 2995 // Now that we got the write lock, another thread may have constructed the; 2996 // TClass while we were waiting, so we need to do the checks again.; 2997 ; 2998 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 2999 if (cl) {; 3000 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3001 ; 3002 // We could speed-up some of the search by adding (the equivalent of); 3003 //; 3004 // if (cl->GetState() == kInterpreter) return cl; 3005 //; 3006 // In this case, if a ROOT dictionary was available when the TClass; 3007 // was first requested it would have been used and if a ROOT dictionary is; 3008 // loaded later on TClassTable::Add will take care of updating the TClass.; 3009 // So as far as ROOT dictionary are concerned, if the current TClass is; 3010 // in interpreted state, we are sure there is nothing to load.; 3011 //; 3012 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3013 // by a user provided TClassGenerator. We have no way of knowing whether; 3014 // those do (or even can) behave the same way as the ROOT dictionary and; 3015 // have the 'dictionary is now available for use' step informs the existing; 3016 // TClass that their dictionary is now available.; 3017 ; 3018 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3019 load = kTRUE;; 3020 }; 3021 ; 3022 if (TClassEdit::IsArtificial(name)) {; 3023 // If there is a @ sy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:112870,avail,available,112870,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"e,""struct "",7)==0) name += 7;; 3048 ; 3049 if (!gROOT->GetListOfClasses()) return nullptr;; 3050 ; 3051 // FindObject will take the read lock before actually getting the; 3052 // TClass pointer so we will need not get a partially initialized; 3053 // object.; 3054 TClass *cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 3055 ; 3056 // Early return to release the lock without having to execute the; 3057 // long-ish normalization.; 3058 if (cl && (cl->IsLoaded() || cl->TestBit(kUnloading))) return cl;; 3059 ; 3060 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 3061 ; 3062 // Now that we got the write lock, another thread may have constructed the; 3063 // TClass while we were waiting, so we need to do the checks again.; 3064 ; 3065 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(name);; 3066 if (cl) {; 3067 if (cl->IsLoaded() || cl->TestBit(kUnloading)) return cl;; 3068 ; 3069 // We could speed-up some of the search by adding (the equivalent of); 3070 //; 3071 // if (cl->GetState() == kInterpreter) return cl; 3072 //; 3073 // In this case, if a ROOT dictionary was available when the TClass; 3074 // was first requested it would have been used and if a ROOT dictionary is; 3075 // loaded later on TClassTable::Add will take care of updating the TClass.; 3076 // So as far as ROOT dictionary are concerned, if the current TClass is; 3077 // in interpreted state, we are sure there is nothing to load.; 3078 //; 3079 // However (see TROOT::LoadClass), the TClass can also be loaded/provided; 3080 // by a user provided TClassGenerator. We have no way of knowing whether; 3081 // those do (or even can) behave the same way as the ROOT dictionary and; 3082 // have the 'dictionary is now available for use' step informs the existing; 3083 // TClass that their dictionary is now available.; 3084 ; 3085 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3086 load = kTRUE;; 3087 }; 3088 ; 3089 if (TClassEdit::IsArtificial(name)) {; 3090 // If there is a @ sy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:115621,avail,available,115621,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"e->GetName());; 700 // old_vol->InspectShape();; 701 // make a copy of the node; 702 new_node = node->MakeCopyNode();; 703 if (!new_node) {; 704 Fatal(""CheckShapes"", ""Cannot make copy node for %s"", node->GetName());; 705 return;; 706 }; 707 TGeoShape *new_shape = shape->GetMakeRuntimeShape(fShape, node->GetMatrix());; 708 if (!new_shape) {; 709 Error(""CheckShapes"", ""cannot resolve runtime shape for volume %s/%s\n"", GetName(), old_vol->GetName());; 710 continue;; 711 }; 712 TGeoVolume *new_volume = old_vol->MakeCopyVolume(new_shape);; 713 // printf("" new volume %s shape params :\n"", new_volume->GetName());; 714 // new_volume->InspectShape();; 715 new_node->SetVolume(new_volume);; 716 // decouple the old node and put the new one instead; 717 fNodes->AddAt(new_node, i);; 718 // new_volume->CheckShapes();; 719 }; 720 }; 721}; 722 ; 723////////////////////////////////////////////////////////////////////////////////; 724/// Count total number of subnodes starting from this volume, nlevels down; 725/// - option = 0 (default) - count only once per volume; 726/// - option = 1 - count every time; 727/// - option = 2 - count volumes on visible branches; 728/// - option = 3 - return maximum level counted already with option = 0; 729 ; 730Int_t TGeoVolume::CountNodes(Int_t nlevels, Int_t option); 731{; 732 static Int_t maxlevel = 0;; 733 static Int_t nlev = 0;; 734 ; 735 if (option < 0 || option > 3); 736 option = 0;; 737 Int_t visopt = 0;; 738 Int_t nd = GetNdaughters();; 739 Bool_t last = (!nlevels || !nd) ? kTRUE : kFALSE;; 740 switch (option) {; 741 case 0:; 742 if (fNtotal); 743 return fNtotal;; 744 case 1: fNtotal = 1; break;; 745 case 2:; 746 visopt = fGeoManager->GetVisOption();; 747 if (!IsVisDaughters()); 748 last = kTRUE;; 749 switch (visopt) {; 750 case TVirtualGeoPainter::kGeoVisDefault: fNtotal = (IsVisible()) ? 1 : 0; break;; 751 case TVirtualGeoPainter::kGeoVisLeaves: fNtotal = (IsVisible() && last) ? 1 : 0;; 752 }; 753 if (!IsVisibleDaughters()); 754 return fNtot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:30756,down,down,30756,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['down'],['down']
Availability,"e->SetOptFit(1011);; 675 ; 676print fit probability, parameter names/values and errors.; 677 ; 6781. When `v = 1` is specified, only the non-fixed parameters are shown.; 6792. When `v = 2` all parameters are shown.; 680 ; 681Note: `gStyle->SetOptFit(1)` means ""default value"", so it is equivalent; 682to `gStyle->SetOptFit(111)`; 683 ; 684 ; 685\anchor HP09; 686### The error bars options; 687 ; 688 ; 689| Option | Description |; 690|----------|-------------------------------------------------------------------|; 691| ""E"" | Default. Shows only the error bars, not a marker.|; 692| ""E1"" | Small lines are drawn at the end of the error bars.|; 693| ""E2"" | Error rectangles are drawn.|; 694| ""E3"" | A filled area is drawn through the end points of the vertical error bars.|; 695| ""E4"" | A smoothed filled area is drawn through the end points of the vertical error bars.|; 696| ""E0"" | Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping|; 697| ""E5"" | Like E3 but ignore the bins with 0 contents.|; 698| ""E6"" | Like E4 but ignore the bins with 0 contents.|; 699| ""X0"" | When used with one of the ""E"" option, it suppress the error bar along X as `gStyle->SetErrorX(0)` would do.|; 700 ; 701Begin_Macro(source); 702{; 703 auto c1 = new TCanvas(""c1"",""c1"",600,400);; 704 auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; 705 for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; 706 gStyle->SetEndErrorSize(3);; 707 gStyle->SetErrorX(1.);; 708 he->SetMarkerStyle(20);; 709 he->Draw(""E1"");; 710}; 711End_Macro; 712 ; 713The options ""E3"" and ""E4"" draw an error band through the end points of the; 714vertical error bars. With ""E4"" the error band is smoothed. Because of the; 715smoothing algorithm used some artefacts may appear at the end of the band; 716like in the following example. In such cases ""E3"" should be used instead; 717of ""E4"".; 718 ; 719Begin_Macro(source); 720{; 721 auto ce4 = new TCanvas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:30803,error,error,30803,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['error']
Availability,"e->SetOptStat(1101); displays the name of histogram, mean value and RMS.; Notes:. never call SetOptStat(000111); but SetOptStat(111), 000111 will be taken as an octal number !!; SetOptStat(1) is s shortcut allowing to set the most common case, and is taken as SetOptStat(1111) (for backward compatibility with older versions. If you want to print only the name of the histogram call SetOptStat(1000000001).; that in case of 2-D histograms, when selecting just underflow (10000) or overflow (100000), the stats box will show all combinations of underflow/overflows and not just one single number! . Definition at line 1640 of file TStyle.cxx. ◆ SetOptStat() [2/2]. void TStyle::SetOptStat ; (; Option_t * ; stat). The parameter mode can be any combination of kKsSiourRmMen. . k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; I : integral of bins with option ""width"" printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed. Example: gStyle->SetOptStat(""ne""); print only name of histogram and number of entries. gStyle->SetOptStat(""n"") print only the name of the histogram; gStyle->SetOptStat(""nemr"") is the default . Definition at line 1676 of file TStyle.cxx. ◆ SetOptTitle(). void TStyle::SetOptTitle ; (; Int_t ; tit = 1). inline . Definition at line 334 of file TStyle.h. ◆ SetOrthoCamera(). void TStyle::SetOrthoCamera ; (; Bool_t ; on = kTRUE). inline . Definition at line 427 of file TStyle.h. ◆ SetPadBorderMode(). void TStyle::SetPadBorderMode ; (; Int_t ; mode = 1). inline . Definition at line 357 of file TStyle.h. ◆ SetPadBorderSize(). void TStyle::SetPadBorderSize ; (; Width_t ; size = 1). inline . Definition at line 356 of file TStyle.h. ◆ SetPadBottomMargin(). void TStyle::SetPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:84268,error,error,84268,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,4,['error'],['error']
Availability,"e-definite even at the minimum, this may mean that the solution is not well defined, for example that there are more unknowns than there are data points, or that the parameterization of the fit contains a linear dependence. If this is the case, then Minuit (or any other program) cannot solve your problem uniquely. The error matrix will necessarily be largely meaningless, so the user must remove the under determinedness by reformulating the parameterization. Minuit cannot do this itself.; 5.9.4.3 Numerical Inaccuracies; It is possible that the apparent lack of positive-definiteness is due to excessive round off errors in numerical calculations (in the user function), or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if the parameters are badly scaled (not all of the same order of magnitude), and correlations are large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; 5.9.4.4 An Ill-posed Problem; For questions of parameter dependence, see the discussion above on positive-definiteness. Possible other mathematical problems are the following:. Excessive numerical round off - be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution - the function may have unphysical local minima, especially at infinity in some variables. 5.10 Minuit2 Package; Minuit2 is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package. Compared with the TMinuit class, which is a direct conversion from FORTRAN to C++, Minuit2 is a complete redesign and re-implementation of the package. This new version provides all the functionality present in the old FORTRAN version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:224676,error,error,224676,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"e. ; Definition at line 2084 of file TGNumberEntry.cxx. ◆ SetText(). virtual void TGNumberEntry::SetText ; (; const char * ; text, . Bool_t ; emit = kTRUE . ). inlinevirtual . Definition at line 192 of file TGNumberEntry.h. ◆ SetTime(). virtual void TGNumberEntry::SetTime ; (; Int_t ; hour, . Int_t ; min, . Int_t ; sec, . Bool_t ; emit = kTRUE . ). inlinevirtual . Definition at line 183 of file TGNumberEntry.h. ◆ Streamer(). void TGNumberEntry::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGNumberEntry::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 273 of file TGNumberEntry.h. ◆ ValueChanged(). void TGNumberEntry::ValueChanged ; (; Long_t ; val). virtual . Emit ValueChanged(Long_t) signal. ; This signal is emitted when fButtonToNum is false. The val has the following meaning: val % 100 is the step size val % 10000 / 100 != 0 indicates log step val / 10000 != 0 indicates button down ; Definition at line 2165 of file TGNumberEntry.cxx. ◆ ValueSet(). void TGNumberEntry::ValueSet ; (; Long_t ; val). virtual . Emit ValueSet(Long_t) signal. ; This signal is emitted when the number entry value is changed. The val has the following meaning: val % 100 is the step size val % 10000 / 100 != 0 indicates log step val / 10000 != 0 indicates button down ; Definition at line 2177 of file TGNumberEntry.cxx. Member Data Documentation. ◆ fButtonDown. TGButton* TGNumberEntry::fButtonDown. protected . Button for decreasing value. ; Definition at line 165 of file TGNumberEntry.h. ◆ fButtonToNum. Bool_t TGNumberEntry::fButtonToNum. protected . Send button messages to parent rather than number entry field. ; Definition at line 166 of file TGNumberEntry.h. ◆ fButtonUp. TGButton* TGNumberEntry::fButtonUp. protected . Button for increasing value. ; Definition at line 164 of file TGNumberEntry.h. ◆ fNumAttr. EAttribute TGNumberEntry::fNumAttr.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGNumberEntry.html:47225,down,down,47225,doc/master/classTGNumberEntry.html,https://root.cern,https://root.cern/doc/master/classTGNumberEntry.html,1,['down'],['down']
Availability,"e. Because TH1 derives from TNamed, the key identifier on the file is the histogram name: TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; To read this histogram in another Root session, do: TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; One can save all histograms in memory to the file by: file->Write();. Miscellaneous operations; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; d#define d(i)Definition RSha256.hxx:102; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:20767,error,errors,20767,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"e. Branch was not added to the cache"");; 1074 return -1;; 1075 }; 1076 ; 1077 TFile *f = GetCurrentFile();; 1078 if (!f) {; 1079 Error(""AddBranchToCache"", ""No file is available. Branch was not added to the cache"");; 1080 return -1;; 1081 }; 1082 TTreeCache *tc = GetReadCache(f,true);; 1083 if (!tc) {; 1084 Error(""AddBranchToCache"", ""No cache is available, branch not added"");; 1085 return -1;; 1086 }; 1087 return tc->AddBranch(bname,subbranches);; 1088}; 1089 ; 1090////////////////////////////////////////////////////////////////////////////////; 1091/// Add branch b to the Tree cache.; 1092/// if subbranches is true all the branches of the subbranches are; 1093/// also put to the cache.; 1094///; 1095/// Returns:; 1096/// - 0 branch added or already included; 1097/// - -1 on error; 1098 ; 1099Int_t TTree::AddBranchToCache(TBranch *b, bool subbranches); 1100{; 1101 if (!GetTree()) {; 1102 if (LoadTree(0)<0) {; 1103 Error(""AddBranchToCache"",""Could not load a tree"");; 1104 return -1;; 1105 }; 1106 }; 1107 if (GetTree()) {; 1108 if (GetTree() != this) {; 1109 Int_t res = GetTree()->AddBranchToCache(b, subbranches);; 1110 if (res<0) {; 1111 Error(""AddBranchToCache"", ""Error adding branch"");; 1112 }; 1113 return res;; 1114 }; 1115 } else {; 1116 Error(""AddBranchToCache"", ""No tree is available. Branch was not added to the cache"");; 1117 return -1;; 1118 }; 1119 ; 1120 TFile *f = GetCurrentFile();; 1121 if (!f) {; 1122 Error(""AddBranchToCache"", ""No file is available. Branch was not added to the cache"");; 1123 return -1;; 1124 }; 1125 TTreeCache *tc = GetReadCache(f,true);; 1126 if (!tc) {; 1127 Error(""AddBranchToCache"", ""No cache is available, branch not added"");; 1128 return -1;; 1129 }; 1130 return tc->AddBranch(b,subbranches);; 1131}; 1132 ; 1133////////////////////////////////////////////////////////////////////////////////; 1134/// Remove the branch with name 'bname' from the Tree cache.; 1135/// If bname=""*"" all branches are removed from the cache.; 1136/// if subbranch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:39246,error,error,39246,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,2,"['avail', 'error']","['available', 'error']"
Availability,"e. For example, if there is only one free parameter, \(\mbox{SCAN}\) allows the user to verify approximately the function curvature. Similarly, if there are only two free parameters, use \(\mbox{CONTOURS}\). To verify a full error matrix, compare the results of \(\mbox{MIGRAD}\) with those (calculated afterward) by \(\mbox{HESSE}\), which uses a different method. And of course the most reliable and most expensive technique, which must be used if asymmetric errors are required, is \(\mbox{MINOS}\).; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; \(\mbox{MIGRAD}\) uses its current estimate of the covariance matrix of the function to determine the current search direction, since this is the optimal strategy for quadratic functions and “physical” functions should be quadratic in the neighbourhood of the minimum at least. The search directions determined by \(\mbox{MIGRAD}\) are guaranteed to be downhill only if the covariance matrix is positive–definite, so in case this is not true, it makes a positive–definite approximation by adding an appropriate constant along the diagonal as determined by the eigenvalues of the matrix. Theoretically, the covariance matrix for a “physical” function must be positive–definite at the minimum, although it may not be so for all points far away from the minimum, even for a well–determined physical problem. Therefore, if \(\mbox{MIGRAD}\) reports that it has found a non-positive–definite covariance matrix, this may be a sign of one or more of the following:. A non–physical region. On its way to the minimum, \(\mbox{MIGRAD}\) may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem. If the matrix is not positive–definite even at the minimum, this may mean that the solution is not well–defined, for example that there are more unknowns than there are data points, or that the parametrization of the fit conta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:76429,down,downhill,76429,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['down'],['downhill']
Availability,"e. From: Martin Kestel (mka@mppmu.mpg.de); Date: Fri Jul 19 2002 - 13:18:48 MEST. Next message: Ed Oltman: ""[ROOT] Performance question: Updating a colz histogram""; Previous message: Arkadiusz Bubak: ""[ROOT] TThread and TMapFile together""; In reply to: Rene Brun: ""Re: [ROOT] error calc. in TProfile"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. Hi Rene,. RB>I agree with your theory. In the practical case of TProfile; RB>with low statistics in one bin and very small weights, do you have a; RB>better algorithm to propose? I mean an algorithm really working,; RB>and for example, not subject to rounding problems?; RB>Let me know. I will be happy to include it. I thought a little bit about this problem and arrived at the following; conclusion / suggestion:. Is it possible to use a user-supplied error calculation function? In addition; of course to the other options (error-of-the-mean and spread option). It is always the user's own responsibility to calculate their errors; correctly, as well as judging the outcome of a fit they make. What should be; the job of ROOT (IMHO), is to provide the tools to fit data points; even if; the fit is bad and the chi^2 is large, this is telling something. A user cannot expect ROOT to take care for any ill-posed fit, it is necessary; to give a bad result in that case. There is more to fitting distributions than; just to run a program: when fits do not work well, the users may be advised to; think about the model they are fitting and not to complain to ROOT developers; about their (physics or) statistics problem. just another $0.02 from me -- I am curious for other opinions. Best Regards,. Martin. Next message: Ed Oltman: ""[ROOT] Performance question: Updating a colz histogram""; Previous message: Arkadiusz Bubak: ""[ROOT] TThread and TMapFile together""; In reply to: Rene Brun: ""Re: [ROOT] error calc. in TProfile"". Messages sorted by:; [ date ]; [ thread ]; [ subject ]; [ author ]. This archive was generated by hyperma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/roottalk/roottalk02/2916.html:1078,error,errors,1078,root/roottalk/roottalk02/2916.html,https://root.cern,https://root.cern/root/roottalk/roottalk02/2916.html,1,['error'],['errors']
Availability,"e. However, you may want; : to fix this value if you already know it; : and want to reduce on training time.; : ␛[1mGDTauPrec ␛[0m: precision of estimated tau; : Increase this precision to find a more; : optimum cut-off parameter.; : ␛[1mGDNStep ␛[0m: number of steps in path search; : If the number of steps is too small, then; : the program will give a warning message.; : ; : III. WARNING MESSAGES; : ; : ␛[1mRisk(i+1)>=Risk(i) in path␛[0m; : ␛[1mChaotic behaviour of risk evolution.␛[0m; : The error rate was still decreasing at the end; : By construction the Risk should always decrease.; : However, if the training sample is too small or; : the model is overtrained, such warnings can; : occur.; : The warnings can safely be ignored if only a; : few (<3) occur. If more warnings are generated,; : the fitting fails.; : A remedy may be to increase the value; : ␛[1mGDValidEveFrac␛[0m to 1.0 (or a larger value).; : In addition, if ␛[1mGDPathEveFrac␛[0m is too high; : the same warnings may occur since the events; : used for error estimation are also used for; : path estimation.; : Another possibility is to modify the model - ; : See above on tuning the rule ensemble.; : ; : ␛[1mThe error rate was still decreasing at the end of the path␛[0m; : Too few steps in path! Increase ␛[1mGDNSteps␛[0m.; : ; : ␛[1mReached minimum early in the search␛[0m; : Minimum was found early in the fitting. This; : may indicate that the used step size ␛[1mGDStep␛[0m.; : was too large. Reduce it and rerun.; : If the results still are not OK, modify the; : model either by modifying the rule ensemble; : or add/remove linear terms; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; RuleFit : -------------------RULE ENSEMBLE SUMMARY------------------------; : Tree training method : AdaBoost; : Number of events per tree : 2000; : Number of trees : 20; : Number of generated rules : 196; : Idem, after cleanu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:56576,error,error,56576,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['error'],['error']
Availability,"e. IMPORTANT remark. The 2 axis x and y may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width. void Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. void Multiply(const TH1* h1); Multiply this profile2D by h1*-; *-* =============================. this = this*h1. void Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile2D by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH2D * ProjectionXY(const char* name = ""_pxy"", Option_t* option = ""e"") const; Project this profile2D into a 2-D histogram along X,Y*-*-; *-* =====================================================. The projection is always of the type TH2D. if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:39915,error,errors,39915,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,6,['error'],['errors']
Availability,"e. Long64_t GetEntryNumber(Long64_t entry) const; -- Return entry number corresponding to entry. if no TEntryList set returns entry; else returns entry #entry from this entry list and; also computes the global entry number (loads all tree headers). Int_t GetEntryWithIndex(Int_t major, Int_t minor = 0); -- Return entry corresponding to major and minor number. The function returns the total number of bytes read.; If the Tree has friend trees, the corresponding entry with; the index values (major,minor) is read. Note that the master Tree; and its friend may have different entry serial numbers corresponding; to (major,minor). TFile* GetFile() const; -- Return a pointer to the current file.; If no file is connected, the first file is automatically loaded. TLeaf* GetLeaf(const char* name); -- Return a pointer to the leaf name in the current tree. TObjArray* GetListOfBranches(); -- Return a pointer to the list of branches of the current tree. Warning: May set current tree!. Returns 1 on success and 0 on failure. TObjArray* GetListOfLeaves(); -- Return a pointer to the list of leaves of the current tree. Warning: May set the current tree!. Double_t GetMaximum(const char* columname); -- Return maximum of column with name columname. Double_t GetMinimum(const char* columname); -- Return minimum of column with name columname. Int_t GetNbranches(); -- Return the number of branches of the current tree. Warning: May set the current tree!. Long64_t GetReadEntry() const; -- See TTree::GetReadEntry(). Double_t GetWeight() const; -- Return the chain weight. By default the weight is the weight of the current tree.; However, if the weight has been set in TChain::SetWeight(); with the option ""global"", then that weight will be returned. Warning: May set the current tree!. Int_t LoadBaskets(Long64_t maxmemory); -- Dummy function.; It could be implemented and load all baskets of all trees in the chain.; For the time being use TChain::Merge and TTree::LoadBasket; on the resulting tree. Long64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:35971,failure,failure,35971,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,1,['failure'],['failure']
Availability,"e. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsTestStatistic.html:1159,avail,available,1159,root/html528/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html528/RooAbsTestStatistic.html,6,['avail'],['available']
Availability,"e. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsTestStatistic. class RooAbsTestStatistic: public RooAbsReal. RooAbsTestStatistic is the abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities.; This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsTestStatistic(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:1159,avail,available,1159,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,1,['avail'],['available']
Availability,"e. The; size of the cluster in this range is given by the value of fAutoFlush. For example printing the beginning and end of each the ranges can be done by:. Printf(""%-16s %-16s %-16s %5s"",; ""Cluster Range #"", ""Entry Start"", ""Last Entry"", ""Size"");; Int_t index= 0;; Long64_t clusterRangeStart = 0;; if (fNClusterRange) {; for( ; index < fNClusterRange; ++index) {; Printf(""%-16d %-16lld %-16lld %5lld"",; index, clusterRangeStart, fClusterRangeEnd[index], fClusterSize[index]);; clusterRangeStart = fClusterRangeEnd[index] + 1;; }; }; Printf(""%-16d %-16lld %-16lld %5lld"",; index, prevEntry, fEntries - 1, fAutoFlush);. void SetAutoSave(Long64_t autos = 300000000); This function may be called at the start of a program to change; the default value for fAutoSave(300000000, ie 300 MBytes).; When filling the Tree the branch buffers as well as the Tree header; will be flushed to disk when more than fAutoSave bytes have been written to the file.; In case of a program crash, it will be possible to recover the data in the Tree; up to the last AutoSave point. void SetBasketSize(const char* bname, Int_t buffsize = 16000); Set a branch's basket size. bname is the name of a branch.; if bname=""*"", apply to all branches.; if bname=""xxx*"", apply to all branches with name starting with xxx; see TRegexp for wildcarding options; buffsize = branc basket size. Int_t SetBranchAddress(const char* bname, void** add, TBranch** ptr = 0); Change branch address, dealing with clone trees properly.; See TTree::CheckBranchAddressType for the semantic of the return value. Note: See the comments in TBranchElement::SetAddress() for the; meaning of the addr parameter. Int_t SetBranchAddress(const char* bname, void* add, TClass* realClass, EDataType datatype, Bool_t isptr); Verify the validity of the type of addr before calling SetBranchAddress.; See TTree::CheckBranchAddressType for the semantic of the return value. Note: See the comments in TBranchElement::SetAddress() for the; meaning of the addr parameter.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:122041,recover,recover,122041,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,1,['recover'],['recover']
Availability,"e. void WriteHeader(); Write file info like configurations, title, UUID and other. void WriteStreamerInfo(); Store all TVirtualStreamerInfo, used in file, in sql database. Bool_t WriteSpecialObject(Long64_t keyid, TObject* obj, const char* name, const char* title); write special kind of object like streamer infos or file itself; keys for that objects should exist in tables but not indicated in list of keys,; therefore users can not get them with TDirectoryFile::Get() method. TObject* ReadSpecialObject(Long64_t keyid, TObject* obj = 0); Read data of special kind of objects. TList* GetStreamerInfoList(); Read back streamer infos from database; List of streamer infos is always stored with key:id 0,; which is not shown in normal keys list. void SaveToDatabase(); save data which is not yet in Database; Typically this is streamerinfos structures or. Int_t StreamKeysForDirectory(TDirectory* dir, Bool_t doupdate, Long64_t specialkeyid = -1, TKeySQL** specialkey = 0); read keys for specified directory (when update == kFALSE); or update value for modified keys when update == kTRUE; Returns number of successfully read keys or -1 if error. void InitSqlDatabase(Bool_t create); initialize sql database and correspondent structures; identical to TFile::Init() function. Bool_t ReadConfigurations(); read table configurations as special table. void CreateBasicTables(); Creates initial tables in database; This is table with configurations and table with keys; Function called once when first object is stored to the file. void IncrementModifyCounter(); Update value of modify counter in config table; Modify counter used to indicate that something was changed in database.; It will be used when multiple instances of TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLFile.html:40046,error,error,40046,root/html534/TSQLFile.html,https://root.cern,https://root.cern/root/html534/TSQLFile.html,3,['error'],['error']
Availability,"e. {; TCanvas *c43 = new TCanvas(""c43"",""c43"",200,10,600,400);; c43->DrawFrame(0., -0.5, 6., 2);. double x[5] = {1, 2, 3, 4, 5};; double zero[5] = {0, 0, 0, 0, 0};. // data set (1) with stat and sys errors; double py1[5] = {1.2, 1.15, 1.19, 0.9, 1.4};; double ey_stat1[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys1[5] = {0.5, 0.71, 0.76, 0.5, 0.45};. // data set (2) with stat and sys errors; double y2[5] = {0.25, 0.18, 0.29, 0.2, 0.21};; double ey_stat2[5] = {0.2, 0.18, 0.17, 0.2, 0.4};; double ey_sys2[5] = {0.63, 0.19, 0.7, 0.2, 0.7};. // Now draw data set (1). // We first have to draw it only with the stat errors; TGraphErrors *graph1 = new TGraphErrors(5, x, py1, zero, ey_stat1);; graph1->SetMarkerStyle(20);; graph1->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph1_sys = new TGraphErrors(5, x, py1, zero, ey_sys1);; graph1_sys->Draw(""[]"");. // Now draw data set (2). // We first have to draw it only with the stat errors; TGraphErrors *graph2 = new TGraphErrors(5, x, y2, zero, ey_stat2);; graph2->SetMarkerStyle(24);; graph2->Draw(""P"");. // Now we have to somehow depict the sys errors. TGraphErrors *graph2_sys = new TGraphErrors(5, x, y2, zero, ey_sys2);; graph2_sys->Draw(""[]"");; return c43;; }; TGraphAsymmErrors; A TGraphAsymmErrors is like a TGraphErrors but the errors; defined along X and Y are not symmetric: The left and right errors are; different along X and the bottom and up errors are different along Y. Picture; Source. {; TCanvas *c44 = new TCanvas(""c44"",""c44"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double aexh[] = {0.5, 0.4, 0.3, 0.2, 0.1};; double aeyl[] = {1, 0.5, 1, 0.5, 1};; double aeyh[] = {0.5, 1, 0.5, 1, 0.5};; TGraphAsymmErrors* gae = new TGraphAsymmErrors(5, ax, ay, aexl, aexh, aeyl, aeyh);; gae->SetFillColor(2);; gae->SetFillStyle(3001);; gae->Draw(""a2"");; gae->Draw(""p"");; return c44;; }; TGraphBentErrors; A TGraphBentErrors is l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphPainter.html:10275,error,errors,10275,root/html534/TGraphPainter.html,https://root.cern,https://root.cern/root/html534/TGraphPainter.html,3,['error'],['errors']
Availability,"e. ~TFileCacheRead(); Destructor. void Prefetch(Long64_t pos, Int_t len); Add block of length len at position pos in the list of blocks to; be prefetched. If pos <= 0 the current blocks (if any) are reset. void SecondPrefetch(Long64_t , Int_t ). void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; NB: this function is automatically called by TTreeCache::Print. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer,; otherwise need to make a normal read from file. Returns -1 in case of; read error, 0 in case not in cache, 1 in case read from cache. Int_t ReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc). Int_t ReadBufferExtPrefetch(char* buf, Long64_t pos, Int_t len, Int_t& loc); prefetch the first block. Int_t ReadBufferExtNormal(char* buf, Long64_t pos, Int_t len, Int_t& loc); Base function for ReadBuffer. Also gives out the position; of the block in the internal buffer. This helps TTreeCacheUnzip to avoid; doing twice the binary search. void SetFile(TFile* file); Set the file using this cache and reset the current blocks (if any). void Sort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. void SecondSort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary.; Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. TFilePrefetch* GetPrefetchObj(). TFileCacheRead(const TFileCacheRead& ). TFileCacheRead& operator=(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFileCacheRead.html:9343,error,error,9343,root/html530/TFileCacheRead.html,https://root.cern,https://root.cern/root/html530/TFileCacheRead.html,2,['error'],['error']
Availability,"e...;  ; class  TGLSelectionBuffer;  ; class  TGLSelectRecord;  Standard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes). More...;  ; class  TGLSelectRecordBase;  Base class for select records. More...;  ; class  TGLSphere;  Implements a native ROOT-GL sphere that can be rendered at different levels of detail. More...;  ; class  TGLStopwatch;  Stopwatch object for timing GL work. More...;  ; class  TGLSurfacePainter;  Implements painting of TH2 with ""SURF"" option. More...;  ; class  TGLText;  GL Text. More...;  ; class  TGLTF3Painter;  Plot-painter for TF3 functions. More...;  ; class  TGLTH3Composition;  ; class  TGLTH3CompositionPainter;  ; class  TGLTH3Slice;  A slice of a TH3. More...;  ; class  TGLTransManip;  Translation manipulator - attaches to physical shape and draws local axes widgets with arrow heads. More...;  ; class  TGLUtil;  Wrapper class for various misc static functions - error checking, draw helpers etc. More...;  ; class  TGLVector3;  3 component (x/y/z) vector class. More...;  ; class  TGLVertex3;  3 component (x/y/z) vertex class. More...;  ; class  TGLViewer;  Base GL viewer object - used by both standalone and embedded (in pad) GL. More...;  ; class  TGLViewerBase;  Base class for GL viewers. More...;  ; class  TGLViewerEditor;  GUI editor for TGLViewer. More...;  ; class  TGLVoxelPainter;  Paint TH3 histograms as ""voxels"" - colored boxes, transparent if transfer function was specified. More...;  ; class  TGLWidget;  GL window with context. More...;  ; class  TH2GL;  Rendering of TH2 and derived classes. More...;  ; class  TH3GL;  OpenGL renderer class for TH3. More...;  ; class  TPointSet3DGL;  Direct OpenGL renderer for TPointSet3D. More...;  ; class  TX11GLManager;  The TX11GLManager is X11 implementation of TGLManager. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__opengl.html:9802,error,error,9802,doc/master/group__opengl.html,https://root.cern,https://root.cern/doc/master/group__opengl.html,1,['error'],['error']
Availability,"e.; Definition at line 1081 of file RooAbsPdf.cxx. ◆ randomizeProtoOrder(). Int_t * RooAbsPdf::randomizeProtoOrder ; (; Int_t ; nProto, . Int_t ; nGen, . bool ; resample = false . ); const. protected . Return lookup table with randomized order for nProto prototype events. ; Definition at line 1485 of file RooAbsPdf.cxx. ◆ redirectServersHook(). bool RooAbsPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooProdPdf, RooGenericPdf, RooResolutionModel, and RooProjectedPdf.; Definition at line 2768 of file RooAbsPdf.cxx. ◆ resetErrorCounters(). void RooAbsPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). virtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented in RooAddModel, and RooAddPdf.; Definition at line 586 of file RooAbsPdf.cxx. ◆ selfNormalized(). virtual bool RooAbsPdf::selfNormalized ; (; ); const. inlinevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented in RooHistConstraint, RooIntegralMorph, RooMomentMorph, RooAbsCachedPdf, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooExtendPdf, RooHistPdf, RooProdPdf, RooProjectedPdf, RooRealSumPdf, RooResolutionModel, RooSimultaneous, RooWrapperPdf, RooNormalizedPdf, RooFixedProdPdf, and PdfWrapper.; Definition at line 207 of file RooAbsPdf.h. ◆ setActiveNormSet(). void RooAbsPdf::setActiveNormSet ; (; RooArgSet const * ; normSet); const. inlineprivate . Setter for the _normSet member, which should never be set directly. ; Definition at line 284 of file RooAbsPdf.h. ◆ setGeneratorConfig(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:151718,error,error,151718,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,2,['error'],['error']
Availability,"e.; Definition at line 359 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 375 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional thread even if there is only one core. the default will be taken as kEnable. Returns 0 if there was an error, 1 otherwise. ; Definition at line 436 of file TTreeCacheUnzip.cxx. ◆ SetUnzipBufferSize(). void TTreeCacheUnzip::SetUnzipBufferSize ; (; Long64_t ; bufferSize). Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ; Definition at line 839 of file TTreeCacheUnzip.cxx. ◆ SetUnzipGroupSize(). void TTreeCacheUnzip::SetUnzipGroupSize ; (; Int_t ; groupSize). inline . Definition at line 146 of file TTreeCacheUnzip.h. ◆ SetUnzipRelBufferSize(). void TTreeCacheUnzip::SetUnzipRelBufferSize ; (; Float_t ; relbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 830 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 384 of file TTreeCacheUnzip.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:36003,error,error,36003,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"e.; Definition at line 360 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 376 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional thread even if there is only one core. the default will be taken as kEnable. Returns 0 if there was an error, 1 otherwise. ; Definition at line 437 of file TTreeCacheUnzip.cxx. ◆ SetUnzipBufferSize(). void TTreeCacheUnzip::SetUnzipBufferSize ; (; Long64_t ; bufferSize). Sets the size for the unzipping cache... by default it should be two times the size of the prefetching cache. ; Definition at line 840 of file TTreeCacheUnzip.cxx. ◆ SetUnzipGroupSize(). void TTreeCacheUnzip::SetUnzipGroupSize ; (; Int_t ; groupSize). inline . Definition at line 146 of file TTreeCacheUnzip.h. ◆ SetUnzipRelBufferSize(). void TTreeCacheUnzip::SetUnzipRelBufferSize ; (; Float_t ; relbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 831 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 385 of file TTreeCacheUnzip.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:36077,error,error,36077,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['error'],['error']
Availability,"e.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:8563,error,error,8563,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"e.Print();; ; // Save all objects in this file; hfile.Write();; ; // Close the file. Note that this is automatically done when you leave; // the application upon file destruction.; hfile.Close();; ; return 0;; }; mainint main()Definition Prototype.cxx:12; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; TFile.h; TH1.h; TH2.h; TProfile.h; TRandom.h; TTree.h; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:621; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169. PyROOT; The TTree class has several additions for its use from Python, which are also available in its subclasses e.g. TChain and TNtuple.; First, TTree instances are iterable in Python. Therefore, assuming t is a TTree instance, we can do: for entry in t:; x = entry.branch_name; ...; At each iteration, a new entry of the tree will be read. In the code above, entry allows to access the branch values for the current entry. This can be done with the syntax entry.branch_name or, if the branch name is incompatible with Python naming rules, with e.g. ""getattr(entry, '1_branch_name')"".; Please note that iterating in Python can be slow, so only iterate over a tree as described above if performance is not an issue or when dealing with a small dataset. To read and process the entries of a tree in a much faster way, please use ROOT::RDataFrame.; Second, a couple of TTree methods have been modified to facilitate their use from Python: TTree::Branch and TTree::SetBranchAddress.; Regarding TTree::Branch, the following example shows how we can create diffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:14864,avail,available,14864,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['avail'],['available']
Availability,"e.Print();; ; // Save all objects in this file; hfile.Write();; ; // Close the file. Note that this is automatically done when you leave; // the application upon file destruction.; hfile.Close();; ; return 0;; }; mainint main()Definition Prototype.cxx:12; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; TFile.h; TH1.h; TH2.h; TProfile.h; TRandom.h; TTree.h; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA_SOFIE_GNN_Parser.treetreeDefinition TMVA_SOFIE_GNN_Parser.py:169. PyROOT; The TTree class has several additions for its use from Python, which are also available in its subclasses e.g. TChain and TNtuple.; First, TTree instances are iterable in Python. Therefore, assuming t is a TTree instance, we can do: for entry in t:; x = entry.branch_name; ...; At each iteration, a new entry of the tree will be read. In the code above, entry allows to access the branch values for the current entry. This can be done with the syntax entry.branch_name or, if the branch name is incompatible with Python naming rules, with e.g. ""getattr(entry, '1_branch_name')"".; Please note that iterating in Python can be slow, so only iterate over a tree as described above if performance is not an issue or when dealing with a small dataset. To read and process the entries of a tree in a much faster way, please use ROOT::RDataFrame.; Second, a couple of TTree methods have been modified to facilitate their use from Python: TTree::Branch and TTree::SetBranchAddress.; Regarding TTree::Branch, the following example shows how we can create diffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:14865,avail,available,14865,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['avail'],['available']
Availability,"e.cxx. ◆ FindBNodeA(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindBNodeA ; (; Value * ; point, . Value * ; delta, . Int_t & ; inode . ). find the smallest node covering the full range - start ; Definition at line 1173 of file TKDTree.cxx. ◆ FindInRange(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindInRange ; (; Value * ; point, . Value ; range, . std::vector< Index > & ; res . ). Find all points in the sphere of a given radius ""range"" around the given point 1st argument - the point 2nd argument - radius of the shere 3rd argument - a vector, in which the results will be returned. ; Definition at line 749 of file TKDTree.cxx. ◆ FindNearestNeighbors(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindNearestNeighbors ; (; const Value * ; point, . Int_t ; k, . Index * ; ind, . Value * ; dist . ). Find kNN nearest neighbors to the point in the first argument Returns 1 on success, 0 on failure Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long. ; Definition at line 543 of file TKDTree.cxx. ◆ FindNode(). template<typename Index , typename Value > . Index TKDTree< Index, Value >::FindNode ; (; const Value * ; point); const. returns the index of the terminal node to which point belongs (index in the fAxis, fValue, etc arrays) returns -1 in case of failure ; Definition at line 672 of file TKDTree.cxx. ◆ FindPoint(). template<typename Index , typename Value > . void TKDTree< Index, Value >::FindPoint ; (; Value * ; point, . Index & ; index, . Int_t & ; iter . ). find the index of point works only if we keep fData pointers ; Definition at line 703 of file TKDTree.cxx. ◆ GetBoundaries(). template<typename Index , typename Value > . Value * TKDTree< Index, Value >::GetBoundaries. Get the boundaries. ; Definition at line 1185 of file TKDTree.cxx. ◆ GetBoundariesExact(). template<typename Index , typename Value > . Value * TKDTree< Index, V",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTree.html:33737,failure,failure,33737,doc/master/classTKDTree.html,https://root.cern,https://root.cern/doc/master/classTKDTree.html,1,['failure'],['failure']
Availability,"e.cxx:1257; TGCompositeFrame::SetCleanupvoid SetCleanup(Int_t mode=kLocalCleanup) overrideTurn on automatic cleanup of child frames in dtor.Definition TGFrame.cxx:1072; TGFrame::Resizevoid Resize(UInt_t w=0, UInt_t h=0) overrideResize the frame.Definition TGFrame.cxx:605; TGFrame::MapWindowvoid MapWindow() overridemap windowDefinition TGFrame.h:204; TGLayoutHintsThis class describes layout hints used by the layout classes.Definition TGLayout.h:50; TGMainFrameDefines top level windows that interact with the system Window Manager.Definition TGFrame.h:397; TGMainFrame::SetWindowNamevoid SetWindowName(const char *name=nullptr) overrideSet window name. This is typically done via the window manager.Definition TGFrame.cxx:1788; TGSimpleTableInterfaceTGSimpleTableInterface is a very simple implementation of a TVirtualTableInterface.Definition TGSimpleTableInterface.h:18; TGTableCreate an array to hold a bunch of numbers.Definition TGTable.h:34; TGTable::Updatevirtual void Update()Update the range of the available data and refresh the current view.Definition TGTable.cxx:1529; double; int; unsigned int; It is also possible to visualise data from a tree. A simple macro showing the use of a TTreeTableInterface follows.; {; // Open a root file.; TFile *file = new TFile(""$ROOTSYS/tutorials/hsimple.root"");; // Load a tree from the file; TNtuple *ntuple = (TNtuple *)file->Get(""ntuple"");; ; // Create an interface; TTreeTableInterface *iface = new TTreeTableInterface(ntuple);; ; // Create a main frame to contain the table; TGMainFrame* mainframe = new TGMainFrame(0, 400, 200);; mainframe->SetCleanup(kDeepCleanup) ;; ; // Create the table; TGTable *table = new TGTable(mainframe, 999, iface, 10, 6);; ; // Add the table to the main frame; mainframe->AddFrame(table, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));; ; // Set a selection; iface->SetSelection(""px > 0."");; // Add a column; iface->AddColumn(""(px+py)/(px-py)"", 0);; //update the table view; table->Update();; ; // Layout and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTable.html:4362,avail,available,4362,doc/master/classTGTable.html,https://root.cern,https://root.cern/doc/master/classTGTable.html,1,['avail'],['available']
Availability,"e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format on; 733 // TODO we could SFINAE on F's signature to provide friendlier compilation errors in case of signature mismatch; 734 template <typename F, typename RetType_t = typename TTraits::CallableTraits<F>::ret_type>; 735 RInterface<Proxied, DS_t> DefinePerSample(std::string_view name, F expression); 736 {; 737 RDFInternal::CheckValidCppVarName(name, ""DefinePerSample"");; 738 RDFInternal::CheckForRedefinition(""DefinePerSample"", name, fColRegister, fLoopManager->GetBranchNames(),; 739 fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{});; 740 ; 741 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType_t));; 742 if (retTypeName.empty()) {; 743 // The type is not known to the interpreter.; 744 // We must not error out here, but if/when this column is used in jitted code; 745 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType_t));; 746 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 747 }; 748 ; 749 auto newColumn =; 750 std::make_shared<RDFDetail::RDefinePerSample<F>>(name, retTypeName, std::move(expression), *fLoopManager);; 751 ; 752 RDFInternal::RColumnRegister newCols(fColRegister);; 753 newCols.AddDefine(std::move(newColumn));; 754 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 755 return newInterface;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:38771,error,errors,38771,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['errors']
Availability,"e.g. via the method MnMigrad::release(n)), the error matrix is considered as unknown and has to be recalculated with appropriate commands.; 2.5.3 \(\mbox{MINOS}\) errors; The M processor \(\mbox{MINOS}\) (MnMinos, see [api:minos]) was probably the first, and may still be the only, generally available program to calculate parameter errors taking into account both parameter correlations and non-linearities. The \(\mbox{MINOS}\) error intervals are in general asymmetric, and may be expensive to calculate, especially if there are a lot of free parameters and the problem is very non-linear.; \(\mbox{MINOS}\) can only operate after a good minimum has already been found, and the error matrix has been calculated, so the \(\mbox{MINOS}\) error analysis will normally follow a \(\mbox{MIGRAD}\) minimization. The \(\mbox{MINOS}\) error for a given parameter is defined as the change in the value of that parameter which causes \({\displaystyle F'}\) to increase by the amount FCNBase::up(), where \({\displaystyle F'}\) is the minimum of \(\mbox{FCN}\) with respect to all other free parameters, and FCNBase::up() is the return value of the error definition specified by the user (default = 1.).; The algorithm for finding the positive and negative \(\mbox{MINOS}\) errors for parameter \(\mbox{n}\) consists of varying parameter \(\mbox{n}\), each time minimizing \(\mbox{FCN}\) with respect to all the other \(\mbox{npar - 1}\) variable parameters, to find numerically the two values of parameter \(\mbox{n}\) for which the minimum of \(\mbox{FCN}\) takes on the values \(\displaystyle F_{\mathrm{min}} + \mbox{up}\), where \(\displaystyle F_{\mathrm{min}}\) is the minimum of \(\mbox{FCN}\) with respect to all \(\mbox{npar}\) parameters. In order to make the procedure as fast as possible, \(\mbox{MINOS}\) uses the error matrix to predict the values of all parameters at the various sub-minima which it will have to find in the course of the calculation, and in the limit that the problem is near",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:19546,error,error,19546,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"e.h. ◆ FreePicture(). void TGPicturePool::FreePicture ; (; const TGPicture * ; pic). Remove picture from cache if nobody is using it anymore. ; Definition at line 277 of file TGPicture.cxx. ◆ GetPath(). const char * TGPicturePool::GetPath ; (; ); const. inline . Definition at line 104 of file TGPicture.h. ◆ GetPicture() [1/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name). Get a picture from the picture pool. ; Picture must be freed using TGPicturePool::FreePicture(). If picture is not found 0 is returned. ; Definition at line 82 of file TGPicture.cxx. ◆ GetPicture() [2/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name, . char ** ; xpm . ). Create picture from XPM data. ; Picture must be freed using TGPicturePool::FreePicture(). If picture creation failed 0 is returned. ; Definition at line 232 of file TGPicture.cxx. ◆ GetPicture() [3/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name, . Pixmap_t ; pxmap, . Pixmap_t ; mask = 0 . ). Get picture with specified pixmap and mask from pool. ; Picture must be freed using TGPicturePool::FreePicture(). If picture is not found 0 is returned. ; Definition at line 202 of file TGPicture.cxx. ◆ GetPicture() [4/4]. const TGPicture * TGPicturePool::GetPicture ; (; const char * ; name, . UInt_t ; new_width, . UInt_t ; new_height . ). Get picture with specified size from pool (picture will be scaled if necessary). ; Picture must be freed using TGPicturePool::FreePicture(). If picture is not found 0 is returned. ; Definition at line 138 of file TGPicture.cxx. ◆ IsA(). TClass * TGPicturePool::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 113 of file TGPicture.h. ◆ operator=(). TGPicturePool & TGPicturePool::operator= ; (; const TGPicturePool & ; pp). protected . assignment operator ; Definition at line 67 of file TGPicture.cxx. ◆ Print(). void TGPicturePool::Print ; (; Option_t * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicturePool.html:13144,mask,mask,13144,doc/master/classTGPicturePool.html,https://root.cern,https://root.cern/doc/master/classTGPicturePool.html,1,['mask'],['mask']
Availability,"e.h. ◆ GetCompressionFactor(). Float_t TFile::GetCompressionFactor ; (; ). Return the file compression factor. ; Add total number of compressed/uncompressed bytes for each key. Returns the ratio of the two. ; Definition at line 1202 of file TFile.cxx. ◆ GetCompressionLevel(). Int_t TFile::GetCompressionLevel ; (; ); const. inline . Definition at line 391 of file TFile.h. ◆ GetCompressionSettings(). Int_t TFile::GetCompressionSettings ; (; ); const. inline . Definition at line 397 of file TFile.h. ◆ GetEND(). virtual Long64_t TFile::GetEND ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 231 of file TFile.h. ◆ GetEndpointUrl() [1/2]. virtual const TUrl * TFile::GetEndpointUrl ; (; ); const. inlinevirtual . Reimplemented in TNetFile.; Definition at line 235 of file TFile.h. ◆ GetEndpointUrl() [2/2]. const TUrl * TFile::GetEndpointUrl ; (; const char * ; name). static . Get final URL for file being opened asynchronously. ; Returns 0 is the information is not yet available. ; Definition at line 4945 of file TFile.cxx. ◆ GetErrno(). Int_t TFile::GetErrno ; (; ); const. virtual . Method returning errno. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1246 of file TFile.cxx. ◆ GetFd(). Int_t TFile::GetFd ; (; ); const. inline . Definition at line 234 of file TFile.h. ◆ GetFileBytesRead(). Long64_t TFile::GetFileBytesRead ; (; ). static . Static function returning the total number of bytes read from all files. ; Definition at line 4574 of file TFile.cxx. ◆ GetFileBytesWritten(). Long64_t TFile::GetFileBytesWritten ; (; ). static . Static function returning the total number of bytes written to all files. ; Does not take into account what might still be in the write caches. ; Definition at line 4583 of file TFile.cxx. ◆ GetFileCounter(). Long64_t TFile::GetFileCounter ; (; ). static . Definition at line 4617 of file TFile.cxx. ◆ GetFileReadCalls(). Int_t TFile::GetFileReadCalls ; (; ). static . Static function returning",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:64907,avail,available,64907,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['avail'],['available']
Availability,"e.h. ◆ Reserve(). void THnSparse::Reserve ; (; Long64_t ; nbins). overrideprotectedvirtual . Initialize storage for nbins. ; Reimplemented from THnBase.; Definition at line 689 of file THnSparse.cxx. ◆ Reset(). void THnSparse::Reset ; (; Option_t * ; option = """"). overridevirtual . Clear the histogram. ; Implements THnBase.; Definition at line 962 of file THnSparse.cxx. ◆ SetBinContent() [1/2]. void THnSparse::SetBinContent ; (; const Int_t * ; idx, . Double_t ; v . ). inline . Forwards to THnBase::SetBinContent(). ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 105 of file THnSparse.h. ◆ SetBinContent() [2/2]. void THnSparse::SetBinContent ; (; Long64_t ; bin, . Double_t ; v . ). overridevirtual . Set content of bin with index ""bin"" to ""v"". ; Implements THnBase.; Definition at line 904 of file THnSparse.cxx. ◆ SetBinError2(). void THnSparse::SetBinError2 ; (; Long64_t ; bin, . Double_t ; e2 . ). overridevirtual . Set error of bin with index ""bin"" to ""e"", enable errors if needed. ; Implements THnBase.; Definition at line 914 of file THnSparse.cxx. ◆ SetFilledBins(). void THnSparse::SetFilledBins ; (; Long64_t ; nbins). inlineoverridevirtual . Reimplemented from THnBase.; Definition at line 94 of file THnSparse.h. ◆ Streamer(). void THnSparse::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from THnBase.; Reimplemented in THnSparseT< CONT >. ◆ StreamerNVirtual(). void THnSparse::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 169 of file THnSparse.h. ◆ Sumw2(). void THnSparse::Sumw2 ; (; ). overridevirtual . Enable calculation of errors. ; Implements THnBase.; Definition at line 948 of file THnSparse.cxx. Member Data Documentation. ◆ fBinContent. TObjArray THnSparse::fBinContent. private . Array of THnSparseArrayChunk. ; Definition at line 41 of file THnSparse.h. ◆ fBins. TExMap THnSparse::fBins. private . ! Filled bins ; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:39642,error,error,39642,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['error'],"['error', 'errors']"
Availability,"e.h:45; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; BIT#define BIT(n)Definition Rtypes.h:90; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBuffer.h; TClass.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TError.h; kErrorconstexpr Int_t kErrorDefinition TError.h:47; ErrorHandlervoid ErrorHandler(int level, const char *location, const char *fmt, std::va_list va)General error handler function. It calls the user set error handler.Definition TError.cxx:109; kFatalconstexpr Int_t kFatalDefinition TError.h:50; kWarningconstexpr Int_t kWarningDefinition TError.h:46; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; kInfoconstexpr Int_t kInfoDefinition TError.h:45; kSysErrorconstexpr Int_t kSysErrorDefinition TError.h:49; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char filenameDefinition TGWin32VirtualXProxy.cxx:232; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:43926,error,error,43926,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['error'],['error']
Availability,"e/cctype/ */; 10379 while (isgraph((unsigned char)**ppw)) {; 10380 (*ppw)++;; 10381 }; 10382 ; 10383 /* Check end of word */; 10384 if (eol) {; 10385 /* must be a end of line */; 10386 if ((**ppw != '\r') && (**ppw != '\n')) {; 10387 return -1;; 10388 }; 10389 } else {; 10390 /* must be a end of a word, but not a line */; 10391 if (**ppw != ' ') {; 10392 return -1;; 10393 }; 10394 }; 10395 ; 10396 /* Terminate and forward to the next word */; 10397 do {; 10398 **ppw = 0;; 10399 (*ppw)++;; 10400 } while (isspace((unsigned char)**ppw));; 10401 ; 10402 /* Check after term */; 10403 if (!eol) {; 10404 /* if it's not the end of line, there must be a next word */; 10405 if (!isgraph((unsigned char)**ppw)) {; 10406 return -1;; 10407 }; 10408 }; 10409 ; 10410 /* ok */; 10411 return 1;; 10412}; 10413 ; 10414 ; 10415/* Parse HTTP headers from the given buffer, advance buf pointer; 10416 * to the point where parsing stopped.; 10417 * All parameters must be valid pointers (not NULL).; 10418 * Return <0 on error. */; 10419static int; 10420parse_http_headers(char **buf, struct mg_header hdr[MG_MAX_HEADERS]); 10421{; 10422 int i;; 10423 int num_headers = 0;; 10424 ; 10425 for (i = 0; i < (int)MG_MAX_HEADERS; i++) {; 10426 char *dp = *buf;; 10427 ; 10428 /* Skip all ASCII characters (>SPACE, <127), to find a ':' */; 10429 while ((*dp != ':') && (*dp >= 33) && (*dp <= 126)) {; 10430 dp++;; 10431 }; 10432 if (dp == *buf) {; 10433 /* End of headers reached. */; 10434 break;; 10435 }; 10436 ; 10437 /* Drop all spaces after header name before : */; 10438 while (*dp == ' ') {; 10439 *dp = 0;; 10440 dp++;; 10441 }; 10442 if (*dp != ':') {; 10443 /* This is not a valid field. */; 10444 return -1;; 10445 }; 10446 ; 10447 /* End of header key (*dp == ':') */; 10448 /* Truncate here and set the key name */; 10449 *dp = 0;; 10450 hdr[i].name = *buf;; 10451 ; 10452 /* Skip all spaces */; 10453 do {; 10454 dp++;; 10455 } while ((*dp == ' ') || (*dp == '\t'));; 10456 ; 10457 /* The rest of the lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:299449,error,error,299449,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"e/cctype/ */; 10380 while (isgraph((unsigned char)**ppw)) {; 10381 (*ppw)++;; 10382 }; 10383 ; 10384 /* Check end of word */; 10385 if (eol) {; 10386 /* must be a end of line */; 10387 if ((**ppw != '\r') && (**ppw != '\n')) {; 10388 return -1;; 10389 }; 10390 } else {; 10391 /* must be a end of a word, but not a line */; 10392 if (**ppw != ' ') {; 10393 return -1;; 10394 }; 10395 }; 10396 ; 10397 /* Terminate and forward to the next word */; 10398 do {; 10399 **ppw = 0;; 10400 (*ppw)++;; 10401 } while (isspace((unsigned char)**ppw));; 10402 ; 10403 /* Check after term */; 10404 if (!eol) {; 10405 /* if it's not the end of line, there must be a next word */; 10406 if (!isgraph((unsigned char)**ppw)) {; 10407 return -1;; 10408 }; 10409 }; 10410 ; 10411 /* ok */; 10412 return 1;; 10413}; 10414 ; 10415 ; 10416/* Parse HTTP headers from the given buffer, advance buf pointer; 10417 * to the point where parsing stopped.; 10418 * All parameters must be valid pointers (not NULL).; 10419 * Return <0 on error. */; 10420static int; 10421parse_http_headers(char **buf, struct mg_header hdr[MG_MAX_HEADERS]); 10422{; 10423 int i;; 10424 int num_headers = 0;; 10425 ; 10426 for (i = 0; i < (int)MG_MAX_HEADERS; i++) {; 10427 char *dp = *buf;; 10428 ; 10429 /* Skip all ASCII characters (>SPACE, <127), to find a ':' */; 10430 while ((*dp != ':') && (*dp >= 33) && (*dp <= 126)) {; 10431 dp++;; 10432 }; 10433 if (dp == *buf) {; 10434 /* End of headers reached. */; 10435 break;; 10436 }; 10437 ; 10438 /* Drop all spaces after header name before : */; 10439 while (*dp == ' ') {; 10440 *dp = 0;; 10441 dp++;; 10442 }; 10443 if (*dp != ':') {; 10444 /* This is not a valid field. */; 10445 return -1;; 10446 }; 10447 ; 10448 /* End of header key (*dp == ':') */; 10449 /* Truncate here and set the key name */; 10450 *dp = 0;; 10451 hdr[i].name = *buf;; 10452 ; 10453 /* Skip all spaces */; 10454 do {; 10455 dp++;; 10456 } while ((*dp == ' ') || (*dp == '\t'));; 10457 ; 10458 /* The rest of the lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:299482,error,error,299482,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"e2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile2D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax); Redefine x and y axis parameters*-*-*-; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); *-*Redefine x and y axis parameters for variable bin sizes ; *-* ===========================. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile2D errors; *-* =======================================; The computation of the bin errors is based on the parameter option:; option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Z),; i.e. the standard error of the bin contents.; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Z is 0 and the number of bin entries is > 0. 's' The bin errors are the standard deviations of the Z bin values; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Z is 0 and the number of bin entries is > 0. 'i' Errors are as in default case (standard errors of the bin contents); The only difference is for the case when the spread in Z is zero.; In this case for N > 0 the error is 1./SQRT(12.*N). 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; W is the sum in the bin of the weights of the profile.; This option is for combining measurements z +/- dz,; and the profile is filled with values y and weights z = 1/dz**2. See TProfile::BuildOptions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile2D.html:46896,error,errors,46896,root/html534/TProfile2D.html,https://root.cern,https://root.cern/root/html534/TProfile2D.html,12,['error'],"['error', 'errors']"
Availability,"e: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:693; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:56915,down,down,56915,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['down'],['down']
Availability,"e: ""ptAndEta"") as the default column name does not exist.; The above call will produce variations ""ptAndEta:down"" and ""ptAndEta:up"".; Combining multiple variations; Even if a result depends on multiple variations, only one variation is applied at a time, i.e. there will be no result produced by applying multiple systematic variations at the same time. For example, in the following example snippet, the RResultMap instance all_h will contain keys ""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1"", but no ""pt:up&&eta:0"" or similar:; auto df = _df.Vary(""pt"",; ""ROOT::RVecD{pt*0.9, pt*1.1}"",; {""down"", ""up""}); .Vary(""eta"",; [](float eta) { return RVecF{eta*0.9f, eta*1.1f}; },; {""eta""},; 2);; ; auto nom_h = df.Histo2D(histoModel, ""pt"", ""eta"");; auto all_hs = VariationsFor(nom_h);; all_hs.GetKeys(); // returns {""nominal"", ""pt:down"", ""pt:up"", ""eta:0"", ""eta:1""}; ROOT::RDF::RInterface< RDFDetail::RLoopManager >::VaryRInterface< RDFDetail::RLoopManager, DS_t > Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName="""")Register systematic variations for a single existing column using custom variation tags.Definition RInterface.hxx:862; Note how we passed the integer 2 instead of a list of variation tags to the second Vary() invocation: this is a shorthand that automatically generates tags 0 to N-1 (in this case 0 and 1).; NoteCurrently, VariationsFor() and RResultMap are in the ROOT::RDF::Experimental namespace, to indicate that these interfaces might still evolve and improve based on user feedback. We expect that some aspects of the related programming model will be streamlined in future versions. Currently, the results of a Snapshot(), Report() or Display() call cannot be varied (i.e. it is not possible to call VariationsFor() on them. These limitations will be lifted in future releases.; See the Vary() method for more information and this tutorial for an example usage of Vary",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:58337,down,down,58337,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['down'],['down']
Availability,e::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. virtual voidDeclareOptions(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTMVA::FitterBase::fClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&TMVA::FitterBase::fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*TMVA::FitterBase::fLoggermessage logger; TMVA::MinuitWrapper*fMinWrapholds a wrapper around TMinuit; Int_tTMVA::FitterBase::fNparsnumber of parameters; const vector<TMVA::Interval*>TMVA::FitterBase::fRangesallowed intervals. private:. Bool_tfBatchbatch mode; Int_tfErrorLevelminuit error level; Int_tfFitStrategyminuit strategy level; Int_tfMaxCalls(approximate) maximum number of function calls; Int_tfPrintLevelminuit printout level; Bool_tfPrintWarningsminuit warnings level; Double_tfTolerancetolerance to the function value at the minimum; Bool_tfUseImproveflag for 'IMPROVE' use; Bool_tfUseMinosflag for 'MINOS' use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~MinuitFitter(); destructor. void DeclareOptions(); declare SA options. void Init(); minuit-specific settings. Double_t Run(vector<Double_t>& pars); performs the fit. Double_t EstimatorFunction(vector<Double_t>& pars); performs the fit by calliung Run(pars). » Author: Andreas Hoecker » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MinuitFitter.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MinuitFitter.html:7237,error,error,7237,root/html530/TMVA__MinuitFitter.html,https://root.cern,https://root.cern/root/html530/TMVA__MinuitFitter.html,1,['error'],['error']
Availability,"e::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfAutomaticuse user given prune strength or automatically determined one using a validation sample ; Double_tfDeltaPruneStrengthstep size in pruning, is adjusted according to experience of previous trees ; Double_tfErrorFractionntuple var: misclassification error fraction ; vector<TMVA::Event*,allocator<TMVA::Event*> >fEventSamplethe training events; UInt_tfMaxDepthmax depth; Int_tfNCutsgrid used in cut applied in node splitting; UInt_tfNNodesMaxmax # of nodes; Int_tfNodeMinEventsmin number of events in node ; Double_tfNodePurityLimitpurity limit for sig/bkg nodes; Bool_tfPruneBeforeBoostwhether to prune right after the training (before the boosting); TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig ; TStringfPruneMethodSprune method option String; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted; Bool_tfRandomisedTreeschoose a random subset of possible cut variables at each node during training; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSthe separation (option string) used in node splitting; TMVA::DecisionTree*fTreethe decision tree; Int_tfUseNvarsthe number of variables used in the randomised tree splitting; Bool_tfUseYesNoLeafuse sig or bkg classification in leave nodes or sig/bkg; vector<Double_t>fVariableImportancethe relative importance of the different variables ; static const Int_tfgDebugLeve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodDT.html:19337,error,error,19337,root/html530/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodDT.html,2,['error'],['error']
Availability,"e::fgDby; static const TGFont*TGCheckButton::fgDefaultFont; static const TGFont*TGTextButton::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGCheckButton::fgDefaultGC; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGButton::fgHibckgndGC; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static Window_tTGButton::fgReleaseBtnthe last released button; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGColorSelect(const TGWindow* p = 0, Pixel_t color = 0, Int_t id = -1); TGColorSelect constructor.; The TGColorSelect widget is like a checkbutton but instead of the check; mark there is color area with a little down arrow.; When clicked on the arrow the TGColorPopup pops up. ~TGColorSelect(); TGColorSelect destructor. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for TGColorSelect. Bool_t HandleButton(Event_t* event); Handle button events for TGColorSelect. void Enable(Bool_t on = kTRUE); Set state of widget as enabled. void Disable(); Set state of widget as disabled. void DoRedraw(); Redraw TGColorSelect widget. void DrawTriangle(GContext_t gc, Int_t x, Int_t y); Draw triangle (arrow) on which user can click to open TGColorPopup. void SetColor(Pixel_t color, Bool_t emit = kTRUE); Set color. void SetAlphaColor(ULong_t color, Bool_t emit = kTRUE); Set color. void SavePrimitive(ostream& out, Option_t* = """"); Save a color select widget as a C++ statement(s) on output stream out. TGColorFrame& operator=(const TGColorSelect& ). Pixel_t GetColor() const; { return fColor; }. TGColorSelect(const TGColorSelect& ). voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGColorSelect.html:24564,down,down,24564,root/html602/TGColorSelect.html,https://root.cern,https://root.cern/root/html602/TGColorSelect.html,2,['down'],['down']
Availability,e; 214 */; 215 void AddBinUpEdge( const double* xup );; 216 ; 217 /**; 218 return the value for the given fit point; 219 */; 220 double Value( unsigned int ipoint ) const; 221 {; 222 assert( ipoint < fMaxPoints );; 223 assert( fDataPtr );; 224 assert( fData.empty() || &fData.front() == fDataPtr );; 225 ; 226 return fDataPtr[ipoint];; 227 }; 228 ; 229 /**; 230 return a pointer to the value for the given fit point; 231 */; 232 const double *ValuePtr( unsigned int ipoint ) const; 233 {; 234 return &fDataPtr[ipoint];; 235 }; 236 ; 237 /**; 238 Return a pointer to the error (or the inverse error) on the value for a given point; 239 depending on the type of data.; 240 - If the data contains only value error (e.g. from histograms) returns a pointer to; 241 the inverse of the errors.; 242 - If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a; 243 pointer to the corresponding value error (NOT the inverse).; 244 - If the data contains asymmetric errors return a pointer to the average error (NOT the inverse):; 245 0.5(eu + el).; 246 - If the data does not contain errors return a nullptr.; 247 */; 248 ; 249 const double * ErrorPtr(unsigned int ipoint) const{; 250 assert( ipoint < fMaxPoints );; 251 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 252 kAsymError == fErrorType || kNoError == fErrorType );; 253 ; 254 if ( fErrorType == kNoError ); 255 return nullptr;; 256 return &fDataErrorPtr[ ipoint ];; 257 }; 258 ; 259 /// Return the error on the given point.; 260 /// Safer method returning in any case the error and not the inverse as in the; 261 /// function above.; 262 double Error( unsigned int ipoint ) const; 263 {; 264 assert( ipoint < fMaxPoints );; 265 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 266 kAsymError == fErrorType || kNoError == fErrorType );; 267 ; 268 if ( fErrorType == kNoError ); 269 {; 270 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 271 assert( fDataError.e,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:8300,error,errors,8300,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,2,['error'],"['error', 'errors']"
Availability,"e; 819 ; 820if __name__ == ""__main__"":; 821 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 822 # The model can be passed either as a tuple with the arguments in the correct order; 823 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 824 # Or by creating the specific struct; 825 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 826 df.Histo1D(model, ""x""); 827~~~; 828 ; 829Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 830to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 831the distributed execution.; 832 ; 833### Live visualization in distributed mode with dask; 834 ; 835The live visualization feature allows real-time data representation of plots generated during the execution ; 836of a distributed RDataFrame application. ; 837It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 838by creating a canvas and continuously updating it as partial results become available. ; 839 ; 840The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 841 ; 842~~~{.py}; 843import ROOT; 844 ; 845LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 846~~~; 847 ; 848The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 849 ; 850- Passing a list or tuple of drawables: ; 851You can pass a list or tuple containing the plots you want to visualize. For example:; 852 ; 853~~~{.py}; 854LiveVisualize([h_gaus, h_exp, h_random]); 855~~~; 856 ; 857- Passing a list or tuple of drawables with a global callback function: ; 858You can also include a global callback function that will be applied to all plots. For example:; 859 ; 860~~~{.py}; 861def set_fill_color(hist):; 862 hist.SetFillColor(ROOT.kBlue); 863 ; 864LiveVisualize([h_gaus, h_e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:48132,avail,available,48132,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e; 859 ; 860if __name__ == ""__main__"":; 861 df = RDataFrame(""mytree"",""myfile.root"").Define(""x"",""someoperation""); 862 # The model can be passed either as a tuple with the arguments in the correct order; 863 df.Histo1D((""name"", ""title"", 10, 0, 10), ""x""); 864 # Or by creating the specific struct; 865 model = ROOT.RDF.TH1DModel(""name"", ""title"", 10, 0, 10); 866 df.Histo1D(model, ""x""); 867~~~; 868 ; 869Without this, two partial histograms resulting from two distributed tasks would have incompatible binning, thus leading; 870to errors when merging them. Failing to pass a histogram model will raise an error on the client side, before starting; 871the distributed execution.; 872 ; 873### Live visualization in distributed mode with dask; 874 ; 875The live visualization feature allows real-time data representation of plots generated during the execution ; 876of a distributed RDataFrame application. ; 877It enables visualizing intermediate results as they are computed across multiple nodes of a Dask cluster; 878by creating a canvas and continuously updating it as partial results become available. ; 879 ; 880The LiveVisualize() function can be imported from the Python package **ROOT.RDF.Experimental.Distributed**:; 881 ; 882~~~{.py}; 883import ROOT; 884 ; 885LiveVisualize = ROOT.RDF.Experimental.Distributed.LiveVisualize; 886~~~; 887 ; 888The function takes drawable objects (e.g. histograms) and optional callback functions as argument, it accepts 4 different input formats:; 889 ; 890- Passing a list or tuple of drawables: ; 891You can pass a list or tuple containing the plots you want to visualize. For example:; 892 ; 893~~~{.py}; 894LiveVisualize([h_gaus, h_exp, h_random]); 895~~~; 896 ; 897- Passing a list or tuple of drawables with a global callback function: ; 898You can also include a global callback function that will be applied to all plots. For example:; 899 ; 900~~~{.py}; 901def set_fill_color(hist):; 902 hist.SetFillColor(ROOT.kBlue); 903 ; 904LiveVisualize([h_gaus, h_e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:49772,avail,available,49772,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['avail'],['available']
Availability,"e; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCurve(); Default constructor. RooCurve(const RooAbsReal& func, RooAbsRealLValue& x, Double_t xlo, Double_t xhi, Int_t xbins, Double_t scaleFactor = 1, const RooArgSet* normVars = 0, Double_t prec = 0.001, Double_t resolution = 0.001, Bool_t shiftToZero = kFALSE, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0, Bool_t showProgress = kFALSE); Create a 1-dim curve of the value of the specified real-valued expression; as a function of x. Use the optional precision parameter to control; how precisely the smooth curve is rasterized. Use the optional argument set; to specify how the expression should be normalized. Use the optional scale; factor to rescale the expression after normalization.; If shiftToZero is set, the entire curve is shift down to make the lowest; point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooAbsFunc& func, Double_t xlo, Double_t xhi, UInt_t minPoints, Double_t prec = 0.001, Double_t resolution = 0.001, Bool_t shiftToZero = kFALSE, RooCurve::WingMode wmode = Extended, Int_t nEvalError = -1, Int_t doEEVal = kFALSE, Double_t eeVal = 0); Create a 1-dim curve of the value of the specified real-valued; expression as a function of x. Use the optional precision; parameter to control how precisely the smooth curve is; rasterized. If shiftToZero is set, the entire curve is shift; down to make the lowest point in of the curve go through zero. RooCurve(const char* name, const char* title, const RooCurve& c1, const RooCurve& c2, Double_t scale1 = 1., Double_t scale2 = 1.); Constructor of curve as sum of two other curves. Csum = scale1*c1 + scale2*c2. ~RooCurve(); Destructor. void initialize(); Perform initialization that is common to all curves. void shiftCurveToZero(Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCurve.html:19976,down,down,19976,root/html602/RooCurve.html,https://root.cern,https://root.cern/root/html602/RooCurve.html,2,['down'],['down']
Availability,"e; branches (TBranchElement). To get the old behaviour, you can:; - call BranchOld or; - call TTree::SetBranchStyle(0). Note that with the new style, classname does not need to derive from TObject.; It must derived from TObject if the branch style has been set to 0 (old). Note: See the comments in TBranchElement::SetAddress() for a more; detailed discussion of the meaning of the addobj parameter in; the case of new-style branches. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if the class can not be split. TBranch* BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); Create a new TTree BranchObject. Build a TBranchObject for an object of class classname.; addobj is the address of a pointer to an object of class classname.; IMPORTANT: classname must derive from TObject.; The class dictionary must be available (ClassDef in class header). This option requires access to the library where the corresponding class; is defined. Accessing one single data member in the object implies; reading the full object.; See the next Branch constructor for a more efficient storage; in case the entry consists of arrays of identical objects. By default the branch buffers are stored in the same file as the Tree.; use TBranch::SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:47632,avail,available,47632,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,6,['avail'],['available']
Availability,"e; code will abort. When used as lvalue in assignment operations, the element contained in; the list will not be changed, only the value of the existing element!. Bool_t checkForDup(const RooAbsArg& arg, Bool_t silent) const; Check if element with var's name is already in set. Double_t getRealValue(const char* name, Double_t defVal = 0, Bool_t verbose = kFALSE) const; Get value of a RooAbsReal stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setRealValue(const char* name, Double_t newVal = 0, Bool_t verbose = kFALSE); Set value of a RooAbsRealLValye stored in set with given name to newVal; No error messages are printed unless the verbose flag is set. const char* getCatLabel(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. Int_t getCatIndex(const char* name, Int_t defVal = 0, Bool_t verbose = kFALSE) const; Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed unless the verbose flag is set. Bool_t setCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; No error messages are printed unless the verbose flag is set. const char* getStringValue(const char* name, const char* defVal = """", Bool_t verbose = kFALSE) const; Get string value of a RooAbsString stored in set with given name. If none is found, value of defVal is returned.; No error messages are printed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:19147,error,error,19147,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,7,['error'],['error']
Availability,"e; derivative(RooRealVar &obs, Int_t order=1, double eps=0.001)RooAbsReal; derivative(RooRealVar &obs, const RooArgSet &normSet, Int_t order, double eps=0.001)RooAbsReal; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; doEval(RooFit::EvalContext &) constRooAbsRealvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; enableOffsetting(bool)RooAbsRealvirtual; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; ErrorLoggingMode enum nameRooAbsReal; EStatusBits enum nameTObject; evalErrorIter()RooAbsRealstatic; evalErrorLoggingMode()RooAbsRealstatic; evaluate() const =0RooAbsRealprotectedpure virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; expectedEvents(const RooArgSet *nset) constRooAbsPdfvirtual; expectedEvents(const RooArgSet &nset) constRooAbsPdfinline; expensiveObjectCache() constRooAbsArg; extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constRooAbsPdf; extendedTerm(double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) constRooAbsPdf; extendedTerm(RooAbsData const &data, bool weightSquared, bool doOffset=false) constRooAbsPdf; extendMode() constRooAbsPdfinlinevirtual; ExtendMode enum nameRooAbsPdf; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; fillDataHist(RooDataHist *hist, const RooArgSet *nset, double scaleFactor, bool correctForBinVolume=false, bool showProgress=false) constRooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf-members.html:12867,error,error,12867,doc/master/classRooAbsPdf-members.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf-members.html,2,['error'],['error']
Availability,"e; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TGDMLWrite::StructLst*fAccPattlist of accepted patterns for division; UInt_tfActNameErrcount of name errors; XMLNodePointer_tfDefineNodemain <define> node...; TGDMLWrite::StructLst*fElementListlist of elements; TXMLEngine*fGdmlExml engine pointer; XMLDocPointer_tfGdmlFilepointer storing xml file; TGDMLWrite::StructLst*fIsotopeListlist of isotopes; XMLNodePointer_tfMaterialsNodemain <materials> node...; TGDMLWrite::NameLst*fNameListlist of names (pointer mapped); Int_tfPhysVolCntcount of physical volumes; TGDMLWrite::StructLst*fRejShapelist of rejected shapes; UInt_tfSolCntcount of name solids; XMLNodePointer_tfSolidsNodemain <solids> node...; XMLNodePointer_tfStructureNodemain <structure> node...; TStringfTopVolumeNamename of top volume; Int_tfVolCntcount of volumes; Bool_tfgG4Compatibilityinput option for Geant4 compatibility; static TGDMLWrite*fgGDMLWritepointer to gdml writer; Int_tfgNamingSpeedinput option for volume and solid naming; static const UInt_tfgkMaxNameErrmaximum number of errors for naming; static const UInt_tfgkProcBit14th bit is set when solid is processed; static const UInt_tfgkProcBitVol19th bit is set when volume is processed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDMLWrite(); Default constructor. ~TGDMLWrite(); Destructor. void SetNamingSpeed(TGDMLWrite::ENamingType naming); Set convetion of naming solids and volumes. void WriteGDMLfile(TGeoManager* geomanager, const char* filename = ""test.gdml"", TString option = """"); Wrapper of all exporting methods; Creates blank GDML file and fills it with gGeoManager structure converted; to GDML structure of xml nodes. XMLNodePointer_t ExtractMaterials(TList* materialsLst); Method exporting materials. TString ExtractSolid(TGeoShape* volShape); Method creating solid to xml file and returning its name. void ExtractVolumes(TGeoVolume* volume); Method extracting geometry structure recursively. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDMLWrite.html:13257,error,errors,13257,root/html534/TGDMLWrite.html,https://root.cern,https://root.cern/root/html534/TGDMLWrite.html,1,['error'],['errors']
Availability,"e; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Thu Sep 23 20:00:24 2010 » Last generated: 2010-09-23 20:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooNumGenFactory.html:7421,avail,available,7421,root/html528/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html528/RooNumGenFactory.html,1,['avail'],['available']
Availability,"e; map<std::string,RooAbsNumGenerator*>_map. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNumGenFactory(); Constructor. Register all known integrators by calling; their static registration functions. ~RooNumGenFactory(); Destructor. RooNumGenFactory(const RooNumGenFactory& other); Copy constructor. RooNumGenFactory& instance(); Static method returning reference to singleton instance of factory. void cleanup(); Cleanup routine called by atexit() handler installed by RooSentinel. Bool_t storeProtoSampler(RooAbsNumGenerator* proto, const RooArgSet& defConfig); Method accepting registration of a prototype numeric integrator along with a RooArgSet of its; default configuration options and an optional list of names of other numeric integrators; on which this integrator depends. Returns true if integrator was previously registered. const RooAbsNumGenerator* getProtoSampler(const char* name); Return prototype integrator with given (class) name. RooAbsNumGenerator* createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); Construct a numeric integrator instance that operates on function 'func' and is configured; with 'config'. If ndimPreset is greater than zero that number is taken as the dimensionality; of the integration, otherwise it is queried from 'func'. This function iterators over list; of available prototype integrators and returns an clone attached to the given function of; the first class that matches the specifications of the requested integration considering; the number of dimensions, the nature of the limits (open ended vs closed) and the user; preference stated in 'config'. » Last changed: Tue Mar 10 17:18:15 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumGenFactory.html:7509,avail,available,7509,root/html534/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html534/RooNumGenFactory.html,1,['avail'],['available']
Availability,"e; opening time or in case libraries containing classes referenced; by the file have not yet been loaded.; if fgReadInfo is false, one can still read the StreamerInfo with; myfile.ReadStreamerInfo();. void ShowStreamerInfo(); Show the StreamerInfo of all classes written to this file. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pidd is already in the file,; if not, add it and return the index number in the local file list. void WriteStreamerInfo(); Write the list of TStreamerInfo as a single object in this file; The class Streamer description for all classes written to this file; is saved. See class TStreamerInfo. TFile * OpenFromCache(const char* name, Option_t* = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function allowing to open a file for reading through the file; cache. The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by SetCacheFileDir(). TFile * Open(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function allowing the creation/opening of either a; TFile, TNetFile, TWebFile or any TFile derived class for which an; plugin library handler has been registered with the plugin manager; (for the plugin manager see the TPluginManager class). The returned; type of TFile depends on the file name specified by 'url'.; If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried; sequentially in the specified order until a successful open.; If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object; will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile,; etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc; for regular expressions that will be checked) and as last a local file will; be tried.; Before opening a file via TNetFile a check is made to see if the URL; spe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:44163,down,downloaded,44163,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,4,['down'],['downloaded']
Availability,"e; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and workers and expect them to echo it back to; the client via a message. It is a special case of the generic Echo(); that works with TObjects. Returns -1 on error, the number of workers that; received the message on success. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = -1, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoMoreParallel(Int_t nWorkersToAdd)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:67007,error,error,67007,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['error'],['error']
Availability,"e; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TZIPFile.html:13204,error,error,13204,root/html534/TZIPFile.html,https://root.cern,https://root.cern/root/html534/TZIPFile.html,1,['error'],['error']
Availability,"e; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TZIPFile.html:17300,error,error,17300,root/html604/TZIPFile.html,https://root.cern,https://root.cern/root/html604/TZIPFile.html,1,['error'],['error']
Availability,"e; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TZIPFile.html:17300,error,error,17300,root/html602/TZIPFile.html,https://root.cern,https://root.cern/root/html602/TZIPFile.html,1,['error'],['error']
Availability,"e; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » ASIMAGE; » TASImage. class TASImage: public TImage. Image class; TASImage is the concrete interface to the image processing library; libAfterImage. It allows reading and writing of images in different formats, several image; manipulations (scaling, tiling, merging, etc.) and displaying in pads. The size; of the image on the screen does not depend on the original size of the image but; on the size of the pad. Therefore it is very easy to resize the image on the; screen by resizing the pad. Besides reading an image from a file an image can be defined by a two; dimensional array of values. A palette defines the color of each value. The image can be zoomed by defining a rectangle with the mouse. The color; palette can be modified with a GUI, just select StartPaletteEditor() from the; context menu. Several examples showing how to use this class are available in the; ROOT tutorials: $ROOTSYS/tutorials/image/; . Function Members (Methods); public:. TASImage(); TASImage(const TASImage& img); TASImage(UInt_t w, UInt_t h); TASImage(const char* file, TImage::EImageFileTypes type = kUnknown); TASImage(const char* name, const TArrayD& imageData, UInt_t width, TImagePalette* palette = 0); TASImage(const char* name, const TVectorD& imageData, UInt_t width, TImagePalette* palette = 0); TASImage(const char* name, const Double_t* imageData, UInt_t width, UInt_t height, TImagePalette* palette = 0); virtual~TASImage(); voidTObject::AbstractMethod(const char* method) const; static UInt_tAlphaBlend(UInt_t bot, UInt_t top); virtual voidAppend(const TImage* im, const char* option = ""+"", const char* color = ""#00000000""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginPaint(Bool_t fast = kTRUE); virtual voidBevel(Int_t x = 0, Int_t y = 0, UInt_t width = 0, UInt_t height = 0, const char* hi = ""#ffdddddd"", const char* lo = ""#ff55555",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TASImage.html:1093,avail,available,1093,root/html534/TASImage.html,https://root.cern,https://root.cern/root/html534/TASImage.html,1,['avail'],['available']
Availability,"e; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » ASIMAGE; » TASImage. class TASImage: public TImage. Image class; TASImage is the concrete interface to the image processing library; libAfterImage. It allows reading and writing of images in different formats, several image; manipulations (scaling, tiling, merging, etc.) and displaying in pads. The size; of the image on the screen does not depend on the original size of the image but; on the size of the pad. Therefore it is very easy to resize the image on the; screen by resizing the pad. Besides reading an image from a file an image can be defined by a two; dimensional array of values. A palette defines the color of each value. The image can be zoomed by defining a rectangle with the mouse. The color; palette can be modified with a GUI, just select StartPaletteEditor() from the; context menu. Several examples showing how to use this class are available in the; ROOT tutorials: $ROOTSYS/tutorials/image/; . Function Members (Methods); public:. virtual~TASImage(); voidTObject::AbstractMethod(const char* method) const; static UInt_tAlphaBlend(UInt_t bot, UInt_t top); virtual voidAppend(const TImage* im, const char* option = ""+"", const char* color = ""#00000000""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBeginPaint(Bool_t fast = kTRUE); virtual voidBevel(Int_t x = 0, Int_t y = 0, UInt_t width = 0, UInt_t height = 0, const char* hi = ""#ffdddddd"", const char* lo = ""#ff555555"", UShort_t thick = 1, Bool_t pressed = kFALSE); virtual voidBlur(Double_t hr = 3, Double_t vr = 3)MENU ; virtual voidBrowse(TBrowser*); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(TImage* dst, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TASImage.html:1093,avail,available,1093,root/html602/TASImage.html,https://root.cern,https://root.cern/root/html602/TASImage.html,2,['avail'],['available']
Availability,"e; static TGX11TTF::EAlignkTCenter; static TGX11TTF::EAlignkTLeft; static TGX11TTF::EAlignkTRight. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGX11TTF(const TGX11& org); Create copy of TGX11 but now use TrueType fonts. void Activate(); Static method setting TGX11TTF as the acting gVirtualX. Bool_t Init(void* display); Initialize X11 system. Returns kFALSE in case of failure. void Align(void); Compute alignment variables. The alignment is done on the horizontal string; then the rotation is applied on the alignment variables.; SetRotation and LayoutGlyphs should have been called before. void DrawImage(FT_Bitmap* source, ULong_t fore, ULong_t back, RXImage* xim, Int_t bx, Int_t by); Draw FT_Bitmap bitmap to xim image at position bx,by using specified; foreground color. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const char* text, TVirtualX::ETextMode mode); Draw text using TrueType fonts. If TrueType fonts are not available the; text is drawn with TGX11::DrawText. void DrawText(Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t* text, TVirtualX::ETextMode mode); Draw text using TrueType fonts. If TrueType fonts are not available the; text is drawn with TGX11::DrawText. RXImage * GetBackground(Int_t x, Int_t y, UInt_t w, UInt_t h); Get the background of the current window in an XImage. Bool_t IsVisible(Int_t x, Int_t y, UInt_t w, UInt_t h); Test if there is really something to render. void RenderString(Int_t x, Int_t y, TVirtualX::ETextMode mode); Perform the string rendering in the pad.; LayoutGlyphs should have been called before. void SetTextFont(Font_t fontnumber); Set specified font. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Set text font to specified name.; mode : loading flag; mode=0 : search if the font exist (kCheck); mode=1 : search the font and load it if it exists (kLoad); font : font name. Set text font to specified name. This function returns 0 if; the specified ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11TTF.html:27762,avail,available,27762,root/html602/TGX11TTF.html,https://root.cern,https://root.cern/root/html602/TGX11TTF.html,2,['avail'],['available']
Availability,"e; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TObjArrayfAxesaxes of the histogram; TObjArrayfBrowsables! browser-helpers for each axis; Double_tfEntriesnumber of entries, spread over chunks; Double_t*fIntegral! array with bin weight sums; enum(anonymous)fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tfNdimensionsnumber of dimensions; TStringTNamed::fTitleobject title; Double_tfTsumwtotal sum of weights; Double_tfTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDfTsumwxtotal sum of weight*X for each dimension; TArrayDfTsumwx2total sum of weight*X*X for each dimension; static THnBase::(anonymous)kInvalidInt; static THnBase::(anonymous)kNoInt; static THnBase::(anonymous)kValidInt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnBase(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); Construct a THnBase with ""dim"" dimensions,; ""nbins"" holds the number of bins for each dimension;; ""xmin"" and ""xmax"" the minimal and maximal value for each dimension.; The arrays ""xmin"" and ""xmax"" can be NULL; in that case SetBinEdges(); must be called for each dimension. ~THnBase(); Destruct a THnBase. THnBase* CloneEmpty(const char* name, const char* title, const TObjArray* axes, Bool_t keepTargetAxis) const; Create a new THnBase obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnBase.html:10645,error,errors,10645,root/html602/THnBase.html,https://root.cern,https://root.cern/root/html602/THnBase.html,2,['error'],['errors']
Availability,"e;  This method is not implemented. ;  ; double Integral (double a, double b) override;  Returns Integral of function between a and b. ;  ; double IntegralCauchy (double a, double b, double c) override;  This method is not implemented. ;  ; double IntegralLow (double b) override;  Returns Integral of function on a lower semi-infinite interval. ;  ; double IntegralUp (double a) override;  Returns Integral of function on an upper semi-infinite interval. ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetAbsTolerance (double eps) override;  This method is not implemented. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options (should be re-implemented by derived classes -if more options than tolerance exist ;  ; void SetRelTolerance (double eps) override;  Set the desired relative Error. ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  ; virtual int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  . Protected Attributes; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:2166,toler,tolerance,2166,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['toler'],['tolerance']
Availability,"e;; 259 ; 260 if (fPrintLevel >= 1); 261 std::cout << ""GSLMultiRootFinder::Solve:"" << Name() << "" max iterations "" << maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10302,error,error,10302,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['error'],['error']
Availability,"e< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:59; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:171419,error,error,171419,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,2,['error'],['error']
Availability,"e< T; ROOT::InternalDefinition TErrorDefaultHandler.hxx:16; ROOT::Internal::GetSymInLibImtstatic Func_t GetSymInLibImt(const char *funcname)Definition TROOT.cxx:401; ROOT::Internal::gGetROOTstatic GetROOTFun_t gGetROOTDefinition TROOT.cxx:399; ROOT::Internal::gROOTLocalR__EXTERN TROOT * gROOTLocalDefinition TROOT.h:379; ROOT::Internal::DisableParBranchProcessingvoid DisableParBranchProcessing()Globally disables the IMT use case of parallel branch processing, deactivating the corresponding lock...Definition TROOT.cxx:434; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::IsImplicitMTEnabledImplstatic Bool_t & IsImplicitMTEnabledImpl()Keeps track of the status of ImplicitMT w/o resorting to the load of libImt.Definition TROOT.cxx:463; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::GetROOTFun_tTROOT *(* GetROOTFun_t)()Definition TROOT.cxx:397; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::EnableParBranchProcessingvoid EnableParBranchProcessing()Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in...Definition TROOT.cxx:420; ROOT::Internal::IsParBranchProcessingEnabledBool_t IsParBranchProcessingEnabled()Returns true if parallel branch processing is enabled.Definition TROOT.cxx:447; ROOT::Internal::GetROOT2TROOT * GetROOT2()Definition TROOT.cxx:387; ROOT::Internal::GetROOT1TROOT * GetROOT1()Definition TROOT.cxx:380; ROOT::Internal::ReleaseDefaultErrorHandlervoid ReleaseDefaultErrorHandler()Destructs r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:171595,error,error,171595,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['error'],['error']
Availability,"e<RLoopManager> Cache(std::initializer_list<std::string> columnList); 1547 {; 1548 ColumnNames_t selectedColumns(columnList);; 1549 return Cache(selectedColumns);; 1550 }; 1551 ; 1552 // clang-format off; 1553 ////////////////////////////////////////////////////////////////////////////; 1554 /// \brief Creates a node that filters entries based on range: [begin, end).; 1555 /// \param[in] begin Initial entry number considered for this range.; 1556 /// \param[in] end Final entry number (excluded) considered for this range. 0 means that the range goes until the end of the dataset.; 1557 /// \param[in] stride Process one entry of the [begin, end) range every `stride` entries. Must be strictly greater than 0.; 1558 /// \return the first node of the computation graph for which the event loop is limited to a certain range of entries.; 1559 ///; 1560 /// Note that in case of previous Ranges and Filters the selected range refers to the transformed dataset.; 1561 /// Ranges are only available if EnableImplicitMT has _not_ been called. Multi-thread ranges are not supported.; 1562 ///; 1563 /// ### Example usage:; 1564 /// ~~~{.cpp}; 1565 /// auto d_0_30 = d.Range(0, 30); // Pick the first 30 entries; 1566 /// auto d_15_end = d.Range(15, 0); // Pick all entries from 15 onwards; 1567 /// auto d_15_end_3 = d.Range(15, 0, 3); // Stride: from event 15, pick an event every 3; 1568 /// ~~~; 1569 // clang-format on; 1570 RInterface<RDFDetail::RRange<Proxied>, DS_t> Range(unsigned int begin, unsigned int end, unsigned int stride = 1); 1571 {; 1572 // check invariants; 1573 if (stride == 0 || (end != 0 && end < begin)); 1574 throw std::runtime_error(""Range: stride must be strictly greater than 0 and end must be greater than begin."");; 1575 CheckIMTDisabled(""Range"");; 1576 ; 1577 using Range_t = RDFDetail::RRange<Proxied>;; 1578 auto rangePtr = std::make_shared<Range_t>(begin, end, stride, fProxiedPtr);; 1579 RInterface<RDFDetail::RRange<Proxied>, DS_t> newInterface(std::move(rangePtr), *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:87493,avail,available,87493,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['avail'],['available']
Availability,"e=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, TSocket *sock);  Create a parallel socket on a connection already opened via TSocket sock. ;  ;  TPSocket (TInetAddress address, const char *service, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ; virtual ~TPSocket ();  Cleanup the parallel socket. ;  ; void Close (Option_t *opt="""") override;  Close a parallel socket. ;  ; Int_t GetDescriptor () const override;  Return socket descriptor. ;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of local host to which the socket is bound. ;  ; Int_t GetOption (ESockOptions opt, Int_t &val) override;  Get socket options. Returns -1 in case of error. ;  ; Int_t GetSize () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:1466,error,error,1466,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"e=1, const ROOT::Math::IMultiGenFunction *chi2func=nullptr, unsigned int ncalls=0)Fill the fit result from a Minimizer instance after fitting Run also Minos if requested from the conf...Definition FitResult.cxx:100; ROOT::Fit::FitResult::UpperErrordouble UpperError(unsigned int i) constupper Minos error. If Minos has not run for parameter i return the parabolic errorDefinition FitResult.cxx:339; ROOT::Fit::FitResult::fValdouble fValminimum function valueDefinition FitResult.h:350; ROOT::Fit::FitResult::fEdmdouble fEdmexpected distance from minimumDefinition FitResult.h:351; ROOT::Fit::FitResult::fErrorsstd::vector< double > fErrorserrorsDefinition FitResult.h:361; ROOT::Fit::FitResult::NormalizedErrorsbool NormalizedErrors() constflag to check if errors are normalizedDefinition FitResult.h:308; ROOT::Fit::FitResult::Errorsconst std::vector< double > & Errors() constparameter errors (return st::vector)Definition FitResult.h:162; ROOT::Fit::FitResult::GetErrorsconst double * GetErrors() constparameter errors (return const pointer)Definition FitResult.h:164; ROOT::Fit::FitResult::fMinimizerstd::shared_ptr< ROOT::Math::Minimizer > fMinimizer! minimizer object used for fittingDefinition FitResult.h:353; ROOT::Fit::FitResult::fValidbool fValidflag for indicating valid fitDefinition FitResult.h:343; ROOT::Fit::FitResult::IsParameterFixedbool IsParameterFixed(unsigned int ipar) constquery if a parameter is fixedDefinition FitResult.cxx:365; ROOT::Fit::FitResult::fNdfunsigned int fNdfnumber of degree of freedomDefinition FitResult.h:346; ROOT::Fit::FitResult::GetParamsconst double * GetParams() constparameter values (return const pointer)Definition FitResult.h:169; ROOT::Fit::FitResult::IModelFunctionROOT::Math::IParamMultiFunction IModelFunctionDefinition FitResult.h:51; ROOT::Fit::FitResult::Errordouble Error(unsigned int i) constparameter error by indexDefinition FitResult.h:179; ROOT::Fit::FitResult::CovMatrixdouble CovMatrix(unsigned int i, unsigned int j) constretrieve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitResult_8h_source.html:18682,error,errors,18682,doc/master/FitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/FitResult_8h_source.html,1,['error'],['errors']
Availability,"e=false, TString indent="""") const override;  Print info about this histogram to the specified output stream. ;  ; void printName (std::ostream &os) const override;  Print name of RooHist. ;  ; void printTitle (std::ostream &os) const override;  Print title of RooHist. ;  ; void setRawEntries (double n);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraphAsymmErrors;  TGraphAsymmErrors ();  TGraphAsymmErrors default constructor. ;  ;  TGraphAsymmErrors (const char *filename, const char *format=""%lg %lg %lg %lg %lg %lg"", Option_t *option="""");  TGraphAsymmErrors constructor reading input from filename filename is assumed to contain at least 2 columns of numbers. ;  ;  TGraphAsymmErrors (const TGraphAsymmErrors &gr);  TGraphAsymmErrors copy constructor. ;  ;  TGraphAsymmErrors (const TH1 *h);  TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ;  ;  TGraphAsymmErrors (const TH1 *pass, const TH1 *total, Option_t *option="""");  Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ;  ;  TGraphAsymmErrors (const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh);  Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh);  Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ;  ;  TGraphAsymmErrors (Int_t n);  TGraphAsymmErrors normal constructor. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:6036,error,errors,6036,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,2,['error'],"['error', 'errors']"
Availability,"e=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Double_t fAbsTol;  absolute tolerance deviation ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t fMaxIter;  maximum number of iterations ;  ; MethodBase * fMethod;  ; Double_t fRootMax;  maximum root value ;  ; Double_t fRootMin;  minimum root value ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *locati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:9300,toler,tolerance,9300,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['toler'],['tolerance']
Availability,"e> newVariation{new RVariation<std::decay_t<F>, IsSingleColumn>(; 569 std::move(variedColNames), variationName, std::forward<F>(f), std::move(tags), jittedVariation->GetTypeName(),; 570 *colRegister, *lm, inputColNames)};; 571 jittedVariation->SetVariation(std::move(newVariation));; 572 ; 573 doDeletes();; 574}; 575 ; 576/// Convenience function invoked by jitted code to build action nodes at runtime; 577template <typename ActionTag, typename... ColTypes, typename PrevNodeType, typename HelperArgType>; 578void CallBuildAction(std::shared_ptr<PrevNodeType> *prevNodeOnHeap, const char **colsPtr, std::size_t colsSize,; 579 const unsigned int nSlots, std::shared_ptr<HelperArgType> *helperArgOnHeap,; 580 std::weak_ptr<RJittedAction> *wkJittedActionOnHeap, RColumnRegister *colRegister) noexcept; 581{; 582 // a helper to delete objects allocated before jitting, so that the jitter can share data with lazily jitted code; 583 auto doDeletes = [&] {; 584 delete[] colsPtr;; 585 delete helperArgOnHeap;; 586 delete wkJittedActionOnHeap;; 587 // colRegister must be deleted before prevNodeOnHeap because their dtor needs the RLoopManager to be alive; 588 // and prevNodeOnHeap is what keeps it alive if the rest of the computation graph is already out of scope; 589 delete colRegister;; 590 delete prevNodeOnHeap;; 591 };; 592 ; 593 if (wkJittedActionOnHeap->expired()) {; 594 // The branch of the computation graph that needed this jitted variation went out of scope between the type; 595 // jitting was booked and the time jitting actually happened. Nothing to do other than cleaning up.; 596 doDeletes();; 597 return;; 598 }; 599 ; 600 const ColumnNames_t cols(colsPtr, colsPtr + colsSize);; 601 ; 602 auto jittedActionOnHeap = wkJittedActionOnHeap->lock();; 603 ; 604 // if we are here it means we are jitting, if we are jitting the loop manager must be alive; 605 auto &prevNodePtr = *prevNodeOnHeap;; 606 auto &loopManager = *prevNodePtr->GetLoopManagerUnchecked();; 607 using ColTypes_t = Type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:26860,alive,alive,26860,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,2,['alive'],['alive']
Availability,"e>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int NPoints() const; Returns the number of points stored. unsigned int NDim() const; Returns the dimension of the object (bins). void Add(vector<double>& min, vector<double>& max, const double content, const double error = 1.); Adds a new bin specified by the vectors. void PrintList() const; Debug method to print the list of bins stored. void GetBinData(ROOT::Fit::BinData& ) const; Transforms the data into a ROOT::Fit::BinData structure. void GetBinDataIntegral(ROOT::Fit::BinData& ) const; Same as before, but with integral format. void GetBinDataNoZeros(ROOT::Fit::BinData& ) const; Same as before, but including zero content bins. » Author: David Gonzalez Maline Wed Aug 28 15:23:43 2009 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__SparseData.html:2305,error,error,2305,root/html602/ROOT__Fit__SparseData.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__SparseData.html,1,['error'],['error']
Availability,"e>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int NPoints() const; Returns the number of points stored. unsigned int NDim() const; Returns the dimension of the object (bins). void Add(vector<double>& min, vector<double>& max, const double content, const double error = 1.); Adds a new bin specified by the vectors. void PrintList() const; Debug method to print the list of bins stored. void GetBinData(ROOT::Fit::BinData& ) const; Transforms the data into a ROOT::Fit::BinData structure. void GetBinDataIntegral(ROOT::Fit::BinData& ) const; Same as before, but with integral format. void GetBinDataNoZeros(ROOT::Fit::BinData& ) const; Same as before, but including zero content bins. » Author: David Gonzalez Maline Wed Aug 28 15:23:43 2009 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__SparseData.html:2305,error,error,2305,root/html604/ROOT__Fit__SparseData.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__SparseData.html,1,['error'],['error']
Availability,"e>&); virtual~RooCFunction2Ref<double,int,double>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*argName(Int_t iarg); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static RooCFunction2Map<double,int,double>&fmap(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction2Ref_double_int_double_.html:2159,error,error,2159,root/html526/RooCFunction2Ref_double_int_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction2Ref_double_int_double_.html,5,['error'],['error']
Availability,"eAllSignalsBlocked ; (; ). static . Returns true if all signals are blocked. ; Definition at line 1049 of file TQObject.cxx. ◆ AreSignalsBlocked(). Bool_t TQObject::AreSignalsBlocked ; (; ); const. inline . Definition at line 91 of file TQObject.h. ◆ BlockAllSignals(). Bool_t TQObject::BlockAllSignals ; (; Bool_t ; b). static . Block or unblock all signals. Returns the previous block status. ; Definition at line 1057 of file TQObject.cxx. ◆ BlockSignals(). Bool_t TQObject::BlockSignals ; (; Bool_t ; b). inline . Definition at line 92 of file TQObject.h. ◆ ChangedBy(). virtual void TQObject::ChangedBy ; (; const char * ; method). inlinevirtual . Definition at line 199 of file TQObject.h. ◆ CheckConnectArgs(). Int_t TQObject::CheckConnectArgs ; (; TQObject * ; sender, . TClass * ; sender_class, . const char * ; signal, . TClass * ; receiver_class, . const char * ; slot . ). staticprotected . Checking of consistency of sender/receiver methods/arguments. ; Returns -1 on error, otherwise number or arguments of signal function. Static method. ; Definition at line 179 of file TQObject.cxx. ◆ Class(). static TClass * TQObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TQObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TQObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 229 of file TQObject.h. ◆ CollectClassSignalLists(). void TQObject::CollectClassSignalLists ; (; TList & ; list, . TClass * ; cls . ). Collect class signal lists from class cls and all its base-classes. ; The recursive traversal is not performed for classes not deriving from TQClass. ; Definition at line 451 of file TQObject.cxx. ◆ CompressName(). TString TQObject::CompressName ; (; const char * ; method_name). staticprotected . Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQObject.html:8413,error,error,8413,doc/master/classTQObject.html,https://root.cern,https://root.cern/doc/master/classTQObject.html,1,['error'],['error']
Availability,"eAllocate internal data structures for newsize points.Definition TGraphErrors.h:81; TGraphErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphErrors.cxx:856; TGraphErrors::ApplyXvirtual void ApplyX(TF1 *f)Apply function to all the data points .Definition TGraphErrors.cxx:426; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::operator=TGraphErrors & operator=(const TGraphErrors &gr)TGraphErrors assignment operator.Definition TGraphErrors.cxx:184; TGraphErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin !...Definition TGraphErrors.cxx:532; TGraphErrors::MergeInt_t Merge(TCollection *list) overrideAdds all graphs with errors from the collection to this graph.Definition TGraphErrors.cxx:682; TGraphErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphErrors.cxx:510; TGraphErrors::TGraphErrorsTGraphErrors()TGraphErrors default constructor.Definition TGraphErrors.cxx:69; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphErrors.cxx:722; TGraphErrors::Applyvoid Apply(TF1 *f) overrideApply function to all the data points .Definition TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:9656,error,errors,9656,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['errors']
Availability,"eAsvoid SaveAs(const char *filename=""hist"", Option_t *option="""") const overrideSave the histogram as .csv, .tsv or .txt.Definition TH1.cxx:7181; TH1::SetTitleFontvirtual void SetTitleFont(Style_t font=62, Option_t *axis=""X"")Set the axis' title font.Definition Haxis.cxx:323; TH1::GetQuantilesvirtual Int_t GetQuantiles(Int_t n, Double_t *xp, const Double_t *p=nullptr)Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the c...Definition TH1.cxx:4611; TH1::GetAxisColorvirtual Color_t GetAxisColor(Option_t *axis=""X"") constReturn the number of divisions for ""axis"".Definition Haxis.cxx:40; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752; TH1::GetStdDevErrorvirtual Double_t GetStdDevError(Int_t axis=1) constReturn error of standard deviation estimation for Normal distribution.Definition TH1.cxx:7655; TH1::Dividevirtual Bool_t Divide(TF1 *f1, Double_t c1=1)Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:2840; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; TH1::LoggedInconsistencyint LoggedInconsistency(const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) constDefinition TH1.cxx:883; TH1::CheckConsistentSubAxesstatic bool CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)Check that two sub axis are the same.Definition TH1.cxx:1640; TH1::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove object from the list of functions.Definition TH1.cxx:6576; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:82284,error,errors,82284,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['error'],['errors']
Availability,"eBinContent(). Double_t TH1::RetrieveBinContent ; (; Int_t ; bin); const. protectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 9439 of file TH1.cxx. ◆ SameLimitsAndNBins(). Bool_t TH1::SameLimitsAndNBins ; (; const TAxis & ; axis1, . const TAxis & ; axis2 . ). staticprotected . Same limits and bins. ; Definition at line 5898 of file TH1.cxx. ◆ SaveAs(). void TH1::SaveAs ; (; const char * ; filename = ""hist"", . Option_t * ; option = """" . ); const. overridevirtual . Save the histogram as .csv, .tsv or .txt. ; In case of any other extension, fall back to TObject::SaveAs, which saves as a .C macro (but with the file name extension specified by the user); The Under/Overflow bins are also exported (as first and last lines) The fist 2 columns are the lower and upper edges of the bins Column 3 contains the bin contents The last column contains the error in y. If errors are not present, the column is left empty; The result can be immediately imported into Excel, gnuplot, Python or whatever, without the needing to install pyroot, etc.; Parameters. filenamethe name of the file where to store the histogram ; optionsome tuning options. The file extension defines the delimiter used:; .csv : comma; .tsv : tab; .txt : space. If option = ""title"" a title line is generated. If the y-axis has a title, this title is displayed as column 3 name, otherwise, it shows ""BinContent"" ; Reimplemented from TObject.; Definition at line 7181 of file TH1.cxx. ◆ SavePrimitive(). void TH1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, and TProfile3D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:199553,error,error,199553,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['error']
Availability,"eByKeys ();  ; virtual void DetermineBySparseHist ();  ; virtual void DetermineInterval ();  ; virtual void DetermineShortestInterval ();  ; virtual void DetermineTailFractionInterval ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealVar ** fAxes = nullptr;  array of pointers to RooRealVars representing the axes of the histogram fAxes[0] represents x-axis, [1] y, [2] z, etc ;  ; MarkovChain * fChain = nullptr;  the markov chain ;  ; double fConfidenceLevel = 0.0;  Requested confidence level (eg. 0.95 for 95% CL) ;  ; RooRealVar * fCutoffVar = nullptr;  cutoff variable to use for integrating keys pdf ;  ; RooDataHist * fDataHist = nullptr;  the binned Markov Chain data ;  ; double fDelta = DEFAULT_DELTA;  topCutoff (a) considered == bottomCutoff (b) iff (std::abs(a - b) < std::abs(fDelta * (a + b)/2)); Theoretically, the Abs is not needed here, but floating-point arithmetic does not always work perfectly, and the Abs doesn't hurt ;  ; Int_t fDimension = 1;  number of variables ;  ; double fEpsilon = DEFAULT_EPSILON;  acceptable error for Keys interval determination ;  ; double fFull = 0.0;  Value of intergral of fProduct. ;  ; Heaviside * fHeaviside = nullptr;  the Heaviside function ;  ; TH1 * fHist = nullptr;  the binned Markov Chain data ;  ; double fHistConfLevel = 0.0;  the actual conf level determined by hist ;  ; double fHistCutoff = -1;  cutoff bin size to be in interval ;  ; enum IntervalType fIntervalType = kShortest;  ; bool fIsHistStrict = true;  whether the specified confidence level is a floor for the actual confidence level (strict), or a ceiling (not strict) for determination by histogram ;  ; double fKeysConfLevel = 0.0;  the actual conf level determined by keys ;  ; double fKeysCutoff = -1;  cutoff keys pdf value to be in interval ;  ; RooDataHist * fKeysD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:21919,error,error,21919,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['error'],['error']
Availability,"eCacheUnzip::ReadBufferExt ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len, . Int_t & ; loc . ). overridevirtual . Reimplemented from TFileCacheRead.; Definition at line 961 of file TTreeCacheUnzip.cxx. ◆ ResetCache(). void TTreeCacheUnzip::ResetCache ; (; ). overridevirtual . This will delete the list of buffers that are in the unzipping cache and will reset certain values in the cache. ; This name is ambiguos because the method doesn't reset the whole cache, only the part related to the unzipping Note: This method is completely different from TTreeCache::ResetCache(), in that method we were cleaning the prefetching buffer while here we delete the information about the unzipped buffers ; Reimplemented from TTreeCache.; Definition at line 501 of file TTreeCacheUnzip.cxx. ◆ SetBufferSize(). Int_t TTreeCacheUnzip::SetBufferSize ; (; Int_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TTreeCache.; Definition at line 359 of file TTreeCacheUnzip.cxx. ◆ SetEntryRange(). void TTreeCacheUnzip::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). overridevirtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented from TTreeCache.; Definition at line 375 of file TTreeCacheUnzip.cxx. ◆ SetParallelUnzip(). Int_t TTreeCacheUnzip::SetParallelUnzip ; (; TTreeCacheUnzip::EParUnzipMode ; option = TTreeCacheUnzip::kEnable). static . Static function that (de)activates multithreading unzipping. ; The possible options are:; kEnable Enable it, which causes an automatic detection and launches the additional thread if the number of cores in the machine is greater than one; kDisable Disable will not activate the additional thread.; kForce Force will start the additional th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:34880,avail,available,34880,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,2,"['avail', 'error']","['available', 'error']"
Availability,"eColor(2);; gr1->SetLineWidth(1504);; gr1->SetFillStyle(3005);; ; TGraph *gr2 = new TGraph(n,xvalues2,yvalues2);; gr2->SetLineColor(4);; gr2->SetLineWidth(-2002);; gr2->SetFillStyle(3004);; gr2->SetFillColor(9);; ; TGraph *gr3 = new TGraph(n,xvalues3,yvalues3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);; ; mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");; ; return c1;; }; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:7976,error,error,7976,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,3,"['avail', 'error']","['available', 'error']"
Availability,"eCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and conver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:2788,alive,alive,2788,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,4,['alive'],['alive']
Availability,"eDefVal(TString(""FMax""));; 353 AddPreDefVal(TString(""FMin""));; 354 AddPreDefVal(TString(""FSmart""));; 355}; 356 ; 357////////////////////////////////////////////////////////////////////////////////; 358/// process user options.; 359///; 360/// sanity check, do not allow the input variables to be normalised, because this; 361/// only creates problems when interpreting the cuts; 362 ; 363void TMVA::MethodCuts::ProcessOptions(); 364{; 365 if (IsNormalised()) {; 366 Log() << kWARNING << ""Normalisation of the input variables for cut optimisation is not"" << Endl;; 367 Log() << kWARNING << ""supported because this provides intransparent cut values, and no"" << Endl;; 368 Log() << kWARNING << ""improvement in the performance of the algorithm."" << Endl;; 369 Log() << kWARNING << ""Please remove \""Normalise\"" option from booking option string"" << Endl;; 370 Log() << kWARNING << ""==> Will reset normalisation flag to \""False\"""" << Endl;; 371 SetNormalised( kFALSE );; 372 }; 373 ; 374 if (IgnoreEventsWithNegWeightsInTraining()) {; 375 Log() << kFATAL << ""Mechanism to ignore events with negative weights in training not yet available for method: ""; 376 << GetMethodTypeName(); 377 << "" --> Please remove \""IgnoreNegWeightsInTraining\"" option from booking string.""; 378 << Endl;; 379 }; 380 ; 381 if (fFitMethodS == ""MC"" ) fFitMethod = kUseMonteCarlo;; 382 else if (fFitMethodS == ""MCEvents"") fFitMethod = kUseMonteCarloEvents;; 383 else if (fFitMethodS == ""GA"" ) fFitMethod = kUseGeneticAlgorithm;; 384 else if (fFitMethodS == ""SA"" ) fFitMethod = kUseSimulatedAnnealing;; 385 else if (fFitMethodS == ""MINUIT"" ) {; 386 fFitMethod = kUseMinuit;; 387 Log() << kWARNING << ""poor performance of MINUIT in MethodCuts; preferred fit method: GA"" << Endl;; 388 }; 389 else if (fFitMethodS == ""EventScan"" ) fFitMethod = kUseEventScan;; 390 else Log() << kFATAL << ""unknown minimisation method: "" << fFitMethodS << Endl;; 391 ; 392 if (fEffMethodS == ""EFFSEL"" ) fEffMethod = kUseEventSelection; // highly recommen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:13566,avail,available,13566,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['avail'],['available']
Availability,"eDefinition Rtypes.h:66; npOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t npDefinition TGWin32VirtualXProxy.cxx:222; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::GetAttLinevirtual TAttLine * GetAttLine(Int_t e)Get AttLine pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1632; TGraphMultiErrors::AddYErrorvirtual void AddYError(Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr)Add a new y error to the graph and fill it with the values from eyL and eyHDefinition TGraphMultiErrors.cxx:917; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gmultierrors_8C.html:2442,error,error,2442,doc/master/gmultierrors_8C.html,https://root.cern,https://root.cern/doc/master/gmultierrors_8C.html,2,['error'],['error']
Availability,"eDefinition TGWin32VirtualXProxy.cxx:232; TObject.h; TSelectorList.h; TString.h; TListA doubly linked list.Definition TList.h:38; TObjectMother of all ROOT objects.Definition TObject.h:41; TSelectorListA TList derived class that makes sure that objects added to it are not linked to the currently open f...Definition TSelectorList.h:31; TSelectorA TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and...Definition TSelector.h:31; TSelector::SetObjectvirtual void SetObject(TObject *obj)Definition TSelector.h:65; TSelector::GetAbortvirtual EAbort GetAbort() constDefinition TSelector.h:73; TSelector::SetStatusvirtual void SetStatus(Long64_t status)Definition TSelector.h:67; TSelector::IsStandardDrawstatic bool IsStandardDraw(const char *selec)Find out if this is a standard selection used for Draw actions (either TSelectorDraw,...Definition TSelector.cxx:237; TSelector::TSelectorTSelector(const TSelector &); TSelector::operator=TSelector & operator=(const TSelector &); TSelector::fInputTList * fInputList of objects available during processing.Definition TSelector.h:41; TSelector::ProcessFillvirtual void ProcessFill(Long64_t)This method is called for all selected entries.Definition TSelector.cxx:330; TSelector::EAbortEAbortDefinition TSelector.h:34; TSelector::kAbortFile@ kAbortFileDefinition TSelector.h:34; TSelector::kAbortProcess@ kAbortProcessDefinition TSelector.h:34; TSelector::kContinue@ kContinueDefinition TSelector.h:34; TSelector::Initvirtual void Init(TTree *)Definition TSelector.h:53; TSelector::Versionvirtual int Version() constDefinition TSelector.h:52; TSelector::fOptionTString fOptionOption given to TTree::Process.Definition TSelector.h:39; TSelector::ProcessCutvirtual bool ProcessCut(Long64_t)This method is called before processing entry.Definition TSelector.cxx:313; TSelector::Processvirtual bool Process(Long64_t)The Process() function is called for each entry in the tree (or possibly keyed object in the case o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8h_source.html:5286,avail,available,5286,doc/master/TSelector_8h_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8h_source.html,1,['avail'],['available']
Availability,"eDelete; };. protected:. Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; const TGMdiMainFrame*fMainpointer to MDI main frame; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMdiContainer.html:15009,mask,mask,15009,root/html528/TGMdiContainer.html,https://root.cern,https://root.cern/root/html528/TGMdiContainer.html,4,['mask'],['mask']
Availability,"eElement::DisableListElements(Bool_t rnr_self = kFALSE, Bool_t rnr_children = kFALSE)MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; TEveProjectable::ProjList_iTEveProjectable::EndProjecteds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); voidFillPointSet(TEvePointSet* ps) const; TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackPropagator.html:5490,error,error,5490,root/html528/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html528/TEveTrackPropagator.html,6,['error'],['error']
Availability,"eErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations). The result is; placed into size+1 column of the matrix.; according to sigma of peaks.; Function parameters:; -a-matrix with dimension size*(size+4) //; -size-number of rows of the matrix. Double_t Shape2(Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t* parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by). AUXILIARY FUNCTION.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:22693,error,error,22693,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,4,['error'],['error']
Availability,"eFeedback(const char* name); Int_tRemoveIncludePath(const char* incpath, Bool_t onClient = kFALSE); virtual Bool_tRequestStagingDataSet(const char* dataset); static voidReset(const char* url, Bool_t hard = kFALSE); voidTObject::ResetBit(UInt_t f); static voidResetEnvVars(); voidResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent)SIGNAL ; voidResetProgressDialogStatus(); Int_tRetrieve(Int_t query, const char* path = 0); Int_tRetrieve(const char* queryref, const char* path = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; Int_tSavePerfTree(const char* pf = 0, const char* qref = 0); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Bool_tSendingLogToWindow() const; voidSendLogToWindow(Bool_t mode); voidSetActive(Bool_t = kTRUE); virtual voidSetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDataPoolUrl(const char* url); virtual Int_tSetDataSetTreeName(const char* dataset, const char* treename); voidSetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInputDataFile(const char* datafile); voidSetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); voidSetManager(TProofMgr* mgr); voidSetMaxDrawQueries(Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tSetParallel(Int_t nodes = -1, Bool_t random = kFALSE); voidSetParameter(const char* par, const char* value); voidSetParameter(const char* par, Int_t value); voidSetParameter(const char* par, Long_t value); voidSetParameter(const char* par, Long64_t value); voidSetParameter(const char* par, Double_t value); voidSetPerfTree(const char* pf = ""perftree.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:15746,mask,mask,15746,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['mask'],['mask']
Availability,"eFitParams::fbkgave. protected . Average of F(bkg) ; Definition at line 248 of file RuleFitParams.h. ◆ fbkgrms. Double_t TMVA::RuleFitParams::fbkgrms. protected . Rms of F(bkg) ; Definition at line 249 of file RuleFitParams.h. ◆ fFstar. std::vector<Double_t> TMVA::RuleFitParams::fFstar. protected . vector of F*() - filled in CalcFStar() ; Definition at line 234 of file RuleFitParams.h. ◆ fFstarMedian. Double_t TMVA::RuleFitParams::fFstarMedian. protected . median value of F*() using ; Definition at line 235 of file RuleFitParams.h. ◆ fGDCoefLinTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefLinTst. protected . linear coeffs - one per tau ; Definition at line 218 of file RuleFitParams.h. ◆ fGDCoefTst. std::vector< std::vector<Double_t> > TMVA::RuleFitParams::fGDCoefTst. protected . rule coeffs - one per tau ; Definition at line 217 of file RuleFitParams.h. ◆ fGDErrScale. Double_t TMVA::RuleFitParams::fGDErrScale. protected . stop scan at error = scale*errmin ; Definition at line 230 of file RuleFitParams.h. ◆ fGDErrTst. std::vector<Double_t> TMVA::RuleFitParams::fGDErrTst. protected . error rates per tau ; Definition at line 215 of file RuleFitParams.h. ◆ fGDErrTstOK. std::vector<Char_t> TMVA::RuleFitParams::fGDErrTstOK. protected . error rate is sufficiently low <— stores boolean ; Definition at line 216 of file RuleFitParams.h. ◆ fGDNPathSteps. Int_t TMVA::RuleFitParams::fGDNPathSteps. protected . number of path steps ; Definition at line 229 of file RuleFitParams.h. ◆ fGDNTau. UInt_t TMVA::RuleFitParams::fGDNTau. protected . number of tau-paths - calculated in SetGDTauPrec ; Definition at line 222 of file RuleFitParams.h. ◆ fGDNTauTstOK. UInt_t TMVA::RuleFitParams::fGDNTauTstOK. protected . number of tau in the test-phase that are ok ; Definition at line 221 of file RuleFitParams.h. ◆ fGDNtuple. TTree* TMVA::RuleFitParams::fGDNtuple. protected . Gradient path ntuple, contains params for each step along the path. ; Definition at line 237 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:21257,error,error,21257,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['error'],['error']
Availability,"eFrame* main); TGHorizontalLayout(const TGHorizontalLayout&); ~TGHorizontalLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHorizontalLayout.html:2349,error,error,2349,root/html528/TGHorizontalLayout.html,https://root.cern,https://root.cern/root/html528/TGHorizontalLayout.html,4,['error'],['error']
Availability,"eFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates C++ code fragment of the identity transform for inclusion in standalone C++ class ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  the identity does not need to be prepared, only calculate the normalization ;  ; virtual void ReadFromXML (void *trfnode);  reding the identity transformation from XML ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  identity transform returns same event ;  ; void WriteTransformationToStream (std::ostream &) const;  ;  Public Member Functions inherited from TMVA::VariableTransformBase;  VariableTransformBase (DataSetInfo &dsi, Types::EVariableTransform tf, const TString &trfName);  standard constructor ;  ; virtual ~VariableTransformBase (void);  ; virtual void CountVariableTypes (UInt_t &nvars, UInt_t &ntgts, UInt_t &nspcts) const;  count variables, targets and spectators ;  ; virtual Bool_t GetInput (const Event *event, std::vector< Float_t > &input, std::vector< Char_t > &mask, Bool_t backTransform=kFALSE) const;  select the values from the event ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; TString GetShortName () const;  ; virtual std::vector< TString > * GetTransformationStrings (Int_t cls) const;  TODO --> adapt to variable,target,spectator selection default transformation output --> only indicate that transformation occurred. ;  ; Types::EVariableTransform GetVariableTransform () const;  ; Bool_t IsCreated () const;  ; Bool_t IsEnabled () const;  ; Bool_t IsNormalised () const;  ; MsgLogger & Log () const;  ; virtual void PrintTransformation (std::ostream &);  ; virtual void SelectInput (const TString &inputVariables, Bool_t putIntoVariables=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html:2157,mask,mask,2157,doc/master/classTMVA_1_1VariableIdentityTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html,1,['mask'],['mask']
Availability,"eHandler(TGWindow* w); TGIdleHandler(const TGIdleHandler&); virtual~TGIdleHandler(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tHandleEvent(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGIdleHandler.html:1440,error,error,1440,root/html528/TGIdleHandler.html,https://root.cern,https://root.cern/root/html528/TGIdleHandler.html,4,['error'],['error']
Availability,"eMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Protected Attributes; Int_t fKCur;  ; Int_t fKOrd;  ; Int_t fNIn;  ; Int_t fReady;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1K.html:45711,error,errors,45711,doc/master/classTH1K.html,https://root.cern,https://root.cern/doc/master/classTH1K.html,1,['error'],['errors']
Availability,"eName(). static const char * TMVA::MinuitWrapper::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 69 of file MinuitWrapper.h. ◆ Eval(). Int_t TMVA::MinuitWrapper::Eval ; (; Int_t ; , . Double_t * ; , . Double_t & ; f, . Double_t * ; par, . Int_t ;  . ). virtual . std::vector<Double_t> parameters( npar ); ; Reimplemented from TMinuit.; Definition at line 51 of file MinuitWrapper.cxx. ◆ ExecuteCommand(). Int_t TMVA::MinuitWrapper::ExecuteCommand ; (; const char * ; command, . Double_t * ; args, . Int_t ; nargs . ). Execute a fitter command; command : command string args : list of nargs command arguments. ; Definition at line 64 of file MinuitWrapper.cxx. ◆ GetErrors(). Int_t TMVA::MinuitWrapper::GetErrors ; (; Int_t ; ipar, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; globcc . ). return current errors for a parameter . ipar : parameter number; eplus : upper error; eminus : lower error; eparab : parabolic error; globcc : global correlation coefficient . Definition at line 105 of file MinuitWrapper.cxx. ◆ GetStats(). Int_t TMVA::MinuitWrapper::GetStats ; (; Double_t & ; amin, . Double_t & ; edm, . Double_t & ; errdef, . Int_t & ; nvpar, . Int_t & ; nparx . ). return global fit parameters . amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters . Definition at line 90 of file MinuitWrapper.cxx. ◆ IsA(). virtual TClass * TMVA::MinuitWrapper::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 69 of file MinuitWrapper.h. ◆ SetFitterTarget(). void TMVA::MinuitWrapper::SetFitterTarget ; (; IFitterTarget & ; target). inline . Definition at line 54 of file MinuitWrapper.h. ◆ SetParameter(). Int_t TMVA::MinuitWrapper::SetParameter ; (; Int_t ; ipar, . const char * ; parname, . Double_t ; value, . Double_t ; verr, . Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html:26415,error,error,26415,doc/master/classTMVA_1_1MinuitWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html,3,['error'],['error']
Availability,"eName.empty()) {; 3126 // The type is not known to the interpreter.; 3127 // We must not error out here, but if/when this column is used in jitted code; 3128 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3129 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3130 }; 3131 ; 3132 using NewCol_t = RDFDetail::RDefine<F, DefineType>;; 3133 auto newColumn = std::make_shared<NewCol_t>(name, retTypeName, std::forward<F>(expression), validColumnNames,; 3134 fColRegister, *fLoopManager);; 3135 ; 3136 RDFInternal::RColumnRegister newCols(fColRegister);; 3137 newCols.AddDefine(std::move(newColumn));; 3138 ; 3139 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 3140 ; 3141 return newInterface;; 3142 }; 3143 ; 3144 // This overload is chosen when the callable passed to Define or DefineSlot returns void.; 3145 // It simply fires a compile-time error. This is preferable to a static_assert in the main `Define` overload because; 3146 // this way compilation of `Define` has no way to continue after throwing the error.; 3147 template <typename F, typename DefineType, typename RetType = typename TTraits::CallableTraits<F>::ret_type,; 3148 bool IsFStringConv = std::is_convertible<F, std::string>::value,; 3149 bool IsRetTypeDefConstr = std::is_default_constructible<RetType>::value>; 3150 std::enable_if_t<!IsFStringConv && !IsRetTypeDefConstr, RInterface<Proxied, DS_t>>; 3151 DefineImpl(std::string_view, F, const ColumnNames_t &, const std::string &); 3152 {; 3153 static_assert(std::is_default_constructible<typename TTraits::CallableTraits<F>::ret_type>::value,; 3154 ""Error in `Define`: type returned by expression is not default-constructible"");; 3155 return *this; // never reached; 3156 }; 3157 ; 3158 template <typename... ColumnTypes>; 3159 RResultPtr<RInterface<RLoopManager>> SnapshotImpl(std::string_view fullTreeName, std::string_view filename,; 3160 const ColumnNames_t &columnList, const RSnapshotOptions &options); 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:178922,error,error,178922,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['error']
Availability,"eParameter (Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit);  Define a parameter. ;  ; virtual void DeleteArrays ();  Delete internal Minuit arrays. ;  ; virtual Int_t Eval (Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag);  Evaluate the minimisation function Input parameters: ;  ; virtual Int_t FixParameter (Int_t parNo);  fix a parameter ;  ; Int_t GetMaxIterations () const;  ; TMethodCall * GetMethodCall () const;  ; virtual Int_t GetNumFixedPars () const;  returns the number of currently fixed parameters ;  ; virtual Int_t GetNumFreePars () const;  returns the number of currently free parameters ;  ; virtual Int_t GetNumPars () const;  returns the total number of parameters that have been defined as fixed or free. ;  ; TObject * GetObjectFit () const;  ; virtual Int_t GetParameter (Int_t parNo, Double_t &currentValue, Double_t &currentError) const;  return parameter value and error ;  ; virtual TObject * GetPlot () const;  ; Int_t GetStatus () const;  ; TClass * IsA () const override;  ; virtual Int_t Migrad ();  invokes the MIGRAD minimizer ;  ; virtual void mnamin ();  Initialize AMIN. ;  ; virtual void mnbins (Double_t a1, Double_t a2, Int_t naa, Double_t &bl, Double_t &bh, Int_t &nb, Double_t &bwid);  Compute reasonable histogram intervals. ;  ; virtual void mncalf (Double_t *pvec, Double_t &ycalf);  Transform FCN to find further minima. ;  ; virtual void mncler ();  Resets the parameter list to UNDEFINED. ;  ; virtual void mncntr (Int_t ke1, Int_t ke2, Int_t &ierrf);  Print function contours in two variables, on line printer. ;  ; virtual void mncomd (const char *crdbin, Int_t &icondn);  Reads a command string and executes. ;  ; virtual void mncont (Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:16553,error,error,16553,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['error']
Availability,"ePoly(Double_t x, Double_t y); ~TSplinePoly(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidGetKnot(Double_t& x, Double_t& y) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSplinePoly.html:1470,error,error,1470,root/html528/TSplinePoly.html,https://root.cern,https://root.cern/root/html528/TSplinePoly.html,4,['error'],['error']
Availability,"eRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& b); Stream an object of class TGraphAsymmErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphAsymmErrors.html:21757,error,error,21757,root/html528/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html528/TGraphAsymmErrors.html,3,['error'],['error']
Availability,"eReader::Show(NTupleSize_t index, std::ostream &output); 209{; 210 auto reader = GetDisplayReader();; 211 const auto &entry = reader->GetModel().GetDefaultEntry();; 212 ; 213 reader->LoadEntry(index);; 214 output << ""{"";; 215 for (auto iValue = entry.begin(); iValue != entry.end();) {; 216 output << std::endl;; 217 RPrintValueVisitor visitor(*iValue, output, 1 /* level */);; 218 iValue->GetField().AcceptVisitor(visitor);; 219 ; 220 if (++iValue == entry.end()) {; 221 output << std::endl;; 222 break;; 223 } else {; 224 output << "","";; 225 }; 226 }; 227 output << ""}"" << std::endl;; 228}; 229 ; 230const ROOT::Experimental::RNTupleDescriptor &ROOT::Experimental::RNTupleReader::GetDescriptor(); 231{; 232 auto descriptorGuard = fSource->GetSharedDescriptorGuard();; 233 if (!fCachedDescriptor || fCachedDescriptor->GetGeneration() != descriptorGuard->GetGeneration()); 234 fCachedDescriptor = descriptorGuard->Clone();; 235 return *fCachedDescriptor;; 236}; 237 ; 238ROOT::Experimental::DescriptorId_t ROOT::Experimental::RNTupleReader::RetrieveFieldId(std::string_view fieldName) const; 239{; 240 auto fieldId = fSource->GetSharedDescriptorGuard()->FindFieldId(fieldName);; 241 if (fieldId == kInvalidDescriptorId) {; 242 throw RException(R__FAIL(""no field named '"" + std::string(fieldName) + ""' in RNTuple '"" +; 243 fSource->GetSharedDescriptorGuard()->GetName() + ""'""));; 244 }; 245 return fieldId;; 246}; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RFieldVisitor.hxx; RField.hxx; RNTupleImtTaskScheduler.hxx; RNTupleModel.hxx; RNTupleReader.hxx; RNTuple.hxx; RPageSourceFriends.hxx; RPageStorageFile.hxx; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleReader_8cxx_source.html:10236,error,error,10236,doc/master/RNTupleReader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html,1,['error'],['error']
Availability,"eRegionAcceptanceRegion(const RooStats::AcceptanceRegion&); RooStats::AcceptanceRegionAcceptanceRegion(Int_t lu, Double_t ll, Double_t ul); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetLookupIndex(); Double_tGetLowerLimit(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetUpperLimit(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__AcceptanceRegion.html:1501,error,error,1501,root/html526/RooStats__AcceptanceRegion.html,https://root.cern,https://root.cern/root/html526/RooStats__AcceptanceRegion.html,7,['error'],['error']
Availability,"eReturns the combined error along Y at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1137; TGraphAsymmErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphAsymmErrors.cxx:1104; TGraphAsymmErrors::Dividevirtual void Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total.Definition TGraphAsymmErrors.cxx:588; TGraphAsymmErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set.Definition TGraphAsymmErrors.cxx:1061; TGraphAsymmErrors::Classstatic TClass * Class(); TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)Set ex and ey values for point pointed by the mouse.Definition TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on X.Definition TGraphAsymmErrors.cxx:1151; TGraphAsymmErrors::fEYhighDouble_t * fEYhigh[fNpoints] array of Y high errorsDefinition TGraphAsymmErrors.h:32; TGraphAsymmErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphAsymmErrors.cxx:1033; TGraphAsymmErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.)Add a point with asymmetric errorbars to the graph.Definition TGraphAsymmErrors.cxx:451; TGraphAsymmErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphAsymmErrors.cxx:977; TGraphAsymmErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exl)Set EXlow for point i.Definition TGraphAsymmErrors.cxx:1348; TGraphAsymmErrors::St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:59906,error,error,59906,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['error']
Availability,"eSet zero values for point arrays in the range [begin, end]Definition TGraphAsymmErrors.cxx:1104; TGraphAsymmErrors::Dividevirtual void Divide(const TH1 *pass, const TH1 *total, Option_t *opt=""cp"")Fill this TGraphAsymmErrors by dividing two 1-dimensional histograms pass/total.Definition TGraphAsymmErrors.cxx:588; TGraphAsymmErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set.Definition TGraphAsymmErrors.cxx:1061; TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)Set ex and ey values for point pointed by the mouse.Definition TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on X.Definition TGraphAsymmErrors.cxx:1151; TGraphAsymmErrors::fEYhighDouble_t * fEYhigh[fNpoints] array of Y high errorsDefinition TGraphAsymmErrors.h:32; TGraphAsymmErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphAsymmErrors.cxx:1033; TGraphAsymmErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0.)Add a point with asymmetric errorbars to the graph.Definition TGraphAsymmErrors.cxx:451; TGraphAsymmErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphAsymmErrors.cxx:977; TGraphAsymmErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exl)Set EXlow for point i.Definition TGraphAsymmErrors.cxx:1348; TGraphAsymmErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Double_t eyh)Set EYhigh for point i.Definition TGraphAsymmErrors.cxx:1390; TGraphAsymmErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html:9078,error,errors,9078,doc/master/TGraphAsymmErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html,1,['error'],['errors']
Availability,"eSize will no longer reset the list of branches to be cached (either set or previously learnt) nor restart the learning phase. The learning phase is restarted when a new cache is created, e.g. after having removed a cache with SetCacheSize(0).; TSelectorDraw; The axis titles in case of a x:y:z plot with the option COLZ were not correct.; TParallelCoordVar; Change the format used to print the variables limit for ||-Coord to %g. It was %6.4f before.; Histogram Libraries; TFormula. New version of the TFormula class based on Cling. Formula expressions are now used to create functions which are passed to Cling to be Just In Time compiled. The expression is therefore compiled using Clang/LLVVM which will give execution time as compiled code and in addition correctness of the result obtained.; This class is not 100% backward compatible with the old TFormula class, which is still available in ROOT as =ROOT::v5::TFormula=. Some of the TFormula member funtions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class. On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; TFormula is not anymore a base class for TF1.; The new TFormula allows to defines the parameter names directly in the syntax. Example:. TFormula f(""f"",""f1"",""[constant]+[slope]*x"");. New pre-defined functions are provided, as: crystalball for the Crystal-Ball function, cheb0,1,...10 for the Chebyshev polynomials. TF1. Change of its inheritance structure. TF1 has not anymore TFormula as a base class, so this code. TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; it is not valid anymore. The equivalent correct code is now; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:14888,avail,available,14888,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,2,['avail'],['available']
Availability,"eTCollectionvirtual; Compare(const TObject *obj) const overrideTCollectionvirtual; Contains(const char *name) constTCollectioninline; Contains(const TObject *obj) constTCollectioninline; Copy(TObject &object) constTObjectvirtual; DeclFileName()TSeqCollectioninlinestatic; Delete(Option_t *option="""") override=0TCollectionpure virtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTCollectionvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() const overrideTCollectionvirtual; EDeprecatedStatusBits enum nameTObject; EmptyGarbageCollection()TCollectionstatic; end() constTCollectioninline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTCollectionprotected; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fgCurrentCollectionTCollectionprivatestatic; fgDtorOnlyTObjectprivatestatic; fgEmptyingGarbageTCollectionprivatestatic; fgGarbageCollectionTCollectionprivatestatic; fgGarbageStackTCollectionprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) const overrideTCollectionvirtual; FindObject(const TObject *obj) const overrideTCollectionvirtual; First() const =0TSeqCollectionpure virtual; fNameTCollectionprotected; fSizeTCollectionprotected; fSortedTSeqCollectionprotected; fUniqueIDTObjectprivate; GarbageCollect(TObject *obj)TCollectionstatic; GetCollectionEntryName(TObject *entry) constTCollectionprotectedvirtual; GetCurrentCollection()TCollectionstatic; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetEntries() constTCollectioninlinevi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSeqCollection-members.html:2427,error,error,2427,doc/master/classTSeqCollection-members.html,https://root.cern,https://root.cern/doc/master/classTSeqCollection-members.html,2,['error'],['error']
Availability,"eTGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g)TGraphprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFTGraphQQprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE)TGraphprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; FitPanel()TGraphvirtual; fLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphQQ-members.html:2946,error,error,2946,doc/master/classTGraphQQ-members.html,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html,2,['error'],['error']
Availability,"eTGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g)TGraphprotectedvirtual; Draw(Option_t *chopt="""") overrideTGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE)TGraphprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; FitPanel()TGraphvirtual; fLineColorTAttLineprotec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph-members.html:2934,error,error,2934,doc/master/classTGraph-members.html,https://root.cern,https://root.cern/doc/master/classTGraph-members.html,2,['error'],['error']
Availability,"eTraits.hxx>; 26 ; 27#include <TGenericClassInfo.h>; 28 ; 29#include <algorithm>; 30#include <array>; 31#include <cstddef>; 32#include <iostream>; 33#include <memory>; 34#include <string>; 35#include <type_traits>; 36#include <typeinfo>; 37#include <vector>; 38 ; 39class TClass;; 40class TEnum;; 41class TObject;; 42class TVirtualStreamerInfo;; 43 ; 44namespace ROOT {; 45 ; 46class TSchemaRule;; 47 ; 48namespace Experimental {; 49 ; 50class REntry;; 51 ; 52namespace Detail {; 53class RFieldVisitor;; 54} // namespace Detail; 55 ; 56/// The container field for an ntuple model, which itself has no physical representation.; 57/// Therefore, the zero field must not be connected to a page source or sink.; 58class RFieldZero final : public RFieldBase {; 59protected:; 60 std::unique_ptr<RFieldBase> CloneImpl(std::string_view newName) const final;; 61 void ConstructValue(void *) const final {}; 62 ; 63public:; 64 RFieldZero() : RFieldBase("""", """", ENTupleStructure::kRecord, false /* isSimple */) {}; 65 ; 66 using RFieldBase::Attach;; 67 size_t GetValueSize() const final { return 0; }; 68 size_t GetAlignment() const final { return 0; }; 69 ; 70 void AcceptVisitor(Detail::RFieldVisitor &visitor) const final;; 71};; 72 ; 73/// Used in RFieldBase::Check() to record field creation failures.; 74/// Also used when deserializing a field that contains unknown values that may come from; 75/// future RNTuple versions (e.g. an unknown Structure); 76class RInvalidField final : public RFieldBase {; 77 std::string fError;; 78 ; 79protected:; 80 std::unique_ptr<RFieldBase> CloneImpl(std::string_view newName) const final; 81 {; 82 return std::make_unique<RInvalidField>(newName, GetTypeName(), fError);; 83 }; 84 void ConstructValue(void *) const final {}; 85 ; 86public:; 87 RInvalidField(std::string_view name, std::string_view type, std::string_view error); 88 : RFieldBase(name, type, ENTupleStructure::kLeaf, false /* isSimple */), fError(error); 89 {; 90 }; 91 ; 92 const std::string &GetError()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RField_8hxx_source.html:2390,failure,failures,2390,doc/master/RField_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RField_8hxx_source.html,1,['failure'],['failures']
Availability,"eVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_tRooAbsTestStatistic::_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; RooRealVar*_yvarY variable if so designated; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooXYChi2Var(); coverity[UNINIT_CTOR]. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:36956,error,error,36956,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,8,['error'],['error']
Availability,"eVar) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTPaveLabel::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual voidDrawClasses(const char* classes = ""this"")MENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTPaveLabel::DrawPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* label, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTPave::GetBorderSize() const; TClassTree*GetClassTree() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveLabel::GetLabel() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Option_t*TPave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaveClass.html:2332,error,error,2332,root/html528/TPaveClass.html,https://root.cern,https://root.cern/root/html528/TPaveClass.html,3,['error'],['error']
Availability,"eVar) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTPave::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTPaveLabel::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual voidDrawClasses(const char* classes = ""this"")MENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPave::DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize = 4, Option_t* option = ""br""); virtual voidTPaveLabel::DrawPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* label, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPave::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Int_tTPave::GetBorderSize() const; TClassTree*GetClassTree() const; Double_tTPave::GetCornerRadius() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; const char*TPaveLabel::GetLabel() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Option_t*TPave::GetName() const; virtual ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveClass.html:2332,error,error,2332,root/html534/TPaveClass.html,https://root.cern,https://root.cern/root/html534/TPaveClass.html,3,['error'],['error']
Availability,"eWrite(); TFileCacheWrite(TFile* file, Int_t buffersize); virtual~TFileCacheWrite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Bool_tFlush(); virtual Int_tGetBytesInCache() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileCacheWrite.html:1883,error,error,1883,root/html528/TFileCacheWrite.html,https://root.cern,https://root.cern/root/html528/TFileCacheWrite.html,4,['error'],['error']
Availability,"e] entry bufferDefinition TH1.h:108; TH1::GetEffectiveEntriesvirtual Double_t GetEffectiveEntries() constNumber of effective entries of the histogram.Definition TH1.cxx:4448; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Multiplyvirtual Bool_t Multiply(TF1 *f1, Double_t c1=1)Performs the operation:Definition TH1.cxx:6049; TH1::kXaxis@ kXaxisDefinition TH1.h:73; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TH1::kZaxis@ kZaxisDefinition TH1.h:75; TH1::kYaxis@ kYaxisDefinition TH1.h:74; TH1::fNcellsInt_t fNcellsNumber of bins(1D), cells (2D) +U/Overflows.Definition TH1.h:89; TH1::Copyvoid Copy(TObject &hnew) const overrideCopy this histogram structure to newth1.Definition TH1.cxx:2671; TH1::fTsumwDouble_t fTsumwTotal Sum of weights.Definition TH1.h:96; TH1::fTsumw2Double_t fTsumw2Total Sum of squares of weights.Definition TH1.h:97; TH1::Classstatic TClass * Class(); TH1::DoIntegralvirtual Double_t DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) constInternal function compute integral and optionally the error between the limits specified by the bin n...Definition TH1.cxx:7977; TH1::fTsumwx2Double_t fTsumwx2Total Sum of weight*X*X.Definition TH1.h:99; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetDimensionvirtual Int_t GetDimension() constDefinition TH1.h:283; TH1::Streamervoid Streamer(TBuffer &) overrideStream a class object.Definition TH1.cxx:6933; TH1::kIsNotW@ kIsNotWHistogram is forced to be not weighted even when the histogram is filled with weighted.Definition TH1.h:172; TH1::CanExtendAllAxesvirtual Bool_t CanExtendAllAxes(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:193156,error,error,193156,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['error']
Availability,"e_ifo);; 401 DEBUG_ASSERT(mach_status == KERN_SUCCESS);; 402 ; 403 /* appease ""unused variable"" warning for release builds */; 404 (void)mach_status;; 405 ; 406 clock_start_time = now;; 407 }; 408 ; 409 now = (uint64_t)((double)(now - clock_start_time); 410 * (double)timebase_ifo.numer; 411 / (double)timebase_ifo.denom);; 412 ; 413 t->tv_sec = now / 1000000000;; 414 t->tv_nsec = now % 1000000000;; 415 return 0;; 416 }; 417 return -1; /* EINVAL - Clock ID is unknown */; 418}; 419 ; 420/* if clock_gettime is declared, then __CLOCK_AVAILABILITY will be defined */; 421#if defined(__CLOCK_AVAILABILITY); 422/* If we compiled with Mac OSX 10.12 or later, then clock_gettime will be; 423 * declared but it may be NULL at runtime. So we need to check before using; 424 * it. */; 425static int; 426_civet_safe_clock_gettime(int clk_id, struct timespec *t); 427{; 428 if (clock_gettime) {; 429 return clock_gettime(clk_id, t);; 430 }; 431 return _civet_clock_gettime(clk_id, t);; 432}; 433#define clock_gettime _civet_safe_clock_gettime; 434#else; 435#define clock_gettime _civet_clock_gettime; 436#endif; 437 ; 438#endif; 439 ; 440 ; 441#if !defined(_WIN32); 442/* Unix might return different error codes indicating to try again.; 443 * For Linux EAGAIN==EWOULDBLOCK, maybe EAGAIN!=EWOULDBLOCK is history from; 444 * decades ago, but better check both and let the compile optimize it. */; 445#define ERROR_TRY_AGAIN(err) \; 446 (((err) == EAGAIN) || ((err) == EWOULDBLOCK) || ((err) == EINTR)); 447#endif; 448 ; 449#if defined(USE_ZLIB); 450#include ""zconf.h""; 451#include ""zlib.h""; 452#endif; 453 ; 454 ; 455/********************************************************************/; 456/* CivetWeb configuration defines */; 457/********************************************************************/; 458 ; 459/* Maximum number of threads that can be configured.; 460 * The number of threads actually created depends on the ""num_threads""; 461 * configuration parameter, but this is the upper limit. */; 462",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:15524,error,error,15524,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"e_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::GetEZ ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 47 of file TGraph2DErrors.h. ◆ GetXmaxE(). Double_t TGraph2DErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 241 of file TGraph2DErrors.cxx. ◆ GetXminE(). Double_t TGraph2DErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 252 of file TGraph2DErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 263 of file TGraph2DErrors.cxx. ◆ GetYminE(). Double_t TGraph2DErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Pri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:32167,error,errors,32167,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['errors']
Availability,"e_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< TArrayF > eyL, std::vector< TArrayF > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne=1);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:9412,error,errors,9412,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"e_t >::iterator ; end . ). private . formula interpretation ; Definition at line 499 of file MethodFDA.cxx. ◆ IsA(). virtual TClass * TMVA::MethodFDA::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodBase.; Definition at line 154 of file MethodFDA.h. ◆ MakeClassSpecific(). void TMVA::MethodFDA::MakeClassSpecific ; (; std::ostream & ; fout, . const TString & ; className . ); const. protectedvirtual . write FDA-specific classifier response ; Reimplemented from TMVA::MethodBase.; Definition at line 674 of file MethodFDA.cxx. ◆ PrintResults(). void TMVA::MethodFDA::PrintResults ; (; const TString & ; fitter, . std::vector< Double_t > & ; pars, . const Double_t ; estimator . ); const. private . display fit parameters check maximum length of variable name ; Definition at line 421 of file MethodFDA.cxx. ◆ ProcessOptions(). void TMVA::MethodFDA::ProcessOptions ; (; ). privatevirtual . the option string is decoded, for available options see ""DeclareOptions"" ; Implements TMVA::MethodBase.; Definition at line 240 of file MethodFDA.cxx. ◆ ReadWeightsFromStream() [1/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; std::istream & ; ). virtual . Implements TMVA::MethodBase. ◆ ReadWeightsFromStream() [2/3]. void TMVA::MethodFDA::ReadWeightsFromStream ; (; std::istream & ; i). virtual . read back the training results from a file (stream) ; Implements TMVA::MethodBase.; Definition at line 602 of file MethodFDA.cxx. ◆ ReadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodFDA::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . read coefficients from xml weight file ; Implements TMVA::MethodBase.; Definition at line 635 of file MethodFDA.cxx. ◆ Streamer(). virtual void TMVA::MethodFDA::Streamer ; (; TBuffer & ; ). virtual . Reim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html:36588,avail,available,36588,doc/master/classTMVA_1_1MethodFDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html,1,['avail'],['available']
Availability,"e_t E = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*GetMaxPowers() const; Double_tGetMaxQuantity(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:14746,error,error,14746,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['error'],['error']
Availability,"e_t E = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """")MENU ; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* = ""d""); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(const Double_t* x, const Double_t* coeff = 0) const; virtual Double_tEvalError(const Double_t* x, const Double_t* coeff = 0) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindParameterization(Option_t* option = """")MENU ; virtual voidFit(Option_t* option = """")MENU ; Double_tGetChi2() const; const TVectorD*GetCoefficients() const; const TVectorD*GetCoefficientsRMS() const; const TMatrixD*GetCorrelationMatrix() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; Int_t*GetFunctionCodes() const; const TMatrixD*GetFunctions() const; virtual TList*GetHistograms() const; virtual const char*TObject::GetIconName() const; Double_tGetMaxAngle() const; Int_tGetMaxFunctions() const; Int_t*Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:14960,error,error,14960,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['error'],['error']
Availability,"e_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphMultiErrors by a constant c1.Definition TGraphMultiErrors.cxx:1766; TGraphMultiErrors::SetLineColorAlphavirtual void SetLineColorAlpha(Int_t e, Color_t lcolor, Float_t lalpha)Set Line Color and Alpha of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2084; TGraphMultiErrors::GetEXlowDouble_t * GetEXlow() const overrideDefinition TGraphMultiErrors.h:141; TGraphMultiErrors::CalcYErrorsSumvoid CalcYErrorsSum() constRecalculates the summed y error arrays.Definition TGraphMultiErrors.cxx:822; TGraphMultiErrors::~TGraphMultiErrors~TGraphMultiErrors() overrideTGraphMultiErrors default destructor.Definition TGraphMultiErrors.cxx:697; TGraphMultiErrors::SetAttLinevirtual void SetAttLine(Int_t e, TAttLine *tal)Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2029; TGraphMultiErrors::fEyHSumDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1577; TGraphMultiErrors::DeleteYErrorvirtual void DeleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::GetNYErrorsInt_t GetNYErrors() constDefinition TGraphMultiErrors.h:166; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:22410,error,errors,22410,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['errors']
Availability,"e_t dc2 = 0); return an histogram containing the asymmetry of this histogram with h2,; where the asymmetry is defined as:. Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this. works for 1D, 2D, etc. histograms; c2 is an optional argument that gives a relative weight between the two; histograms, and dc2 is the error on this weight. This is useful, for example,; when forming an asymmetry between two histograms from 2 different data sets that; need to be normalized to each other in some way. The function calculates; the errors asumming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)). example: assuming 'h1' and 'h2' are already filled. h3 = h1->GetAsymmetry(h2). then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; h1 and h2 are left intact. Note that it is the user's responsibility to manage the created histogram. code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun. clone the histograms so top and bottom will have the; correct dimensions:; Sumw2 just makes sure the errors will be computed properly; when we form sums and ratios below. Int_t GetDefaultBufferSize(); static function; return the default buffer size for automatic histograms; the parameter fgBufferSize may be changed via SetDefaultBufferSize. Bool_t GetDefaultSumw2(); static function; return kTRUE if TH1::Sumw2 must be called when creating new histograms.; see TH1::SetDefaultSumw2. Double_t GetEntries() const; return the current number of entries. Double_t GetEffectiveEntries() const; number of effective entries of the histogram,; i.e. the number of unweighted entries a histogram would need to; have the same statistical power as this histogram with possibly; weighted entries (i.e. <= TH1::GetEntries()). char * GetObjectInfo(Int_t px, Int_t py) const; Redefines TObject::GetObjectInfo.; Displays the histogram info (bin number, contents, integral up to bin; corresponding to cursor position px,py. TVirtualHistPainter * GetPainter(Option_t* option = """"); return pointer to pai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:82988,error,errors,82988,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['error'],['errors']
Availability,"e_t dc2 = 0); return an histogram containing the asymmetry of this histogram with h2,; where the asymmetry is defined as:. Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this. works for 1D, 2D, etc. histograms; c2 is an optional argument that gives a relative weight between the two; histograms, and dc2 is the error on this weight. This is useful, for example,; when forming an asymmetry between two histograms from 2 different data sets that; need to be normalized to each other in some way. The function calculates; the errors asumming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)). example: assuming 'h1' and 'h2' are already filled. h3 = h1->GetAsymmetry(h2). then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; h1 and h2 are left intact. Note that it is the user's responsibility to manage the created histogram. code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun. clone the histograms so top and bottom will have the; correct dimensions:; Sumw2 just makes sure the errors will be computed properly; when we form sums and ratios below. Int_t GetDefaultBufferSize(); static function; return the default buffer size for automatic histograms; the parameter fgBufferSize may be changed via SetDefaultBufferSize. Bool_t GetDefaultSumw2(); static function; return kTRUE if TH1::Sumw2 must be called when creating new histograms.; see TH1::SetDefaultSumw2. Double_t GetEntries() const; return the current number of entries. Double_t GetEffectiveEntries() const; number of effective entries of the histogram,; neff = (Sum of weights )^2 / (Sum of weight^2 ); In case of an unweighted histogram this number is equivalent to the; number of entries of the histogram.; For a weighted histogram, this number corresponds to the hypotetical number of unweighted entries; a histogram would need to have the same statistical power as this weighted histogram.; Note: The underflow/overflow are included if one has set the TH1::StatOverFlows flag; and if the statistics",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:87992,error,errors,87992,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['errors']
Availability,"e_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); virtual~TGeoGenTrans(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoMatrix::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); voidTGeoMatrix::GetHomogenousMatrix(Double_t* hmat) const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; char*TGeoMatrix::GetPointerName() const; TGeoRotation*TGeoCombiTrans::GetRotation() const; virtual const Double_t*TGeoCombiTrans::GetRotationMatrix() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGenTrans.html:8296,error,error,8296,root/html528/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html528/TGeoGenTrans.html,4,['error'],['error']
Availability,"e_t minimum = 0) override {SetMinRadial(minimum);}; 47 void SetMaxPolar(Double_t maximum = 6.28318530717958623); //*MENU*; 48 void SetMinPolar(Double_t minimum = 0); //*MENU*; 49 void SetOptionAxis(Bool_t opt) {fOptionAxis = opt;}; 50 void SetPolargram(TGraphPolargram *p) {fPolargram = p;}; 51 Double_t *GetXpol();; 52 Double_t *GetYpol();; 53 ; 54 ClassDefOverride(TGraphPolar,1); // Polar graph; 55};; 56 ; 57#endif; Double_tdouble Double_tDefinition RtypesCore.h:59; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TGraphErrors.h; TGraphPolargram.h; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphPolarTo draw a polar graph.Definition TGraphPolar.h:23; TGraphPolar::SetMaximumvoid SetMaximum(Double_t maximum=1) overrideSet the maximum of the graph.Definition TGraphPolar.h:45; TGraphPolar::SetMinRadialvoid SetMinRadial(Double_t minimum=0)Set minimum radial in the center of the circle.Definition TGraphPolar.cxx:162; TGraphPolar::fOptionAxisBool_t fOptionAxisForce drawing of new coord system.Definition TGraphPolar.h:26; TGraphPolar::fXpolDouble_t * fXpol[fNpoints] points in polar coordinatesDefinition TGraphPolar.h:30; TGraphPolar::SetMaxPolarvoid SetMaxPolar(Double_t maximum=6.28318530717958623)Set maximum Polar.Definition TGraphPolar.cxx:137; TGraphPolar::GetYpolDouble_t * GetYpol()Return points in polar coordinates.Definition TGraphPolar.cxx:128; TGraphPolar::fPolargramTGraphPolargram * fPolargramThe polar coordinates system.Definition TGraphPolar.h:29; TGraphPolar::GetPolargramTGraphPolargram * GetPolargram()Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPolar_8h_source.html:2784,error,error,2784,doc/master/TGraphPolar_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphPolar_8h_source.html,1,['error'],['error']
Availability,"e_t nTrainingSamples, const Data_t &testData, size_t nTestSamples, Net_t &net, Scalar_t momentum, size_t nThreads) -> Scalar_t;  ; template<typename Data_t , typename Net_t > ; Scalar_t TrainMomentum (const Data_t &TrainingDataIn, size_t nTrainingSamples, const Data_t &TestDataIn, size_t nTestSamples, Net_t &net, Scalar_t momentum, size_t nThreads=1);  Same as Train(...) but uses the given momentum. ;  . Private Attributes; size_t fBatchSize;  Batch size to use for the training. ;  ; size_t fConvergenceCount;  Current number of training epochs without. ;  ; size_t fConvergenceSteps;  Number of training epochs without considerable. ;  ; Scalar_t fLearningRate;  Learning rate \(\alpha\). ;  ; Scalar_t fMinimumError;  The minimum loss achieved on the training set during the current training session. ;  ; size_t fStepCount;  Number of steps performed in the current training session. ;  ; Scalar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/Minimizers.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 59 of file Minimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TGradientDescent< Architecture_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 58 of file Minimizers.h. Constructor & Destructor Documentation. ◆ TGradientDescent() [1/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent. Definition at line 175 of file Minimizers.h. ◆ TGradientDescent() [2/2]. template<typename Architecture_t > . TMVA::DNN::TGradientDescent< Architecture_t >::TGradientDescent ; (; Scalar_t ; learningRate, . size_t ; convergenceSteps, . size_t ; testInterval . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:5018,error,error,5018,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['error'],['error']
Availability,"e_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTextInput(Bool_t on)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGLBEntry*FindEntry(const char* s) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGComboBox.html:4930,error,error,4930,root/html602/TGComboBox.html,https://root.cern,https://root.cern/root/html602/TGComboBox.html,2,['error'],['error']
Availability,"e_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTGContainer::End(Bool_t select = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGContainer::FindFrame(Int_t x, Int_t y, Bool_t exclude = kTRUE); virtual TGFrame*TGContainer::FindFrameByName(const char* name); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual void*TGContainer::FindItem(const TString& name, Bool_t direction = kTRUE, Bool_t caseSensitive = kTRUE, Bool_t subString = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGCanvas*TGContainer::GetCanvas() const; TGClient*TGObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGFileContainer.html:5155,error,error,5155,root/html602/TGFileContainer.html,https://root.cern,https://root.cern/root/html602/TGFileContainer.html,6,['error'],['error']
Availability,"e_t s2[kNstat] = {0};; 994 if (!resetStats) {; 995 // need to initialize to zero s1 and s2 since; 996 // GetStats fills only used elements depending on dimension and type; 997 GetStats(s1);; 998 h1->GetStats(s2);; 999 }; 1000 ; 1001 SetMinimum();; 1002 SetMaximum();; 1003 ; 1004 // - Loop on bins (including underflows/overflows); 1005 Double_t factor = 1;; 1006 if (h1->GetNormFactor() != 0) factor = h1->GetNormFactor()/h1->GetSumOfWeights();; 1007 Double_t c1sq = c1 * c1;; 1008 Double_t factsq = factor * factor;; 1009 ; 1010 for (Int_t bin = 0; bin < fNcells; ++bin) {; 1011 //special case where histograms have the kIsAverage bit set; 1012 if (this->TestBit(kIsAverage) && h1->TestBit(kIsAverage)) {; 1013 Double_t y1 = h1->RetrieveBinContent(bin);; 1014 Double_t y2 = this->RetrieveBinContent(bin);; 1015 Double_t e1sq = h1->GetBinErrorSqUnchecked(bin);; 1016 Double_t e2sq = this->GetBinErrorSqUnchecked(bin);; 1017 Double_t w1 = 1., w2 = 1.;; 1018 ; 1019 // consider all special cases when bin errors are zero; 1020 // see http://root-forum.cern.ch/viewtopic.php?f=3&t=13299; 1021 if (e1sq) w1 = 1. / e1sq;; 1022 else if (h1->fSumw2.fN) {; 1023 w1 = 1.E200; // use an arbitrary huge value; 1024 if (y1 == 0) {; 1025 // use an estimated error from the global histogram scale; 1026 double sf = (s2[0] != 0) ? s2[1]/s2[0] : 1;; 1027 w1 = 1./(sf*sf);; 1028 }; 1029 }; 1030 if (e2sq) w2 = 1. / e2sq;; 1031 else if (fSumw2.fN) {; 1032 w2 = 1.E200; // use an arbitrary huge value; 1033 if (y2 == 0) {; 1034 // use an estimated error from the global histogram scale; 1035 double sf = (s1[0] != 0) ? s1[1]/s1[0] : 1;; 1036 w2 = 1./(sf*sf);; 1037 }; 1038 }; 1039 ; 1040 double y = (w1*y1 + w2*y2)/(w1 + w2);; 1041 UpdateBinContent(bin, y);; 1042 if (fSumw2.fN) {; 1043 double err2 = 1./(w1 + w2);; 1044 if (err2 < 1.E-200) err2 = 0; // to remove arbitrary value when e1=0 AND e2=0; 1045 fSumw2.fArray[bin] = err2;; 1046 }; 1047 } else { // normal case of addition between histograms; 1048 AddBinConten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:40844,error,errors,40844,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"e_t startx = 0, Double_t starty = 0, Double_t startz = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefreshPhysicalNodes(Bool_t lock = kTRUE); voidRegisterMatrix(const TGeoMatrix* matrix); voidRemoveMaterial(Int_t index); voidRemoveNavigator(const TGeoNavigator* nav); Int_tReplaceVolume(TGeoVolume* vorig, TGeoVolume* vnew); voidTObject::ResetBit(UInt_t f); voidResetState(); voidResetUserData(); voidRestoreMasterVolume()MENU ; Double_tSafety(Bool_t inside = kFALSE); TGeoNode*SamplePoints(Int_t npoints, Double_t& dist, Double_t epsil = 1E-5, const char* g3path = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveAttributes(const char* filename = ""tgeoatt.C"")MENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidSelectTrackingMedia(); TGeoPNEntry*SetAlignableEntry(const char* unique_name, const char* path, Int_t uid = -1); voidSetAllIndex(); voidSetAnimateTracks(Bool_t flag = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBombFactors(Double_t bombx = 1.3, Double_t bomby = 1.3, Double_t bombz = 1.3, Double_t bombr = 1.3)MENU ; voidSetCheckedNode(TGeoNode* node); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetClipping(Bool_t flag = kTRUE)MENU ; voidSetClippingShape(TGeoShape* clip); voidSetCurrentDirection(Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); Bool_tSetCurrentNavigator(Int_t index); voidSetCurrentPoint(Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); voidSetCurrentTrack(Int_t i); voidSetCurrentTrack(TVirtualGeoTrack* track); voidSetDrawExtraPaths(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetExplodedView(Int_t iopt =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoManager.html:27832,down,downwards,27832,root/html532/TGeoManager.html,https://root.cern,https://root.cern/root/html532/TGeoManager.html,1,['down'],['downwards']
Availability,"e_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Thu Sep 23 19:59:23 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCurve.html:22835,error,error,22835,root/html528/RooCurve.html,https://root.cern,https://root.cern/root/html528/RooCurve.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"e_t tolerance = 1e-10) const; Find the nearest point to xvalue. Return -1 if distance; exceeds tolerance. Double_t interpolate(Double_t x, Double_t tolerance = 1e-10) const; Return linearly interpolated value of curve at xvalue. If distance; to nearest point is less than tolerance, return nearest point value; instead. RooCurve* makeErrorBand(const vector<RooCurve*>& variations, Double_t Z = 1) const; Construct filled RooCurve represented error band that captures alpha% of the variations; of the curves passed through argument variations, where the percentage alpha corresponds to; the central interval fraction of a significance Z. RooCurve* makeErrorBand(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, const TMatrixD& V, Double_t Z = 1) const; Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation). void calcBandInterval(const vector<RooCurve*>& plusVar, const vector<RooCurve*>& minusVar, Int_t i, const TMatrixD& V, Double_t Z, Double_t& lo, Double_t& hi) const; Retrieve variation points from curves. void calcBandInterval(const vector<RooCurve*>& variations, Int_t i, Double_t Z, Double_t& lo, Double_t& hi, Bool_t approxGauss) const. Bool_t isIdentical(const RooCurve& other, Double_t tol = 1e-6) const; Return true if curve is identical to other curve allowing for given; absolute tolerance on each point compared point. RooCurve(). void Print(Option_t* options = 0) const; Printing interface. » Last changed: Tue Mar 10 17:16:07 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCurve.html:23310,error,error,23310,root/html534/RooCurve.html,https://root.cern,https://root.cern/root/html534/RooCurve.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"e_t x) const {; 300 return ROOT::Math::exponential_cdf(x, fParams[0]);; 301 }; 302 ; 303 void GoFTest::LogSample() {; 304 transform(fSamples[0].begin(), fSamples[0].end(), fSamples[0].begin(),; 305 std::function<Double_t(Double_t)>(TMath::Log));; 306 }; 307 ; 308/* ; 309 Taken from (1); 310*/ ; 311 Double_t GoFTest::GetSigmaN(const std::vector<size_t> & ns, size_t N) {; 312 // compute moments of AD distribution (from Scholz-Stephen paper, paragraph 3); 313 ; 314 Double_t sigmaN = 0.0, h = 0.0, H = 0.0, g = 0.0, a, b, c, d, k = ns.size();; 315 ; 316 for (size_t i = 0; i < ns.size(); ++i) {; 317 H += 1.0 / double( ns[i] );; 318 }; 319 ; 320 // use approximate formulas for large N; 321 // cache Sum( 1 / i); 322 if (N < 2000) { ; 323 std::vector<double> invI(N); ; 324 for (size_t i = 1; i <= N - 1; ++i) {; 325 invI[i] = 1.0 / i; ; 326 h += invI[i]; ; 327 }; 328 for (size_t i = 1; i <= N - 2; ++i) {; 329 double tmp = invI[N-i];; 330 for (size_t j = i + 1; j <= N - 1; ++j) {; 331 g += tmp * invI[j];; 332 }; 333 }; 334 }; 335 else {; 336 // for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5; 337 const double emc = 0.5772156649015328606065120900824024; // Euler-Mascheroni constant; 338 h = std::log(double(N-1) ) + emc;; 339 g = (M_PI)*(M_PI)/6.0;; 340 }; 341 double k2 = std::pow(k,2);; 342 a = (4 * g - 6) * k + (10 - 6 * g) * H - 4 * g + 6;; 343 b = (2 * g - 4) * k2 + 8 * h * k + (2 * g - 14 * h - 4) * H - 8 * h + 4 * g - 6;; 344 c = (6 * h + 2 * g - 2) * k2 + (4 * h - 4 *g + 6) * k + (2 * h - 6) * H + 4 * h;; 345 d = (2 * h + 6) * k2 - 4 * h * k;; 346 sigmaN += a * std::pow(double(N),3) + b * std::pow(double(N),2) + c * N + d;; 347 sigmaN /= ( double(N - 1) * double(N - 2) * double(N - 3) );; 348 sigmaN = TMath::Sqrt(sigmaN);; 349 return sigmaN;; 350 }; 351 ; 352 ; 353 Double_t GoFTest::PValueADKSamples(size_t nsamples, Double_t tx) {; 354 ; 355 /*; 356 Computation of p-values according to ; 357 ""K-Sample Anderson-Darling Tests"" b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:11203,error,error,11203,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['error'],['error']
Availability,"e_t x0, Double_t y0); virtual~TVector2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDeltaPhi(const TVector2& v) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVector2.html:1398,error,error,1398,root/html528/TVector2.html,https://root.cern,https://root.cern/root/html528/TVector2.html,4,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBranchRef*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeSQL.html:4262,error,error,4262,root/html604/TTreeSQL.html,https://root.cern,https://root.cern/root/html604/TTreeSQL.html,1,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Double_t* x); virtual Int_tFill(Double_t x0, Double_t x1, Double_t x2 = 0, Double_t x3 = 0, Double_t x4 = 0, Double_t x5 = 0, Double_t x6 = 0, Double_t x7 = 0, Double_t x8 = 0, Double_t x9 = 0, Double_t x10 = 0, Double_t x11 = 0, Double_t x12 = 0, Double_t x13 = 0, Double_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNtupleD.html:4842,error,error,4842,root/html604/TNtupleD.html,https://root.cern,https://root.cern/root/html604/TNtupleD.html,1,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Float_t* x); Int_tFill(Int_t x0); Int_tFill(Double_t x0); virtual Int_tFill(Float_t x0, Float_t x1 = 0, Float_t x2 = 0, Float_t x3 = 0, Float_t x4 = 0, Float_t x5 = 0, Float_t x6 = 0, Float_t x7 = 0, Float_t x8 = 0, Float_t x9 = 0, Float_t x10 = 0, Float_t x11 = 0, Float_t x12 = 0, Float_t x13 = 0, Float_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNtuple.html:4826,error,error,4826,root/html604/TNtuple.html,https://root.cern,https://root.cern/root/html604/TNtuple.html,1,['error'],['error']
Availability,"e_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual Int_tTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual Int_tTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tTTree::Fill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THbookTree.html:5524,error,error,5524,root/html604/THbookTree.html,https://root.cern,https://root.cern/root/html604/THbookTree.html,1,['error'],['error']
Availability,"e_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSeg.html:4882,error,error,4882,root/html534/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSeg.html,3,['error'],['error']
Availability,"e_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoTube::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoTubeSeg::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoTube::GetDz() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCtub.html:4978,error,error,4978,root/html534/TGeoCtub.html,https://root.cern,https://root.cern/root/html534/TGeoCtub.html,3,['error'],['error']
Availability,"e_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:17430,error,errors,17430,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,3,['error'],['errors']
Availability,"e_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphBentErrors.html:16962,error,errors,16962,root/html528/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html528/TGraphBentErrors.html,3,['error'],['errors']
Availability,"e_t, TList**); virtual Int_tAddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tGetBytesRead() const; TList*GetConfigParams(Bool_t steal = kFALSE); Double_tGetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesProcessed() const; virtual Int_tGetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tGetInitTime() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* sl, TMessage* r); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualPacketizer.html:2292,error,error,2292,root/html534/TVirtualPacketizer.html,https://root.cern,https://root.cern/root/html534/TVirtualPacketizer.html,1,['error'],['error']
Availability,"e_t, TList**); virtual Int_tAddWorkers(TList* workers); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tGetActiveWorkers(); Long64_tTVirtualPacketizer::GetBytesRead() const; TList*TVirtualPacketizer::GetConfigParams(Bool_t steal = kFALSE); Double_tTVirtualPacketizer::GetCumProcTime() const; virtual Float_tGetCurrentRate(Bool_t& all); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesProcessed(TSlave* sl) const; virtual Int_tTVirtualPacketizer::GetEstEntriesProcessed(Float_t, Long64_t& ent, Long64_t& bytes, Long64_t& calls); TList*TVirtualPacketizer::GetFailedPackets(); virtual const char*TObject::GetIconName() const; Float_tTVirtualPacketizer::GetInitTime() const; virtual const char*TObject::GetName() const; virtual TDSetElement*GetNextPacket(TSlave* s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizer.html:2072,error,error,2072,root/html534/TPacketizer.html,https://root.cern,https://root.cern/root/html534/TPacketizer.html,1,['error'],['error']
Availability,"e_tDefinition RtypesCore.h:61; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBasket.h; PrintElementsstatic void PrintElements(const TStreamerInfo *info, const TStreamerInfoActions::TIDs &ids)Print branch parameters.Definition TBranchElement.cxx:3816; R__CleanNamestatic void R__CleanName(std::string &name)Remove trailing dimensions and make sure there is a trailing dot.Definition TBranchElement.cxx:1771; TBranchElement.h; TBranchObject.h; TBranchRef.h; TBranchSTL.h; TBrowser.h; TBufferFile.h; TClassEdit.h; TClass.h; TClonesArray.h; TDataMember.h; TDataType.h; EDataTypeEDataTypeDefinition TDataType.h:28; kOther_t@ kOther_tDefinition TDataType.h:32; kIsAbstract@ kIsAbstractDefinition TDictionary.h:71; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TFile.h; TFolder.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; cursorOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t cursorDefinition TGWin32VirtualXProxy.cxx:160; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:245483,error,error,245483,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"e_tTFormula::Eval(Double_t x, Double_t y = 0, Double_t z = 0, Double_t t = 0) const; virtual TClass*EvalClass() const; virtual Double_tEvalInstance(Int_t i = 0, const char*[] stringStack = 0); virtual Long64_tEvalInstance64(Int_t i = 0, const char*[] stringStack = 0); doubleEvalInstance<double>(Int_t i = 0, const char*[] stringStack = 0); long doubleEvalInstance<long double>(Int_t i = 0, const char*[] stringStack = 0); Long64_tEvalInstance<long long>(Int_t i = 0, const char*[] stringStack = 0); virtual LongDouble_tEvalInstanceLD(Int_t i = 0, const char*[] stringStack = 0); virtual void*EvalObject(Int_t i = 0); virtual Double_tTFormula::EvalPar(const Double_t* x, const Double_t* params = 0); virtual Double_tTFormula::EvalParOld(const Double_t* x, const Double_t* params = 0); virtual const char*EvalStringInstance(Int_t i = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TStringTFormula::GetExpFormula(Option_t* option = """") const; virtual const char*TObject::GetIconName() const; virtual TLeaf*GetLeaf(Int_t n) const; TFormLeafInfo*GetLeafInfo(Int_t code) const; virtual const TObject*TFormula::GetLinearPart(Int_t i); TTreeFormulaManager*GetManager() const; static voidTFormula::GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); TMethodCall*GetMethodCall(Int_t code) const; virtual Int_tGetMultiplicity() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNcodes() const; virtual Int_tGetNdata(); virtual Int_tTFormula::GetNdim() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFormula.html:3900,error,error,3900,root/html602/TTreeFormula.html,https://root.cern,https://root.cern/root/html602/TTreeFormula.html,1,['error'],['error']
Availability,"e_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char*[] name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char*[] name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseT_TArrayC_.html:2245,error,error,2245,root/html602/THnSparseT_TArrayC_.html,https://root.cern,https://root.cern/root/html602/THnSparseT_TArrayC_.html,24,['error'],['error']
Availability,"e_tVavilov(Double_t x, Double_t kappa, Double_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double_t beta2); Double_tVoigt(Double_t x, Double_t sigma, Double_t lg, Int_t r = 4). Class Charts; Function documentation; Long_t Hypot(Long_t x, Long_t y). Double_t Hypot(Double_t x, Double_t y). Double_t ASinH(Double_t ). Double_t ACosH(Double_t ). Double_t ATanH(Double_t ). Double_t Log2(Double_t x). Double_t DiLog(Double_t x); The DiLogarithm function; Code translated by R.Brun from CERNLIB DILOG function C332. Double_t Erf(Double_t x); Computation of the error function erf(x).; Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x. Double_t Erfc(Double_t x); Compute the complementary error function erfc(x).; Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity. Double_t ErfInverse(Double_t x); returns the inverse error function; x must be <-1<x<1. Double_t ErfcInverse(Double_t x); returns the inverse of the complementary error function; x must be 0<x<2; implement using the quantile of the normal distribution; instead of ErfInverse for better numerical precision for large x. Double_t Factorial(Int_t i); Compute factorial(n). Double_t Freq(Double_t x); Computation of the normal frequency function freq(x).; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x. Translated from CERNLIB C300 by Rene Brun. Double_t Gamma(Double_t z); Computation of gamma(z) for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. Double_t Gamma(Double_t a, Double_t x); Computation of the normalized lower incomplete gamma function P(a,x) as defined in the; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 .; Its normalization is such that TMath::Gamma(a,+infinity) = 1 . --- Nve 14-nov-1998 UU-SAP Utrecht. Double_t BreitWigner(Double_t x, Double_t mean = 0, Double_t gamma = 1); Calculate a Breit Wigner function with mean and gamma. Double_t Gaus(Double_t x, Double_t mean = 0, Double_t sigma = 1, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:12937,error,error,12937,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,3,['error'],['error']
Availability,"e_t[fMaxSize];; 356 fEYhigh = new Double_t[fMaxSize];; 357 fEXlowd = new Double_t[fMaxSize];; 358 fEYlowd = new Double_t[fMaxSize];; 359 fEXhighd = new Double_t[fMaxSize];; 360 fEYhighd = new Double_t[fMaxSize];; 361 return kTRUE;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365/// Protected function to perform the merge operation of a graph with asymmetric errors.; 366 ; 367Bool_t TGraphBentErrors::DoMerge(const TGraph *g); 368{; 369 if (g->GetN() == 0) return kFALSE;; 370 ; 371 Double_t *exl = g->GetEXlow();; 372 Double_t *exh = g->GetEXhigh();; 373 Double_t *eyl = g->GetEYlow();; 374 Double_t *eyh = g->GetEYhigh();; 375 ; 376 Double_t *exld = g->GetEXlowd();; 377 Double_t *exhd = g->GetEXhighd();; 378 Double_t *eyld = g->GetEYlowd();; 379 Double_t *eyhd = g->GetEYhighd();; 380 ; 381 if (!exl || !exh || !eyl || !eyh ||; 382 !exld || !exhd || !eyld || !eyhd) {; 383 if (g->IsA() != TGraph::Class() ); 384 Warning(""DoMerge"", ""Merging a %s is not compatible with a TGraphBentErrors - errors will be ignored"", g->IsA()->GetName());; 385 return TGraph::DoMerge(g);; 386 }; 387 for (Int_t i = 0 ; i < g->GetN(); i++) {; 388 Int_t ipoint = GetN();; 389 Double_t x = g->GetX()[i];; 390 Double_t y = g->GetY()[i];; 391 SetPoint(ipoint, x, y);; 392 SetPointError(ipoint, exl[i], exh[i], eyl[i], eyh[i],; 393 exld[i], exhd[i], eyld[i], eyhd[i]);; 394 }; 395 ; 396 return kTRUE;; 397 ; 398}; 399////////////////////////////////////////////////////////////////////////////////; 400/// It returns the error along X at point `i`.; 401 ; 402Double_t TGraphBentErrors::GetErrorX(Int_t i) const; 403{; 404 if (i < 0 || i >= fNpoints) return -1;; 405 if (!fEXlow && !fEXhigh) return -1;; 406 Double_t elow = 0, ehigh = 0;; 407 if (fEXlow) elow = fEXlow[i];; 408 if (fEXhigh) ehigh = fEXhigh[i];; 409 return TMath::Sqrt(0.5*(elow*elow + ehigh*ehigh));; 410}; 411 ; 412 ; 413////////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:12792,error,errors,12792,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"e_t ; content . ). protectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 9449 of file TH1.cxx. ◆ UseCurrentStyle(). void TH1::UseCurrentStyle ; (; ). overridevirtual . Copy current attributes from/to current style. ; Reimplemented from TObject.; Definition at line 7469 of file TH1.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 86 of file TH1.h. Member Data Documentation. ◆ fBarOffset. Short_t TH1::fBarOffset. protected . (1000*offset) for bar charts or legos ; Definition at line 93 of file TH1.h. ◆ fBarWidth. Short_t TH1::fBarWidth. protected . (1000*width) for bar charts or legos ; Definition at line 94 of file TH1.h. ◆ fBinStatErrOpt. EBinErrorOpt TH1::fBinStatErrOpt. protected . Option for bin statistical errors. ; Definition at line 113 of file TH1.h. ◆ fBuffer. Double_t* TH1::fBuffer. protected . [fBufferSize] entry buffer ; Definition at line 108 of file TH1.h. ◆ fBufferSize. Int_t TH1::fBufferSize. protected . fBuffer size ; Definition at line 107 of file TH1.h. ◆ fContour. TArrayD TH1::fContour. protected . Array to display contour levels. ; Definition at line 103 of file TH1.h. ◆ fDimension. Int_t TH1::fDimension. protected . ! Histogram dimension (1, 2 or 3 dim) ; Definition at line 110 of file TH1.h. ◆ fDirectory. TDirectory* TH1::fDirectory. protected . ! Pointer to directory holding this histogram ; Definition at line 109 of file TH1.h. ◆ fEntries. Double_t TH1::fEntries. protected . Number of entries. ; Definition at line 95 of file TH1.h. ◆ fFunctions. TList* TH1::fFunctions. protected . ->Pointer to list of functions (fits and user) ; Definition at line 106 of file TH1.h. ◆ fgAddDirectory. Bool_t TH1::fgAddDirectory = kTRUE. staticprotected . ! Flag to add histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:224576,error,errors,224576,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"e_t ; z . ). overridevirtual . Set x, y and z values for point number i. ; Reimplemented from TGraph2D.; Definition at line 537 of file TGraph2DAsymmErrors.cxx. ◆ SetPointError(). void TGraph2DAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; ezl, . Double_t ; ezh . ). virtual . Set ex, ey and ez values for point number i. ; Definition at line 591 of file TGraph2DAsymmErrors.cxx. ◆ Streamer(). void TGraph2DAsymmErrors::Streamer ; (; TBuffer & ; b). overridevirtual . Stream an object of class TGraph2DAsymmErrors. ; Reimplemented from TGraph2D.; Definition at line 610 of file TGraph2DAsymmErrors.cxx. ◆ StreamerNVirtual(). void TGraph2DAsymmErrors::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file TGraph2DAsymmErrors.h. Member Data Documentation. ◆ fEXhigh. Double_t* TGraph2DAsymmErrors::fEXhigh {nullptr}. protected . [fNpoints] array of X high errors ; Definition at line 33 of file TGraph2DAsymmErrors.h. ◆ fEXlow. Double_t* TGraph2DAsymmErrors::fEXlow {nullptr}. protected . [fNpoints] array of X low errors ; Definition at line 32 of file TGraph2DAsymmErrors.h. ◆ fEYhigh. Double_t* TGraph2DAsymmErrors::fEYhigh {nullptr}. protected . [fNpoints] array of Y high errors ; Definition at line 35 of file TGraph2DAsymmErrors.h. ◆ fEYlow. Double_t* TGraph2DAsymmErrors::fEYlow {nullptr}. protected . [fNpoints] array of Y low errors ; Definition at line 34 of file TGraph2DAsymmErrors.h. ◆ fEZhigh. Double_t* TGraph2DAsymmErrors::fEZhigh {nullptr}. protected . [fNpoints] array of Z high errors ; Definition at line 37 of file TGraph2DAsymmErrors.h. ◆ fEZlow. Double_t* TGraph2DAsymmErrors::fEZlow {nullptr}. protected . [fNpoints] array of Z low errors ; Definition at line 36 of file TGraph2DAsymmErrors.h. Libraries for TGraph2DAsymmErrors:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraph2DAsymmErrors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:38967,error,errors,38967,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['errors']
Availability,"e_v(const Double_t*, const Double_t*, Double_t*, Int_t, Double_t*) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t*, const Double_t*, Double_t*, Int_t, Double_t*) const; static Double_tDistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tEpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; virtual const char*TObject::GetIconName() const; Int_tGetId() const; virtual TGeoShape*GetMakeRu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:9101,error,error,9101,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,3,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classDummyObject.html:7320,error,error,7320,doc/master/classDummyObject.html,https://root.cern,https://root.cern/doc/master/classDummyObject.html,3,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocMethodWrapper.html:8100,error,error,8100,doc/master/classTDocMethodWrapper.html,https://root.cern,https://root.cern/doc/master/classTDocMethodWrapper.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; Arrays used to store the packed inputs; TObjArray fSignal;  Packed input signal. ;  ; TObjArray fBackground;  Packed input background. ;  ; TObjArray fCandidates;  Packed input candidates (data) ;  ; TObjArray fErrorOnSignal;  Packed error sources for signal. ;  ; TObjArray fErrorOnBackground;  Packed error source",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimitDataSource.html:8611,error,error,8611,doc/master/classTLimitDataSource.html,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; Bool_t fBreakLine;  ; TGLongPosition fEndPos;  ; TGText * fText;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelTextCom.html:7699,error,error,7699,doc/master/classTDelTextCom.html,https://root.cern,https://root.cern/doc/master/classTDelTextCom.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; PyObject * fCallable;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPyDispatcher.html:11043,error,error,11043,doc/master/classTPyDispatcher.html,https://root.cern,https://root.cern/doc/master/classTPyDispatcher.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TClass * fClass {nullptr};  pointer to the foreign object ;  ; void * fObj {nullptr};  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectorObject.html:7579,error,error,7579,doc/master/classTInspectorObject.html,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TClonesArray * fHitsA;  ; TClonesArray * fHitsB;  ; TClonesArray * fJets;  ; Int_t fNhitA;  ; Int_t fNhitB;  ; Int_t fNjet;  ; Int_t fNtrack;  ; TClonesArray * fTracks;  ; TVector3 fVertex;  . Static Private Attributes; static TClonesArray * fgHitsA = nullptr;  ; static TClonesArray * fgHitsB = nullptr;  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJetEvent.html:8064,error,error,8064,doc/master/classJetEvent.html,https://root.cern,https://root.cern/doc/master/classJetEvent.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TDSetElement * fElement;  ; Bool_t fIsDone;  ; Long64_t fNextEntry;  ; TFileNode * fNode;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html:7617,error,error,7617,doc/master/classTPacketizerAdaptive_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html,2,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TIter * fIter;  ; TString fName;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html:7395,error,error,7395,doc/master/classTPacketizerFile_1_1TIterObj.html,https://root.cern,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TObject * fActFileNext;  ; TList * fActFiles;  ; Long64_t fEvents;  ; Int_t fExtSlaveCnt;  ; TList * fFiles;  ; TSortedList * fFilesToProcess;  ; Int_t fMySlaveCnt;  ; TString fNodeName;  ; Long64_t fProcessed;  ; Int_t fRunSlaveCnt;  ; Int_t fStrategy;  ; TObject * fUnAllocFileNext;  . Additional Inherited Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html:8243,error,error,8243,doc/master/classTPacketizerAdaptive_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TObject * fActFileNext;  ; TList * fActFiles;  ; TList * fFiles;  ; Int_t fMySlaveCnt;  ; TString fNodeName;  ; Int_t fSlaveCnt;  ; TObject * fUnAllocFileNext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x040000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html:7737,error,error,7737,doc/master/classTPacketizer_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; TString fAction;  associated action ;  ; TString fIcon;  associated icon (32x32) ;  ; TString fPattern;  filename pattern ;  ; TRegexp * fReg;  pattern regular expression ;  ; TString fSIcon;  associated small icon (16x16) ;  ; TString fType;  mime type ;  . Friends; class TGMimeTypes;  . Additional Inherited Memb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMime.html:7449,error,error,7449,doc/master/classTGMime.html,https://root.cern,https://root.cern/doc/master/classTGMime.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Private Attributes; char fChar;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelCharCom.html:7487,error,error,7487,doc/master/classTDelCharCom.html,https://root.cern,https://root.cern/doc/master/classTDelCharCom.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TAttImage * fAttImage;  ; TImagePalette ** fPalette;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html:7389,error,error,7389,doc/master/classTASPaletteEditor_1_1PaintPalette.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1PaintPalette.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextEditCommand.html:7406,error,error,7406,doc/master/classTGTextEditCommand.html,https://root.cern,https://root.cern/doc/master/classTGTextEditCommand.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TMatrixDSparse fA;  ; TMatrixDSparse fC;  ; TMatrixDSparse fQ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataSparse.html:10281,error,error,10281,doc/master/classTQpDataSparse.html,https://root.cern,https://root.cern/doc/master/classTQpDataSparse.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TMatrixD fA;  ; TMatrixD fC;  ; TMatrixDSym fQ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataDens.html:10152,error,error,10152,doc/master/classTQpDataDens.html,https://root.cern,https://root.cern/doc/master/classTQpDataDens.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TSlave * fSlave;  ; TProofProgressStatus * fStatus;  ; TString fWrkFQDN;  . Friends; class TPacketizer;  ; class TPacketizerAdaptive;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html:7660,error,error,7660,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TString fName;  ! name of the table column ;  ; Bool_t fNumeric {kFALSE};  ! for numeric quotes (double quotes) are not required ;  ; TString fType;  ! type of the table column ;  ; TString fValue;  ! value of the table column ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLColumnData.html:7785,error,error,7785,doc/master/classTSQLColumnData.html,https://root.cern,https://root.cern/doc/master/classTSQLColumnData.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TTVLVEntry * fItem;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ));",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGItemContext.html:7727,error,error,7727,doc/master/classTGItemContext.html,https://root.cern,https://root.cern/doc/master/classTGItemContext.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Attributes; TVectorD fCloIndex;  ; TVectorD fCupIndex;  ; TVectorD fDd;  ; TVectorD fDq;  ; TQpProbBase * fFactory;  ; Int_t fMclo;  ; Int_t fMcup;  ; Int_t fMy;  ; Int_t fMz;  ; TVectorD fNomegaInv;  ; Int_t fNx;  ; Int_t fNxlo;  ; Int_t fNxup;  ; TVectorD fRhs;  ; TVectorD fXloIndex;  ; TVectorD fXupIndex;  . Additional I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpLinSolverBase.html:8962,error,error,8962,doc/master/classTQpLinSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpLinSolverBase.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; Double_t Norm3Column (Int_t col);  Norm 3-vector in column col. ;  ; Double_t Orto3Column (Int_t col, Int_t ref);  Orto-norm 3-vector in column col with respect to column ref. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:13546,error,error,13546,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; TString DefineSQLName (const char *fullname);  produce suitable name for column, taking into account length limitation ;  ; Bool_t HasSQLName (const char *sqlname);  checks if columns list already has that sql name ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableData.html:8027,error,error,8027,doc/master/classTSQLTableData.html,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void AddToSscp (TMatrixD &sscp, TVectorD &vec);  update the sscp matrix with vector vec ;  ; void Classic ();  called when h=n. ;  ; void ClearSscp (TMatrixD &sscp);  clear the sscp matrix, used for covariance and mean calculation ;  ; void Correl ();  transforms covariance matrix into correlation matrix ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:13993,error,error,13993,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Bool_t fAccObjects {kFALSE};  indicate that object writing started, should be closed in postprocess ;  ; Bool_t fBase64 {kFALSE};  if true, accumulate whole objects in values ;  ; Version_t fClVersion {0};  custom structure for stl container reading ;  ; TStreamerElement * fElem {nullptr};  ; std::unique_ptr< TArra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:8195,error,error,8195,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Double_t fEvtRate;  ; Double_t fMBRate;  ; Double_t fProcTime;  ; Double_t fXx;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html:7423,error,error,7423,doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Float_t fX;  ; Float_t fY;  ; Float_t fZ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classHit.html:7328,error,error,7328,doc/master/classHit.html,https://root.cern,https://root.cern/doc/master/classHit.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Html_16_t fCount;  ; int fElId;  ; Html_u8_t fFlags;  ; int fOffs;  ; TGHtmlElement * fPNext;  ; TGHtmlElement * fPPrev;  ; SHtmlStyle_t fStyle;  ; Html_u8_t fType;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlElement.html:7655,error,error,7655,doc/master/classTGHtmlElement.html,https://root.cern,https://root.cern/doc/master/classTGHtmlElement.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Html_32_t fH;  ; TGHtml * fHtml;  ; TImage * fImage;  ; TGHtmlImageMarkup * fPList;  ; TGHtmlImage * fPNext;  ; TTimer * fTimer;  ; Html_32_t fW;  ; char * fZHeight;  ; char * fZUrl;  ; char * fZWidth;  . Private Member Functions;  TGHtmlImage (const TGHtmlImage &)=delete;  ; TGHtmlImage & operator= (const TGHtmlIm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlImage.html:7472,error,error,7472,doc/master/classTGHtmlImage.html,https://root.cern,https://root.cern/doc/master/classTGHtmlImage.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Int_t fCode;  ; TFormLeafInfoMultiVarDim * fMultiDim;  ; Int_t fOper;  ; Int_t fSize;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDimensionInfo.html:7568,error,error,7568,doc/master/classTDimensionInfo.html,https://root.cern,https://root.cern/doc/master/classTDimensionInfo.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; Int_t fMy;  ; Int_t fMz;  ; Int_t fNx;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpProbBase.html:8396,error,error,8396,doc/master/classTQpProbBase.html,https://root.cern,https://root.cern/doc/master/classTQpProbBase.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; T * _payload;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWrite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html:7557,error,error,7557,doc/master/structRooHelpers_1_1WrapIntoTObject.html,https://root.cern,https://root.cern/doc/master/structRooHelpers_1_1WrapIntoTObject.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TClass * fClass;  ! This is the class of the data pointed to ;  ; TString fClassName;  ; TFormLeafInfo * fCounter;  ; TStreamerElement * fElement;  ! Descriptor of the data pointed to. ;  ; TString fElementName;  ; TFormLeafInfo * fNext;  follow this to grab the inside information ;  ; Longptr_t fOffset;  ! Offset ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormLeafInfo.html:13411,error,error,13411,doc/master/classTFormLeafInfo.html,https://root.cern,https://root.cern/doc/master/classTFormLeafInfo.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGCompositeFrame * fContainer;  ; TGTabElement * fElement;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedTabInfo.html:7371,error,error,7371,doc/master/classTGedTabInfo.html,https://root.cern,https://root.cern/doc/master/classTGedTabInfo.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGCompositeFrame * fFrame;  ; TString fName;  . Private Member Functions;  TGedSubFrame (const TGedSubFrame &)=delete;  ; TGedSubFrame & operator= (const TGedSubFrame &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html:7414,error,error,7414,doc/master/classTGedFrame_1_1TGedSubFrame.html,https://root.cern,https://root.cern/doc/master/classTGedFrame_1_1TGedSubFrame.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGListTreeItem * fItem;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html:7395,error,error,7395,doc/master/classTRootBrowserHistoryCursor.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32CallBackObject.html:7428,error,error,7428,doc/master/classTGWin32CallBackObject.html,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TObjArray * fCmds;  ; TClass * fCurrentObjClass;  ; Long64_t fCurrentObjId;  ; TSQLFile * fFile;  ; Long64_t fFirstObjId;  ; Long64_t fKeyId;  ; Int_t fLastLongStrId;  ; Long64_t fLastObjId;  ; TObjArray fLongStrValues;  ; TMap fPool;  ; TSQLStatement * fRegStmt;  ; TObjArray fRegValues;  . Additional Inherited Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRegistry.html:7858,error,error,7858,doc/master/classTSqlRegistry.html,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TObjArray fBlobCmds;  ; TSQLStatement * fBlobStmt;  ; TSQLFile * fFile;  ; TSQLClassInfo * fInfo;  ; TObjArray fNormCmds;  ; TSQLStatement * fNormStmt;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlCmdsBuffer.html:7467,error,error,7467,doc/master/classTSqlCmdsBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlCmdsBuffer.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TRefArray fHits;  ; Int_t fNhit;  ; Float_t fPx;  ; Float_t fPy;  ; Float_t fPz;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTrack.html:7390,error,error,7390,doc/master/classTrack.html,https://root.cern,https://root.cern/doc/master/classTrack.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TSqlCmdsBuffer * fCmdBuf;  ; TSQLFile * fFile;  ; TSQLClassInfo * fInfo;  ; Int_t fMaxStrSize;  ; Long64_t fObjId;  ; Int_t fRawId;  ; TString fValueMask;  ; const char * fValueQuote;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x0200000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRawBuffer.html:7556,error,error,7556,doc/master/classTSqlRawBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TString fBranchName;  Branch corresponding to the reader. ;  ; TString fDataType;  Data type of reader. ;  ; TString fName;  Reader name. ;  ; ReaderType fType;  Type of the reader: Value or Array. ;  . Additional Inherited Members;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html:8182,error,error,8182,doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TTreeReaderDescriptor.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fBa;  ; TVectorD fCloBound;  ; TVectorD fCloIndex;  ; TVectorD fCupBound;  ; TVectorD fCupIndex;  ; TVectorD fG;  ; Int_t fMy;  ; Int_t fMz;  ; Int_t fNx;  ; TVectorD fXloBound;  ; TVectorD fXloIndex;  ; TVectorD fXupBound;  ; TVectorD fXupIndex;  . Static Protected Member Functions; static void RandomlyCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataBase.html:9394,error,error,9394,doc/master/classTQpDataBase.html,https://root.cern,https://root.cern/doc/master/classTQpDataBase.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fGamma;  ; TVectorD fLambda;  ; Int_t fNComplementaryVariables;  ; TVectorD fPhi;  ; TVectorD fPi;  ; TVectorD fS;  ; TVectorD fT;  ; TVectorD fU;  ; TVectorD fV;  ; TVectorD fW;  ; TVectorD fX;  ; TVectorD fY;  ; TVectorD fZ;  . Static Protected Member Functions; static Double_t FindBlocking (TVectorD &w,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:10792,error,error,10792,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TVectorD fRA;  ; TVectorD fRC;  ; TVectorD fRgamma;  ; TVectorD fRlambda;  ; TVectorD fRphi;  ; TVectorD fRpi;  ; TVectorD fRQ;  ; TVectorD fRt;  ; TVectorD fRu;  ; TVectorD fRv;  ; TVectorD fRw;  ; TVectorD fRz;  . Static Protected Member Functions; static void GondzioProjection (TVectorD &v, Double_t rmin, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpResidual.html:9338,error,error,9338,doc/master/classTQpResidual.html,https://root.cern,https://root.cern/doc/master/classTQpResidual.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; UInt_t fKeyCode;  ; TGWindow * fWindow;  . Private Member Functions;  TGMapKey (const TGMapKey &);  ; TGMapKey & operator= (const TGMapKey &);  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsisten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html:7402,error,error,7402,doc/master/classTGMainFrame_1_1TGMapKey.html,https://root.cern,https://root.cern/doc/master/classTGMainFrame_1_1TGMapKey.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; char * fZAuthority;  ; char * fZFragment;  ; char * fZPath;  ; char * fZQuery;  ; char * fZScheme;  . Private Member Functions;  TGHtmlUri (const TGHtmlUri &)=delete;  ; TGHtmlUri & operator= (const TGHtmlUri &)=delete;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlUri.html:7934,error,error,7934,doc/master/classTGHtmlUri.html,https://root.cern,https://root.cern/doc/master/classTGHtmlUri.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; char fChar;  . Private Attributes; TGLongPosition fEndPos;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInsTextCom.html:7548,error,error,7548,doc/master/classTInsTextCom.html,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; const TGPicture * fLarge;  ; TString fName;  ; const TGPicture * fSmall;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:7410,error,error,7410,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; int fBottom;  ; int fHeadRoom;  ; TGHtml * fHtml;  ; int fLeft;  ; SHtmlMargin_t * fLeftMargin;  ; int fMaxX;  ; int fMaxY;  ; int fPageWidth;  ; TGHtmlElement * fPEnd;  ; TGHtmlElement * fPStart;  ; int fRight;  ; SHtmlMargin_t * fRightMargin;  ; int fTop;  . Protected Member Functions; void ClearMarginStack (SHtm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:7670,error,error,7670,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static RooNumGenFactory & instance ();  Static method returning reference to singleton instance of factory. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumGenFactory.html:8644,error,error,8644,doc/master/classRooNumGenFactory.html,https://root.cern,https://root.cern/doc/master/classRooNumGenFactory.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:8564,error,error,8564,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,2,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddStrBrackets (TString &s, const char *quote);  adds quotes around string value and replaces some special symbols ;  ; static TString DefineElementColumnName (TStreamerElement *elem, TSQLFile *f, Int_t indx=0);  returns name of the column in class table for that element ;  ; static Int_t D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStructure.html:13076,error,error,13076,doc/master/classTSQLStructure.html,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void Cleanup (TGCompositeFrame *frame);  Static method to cleanup hierarchically all daughters of a composite frame. ;  ; static TGeoTabManager * GetMakeTabManager (TGedEditor *ged);  Static method to return the tab manager currently appended to the pad or create one if not existing. ;  ; static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTabManager.html:8928,error,error,8928,doc/master/classTGeoTabManager.html,https://root.cern,https://root.cern/doc/master/classTGeoTabManager.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void DisableTObjectStreamersForVSDStruct ();  Disable TObject streamers for those VSD structs that inherit from TObject directly. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html:8117,error,error,8117,doc/master/classROOT_1_1Experimental_1_1REveVSD.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveVSD.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void StartGDMLWriting (TGeoManager *geomanager, const char *filename, TString option);  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDMLWrite.html:15485,error,error,15485,doc/master/classTGDMLWrite.html,https://root.cern,https://root.cern/doc/master/classTGDMLWrite.html,1,['error'],['error']
Availability,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Protected Attributes; ClassInfo_t * fClass;  ; Int_t fExecuti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQSlot.html:8894,error,error,8894,doc/master/classTQSlot.html,https://root.cern,https://root.cern/doc/master/classTQSlot.html,1,['error'],['error']
Availability,"ead objects from disk, cache the name/object pair for a given LookupCtx. ; Definition at line 7714 of file TCling.cxx. ◆ GetPrompt(). char * TCling::GetPrompt ; (; ). inlinefinalvirtual . Implements TInterpreter.; Definition at line 217 of file TCling.h. ◆ GetRootMapFiles(). TObjArray * TCling::GetRootMapFiles ; (; ); const. inlinefinalvirtual . Implements TInterpreter.; Definition at line 223 of file TCling.h. ◆ GetSecurityError(). int TCling::GetSecurityError ; (; ); const. finalvirtual . Interface to cling function. ; Reimplemented from TInterpreter.; Definition at line 7487 of file TCling.cxx. ◆ GetSharedLibDeps(). const char * TCling::GetSharedLibDeps ; (; const char * ; lib, . bool ; useDyld = false . ). finalvirtual . Get the list a libraries on which the specified lib depends. ; The returned string contains as first element the lib itself. Returns 0 in case the lib does not exist or does not have any dependencies. If useDyld is true, we iterate through all available libraries and try to construct the dependency chain by resolving each symbol. ; Implements TInterpreter.; Definition at line 7289 of file TCling.cxx. ◆ GetSharedLibs(). const char * TCling::GetSharedLibs ; (; ). finalvirtual . Return the list of shared libraries loaded into the process. ; Implements TInterpreter.; Definition at line 6989 of file TCling.cxx. ◆ GetSTLIncludePath(). const char * TCling::GetSTLIncludePath ; (; ); const. finalvirtual . Return the directory containing CINT's stl cintdlls. ; Reimplemented from TInterpreter.; Definition at line 7401 of file TCling.cxx. ◆ GetTopLevelMacroName(). const char * TCling::GetTopLevelMacroName ; (; ); const. finalvirtual . Return the file name of the current un-included interpreted file. ; See the documentation for GetCurrentMacroName(). ; Reimplemented from TInterpreter.; Definition at line 5416 of file TCling.cxx. ◆ GetUsingNamespaces(). std::vector< std::string > TCling::GetUsingNamespaces ; (; ClassInfo_t * ; cl); const. finalvirtual . Get th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:105279,avail,available,105279,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['avail'],['available']
Availability,"ead objects have been initialize. ; If false, the process is (from ROOT's point of view) single threaded. ; Definition at line 309 of file TThread.cxx. ◆ Join() [1/2]. Long_t TThread::Join ; (; Long_t ; id, . void ** ; ret = nullptr . ). static . Static method to join a thread by id. ; Definition at line 534 of file TThread.cxx. ◆ Join() [2/2]. Long_t TThread::Join ; (; void ** ; ret = nullptr). Join this thread. ; Definition at line 510 of file TThread.cxx. ◆ Kill() [1/3]. Int_t TThread::Kill ; (; ). Kill this thread. ; Returns 0 on success, otherwise an error number will be returned. ; Definition at line 590 of file TThread.cxx. ◆ Kill() [2/3]. Int_t TThread::Kill ; (; const char * ; name). static . Static method to kill thread by name. ; Returns 0 on success, otherwise an error number will be returned. ; Definition at line 622 of file TThread.cxx. ◆ Kill() [3/3]. Int_t TThread::Kill ; (; Long_t ; id). static . Static method to kill the thread by id. ; Returns 0 on success, otherwise an error number will be returned. ; Definition at line 606 of file TThread.cxx. ◆ Lock(). Int_t TThread::Lock ; (; ). static . Static method to lock the main thread mutex. ; Definition at line 772 of file TThread.cxx. ◆ operator=(). TThread & TThread::operator= ; (; const TThread & ; ). privatedelete . ◆ Printf(). void TThread::Printf ; (; const char * ; fmt, .  ; ... . ). static . Static method providing a thread safe printf. Appends a newline. ; Definition at line 916 of file TThread.cxx. ◆ Ps(). void TThread::Ps ; (; ). static . Static method listing the existing threads. ; Definition at line 843 of file TThread.cxx. ◆ ps(). static void TThread::ps ; (; ). inlinestatic . Definition at line 132 of file TThread.h. ◆ Run(). Int_t TThread::Run ; (; void * ; arg = nullptr, . const int ; affinity = -1 . ). Start the thread. ; This starts the static method TThread::Function() which calls the user function specified in the TThread ctor with the arg argument. If affinity is specified (>=0),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:26659,error,error,26659,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['error'],['error']
Availability,"ead. Long_t Join(Long_t id, void** ret = 0); Static method to join a thread by id. Long_t SelfId(); Static method returning the id for the current thread. Int_t Run(void* arg = 0); Start the thread. This starts the static method TThread::Function(); which calls the user function specified in the TThread ctor with; the arg argument. Returns 0 on success, otherwise an error number will; be returned. Int_t Kill(); Kill this thread. Returns 0 on success, otherwise an error number will; be returned. Int_t Kill(Long_t id); Static method to kill the thread by id. Returns 0 on success, otherwise; an error number will be returned. Int_t Kill(const char* name); Static method to kill thread by name. Returns 0 on success, otherwise; an error number will be returned. Int_t SetCancelOff(); Static method to turn off thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelOn(); Static method to turn on thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Static method to set the cancellation response type of the calling thread; to asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Static method to set the cancellation response type of the calling thread; to deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Static method to set a cancellation point. Returns 0 on success, otherwise; an error number will be returned. Int_t CleanUpPush(void* free, void* arg = 0); Static method which pushes thread cleanup method on stack.; Returns 0 in case of success and -1 in case of error. Int_t CleanUpPop(Int_t exe = 0); Static method which pops thread cleanup method off stack.; Returns 0 in case of success and -1 in case of error. Int_t CleanUp(); Static method to cleanup the calling thread. void AfterCancel(TThread* th); Static method which is c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TThread.html:12154,error,error,12154,root/html530/TThread.html,https://root.cern,https://root.cern/root/html530/TThread.html,5,['error'],['error']
Availability,"eadWeightsFromStream() [3/3]. virtual void TMVA::MethodBase::ReadWeightsFromStream ; (; TFile & ; ). inlinevirtual . Reimplemented from TMVA::MethodBase.; Definition at line 266 of file MethodBase.h. ◆ ReadWeightsFromXML(). void TMVA::MethodTMlpANN::ReadWeightsFromXML ; (; void * ; wghtnode). virtual . rebuild temporary textfile from xml weightfile and load this file into MLP ; Implements TMVA::MethodBase.; Definition at line 379 of file MethodTMlpANN.cxx. ◆ SetHiddenLayer(). void TMVA::MethodTMlpANN::SetHiddenLayer ; (; TString ; hiddenlayer = """"). inline . Definition at line 81 of file MethodTMlpANN.h. ◆ Streamer(). virtual void TMVA::MethodTMlpANN::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodTMlpANN::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 121 of file MethodTMlpANN.h. ◆ Train(). void TMVA::MethodTMlpANN::Train ; (; void ; ). virtual . performs TMlpANN training available learning methods: . TMultiLayerPerceptron::kStochastic; TMultiLayerPerceptron::kBatch; TMultiLayerPerceptron::kSteepestDescent; TMultiLayerPerceptron::kRibierePolak; TMultiLayerPerceptron::kFletcherReeves; TMultiLayerPerceptron::kBFGS. TMultiLayerPerceptron wants test and training tree at once so merge the training and testing trees from the MVA factory first: ; Implements TMVA::MethodBase.; Definition at line 260 of file MethodTMlpANN.cxx. Member Data Documentation. ◆ fHiddenLayer. TString TMVA::MethodTMlpANN::fHiddenLayer. private . string containing the hidden layer structure ; Definition at line 111 of file MethodTMlpANN.h. ◆ fLayerSpec. TString TMVA::MethodTMlpANN::fLayerSpec. private . Layer specification option. ; Definition at line 106 of file MethodTMlpANN.h. ◆ fLearningMethod. TString TMVA::MethodTMlpANN::fLearningMethod. private . the learning method (given via option string) ; Definition at line 116 of file MethodTMlpANN.h. ◆ fLocalTrainingTree. TTree* TMVA::Method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:35425,avail,available,35425,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['avail'],['available']
Availability,"eader . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionOneDim. class ROOT::Math::IGradientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleRO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IGradientFunctionOneDim.html:1146,avail,available,1146,root/html602/ROOT__Math__IGradientFunctionOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IGradientFunctionOneDim.html,2,['avail'],['available']
Availability,"eader . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::RichardsonDerivator. class ROOT::Math::RichardsonDerivator. User class for calculating the derivatives of a function. It can calculate first (method Derivative1),; second (method Derivative2) and third (method Derivative3) of a function. It uses the Richardson extrapolation method for function derivation in a given interval.; The method use 2 derivative estimates (one computed with step h and one computed with step h/2); to compute a third, more accurate estimation. It is equivalent to the; <a href = http://en.wikipedia.org/wiki/Five-point_stencil>5-point method</a>,; which can be obtained with a Taylor expansion.; A step size should be given, depending on x and f(x).; An optimal step size value minimizes the truncation error of the expansion and the rounding; error in evaluating x+h and f(x+h). A too small h will yield a too large rounding error while a too large; h will give a large truncation error in the derivative approximation.; A good discussion can be found in discussed in; <a href=http://www.nrbook.com/a/bookcpdf/c5-7.pdf>Chapter 5.7</a> of Numerical Recipes in C.; By default a value of 0.001 is uses, acceptable in many cases. This class is implemented using code previosuly in TF1::Derivate{,2,3}(). Now TF1 uses this class. @ingroup Deriv. Function Members (Methods); public:. ~RichardsonDerivator(); doubleDerivative1(double x); doubleDerivative1(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative2(double x); doubleDerivative2(const ROOT::Math::IGenFunction& f, double x, double h); doubleDerivative3(double x); doubleDerivative3(const ROOT::Math::IGenFunction& f, double x, double h); doubleError() const; doubleoperator()(double x); ROOT::Math::RichardsonDerivator&operator=(const ROOT::Math::RichardsonDerivator& rhs); ROOT::Math::RichardsonDerivatorRichardsonDerivator(double h = 0.001); ROOT::Math::RichardsonDerivatorR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html:1109,error,error,1109,root/html526/ROOT__Math__RichardsonDerivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__RichardsonDerivator.html,14,['error'],['error']
Availability,"eader file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoCompositeShape. class TGeoCompositeShape: public TGeoBBox. TGeoCompositeShape - class handling Boolean composition of shapes. Composite shapes are Boolean combination of two or more shape; components. The supported boolean operations are union (+), intersection (*); and subtraction. Composite shapes derive from the base TGeoShape class,; therefore providing all shape features : computation of bounding box, finding; if a given point is inside or outside the combination, as well as computing the; distance to entering/exiting. It can be directly used for creating volumes or; used in the definition of other composite shapes.; Composite shapes are provided in order to complement and extend the set of; basic shape primitives. They have a binary tree internal structure, therefore; all shape-related geometry queries are signals propagated from top level down; to the final leaves, while the provided answers are assembled and interpreted; back at top. This CSG hierarchy is effective for small number of components,; while performance drops dramatically for large structures. Building a complete; geometry in this style is virtually possible but highly not recommended. Structure of composite shapes. A composite shape can always be regarded as the result of a Boolean operation; between only two shape components. All information identifying these two; components as well as their positions with respect to the frame of the composite; is represented by an object called Boolean node. A composite shape just have; a pointer to such a Boolean node. Since the shape components may also be; composites, they will also contain binary Boolean nodes branching other two; shapes in the hierarcy. Any such branch ends-up when the final leaves are no; longer composite shapes, but basic primitives. /*. */. Suppose that A, B, C and D represent bas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCompositeShape.html:1115,down,down,1115,root/html528/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html528/TGeoCompositeShape.html,6,['down'],['down']
Availability,"eadids = (pthread_t *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20082 sizeof(pthread_t),; 20083 ctx);; 20084 ; 20085 if (ctx->worker_threadids == NULL) {; 20086 const char *err_msg = ""Not enough memory for worker thread ID array"";; 20087 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20088 ; 20089 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20090 mg_snprintf(NULL,; 20091 NULL, /* No truncation check for error buffers */; 20092 error->text,; 20093 error->text_buffer_size,; 20094 ""%s"",; 20095 err_msg);; 20096 }; 20097 free_context(ctx);; 20098 pthread_setspecific(sTlsKey, NULL);; 20099 return NULL;; 20100 }; 20101 ctx->worker_connections =; 20102 (struct mg_connection *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20103 sizeof(struct mg_connection),; 20104 ctx);; 20105 if (ctx->worker_connections == NULL) {; 20106 const char *err_msg =; 20107 ""Not enough memory for worker thread connection array"";; 20108 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20109 ; 20110 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20111 mg_snprintf(NULL,; 20112 NULL, /* No truncation check for error buffers */; 20113 error->text,; 20114 error->text_buffer_size,; 20115 ""%s"",; 20116 err_msg);; 20117 }; 20118 free_context(ctx);; 20119 pthread_setspecific(sTlsKey, NULL);; 20120 return NULL;; 20121 }; 20122 ; 20123#if defined(ALTERNATIVE_QUEUE); 20124 ctx->client_wait_events =; 20125 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20126 sizeof(ctx->client_wait_events[0]),; 20127 ctx);; 20128 if (ctx->client_wait_events == NULL) {; 20129 const char *err_msg = ""Not enough memory for worker event array"";; 20130 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20131 mg_free(ctx->worker_threadids);; 20132 ; 20133 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20134 mg_snprintf(NULL,; 20135 NULL, /* No truncation check for error buffers */; 20136 error->text,; 20137 error->text_buffer_size,; 20138 ""%s"",; 20139 err_msg);; 20140 }; 20141 free_context(ctx);; 20142 pthread_setspecific(sTlsKey,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:601052,error,error,601052,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"eadids = (pthread_t *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20083 sizeof(pthread_t),; 20084 ctx);; 20085 ; 20086 if (ctx->worker_threadids == NULL) {; 20087 const char *err_msg = ""Not enough memory for worker thread ID array"";; 20088 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20089 ; 20090 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20091 mg_snprintf(NULL,; 20092 NULL, /* No truncation check for error buffers */; 20093 error->text,; 20094 error->text_buffer_size,; 20095 ""%s"",; 20096 err_msg);; 20097 }; 20098 free_context(ctx);; 20099 pthread_setspecific(sTlsKey, NULL);; 20100 return NULL;; 20101 }; 20102 ctx->worker_connections =; 20103 (struct mg_connection *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20104 sizeof(struct mg_connection),; 20105 ctx);; 20106 if (ctx->worker_connections == NULL) {; 20107 const char *err_msg =; 20108 ""Not enough memory for worker thread connection array"";; 20109 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20110 ; 20111 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20112 mg_snprintf(NULL,; 20113 NULL, /* No truncation check for error buffers */; 20114 error->text,; 20115 error->text_buffer_size,; 20116 ""%s"",; 20117 err_msg);; 20118 }; 20119 free_context(ctx);; 20120 pthread_setspecific(sTlsKey, NULL);; 20121 return NULL;; 20122 }; 20123 ; 20124#if defined(ALTERNATIVE_QUEUE); 20125 ctx->client_wait_events =; 20126 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20127 sizeof(ctx->client_wait_events[0]),; 20128 ctx);; 20129 if (ctx->client_wait_events == NULL) {; 20130 const char *err_msg = ""Not enough memory for worker event array"";; 20131 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20132 mg_free(ctx->worker_threadids);; 20133 ; 20134 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20135 mg_snprintf(NULL,; 20136 NULL, /* No truncation check for error buffers */; 20137 error->text,; 20138 error->text_buffer_size,; 20139 ""%s"",; 20140 err_msg);; 20141 }; 20142 free_context(ctx);; 20143 pthread_setspecific(sTlsKey,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:601085,error,error,601085,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"eadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/1.128.0/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 778 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 937 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 674 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:20046,error,error,20046,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['error'],['error']
Availability,"eadless: command to start Firefox in headless mode, like ""fork:--headless --private-window --no-remote $profile $url""; WebGui.FirefoxInteractive: command to start Firefox in interactive mode, like ""$prog --private-window \'$url\' &""; WebGui.FirefoxProfile: name of Firefox profile to use; WebGui.FirefoxProfilePath: file path to Firefox profile; WebGui.FirefoxRandomProfile: usage of random Firefox profile -1 never, 0 - only for headless mode (dflt), 1 - always; WebGui.LaunchTmout: time required to start process in seconds (default 30 s); WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings; WebGui.RecordData: if specified enables data recording for each web window 0 - off, 1 - on; WebGui.JsonComp: compression factor for JSON conversion, if not specified - each widget uses own default values; WebGui.ForceHttp: 0 - off (default), 1 - always create real http server to run web window; WebGui.Console: -1 - output only console.error(), 0 - add console.warn(), 1 - add console.log() output; WebGui.ConnCredits: 10 - number of packets which can be send by server or client without acknowledge from receiving side; WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3; THttpServer-related parameters documented in CreateServer method ; Definition at line 692 of file RWebWindowsManager.cxx. ◆ Terminate(). void RWebWindowsManager::Terminate ; (; ). Terminate http server and ROOT application. ; Definition at line 851 of file RWebWindowsManager.cxx. ◆ Unregister(). void RWebWindowsManager::Unregister ; (; RWebWindow & ; win). private . Release all references to specified window Called from RWebWindow destructor. ; Definition at line 591 of file RWebWindowsManager.cxx. ◆ WaitFor(). int RWebWindowsManager::WaitFor ; (; RWebWindow & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html:17607,error,error,17607,doc/v632/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindowsManager.html,1,['error'],['error']
Availability,"eafLen = 1;; 7798 }; 7799 ; 7800 leafData = tok;; 7801 } else {; 7802 // append token to laf data:; 7803 leafData += "" "";; 7804 leafData += tok;; 7805 }; 7806 --remainingLeafLen;; 7807 if (remainingLeafLen) {; 7808 // need more columns for this branch:; 7809 continue;; 7810 }; 7811 ++iBranch;; 7812 ; 7813 // initialize stringstream with token; 7814 sToken.clear();; 7815 sToken.seekp(0, std::ios_base::beg);; 7816 sToken.str(leafData.Data());; 7817 sToken.seekg(0, std::ios_base::beg);; 7818 leaf->ReadValue(sToken, 0 /* 0 = ""all"" */);; 7819 if (gDebug > 3) {; 7820 Info(""ReadStream"", ""%5lld:%3d:%d%d%d%d:%d%d%d%d:%s"",; 7821 nlines, iBranch,; 7822 (int)sToken.good(), (int)sToken.fail(),; 7823 (int)sToken.bad(), (int)sToken.eof(),; 7824 (int)in.good(), (int)in.fail(),; 7825 (int)in.bad(), (int)in.eof(),; 7826 sToken.str().c_str());; 7827 }; 7828 ; 7829 // Error handling; 7830 if (sToken.bad()) {; 7831 // How could that happen for a stringstream?; 7832 Warning(""ReadStream"",; 7833 ""Buffer error while reading data for branch %s on line %lld"",; 7834 branch->GetName(), nlines);; 7835 } else if (!sToken.eof()) {; 7836 if (sToken.fail()) {; 7837 Warning(""ReadStream"",; 7838 ""Couldn't read formatted data in \""%s\"" for branch %s on line %lld; ignoring line"",; 7839 tok.Data(), branch->GetName(), nlines);; 7840 goodLine = false;; 7841 } else {; 7842 std::string remainder;; 7843 std::getline(sToken, remainder, newline);; 7844 if (!remainder.empty()) {; 7845 Warning(""ReadStream"",; 7846 ""Ignoring trailing \""%s\"" while reading data for branch %s on line %lld"",; 7847 remainder.c_str(), branch->GetName(), nlines);; 7848 }; 7849 }; 7850 }; 7851 } // tokenizer loop; 7852 ; 7853 if (iBranch < nbranches) {; 7854 Warning(""ReadStream"",; 7855 ""Read too few columns (%d < %d) in line %lld; ignoring line"",; 7856 iBranch, nbranches, nlines);; 7857 goodLine = false;; 7858 } else if (pos != kNPOS) {; 7859 sLine = sLine.Strip(TString::kTrailing);; 7860 if (pos < sLine.Length()) {; 7861 Warning(""ReadStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:306502,error,error,306502,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['error'],['error']
Availability,"eal dimension of CERF-LUT. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooComplex FastComplexErrFunc(const RooComplex& z). Double_t FastComplexErrFuncRe(const RooComplex& z). Double_t FastComplexErrFuncIm(const RooComplex& z). void cacheCERF(Bool_t flag = kTRUE). RooComplex ComplexErrFunc(Double_t re, Double_t im = 0); Return CERNlib complex error function for Z(re,im). RooComplex ComplexErrFunc(const RooComplex& z); Return CERNlib complex error function. This code is translated from the fortran version in the CERN mathlib.; (see ftp://asisftp.cern.ch/cernlib/share/pro/src/mathlib/gen/c/cwerf64.F). void initFastCERF(Int_t reBins = 800, Double_t reMin = -4.0, Double_t reMax = 4.0, Int_t imBins = 1000, Double_t imMin = -4.0, Double_t imMax = 6.0); Allocate and initialize lookup table for interpolated complex error function; for given grid parameters. void cleanup(). RooComplex ITPComplexErrFunc(const RooComplex& z, Int_t nOrder); Return complex error function interpolated from lookup tabel created; by initFastCERF(). Interpolation is performed in Im and Re plane; to specified order. Double_t ITPComplexErrFuncRe(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().re() because only the real lookup table; is interpolated. Double_t ITPComplexErrFuncIm(const RooComplex& z, Int_t nOrder); Return real component of complex error function interpolated from; lookup table created by initFastCERF(). Interpolation is performed in; Im and Re plane to specified order. This functions is noticably faster; than ITPComplexErrrFunc().im() because only the imaginary lookup table; is interpolated. Double_t interpolate(Double_t* yArr, Int_t nOrder, Double_t x); Interpolate array 'ya' with 'n' elements for 'x' (between 0 and 'n'-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMath.html:3517,error,error,3517,root/html526/RooMath.html,https://root.cern,https://root.cern/root/html526/RooMath.html,4,['error'],['error']
Availability,"eam https://github.com/root-project/root; Make sure you are on the master branch locally and pull the latest changes from upstream:; git checkout master; git pull upstream master; Go back to your local branch and rebase the last changes from master:; git checkout histogram-race-condition-fix; git rebase master; Push your new updated local branch to your GitHub repository (origin):; git push --force; Summary. The entire workflow is summarized in the image above. First, we cloned root-project/root, and cloned it to our local machine. Then after making the commit, we pushed the change to origin. Optionally, we can pull down the last changes from upstream and rebase our branch onto the current master and force-push this to origin. After this, we create a pull request on GitHub from origin. It is important to note that it is not necessary to fork and clone for each contribution.; Merging a pull request locally; If the pull request does not have any conflicts with the master branch, it is possible to apply the changes locally by downloading a patch and piping it to git am with; wget -qO- https://github.com/root-project/root/pull/<PR#>.patch | git am; If you have conflicts, the preferred method is to rebase your branch onto master:; git remote update && git checkout master && git pull && git rebase master <your branch>; When a conflict exists with a commit, git will interrupt the rebase and let you resolve them by editing your files. Once the conflict is resolved, use; git add <conflicting files> && git rebase --continue; to continue the rebasing process. After all conflicts have been resolved, you can check that your changes are really what you want with git log -p master..<your branch> then push the result (without using --force).; Resources. Git How Tos; Git Tips and Tricks; GitHub and Git Foundations (YouTube). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:4998,down,downloading,4998,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['down'],['downloading']
Availability,"eam, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:47802,error,error,47802,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,2,['error'],['error']
Availability,"eamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSocket;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:3796,error,error,3796,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"eamerInfo::GenerateHeaderFile ; (; const char * ; dirname, . const TList * ; subClasses = nullptr, . const TList * ; extrainfos = nullptr . ). pure virtual . Implemented in TStreamerInfo. ◆ GenerateInfoForPair() [1/2]. virtual TVirtualStreamerInfo * TVirtualStreamerInfo::GenerateInfoForPair ; (; const std::string & ; firstname, . const std::string & ; secondname, . bool ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). pure virtual . Implemented in TStreamerInfo. ◆ GenerateInfoForPair() [2/2]. virtual TVirtualStreamerInfo * TVirtualStreamerInfo::GenerateInfoForPair ; (; const std::string & ; pairclassname, . bool ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). pure virtual . Generate the TClass and TStreamerInfo for the requested pair. ; This creates a TVirtualStreamerInfo for the pair and trigger the BuildCheck/Old to provokes the creation of the corresponding TClass. This relies on the dictionary for std::pair<const int, int> to already exist (or the interpreter information being available) as it is used as a template. NoteThe returned object is owned by the caller. ; Implemented in TStreamerInfo. ◆ GenExplicitClassStreamer(). virtual TClassStreamer * TVirtualStreamerInfo::GenExplicitClassStreamer ; (; const ::ROOT::Detail::TCollectionProxyInfo & ; info, . TClass * ; cl . ). pure virtual . Implemented in TStreamerInfo. ◆ GenExplicitProxy(). virtual TVirtualCollectionProxy * TVirtualStreamerInfo::GenExplicitProxy ; (; const ::ROOT::Detail::TCollectionProxyInfo & ; info, . TClass * ; cl . ). pure virtual . Implemented in TStreamerInfo. ◆ GetActualClass(). virtual TClass * TVirtualStreamerInfo::GetActualClass ; (; const void * ; obj); const. pure virtual . Implemented in TStreamerInfo. ◆ GetCheckSum(). virtual UInt_t TVirtualStreamerInfo::GetCheckSum ; (; ); const. pure virtual . Implemented in TStreamerInfo. ◆ GetClass(). virtual TClass * TVirtualStreamerInfo::GetClass ; (; ); const. pure virtual . Implemented in TStreamerInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:25914,avail,available,25914,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['avail'],['available']
Availability,"eamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemDirectory.html:6159,error,error,6159,doc/master/classTSystemDirectory.html,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html,2,['error'],['error']
Availability,"ean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooCategoryProxyRooSimultaneous::_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:41778,error,errors,41778,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,1,['error'],['errors']
Availability,"ean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TMatrixDSym_cov; TMatrixDSym_covI; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Double_t_det; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; map<int,GenData>_genCache!; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; RooListProxy_mu; TVectorD_muVec! Do not persist; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:39272,error,errors,39272,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,1,['error'],['errors']
Availability,"ean); Double_t PoissonD(Double_t mean); Poisson random numbers. Int_t Binomial(Int_t ntot,Double_t prob ); Binomial Random numbers. Circle(Double_t &x,Double_t &y,Double_t r); Generate a random 2D point (x,y) in; a circle of radius r. Sphere(Double_t &x,Double_t &y,; Double_t &z,Double_t r); Generate a random 3D point (x,y,z) in; a sphere of radius r. Rannor(Double_t &a,Double_t &b); Generate a pair of Gaussian random; numbers with mu=0 and sigma=1. 13.4.8 UNURAN; An interface to a new package, UNU.RAN, (Universal Non Uniform Random number generator for generating non-uniform pseudo-random numbers) was introduced in ROOT v5.16.; UNU.RAN is an ANSI C library licensed under GPL. It contains universal (also called automatic or black-box) algorithms that can generate random numbers from large classes of continuous (in one or multi-dimensions), discrete distributions, empirical distributions (like histograms) and also from practically all standard distributions. An extensive online documentation is available at the UNU.RAN Web Site http://statmath.wu-wien.ac.at/unuran/; The ROOT class TUnuran is used to interface the UNURAN package. It can be used as following:. With the UNU.RAN native, string API for pre-defined distributions (see UNU.RAN documentation for the allowed string values at http://statistik.wu-wien.ac.at/unuran/doc/unuran.html ):. TUnuran unr;; // initialize unuran to generate normal random numbers using; // a ""arou"" method; unr.Init(""normal()"",""method=arou"");; ...; // sample distributions N times (generate N random numbers); for (int i = 0; i<N; ++i); double x = unr.Sample();. For continuous 1D distribution object via the class TUnuranContDist that can be created for example from a TF1 function providing the pdf (probability density function) . The user can optionally provide additional information via TUnuranContDist::SetDomain(min,max) like the domain() for generating numbers in a restricted region. // 1D case: create a distribution from two TF1 object; // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:672064,avail,available,672064,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"eans wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection.; Collect also stops its execution from time to time to check for new; workers in Dynamic Startup mode. Int_t PollForNewWorkers(); Asks the PROOF Serv for new workers in Dynamic Startup mode and activates; them. Returns the number of new workers found, or <0 on errors. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNextFreeMerger(); Return a merger, which is both active and still accepts some workers to be; assigned to it. It works on the 'round-robin' basis. void AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. void ActivateAsyncInput(); Activate the a-sync input handler. void DeActivateAsyncInput(); De-activate a-sync input handler. Int_t GetActiveMergersCount(); Get the active mergers count. Bool_t CreateMerger(TSlave* sl, Int_t port); Create a new merger. void MarkBad(TSlave* wrk, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:47417,failure,failure,47417,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['failure'],['failure']
Availability,"eanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMonitor*fAllMonitormonitor activity on all valid slave sockets; TList*fAvailablePackageslist of available packages; TList*fBadSlavesdead slaves (subset of all slaves); Long64_tfBytesReadynumber of bytes staged; Int_tfCollectTimeoutTimeout for (some) collect actions; TStringfConfDirdirectory containing cluster config information; TStringfConfFilefile containing config information; TStringfDataPoolUrldefault data pool entry point URL; Bool_tfDataReadytrue if data is ready to be analyzed; Bool_tfDynamicStartupare the workers started dynamically?; TList*fEnabledPackageslist of enabled packages; TStringfImagemaster's image name; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TProofMgr*fManagermanager to which this session belongs (if any); Bool_tfMasterServtrue if we are a master server; TStringTNamed::fNameobject identifier; Int_tfProtocolremote PROOF server protocol version number; TProof::EQueryModefQueryModedefault query mode; TList*fRunningDSetsTemporary datasets used for async running; TProofMgr::EServTypefServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*fSlaveslist of all slave servers as in config file; TStringTNamed::fTitleobject title; Long64_tfTotalBytesnumber of bytes to be analyzed; TUrlfUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*fgSemaphoresemaphore to control no of parallel startup threads. private:. TMonitor*fActiveMonitormonitor activity on all active slave sockets; TList*fActiveSlaveslist of active slaves (subset of all slaves); TMonitor*fAllUniqueMonitormonitor activity on all unique slave sockets, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:26172,avail,available,26172,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['avail'],['available']
Availability,"eap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidKeyPressed(TGListTreeItem* entry, UInt_t keysym, UInt_t mask)SIGNAL ; virtual voidLineDown(Bool_t select = kFALSE); virtual voidTGContainer::LineLeft(Bool_t select = kFALSE); virtual voidTGContainer::LineRight(Bool_t select = kFALSE); virtual voidLineUp(Bool_t select = kFALSE); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidMouseOver(TGListTreeItem* entry)SIGNAL ; virtual voidMouseOver(TGListTreeItem* entry, UInt_t mask)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual Int_tTGContainer::NumItems() const; virtual Int_tTGContainer::NumSelected() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOpenItem(TGListTreeItem* item); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPageDown(Bool_t select = kFALSE); virtual voidPageUp(Bool_t select = kFAL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListTree.html:14474,mask,mask,14474,root/html602/TGListTree.html,https://root.cern,https://root.cern/root/html602/TGListTree.html,2,['mask'],['mask']
Availability,"ear equation A*x=b. The same factorizations are used as in the matrix inversion. However, only 1 forward/back-substitution has to be used instead of msize as in the inversion of (msize x msize) matrix. As a consequence the same differences are observed but less amplified. CLHEP shows the same numerical issues as in step the matrix inversion. Since ROOT3.10 has no dedicated equation solver, the solution is calculated through x=A-1*b. This will be slower and numerically not as stable.; \((A^{T}*A)^{-1}*A^{T}\) timing results for calculation of the pseudo inverse of matrix a. The sequence of operations measures the impact of several calls to constructors and destructors in the C++ packages versus a C library like GSL. Speed comparison between the different matrix packages. 15 Adding a Class; 15.1 The Role of TObject; The light-weight TObject class provides the default behavior and protocol for the objects in the ROOT system. Specifically, it is the primary interface to classes providing object I/O, error handling, inspection, introspection, and drawing. The interface to this service is via abstract classes.; 15.1.1 Introspection, Reflection and Run Time Type Identification; Introspection, which is also referred to as reflection, or run time type identification (RTTI) is the ability of a class to reflect upon itself or to ""look inside itself. ROOT implements reflection with the TClass class. It provides all the information about a class, a full description of data members and methods, including the comment field and the method parameter types. A class with the ClassDef macro has the ability to obtain a TClass with the IsA method.; TClass *cl = obj->IsA();; It returns a TClass. In addition, an object can directly get the class name and the base classes by:; const char* name = obj->ClassName();; If the class is a descendent of TObject, you can check if an object inherits from a specific class, you can use the InheritsFrom method. This method returns kTrue if the object inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:804743,error,error,804743,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"ear for output neurons or a sigmoid for hidden layers. This is; useful because of two theorems:. A linear combination of sigmoids can approximate any; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In all methods implemented, one needs to compute; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especialy the; derivative of compound functions, one can write:. for a neuton: product of the local derivative with the; weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented.; Stochastic minimization: This; is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; $w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)$. with. $\Delta w_{ij}(t) = - \eta(\d e_p / \d w_{ij} +; \delta) + \epsilon \Deltaw_{ij}(t-1)$; The parameters for this method are Eta, EtaDecay, Delta and; Epsilon.; Steepest descent with fixed step size; (batch learning): It is the same as the stochastic; minimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm: Weights; are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:4216,error,errors,4216,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['error'],['errors']
Availability,"ear(). Bool_t TFormula::IsLinear ; (; ); const. inline . Definition at line 273 of file TFormula.h. ◆ IsOperator(). Bool_t TFormula::IsOperator ; (; const char ; c). staticprotected . Definition at line 286 of file TFormula.cxx. ◆ IsScientificNotation(). Bool_t TFormula::IsScientificNotation ; (; const TString & ; formula, . int ; ipos . ). staticprotected . Definition at line 318 of file TFormula.cxx. ◆ IsValid(). Bool_t TFormula::IsValid ; (; ); const. inline . Definition at line 271 of file TFormula.h. ◆ IsVectorized(). Bool_t TFormula::IsVectorized ; (; ); const. inline . Definition at line 272 of file TFormula.h. ◆ operator=(). TFormula & TFormula::operator= ; (; const TFormula & ; rhs). = operator. ; Definition at line 597 of file TFormula.cxx. ◆ PrepareEvalMethod(). bool TFormula::PrepareEvalMethod ; (; ). private . Sets TMethodCall to function inside Cling environment. ; TFormula uses it to execute function. After call, TFormula should be ready to evaluate formula. Returns false on failure. ; Definition at line 861 of file TFormula.cxx. ◆ PrepareFormula(). Bool_t TFormula::PrepareFormula ; (; TString & ; formula). protected . prepare the formula to be executed normally is called with fFormula ; Definition at line 1793 of file TFormula.cxx. ◆ PreProcessFormula(). void TFormula::PreProcessFormula ; (; TString & ; formula). protected . Preprocessing of formula Replace all ** by ^, and removes spaces. ; Handle also parametrized functions like polN,gaus,expo,landau and exponentiation. Similar functionality should be added here. ; Definition at line 1771 of file TFormula.cxx. ◆ Print(). void TFormula::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the formula and its attributes. ; Reimplemented from TObject.; Definition at line 3611 of file TFormula.cxx. ◆ ProcessFormula(). void TFormula::ProcessFormula ; (; TString & ; formula). protected . Iterates through functors in fFuncs and performs the appropriate action. ; If functor has 0 arguments ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFormula.html:45415,failure,failure,45415,doc/master/classTFormula.html,https://root.cern,https://root.cern/doc/master/classTFormula.html,1,['failure'],['failure']
Availability,"ear(Option_t*); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Bool_tCompareContent(TClass* cl, TVirtualStreamerInfo* info, Bool_t warn, Bool_t complete, TFile* file); virtual voidCompile(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static TVirtualStreamerInfo*Factory(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidForceWriteInfo(TFile* file, Bool_t force = kFALSE); virtual TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); virtual TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); virtual Int_tGenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0); virtual TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual TVirtualCollectionProxy*GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); virtual TClass*GetActualClass(const void* obj) const; virtual UInt_tGetCheckSum() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualStreamerInfo.html:2158,error,error,2158,root/html534/TVirtualStreamerInfo.html,https://root.cern,https://root.cern/root/html534/TVirtualStreamerInfo.html,3,['error'],['error']
Availability,"earCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNLLVar, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealMPFE, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooXYChi2Var, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 558 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 463 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 317 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 434 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 414 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 411 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 413 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 412 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:152986,error,error,152986,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['error'],['error']
Availability,"earch. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TMultiDimFit. class TMultiDimFit: public TNamed. /*; >; ; Multidimensional Fits in ROOT. Overview; . A common problem encountered in different fields of applied science is; to find an expression for one physical quantity in terms of several; others, which are directly measurable.; ; An example in high energy physics is the evaluation of the momentum of; a charged particle from the observation of its trajectory in a magnetic; field. The problem is to relate the momentum of the particle to the; observations, which may consists of of positional measurements at; intervals along the particle trajectory.; ; The exact functional relationship between the measured quantities; (e.g., the space-points) and the dependent quantity (e.g., the; momentum) is in general not known, but one possible way of solving the; problem, is to find an expression which reliably approximates the; dependence of the momentum on the observations.; ; This explicit function of the observations can be obtained by a; least squares fitting procedure applied to a representive; sample of the data, for which the dependent quantity (e.g., momentum); and the independent observations are known. The function can then be; used to compute the quantity of interest for new observations of the; independent variables.; ; This class TMultiDimFit implements such a procedure in; ROOT. It is largely based on the CERNLIB MUDIFI package; [2]. Though the basic concepts are still sound, and; therefore kept, a few implementation details have changed, and this; class can take advantage of MINUIT [4] to improve the errors; of the fitting, thanks to the class TMinuit.; ; In [5] and [6] H. Wind demonstrates the utility; of this procedure in the context of tracking, magnetic field; parameterisation, and so on. The outline of the method used in this; class is based",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:1099,reliab,reliably,1099,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['reliab'],['reliably']
Availability,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:925,error,errors,925,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,2,['error'],['errors']
Availability,"earching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; RooNumConvPdf Class ReferenceRooFit » RooFit Core. ; Numeric 1-dimensional convolution operator PDF. ; This class can convolve any PDF with any other PDF using a straightforward numeric calculation of the convolution integral This class should be used as last resort as numeric convolution calculated this way is computationally intensive and prone to stability fitting problems. The preferred way to compute numeric convolutions is RooFFTConvPdf, which calculates convolutions using Fourier Transforms (requires external free FFTW3 package) RooNumConvPdf implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result. The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormula",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:1150,robust,robust,1150,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['robust'],['robust']
Availability,"earching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:1230,avail,available,1230,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,2,"['avail', 'error']","['available', 'error']"
Availability,"eases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it yourself.; Environment Variables; ROOT expects ROOTSYS, PATH and LD_LIBRARY_PATH to be set correctly. If which root does not show anything then use the script that does all of that:; source wherever/root/is/bin/thisroot.sh. Starting ROOT; Now you can start ROOT using root or root -l to suppress the logo. See root --help for more options. . ‹ ROOT 6 Analysis Workshop; up; 1. Extracting an object from a TFile ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:1941,down,download,1941,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,1,['down'],['download']
Availability,"east one coefficient. ;  ; double bernsteinIntegral (double xlo, double xhi, double xmin, double xmax, double *coefs, int nCoefs);  ; double bifurGauss (double x, double mean, double sigmaL, double sigmaR);  ; double bifurGaussIntegral (double xMin, double xMax, double mean, double sigmaL, double sigmaR);  ; double binomial (int n, int k);  Calculates the binomial coefficient n over k. ;  ; double cbShape (double m, double m0, double sigma, double alpha, double n);  ; double cbShapeIntegral (double mMin, double mMax, double m0, double sigma, double alpha, double n);  ; double chebychev (double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax);  ; double chebychevIntegral (double const *coeffs, unsigned int nCoeffs, double xMin, double xMax, double xMinFull, double xMaxFull);  ; double constraintSum (double const *comp, unsigned int compSize);  ; double efficiency (double effFuncVal, int catIndex, int sigCatIndex);  ; double effProd (double eff, double pdf);  ; double exponentialIntegral (double xMin, double xMax, double constant);  ; double fast_fma (double x, double y, double z) noexcept;  use fast FMA if available, fall back to normal arithmetic if not ;  ; double flexibleInterp (unsigned int code, double const *params, unsigned int n, double const *low, double const *high, double boundary, double nominal, int doCutoff);  ; double flexibleInterpSingle (unsigned int code, double low, double high, double boundary, double nominal, double paramVal, double res);  ; double gaussian (double x, double mean, double sigma);  Function to evaluate an un-normalized RooGaussian. ;  ; double gaussianIntegral (double xMin, double xMax, double mean, double sigma);  Function to calculate the integral of an un-normalized RooGaussian over x. ;  ; unsigned int getUniformBinning (double low, double high, double val, unsigned int numBins);  ; double interpolate1d (double low, double high, double val, unsigned int numBins, double const *vals);  ; double landau (double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:1515,avail,available,1515,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['avail'],['available']
Availability,"eate a new object G that represents the normalized projection:. Integral [ F[x,y,p] , { y } ]; G[x,p] = ---------------------------------; Integral [ F[x,y,p] , { x,y } ]. where F[x,y,p] is the function we represent, ""x"" are the; specified dependentVars, ""y"" are the specified projectedVars, and; ""p"" are our remaining variables (""parameters""). Return a; pointer to the newly created object, or else zero in case of an; error. The caller is responsible for deleting the contents of; cloneSet (which includes the returned projection object). TH1 * fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Fill the ROOT histogram 'hist' with values sampled from this; function at the bin centers. Our value is calculated by first; integrating out any variables in projectedVars and then scaling; the result by scaleFactor. Returns a pointer to the input; histogram, or zero in case of an error. The input histogram can; be any TH1 subclass, and therefore of arbitrary; dimension. Variables are matched with the (x,y,...) dimensions of; the input histogram according to the order in which they appear; in the input plotVars list. If scaleForDensity is true the; histogram is filled with a the functions density rather than; the functions value (i.e. the value at the bin center is multiplied; with bin volume). RooDataHist* fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; Fill a RooDataHist with values sampled from this function at the; bin centers. If extendedMode is true, the p.d.f. values is multiplied; by the number of expected events in each bin. An optional scaling by a given scaleFactor can be performed.; Returns a pointer to the input RooDataHist, or zero; in case of an error. If correctForBinSize is true the RooDataHist; is filled with the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:39445,error,error,39445,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['error'],['error']
Availability,"eate directories. Returns 0 in case of success and -1 in case of failure. ; Definition at line 667 of file TFTP.cxx. ◆ mkdir(). void TFTP::mkdir ; (; const char * ; dir); const. inline . Definition at line 114 of file TFTP.h. ◆ mv(). void TFTP::mv ; (; const char * ; file1, . const char * ; file2 . ); const. inline . Definition at line 118 of file TFTP.h. ◆ OpenDirectory(). Bool_t TFTP::OpenDirectory ; (; const char * ; dir, . Bool_t ; print = kFALSE . ). Open a directory via rootd. ; Returns kTRUE in case of success. Returns kFALSE in case of error. ; Definition at line 914 of file TFTP.cxx. ◆ operator=(). void TFTP::operator= ; (; const TFTP & ; ). privatedelete . ◆ Print(). void TFTP::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print some info about the FTP connection. ; Reimplemented from TObject.; Definition at line 157 of file TFTP.cxx. ◆ PrintDirectory(). Int_t TFTP::PrintDirectory ; (; ); const. Print path of remote working directory. ; Returns 0 in case of succes and -1 in cse of failure. ; Definition at line 764 of file TFTP.cxx. ◆ PrintError(). void TFTP::PrintError ; (; const char * ; where, . Int_t ; err . ); const. private . Print error string depending on error code. ; Definition at line 182 of file TFTP.cxx. ◆ put(). void TFTP::put ; (; const char * ; file, . const char * ; remoteName = nullptr . ). inline . Definition at line 111 of file TFTP.h. ◆ PutFile(). Long64_t TFTP::PutFile ; (; const char * ; file, . const char * ; remoteName = nullptr . ). Transfer file to remote host. ; Returns number of bytes sent or < 0 in case of error. Error -1 connection is still open, error -2 connection has been closed. In case of failure fRestartAt is set to the number of bytes correclty transfered. Calling PutFile() immediately afterwards will restart at fRestartAt. If this is not desired call SetRestartAt(0) before calling PutFile(). If rootd reports that the file is locked, and you are sure this is not the case (e.g. due to a crash), you can forc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:21480,failure,failure,21480,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['failure'],['failure']
Availability,"eates a subset of the files that have the kStaged & !kCorrupted bit set. ; Definition at line 256 of file TFileCollection.cxx. ◆ GetTotalEntries(). Long64_t TFileCollection::GetTotalEntries ; (; const char * ; tree); const. Returns the number of entries for the specified tree (retrieved from meta data). ; If tree is not specified, use the default tree name. Returns -1 in case the specified tree is not found. ; Definition at line 622 of file TFileCollection.cxx. ◆ GetTotalSize(). Long64_t TFileCollection::GetTotalSize ; (; ); const. inline . Definition at line 85 of file TFileCollection.h. ◆ IsA(). TClass * TFileCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 108 of file TFileCollection.h. ◆ Merge(). Long64_t TFileCollection::Merge ; (; TCollection * ; li). Merge all TFileCollection objects in li into this TFileCollection object. ; Updates counters at the end. Returns the number of merged collections or -1 in case of error. ; Definition at line 280 of file TFileCollection.cxx. ◆ operator=(). TFileCollection & TFileCollection::operator= ; (; const TFileCollection & ; ). privatedelete . ◆ Print(). void TFileCollection::Print ; (; Option_t * ; option = """"); const. overridevirtual . Prints the contents of the TFileCollection. ; If option contains:. 'M' print global meta information; 'F' print all the files in the collection in compact form (current url, default tree name|class|entries, md5); 'L' together with 'F', print all the files in the collection in long form (uuid, md5, all URLs, all meta objects; on many lines); ""filter:[SsCc]"" invokes PrintDetailed() which prints out dataset content in a formatted fashion by filtering on files which are (S)taged or not (s), (C)orrupted or not (c) . Reimplemented from TObject.; Definition at line 404 of file TFileCollection.cxx. ◆ PrintDetailed(). void TFileCollection::PrintDetailed ; (; TString & ; showOnly); const. private . Print det",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCollection.html:22231,error,error,22231,doc/master/classTFileCollection.html,https://root.cern,https://root.cern/doc/master/classTFileCollection.html,1,['error'],['error']
Availability,"eation date, 3 - file modification date; utc - select timeZone to ‘UTC’; datex - X position of date; datey - Y position of date; optfile - plot file name on the canvas, 1 - file name, 2 - full file URL, 3 - object item name; opttitle - disable/enable drawing of object title in the canvas; nomenu - disable context menu; notouch - disable touch events handling; progress - switch progress display mode between ‘off’, ‘on’ and ‘modal’. For instance:. https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx;1; https://root.cern/js/latest/?file=../files/hsimple.root&nobrowser&item=hpxpy;1&opt=colz; https://root.cern/js/latest/?file=../files/hsimple.root&noselect&layout=grid2x2&item=hprof;1. Following layouts are supported:. simple - available space used for single object (default); flex - creates as many frames as necessary, each can be individually moved/enlarged; tabs - tabs for each object drawing; gridNxM - fixed-size grid with NxM frames; vertN - N frames sorted in vertical direction (like gridi1xN); horizN - N frames sorted in horizontal direction (like gridiNx1); vert121 - 3 frames sorted in vertical direction, second frame divided on two sub-frames; horiz32_12 - 2 horizontal frames with 3 and 2 subframes, and 1/3 and 2/3 as relative size. When specifying files, items or opts parameters, array of strings could be provided like files=['file1.root','file2.root']. One could skip quotes when specifying elements names items=[file1.root/hpx,file2.root/hpy] or opts=['',colz].; As item name, URL to existing image can be provided like item=img:http://server/image.png. Such image will be just inserted in the existing layout. One could specify option ""scale"" to automatically scale image to available space.; Many examples of URL string usage can be found on JSROOT API examples page.; One can very easy integrate JSROOT graphic into arbitrary HTML pages using a iframe tag:; <iframe width=""700"" height=""400""; src=""https://root.cern/js/latest/?nobrowser&file=https://root.cern",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:4362,avail,available,4362,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['avail'],['available']
Availability,"eave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:35445,error,error,35445,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,4,['error'],['error']
Availability,"eb(const TCivetweb&); virtual~TCivetweb(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCreate(const char* args); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; THttpServer*THttpEngine::GetServer() const; virtual const char*TNamed::GetTitle() const; const char*GetTopName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCivetweb.html:2210,error,error,2210,root/html534/TCivetweb.html,https://root.cern,https://root.cern/root/html534/TCivetweb.html,1,['error'],['error']
Availability,"ebSystem::GetPathInfo ; (; const char * ; path, . FileStat_t & ; buf . ). overridevirtual . Get info about a file. ; Info is returned in the form of a FileStat_t structure (see TSystem.h). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented from TSystem.; Definition at line 1522 of file TWebFile.cxx. ◆ IsA(). TClass * TWebSystem::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSystem.; Definition at line 118 of file TWebFile.h. ◆ MakeDirectory(). Int_t TWebSystem::MakeDirectory ; (; const char * ; name). overridevirtual . Make a directory via httpd. Not supported. ; Reimplemented from TSystem.; Definition at line 1469 of file TWebFile.cxx. ◆ OpenDirectory(). void * TWebSystem::OpenDirectory ; (; const char * ; name). overridevirtual . Open a directory via httpd. ; Returns an opaque pointer to a dir structure. Returns 0 in case of error. ; Reimplemented from TSystem.; Definition at line 1478 of file TWebFile.cxx. ◆ Streamer(). void TWebSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSystem. ◆ StreamerNVirtual(). void TWebSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file TWebFile.h. ◆ Unlink(). Int_t TWebSystem::Unlink ; (; const char * ; path). overridevirtual . Unlink, i.e. ; remove, a file or directory. Returns 0 when successful, -1 in case of failure. Not supported for httpd. ; Reimplemented from TSystem.; Definition at line 1565 of file TWebFile.cxx. Member Data Documentation. ◆ fDirp. void* TWebSystem::fDirp. private . Definition at line 102 of file TWebFile.h. Libraries for TWebSystem:. [legend]; The documentation for this class was generated from the following files:; net/net/inc/TWebFile.h; net/net/src/TWebFile.cxx. TWebSystem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebSystem.html:36902,failure,failure,36902,doc/master/classTWebSystem.html,https://root.cern,https://root.cern/doc/master/classTWebSystem.html,1,['failure'],['failure']
Availability,"ebin2D. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Scale(Double_t c1 = 1, Option_t* option = """"); *-*-*-*-*Multiply this profile2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile2D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax); Redefine x and y axis parameters*-*-*-; *-* ===========================. void SetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); *-*Redefine x and y axis parameters for variable bin sizes ; *-* ===========================. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile2D errors; *-* =======================================. The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(Z)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(Z) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; See TProfile2D::BuildOptions for explanation of all options. void Streamer(TBuffer& b); Stream an object of class TProfile2D. void Sumw2(); Create structure to store sum of squares of weights per bin *-*-*-*-*-*-*-*; This is needed to compute the correct statistical quantities; of a profile filled with weights. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before. Int_t BufferFill(Double_t , Double_t ); {return -2;}. Int_t BufferFill(Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProfile2D.html:44825,error,errors,44825,root/html532/TProfile2D.html,https://root.cern,https://root.cern/root/html532/TProfile2D.html,1,['error'],['errors']
Availability,"ebinX(Int_t ngroup = 2, const char* newname = """"); Rebin only the X axis; see Rebin2D. TProfile2D * RebinY(Int_t ngroup = 2, const char* newname = """"); Rebin only the Y axis; see Rebin2D. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void Scale(Double_t c1 = 1, Option_t* option = """"); *-*-*-*-*Multiply this profile2D by a constant c1*-*-*-*-*-*-*-*-*; *-* ========================================. this = c1*this. This function uses the services of TProfile2D::Add. void SetBinEntries(Int_t bin, Double_t w); Set the number of entries in bin*-*-*-; *-* ================================. void SetBins(Int_t nbinsx, Double_t xmin, Double_t xmax, Int_t nbinsy, Double_t ymin, Double_t ymax); Redefine x axis parameters*-*-*-; *-* ===========================. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*-*Set option to compute profile2D errors; *-* =======================================. The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(Z)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(Z) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; See TProfile2D::BuildOptions for explanation of all options. void Streamer(TBuffer& b); Stream an object of class TProfile2D. void Sumw2(); Create structure to store sum of squares of weights per bin *-*-*-*-*-*-*-*; This is needed to compute the correct statistical quantities; of a profile filled with weights. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before. Int_t BufferFill(Double_t , Double_t ); {return -2;}. Int_t BufferFill(Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile2D.html:44111,error,errors,44111,root/html528/TProfile2D.html,https://root.cern,https://root.cern/root/html528/TProfile2D.html,2,['error'],['errors']
Availability,"ebug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. TRint(const TRint&); voidExecLogon(); TRint&operator=(const TRint&); virtual Long_tProcessRemote(const char* line, Int_t* error = 0). Data Members; public:. enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TApplication::EExitOnException { kDontExit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. private:. TStringfDefaultPromptdefault prompt: ""root [%d] ""; TFileHandler*fInputHandlerterminal input handler; Bool_tfInterruptif true macro execution will be stopped; Int_tfNcmdcommand history number; charfPrompt[64]interpreter prompt. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRint(const char* appClassName, int* argc, char** argv, void* options = 0, int numOptions = 0, Bool_t noLogo = kFALSE); Create an application environment. The TRint environment provides an; interface to the WM manager functionality and eventloop via inheritance; of TApplication and in addition provides interactive access to; the CINT C++ interpreter via the command line. ~TRint(); Destructor. void ExecLogon(); Execute logon macro's. There are thr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRint.html:11999,avail,available,11999,root/html528/TRint.html,https://root.cern,https://root.cern/root/html528/TRint.html,4,['avail'],['available']
Availability,"ec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4335,avail,available,4335,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['avail'],['available']
Availability,"ec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:4336,avail,available,4336,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['avail'],['available']
Availability,"ecContextCleanup(Int_t port, Int_t proto, Int_t type); virtual~TSecContextCleanup(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort() const; Int_tGetProtocol() const; virtual const char*TObject::GetTitle() const; Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSecContextCleanup.html:1484,error,error,1484,root/html528/TSecContextCleanup.html,https://root.cern,https://root.cern/root/html528/TSecContextCleanup.html,4,['error'],['error']
Availability,"ecalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. The function return kFALSE if the divide operation failed. Bool_t Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. Please note also that in the binomial case errors are calculated using standard; binomial statistics, which means when b1 = b2, the error is zero.; If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; error for the case b1=b2. The function return kFALSE if the divide operation failed. void Draw(Option_t* option = """"); Draw this histogram with options. Histograms are drawn via the THistPainter class. Each histogram has; a pointer to its own painter (to be usable in a multithreaded program).; The same histogram can be drawn with different options in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:63843,error,errors,63843,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['errors']
Availability,"ecause at a limit the derivative seen by the minimized \(\frac{\partial F}{\partial Pint}\) is zero no matter what the real derivative \(\frac{\partial F}{\partial Pext}\) is.; \[; \left(\frac{\partial F}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right); \left(\frac{\partial Pext}{\partial Pint}\right) =; \left(\frac{\partial F}{\partial Pext}\right) = 0; \]; 5.9.3.2 Getting the Right Parameter Errors with Limits; In the best case, where the minimum is far from any limits, Minuit will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you would not need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless.; 5.9.3.3 Interpretation of Parameter Errors; There are two kinds of problems that can arise: the reliability of Minuit’s error estimates, and their statistical interpretation, assuming they are accurate.; 5.9.3.4 Statistical Interpretation; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see the articles:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. 5.9.4 Reliability of Minuit Error Estimates; Minuit always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:220395,error,error,220395,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['error'],"['error', 'errors']"
Availability,"ecause it will try to prefetch the next block as soon as we start reading from the current block. ; Definition at line 1986 of file TTreeCache.cxx. ◆ ResetCache(). void TTreeCache::ResetCache ; (; ). virtual . This will simply clear the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2040 of file TTreeCache.cxx. ◆ ResetMissCache(). void TTreeCache::ResetMissCache ; (; ). Reset all the miss cache training. ; The contents of the miss cache will be emptied as well as the list of branches used. ; Definition at line 697 of file TTreeCache.cxx. ◆ SetAutoCreated(). void TTreeCache::SetAutoCreated ; (; bool ; val). inline . Definition at line 164 of file TTreeCache.h. ◆ SetBufferSize(). Int_t TTreeCache::SetBufferSize ; (; Long64_t ; buffersize). overridevirtual . Change the underlying buffer size of the cache. ; If the change of size means some cache content is lost, or if the buffer is now larger, setup for a cache refill the next time there is a read Buffersize might be clamped, see TFileCacheRead::SetBufferSize Returns:; 0 if the buffer content is still available; 1 if some or all of the buffer content has been made unavailable; -1 on error . Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip.; Definition at line 2073 of file TTreeCache.cxx. ◆ SetEntryRange(). void TTreeCache::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2106 of file TTreeCache.cxx. ◆ SetFile(). void TTreeCache::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). overridevirtual . Change the file that is being cached. ; Reimplemented from TFileCacheRead.; Definition at line 2128 of file TTreeCache.cxx. ◆ SetLearnEntries(). void TTreeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:48538,avail,available,48538,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,"['avail', 'error']","['available', 'error']"
Availability,"eceiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Attributes; Pixel_t fBgndColor;  background color ;  ; Pixel_t fHighColor;  highlight color ;  ; const TGPicture * fPic;  picture in scrollbar element ;  ; const TGPicture * fPicD;  picture for disabled state of scrollbar element ;  ; const TGPicture * fPicN;  picture for normal state of scrollbar element ;  ; Int_t fState;  state of scrollbar element (button up or down) ;  ; Int_t fStyle;  modern or classic style ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGScrollBarElement.html:21979,down,down,21979,doc/master/classTGScrollBarElement.html,https://root.cern,https://root.cern/doc/master/classTGScrollBarElement.html,1,['down'],['down']
Availability,"eces to insert the Box defined by bmin and; 148 // bmax. It will do so from the highest dimension until it gets; 149 // to 1 and create the corresponding boxes to divide the; 150 // original space.; 151 void DivideBox( const vector<double>& min, const vector<double>& max,; 152 const vector<double>& bmin, const vector<double>& bmax,; 153 const unsigned int size, const unsigned int n,; 154 list<Box>& l, const double val, const double error); 155 {; 156 vector<double> boxmin(min);; 157 vector<double> boxmax(max);; 158 ; 159 boxmin[n] = min[n];; 160 boxmax[n] = bmin[n];; 161 if ( for_each(boxmin.begin(), boxmin.end(), AreaComparer(boxmax.begin())).IsThereArea() ); 162 l.push_back(Box(boxmin, boxmax));; 163 ; 164 boxmin[n] = bmin[n];; 165 boxmax[n] = bmax[n];; 166 if ( n == 0 ); 167 {; 168 if ( for_each(boxmin.begin(), boxmin.end(), AreaComparer(boxmax.begin())).IsThereArea() ); 169 l.push_back(Box(boxmin, boxmax, val, error));; 170 }; 171 else; 172 DivideBox(boxmin, boxmax, bmin, bmax, size, n-1, l, val, error);; 173 ; 174 boxmin[n] = bmax[n];; 175 boxmax[n] = max[n];; 176 if ( for_each(boxmin.begin(), boxmin.end(), AreaComparer(boxmax.begin())).IsThereArea() ); 177 l.push_back(Box(boxmin, boxmax));; 178 }; 179 ; 180 class ProxyListBox; 181 {; 182 public:; 183 void PushBack(Box& box) { fProxy.push_back(box); }; 184 list<Box>::iterator Begin() { return fProxy.begin(); }; 185 list<Box>::iterator End() { return fProxy.end(); }; 186 void Remove(list<Box>::iterator it) { fProxy.erase(it); }; 187 list<Box>& GetList() { return fProxy; }; 188 private:; 189 list<Box> fProxy;; 190 };; 191 ; 192 ; 193 SparseData::SparseData(vector<double>& min, vector<double>& max); 194 {; 195 // Creates a SparseData covering the range defined by min; 196 // and max. For this it will create an empty Box for that; 197 // range.; 198 Box originalBox(min, max);; 199 fList = std::make_unique<ProxyListBox>();; 200 fList->PushBack(originalBox);; 201 }; 202 ; 203 SparseData::SparseData(const unsigned int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SparseData_8cxx_source.html:5358,error,error,5358,doc/master/SparseData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SparseData_8cxx_source.html,2,['error'],['error']
Availability,"ecially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the histogram represent counts (Poisson statistics), where the chi-square methods may give incorrect results, especially in case of low statistics. In case of a weighted histogram, it is possible to perform also a likelihood fit by using the option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:133174,error,errors,133174,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"ecified accuracy, the value of the integral.; Method: For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point and 16-point Gaussian quadrature approximations to ; \[; I = \int^{b}_{a} f(x)dx; \]. and define ; \[; r(a,b) = \frac{\left|g_{16}(a,b)-g_{8}(a,b)\right|}{1+\left|g_{16}(a,b)\right|}; \]. Then, ; \[; G = \sum_{i=1}^{k}g_{16}(x_{i-1},x_{i}); \]. where, starting with \(x_{0} = A\) and finishing with \(x_{k} = B\), the subdivision points \(x_{i}(i=1,2,...)\) are given by ; \[; x_{i} = x_{i-1} + \lambda(B-x_{i-1}); \]. \(\lambda\) is equal to the first member of the sequence 1,1/2,1/4,... for which \(r(x_{i-1}, x_{i}) < EPS\). If, at any stage in the process of subdivision, the ratio ; \[; q = \left|\frac{x_{i}-x_{i-1}}{B-A}\right|; \]. is so small that 1+0.005q is indistinguishable from 1 to machine accuracy, an error exit occurs with the function value set equal to zero.; Accuracy: The user provides absolute and relative error bounds (epsrel and epsabs) and the algorithm will stop when the estimated error is less than the epsabs OR is less than |I| * epsrel. Unless there is severe cancellation of positive and negative values of f(x) over the interval [A,B], the relative error may be considered as specifying a bound on the relative error of I in the case |I|>1, and a bound on the absolute error in the case |I|<1. More precisely, if k is the number of sub-intervals contributing to the approximation (see Method), and if ; \[; I_{abs} = \int^{B}_{A} \left|f(x)\right|dx; \]. then the relation ; \[; \frac{\left|G-I\right|}{I_{abs}+k} < EPS; \]. will nearly always be true, provided the routine terminates without printing an error message. For functions f having no singularities in the closed interval [A,B] the accuracy will usually be much higher than this.; Error handling: The requested accuracy cannot be obtained (see Method). The function value is set equal to zero.; Note 1: Values of the function f(x) at the interval end-points A and B are not requ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:7404,error,error,7404,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,2,['error'],['error']
Availability,"ecified dataset. ; A valid dataset manager and dataset staging requests repository must be present on the endpoint. PROOF-Lite version of the equivalent function from TProofServ. ; Reimplemented from TProof.; Definition at line 2223 of file TProofLite.cxx. ◆ GetTreeHeader(). TTree * TProofLite::GetTreeHeader ; (; TDSet * ; tdset). overridevirtual . Creates a tree header (a tree with nonexisting files) object for the DataSet. ; Reimplemented from TProof.; Definition at line 2397 of file TProofLite.cxx. ◆ Init(). Int_t TProofLite::Init ; (; const char * ; masterurl, . const char * ; conffile, . const char * ; confdir, . Int_t ; loglevel, . const char * ; alias = 0 . ). protected . Start the PROOF environment. ; Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 154 of file TProofLite.cxx. ◆ InitDataSetManager(). Int_t TProofLite::InitDataSetManager ; (; ). private . Initialize the dataset manager from directives or from defaults Return 0 on success, -1 on failure. ; Definition at line 1412 of file TProofLite.cxx. ◆ IsA(). TClass * TProofLite::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TProof.; Definition at line 170 of file TProofLite.h. ◆ Load(). Int_t TProofLite::Load ; (; const char * ; macro, . Bool_t ; notOnClient = kFALSE, . Bool_t ; uniqueOnly = kTRUE, . TList * ; wrks = 0 . ). overridevirtual . Copy the specified macro in the cache directory. ; The macro file is uploaded if new or updated. If existing, the corresponding header basename(macro).h or .hh, is also uploaded. For the other arguments see TProof::Load(). Returns 0 in case of success and -1 in case of error. ; Reimplemented from TProof.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:54117,error,error,54117,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['error'],['error']
Availability,"eck is not needed anymore, so classname is ignored). If; not it will load library ""libname"". If the library name does; not start with ""lib"", ""lib"" will be prepended and a search will; be made in the DynamicPath (see .rootrc). If not found a search; will be made on libname (without ""lib"" prepended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:31750,error,error,31750,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['error'],['error']
Availability,"eckRemote(). void TGCommandPlugin::CheckRemote ; (; const char * ; ). Check if actual ROOT session is a remote one or a local one. ; Definition at line 137 of file TGCommandPlugin.cxx. ◆ Class(). static TClass * TGCommandPlugin::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGCommandPlugin::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGCommandPlugin::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 56 of file TGCommandPlugin.h. ◆ DeclFileName(). static const char * TGCommandPlugin::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 56 of file TGCommandPlugin.h. ◆ GetHistAdd(). Bool_t TGCommandPlugin::GetHistAdd ; (; ). inline . Definition at line 50 of file TGCommandPlugin.h. ◆ HandleArrows(). void TGCommandPlugin::HandleArrows ; (; Int_t ; keysym). Handle the 'up' and 'down' arrow key events. ; Definition at line 164 of file TGCommandPlugin.cxx. ◆ HandleCommand(). void TGCommandPlugin::HandleCommand ; (; ). Handle command line from the ""command"" combo box. ; Definition at line 193 of file TGCommandPlugin.cxx. ◆ HandleTab(). void TGCommandPlugin::HandleTab ; (; ). Handle the 'TAB' key events. ; Definition at line 229 of file TGCommandPlugin.cxx. ◆ HandleTextChanged(). void TGCommandPlugin::HandleTextChanged ; (; const char * ; text). Handle the text changed events. ; Definition at line 264 of file TGCommandPlugin.cxx. ◆ HandleTimer(). Bool_t TGCommandPlugin::HandleTimer ; (; TTimer * ; t). overridevirtual . Handle timer event. ; Reimplemented from TObject.; Definition at line 272 of file TGCommandPlugin.cxx. ◆ IsA(). TClass * TGCommandPlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TGCommandPlugin.h. ◆ SetHistAdd(). void TGCommandPlugin::SetHistAdd ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCommandPlugin.html:37875,down,down,37875,doc/master/classTGCommandPlugin.html,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html,1,['down'],['down']
Availability,"eckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:28917,error,error,28917,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,4,['error'],['error']
Availability,"ecl & ; recordDecl . ). Definition at line 1395 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1337 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2559 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4108 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2788 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer part being intermixed. ; Definition at line 4334 of file TClingUtils.cxx. ◆ GetWarningsAreErrors(). bool & ROOT::TMetaUtils::GetWarningsAreErrors ; (; ). inline . Definition at line 764 of file TClingUtils.h. ◆ HasClassDefMacro(). bool ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html:37647,failure,failure,37647,doc/v632/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1TMetaUtils.html,1,['failure'],['failure']
Availability,"ecl & ; recordDecl . ). Definition at line 1435 of file TClingUtils.cxx. ◆ GetQualifiedName() [10/10]. void ROOT::TMetaUtils::GetQualifiedName ; (; std::string & ; qual_name, . const clang::Type & ; type, . const clang::NamedDecl & ; forcontext . ). Definition at line 1377 of file TClingUtils.cxx. ◆ GetRealPath(). std::string ROOT::TMetaUtils::GetRealPath ; (; const std::string & ; path). Returnsthe resolved normalized absolute path possibly resolving symlinks. ; Definition at line 72 of file TClingUtils.cxx. ◆ GetTrivialIntegralReturnValue(). std::pair< bool, int > ROOT::TMetaUtils::GetTrivialIntegralReturnValue ; (; const clang::FunctionDecl * ; funcCV, . const cling::Interpreter & ; interp . ). If the function contains 'just': return SomeValue; this routine will extract this value and return it. ; The first element is set to true we have the body of the function and it is indeed a trivial function with just a return of a value. The second element contains the value (or -1 is case of failure) ; Definition at line 2599 of file TClingUtils.cxx. ◆ GetTypeForIO(). clang::QualType ROOT::TMetaUtils::GetTypeForIO ; (; const clang::QualType & ; templateInstanceType, . const cling::Interpreter & ; interpreter, . const TNormalizedCtxt & ; normCtxt, . TClassEdit::EModType ; mode = TClassEdit::kNone . ). Definition at line 4154 of file TClingUtils.cxx. ◆ GetUnderlyingRecordDecl(). clang::RecordDecl * ROOT::TMetaUtils::GetUnderlyingRecordDecl ; (; clang::QualType ; type). Definition at line 2828 of file TClingUtils.cxx. ◆ GetUnderlyingType(). const clang::Type * ROOT::TMetaUtils::GetUnderlyingType ; (; clang::QualType ; type). Return the base/underlying type of a chain of array or pointers type. ; Does not yet support the array and pointer part being intermixed. ; Definition at line 4380 of file TClingUtils.cxx. ◆ GetWarningsAreErrors(). bool & ROOT::TMetaUtils::GetWarningsAreErrors ; (; ). inline . Definition at line 787 of file TClingUtils.h. ◆ HasClassDefMacro(). bool ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:37639,failure,failure,37639,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,1,['failure'],['failure']
Availability,"ecl);; 5718 specDecl->setHasExternalLexicalStorage();; 5719 ; 5720 // No need to recurse. On the contrary, recursing is actively harmful:; 5721 // NOTE: must not recurse to prevent this visitor from triggering loading from; 5722 // the external AST source (i.e. autoloading). This would be triggered right here,; 5723 // before autoloading is even set up, as rootmap file parsing happens before that.; 5724 // Even if autoloading is off and has no effect, triggering loading from external; 5725 // AST source resets the flag setHasExternalLexicalStorage(), hiding this specialization; 5726 // from subsequent autoloads!; 5727 return false;; 5728 }; 5729 private:; 5730 std::unordered_set<const NamespaceDecl*>& fNSSet;; 5731 };; 5732}; 5733 ; 5734////////////////////////////////////////////////////////////////////////////////; 5735/// Load map between class and library. If rootmapfile is specified a; 5736/// specific rootmap file can be added (typically used by ACLiC).; 5737/// In case of error -1 is returned, 0 otherwise.; 5738/// The interpreter uses this information to automatically load the shared; 5739/// library for a class (autoload mechanism), see the AutoLoad() methods below.; 5740 ; 5741Int_t TCling::LoadLibraryMap(const char* rootmapfile); 5742{; 5743 if (rootmapfile && *rootmapfile && !requiresRootMap(rootmapfile)); 5744 return 0;; 5745 ; 5746 R__LOCKGUARD(gInterpreterMutex);; 5747 ; 5748 // open the [system].rootmap files; 5749 if (!fMapfile) {; 5750 fMapfile = new TEnv();; 5751 fMapfile->IgnoreDuplicates(kTRUE);; 5752 fRootmapFiles = new TObjArray;; 5753 fRootmapFiles->SetOwner();; 5754 InitRootmapFile("".rootmap"");; 5755 }; 5756 ; 5757 // Prepare a list of all forward declarations for cling; 5758 // For some experiments it is easily as big as 500k characters. To be on the; 5759 // safe side, we go for 1M.; 5760 TUniqueString uniqueString(1048576);; 5761 ; 5762 // Load all rootmap files in the dynamic load path ((DY)LD_LIBRARY_PATH, etc.).; 5763 // A rootmap file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:223606,error,error,223606,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['error'],['error']
Availability,"eclaration ; Definition at line 48 of file TNetFileStager.h. ◆ GetPrefix(). void TNetFileStager::GetPrefix ; (; const char * ; url, . TString & ; pfx . ). staticprivate . Isolate prefix in url. ; Definition at line 71 of file TNetFileStager.cxx. ◆ IsA(). TClass * TNetFileStager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TFileStager.; Definition at line 48 of file TNetFileStager.h. ◆ IsStaged(). Bool_t TNetFileStager::IsStaged ; (; const char * ; path). overridevirtual . Check if the file defined by 'path' is ready to be used. ; Reimplemented from TFileStager.; Definition at line 50 of file TNetFileStager.cxx. ◆ IsValid(). Bool_t TNetFileStager::IsValid ; (; ); const. inlineoverridevirtual . Reimplemented from TFileStager.; Definition at line 44 of file TNetFileStager.h. ◆ Locate(). Int_t TNetFileStager::Locate ; (; const char * ; path, . TString & ; endpath . ). overridevirtual . Get actual end-point url for a path Returns 0 in case of success and 1 if any error occured. ; Reimplemented from TFileStager.; Definition at line 101 of file TNetFileStager.cxx. ◆ Matches(). Bool_t TNetFileStager::Matches ; (; const char * ; s). overridevirtual . Returns kTRUE if stager 's' is compatible with current stager. ; Avoids multiple instantiations of the potentially the same TNetSystem. ; Reimplemented from TFileStager.; Definition at line 125 of file TNetFileStager.cxx. ◆ Print(). void TNetFileStager::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print basic info about this stager. ; Reimplemented from TNamed.; Definition at line 92 of file TNetFileStager.cxx. ◆ Streamer(). void TNetFileStager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TFileStager. ◆ StreamerNVirtual(). void TNetFileStager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 48 of file TNetFileStager.h. Member Data Documentation. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFileStager.html:14882,error,error,14882,doc/master/classTNetFileStager.html,https://root.cern,https://root.cern/doc/master/classTNetFileStager.html,1,['error'],['error']
Availability,"ecomes more likely if the number of free parameters is very large, or if; 258 ; 259the parameters are badly scaled (not all of the same order of magnitude),; 260and correlations are also large. In any case, whether the; 261non-positive-definiteness is real or only numerical is largely irrelevant,; 262since in both cases the error matrix will be unreliable and the minimum; 263suspicious.; 264 ; 265##### An ill-posed problem:; 266 ; 267For questions of parameter dependence, see the discussion above on; 268positive-definiteness.; 269 ; 270Possible other mathematical problems are the following:; 271 ; 272##### Excessive numerical roundoff:; 273 ; 274Be especially careful of exponential and factorial functions which get big; 275very quickly and lose accuracy.; 276 ; 277##### Starting too far from the solution:; 278 ; 279The function may have unphysical local minima, especially at infinity in; 280some variables.; 281 ; 282##### Minuit parameter errors in the presence of limits; 283This concerns the way Minuit reports the symmetric (or parabolic) errors; 284on parameters. It does not apply to the errors reported from Minos, which; 285are in general asymmetric.; 286 ; 287The symmetric errors reported by Minuit are always calculated from; 288the covariance matrix, assuming that this matrix has been calculated,; 289usually as the result of a Migrad minimization or a direct; 290calculation by Hesse which inverts the second derivative matrix.; 291 ; 292When there are no limits on the parameter in question, the error reported; 293by Minuit should therefore be exactly equal to the square root of the; 294corresponding diagonal element of the error matrix reported by Minuit.; 295 ; 296However, when there are limits on the parameter, there is a transformation; 297between the internal parameter values seen by Minuit (which are unbounded); 298and the external parameter values seen by the user in FCN (which remain; 299inside the desired limits). Therefore the internal error matrix kept",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:13496,error,errors,13496,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['error'],['errors']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:11368,error,error,11368,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,5,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:9916,error,error,9916,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,2,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:13082,error,error,13082,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,12,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:53908,error,error,53908,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,572,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:10616,error,error,10616,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,2,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEventHandler.html:7736,error,error,7736,doc/master/classTGLEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGLEventHandler.html,1,['error'],['error']
Availability,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:54178,error,error,54178,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['error'],['error']
Availability,"ect * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:45647,error,error,45647,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['error'],['error']
Availability,"ect * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html:5744,error,error,5744,doc/master/classTASPaletteEditor_1_1LimitLine.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html,2,['error'],['error']
Availability,"ect ; Reimplemented from TObject.; Definition at line 164 of file TQpSolverBase.h. ◆ operator=(). TQpSolverBase & TQpSolverBase::operator= ; (; const TQpSolverBase & ; source). Assignment operator. ; Definition at line 330 of file TQpSolverBase.cxx. ◆ SetArTol(). void TQpSolverBase::SetArTol ; (; Double_t ; ar). inline . Definition at line 158 of file TQpSolverBase.h. ◆ SetMuTol(). void TQpSolverBase::SetMuTol ; (; Double_t ; m). inline . Definition at line 155 of file TQpSolverBase.h. ◆ Solve(). virtual Int_t TQpSolverBase::Solve ; (; TQpDataBase * ; prob, . TQpVar * ; iterate, . TQpResidual * ; resids . ). pure virtual . Implemented in TGondzioSolver, and TMehrotraSolver. ◆ Start(). void TQpSolverBase::Start ; (; TQpProbBase * ; formulation, . TQpVar * ; iterate, . TQpDataBase * ; prob, . TQpResidual * ; resid, . TQpVar * ; step . ). virtual . Implements a default starting-point heuristic. ; While interior-point theory places fairly loose restrictions on the choice of starting point, the choice of heuristic can significantly affect the robustness and efficiency of the algorithm. ; Definition at line 118 of file TQpSolverBase.cxx. ◆ SteveStart(). void TQpSolverBase::SteveStart ; (; TQpProbBase * ; formulation, . TQpVar * ; iterate, . TQpDataBase * ; prob, . TQpResidual * ; resid, . TQpVar * ; step . ). virtual . Starting point algorithm according to Stephen Wright. ; Definition at line 154 of file TQpSolverBase.cxx. ◆ Streamer(). void TQpSolverBase::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TQpSolverBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 164 of file TQpSolverBase.h. Member Data Documentation. ◆ fArtol. Double_t TQpSolverBase::fArtol. protected . Definition at line 81 of file TQpSolverBase.h. ◆ fDnorm. Double_t TQpSolverBase::fDnorm. protected . Definition at line 78 of file TQpSolverBase.h. ◆ fGamma_a. Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpSolverBase.html:17815,robust,robustness,17815,doc/master/classTQpSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpSolverBase.html,1,['robust'],['robustness']
Availability,"ect contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. void ForceReload(TClass* oldcl); we found at least one equivalent.; let's force a reload. void Init(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); Initialize a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const TClass& tc); copy constructor. TClass& operator=(const TClass& ); assignement operator. ~TClass(); TClass dtor. Deletes all list that might have been created. Int_t ReadRules(); Read the class.rules files from the default location:.; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules). Int_t ReadRules(const char* filename); Read a class.rules file which contains one rule per line with comment; starting with a #; Returns the number of rules loaded.; Returns -1 in case of error. Bool_t AddRule(const char* rule); Add a schema evolution customization rule.; The syntax of the rule can be either the short form:; [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClass.html:19154,error,error,19154,root/html528/TClass.html,https://root.cern,https://root.cern/root/html528/TClass.html,4,['error'],['error']
Availability,"ect is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorCint.html:8772,avail,available,8772,root/html602/TSelectorCint.html,https://root.cern,https://root.cern/root/html602/TSelectorCint.html,2,['avail'],['available']
Availability,"ect stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void Create (const char *url, TSocket *sock=nullptr);  Create a TNetSystem object. ;  ; void InitRemoteEntity (const char *url);  Parse and save coordinates of the remote entity (user, host, port, ...) ;  ;  Protected Member Functions inherited from TSystem; virtual void DoBeep (Int_t=-1, Int_t=-1) const;  ; virtual const char * ExpandFileName (const char *fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; virtual Bool_t ExpandFileName (TString &fname);  Expand a pathname getting rid of special shell characters like ~. ;  ; TSystem * FindHelper (const char *path, void *dirptr=nullptr);  Create helper TSystem to handle file and directory operations that might be special for remote file access. ;  ; TString & GetLastErrorString ();  Return the thread local storage for the custom last error message. ;  ; const TString & GetLastErrorString () const;  Return the thread local storage for the custom last error message. ;  ; virtual const char * GetLinkedLibraries ();  Get list of shared libraries loaded at the start of the executable. ;  ; virtual void SigAlarmInterruptsSyscalls (Bool_t);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fIsLocal;  ; TString fLocalPrefix;  ;  Protected Attributes inherited from TSystem; EAclicMode fAclicMode {kDefault};  ; Int_t fAclicProperties {0};  ; Int_t fBeepDuration {0};  ; Int_t fBeepFreq {0};  ; TString fBuildArch;  ; TString fBuildCompiler;  ; TString fBuildCompilerVersion;  ; TString fBuildCompilerVersionStr;  ; TString fBuildDir;  ; TString fBuildNode;  ; TSeqCollection * fCompiled {nullptr};  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetSystem.html:30570,error,error,30570,doc/master/classTNetSystem.html,https://root.cern,https://root.cern/doc/master/classTNetSystem.html,1,['error'],['error']
Availability,"ect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. Choosing the number of distributed tasks; A distributed RDataFrame has internal logic to define in how many chunks the input dataset will be split before sending tasks to the distributed backend. Each task reads and processes one of said chunks. The logic is backend-dependent, but generically tries to infer how many cores are available in the cluster through the connection object. The number of tasks will be equal to the inferred number of cores. There are cases where the connection object of the chosen backend doesn't have information about the actual resources of the cluster. An example of this is when using Dask to connect to a batch system. The client object created at the beginning of the application does not automatically know how many cores will be available during distributed execution, since the jobs are submitted to the batch system after the creation of the connection. In such cases, the logic is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:38408,avail,available,38408,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['avail'],['available']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoints3DABC.html:4230,error,error,4230,doc/master/classTPoints3DABC.html,https://root.cern,https://root.cern/doc/master/classTPoints3DABC.html,1,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJet.html:6931,error,error,6931,doc/master/classJet.html,https://root.cern,https://root.cern/doc/master/classJet.html,4,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:14777,error,error,14777,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,2,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:9934,error,error,9934,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,3,['error'],['error']
Availability,"ect using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:5534,error,error,5534,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,4,['error'],['error']
Availability,"ect& object) const; basic_ios<char,char_traits<char> >&basic_ios<char,char_traits<char> >::copyfmt(const basic_ios<char,char_traits<char> >& __rhs); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEnableOutput(); static TMVA::MsgLogger&Endmsg(TMVA::MsgLogger& logger); boolbasic_ios<char,char_traits<char> >::eof() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ios_base::iostatebasic_ios<char,char_traits<char> >::exceptions() const; voidbasic_ios<char,char_traits<char> >::exceptions(ios_base::iostate __except); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); boolbasic_ios<char,char_traits<char> >::fail() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill() const; basic_ios<char,char_traits<char> >::char_typebasic_ios<char,char_traits<char> >::fill(basic_ios<char,char_traits<char> >::char_type __ch); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ios_base::fmtflagsios_base::flags() const; ios_base::fmtflagsios_base::flags(ios_base::fmtflags __fmtfl); basic_ostream<char,char_traits<char> >::__ostream_type&basic_ostream<char,char_traits<char> >::flush(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); stringGetFormattedSource() const; virtual const char*TObject::GetIconName() const; localeios_base::getloc() const; static UInt_tGetMaxSourceS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MsgLogger.html:2230,error,error,2230,root/html602/TMVA__MsgLogger.html,https://root.cern,https://root.cern/root/html602/TMVA__MsgLogger.html,2,['error'],['error']
Availability,"ect*Clone(const char* newname = """") const; virtual Int_tCommand(const char* command); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual TObject*Contour(Int_t npoints = 10, Int_t pa1 = 0, Int_t pa2 = 1); virtual voidTNamed::Copy(TObject& named) const; virtual Int_tDefineParameter(Int_t parNo, const char* name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteArrays(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tEval(Int_t npar, Double_t* grad, Double_t& fval, Double_t* par, Int_t flag); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tFixParameter(Int_t parNo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetMaxIterations() const; TMethodCall*GetMethodCall() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumFixedPars() const; virtual Int_tGetNumFreePars() const; virtual Int_tGetNumPars() const; TObject*GetObjectFit() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetParamete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:15651,error,error,15651,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['error']
Availability,"ect*TNamed::Clone(const char* newname = """") const; virtual TObject*CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject&) const; static voidDecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidDelete(const char* namecycle = """"); virtual voidDeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*FindKey(const char*) const; virtual TKey*FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char*) const; virtual TObject*Get(const char* namecycle); virtual Int_tGetBufferSize() const; virtual TDirectory*GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TFile*GetFile() const; virtual const char*TObject::GetIconName() const; virtual TKey*GetKey(const char*, Short_t = 9999) const; virtual TList*GetList() const; virtual TList*GetListOfKeys() const; virtual TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDirectory.html:2104,error,error,2104,root/html528/TDirectory.html,https://root.cern,https://root.cern/root/html528/TDirectory.html,2,['error'],['error']
Availability,"ect*TObjectSet::AddObject(TObject* obj, Bool_t makeOwner = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); TDataSet*TDataSet::At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObjectSet::Delete(Option_t* opt = """"); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTObjectSet::DoOwner(Bool_t done = kTRUE); virtual voidDraw(Option_t* depth = ""3"")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetGlobalRange(const TVolumeView* rootNode, Float_t* min, Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolumeView.html:2976,error,error,2976,root/html528/TVolumeView.html,https://root.cern,https://root.cern/root/html528/TVolumeView.html,6,['error'],['error']
Availability,"ect. ; The user must delete the TMessage object. Returns length of message in bytes (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read) or -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 818 of file TSocket.cxx. ◆ RecvProcessIDs(). Bool_t TSocket::RecvProcessIDs ; (; TMessage * ; mess). protected . Receive a message containing process ids. ; In case the message contains process ids they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 975 of file TSocket.cxx. ◆ RecvRaw(). Int_t TSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 898 of file TSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 928 of file TSocket.cxx. ◆ Select(). Int_t TSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:33577,error,error,33577,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['error'],['error']
Availability,"ect.cxx:213; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SavePrimitivevirtual void SavePrimitive(std::ostream &out, Option_t *option="""")Save a primitive as a C++ statement(s) on output stream ""out"".Definition TObject.cxx:757; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::CapacitySsiz_t Capacity() constDefinition TString.h:364; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:160632,error,error,160632,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['error'],['error']
Availability,"ect::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveGridStepper*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGridStepperEditor.html:18213,mask,mask,18213,root/html602/TEveGridStepperEditor.html,https://root.cern,https://root.cern/root/html602/TEveGridStepperEditor.html,2,['mask'],['mask']
Availability,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Atom_tfAcceptedActionaccepted and local actions; Cursor_tfDNDNoDropCursorno drop cursor type; TGDragWindow*fDragWindrag window; Atom_t*fDraggerTypeslists of DND types; Bool_tfDraggingkTRUE while dragging; Bool_tfDropAcceptedkTRUE if drop accepted; TTimer*fDropTimeoutdrop timeout; Atom_tfDropTypedrop type; UInt_tfGrabEventMaskpointer grab event mask; Int_tfHotxhot point coordinates; Int_tfHotyhot point coordinates; Atom_tfLocalActionaccepted and local actions; TGFrame*fLocalSourcelocal source and target; TGFrame*fLocalTargetlocal source and target; TGFrame*fMainpointer on TGMainFrame; Pixmap_tfMaskpixmap used for the drag window; Pixmap_tfPicpixmap used for the drag window; Bool_tfProxyOurskTRUE if root proxy is ours; Window_tfSourcesource and target windows; Bool_tfStatusPendingkTRUE if status is pending; Window_tfTargetsource and target windows; Bool_tfTargetIsDNDAwarekTRUE if target is DND aware; Atom_t*fTypelistlists of DND types; Bool_tfUseVersionkTRUE if DND version is used; Atom_tfVersionnot really an Atom, but a long; static Atom_tfgDNDActionAsk; static Atom_tfgDNDActionCopy; static Atom_tfgDNDActionDescrip; static Atom_tfgDNDActionLink; static Atom_tfgDNDActionList; static Atom_tfgDNDActionMove; static Atom_tfgDNDActionPrivate; static Atom_tfgDNDAware; static Atom_tfgDNDDrop; static Atom_tfgDNDEnter; static Atom_tfgDNDFinished; static Atom_tfgDNDLeave; static Atom_tfgDNDPosition; static Atom_tfgDNDProxy; static Atom_tfgDNDSelection; static Atom_tfgDNDStatus; static Atom_tfgDNDTypeList; static Atom_tfgDNDVersion; static Bool_tfgInit; static Atom_tfgXAWMState; static Atom_tfgXCDNDData. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDNDManager(TGFrame* toplevel, Atom_t* typelist); TGDNDManager constructor. ~TGDNDManager(); TGDND",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDNDManager.html:8037,mask,mask,8037,root/html602/TGDNDManager.html,https://root.cern,https://root.cern/root/html602/TGDNDManager.html,2,['mask'],['mask']
Availability,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGPicture.html:7253,mask,mask,7253,root/html604/TGPicture.html,https://root.cern,https://root.cern/root/html604/TGPicture.html,1,['mask'],['mask']
Availability,"ect::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TRefCnt::EReferenceFlagTRefCnt::kStaticInit; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. PictureAttributes_tfAttributespicture attributes; Pixmap_tfMaskpicture mask pixmap; TStringfNamename of picture; Pixmap_tfPicpicture pixmap; UInt_tTRefCnt::fRefs(1 less than) number of references; Bool_tfScaledkTRUE if picture is scaled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0); ctor. Important: both pixmaps pxmap and mask must be unique (not shared). void Draw(Handle_t id, GContext_t gc, Int_t x, Int_t y) const; Draw a picture. ~TGPicture(); Delete picture object. const char * HashName(const char* name, Int_t width, Int_t height); Static function returning a unique name used to look up a picture.; The unique name has the form ""name__widthxheight"". void Print(Option_t* option = """") const; Print picture info. TGPicture(const char* name, Bool_t scaled = kFALSE). TGPicture(const char* name, Pixmap_t pxmap, Pixmap_t mask = 0). void Draw(Option_t* = """"); override default of TObject. { MayNotUse(""Draw(Option_t*)""); }. const char * GetName() const; { return fName; }. UInt_t GetWidth() const; { return fAttributes.fWidth; }. UInt_t GetHeight() const; { return fAttributes.fHeight; }. Pixmap_t GetPicture() const; { return fPic; }. Pixmap_t GetMask() const; { return fMask; }. Bool_t IsScaled() const; { return fScaled; }. ULong_t Hash() const; { return fName.Hash(); }. TGSelectedPicture& operator=(const TGPicture& ). » Author: Fons Rademakers 01/01/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPicture.html:7253,mask,mask,7253,root/html602/TGPicture.html,https://root.cern,https://root.cern/root/html602/TGPicture.html,1,['mask'],['mask']
Availability,ect::(anonymous)TObject::kZombie. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*TUnfoldSys::fAoutsideInput: underflow/overflow bins; TMap*TUnfoldSys::fBgrErrScaleInInput: background sources correlated error; TMap*TUnfoldSys::fBgrErrUncorrInSqInput: uncorr error squared from bgr sources; TMap*TUnfoldSys::fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; const TUnfoldBinning*fConstInputBinsbinning scheme for the input; const TUnfoldBinning*fConstOutputBinsbinning scheme for the output; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*TUnfoldSys::fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*TUnfoldSys::fDAinRelSqInput: normalized errors from input matrix; TMap*TUnfoldSys::fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*TUnfoldSys::fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*TUnfoldSys::fDeltaSysTauResult: systematic shift from tau; Double_tTUnfoldSys::fDtauInput: error on tau; TMatrixDSparse*TUnfoldSys::fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*TUnfoldSys::fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLInput: regularisation conditions; TUnfoldBinning*fOwnedInputBinsinput binning scheme if owner; TUnfoldBinning*fOwnedOutputBinsoutput binning scheme if owner; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TUnfoldBinning*fRegularisationConditionsbinning scheme for the regularisation conditions; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*TUnfoldSys::fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*TUnfoldSys::fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldDensity.html:22491,error,error,22491,root/html602/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html602/TUnfoldDensity.html,2,['error'],['error']
Availability,"ect::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TList*Browse(); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClassName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tGetFileStat(FileStat_t* sbuf); virtual const char*TObject::GetIconName() const; const char*GetKeyClassName() const; const char*GetKeyObjectName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRemoteObject.html:1892,error,error,1892,root/html528/TRemoteObject.html,https://root.cern,https://root.cern/root/html528/TRemoteObject.html,6,['error'],['error']
Availability,"ect::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; static Int_tConvertISAtoPDG(Int_t isaNumber); virtual voidTNamed::Copy(TObject& named) const; static voidDefinePDG(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetCharge() const; virtual Double_tGetDecayWidth() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetEnergyCut() const; virtual Double_tGetEnergyLimit() const; virtual Double_tGetGranularity() const; virtual const char*TObject::GetIconName() const; virtual Double_tGetMass() const; virtual Int_tGetMCNumber() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TAttParticle*GetParticle(const char* name); static TAttParticle*GetParticle(Int_t mcnu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttParticle.html:1794,error,error,1794,root/html526/TAttParticle.html,https://root.cern,https://root.cern/root/html526/TAttParticle.html,7,['error'],['error']
Availability,"ect::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsNumGenerator*createSampler(RooAbsReal& func, const RooArgSet& genVars, const RooArgSet& condVars, const RooNumGenConfig& config, Bool_t verbose = kFALSE, RooAbsReal* maxFuncVal = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const RooAbsNumGenerator*getProtoSampler(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumGenFactory.html:1972,error,error,1972,root/html526/RooNumGenFactory.html,https://root.cern,https://root.cern/root/html526/RooNumGenFactory.html,7,['error'],['error']
Availability,"ect::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TSlave::GetGroup() const; virtual const char*TObject::GetIconName() const; const char*TSlave::GetImage() const; TFileHandler*TSlave::GetInputHandler() const; const char*TSlave::GetMsd() const; virtual const char*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_tTSlave::GetParallel() const; Int_tTSlave::GetPerfIdx() const; Int_tTSlave::GetPort(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlaveLite.html:1693,error,error,1693,root/html528/TSlaveLite.html,https://root.cern,https://root.cern/root/html528/TSlaveLite.html,12,['error'],['error']
Availability,"ect::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual doubleTMatrixTBase<double>::ColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual voidDeterminant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTMatrixTBase<double>::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual doubleTMatrixTBase<double>::E2Norm() const; const TMatrixT<double>EigenVectors(TVectorT<double>& eigenValues) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTMatrixTBase<double>::ExtractRow(Int_t row, Int_t col, double* v, Int_t n = -1) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const Int_t*GetColIndexArray() const; virtual Int_t*GetColIndexArray(); Int_tTMatrixTBase<double>::GetColLwb() const; Int_tTMatrixTBase<double>::GetColUpb() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual voidTMatrixTBase<double>::GetMatrix2Array(double* data, Option_t* option = """") const; virtual const double*GetMatrixArray() const; virtual double*GetMatrixArray(); virtual const char*TObject::GetName() const; Int_tTMatrixTBase<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_double_.html:2905,error,error,2905,root/html528/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_double_.html,12,['error'],['error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAmplitude() const; Bool_tGetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyLine.html:2127,error,error,2127,root/html526/TCurlyLine.html,https://root.cern,https://root.cern/root/html526/TCurlyLine.html,4,['error'],['error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAmplitude() const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); Bool_tGetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCurlyLine.html:2146,error,error,2146,root/html534/TCurlyLine.html,https://root.cern,https://root.cern/root/html534/TCurlyLine.html,3,['error'],['error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTCurlyLine::GetAmplitude() const; Bool_tTCurlyLine::GetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTCurlyLine::GetEndX() const; Double_tTCurlyLine::GetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCurlyArc.html:2138,error,error,2138,root/html526/TCurlyArc.html,https://root.cern,https://root.cern/root/html526/TCurlyArc.html,4,['error'],['error']
Availability,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTCurlyLine::GetAmplitude() const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); Bool_tTCurlyLine::GetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTCurlyLine::GetEndX() const; Double_tTCurlyLine::GetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCurlyArc.html:2138,error,error,2138,root/html534/TCurlyArc.html,https://root.cern,https://root.cern/root/html534/TCurlyArc.html,3,['error'],['error']
Availability,"ect::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* f1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """") const; virtual TH1*DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidDrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidEval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t x); virtual Int_tFill(Double_t x, Double_t w); virtual Int_tFill(const char* name, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); virtual voidFillN(Int_t, const Double_t*, const Double_t*, const Double_t*, Int_t); virtual voidFillRandom(const char* fname, Int_t ntimes = 5000); virtual voidFillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tFindBin(Double_t x, Double_t y = 0, Double_t z = 0); virtual Int_tFindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; virtual Int_tFindFixBin(Double_t x, Double_t y = 0, Double_t z = 0) const; virtual Int_tFindLastBinAbove(Double_t thresh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:19529,error,error,19529,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['error']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInspectCanvas.html:6259,error,error,6259,root/html534/TInspectCanvas.html,https://root.cern,https://root.cern/root/html534/TInspectCanvas.html,1,['error'],['error']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; TButton*GetBackward() const; virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp*TCanvas::GetCanvasImp() const; TVirtualPadP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInspectCanvas.html:6117,error,error,6117,root/html528/TInspectCanvas.html,https://root.cern,https://root.cern/root/html528/TInspectCanvas.html,3,['error'],['error']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDialogCanvas.html:6757,error,error,6757,root/html534/TDialogCanvas.html,https://root.cern,https://root.cern/root/html534/TDialogCanvas.html,1,['error'],['error']
Availability,"ect::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTCanvas::EnterLeave(TPad* prevSelPad, TObject* prevSelObj); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTCanvas::FeedbackMode(Bool_t set); virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; voidTCanvas::Flush(); voidTCanvas::ForceUpdate(); virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; Bool_tTCanvas::GetAutoExec() const; virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTCanvas::GetCanvasID() const; virtual TCanvasImp*TCanvas::GetCanvasImp() const; TVirtualPadPainter*TCanvas::GetCanvasPain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDialogCanvas.html:6645,error,error,6645,root/html528/TDialogCanvas.html,https://root.cern,https://root.cern/root/html528/TDialogCanvas.html,3,['error'],['error']
Availability,"ect::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:4500,error,error,4500,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,2,['error'],['error']
Availability,"ect::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEncodeText(TGString* str, const char* z); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGHtmlElement*FindEndNest(TGHtmlElement* sp, int en, TGHtmlElement* lp); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual intFormAction(TGHtmlForm*, int); virtual intFormCreate(TGHtmlForm*, const char*, const char*); virtual Pixel_tTGFrame::GetBackground() const; const char*GetBaseUri() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGViewFrame*TGView::GetCanvas() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:4678,error,error,4678,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,4,['error'],['error']
Availability,"ect::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnable(Bool_t on = kTRUE)TOGGLE GETTER ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; Int_tTGTextButton::GetBottomMargin() const; TGClient*TGObject::GetClient() const; Pixel_tGetColor() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); static FontStruct_tTGCheckButton::GetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&TGCheckButton::GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame::GetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGColorSelect.html:4967,error,error,4967,root/html602/TGColorSelect.html,https://root.cern,https://root.cern/root/html602/TGColorSelect.html,2,['error'],['error']
Availability,"ect::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataDir() const; const char*GetDataDirOpts() const; static TMap*GetDataSetNodeMap(TFileCollection* fc, TString& emsg); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Float_tGetE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:4407,error,error,4407,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,2,['error'],['error']
Availability,"ect::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TObjArrayfBackgroundpacked input background; TObjArrayfCandidatespacked input candidates (data); TObjArrayfDummyIdsarray of dummy object (used for bookeeping); TObjArrayfDummyTAarray of dummy object (used for bookeeping); TObjArrayfErrorOnBackgroundpacked error sources for background; TObjArrayfErrorOnSignalpacked error sources for signal; TObjArrayfIdspacked IDs for the different error sources; TObjArrayfSignalpacked input signal. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLimitDataSource(); Default constructor. TLimitDataSource(TH1* s, TH1* b, TH1* d); Another constructor, directly adds one channel; with signal, background and data given as input. TLimitDataSource(TH1* s, TH1* b, TH1* d, TVectorD* es, TVectorD* eb, TObjArray* names); Another constructor, directly adds one channel; with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* ); Adds a channel with signal, background and data given as input. void AddChannel(TH1* , TH1* , TH1* , TVectorD* , TVectorD* , TObjArray* ); Adds a channel with signal, background and data given as input.; In addition, error sources are defined.; TH1 are here used for convenience: each bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLimitDataSource.html:6447,error,error,6447,root/html602/TLimitDataSource.html,https://root.cern,https://root.cern/root/html602/TLimitDataSource.html,6,['error'],['error']
Availability,"ect::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTMacro::SaveSource(FILE* fp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TMacro::fLinescollection of lines; TStringTNamed::fNameobject identifier; TStringTMacro::fParamsdefault string of macro parameters; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveMacro(); Default constructor. TEveMacro(const TEveMacro& ); Copy constructor. TEveMacro(const char* name); Constructor with file name. Long_t Exec(const char* params = ""0"", Int_t* error = 0); Execute the macro. void ResetRoot(); Call gROOT->Reset() via interpreter. virtual ~TEveMacro(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveMacro.html:6896,error,error,6896,root/html604/TEveMacro.html,https://root.cern,https://root.cern/root/html604/TEveMacro.html,1,['error'],['error']
Availability,"ect::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTMacro::SaveSource(FILE* fp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TMacro::fLinescollection of lines; TStringTNamed::fNameobject identifier; TStringTMacro::fParamsdefault string of macro parameters; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveMacro(); Default constructor. TEveMacro(const TEveMacro& ); Copy constructor. TEveMacro(const char* name); Constructor with file name. Long_t Exec(const char* params = ""0"", Int_t* error = 0); Execute the macro. void ResetRoot(); Call gROOT->Reset() via interpreter. virtual ~TEveMacro(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveMacro.html:6896,error,error,6896,root/html602/TEveMacro.html,https://root.cern,https://root.cern/root/html602/TEveMacro.html,1,['error'],['error']
Availability,"ect::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads; static TProof::ESlavesTProof::kActive; static TProof::ESlavesTProof::kAll; static TProof::ESlavesTProof::kAllUnique; static TProof::ESlavesTProof::kUnique. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Start super master PROOF session. Bool_t StartSlaves(Bool_t ); Start up PROOF submasters. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void ValidateDSet(TDSet* dset); Validate a TDSet. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is sm. Socket is needed in case a slave player is created. TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); { }. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); { return TProof::Process(fc, sel, o, nent, fst); }. Long64_t Process(const char* dsname, const char* sel, Option_t* o = """", Long64_t nent = -1, Long64_t fst = 0, TObject* enl = 0); { return TProof::Process(dsname, sel, o, nent, fst, enl); }. Long64_t Process(const char* sel, Long64_t nent, Option_t* o = """"); Proc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofSuperMaster.html:28250,error,error,28250,root/html602/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofSuperMaster.html,2,['error'],['error']
Availability,"ect::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TGraph::(anonymous)TGraph::kNotEditable; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_t*TGraphErrors::fEX[fNpoints] array of X errors; Double_t*TGraphErrors::fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TGraphPolargram*fPolargramThe polar coordinates system; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*fXpol[fNpoints] points in polar coordinates; Double_t*TGraph::fY[fNpoints] array of Y points; Double_t*fYpol[fNpoints] points in polar coordinates. private:. Bool_tfOptionAxisForce drawing of new coord system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphPolar(); TGraphPolar default constructor. TGraphPolar(Int_t n, const Double_t* theta = 0, const Double_t* r = 0, const Double_t* etheta = 0, const Double_t* er = 0); TGraphPolar constructor. n : number of points.; theta : angular values.; r : radial values.; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphPolar.html:14716,error,errors,14716,root/html602/TGraphPolar.html,https://root.cern,https://root.cern/root/html602/TGraphPolar.html,4,['error'],['errors']
Availability,"ect; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Window_t fInput;  Input Window. ;  ; Pixmap_t fMask;  Pixmaps used as Window shape. ;  ; UInt_t fPh;  Hot point coordinates (x and y) ;  ; Pixmap_t fPic;  ; UInt_t fPw;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Cursor_t fgDefaultCursor = kNone;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDragWindow.html:23337,mask,mask,23337,doc/master/classTGDragWindow.html,https://root.cern,https://root.cern/doc/master/classTGDragWindow.html,1,['mask'],['mask']
Availability,"ectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooWorkspace(w) w contents; ; variables; ---------; (a0,a1,bkgfrac,mean,sig1frac,sigma1,sigma2,x); ; p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:10732,error,error,10732,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,4,['error'],['error']
Availability,"ectRefSpy(TObject*& obj, Bool_t fixMustCleanupBit = kTRUE); virtual~TObjectRefSpy(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObjectRefSpy.html:1666,error,error,1666,root/html528/TObjectRefSpy.html,https://root.cern,https://root.cern/root/html528/TObjectRefSpy.html,4,['error'],['error']
Availability,ected . Frame that contains the Frame Fill widgets. ; Definition at line 56 of file TH2Editor.h. ◆ f6. TGCompositeFrame* TH2Editor::f6. protected . Frame that contains the 2D CheckBox DrawOptions. ; Definition at line 52 of file TH2Editor.h. ◆ f9. TGCompositeFrame* TH2Editor::f9. protected . Frame that contains the 3D CheckBox DrawOptions. ; Definition at line 53 of file TH2Editor.h. ◆ fAddArr. TGCheckButton* TH2Editor::fAddArr. protected . CheckBox connected to Arr-Option. ; Definition at line 60 of file TH2Editor.h. ◆ fAddBB. TGCheckButton* TH2Editor::fAddBB. protected . Draw back box (or not) ; Definition at line 65 of file TH2Editor.h. ◆ fAddBox. TGCheckButton* TH2Editor::fAddBox. protected . CheckBox connected to Box-Option. ; Definition at line 61 of file TH2Editor.h. ◆ fAddCol. TGCheckButton* TH2Editor::fAddCol. protected . CheckBox connected to Col-Option. ; Definition at line 63 of file TH2Editor.h. ◆ fAddError. TGCheckButton* TH2Editor::fAddError. protected . CheckBox connected to error bars. ; Definition at line 57 of file TH2Editor.h. ◆ fAddFB. TGCheckButton* TH2Editor::fAddFB. protected . Draw front box (or not) ; Definition at line 64 of file TH2Editor.h. ◆ fAddPalette. TGCheckButton* TH2Editor::fAddPalette. protected . CheckBox connected to Z option (2D) ; Definition at line 58 of file TH2Editor.h. ◆ fAddPalette1. TGCheckButton* TH2Editor::fAddPalette1. protected . CheckBox connected to Z option (3D) ; Definition at line 59 of file TH2Editor.h. ◆ fAddScat. TGCheckButton* TH2Editor::fAddScat. protected . CheckBox connected to Scat-Option. ; Definition at line 62 of file TH2Editor.h. ◆ fAddText. TGCheckButton* TH2Editor::fAddText. protected . Draw bin contents as text. ; Definition at line 66 of file TH2Editor.h. ◆ fApply. TGTextButton* TH2Editor::fApply. protected . Apply-Button to accept the rebinned histogram. ; Definition at line 76 of file TH2Editor.h. ◆ fBarOffset. TGNumberEntry* TH2Editor::fBarOffset. protected . Set bar offset of histogram. ; De,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Editor.html:59337,error,error,59337,doc/master/classTH2Editor.html,https://root.cern,https://root.cern/doc/master/classTH2Editor.html,1,['error'],['error']
Availability,"ected basis function; set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static RooFormulaVar*_identityIdentity basis function pointe; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooResolutionModel.html:40514,error,errors,40514,root/html532/RooResolutionModel.html,https://root.cern,https://root.cern/root/html532/RooResolutionModel.html,1,['error'],['errors']
Availability,"ected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const RooXYChi2Var& other, const char* name = 0); Copy constructor. void initialize(); Common constructor initialization. void initIntegrator(); Initialize bin content integrator. ~RooXYChi2Var(); Destructor. Double_t xErrorContribution(Double_t ydata) const; Calculate contribution to internal error due to error on 'x' coordinates; at point i. Double_t fy() const; Return function value requested bu present configuration. If integration is required, the function value integrated; over the bin volume divided by the bin volume is returned,; otherwise the value at the bin center is returned.; The bin volume is defined by the error on the 'X' coordinates. If an extended p.d.f. is used as function, its value is; also multiplied by the expected number of events here. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const; Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize. RooArgSet requiredExtraObservables() const; Inform base class that observable yvar cannot be optimized away from the dataset. TObject* clone(const char* newname) const; { return new RooXYChi2Var(*this,newname); }. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& , const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:40344,error,error,40344,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,14,['error'],['error']
Availability,"ected:. Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TImage*fImageimage; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; TStringfPathdirectory of image; const TGPicture*fPicicon picture; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGIcon.html:15302,mask,mask,15302,root/html528/TGIcon.html,https://root.cern,https://root.cern/root/html528/TGIcon.html,4,['mask'],['mask']
Availability,"ected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofServ.html:17065,error,error,17065,root/html528/TXProofServ.html,https://root.cern,https://root.cern/root/html528/TXProofServ.html,3,['error'],['error']
Availability,"ection has been closed. In case of failure fRestartAt is set to the number of bytes correclty transfered. Calling PutFile() immediately afterwards will restart at fRestartAt. If this is not desired call SetRestartAt(0) before calling PutFile(). If rootd reports that the file is locked, and you are sure this is not the case (e.g. due to a crash), you can force unlock it by prepending the remoteName with a '-'. ; Definition at line 233 of file TFTP.cxx. ◆ pwd(). void TFTP::pwd ; (; ); const. inline . Definition at line 117 of file TFTP.h. ◆ Recv(). Int_t TFTP::Recv ; (; Int_t & ; status, . EMessageTypes & ; kind . ); const. private . Return status from rootd server and message kind. ; Returns -1 in case of error otherwise 8 (sizeof 2 words, status and kind). ; Definition at line 191 of file TFTP.cxx. ◆ RenameFile(). Int_t TFTP::RenameFile ; (; const char * ; file1, . const char * ; file2 . ); const. Rename a remote file. ; Anonymous users may not rename files. Returns 0 in case of success and -1 in case of failure. ; Definition at line 790 of file TFTP.cxx. ◆ rm(). void TFTP::rm ; (; const char * ; file); const. inline . Definition at line 119 of file TFTP.h. ◆ rmdir(). void TFTP::rmdir ; (; const char * ; dir); const. inline . Definition at line 115 of file TFTP.h. ◆ SetBlockSize(). void TFTP::SetBlockSize ; (; Int_t ; blockSize). Make sure the block size is a power of two, with a minimum of 32768. ; Definition at line 207 of file TFTP.cxx. ◆ SetMode(). void TFTP::SetMode ; (; Int_t ; mode). inlineprivate . Definition at line 62 of file TFTP.h. ◆ SetRestartAt(). void TFTP::SetRestartAt ; (; Long64_t ; at). inline . Definition at line 81 of file TFTP.h. ◆ Streamer(). void TFTP::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFTP::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 125 of file TFTP.h. Member Data Documentation. ◆ fBloc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:23120,failure,failure,23120,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['failure'],['failure']
Availability,"ection(). void TGX11::ConvertSelection ; (; Window_t ; win, . Atom_t & ; sel, . Atom_t & ; target, . Atom_t & ; prop, . Time_t & ; stamp . ). overridevirtual . Requests that the specified selection be converted to the specified target type. ; Reimplemented from TVirtualX.; Definition at line 2732 of file GX11Gui.cxx. ◆ CopyArea(). void TGX11::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Copy a drawable (i.e. ; pixmap) to another drawable (pixmap, window). The graphics context gc will be used and the source will be copied from src_x,src_y,src_x+width,src_y+height to dest_x,dest_y. ; Reimplemented from TVirtualX.; Definition at line 1685 of file GX11Gui.cxx. ◆ CopyGC(). void TGX11::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies graphics context from org to dest. ; Only the values specified in mask are copied. If mask = 0 then copy all fields. Both org and dest must exist. ; Reimplemented from TVirtualX.; Definition at line 1012 of file GX11Gui.cxx. ◆ CopyPixmap(). void TGX11::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copy the pixmap wid at the position xpos, ypos in the current window. ; Reimplemented from TVirtualX.; Definition at line 496 of file TGX11.cxx. ◆ CopyWindowtoPixmap(). void TGX11::CopyWindowtoPixmap ; (; Drawable * ; pix, . Int_t ; xpos, . Int_t ; ypos . ). private . Copy area of current window in the pixmap pix. ; Definition at line 508 of file TGX11.cxx. ◆ CreateBitmap(). Pixmap_t TGX11::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ; Reimplemented from TVirtualX.; Definition at line 1082 of file GX11Gui.cxx. ◆ CreateCursor(). Cursor_t TGX11::CreateCursor ; (; ECursor ; curs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:61270,mask,mask,61270,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['mask'],['mask']
